/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.buddy_management_service;

import 'dart:async';
import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';


abstract class BuddyManagementService {

  Future addBuddyMember(String requestId, String userMid);

  Future addBuddyMembers(String requestId, List<String> userMids);

  Future blockBuddyMember(String requestId, String mid);

  Future<List<SendBuddyMessageResult>> commitSendMessagesToAll(List<String> requestIdList);

  Future<List<SendBuddyMessageResult>> commitSendMessagesToMids(List<String> requestIdList, List<String> mids);

  Future<bool> containsBuddyMember(String requestId, String userMid);

  Future<Uint8List> downloadMessageContent(String requestId, String messageId);

  Future<Uint8List> downloadMessageContentPreview(String requestId, String messageId);

  Future<Uint8List> downloadProfileImage(String requestId);

  Future<Uint8List> downloadProfileImagePreview(String requestId);

  Future<int> getActiveMemberCountByBuddyMid(String buddyMid);

  Future<List<String>> getActiveMemberMidsByBuddyMid(String buddyMid);

  Future<List<String>> getAllBuddyMembers();

  Future<List<String>> getBlockedBuddyMembers();

  Future<int> getBlockerCountByBuddyMid(String buddyMid);

  Future<BuddyDetail> getBuddyDetailByMid(String buddyMid);

  Future<BuddyProfile> getBuddyProfile();

  Future<Ticket> getContactTicket();

  Future<int> getMemberCountByBuddyMid(String buddyMid);

  Future<SendBuddyMessageResult> getSendBuddyMessageResult(String sendBuddyMessageRequestId);

  Future<SetBuddyOnAirResult> getSetBuddyOnAirResult(String setBuddyOnAirRequestId);

  Future<UpdateBuddyProfileResult> getUpdateBuddyProfileResult(String updateBuddyProfileRequestId);

  Future<bool> isBuddyOnAirByMid(String buddyMid);

  Future<String> linkAndSendBuddyContentMessageToAllAsync(String requestId, Message msg, String sourceContentId);

  Future<SendBuddyMessageResult> linkAndSendBuddyContentMessageToMids(String requestId, Message msg, String sourceContentId, List<String> mids);

  Future notifyBuddyBlocked(String buddyMid, String blockerMid);

  Future notifyBuddyUnblocked(String buddyMid, String blockerMid);

  Future<String> registerBuddy(String buddyId, String searchId, String displayName, String statusMeessage, Uint8List picture, Map<String, String> settings);

  Future<String> registerBuddyAdmin(String buddyId, String searchId, String displayName, String statusMessage, Uint8List picture);

  Future<String> reissueContactTicket(int expirationTime, int maxUseCount);

  Future removeBuddyMember(String requestId, String userMid);

  Future removeBuddyMembers(String requestId, List<String> userMids);

  Future<SendBuddyMessageResult> sendBuddyContentMessageToAll(String requestId, Message msg, Uint8List content);

  Future<String> sendBuddyContentMessageToAllAsync(String requestId, Message msg, Uint8List content);

  Future<SendBuddyMessageResult> sendBuddyContentMessageToMids(String requestId, Message msg, Uint8List content, List<String> mids);

  Future<String> sendBuddyContentMessageToMidsAsync(String requestId, Message msg, Uint8List content, List<String> mids);

  Future<SendBuddyMessageResult> sendBuddyMessageToAll(String requestId, Message msg);

  Future<String> sendBuddyMessageToAllAsync(String requestId, Message msg);

  Future<SendBuddyMessageResult> sendBuddyMessageToMids(String requestId, Message msg, List<String> mids);

  Future<String> sendBuddyMessageToMidsAsync(String requestId, Message msg, List<String> mids);

  Future sendIndividualEventToAllAsync(String requestId, String buddyMid, int notificationStatus);

  Future<SetBuddyOnAirResult> setBuddyOnAir(String requestId, bool onAir);

  Future<String> setBuddyOnAirAsync(String requestId, bool onAir);

  Future<SendBuddyMessageResult> storeMessage(String requestId, BuddyMessageRequest messageRequest);

  Future unblockBuddyMember(String requestId, String mid);

  Future unregisterBuddy(String requestId);

  Future unregisterBuddyAdmin(String requestId);

  Future updateBuddyAdminProfileAttribute(String requestId, Map<String, String> attributes);

  Future updateBuddyAdminProfileImage(String requestId, Uint8List picture);

  Future<UpdateBuddyProfileResult> updateBuddyProfileAttributes(String requestId, Map<String, String> attributes);

  Future<String> updateBuddyProfileAttributesAsync(String requestId, Map<String, String> attributes);

  Future<UpdateBuddyProfileResult> updateBuddyProfileImage(String requestId, Uint8List image);

  Future<String> updateBuddyProfileImageAsync(String requestId, Uint8List image);

  Future updateBuddySearchId(String requestId, String searchId);

  Future updateBuddySettings(Map<String, String> settings);

  Future<String> uploadBuddyContent(int contentType, Uint8List content);
}

class BuddyManagementServiceClient implements BuddyManagementService {

  BuddyManagementServiceClient(TProtocol iprot, [TProtocol oprot = null]) {
    _iprot = iprot;
    _oprot = (oprot == null) ? iprot : oprot;
  }

  TProtocol _iprot;

  TProtocol get iprot => _iprot;

  TProtocol _oprot;

  TProtocol get oprot => _oprot;

  int _seqid = 0;

  int get seqid => _seqid;

  int nextSeqid() => ++_seqid;

  Future addBuddyMember(String requestId, String userMid) async {
    oprot.writeMessageBegin(new TMessage("addBuddyMember", TMessageType.CALL, nextSeqid()));
    addBuddyMember_args args = new addBuddyMember_args();
    args.requestId = requestId;
    args.userMid = userMid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    addBuddyMember_result result = new addBuddyMember_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future addBuddyMembers(String requestId, List<String> userMids) async {
    oprot.writeMessageBegin(new TMessage("addBuddyMembers", TMessageType.CALL, nextSeqid()));
    addBuddyMembers_args args = new addBuddyMembers_args();
    args.requestId = requestId;
    args.userMids = userMids;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    addBuddyMembers_result result = new addBuddyMembers_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future blockBuddyMember(String requestId, String mid) async {
    oprot.writeMessageBegin(new TMessage("blockBuddyMember", TMessageType.CALL, nextSeqid()));
    blockBuddyMember_args args = new blockBuddyMember_args();
    args.requestId = requestId;
    args.mid = mid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    blockBuddyMember_result result = new blockBuddyMember_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future<List<SendBuddyMessageResult>> commitSendMessagesToAll(List<String> requestIdList) async {
    oprot.writeMessageBegin(new TMessage("commitSendMessagesToAll", TMessageType.CALL, nextSeqid()));
    commitSendMessagesToAll_args args = new commitSendMessagesToAll_args();
    args.requestIdList = requestIdList;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    commitSendMessagesToAll_result result = new commitSendMessagesToAll_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "commitSendMessagesToAll failed: unknown result");
  }

  Future<List<SendBuddyMessageResult>> commitSendMessagesToMids(List<String> requestIdList, List<String> mids) async {
    oprot.writeMessageBegin(new TMessage("commitSendMessagesToMids", TMessageType.CALL, nextSeqid()));
    commitSendMessagesToMids_args args = new commitSendMessagesToMids_args();
    args.requestIdList = requestIdList;
    args.mids = mids;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    commitSendMessagesToMids_result result = new commitSendMessagesToMids_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "commitSendMessagesToMids failed: unknown result");
  }

  Future<bool> containsBuddyMember(String requestId, String userMid) async {
    oprot.writeMessageBegin(new TMessage("containsBuddyMember", TMessageType.CALL, nextSeqid()));
    containsBuddyMember_args args = new containsBuddyMember_args();
    args.requestId = requestId;
    args.userMid = userMid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    containsBuddyMember_result result = new containsBuddyMember_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "containsBuddyMember failed: unknown result");
  }

  Future<Uint8List> downloadMessageContent(String requestId, String messageId) async {
    oprot.writeMessageBegin(new TMessage("downloadMessageContent", TMessageType.CALL, nextSeqid()));
    downloadMessageContent_args args = new downloadMessageContent_args();
    args.requestId = requestId;
    args.messageId = messageId;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    downloadMessageContent_result result = new downloadMessageContent_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "downloadMessageContent failed: unknown result");
  }

  Future<Uint8List> downloadMessageContentPreview(String requestId, String messageId) async {
    oprot.writeMessageBegin(new TMessage("downloadMessageContentPreview", TMessageType.CALL, nextSeqid()));
    downloadMessageContentPreview_args args = new downloadMessageContentPreview_args();
    args.requestId = requestId;
    args.messageId = messageId;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    downloadMessageContentPreview_result result = new downloadMessageContentPreview_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "downloadMessageContentPreview failed: unknown result");
  }

  Future<Uint8List> downloadProfileImage(String requestId) async {
    oprot.writeMessageBegin(new TMessage("downloadProfileImage", TMessageType.CALL, nextSeqid()));
    downloadProfileImage_args args = new downloadProfileImage_args();
    args.requestId = requestId;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    downloadProfileImage_result result = new downloadProfileImage_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "downloadProfileImage failed: unknown result");
  }

  Future<Uint8List> downloadProfileImagePreview(String requestId) async {
    oprot.writeMessageBegin(new TMessage("downloadProfileImagePreview", TMessageType.CALL, nextSeqid()));
    downloadProfileImagePreview_args args = new downloadProfileImagePreview_args();
    args.requestId = requestId;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    downloadProfileImagePreview_result result = new downloadProfileImagePreview_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "downloadProfileImagePreview failed: unknown result");
  }

  Future<int> getActiveMemberCountByBuddyMid(String buddyMid) async {
    oprot.writeMessageBegin(new TMessage("getActiveMemberCountByBuddyMid", TMessageType.CALL, nextSeqid()));
    getActiveMemberCountByBuddyMid_args args = new getActiveMemberCountByBuddyMid_args();
    args.buddyMid = buddyMid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getActiveMemberCountByBuddyMid_result result = new getActiveMemberCountByBuddyMid_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getActiveMemberCountByBuddyMid failed: unknown result");
  }

  Future<List<String>> getActiveMemberMidsByBuddyMid(String buddyMid) async {
    oprot.writeMessageBegin(new TMessage("getActiveMemberMidsByBuddyMid", TMessageType.CALL, nextSeqid()));
    getActiveMemberMidsByBuddyMid_args args = new getActiveMemberMidsByBuddyMid_args();
    args.buddyMid = buddyMid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getActiveMemberMidsByBuddyMid_result result = new getActiveMemberMidsByBuddyMid_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getActiveMemberMidsByBuddyMid failed: unknown result");
  }

  Future<List<String>> getAllBuddyMembers() async {
    oprot.writeMessageBegin(new TMessage("getAllBuddyMembers", TMessageType.CALL, nextSeqid()));
    getAllBuddyMembers_args args = new getAllBuddyMembers_args();
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getAllBuddyMembers_result result = new getAllBuddyMembers_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getAllBuddyMembers failed: unknown result");
  }

  Future<List<String>> getBlockedBuddyMembers() async {
    oprot.writeMessageBegin(new TMessage("getBlockedBuddyMembers", TMessageType.CALL, nextSeqid()));
    getBlockedBuddyMembers_args args = new getBlockedBuddyMembers_args();
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getBlockedBuddyMembers_result result = new getBlockedBuddyMembers_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getBlockedBuddyMembers failed: unknown result");
  }

  Future<int> getBlockerCountByBuddyMid(String buddyMid) async {
    oprot.writeMessageBegin(new TMessage("getBlockerCountByBuddyMid", TMessageType.CALL, nextSeqid()));
    getBlockerCountByBuddyMid_args args = new getBlockerCountByBuddyMid_args();
    args.buddyMid = buddyMid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getBlockerCountByBuddyMid_result result = new getBlockerCountByBuddyMid_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getBlockerCountByBuddyMid failed: unknown result");
  }

  Future<BuddyDetail> getBuddyDetailByMid(String buddyMid) async {
    oprot.writeMessageBegin(new TMessage("getBuddyDetailByMid", TMessageType.CALL, nextSeqid()));
    getBuddyDetailByMid_args args = new getBuddyDetailByMid_args();
    args.buddyMid = buddyMid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getBuddyDetailByMid_result result = new getBuddyDetailByMid_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getBuddyDetailByMid failed: unknown result");
  }

  Future<BuddyProfile> getBuddyProfile() async {
    oprot.writeMessageBegin(new TMessage("getBuddyProfile", TMessageType.CALL, nextSeqid()));
    getBuddyProfile_args args = new getBuddyProfile_args();
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getBuddyProfile_result result = new getBuddyProfile_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getBuddyProfile failed: unknown result");
  }

  Future<Ticket> getContactTicket() async {
    oprot.writeMessageBegin(new TMessage("getContactTicket", TMessageType.CALL, nextSeqid()));
    getContactTicket_args args = new getContactTicket_args();
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getContactTicket_result result = new getContactTicket_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getContactTicket failed: unknown result");
  }

  Future<int> getMemberCountByBuddyMid(String buddyMid) async {
    oprot.writeMessageBegin(new TMessage("getMemberCountByBuddyMid", TMessageType.CALL, nextSeqid()));
    getMemberCountByBuddyMid_args args = new getMemberCountByBuddyMid_args();
    args.buddyMid = buddyMid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getMemberCountByBuddyMid_result result = new getMemberCountByBuddyMid_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getMemberCountByBuddyMid failed: unknown result");
  }

  Future<SendBuddyMessageResult> getSendBuddyMessageResult(String sendBuddyMessageRequestId) async {
    oprot.writeMessageBegin(new TMessage("getSendBuddyMessageResult", TMessageType.CALL, nextSeqid()));
    getSendBuddyMessageResult_args args = new getSendBuddyMessageResult_args();
    args.sendBuddyMessageRequestId = sendBuddyMessageRequestId;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getSendBuddyMessageResult_result result = new getSendBuddyMessageResult_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getSendBuddyMessageResult failed: unknown result");
  }

  Future<SetBuddyOnAirResult> getSetBuddyOnAirResult(String setBuddyOnAirRequestId) async {
    oprot.writeMessageBegin(new TMessage("getSetBuddyOnAirResult", TMessageType.CALL, nextSeqid()));
    getSetBuddyOnAirResult_args args = new getSetBuddyOnAirResult_args();
    args.setBuddyOnAirRequestId = setBuddyOnAirRequestId;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getSetBuddyOnAirResult_result result = new getSetBuddyOnAirResult_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getSetBuddyOnAirResult failed: unknown result");
  }

  Future<UpdateBuddyProfileResult> getUpdateBuddyProfileResult(String updateBuddyProfileRequestId) async {
    oprot.writeMessageBegin(new TMessage("getUpdateBuddyProfileResult", TMessageType.CALL, nextSeqid()));
    getUpdateBuddyProfileResult_args args = new getUpdateBuddyProfileResult_args();
    args.updateBuddyProfileRequestId = updateBuddyProfileRequestId;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getUpdateBuddyProfileResult_result result = new getUpdateBuddyProfileResult_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getUpdateBuddyProfileResult failed: unknown result");
  }

  Future<bool> isBuddyOnAirByMid(String buddyMid) async {
    oprot.writeMessageBegin(new TMessage("isBuddyOnAirByMid", TMessageType.CALL, nextSeqid()));
    isBuddyOnAirByMid_args args = new isBuddyOnAirByMid_args();
    args.buddyMid = buddyMid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    isBuddyOnAirByMid_result result = new isBuddyOnAirByMid_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "isBuddyOnAirByMid failed: unknown result");
  }

  Future<String> linkAndSendBuddyContentMessageToAllAsync(String requestId, Message msg, String sourceContentId) async {
    oprot.writeMessageBegin(new TMessage("linkAndSendBuddyContentMessageToAllAsync", TMessageType.CALL, nextSeqid()));
    linkAndSendBuddyContentMessageToAllAsync_args args = new linkAndSendBuddyContentMessageToAllAsync_args();
    args.requestId = requestId;
    args.msg = msg;
    args.sourceContentId = sourceContentId;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    linkAndSendBuddyContentMessageToAllAsync_result result = new linkAndSendBuddyContentMessageToAllAsync_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "linkAndSendBuddyContentMessageToAllAsync failed: unknown result");
  }

  Future<SendBuddyMessageResult> linkAndSendBuddyContentMessageToMids(String requestId, Message msg, String sourceContentId, List<String> mids) async {
    oprot.writeMessageBegin(new TMessage("linkAndSendBuddyContentMessageToMids", TMessageType.CALL, nextSeqid()));
    linkAndSendBuddyContentMessageToMids_args args = new linkAndSendBuddyContentMessageToMids_args();
    args.requestId = requestId;
    args.msg = msg;
    args.sourceContentId = sourceContentId;
    args.mids = mids;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    linkAndSendBuddyContentMessageToMids_result result = new linkAndSendBuddyContentMessageToMids_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "linkAndSendBuddyContentMessageToMids failed: unknown result");
  }

  Future notifyBuddyBlocked(String buddyMid, String blockerMid) async {
    oprot.writeMessageBegin(new TMessage("notifyBuddyBlocked", TMessageType.CALL, nextSeqid()));
    notifyBuddyBlocked_args args = new notifyBuddyBlocked_args();
    args.buddyMid = buddyMid;
    args.blockerMid = blockerMid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    notifyBuddyBlocked_result result = new notifyBuddyBlocked_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future notifyBuddyUnblocked(String buddyMid, String blockerMid) async {
    oprot.writeMessageBegin(new TMessage("notifyBuddyUnblocked", TMessageType.CALL, nextSeqid()));
    notifyBuddyUnblocked_args args = new notifyBuddyUnblocked_args();
    args.buddyMid = buddyMid;
    args.blockerMid = blockerMid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    notifyBuddyUnblocked_result result = new notifyBuddyUnblocked_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future<String> registerBuddy(String buddyId, String searchId, String displayName, String statusMeessage, Uint8List picture, Map<String, String> settings) async {
    oprot.writeMessageBegin(new TMessage("registerBuddy", TMessageType.CALL, nextSeqid()));
    registerBuddy_args args = new registerBuddy_args();
    args.buddyId = buddyId;
    args.searchId = searchId;
    args.displayName = displayName;
    args.statusMeessage = statusMeessage;
    args.picture = picture;
    args.settings = settings;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    registerBuddy_result result = new registerBuddy_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "registerBuddy failed: unknown result");
  }

  Future<String> registerBuddyAdmin(String buddyId, String searchId, String displayName, String statusMessage, Uint8List picture) async {
    oprot.writeMessageBegin(new TMessage("registerBuddyAdmin", TMessageType.CALL, nextSeqid()));
    registerBuddyAdmin_args args = new registerBuddyAdmin_args();
    args.buddyId = buddyId;
    args.searchId = searchId;
    args.displayName = displayName;
    args.statusMessage = statusMessage;
    args.picture = picture;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    registerBuddyAdmin_result result = new registerBuddyAdmin_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "registerBuddyAdmin failed: unknown result");
  }

  Future<String> reissueContactTicket(int expirationTime, int maxUseCount) async {
    oprot.writeMessageBegin(new TMessage("reissueContactTicket", TMessageType.CALL, nextSeqid()));
    reissueContactTicket_args args = new reissueContactTicket_args();
    args.expirationTime = expirationTime;
    args.maxUseCount = maxUseCount;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    reissueContactTicket_result result = new reissueContactTicket_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "reissueContactTicket failed: unknown result");
  }

  Future removeBuddyMember(String requestId, String userMid) async {
    oprot.writeMessageBegin(new TMessage("removeBuddyMember", TMessageType.CALL, nextSeqid()));
    removeBuddyMember_args args = new removeBuddyMember_args();
    args.requestId = requestId;
    args.userMid = userMid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    removeBuddyMember_result result = new removeBuddyMember_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future removeBuddyMembers(String requestId, List<String> userMids) async {
    oprot.writeMessageBegin(new TMessage("removeBuddyMembers", TMessageType.CALL, nextSeqid()));
    removeBuddyMembers_args args = new removeBuddyMembers_args();
    args.requestId = requestId;
    args.userMids = userMids;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    removeBuddyMembers_result result = new removeBuddyMembers_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future<SendBuddyMessageResult> sendBuddyContentMessageToAll(String requestId, Message msg, Uint8List content) async {
    oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToAll", TMessageType.CALL, nextSeqid()));
    sendBuddyContentMessageToAll_args args = new sendBuddyContentMessageToAll_args();
    args.requestId = requestId;
    args.msg = msg;
    args.content = content;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    sendBuddyContentMessageToAll_result result = new sendBuddyContentMessageToAll_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "sendBuddyContentMessageToAll failed: unknown result");
  }

  Future<String> sendBuddyContentMessageToAllAsync(String requestId, Message msg, Uint8List content) async {
    oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToAllAsync", TMessageType.CALL, nextSeqid()));
    sendBuddyContentMessageToAllAsync_args args = new sendBuddyContentMessageToAllAsync_args();
    args.requestId = requestId;
    args.msg = msg;
    args.content = content;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    sendBuddyContentMessageToAllAsync_result result = new sendBuddyContentMessageToAllAsync_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "sendBuddyContentMessageToAllAsync failed: unknown result");
  }

  Future<SendBuddyMessageResult> sendBuddyContentMessageToMids(String requestId, Message msg, Uint8List content, List<String> mids) async {
    oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToMids", TMessageType.CALL, nextSeqid()));
    sendBuddyContentMessageToMids_args args = new sendBuddyContentMessageToMids_args();
    args.requestId = requestId;
    args.msg = msg;
    args.content = content;
    args.mids = mids;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    sendBuddyContentMessageToMids_result result = new sendBuddyContentMessageToMids_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "sendBuddyContentMessageToMids failed: unknown result");
  }

  Future<String> sendBuddyContentMessageToMidsAsync(String requestId, Message msg, Uint8List content, List<String> mids) async {
    oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToMidsAsync", TMessageType.CALL, nextSeqid()));
    sendBuddyContentMessageToMidsAsync_args args = new sendBuddyContentMessageToMidsAsync_args();
    args.requestId = requestId;
    args.msg = msg;
    args.content = content;
    args.mids = mids;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    sendBuddyContentMessageToMidsAsync_result result = new sendBuddyContentMessageToMidsAsync_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "sendBuddyContentMessageToMidsAsync failed: unknown result");
  }

  Future<SendBuddyMessageResult> sendBuddyMessageToAll(String requestId, Message msg) async {
    oprot.writeMessageBegin(new TMessage("sendBuddyMessageToAll", TMessageType.CALL, nextSeqid()));
    sendBuddyMessageToAll_args args = new sendBuddyMessageToAll_args();
    args.requestId = requestId;
    args.msg = msg;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    sendBuddyMessageToAll_result result = new sendBuddyMessageToAll_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "sendBuddyMessageToAll failed: unknown result");
  }

  Future<String> sendBuddyMessageToAllAsync(String requestId, Message msg) async {
    oprot.writeMessageBegin(new TMessage("sendBuddyMessageToAllAsync", TMessageType.CALL, nextSeqid()));
    sendBuddyMessageToAllAsync_args args = new sendBuddyMessageToAllAsync_args();
    args.requestId = requestId;
    args.msg = msg;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    sendBuddyMessageToAllAsync_result result = new sendBuddyMessageToAllAsync_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "sendBuddyMessageToAllAsync failed: unknown result");
  }

  Future<SendBuddyMessageResult> sendBuddyMessageToMids(String requestId, Message msg, List<String> mids) async {
    oprot.writeMessageBegin(new TMessage("sendBuddyMessageToMids", TMessageType.CALL, nextSeqid()));
    sendBuddyMessageToMids_args args = new sendBuddyMessageToMids_args();
    args.requestId = requestId;
    args.msg = msg;
    args.mids = mids;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    sendBuddyMessageToMids_result result = new sendBuddyMessageToMids_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "sendBuddyMessageToMids failed: unknown result");
  }

  Future<String> sendBuddyMessageToMidsAsync(String requestId, Message msg, List<String> mids) async {
    oprot.writeMessageBegin(new TMessage("sendBuddyMessageToMidsAsync", TMessageType.CALL, nextSeqid()));
    sendBuddyMessageToMidsAsync_args args = new sendBuddyMessageToMidsAsync_args();
    args.requestId = requestId;
    args.msg = msg;
    args.mids = mids;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    sendBuddyMessageToMidsAsync_result result = new sendBuddyMessageToMidsAsync_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "sendBuddyMessageToMidsAsync failed: unknown result");
  }

  Future sendIndividualEventToAllAsync(String requestId, String buddyMid, int notificationStatus) async {
    oprot.writeMessageBegin(new TMessage("sendIndividualEventToAllAsync", TMessageType.CALL, nextSeqid()));
    sendIndividualEventToAllAsync_args args = new sendIndividualEventToAllAsync_args();
    args.requestId = requestId;
    args.buddyMid = buddyMid;
    args.notificationStatus = notificationStatus;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    sendIndividualEventToAllAsync_result result = new sendIndividualEventToAllAsync_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future<SetBuddyOnAirResult> setBuddyOnAir(String requestId, bool onAir) async {
    oprot.writeMessageBegin(new TMessage("setBuddyOnAir", TMessageType.CALL, nextSeqid()));
    setBuddyOnAir_args args = new setBuddyOnAir_args();
    args.requestId = requestId;
    args.onAir = onAir;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    setBuddyOnAir_result result = new setBuddyOnAir_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "setBuddyOnAir failed: unknown result");
  }

  Future<String> setBuddyOnAirAsync(String requestId, bool onAir) async {
    oprot.writeMessageBegin(new TMessage("setBuddyOnAirAsync", TMessageType.CALL, nextSeqid()));
    setBuddyOnAirAsync_args args = new setBuddyOnAirAsync_args();
    args.requestId = requestId;
    args.onAir = onAir;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    setBuddyOnAirAsync_result result = new setBuddyOnAirAsync_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "setBuddyOnAirAsync failed: unknown result");
  }

  Future<SendBuddyMessageResult> storeMessage(String requestId, BuddyMessageRequest messageRequest) async {
    oprot.writeMessageBegin(new TMessage("storeMessage", TMessageType.CALL, nextSeqid()));
    storeMessage_args args = new storeMessage_args();
    args.requestId = requestId;
    args.messageRequest = messageRequest;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    storeMessage_result result = new storeMessage_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "storeMessage failed: unknown result");
  }

  Future unblockBuddyMember(String requestId, String mid) async {
    oprot.writeMessageBegin(new TMessage("unblockBuddyMember", TMessageType.CALL, nextSeqid()));
    unblockBuddyMember_args args = new unblockBuddyMember_args();
    args.requestId = requestId;
    args.mid = mid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    unblockBuddyMember_result result = new unblockBuddyMember_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future unregisterBuddy(String requestId) async {
    oprot.writeMessageBegin(new TMessage("unregisterBuddy", TMessageType.CALL, nextSeqid()));
    unregisterBuddy_args args = new unregisterBuddy_args();
    args.requestId = requestId;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    unregisterBuddy_result result = new unregisterBuddy_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future unregisterBuddyAdmin(String requestId) async {
    oprot.writeMessageBegin(new TMessage("unregisterBuddyAdmin", TMessageType.CALL, nextSeqid()));
    unregisterBuddyAdmin_args args = new unregisterBuddyAdmin_args();
    args.requestId = requestId;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    unregisterBuddyAdmin_result result = new unregisterBuddyAdmin_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future updateBuddyAdminProfileAttribute(String requestId, Map<String, String> attributes) async {
    oprot.writeMessageBegin(new TMessage("updateBuddyAdminProfileAttribute", TMessageType.CALL, nextSeqid()));
    updateBuddyAdminProfileAttribute_args args = new updateBuddyAdminProfileAttribute_args();
    args.requestId = requestId;
    args.attributes = attributes;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    updateBuddyAdminProfileAttribute_result result = new updateBuddyAdminProfileAttribute_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future updateBuddyAdminProfileImage(String requestId, Uint8List picture) async {
    oprot.writeMessageBegin(new TMessage("updateBuddyAdminProfileImage", TMessageType.CALL, nextSeqid()));
    updateBuddyAdminProfileImage_args args = new updateBuddyAdminProfileImage_args();
    args.requestId = requestId;
    args.picture = picture;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    updateBuddyAdminProfileImage_result result = new updateBuddyAdminProfileImage_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future<UpdateBuddyProfileResult> updateBuddyProfileAttributes(String requestId, Map<String, String> attributes) async {
    oprot.writeMessageBegin(new TMessage("updateBuddyProfileAttributes", TMessageType.CALL, nextSeqid()));
    updateBuddyProfileAttributes_args args = new updateBuddyProfileAttributes_args();
    args.requestId = requestId;
    args.attributes = attributes;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    updateBuddyProfileAttributes_result result = new updateBuddyProfileAttributes_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "updateBuddyProfileAttributes failed: unknown result");
  }

  Future<String> updateBuddyProfileAttributesAsync(String requestId, Map<String, String> attributes) async {
    oprot.writeMessageBegin(new TMessage("updateBuddyProfileAttributesAsync", TMessageType.CALL, nextSeqid()));
    updateBuddyProfileAttributesAsync_args args = new updateBuddyProfileAttributesAsync_args();
    args.requestId = requestId;
    args.attributes = attributes;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    updateBuddyProfileAttributesAsync_result result = new updateBuddyProfileAttributesAsync_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "updateBuddyProfileAttributesAsync failed: unknown result");
  }

  Future<UpdateBuddyProfileResult> updateBuddyProfileImage(String requestId, Uint8List image) async {
    oprot.writeMessageBegin(new TMessage("updateBuddyProfileImage", TMessageType.CALL, nextSeqid()));
    updateBuddyProfileImage_args args = new updateBuddyProfileImage_args();
    args.requestId = requestId;
    args.image = image;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    updateBuddyProfileImage_result result = new updateBuddyProfileImage_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "updateBuddyProfileImage failed: unknown result");
  }

  Future<String> updateBuddyProfileImageAsync(String requestId, Uint8List image) async {
    oprot.writeMessageBegin(new TMessage("updateBuddyProfileImageAsync", TMessageType.CALL, nextSeqid()));
    updateBuddyProfileImageAsync_args args = new updateBuddyProfileImageAsync_args();
    args.requestId = requestId;
    args.image = image;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    updateBuddyProfileImageAsync_result result = new updateBuddyProfileImageAsync_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "updateBuddyProfileImageAsync failed: unknown result");
  }

  Future updateBuddySearchId(String requestId, String searchId) async {
    oprot.writeMessageBegin(new TMessage("updateBuddySearchId", TMessageType.CALL, nextSeqid()));
    updateBuddySearchId_args args = new updateBuddySearchId_args();
    args.requestId = requestId;
    args.searchId = searchId;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    updateBuddySearchId_result result = new updateBuddySearchId_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future updateBuddySettings(Map<String, String> settings) async {
    oprot.writeMessageBegin(new TMessage("updateBuddySettings", TMessageType.CALL, nextSeqid()));
    updateBuddySettings_args args = new updateBuddySettings_args();
    args.settings = settings;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    updateBuddySettings_result result = new updateBuddySettings_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future<String> uploadBuddyContent(int contentType, Uint8List content) async {
    oprot.writeMessageBegin(new TMessage("uploadBuddyContent", TMessageType.CALL, nextSeqid()));
    uploadBuddyContent_args args = new uploadBuddyContent_args();
    args.contentType = contentType;
    args.content = content;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    uploadBuddyContent_result result = new uploadBuddyContent_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "uploadBuddyContent failed: unknown result");
  }

}

typedef void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);

class BuddyManagementServiceProcessor implements TProcessor {
  BuddyManagementServiceProcessor(BuddyManagementService iface) {
    iface_ = iface;
    PROCESS_MAP["addBuddyMember"] = addBuddyMember;
    PROCESS_MAP["addBuddyMembers"] = addBuddyMembers;
    PROCESS_MAP["blockBuddyMember"] = blockBuddyMember;
    PROCESS_MAP["commitSendMessagesToAll"] = commitSendMessagesToAll;
    PROCESS_MAP["commitSendMessagesToMids"] = commitSendMessagesToMids;
    PROCESS_MAP["containsBuddyMember"] = containsBuddyMember;
    PROCESS_MAP["downloadMessageContent"] = downloadMessageContent;
    PROCESS_MAP["downloadMessageContentPreview"] = downloadMessageContentPreview;
    PROCESS_MAP["downloadProfileImage"] = downloadProfileImage;
    PROCESS_MAP["downloadProfileImagePreview"] = downloadProfileImagePreview;
    PROCESS_MAP["getActiveMemberCountByBuddyMid"] = getActiveMemberCountByBuddyMid;
    PROCESS_MAP["getActiveMemberMidsByBuddyMid"] = getActiveMemberMidsByBuddyMid;
    PROCESS_MAP["getAllBuddyMembers"] = getAllBuddyMembers;
    PROCESS_MAP["getBlockedBuddyMembers"] = getBlockedBuddyMembers;
    PROCESS_MAP["getBlockerCountByBuddyMid"] = getBlockerCountByBuddyMid;
    PROCESS_MAP["getBuddyDetailByMid"] = getBuddyDetailByMid;
    PROCESS_MAP["getBuddyProfile"] = getBuddyProfile;
    PROCESS_MAP["getContactTicket"] = getContactTicket;
    PROCESS_MAP["getMemberCountByBuddyMid"] = getMemberCountByBuddyMid;
    PROCESS_MAP["getSendBuddyMessageResult"] = getSendBuddyMessageResult;
    PROCESS_MAP["getSetBuddyOnAirResult"] = getSetBuddyOnAirResult;
    PROCESS_MAP["getUpdateBuddyProfileResult"] = getUpdateBuddyProfileResult;
    PROCESS_MAP["isBuddyOnAirByMid"] = isBuddyOnAirByMid;
    PROCESS_MAP["linkAndSendBuddyContentMessageToAllAsync"] = linkAndSendBuddyContentMessageToAllAsync;
    PROCESS_MAP["linkAndSendBuddyContentMessageToMids"] = linkAndSendBuddyContentMessageToMids;
    PROCESS_MAP["notifyBuddyBlocked"] = notifyBuddyBlocked;
    PROCESS_MAP["notifyBuddyUnblocked"] = notifyBuddyUnblocked;
    PROCESS_MAP["registerBuddy"] = registerBuddy;
    PROCESS_MAP["registerBuddyAdmin"] = registerBuddyAdmin;
    PROCESS_MAP["reissueContactTicket"] = reissueContactTicket;
    PROCESS_MAP["removeBuddyMember"] = removeBuddyMember;
    PROCESS_MAP["removeBuddyMembers"] = removeBuddyMembers;
    PROCESS_MAP["sendBuddyContentMessageToAll"] = sendBuddyContentMessageToAll;
    PROCESS_MAP["sendBuddyContentMessageToAllAsync"] = sendBuddyContentMessageToAllAsync;
    PROCESS_MAP["sendBuddyContentMessageToMids"] = sendBuddyContentMessageToMids;
    PROCESS_MAP["sendBuddyContentMessageToMidsAsync"] = sendBuddyContentMessageToMidsAsync;
    PROCESS_MAP["sendBuddyMessageToAll"] = sendBuddyMessageToAll;
    PROCESS_MAP["sendBuddyMessageToAllAsync"] = sendBuddyMessageToAllAsync;
    PROCESS_MAP["sendBuddyMessageToMids"] = sendBuddyMessageToMids;
    PROCESS_MAP["sendBuddyMessageToMidsAsync"] = sendBuddyMessageToMidsAsync;
    PROCESS_MAP["sendIndividualEventToAllAsync"] = sendIndividualEventToAllAsync;
    PROCESS_MAP["setBuddyOnAir"] = setBuddyOnAir;
    PROCESS_MAP["setBuddyOnAirAsync"] = setBuddyOnAirAsync;
    PROCESS_MAP["storeMessage"] = storeMessage;
    PROCESS_MAP["unblockBuddyMember"] = unblockBuddyMember;
    PROCESS_MAP["unregisterBuddy"] = unregisterBuddy;
    PROCESS_MAP["unregisterBuddyAdmin"] = unregisterBuddyAdmin;
    PROCESS_MAP["updateBuddyAdminProfileAttribute"] = updateBuddyAdminProfileAttribute;
    PROCESS_MAP["updateBuddyAdminProfileImage"] = updateBuddyAdminProfileImage;
    PROCESS_MAP["updateBuddyProfileAttributes"] = updateBuddyProfileAttributes;
    PROCESS_MAP["updateBuddyProfileAttributesAsync"] = updateBuddyProfileAttributesAsync;
    PROCESS_MAP["updateBuddyProfileImage"] = updateBuddyProfileImage;
    PROCESS_MAP["updateBuddyProfileImageAsync"] = updateBuddyProfileImageAsync;
    PROCESS_MAP["updateBuddySearchId"] = updateBuddySearchId;
    PROCESS_MAP["updateBuddySettings"] = updateBuddySettings;
    PROCESS_MAP["uploadBuddyContent"] = uploadBuddyContent;
  }

  BuddyManagementService iface_;
  final Map<String, ProcessFunction> PROCESS_MAP = {};

  bool process(TProtocol iprot, TProtocol oprot) {
    TMessage msg = iprot.readMessageBegin();
    ProcessFunction fn = PROCESS_MAP[msg.name];
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      TApplicationError x = new TApplicationError(TApplicationErrorType.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return true;
    }
    fn(msg.seqid, iprot, oprot);
    return true;
  }

  addBuddyMember(int seqid, TProtocol iprot, TProtocol oprot) {
    addBuddyMember_args args = new addBuddyMember_args();
    args.read(iprot);
    iprot.readMessageEnd();
    addBuddyMember_result result = new addBuddyMember_result();
    try {
      iface_.addBuddyMember(args.requestId, args.userMid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing addBuddyMember");
      oprot.writeMessageBegin(new TMessage("addBuddyMember", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("addBuddyMember", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  addBuddyMembers(int seqid, TProtocol iprot, TProtocol oprot) {
    addBuddyMembers_args args = new addBuddyMembers_args();
    args.read(iprot);
    iprot.readMessageEnd();
    addBuddyMembers_result result = new addBuddyMembers_result();
    try {
      iface_.addBuddyMembers(args.requestId, args.userMids);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing addBuddyMembers");
      oprot.writeMessageBegin(new TMessage("addBuddyMembers", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("addBuddyMembers", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  blockBuddyMember(int seqid, TProtocol iprot, TProtocol oprot) {
    blockBuddyMember_args args = new blockBuddyMember_args();
    args.read(iprot);
    iprot.readMessageEnd();
    blockBuddyMember_result result = new blockBuddyMember_result();
    try {
      iface_.blockBuddyMember(args.requestId, args.mid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing blockBuddyMember");
      oprot.writeMessageBegin(new TMessage("blockBuddyMember", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("blockBuddyMember", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  commitSendMessagesToAll(int seqid, TProtocol iprot, TProtocol oprot) async {
    commitSendMessagesToAll_args args = new commitSendMessagesToAll_args();
    args.read(iprot);
    iprot.readMessageEnd();
    commitSendMessagesToAll_result result = new commitSendMessagesToAll_result();
    try {
      result.success = await iface_.commitSendMessagesToAll(args.requestIdList);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing commitSendMessagesToAll");
      oprot.writeMessageBegin(new TMessage("commitSendMessagesToAll", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("commitSendMessagesToAll", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  commitSendMessagesToMids(int seqid, TProtocol iprot, TProtocol oprot) async {
    commitSendMessagesToMids_args args = new commitSendMessagesToMids_args();
    args.read(iprot);
    iprot.readMessageEnd();
    commitSendMessagesToMids_result result = new commitSendMessagesToMids_result();
    try {
      result.success = await iface_.commitSendMessagesToMids(args.requestIdList, args.mids);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing commitSendMessagesToMids");
      oprot.writeMessageBegin(new TMessage("commitSendMessagesToMids", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("commitSendMessagesToMids", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  containsBuddyMember(int seqid, TProtocol iprot, TProtocol oprot) async {
    containsBuddyMember_args args = new containsBuddyMember_args();
    args.read(iprot);
    iprot.readMessageEnd();
    containsBuddyMember_result result = new containsBuddyMember_result();
    try {
      result.success = await iface_.containsBuddyMember(args.requestId, args.userMid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing containsBuddyMember");
      oprot.writeMessageBegin(new TMessage("containsBuddyMember", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("containsBuddyMember", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  downloadMessageContent(int seqid, TProtocol iprot, TProtocol oprot) async {
    downloadMessageContent_args args = new downloadMessageContent_args();
    args.read(iprot);
    iprot.readMessageEnd();
    downloadMessageContent_result result = new downloadMessageContent_result();
    try {
      result.success = await iface_.downloadMessageContent(args.requestId, args.messageId);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing downloadMessageContent");
      oprot.writeMessageBegin(new TMessage("downloadMessageContent", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("downloadMessageContent", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  downloadMessageContentPreview(int seqid, TProtocol iprot, TProtocol oprot) async {
    downloadMessageContentPreview_args args = new downloadMessageContentPreview_args();
    args.read(iprot);
    iprot.readMessageEnd();
    downloadMessageContentPreview_result result = new downloadMessageContentPreview_result();
    try {
      result.success = await iface_.downloadMessageContentPreview(args.requestId, args.messageId);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing downloadMessageContentPreview");
      oprot.writeMessageBegin(new TMessage("downloadMessageContentPreview", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("downloadMessageContentPreview", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  downloadProfileImage(int seqid, TProtocol iprot, TProtocol oprot) async {
    downloadProfileImage_args args = new downloadProfileImage_args();
    args.read(iprot);
    iprot.readMessageEnd();
    downloadProfileImage_result result = new downloadProfileImage_result();
    try {
      result.success = await iface_.downloadProfileImage(args.requestId);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing downloadProfileImage");
      oprot.writeMessageBegin(new TMessage("downloadProfileImage", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("downloadProfileImage", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  downloadProfileImagePreview(int seqid, TProtocol iprot, TProtocol oprot) async {
    downloadProfileImagePreview_args args = new downloadProfileImagePreview_args();
    args.read(iprot);
    iprot.readMessageEnd();
    downloadProfileImagePreview_result result = new downloadProfileImagePreview_result();
    try {
      result.success = await iface_.downloadProfileImagePreview(args.requestId);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing downloadProfileImagePreview");
      oprot.writeMessageBegin(new TMessage("downloadProfileImagePreview", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("downloadProfileImagePreview", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getActiveMemberCountByBuddyMid(int seqid, TProtocol iprot, TProtocol oprot) async {
    getActiveMemberCountByBuddyMid_args args = new getActiveMemberCountByBuddyMid_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getActiveMemberCountByBuddyMid_result result = new getActiveMemberCountByBuddyMid_result();
    try {
      result.success = await iface_.getActiveMemberCountByBuddyMid(args.buddyMid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getActiveMemberCountByBuddyMid");
      oprot.writeMessageBegin(new TMessage("getActiveMemberCountByBuddyMid", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getActiveMemberCountByBuddyMid", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getActiveMemberMidsByBuddyMid(int seqid, TProtocol iprot, TProtocol oprot) async {
    getActiveMemberMidsByBuddyMid_args args = new getActiveMemberMidsByBuddyMid_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getActiveMemberMidsByBuddyMid_result result = new getActiveMemberMidsByBuddyMid_result();
    try {
      result.success = await iface_.getActiveMemberMidsByBuddyMid(args.buddyMid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getActiveMemberMidsByBuddyMid");
      oprot.writeMessageBegin(new TMessage("getActiveMemberMidsByBuddyMid", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getActiveMemberMidsByBuddyMid", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getAllBuddyMembers(int seqid, TProtocol iprot, TProtocol oprot) async {
    getAllBuddyMembers_args args = new getAllBuddyMembers_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getAllBuddyMembers_result result = new getAllBuddyMembers_result();
    try {
      result.success = await iface_.getAllBuddyMembers();
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getAllBuddyMembers");
      oprot.writeMessageBegin(new TMessage("getAllBuddyMembers", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getAllBuddyMembers", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getBlockedBuddyMembers(int seqid, TProtocol iprot, TProtocol oprot) async {
    getBlockedBuddyMembers_args args = new getBlockedBuddyMembers_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getBlockedBuddyMembers_result result = new getBlockedBuddyMembers_result();
    try {
      result.success = await iface_.getBlockedBuddyMembers();
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getBlockedBuddyMembers");
      oprot.writeMessageBegin(new TMessage("getBlockedBuddyMembers", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getBlockedBuddyMembers", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getBlockerCountByBuddyMid(int seqid, TProtocol iprot, TProtocol oprot) async {
    getBlockerCountByBuddyMid_args args = new getBlockerCountByBuddyMid_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getBlockerCountByBuddyMid_result result = new getBlockerCountByBuddyMid_result();
    try {
      result.success = await iface_.getBlockerCountByBuddyMid(args.buddyMid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getBlockerCountByBuddyMid");
      oprot.writeMessageBegin(new TMessage("getBlockerCountByBuddyMid", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getBlockerCountByBuddyMid", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getBuddyDetailByMid(int seqid, TProtocol iprot, TProtocol oprot) async {
    getBuddyDetailByMid_args args = new getBuddyDetailByMid_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getBuddyDetailByMid_result result = new getBuddyDetailByMid_result();
    try {
      result.success = await iface_.getBuddyDetailByMid(args.buddyMid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getBuddyDetailByMid");
      oprot.writeMessageBegin(new TMessage("getBuddyDetailByMid", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getBuddyDetailByMid", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getBuddyProfile(int seqid, TProtocol iprot, TProtocol oprot) async {
    getBuddyProfile_args args = new getBuddyProfile_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getBuddyProfile_result result = new getBuddyProfile_result();
    try {
      result.success = await iface_.getBuddyProfile();
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getBuddyProfile");
      oprot.writeMessageBegin(new TMessage("getBuddyProfile", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getBuddyProfile", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getContactTicket(int seqid, TProtocol iprot, TProtocol oprot) async {
    getContactTicket_args args = new getContactTicket_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getContactTicket_result result = new getContactTicket_result();
    try {
      result.success = await iface_.getContactTicket();
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getContactTicket");
      oprot.writeMessageBegin(new TMessage("getContactTicket", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getContactTicket", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getMemberCountByBuddyMid(int seqid, TProtocol iprot, TProtocol oprot) async {
    getMemberCountByBuddyMid_args args = new getMemberCountByBuddyMid_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getMemberCountByBuddyMid_result result = new getMemberCountByBuddyMid_result();
    try {
      result.success = await iface_.getMemberCountByBuddyMid(args.buddyMid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getMemberCountByBuddyMid");
      oprot.writeMessageBegin(new TMessage("getMemberCountByBuddyMid", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getMemberCountByBuddyMid", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getSendBuddyMessageResult(int seqid, TProtocol iprot, TProtocol oprot) async {
    getSendBuddyMessageResult_args args = new getSendBuddyMessageResult_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getSendBuddyMessageResult_result result = new getSendBuddyMessageResult_result();
    try {
      result.success = await iface_.getSendBuddyMessageResult(args.sendBuddyMessageRequestId);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getSendBuddyMessageResult");
      oprot.writeMessageBegin(new TMessage("getSendBuddyMessageResult", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getSendBuddyMessageResult", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getSetBuddyOnAirResult(int seqid, TProtocol iprot, TProtocol oprot) async {
    getSetBuddyOnAirResult_args args = new getSetBuddyOnAirResult_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getSetBuddyOnAirResult_result result = new getSetBuddyOnAirResult_result();
    try {
      result.success = await iface_.getSetBuddyOnAirResult(args.setBuddyOnAirRequestId);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getSetBuddyOnAirResult");
      oprot.writeMessageBegin(new TMessage("getSetBuddyOnAirResult", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getSetBuddyOnAirResult", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getUpdateBuddyProfileResult(int seqid, TProtocol iprot, TProtocol oprot) async {
    getUpdateBuddyProfileResult_args args = new getUpdateBuddyProfileResult_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getUpdateBuddyProfileResult_result result = new getUpdateBuddyProfileResult_result();
    try {
      result.success = await iface_.getUpdateBuddyProfileResult(args.updateBuddyProfileRequestId);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getUpdateBuddyProfileResult");
      oprot.writeMessageBegin(new TMessage("getUpdateBuddyProfileResult", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getUpdateBuddyProfileResult", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  isBuddyOnAirByMid(int seqid, TProtocol iprot, TProtocol oprot) async {
    isBuddyOnAirByMid_args args = new isBuddyOnAirByMid_args();
    args.read(iprot);
    iprot.readMessageEnd();
    isBuddyOnAirByMid_result result = new isBuddyOnAirByMid_result();
    try {
      result.success = await iface_.isBuddyOnAirByMid(args.buddyMid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing isBuddyOnAirByMid");
      oprot.writeMessageBegin(new TMessage("isBuddyOnAirByMid", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("isBuddyOnAirByMid", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  linkAndSendBuddyContentMessageToAllAsync(int seqid, TProtocol iprot, TProtocol oprot) async {
    linkAndSendBuddyContentMessageToAllAsync_args args = new linkAndSendBuddyContentMessageToAllAsync_args();
    args.read(iprot);
    iprot.readMessageEnd();
    linkAndSendBuddyContentMessageToAllAsync_result result = new linkAndSendBuddyContentMessageToAllAsync_result();
    try {
      result.success = await iface_.linkAndSendBuddyContentMessageToAllAsync(args.requestId, args.msg, args.sourceContentId);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing linkAndSendBuddyContentMessageToAllAsync");
      oprot.writeMessageBegin(new TMessage("linkAndSendBuddyContentMessageToAllAsync", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("linkAndSendBuddyContentMessageToAllAsync", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  linkAndSendBuddyContentMessageToMids(int seqid, TProtocol iprot, TProtocol oprot) async {
    linkAndSendBuddyContentMessageToMids_args args = new linkAndSendBuddyContentMessageToMids_args();
    args.read(iprot);
    iprot.readMessageEnd();
    linkAndSendBuddyContentMessageToMids_result result = new linkAndSendBuddyContentMessageToMids_result();
    try {
      result.success = await iface_.linkAndSendBuddyContentMessageToMids(args.requestId, args.msg, args.sourceContentId, args.mids);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing linkAndSendBuddyContentMessageToMids");
      oprot.writeMessageBegin(new TMessage("linkAndSendBuddyContentMessageToMids", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("linkAndSendBuddyContentMessageToMids", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  notifyBuddyBlocked(int seqid, TProtocol iprot, TProtocol oprot) {
    notifyBuddyBlocked_args args = new notifyBuddyBlocked_args();
    args.read(iprot);
    iprot.readMessageEnd();
    notifyBuddyBlocked_result result = new notifyBuddyBlocked_result();
    try {
      iface_.notifyBuddyBlocked(args.buddyMid, args.blockerMid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing notifyBuddyBlocked");
      oprot.writeMessageBegin(new TMessage("notifyBuddyBlocked", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("notifyBuddyBlocked", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  notifyBuddyUnblocked(int seqid, TProtocol iprot, TProtocol oprot) {
    notifyBuddyUnblocked_args args = new notifyBuddyUnblocked_args();
    args.read(iprot);
    iprot.readMessageEnd();
    notifyBuddyUnblocked_result result = new notifyBuddyUnblocked_result();
    try {
      iface_.notifyBuddyUnblocked(args.buddyMid, args.blockerMid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing notifyBuddyUnblocked");
      oprot.writeMessageBegin(new TMessage("notifyBuddyUnblocked", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("notifyBuddyUnblocked", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  registerBuddy(int seqid, TProtocol iprot, TProtocol oprot) async {
    registerBuddy_args args = new registerBuddy_args();
    args.read(iprot);
    iprot.readMessageEnd();
    registerBuddy_result result = new registerBuddy_result();
    try {
      result.success = await iface_.registerBuddy(args.buddyId, args.searchId, args.displayName, args.statusMeessage, args.picture, args.settings);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing registerBuddy");
      oprot.writeMessageBegin(new TMessage("registerBuddy", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("registerBuddy", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  registerBuddyAdmin(int seqid, TProtocol iprot, TProtocol oprot) async {
    registerBuddyAdmin_args args = new registerBuddyAdmin_args();
    args.read(iprot);
    iprot.readMessageEnd();
    registerBuddyAdmin_result result = new registerBuddyAdmin_result();
    try {
      result.success = await iface_.registerBuddyAdmin(args.buddyId, args.searchId, args.displayName, args.statusMessage, args.picture);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing registerBuddyAdmin");
      oprot.writeMessageBegin(new TMessage("registerBuddyAdmin", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("registerBuddyAdmin", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  reissueContactTicket(int seqid, TProtocol iprot, TProtocol oprot) async {
    reissueContactTicket_args args = new reissueContactTicket_args();
    args.read(iprot);
    iprot.readMessageEnd();
    reissueContactTicket_result result = new reissueContactTicket_result();
    try {
      result.success = await iface_.reissueContactTicket(args.expirationTime, args.maxUseCount);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing reissueContactTicket");
      oprot.writeMessageBegin(new TMessage("reissueContactTicket", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("reissueContactTicket", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  removeBuddyMember(int seqid, TProtocol iprot, TProtocol oprot) {
    removeBuddyMember_args args = new removeBuddyMember_args();
    args.read(iprot);
    iprot.readMessageEnd();
    removeBuddyMember_result result = new removeBuddyMember_result();
    try {
      iface_.removeBuddyMember(args.requestId, args.userMid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing removeBuddyMember");
      oprot.writeMessageBegin(new TMessage("removeBuddyMember", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("removeBuddyMember", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  removeBuddyMembers(int seqid, TProtocol iprot, TProtocol oprot) {
    removeBuddyMembers_args args = new removeBuddyMembers_args();
    args.read(iprot);
    iprot.readMessageEnd();
    removeBuddyMembers_result result = new removeBuddyMembers_result();
    try {
      iface_.removeBuddyMembers(args.requestId, args.userMids);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing removeBuddyMembers");
      oprot.writeMessageBegin(new TMessage("removeBuddyMembers", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("removeBuddyMembers", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  sendBuddyContentMessageToAll(int seqid, TProtocol iprot, TProtocol oprot) async {
    sendBuddyContentMessageToAll_args args = new sendBuddyContentMessageToAll_args();
    args.read(iprot);
    iprot.readMessageEnd();
    sendBuddyContentMessageToAll_result result = new sendBuddyContentMessageToAll_result();
    try {
      result.success = await iface_.sendBuddyContentMessageToAll(args.requestId, args.msg, args.content);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing sendBuddyContentMessageToAll");
      oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToAll", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToAll", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  sendBuddyContentMessageToAllAsync(int seqid, TProtocol iprot, TProtocol oprot) async {
    sendBuddyContentMessageToAllAsync_args args = new sendBuddyContentMessageToAllAsync_args();
    args.read(iprot);
    iprot.readMessageEnd();
    sendBuddyContentMessageToAllAsync_result result = new sendBuddyContentMessageToAllAsync_result();
    try {
      result.success = await iface_.sendBuddyContentMessageToAllAsync(args.requestId, args.msg, args.content);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing sendBuddyContentMessageToAllAsync");
      oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToAllAsync", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToAllAsync", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  sendBuddyContentMessageToMids(int seqid, TProtocol iprot, TProtocol oprot) async {
    sendBuddyContentMessageToMids_args args = new sendBuddyContentMessageToMids_args();
    args.read(iprot);
    iprot.readMessageEnd();
    sendBuddyContentMessageToMids_result result = new sendBuddyContentMessageToMids_result();
    try {
      result.success = await iface_.sendBuddyContentMessageToMids(args.requestId, args.msg, args.content, args.mids);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing sendBuddyContentMessageToMids");
      oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToMids", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToMids", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  sendBuddyContentMessageToMidsAsync(int seqid, TProtocol iprot, TProtocol oprot) async {
    sendBuddyContentMessageToMidsAsync_args args = new sendBuddyContentMessageToMidsAsync_args();
    args.read(iprot);
    iprot.readMessageEnd();
    sendBuddyContentMessageToMidsAsync_result result = new sendBuddyContentMessageToMidsAsync_result();
    try {
      result.success = await iface_.sendBuddyContentMessageToMidsAsync(args.requestId, args.msg, args.content, args.mids);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing sendBuddyContentMessageToMidsAsync");
      oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToMidsAsync", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToMidsAsync", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  sendBuddyMessageToAll(int seqid, TProtocol iprot, TProtocol oprot) async {
    sendBuddyMessageToAll_args args = new sendBuddyMessageToAll_args();
    args.read(iprot);
    iprot.readMessageEnd();
    sendBuddyMessageToAll_result result = new sendBuddyMessageToAll_result();
    try {
      result.success = await iface_.sendBuddyMessageToAll(args.requestId, args.msg);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing sendBuddyMessageToAll");
      oprot.writeMessageBegin(new TMessage("sendBuddyMessageToAll", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("sendBuddyMessageToAll", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  sendBuddyMessageToAllAsync(int seqid, TProtocol iprot, TProtocol oprot) async {
    sendBuddyMessageToAllAsync_args args = new sendBuddyMessageToAllAsync_args();
    args.read(iprot);
    iprot.readMessageEnd();
    sendBuddyMessageToAllAsync_result result = new sendBuddyMessageToAllAsync_result();
    try {
      result.success = await iface_.sendBuddyMessageToAllAsync(args.requestId, args.msg);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing sendBuddyMessageToAllAsync");
      oprot.writeMessageBegin(new TMessage("sendBuddyMessageToAllAsync", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("sendBuddyMessageToAllAsync", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  sendBuddyMessageToMids(int seqid, TProtocol iprot, TProtocol oprot) async {
    sendBuddyMessageToMids_args args = new sendBuddyMessageToMids_args();
    args.read(iprot);
    iprot.readMessageEnd();
    sendBuddyMessageToMids_result result = new sendBuddyMessageToMids_result();
    try {
      result.success = await iface_.sendBuddyMessageToMids(args.requestId, args.msg, args.mids);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing sendBuddyMessageToMids");
      oprot.writeMessageBegin(new TMessage("sendBuddyMessageToMids", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("sendBuddyMessageToMids", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  sendBuddyMessageToMidsAsync(int seqid, TProtocol iprot, TProtocol oprot) async {
    sendBuddyMessageToMidsAsync_args args = new sendBuddyMessageToMidsAsync_args();
    args.read(iprot);
    iprot.readMessageEnd();
    sendBuddyMessageToMidsAsync_result result = new sendBuddyMessageToMidsAsync_result();
    try {
      result.success = await iface_.sendBuddyMessageToMidsAsync(args.requestId, args.msg, args.mids);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing sendBuddyMessageToMidsAsync");
      oprot.writeMessageBegin(new TMessage("sendBuddyMessageToMidsAsync", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("sendBuddyMessageToMidsAsync", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  sendIndividualEventToAllAsync(int seqid, TProtocol iprot, TProtocol oprot) {
    sendIndividualEventToAllAsync_args args = new sendIndividualEventToAllAsync_args();
    args.read(iprot);
    iprot.readMessageEnd();
    sendIndividualEventToAllAsync_result result = new sendIndividualEventToAllAsync_result();
    try {
      iface_.sendIndividualEventToAllAsync(args.requestId, args.buddyMid, args.notificationStatus);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing sendIndividualEventToAllAsync");
      oprot.writeMessageBegin(new TMessage("sendIndividualEventToAllAsync", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("sendIndividualEventToAllAsync", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  setBuddyOnAir(int seqid, TProtocol iprot, TProtocol oprot) async {
    setBuddyOnAir_args args = new setBuddyOnAir_args();
    args.read(iprot);
    iprot.readMessageEnd();
    setBuddyOnAir_result result = new setBuddyOnAir_result();
    try {
      result.success = await iface_.setBuddyOnAir(args.requestId, args.onAir);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing setBuddyOnAir");
      oprot.writeMessageBegin(new TMessage("setBuddyOnAir", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("setBuddyOnAir", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  setBuddyOnAirAsync(int seqid, TProtocol iprot, TProtocol oprot) async {
    setBuddyOnAirAsync_args args = new setBuddyOnAirAsync_args();
    args.read(iprot);
    iprot.readMessageEnd();
    setBuddyOnAirAsync_result result = new setBuddyOnAirAsync_result();
    try {
      result.success = await iface_.setBuddyOnAirAsync(args.requestId, args.onAir);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing setBuddyOnAirAsync");
      oprot.writeMessageBegin(new TMessage("setBuddyOnAirAsync", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("setBuddyOnAirAsync", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  storeMessage(int seqid, TProtocol iprot, TProtocol oprot) async {
    storeMessage_args args = new storeMessage_args();
    args.read(iprot);
    iprot.readMessageEnd();
    storeMessage_result result = new storeMessage_result();
    try {
      result.success = await iface_.storeMessage(args.requestId, args.messageRequest);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing storeMessage");
      oprot.writeMessageBegin(new TMessage("storeMessage", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("storeMessage", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  unblockBuddyMember(int seqid, TProtocol iprot, TProtocol oprot) {
    unblockBuddyMember_args args = new unblockBuddyMember_args();
    args.read(iprot);
    iprot.readMessageEnd();
    unblockBuddyMember_result result = new unblockBuddyMember_result();
    try {
      iface_.unblockBuddyMember(args.requestId, args.mid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing unblockBuddyMember");
      oprot.writeMessageBegin(new TMessage("unblockBuddyMember", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("unblockBuddyMember", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  unregisterBuddy(int seqid, TProtocol iprot, TProtocol oprot) {
    unregisterBuddy_args args = new unregisterBuddy_args();
    args.read(iprot);
    iprot.readMessageEnd();
    unregisterBuddy_result result = new unregisterBuddy_result();
    try {
      iface_.unregisterBuddy(args.requestId);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing unregisterBuddy");
      oprot.writeMessageBegin(new TMessage("unregisterBuddy", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("unregisterBuddy", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  unregisterBuddyAdmin(int seqid, TProtocol iprot, TProtocol oprot) {
    unregisterBuddyAdmin_args args = new unregisterBuddyAdmin_args();
    args.read(iprot);
    iprot.readMessageEnd();
    unregisterBuddyAdmin_result result = new unregisterBuddyAdmin_result();
    try {
      iface_.unregisterBuddyAdmin(args.requestId);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing unregisterBuddyAdmin");
      oprot.writeMessageBegin(new TMessage("unregisterBuddyAdmin", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("unregisterBuddyAdmin", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  updateBuddyAdminProfileAttribute(int seqid, TProtocol iprot, TProtocol oprot) {
    updateBuddyAdminProfileAttribute_args args = new updateBuddyAdminProfileAttribute_args();
    args.read(iprot);
    iprot.readMessageEnd();
    updateBuddyAdminProfileAttribute_result result = new updateBuddyAdminProfileAttribute_result();
    try {
      iface_.updateBuddyAdminProfileAttribute(args.requestId, args.attributes);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing updateBuddyAdminProfileAttribute");
      oprot.writeMessageBegin(new TMessage("updateBuddyAdminProfileAttribute", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("updateBuddyAdminProfileAttribute", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  updateBuddyAdminProfileImage(int seqid, TProtocol iprot, TProtocol oprot) {
    updateBuddyAdminProfileImage_args args = new updateBuddyAdminProfileImage_args();
    args.read(iprot);
    iprot.readMessageEnd();
    updateBuddyAdminProfileImage_result result = new updateBuddyAdminProfileImage_result();
    try {
      iface_.updateBuddyAdminProfileImage(args.requestId, args.picture);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing updateBuddyAdminProfileImage");
      oprot.writeMessageBegin(new TMessage("updateBuddyAdminProfileImage", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("updateBuddyAdminProfileImage", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  updateBuddyProfileAttributes(int seqid, TProtocol iprot, TProtocol oprot) async {
    updateBuddyProfileAttributes_args args = new updateBuddyProfileAttributes_args();
    args.read(iprot);
    iprot.readMessageEnd();
    updateBuddyProfileAttributes_result result = new updateBuddyProfileAttributes_result();
    try {
      result.success = await iface_.updateBuddyProfileAttributes(args.requestId, args.attributes);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing updateBuddyProfileAttributes");
      oprot.writeMessageBegin(new TMessage("updateBuddyProfileAttributes", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("updateBuddyProfileAttributes", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  updateBuddyProfileAttributesAsync(int seqid, TProtocol iprot, TProtocol oprot) async {
    updateBuddyProfileAttributesAsync_args args = new updateBuddyProfileAttributesAsync_args();
    args.read(iprot);
    iprot.readMessageEnd();
    updateBuddyProfileAttributesAsync_result result = new updateBuddyProfileAttributesAsync_result();
    try {
      result.success = await iface_.updateBuddyProfileAttributesAsync(args.requestId, args.attributes);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing updateBuddyProfileAttributesAsync");
      oprot.writeMessageBegin(new TMessage("updateBuddyProfileAttributesAsync", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("updateBuddyProfileAttributesAsync", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  updateBuddyProfileImage(int seqid, TProtocol iprot, TProtocol oprot) async {
    updateBuddyProfileImage_args args = new updateBuddyProfileImage_args();
    args.read(iprot);
    iprot.readMessageEnd();
    updateBuddyProfileImage_result result = new updateBuddyProfileImage_result();
    try {
      result.success = await iface_.updateBuddyProfileImage(args.requestId, args.image);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing updateBuddyProfileImage");
      oprot.writeMessageBegin(new TMessage("updateBuddyProfileImage", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("updateBuddyProfileImage", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  updateBuddyProfileImageAsync(int seqid, TProtocol iprot, TProtocol oprot) async {
    updateBuddyProfileImageAsync_args args = new updateBuddyProfileImageAsync_args();
    args.read(iprot);
    iprot.readMessageEnd();
    updateBuddyProfileImageAsync_result result = new updateBuddyProfileImageAsync_result();
    try {
      result.success = await iface_.updateBuddyProfileImageAsync(args.requestId, args.image);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing updateBuddyProfileImageAsync");
      oprot.writeMessageBegin(new TMessage("updateBuddyProfileImageAsync", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("updateBuddyProfileImageAsync", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  updateBuddySearchId(int seqid, TProtocol iprot, TProtocol oprot) {
    updateBuddySearchId_args args = new updateBuddySearchId_args();
    args.read(iprot);
    iprot.readMessageEnd();
    updateBuddySearchId_result result = new updateBuddySearchId_result();
    try {
      iface_.updateBuddySearchId(args.requestId, args.searchId);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing updateBuddySearchId");
      oprot.writeMessageBegin(new TMessage("updateBuddySearchId", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("updateBuddySearchId", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  updateBuddySettings(int seqid, TProtocol iprot, TProtocol oprot) {
    updateBuddySettings_args args = new updateBuddySettings_args();
    args.read(iprot);
    iprot.readMessageEnd();
    updateBuddySettings_result result = new updateBuddySettings_result();
    try {
      iface_.updateBuddySettings(args.settings);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing updateBuddySettings");
      oprot.writeMessageBegin(new TMessage("updateBuddySettings", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("updateBuddySettings", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  uploadBuddyContent(int seqid, TProtocol iprot, TProtocol oprot) async {
    uploadBuddyContent_args args = new uploadBuddyContent_args();
    args.read(iprot);
    iprot.readMessageEnd();
    uploadBuddyContent_result result = new uploadBuddyContent_result();
    try {
      result.success = await iface_.uploadBuddyContent(args.contentType, args.content);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing uploadBuddyContent");
      oprot.writeMessageBegin(new TMessage("uploadBuddyContent", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("uploadBuddyContent", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

}

class addBuddyMember_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("addBuddyMember_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _USER_MID_FIELD_DESC = new TField("userMid", TType.STRING, 2);

  String _requestId;
  static const int REQUESTID = 1;
  String _userMid;
  static const int USERMID = 2;


  addBuddyMember_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // userMid
  String get userMid => this._userMid;

  set userMid(String userMid) {
    this._userMid = userMid;
  }

  bool isSetUserMid() => this.userMid != null;

  unsetUserMid() {
    this.userMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case USERMID:
        return this.userMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case USERMID:
        if (value == null) {
          unsetUserMid();
        } else {
          this.userMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case USERMID:
        return isSetUserMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERMID:
          if (field.type == TType.STRING) {
            this.userMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.userMid != null) {
      oprot.writeFieldBegin(_USER_MID_FIELD_DESC);
      oprot.writeString(this.userMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("addBuddyMember_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("userMid:");
    if (this.userMid == null) {
      ret.write("null");
    } else {
      ret.write(this.userMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class addBuddyMember_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("addBuddyMember_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  addBuddyMember_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("addBuddyMember_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class addBuddyMembers_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("addBuddyMembers_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _USER_MIDS_FIELD_DESC = new TField("userMids", TType.LIST, 2);

  String _requestId;
  static const int REQUESTID = 1;
  List<String> _userMids;
  static const int USERMIDS = 2;


  addBuddyMembers_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // userMids
  List<String> get userMids => this._userMids;

  set userMids(List<String> userMids) {
    this._userMids = userMids;
  }

  bool isSetUserMids() => this.userMids != null;

  unsetUserMids() {
    this.userMids = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case USERMIDS:
        return this.userMids;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case USERMIDS:
        if (value == null) {
          unsetUserMids();
        } else {
          this.userMids = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case USERMIDS:
        return isSetUserMids();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERMIDS:
          if (field.type == TType.LIST) {
            {
              TList _list580 = iprot.readListBegin();
              this.userMids = new List<String>();
              for (int _i581 = 0; _i581 < _list580.length; ++_i581) {
                String _elem582;
                _elem582 = iprot.readString();
                this.userMids.add(_elem582);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.userMids != null) {
      oprot.writeFieldBegin(_USER_MIDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.userMids.length));
        for (var elem583 in this.userMids) {
          oprot.writeString(elem583);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("addBuddyMembers_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("userMids:");
    if (this.userMids == null) {
      ret.write("null");
    } else {
      ret.write(this.userMids);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class addBuddyMembers_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("addBuddyMembers_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  addBuddyMembers_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("addBuddyMembers_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class blockBuddyMember_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("blockBuddyMember_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _MID_FIELD_DESC = new TField("mid", TType.STRING, 2);

  String _requestId;
  static const int REQUESTID = 1;
  String _mid;
  static const int MID = 2;


  blockBuddyMember_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // mid
  String get mid => this._mid;

  set mid(String mid) {
    this._mid = mid;
  }

  bool isSetMid() => this.mid != null;

  unsetMid() {
    this.mid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case MID:
        return this.mid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case MID:
        if (value == null) {
          unsetMid();
        } else {
          this.mid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case MID:
        return isSetMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MID:
          if (field.type == TType.STRING) {
            this.mid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.mid != null) {
      oprot.writeFieldBegin(_MID_FIELD_DESC);
      oprot.writeString(this.mid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("blockBuddyMember_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("mid:");
    if (this.mid == null) {
      ret.write("null");
    } else {
      ret.write(this.mid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class blockBuddyMember_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("blockBuddyMember_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  blockBuddyMember_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("blockBuddyMember_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class commitSendMessagesToAll_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("commitSendMessagesToAll_args");
  static final TField _REQUEST_ID_LIST_FIELD_DESC = new TField("requestIdList", TType.LIST, 1);

  List<String> _requestIdList;
  static const int REQUESTIDLIST = 1;


  commitSendMessagesToAll_args() {
  }

  // requestIdList
  List<String> get requestIdList => this._requestIdList;

  set requestIdList(List<String> requestIdList) {
    this._requestIdList = requestIdList;
  }

  bool isSetRequestIdList() => this.requestIdList != null;

  unsetRequestIdList() {
    this.requestIdList = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTIDLIST:
        return this.requestIdList;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTIDLIST:
        if (value == null) {
          unsetRequestIdList();
        } else {
          this.requestIdList = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTIDLIST:
        return isSetRequestIdList();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTIDLIST:
          if (field.type == TType.LIST) {
            {
              TList _list584 = iprot.readListBegin();
              this.requestIdList = new List<String>();
              for (int _i585 = 0; _i585 < _list584.length; ++_i585) {
                String _elem586;
                _elem586 = iprot.readString();
                this.requestIdList.add(_elem586);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestIdList != null) {
      oprot.writeFieldBegin(_REQUEST_ID_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.requestIdList.length));
        for (var elem587 in this.requestIdList) {
          oprot.writeString(elem587);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("commitSendMessagesToAll_args(");

    ret.write("requestIdList:");
    if (this.requestIdList == null) {
      ret.write("null");
    } else {
      ret.write(this.requestIdList);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class commitSendMessagesToAll_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("commitSendMessagesToAll_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.LIST, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  List<SendBuddyMessageResult> _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  commitSendMessagesToAll_result() {
  }

  // success
  List<SendBuddyMessageResult> get success => this._success;

  set success(List<SendBuddyMessageResult> success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.LIST) {
            {
              TList _list588 = iprot.readListBegin();
              this.success = new List<SendBuddyMessageResult>();
              for (int _i589 = 0; _i589 < _list588.length; ++_i589) {
                SendBuddyMessageResult _elem590;
                _elem590 = new SendBuddyMessageResult();
                _elem590.read(iprot);
                this.success.add(_elem590);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.success.length));
        for (var elem591 in this.success) {
          elem591.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("commitSendMessagesToAll_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class commitSendMessagesToMids_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("commitSendMessagesToMids_args");
  static final TField _REQUEST_ID_LIST_FIELD_DESC = new TField("requestIdList", TType.LIST, 1);
  static final TField _MIDS_FIELD_DESC = new TField("mids", TType.LIST, 2);

  List<String> _requestIdList;
  static const int REQUESTIDLIST = 1;
  List<String> _mids;
  static const int MIDS = 2;


  commitSendMessagesToMids_args() {
  }

  // requestIdList
  List<String> get requestIdList => this._requestIdList;

  set requestIdList(List<String> requestIdList) {
    this._requestIdList = requestIdList;
  }

  bool isSetRequestIdList() => this.requestIdList != null;

  unsetRequestIdList() {
    this.requestIdList = null;
  }

  // mids
  List<String> get mids => this._mids;

  set mids(List<String> mids) {
    this._mids = mids;
  }

  bool isSetMids() => this.mids != null;

  unsetMids() {
    this.mids = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTIDLIST:
        return this.requestIdList;
      case MIDS:
        return this.mids;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTIDLIST:
        if (value == null) {
          unsetRequestIdList();
        } else {
          this.requestIdList = value;
        }
        break;

      case MIDS:
        if (value == null) {
          unsetMids();
        } else {
          this.mids = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTIDLIST:
        return isSetRequestIdList();
      case MIDS:
        return isSetMids();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTIDLIST:
          if (field.type == TType.LIST) {
            {
              TList _list592 = iprot.readListBegin();
              this.requestIdList = new List<String>();
              for (int _i593 = 0; _i593 < _list592.length; ++_i593) {
                String _elem594;
                _elem594 = iprot.readString();
                this.requestIdList.add(_elem594);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MIDS:
          if (field.type == TType.LIST) {
            {
              TList _list595 = iprot.readListBegin();
              this.mids = new List<String>();
              for (int _i596 = 0; _i596 < _list595.length; ++_i596) {
                String _elem597;
                _elem597 = iprot.readString();
                this.mids.add(_elem597);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestIdList != null) {
      oprot.writeFieldBegin(_REQUEST_ID_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.requestIdList.length));
        for (var elem598 in this.requestIdList) {
          oprot.writeString(elem598);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mids != null) {
      oprot.writeFieldBegin(_MIDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.mids.length));
        for (var elem599 in this.mids) {
          oprot.writeString(elem599);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("commitSendMessagesToMids_args(");

    ret.write("requestIdList:");
    if (this.requestIdList == null) {
      ret.write("null");
    } else {
      ret.write(this.requestIdList);
    }

    ret.write(", ");
    ret.write("mids:");
    if (this.mids == null) {
      ret.write("null");
    } else {
      ret.write(this.mids);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class commitSendMessagesToMids_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("commitSendMessagesToMids_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.LIST, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  List<SendBuddyMessageResult> _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  commitSendMessagesToMids_result() {
  }

  // success
  List<SendBuddyMessageResult> get success => this._success;

  set success(List<SendBuddyMessageResult> success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.LIST) {
            {
              TList _list600 = iprot.readListBegin();
              this.success = new List<SendBuddyMessageResult>();
              for (int _i601 = 0; _i601 < _list600.length; ++_i601) {
                SendBuddyMessageResult _elem602;
                _elem602 = new SendBuddyMessageResult();
                _elem602.read(iprot);
                this.success.add(_elem602);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.success.length));
        for (var elem603 in this.success) {
          elem603.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("commitSendMessagesToMids_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class containsBuddyMember_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("containsBuddyMember_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _USER_MID_FIELD_DESC = new TField("userMid", TType.STRING, 2);

  String _requestId;
  static const int REQUESTID = 1;
  String _userMid;
  static const int USERMID = 2;


  containsBuddyMember_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // userMid
  String get userMid => this._userMid;

  set userMid(String userMid) {
    this._userMid = userMid;
  }

  bool isSetUserMid() => this.userMid != null;

  unsetUserMid() {
    this.userMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case USERMID:
        return this.userMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case USERMID:
        if (value == null) {
          unsetUserMid();
        } else {
          this.userMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case USERMID:
        return isSetUserMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERMID:
          if (field.type == TType.STRING) {
            this.userMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.userMid != null) {
      oprot.writeFieldBegin(_USER_MID_FIELD_DESC);
      oprot.writeString(this.userMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("containsBuddyMember_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("userMid:");
    if (this.userMid == null) {
      ret.write("null");
    } else {
      ret.write(this.userMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class containsBuddyMember_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("containsBuddyMember_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  bool _success = false;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;

  bool __isset_success = false;

  containsBuddyMember_result() {
  }

  // success
  bool get success => this._success;

  set success(bool success) {
    this._success = success;
    this.__isset_success = true;
  }

  bool isSetSuccess() => this.__isset_success;

  unsetSuccess() {
    this.__isset_success = false;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.BOOL) {
            this.success = iprot.readBool();
            this.__isset_success = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeBool(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("containsBuddyMember_result(");

    ret.write("success:");
    ret.write(this.success);

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class downloadMessageContent_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("downloadMessageContent_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _MESSAGE_ID_FIELD_DESC = new TField("messageId", TType.STRING, 2);

  String _requestId;
  static const int REQUESTID = 1;
  String _messageId;
  static const int MESSAGEID = 2;


  downloadMessageContent_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // messageId
  String get messageId => this._messageId;

  set messageId(String messageId) {
    this._messageId = messageId;
  }

  bool isSetMessageId() => this.messageId != null;

  unsetMessageId() {
    this.messageId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case MESSAGEID:
        return this.messageId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case MESSAGEID:
        if (value == null) {
          unsetMessageId();
        } else {
          this.messageId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case MESSAGEID:
        return isSetMessageId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MESSAGEID:
          if (field.type == TType.STRING) {
            this.messageId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.messageId != null) {
      oprot.writeFieldBegin(_MESSAGE_ID_FIELD_DESC);
      oprot.writeString(this.messageId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("downloadMessageContent_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("messageId:");
    if (this.messageId == null) {
      ret.write("null");
    } else {
      ret.write(this.messageId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class downloadMessageContent_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("downloadMessageContent_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  Uint8List _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  downloadMessageContent_result() {
  }

  // success
  Uint8List get success => this._success;

  set success(Uint8List success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeBinary(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("downloadMessageContent_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class downloadMessageContentPreview_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("downloadMessageContentPreview_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _MESSAGE_ID_FIELD_DESC = new TField("messageId", TType.STRING, 2);

  String _requestId;
  static const int REQUESTID = 1;
  String _messageId;
  static const int MESSAGEID = 2;


  downloadMessageContentPreview_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // messageId
  String get messageId => this._messageId;

  set messageId(String messageId) {
    this._messageId = messageId;
  }

  bool isSetMessageId() => this.messageId != null;

  unsetMessageId() {
    this.messageId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case MESSAGEID:
        return this.messageId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case MESSAGEID:
        if (value == null) {
          unsetMessageId();
        } else {
          this.messageId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case MESSAGEID:
        return isSetMessageId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MESSAGEID:
          if (field.type == TType.STRING) {
            this.messageId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.messageId != null) {
      oprot.writeFieldBegin(_MESSAGE_ID_FIELD_DESC);
      oprot.writeString(this.messageId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("downloadMessageContentPreview_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("messageId:");
    if (this.messageId == null) {
      ret.write("null");
    } else {
      ret.write(this.messageId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class downloadMessageContentPreview_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("downloadMessageContentPreview_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  Uint8List _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  downloadMessageContentPreview_result() {
  }

  // success
  Uint8List get success => this._success;

  set success(Uint8List success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeBinary(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("downloadMessageContentPreview_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class downloadProfileImage_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("downloadProfileImage_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);

  String _requestId;
  static const int REQUESTID = 1;


  downloadProfileImage_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("downloadProfileImage_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class downloadProfileImage_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("downloadProfileImage_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  Uint8List _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  downloadProfileImage_result() {
  }

  // success
  Uint8List get success => this._success;

  set success(Uint8List success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeBinary(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("downloadProfileImage_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class downloadProfileImagePreview_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("downloadProfileImagePreview_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);

  String _requestId;
  static const int REQUESTID = 1;


  downloadProfileImagePreview_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("downloadProfileImagePreview_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class downloadProfileImagePreview_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("downloadProfileImagePreview_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  Uint8List _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  downloadProfileImagePreview_result() {
  }

  // success
  Uint8List get success => this._success;

  set success(Uint8List success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeBinary(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("downloadProfileImagePreview_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getActiveMemberCountByBuddyMid_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getActiveMemberCountByBuddyMid_args");
  static final TField _BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, 2);

  String _buddyMid;
  static const int BUDDYMID = 2;


  getActiveMemberCountByBuddyMid_args() {
  }

  // buddyMid
  String get buddyMid => this._buddyMid;

  set buddyMid(String buddyMid) {
    this._buddyMid = buddyMid;
  }

  bool isSetBuddyMid() => this.buddyMid != null;

  unsetBuddyMid() {
    this.buddyMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return this.buddyMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case BUDDYMID:
        if (value == null) {
          unsetBuddyMid();
        } else {
          this.buddyMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return isSetBuddyMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case BUDDYMID:
          if (field.type == TType.STRING) {
            this.buddyMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.buddyMid != null) {
      oprot.writeFieldBegin(_BUDDY_MID_FIELD_DESC);
      oprot.writeString(this.buddyMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getActiveMemberCountByBuddyMid_args(");

    ret.write("buddyMid:");
    if (this.buddyMid == null) {
      ret.write("null");
    } else {
      ret.write(this.buddyMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getActiveMemberCountByBuddyMid_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getActiveMemberCountByBuddyMid_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.I64, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  int _success = 0;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;

  bool __isset_success = false;

  getActiveMemberCountByBuddyMid_result() {
  }

  // success
  int get success => this._success;

  set success(int success) {
    this._success = success;
    this.__isset_success = true;
  }

  bool isSetSuccess() => this.__isset_success;

  unsetSuccess() {
    this.__isset_success = false;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.I64) {
            this.success = iprot.readI64();
            this.__isset_success = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeI64(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getActiveMemberCountByBuddyMid_result(");

    ret.write("success:");
    ret.write(this.success);

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getActiveMemberMidsByBuddyMid_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getActiveMemberMidsByBuddyMid_args");
  static final TField _BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, 2);

  String _buddyMid;
  static const int BUDDYMID = 2;


  getActiveMemberMidsByBuddyMid_args() {
  }

  // buddyMid
  String get buddyMid => this._buddyMid;

  set buddyMid(String buddyMid) {
    this._buddyMid = buddyMid;
  }

  bool isSetBuddyMid() => this.buddyMid != null;

  unsetBuddyMid() {
    this.buddyMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return this.buddyMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case BUDDYMID:
        if (value == null) {
          unsetBuddyMid();
        } else {
          this.buddyMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return isSetBuddyMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case BUDDYMID:
          if (field.type == TType.STRING) {
            this.buddyMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.buddyMid != null) {
      oprot.writeFieldBegin(_BUDDY_MID_FIELD_DESC);
      oprot.writeString(this.buddyMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getActiveMemberMidsByBuddyMid_args(");

    ret.write("buddyMid:");
    if (this.buddyMid == null) {
      ret.write("null");
    } else {
      ret.write(this.buddyMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getActiveMemberMidsByBuddyMid_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getActiveMemberMidsByBuddyMid_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.LIST, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  List<String> _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getActiveMemberMidsByBuddyMid_result() {
  }

  // success
  List<String> get success => this._success;

  set success(List<String> success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.LIST) {
            {
              TList _list604 = iprot.readListBegin();
              this.success = new List<String>();
              for (int _i605 = 0; _i605 < _list604.length; ++_i605) {
                String _elem606;
                _elem606 = iprot.readString();
                this.success.add(_elem606);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.success.length));
        for (var elem607 in this.success) {
          oprot.writeString(elem607);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getActiveMemberMidsByBuddyMid_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getAllBuddyMembers_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getAllBuddyMembers_args");



  getAllBuddyMembers_args() {
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getAllBuddyMembers_args(");

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getAllBuddyMembers_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getAllBuddyMembers_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.LIST, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  List<String> _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getAllBuddyMembers_result() {
  }

  // success
  List<String> get success => this._success;

  set success(List<String> success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.LIST) {
            {
              TList _list608 = iprot.readListBegin();
              this.success = new List<String>();
              for (int _i609 = 0; _i609 < _list608.length; ++_i609) {
                String _elem610;
                _elem610 = iprot.readString();
                this.success.add(_elem610);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.success.length));
        for (var elem611 in this.success) {
          oprot.writeString(elem611);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getAllBuddyMembers_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getBlockedBuddyMembers_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getBlockedBuddyMembers_args");



  getBlockedBuddyMembers_args() {
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getBlockedBuddyMembers_args(");

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getBlockedBuddyMembers_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getBlockedBuddyMembers_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.LIST, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  List<String> _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getBlockedBuddyMembers_result() {
  }

  // success
  List<String> get success => this._success;

  set success(List<String> success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.LIST) {
            {
              TList _list612 = iprot.readListBegin();
              this.success = new List<String>();
              for (int _i613 = 0; _i613 < _list612.length; ++_i613) {
                String _elem614;
                _elem614 = iprot.readString();
                this.success.add(_elem614);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.success.length));
        for (var elem615 in this.success) {
          oprot.writeString(elem615);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getBlockedBuddyMembers_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getBlockerCountByBuddyMid_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getBlockerCountByBuddyMid_args");
  static final TField _BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, 2);

  String _buddyMid;
  static const int BUDDYMID = 2;


  getBlockerCountByBuddyMid_args() {
  }

  // buddyMid
  String get buddyMid => this._buddyMid;

  set buddyMid(String buddyMid) {
    this._buddyMid = buddyMid;
  }

  bool isSetBuddyMid() => this.buddyMid != null;

  unsetBuddyMid() {
    this.buddyMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return this.buddyMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case BUDDYMID:
        if (value == null) {
          unsetBuddyMid();
        } else {
          this.buddyMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return isSetBuddyMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case BUDDYMID:
          if (field.type == TType.STRING) {
            this.buddyMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.buddyMid != null) {
      oprot.writeFieldBegin(_BUDDY_MID_FIELD_DESC);
      oprot.writeString(this.buddyMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getBlockerCountByBuddyMid_args(");

    ret.write("buddyMid:");
    if (this.buddyMid == null) {
      ret.write("null");
    } else {
      ret.write(this.buddyMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getBlockerCountByBuddyMid_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getBlockerCountByBuddyMid_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.I64, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  int _success = 0;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;

  bool __isset_success = false;

  getBlockerCountByBuddyMid_result() {
  }

  // success
  int get success => this._success;

  set success(int success) {
    this._success = success;
    this.__isset_success = true;
  }

  bool isSetSuccess() => this.__isset_success;

  unsetSuccess() {
    this.__isset_success = false;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.I64) {
            this.success = iprot.readI64();
            this.__isset_success = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeI64(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getBlockerCountByBuddyMid_result(");

    ret.write("success:");
    ret.write(this.success);

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getBuddyDetailByMid_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getBuddyDetailByMid_args");
  static final TField _BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, 2);

  String _buddyMid;
  static const int BUDDYMID = 2;


  getBuddyDetailByMid_args() {
  }

  // buddyMid
  String get buddyMid => this._buddyMid;

  set buddyMid(String buddyMid) {
    this._buddyMid = buddyMid;
  }

  bool isSetBuddyMid() => this.buddyMid != null;

  unsetBuddyMid() {
    this.buddyMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return this.buddyMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case BUDDYMID:
        if (value == null) {
          unsetBuddyMid();
        } else {
          this.buddyMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return isSetBuddyMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case BUDDYMID:
          if (field.type == TType.STRING) {
            this.buddyMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.buddyMid != null) {
      oprot.writeFieldBegin(_BUDDY_MID_FIELD_DESC);
      oprot.writeString(this.buddyMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getBuddyDetailByMid_args(");

    ret.write("buddyMid:");
    if (this.buddyMid == null) {
      ret.write("null");
    } else {
      ret.write(this.buddyMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getBuddyDetailByMid_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getBuddyDetailByMid_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  BuddyDetail _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getBuddyDetailByMid_result() {
  }

  // success
  BuddyDetail get success => this._success;

  set success(BuddyDetail success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new BuddyDetail();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getBuddyDetailByMid_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getBuddyProfile_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getBuddyProfile_args");



  getBuddyProfile_args() {
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getBuddyProfile_args(");

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getBuddyProfile_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getBuddyProfile_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  BuddyProfile _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getBuddyProfile_result() {
  }

  // success
  BuddyProfile get success => this._success;

  set success(BuddyProfile success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new BuddyProfile();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getBuddyProfile_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getContactTicket_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getContactTicket_args");



  getContactTicket_args() {
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getContactTicket_args(");

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getContactTicket_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getContactTicket_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  Ticket _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getContactTicket_result() {
  }

  // success
  Ticket get success => this._success;

  set success(Ticket success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new Ticket();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getContactTicket_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getMemberCountByBuddyMid_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getMemberCountByBuddyMid_args");
  static final TField _BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, 2);

  String _buddyMid;
  static const int BUDDYMID = 2;


  getMemberCountByBuddyMid_args() {
  }

  // buddyMid
  String get buddyMid => this._buddyMid;

  set buddyMid(String buddyMid) {
    this._buddyMid = buddyMid;
  }

  bool isSetBuddyMid() => this.buddyMid != null;

  unsetBuddyMid() {
    this.buddyMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return this.buddyMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case BUDDYMID:
        if (value == null) {
          unsetBuddyMid();
        } else {
          this.buddyMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return isSetBuddyMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case BUDDYMID:
          if (field.type == TType.STRING) {
            this.buddyMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.buddyMid != null) {
      oprot.writeFieldBegin(_BUDDY_MID_FIELD_DESC);
      oprot.writeString(this.buddyMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getMemberCountByBuddyMid_args(");

    ret.write("buddyMid:");
    if (this.buddyMid == null) {
      ret.write("null");
    } else {
      ret.write(this.buddyMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getMemberCountByBuddyMid_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getMemberCountByBuddyMid_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.I64, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  int _success = 0;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;

  bool __isset_success = false;

  getMemberCountByBuddyMid_result() {
  }

  // success
  int get success => this._success;

  set success(int success) {
    this._success = success;
    this.__isset_success = true;
  }

  bool isSetSuccess() => this.__isset_success;

  unsetSuccess() {
    this.__isset_success = false;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.I64) {
            this.success = iprot.readI64();
            this.__isset_success = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeI64(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getMemberCountByBuddyMid_result(");

    ret.write("success:");
    ret.write(this.success);

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getSendBuddyMessageResult_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getSendBuddyMessageResult_args");
  static final TField _SEND_BUDDY_MESSAGE_REQUEST_ID_FIELD_DESC = new TField("sendBuddyMessageRequestId", TType.STRING, 1);

  String _sendBuddyMessageRequestId;
  static const int SENDBUDDYMESSAGEREQUESTID = 1;


  getSendBuddyMessageResult_args() {
  }

  // sendBuddyMessageRequestId
  String get sendBuddyMessageRequestId => this._sendBuddyMessageRequestId;

  set sendBuddyMessageRequestId(String sendBuddyMessageRequestId) {
    this._sendBuddyMessageRequestId = sendBuddyMessageRequestId;
  }

  bool isSetSendBuddyMessageRequestId() => this.sendBuddyMessageRequestId != null;

  unsetSendBuddyMessageRequestId() {
    this.sendBuddyMessageRequestId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SENDBUDDYMESSAGEREQUESTID:
        return this.sendBuddyMessageRequestId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SENDBUDDYMESSAGEREQUESTID:
        if (value == null) {
          unsetSendBuddyMessageRequestId();
        } else {
          this.sendBuddyMessageRequestId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SENDBUDDYMESSAGEREQUESTID:
        return isSetSendBuddyMessageRequestId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SENDBUDDYMESSAGEREQUESTID:
          if (field.type == TType.STRING) {
            this.sendBuddyMessageRequestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.sendBuddyMessageRequestId != null) {
      oprot.writeFieldBegin(_SEND_BUDDY_MESSAGE_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.sendBuddyMessageRequestId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getSendBuddyMessageResult_args(");

    ret.write("sendBuddyMessageRequestId:");
    if (this.sendBuddyMessageRequestId == null) {
      ret.write("null");
    } else {
      ret.write(this.sendBuddyMessageRequestId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getSendBuddyMessageResult_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getSendBuddyMessageResult_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  SendBuddyMessageResult _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getSendBuddyMessageResult_result() {
  }

  // success
  SendBuddyMessageResult get success => this._success;

  set success(SendBuddyMessageResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new SendBuddyMessageResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getSendBuddyMessageResult_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getSetBuddyOnAirResult_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getSetBuddyOnAirResult_args");
  static final TField _SET_BUDDY_ON_AIR_REQUEST_ID_FIELD_DESC = new TField("setBuddyOnAirRequestId", TType.STRING, 1);

  String _setBuddyOnAirRequestId;
  static const int SETBUDDYONAIRREQUESTID = 1;


  getSetBuddyOnAirResult_args() {
  }

  // setBuddyOnAirRequestId
  String get setBuddyOnAirRequestId => this._setBuddyOnAirRequestId;

  set setBuddyOnAirRequestId(String setBuddyOnAirRequestId) {
    this._setBuddyOnAirRequestId = setBuddyOnAirRequestId;
  }

  bool isSetSetBuddyOnAirRequestId() => this.setBuddyOnAirRequestId != null;

  unsetSetBuddyOnAirRequestId() {
    this.setBuddyOnAirRequestId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SETBUDDYONAIRREQUESTID:
        return this.setBuddyOnAirRequestId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SETBUDDYONAIRREQUESTID:
        if (value == null) {
          unsetSetBuddyOnAirRequestId();
        } else {
          this.setBuddyOnAirRequestId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SETBUDDYONAIRREQUESTID:
        return isSetSetBuddyOnAirRequestId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SETBUDDYONAIRREQUESTID:
          if (field.type == TType.STRING) {
            this.setBuddyOnAirRequestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.setBuddyOnAirRequestId != null) {
      oprot.writeFieldBegin(_SET_BUDDY_ON_AIR_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.setBuddyOnAirRequestId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getSetBuddyOnAirResult_args(");

    ret.write("setBuddyOnAirRequestId:");
    if (this.setBuddyOnAirRequestId == null) {
      ret.write("null");
    } else {
      ret.write(this.setBuddyOnAirRequestId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getSetBuddyOnAirResult_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getSetBuddyOnAirResult_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  SetBuddyOnAirResult _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getSetBuddyOnAirResult_result() {
  }

  // success
  SetBuddyOnAirResult get success => this._success;

  set success(SetBuddyOnAirResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new SetBuddyOnAirResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getSetBuddyOnAirResult_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getUpdateBuddyProfileResult_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getUpdateBuddyProfileResult_args");
  static final TField _UPDATE_BUDDY_PROFILE_REQUEST_ID_FIELD_DESC = new TField("updateBuddyProfileRequestId", TType.STRING, 1);

  String _updateBuddyProfileRequestId;
  static const int UPDATEBUDDYPROFILEREQUESTID = 1;


  getUpdateBuddyProfileResult_args() {
  }

  // updateBuddyProfileRequestId
  String get updateBuddyProfileRequestId => this._updateBuddyProfileRequestId;

  set updateBuddyProfileRequestId(String updateBuddyProfileRequestId) {
    this._updateBuddyProfileRequestId = updateBuddyProfileRequestId;
  }

  bool isSetUpdateBuddyProfileRequestId() => this.updateBuddyProfileRequestId != null;

  unsetUpdateBuddyProfileRequestId() {
    this.updateBuddyProfileRequestId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case UPDATEBUDDYPROFILEREQUESTID:
        return this.updateBuddyProfileRequestId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case UPDATEBUDDYPROFILEREQUESTID:
        if (value == null) {
          unsetUpdateBuddyProfileRequestId();
        } else {
          this.updateBuddyProfileRequestId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case UPDATEBUDDYPROFILEREQUESTID:
        return isSetUpdateBuddyProfileRequestId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case UPDATEBUDDYPROFILEREQUESTID:
          if (field.type == TType.STRING) {
            this.updateBuddyProfileRequestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.updateBuddyProfileRequestId != null) {
      oprot.writeFieldBegin(_UPDATE_BUDDY_PROFILE_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.updateBuddyProfileRequestId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getUpdateBuddyProfileResult_args(");

    ret.write("updateBuddyProfileRequestId:");
    if (this.updateBuddyProfileRequestId == null) {
      ret.write("null");
    } else {
      ret.write(this.updateBuddyProfileRequestId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getUpdateBuddyProfileResult_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getUpdateBuddyProfileResult_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  UpdateBuddyProfileResult _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getUpdateBuddyProfileResult_result() {
  }

  // success
  UpdateBuddyProfileResult get success => this._success;

  set success(UpdateBuddyProfileResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new UpdateBuddyProfileResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getUpdateBuddyProfileResult_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class isBuddyOnAirByMid_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("isBuddyOnAirByMid_args");
  static final TField _BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, 2);

  String _buddyMid;
  static const int BUDDYMID = 2;


  isBuddyOnAirByMid_args() {
  }

  // buddyMid
  String get buddyMid => this._buddyMid;

  set buddyMid(String buddyMid) {
    this._buddyMid = buddyMid;
  }

  bool isSetBuddyMid() => this.buddyMid != null;

  unsetBuddyMid() {
    this.buddyMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return this.buddyMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case BUDDYMID:
        if (value == null) {
          unsetBuddyMid();
        } else {
          this.buddyMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return isSetBuddyMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case BUDDYMID:
          if (field.type == TType.STRING) {
            this.buddyMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.buddyMid != null) {
      oprot.writeFieldBegin(_BUDDY_MID_FIELD_DESC);
      oprot.writeString(this.buddyMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("isBuddyOnAirByMid_args(");

    ret.write("buddyMid:");
    if (this.buddyMid == null) {
      ret.write("null");
    } else {
      ret.write(this.buddyMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class isBuddyOnAirByMid_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("isBuddyOnAirByMid_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  bool _success = false;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;

  bool __isset_success = false;

  isBuddyOnAirByMid_result() {
  }

  // success
  bool get success => this._success;

  set success(bool success) {
    this._success = success;
    this.__isset_success = true;
  }

  bool isSetSuccess() => this.__isset_success;

  unsetSuccess() {
    this.__isset_success = false;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.BOOL) {
            this.success = iprot.readBool();
            this.__isset_success = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeBool(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("isBuddyOnAirByMid_result(");

    ret.write("success:");
    ret.write(this.success);

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class linkAndSendBuddyContentMessageToAllAsync_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("linkAndSendBuddyContentMessageToAllAsync_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _MSG_FIELD_DESC = new TField("msg", TType.STRUCT, 2);
  static final TField _SOURCE_CONTENT_ID_FIELD_DESC = new TField("sourceContentId", TType.STRING, 3);

  String _requestId;
  static const int REQUESTID = 1;
  Message _msg;
  static const int MSG = 2;
  String _sourceContentId;
  static const int SOURCECONTENTID = 3;


  linkAndSendBuddyContentMessageToAllAsync_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // msg
  Message get msg => this._msg;

  set msg(Message msg) {
    this._msg = msg;
  }

  bool isSetMsg() => this.msg != null;

  unsetMsg() {
    this.msg = null;
  }

  // sourceContentId
  String get sourceContentId => this._sourceContentId;

  set sourceContentId(String sourceContentId) {
    this._sourceContentId = sourceContentId;
  }

  bool isSetSourceContentId() => this.sourceContentId != null;

  unsetSourceContentId() {
    this.sourceContentId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case MSG:
        return this.msg;
      case SOURCECONTENTID:
        return this.sourceContentId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          this.msg = value;
        }
        break;

      case SOURCECONTENTID:
        if (value == null) {
          unsetSourceContentId();
        } else {
          this.sourceContentId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case MSG:
        return isSetMsg();
      case SOURCECONTENTID:
        return isSetSourceContentId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MSG:
          if (field.type == TType.STRUCT) {
            this.msg = new Message();
            this.msg.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SOURCECONTENTID:
          if (field.type == TType.STRING) {
            this.sourceContentId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.msg != null) {
      oprot.writeFieldBegin(_MSG_FIELD_DESC);
      this.msg.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.sourceContentId != null) {
      oprot.writeFieldBegin(_SOURCE_CONTENT_ID_FIELD_DESC);
      oprot.writeString(this.sourceContentId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("linkAndSendBuddyContentMessageToAllAsync_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("msg:");
    if (this.msg == null) {
      ret.write("null");
    } else {
      ret.write(this.msg);
    }

    ret.write(", ");
    ret.write("sourceContentId:");
    if (this.sourceContentId == null) {
      ret.write("null");
    } else {
      ret.write(this.sourceContentId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class linkAndSendBuddyContentMessageToAllAsync_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("linkAndSendBuddyContentMessageToAllAsync_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  String _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  linkAndSendBuddyContentMessageToAllAsync_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("linkAndSendBuddyContentMessageToAllAsync_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class linkAndSendBuddyContentMessageToMids_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("linkAndSendBuddyContentMessageToMids_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _MSG_FIELD_DESC = new TField("msg", TType.STRUCT, 2);
  static final TField _SOURCE_CONTENT_ID_FIELD_DESC = new TField("sourceContentId", TType.STRING, 3);
  static final TField _MIDS_FIELD_DESC = new TField("mids", TType.LIST, 4);

  String _requestId;
  static const int REQUESTID = 1;
  Message _msg;
  static const int MSG = 2;
  String _sourceContentId;
  static const int SOURCECONTENTID = 3;
  List<String> _mids;
  static const int MIDS = 4;


  linkAndSendBuddyContentMessageToMids_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // msg
  Message get msg => this._msg;

  set msg(Message msg) {
    this._msg = msg;
  }

  bool isSetMsg() => this.msg != null;

  unsetMsg() {
    this.msg = null;
  }

  // sourceContentId
  String get sourceContentId => this._sourceContentId;

  set sourceContentId(String sourceContentId) {
    this._sourceContentId = sourceContentId;
  }

  bool isSetSourceContentId() => this.sourceContentId != null;

  unsetSourceContentId() {
    this.sourceContentId = null;
  }

  // mids
  List<String> get mids => this._mids;

  set mids(List<String> mids) {
    this._mids = mids;
  }

  bool isSetMids() => this.mids != null;

  unsetMids() {
    this.mids = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case MSG:
        return this.msg;
      case SOURCECONTENTID:
        return this.sourceContentId;
      case MIDS:
        return this.mids;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          this.msg = value;
        }
        break;

      case SOURCECONTENTID:
        if (value == null) {
          unsetSourceContentId();
        } else {
          this.sourceContentId = value;
        }
        break;

      case MIDS:
        if (value == null) {
          unsetMids();
        } else {
          this.mids = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case MSG:
        return isSetMsg();
      case SOURCECONTENTID:
        return isSetSourceContentId();
      case MIDS:
        return isSetMids();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MSG:
          if (field.type == TType.STRUCT) {
            this.msg = new Message();
            this.msg.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SOURCECONTENTID:
          if (field.type == TType.STRING) {
            this.sourceContentId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MIDS:
          if (field.type == TType.LIST) {
            {
              TList _list616 = iprot.readListBegin();
              this.mids = new List<String>();
              for (int _i617 = 0; _i617 < _list616.length; ++_i617) {
                String _elem618;
                _elem618 = iprot.readString();
                this.mids.add(_elem618);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.msg != null) {
      oprot.writeFieldBegin(_MSG_FIELD_DESC);
      this.msg.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.sourceContentId != null) {
      oprot.writeFieldBegin(_SOURCE_CONTENT_ID_FIELD_DESC);
      oprot.writeString(this.sourceContentId);
      oprot.writeFieldEnd();
    }
    if (this.mids != null) {
      oprot.writeFieldBegin(_MIDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.mids.length));
        for (var elem619 in this.mids) {
          oprot.writeString(elem619);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("linkAndSendBuddyContentMessageToMids_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("msg:");
    if (this.msg == null) {
      ret.write("null");
    } else {
      ret.write(this.msg);
    }

    ret.write(", ");
    ret.write("sourceContentId:");
    if (this.sourceContentId == null) {
      ret.write("null");
    } else {
      ret.write(this.sourceContentId);
    }

    ret.write(", ");
    ret.write("mids:");
    if (this.mids == null) {
      ret.write("null");
    } else {
      ret.write(this.mids);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class linkAndSendBuddyContentMessageToMids_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("linkAndSendBuddyContentMessageToMids_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  SendBuddyMessageResult _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  linkAndSendBuddyContentMessageToMids_result() {
  }

  // success
  SendBuddyMessageResult get success => this._success;

  set success(SendBuddyMessageResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new SendBuddyMessageResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("linkAndSendBuddyContentMessageToMids_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class notifyBuddyBlocked_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("notifyBuddyBlocked_args");
  static final TField _BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, 1);
  static final TField _BLOCKER_MID_FIELD_DESC = new TField("blockerMid", TType.STRING, 2);

  String _buddyMid;
  static const int BUDDYMID = 1;
  String _blockerMid;
  static const int BLOCKERMID = 2;


  notifyBuddyBlocked_args() {
  }

  // buddyMid
  String get buddyMid => this._buddyMid;

  set buddyMid(String buddyMid) {
    this._buddyMid = buddyMid;
  }

  bool isSetBuddyMid() => this.buddyMid != null;

  unsetBuddyMid() {
    this.buddyMid = null;
  }

  // blockerMid
  String get blockerMid => this._blockerMid;

  set blockerMid(String blockerMid) {
    this._blockerMid = blockerMid;
  }

  bool isSetBlockerMid() => this.blockerMid != null;

  unsetBlockerMid() {
    this.blockerMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return this.buddyMid;
      case BLOCKERMID:
        return this.blockerMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case BUDDYMID:
        if (value == null) {
          unsetBuddyMid();
        } else {
          this.buddyMid = value;
        }
        break;

      case BLOCKERMID:
        if (value == null) {
          unsetBlockerMid();
        } else {
          this.blockerMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return isSetBuddyMid();
      case BLOCKERMID:
        return isSetBlockerMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case BUDDYMID:
          if (field.type == TType.STRING) {
            this.buddyMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BLOCKERMID:
          if (field.type == TType.STRING) {
            this.blockerMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.buddyMid != null) {
      oprot.writeFieldBegin(_BUDDY_MID_FIELD_DESC);
      oprot.writeString(this.buddyMid);
      oprot.writeFieldEnd();
    }
    if (this.blockerMid != null) {
      oprot.writeFieldBegin(_BLOCKER_MID_FIELD_DESC);
      oprot.writeString(this.blockerMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("notifyBuddyBlocked_args(");

    ret.write("buddyMid:");
    if (this.buddyMid == null) {
      ret.write("null");
    } else {
      ret.write(this.buddyMid);
    }

    ret.write(", ");
    ret.write("blockerMid:");
    if (this.blockerMid == null) {
      ret.write("null");
    } else {
      ret.write(this.blockerMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class notifyBuddyBlocked_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("notifyBuddyBlocked_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  notifyBuddyBlocked_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("notifyBuddyBlocked_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class notifyBuddyUnblocked_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("notifyBuddyUnblocked_args");
  static final TField _BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, 1);
  static final TField _BLOCKER_MID_FIELD_DESC = new TField("blockerMid", TType.STRING, 2);

  String _buddyMid;
  static const int BUDDYMID = 1;
  String _blockerMid;
  static const int BLOCKERMID = 2;


  notifyBuddyUnblocked_args() {
  }

  // buddyMid
  String get buddyMid => this._buddyMid;

  set buddyMid(String buddyMid) {
    this._buddyMid = buddyMid;
  }

  bool isSetBuddyMid() => this.buddyMid != null;

  unsetBuddyMid() {
    this.buddyMid = null;
  }

  // blockerMid
  String get blockerMid => this._blockerMid;

  set blockerMid(String blockerMid) {
    this._blockerMid = blockerMid;
  }

  bool isSetBlockerMid() => this.blockerMid != null;

  unsetBlockerMid() {
    this.blockerMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return this.buddyMid;
      case BLOCKERMID:
        return this.blockerMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case BUDDYMID:
        if (value == null) {
          unsetBuddyMid();
        } else {
          this.buddyMid = value;
        }
        break;

      case BLOCKERMID:
        if (value == null) {
          unsetBlockerMid();
        } else {
          this.blockerMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return isSetBuddyMid();
      case BLOCKERMID:
        return isSetBlockerMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case BUDDYMID:
          if (field.type == TType.STRING) {
            this.buddyMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BLOCKERMID:
          if (field.type == TType.STRING) {
            this.blockerMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.buddyMid != null) {
      oprot.writeFieldBegin(_BUDDY_MID_FIELD_DESC);
      oprot.writeString(this.buddyMid);
      oprot.writeFieldEnd();
    }
    if (this.blockerMid != null) {
      oprot.writeFieldBegin(_BLOCKER_MID_FIELD_DESC);
      oprot.writeString(this.blockerMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("notifyBuddyUnblocked_args(");

    ret.write("buddyMid:");
    if (this.buddyMid == null) {
      ret.write("null");
    } else {
      ret.write(this.buddyMid);
    }

    ret.write(", ");
    ret.write("blockerMid:");
    if (this.blockerMid == null) {
      ret.write("null");
    } else {
      ret.write(this.blockerMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class notifyBuddyUnblocked_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("notifyBuddyUnblocked_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  notifyBuddyUnblocked_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("notifyBuddyUnblocked_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class registerBuddy_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("registerBuddy_args");
  static final TField _BUDDY_ID_FIELD_DESC = new TField("buddyId", TType.STRING, 2);
  static final TField _SEARCH_ID_FIELD_DESC = new TField("searchId", TType.STRING, 3);
  static final TField _DISPLAY_NAME_FIELD_DESC = new TField("displayName", TType.STRING, 4);
  static final TField _STATUS_MEESSAGE_FIELD_DESC = new TField("statusMeessage", TType.STRING, 5);
  static final TField _PICTURE_FIELD_DESC = new TField("picture", TType.STRING, 6);
  static final TField _SETTINGS_FIELD_DESC = new TField("settings", TType.MAP, 7);

  String _buddyId;
  static const int BUDDYID = 2;
  String _searchId;
  static const int SEARCHID = 3;
  String _displayName;
  static const int DISPLAYNAME = 4;
  String _statusMeessage;
  static const int STATUSMEESSAGE = 5;
  Uint8List _picture;
  static const int PICTURE = 6;
  Map<String, String> _settings;
  static const int SETTINGS = 7;


  registerBuddy_args() {
  }

  // buddyId
  String get buddyId => this._buddyId;

  set buddyId(String buddyId) {
    this._buddyId = buddyId;
  }

  bool isSetBuddyId() => this.buddyId != null;

  unsetBuddyId() {
    this.buddyId = null;
  }

  // searchId
  String get searchId => this._searchId;

  set searchId(String searchId) {
    this._searchId = searchId;
  }

  bool isSetSearchId() => this.searchId != null;

  unsetSearchId() {
    this.searchId = null;
  }

  // displayName
  String get displayName => this._displayName;

  set displayName(String displayName) {
    this._displayName = displayName;
  }

  bool isSetDisplayName() => this.displayName != null;

  unsetDisplayName() {
    this.displayName = null;
  }

  // statusMeessage
  String get statusMeessage => this._statusMeessage;

  set statusMeessage(String statusMeessage) {
    this._statusMeessage = statusMeessage;
  }

  bool isSetStatusMeessage() => this.statusMeessage != null;

  unsetStatusMeessage() {
    this.statusMeessage = null;
  }

  // picture
  Uint8List get picture => this._picture;

  set picture(Uint8List picture) {
    this._picture = picture;
  }

  bool isSetPicture() => this.picture != null;

  unsetPicture() {
    this.picture = null;
  }

  // settings
  Map<String, String> get settings => this._settings;

  set settings(Map<String, String> settings) {
    this._settings = settings;
  }

  bool isSetSettings() => this.settings != null;

  unsetSettings() {
    this.settings = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case BUDDYID:
        return this.buddyId;
      case SEARCHID:
        return this.searchId;
      case DISPLAYNAME:
        return this.displayName;
      case STATUSMEESSAGE:
        return this.statusMeessage;
      case PICTURE:
        return this.picture;
      case SETTINGS:
        return this.settings;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case BUDDYID:
        if (value == null) {
          unsetBuddyId();
        } else {
          this.buddyId = value;
        }
        break;

      case SEARCHID:
        if (value == null) {
          unsetSearchId();
        } else {
          this.searchId = value;
        }
        break;

      case DISPLAYNAME:
        if (value == null) {
          unsetDisplayName();
        } else {
          this.displayName = value;
        }
        break;

      case STATUSMEESSAGE:
        if (value == null) {
          unsetStatusMeessage();
        } else {
          this.statusMeessage = value;
        }
        break;

      case PICTURE:
        if (value == null) {
          unsetPicture();
        } else {
          this.picture = value;
        }
        break;

      case SETTINGS:
        if (value == null) {
          unsetSettings();
        } else {
          this.settings = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case BUDDYID:
        return isSetBuddyId();
      case SEARCHID:
        return isSetSearchId();
      case DISPLAYNAME:
        return isSetDisplayName();
      case STATUSMEESSAGE:
        return isSetStatusMeessage();
      case PICTURE:
        return isSetPicture();
      case SETTINGS:
        return isSetSettings();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case BUDDYID:
          if (field.type == TType.STRING) {
            this.buddyId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SEARCHID:
          if (field.type == TType.STRING) {
            this.searchId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DISPLAYNAME:
          if (field.type == TType.STRING) {
            this.displayName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUSMEESSAGE:
          if (field.type == TType.STRING) {
            this.statusMeessage = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PICTURE:
          if (field.type == TType.STRING) {
            this.picture = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SETTINGS:
          if (field.type == TType.MAP) {
            {
              TMap _map620 = iprot.readMapBegin();
              this.settings = new Map<String, String>();
              for (int _i621 = 0; _i621 < _map620.length; ++_i621) {
                String _key622;
                String _val623;
                _key622 = iprot.readString();
                _val623 = iprot.readString();
                this.settings[_key622] = _val623;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.buddyId != null) {
      oprot.writeFieldBegin(_BUDDY_ID_FIELD_DESC);
      oprot.writeString(this.buddyId);
      oprot.writeFieldEnd();
    }
    if (this.searchId != null) {
      oprot.writeFieldBegin(_SEARCH_ID_FIELD_DESC);
      oprot.writeString(this.searchId);
      oprot.writeFieldEnd();
    }
    if (this.displayName != null) {
      oprot.writeFieldBegin(_DISPLAY_NAME_FIELD_DESC);
      oprot.writeString(this.displayName);
      oprot.writeFieldEnd();
    }
    if (this.statusMeessage != null) {
      oprot.writeFieldBegin(_STATUS_MEESSAGE_FIELD_DESC);
      oprot.writeString(this.statusMeessage);
      oprot.writeFieldEnd();
    }
    if (this.picture != null) {
      oprot.writeFieldBegin(_PICTURE_FIELD_DESC);
      oprot.writeBinary(this.picture);
      oprot.writeFieldEnd();
    }
    if (this.settings != null) {
      oprot.writeFieldBegin(_SETTINGS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.settings.length));
        for (var elem625 in this.settings.keys) {
          oprot.writeString(elem625);
          oprot.writeString(this.settings[elem625]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("registerBuddy_args(");

    ret.write("buddyId:");
    if (this.buddyId == null) {
      ret.write("null");
    } else {
      ret.write(this.buddyId);
    }

    ret.write(", ");
    ret.write("searchId:");
    if (this.searchId == null) {
      ret.write("null");
    } else {
      ret.write(this.searchId);
    }

    ret.write(", ");
    ret.write("displayName:");
    if (this.displayName == null) {
      ret.write("null");
    } else {
      ret.write(this.displayName);
    }

    ret.write(", ");
    ret.write("statusMeessage:");
    if (this.statusMeessage == null) {
      ret.write("null");
    } else {
      ret.write(this.statusMeessage);
    }

    ret.write(", ");
    ret.write("picture:");
    if (this.picture == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("settings:");
    if (this.settings == null) {
      ret.write("null");
    } else {
      ret.write(this.settings);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class registerBuddy_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("registerBuddy_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  String _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  registerBuddy_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("registerBuddy_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class registerBuddyAdmin_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("registerBuddyAdmin_args");
  static final TField _BUDDY_ID_FIELD_DESC = new TField("buddyId", TType.STRING, 2);
  static final TField _SEARCH_ID_FIELD_DESC = new TField("searchId", TType.STRING, 3);
  static final TField _DISPLAY_NAME_FIELD_DESC = new TField("displayName", TType.STRING, 4);
  static final TField _STATUS_MESSAGE_FIELD_DESC = new TField("statusMessage", TType.STRING, 5);
  static final TField _PICTURE_FIELD_DESC = new TField("picture", TType.STRING, 6);

  String _buddyId;
  static const int BUDDYID = 2;
  String _searchId;
  static const int SEARCHID = 3;
  String _displayName;
  static const int DISPLAYNAME = 4;
  String _statusMessage;
  static const int STATUSMESSAGE = 5;
  Uint8List _picture;
  static const int PICTURE = 6;


  registerBuddyAdmin_args() {
  }

  // buddyId
  String get buddyId => this._buddyId;

  set buddyId(String buddyId) {
    this._buddyId = buddyId;
  }

  bool isSetBuddyId() => this.buddyId != null;

  unsetBuddyId() {
    this.buddyId = null;
  }

  // searchId
  String get searchId => this._searchId;

  set searchId(String searchId) {
    this._searchId = searchId;
  }

  bool isSetSearchId() => this.searchId != null;

  unsetSearchId() {
    this.searchId = null;
  }

  // displayName
  String get displayName => this._displayName;

  set displayName(String displayName) {
    this._displayName = displayName;
  }

  bool isSetDisplayName() => this.displayName != null;

  unsetDisplayName() {
    this.displayName = null;
  }

  // statusMessage
  String get statusMessage => this._statusMessage;

  set statusMessage(String statusMessage) {
    this._statusMessage = statusMessage;
  }

  bool isSetStatusMessage() => this.statusMessage != null;

  unsetStatusMessage() {
    this.statusMessage = null;
  }

  // picture
  Uint8List get picture => this._picture;

  set picture(Uint8List picture) {
    this._picture = picture;
  }

  bool isSetPicture() => this.picture != null;

  unsetPicture() {
    this.picture = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case BUDDYID:
        return this.buddyId;
      case SEARCHID:
        return this.searchId;
      case DISPLAYNAME:
        return this.displayName;
      case STATUSMESSAGE:
        return this.statusMessage;
      case PICTURE:
        return this.picture;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case BUDDYID:
        if (value == null) {
          unsetBuddyId();
        } else {
          this.buddyId = value;
        }
        break;

      case SEARCHID:
        if (value == null) {
          unsetSearchId();
        } else {
          this.searchId = value;
        }
        break;

      case DISPLAYNAME:
        if (value == null) {
          unsetDisplayName();
        } else {
          this.displayName = value;
        }
        break;

      case STATUSMESSAGE:
        if (value == null) {
          unsetStatusMessage();
        } else {
          this.statusMessage = value;
        }
        break;

      case PICTURE:
        if (value == null) {
          unsetPicture();
        } else {
          this.picture = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case BUDDYID:
        return isSetBuddyId();
      case SEARCHID:
        return isSetSearchId();
      case DISPLAYNAME:
        return isSetDisplayName();
      case STATUSMESSAGE:
        return isSetStatusMessage();
      case PICTURE:
        return isSetPicture();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case BUDDYID:
          if (field.type == TType.STRING) {
            this.buddyId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SEARCHID:
          if (field.type == TType.STRING) {
            this.searchId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DISPLAYNAME:
          if (field.type == TType.STRING) {
            this.displayName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUSMESSAGE:
          if (field.type == TType.STRING) {
            this.statusMessage = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PICTURE:
          if (field.type == TType.STRING) {
            this.picture = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.buddyId != null) {
      oprot.writeFieldBegin(_BUDDY_ID_FIELD_DESC);
      oprot.writeString(this.buddyId);
      oprot.writeFieldEnd();
    }
    if (this.searchId != null) {
      oprot.writeFieldBegin(_SEARCH_ID_FIELD_DESC);
      oprot.writeString(this.searchId);
      oprot.writeFieldEnd();
    }
    if (this.displayName != null) {
      oprot.writeFieldBegin(_DISPLAY_NAME_FIELD_DESC);
      oprot.writeString(this.displayName);
      oprot.writeFieldEnd();
    }
    if (this.statusMessage != null) {
      oprot.writeFieldBegin(_STATUS_MESSAGE_FIELD_DESC);
      oprot.writeString(this.statusMessage);
      oprot.writeFieldEnd();
    }
    if (this.picture != null) {
      oprot.writeFieldBegin(_PICTURE_FIELD_DESC);
      oprot.writeBinary(this.picture);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("registerBuddyAdmin_args(");

    ret.write("buddyId:");
    if (this.buddyId == null) {
      ret.write("null");
    } else {
      ret.write(this.buddyId);
    }

    ret.write(", ");
    ret.write("searchId:");
    if (this.searchId == null) {
      ret.write("null");
    } else {
      ret.write(this.searchId);
    }

    ret.write(", ");
    ret.write("displayName:");
    if (this.displayName == null) {
      ret.write("null");
    } else {
      ret.write(this.displayName);
    }

    ret.write(", ");
    ret.write("statusMessage:");
    if (this.statusMessage == null) {
      ret.write("null");
    } else {
      ret.write(this.statusMessage);
    }

    ret.write(", ");
    ret.write("picture:");
    if (this.picture == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class registerBuddyAdmin_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("registerBuddyAdmin_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  String _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  registerBuddyAdmin_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("registerBuddyAdmin_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class reissueContactTicket_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("reissueContactTicket_args");
  static final TField _EXPIRATION_TIME_FIELD_DESC = new TField("expirationTime", TType.I64, 3);
  static final TField _MAX_USE_COUNT_FIELD_DESC = new TField("maxUseCount", TType.I32, 4);

  int _expirationTime = 0;
  static const int EXPIRATIONTIME = 3;
  int _maxUseCount = 0;
  static const int MAXUSECOUNT = 4;

  bool __isset_expirationTime = false;
  bool __isset_maxUseCount = false;

  reissueContactTicket_args() {
  }

  // expirationTime
  int get expirationTime => this._expirationTime;

  set expirationTime(int expirationTime) {
    this._expirationTime = expirationTime;
    this.__isset_expirationTime = true;
  }

  bool isSetExpirationTime() => this.__isset_expirationTime;

  unsetExpirationTime() {
    this.__isset_expirationTime = false;
  }

  // maxUseCount
  int get maxUseCount => this._maxUseCount;

  set maxUseCount(int maxUseCount) {
    this._maxUseCount = maxUseCount;
    this.__isset_maxUseCount = true;
  }

  bool isSetMaxUseCount() => this.__isset_maxUseCount;

  unsetMaxUseCount() {
    this.__isset_maxUseCount = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case EXPIRATIONTIME:
        return this.expirationTime;
      case MAXUSECOUNT:
        return this.maxUseCount;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case EXPIRATIONTIME:
        if (value == null) {
          unsetExpirationTime();
        } else {
          this.expirationTime = value;
        }
        break;

      case MAXUSECOUNT:
        if (value == null) {
          unsetMaxUseCount();
        } else {
          this.maxUseCount = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case EXPIRATIONTIME:
        return isSetExpirationTime();
      case MAXUSECOUNT:
        return isSetMaxUseCount();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case EXPIRATIONTIME:
          if (field.type == TType.I64) {
            this.expirationTime = iprot.readI64();
            this.__isset_expirationTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MAXUSECOUNT:
          if (field.type == TType.I32) {
            this.maxUseCount = iprot.readI32();
            this.__isset_maxUseCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_EXPIRATION_TIME_FIELD_DESC);
    oprot.writeI64(this.expirationTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MAX_USE_COUNT_FIELD_DESC);
    oprot.writeI32(this.maxUseCount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("reissueContactTicket_args(");

    ret.write("expirationTime:");
    ret.write(this.expirationTime);

    ret.write(", ");
    ret.write("maxUseCount:");
    ret.write(this.maxUseCount);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class reissueContactTicket_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("reissueContactTicket_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  String _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  reissueContactTicket_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("reissueContactTicket_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class removeBuddyMember_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("removeBuddyMember_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _USER_MID_FIELD_DESC = new TField("userMid", TType.STRING, 2);

  String _requestId;
  static const int REQUESTID = 1;
  String _userMid;
  static const int USERMID = 2;


  removeBuddyMember_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // userMid
  String get userMid => this._userMid;

  set userMid(String userMid) {
    this._userMid = userMid;
  }

  bool isSetUserMid() => this.userMid != null;

  unsetUserMid() {
    this.userMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case USERMID:
        return this.userMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case USERMID:
        if (value == null) {
          unsetUserMid();
        } else {
          this.userMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case USERMID:
        return isSetUserMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERMID:
          if (field.type == TType.STRING) {
            this.userMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.userMid != null) {
      oprot.writeFieldBegin(_USER_MID_FIELD_DESC);
      oprot.writeString(this.userMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("removeBuddyMember_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("userMid:");
    if (this.userMid == null) {
      ret.write("null");
    } else {
      ret.write(this.userMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class removeBuddyMember_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("removeBuddyMember_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  removeBuddyMember_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("removeBuddyMember_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class removeBuddyMembers_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("removeBuddyMembers_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _USER_MIDS_FIELD_DESC = new TField("userMids", TType.LIST, 2);

  String _requestId;
  static const int REQUESTID = 1;
  List<String> _userMids;
  static const int USERMIDS = 2;


  removeBuddyMembers_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // userMids
  List<String> get userMids => this._userMids;

  set userMids(List<String> userMids) {
    this._userMids = userMids;
  }

  bool isSetUserMids() => this.userMids != null;

  unsetUserMids() {
    this.userMids = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case USERMIDS:
        return this.userMids;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case USERMIDS:
        if (value == null) {
          unsetUserMids();
        } else {
          this.userMids = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case USERMIDS:
        return isSetUserMids();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERMIDS:
          if (field.type == TType.LIST) {
            {
              TList _list626 = iprot.readListBegin();
              this.userMids = new List<String>();
              for (int _i627 = 0; _i627 < _list626.length; ++_i627) {
                String _elem628;
                _elem628 = iprot.readString();
                this.userMids.add(_elem628);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.userMids != null) {
      oprot.writeFieldBegin(_USER_MIDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.userMids.length));
        for (var elem629 in this.userMids) {
          oprot.writeString(elem629);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("removeBuddyMembers_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("userMids:");
    if (this.userMids == null) {
      ret.write("null");
    } else {
      ret.write(this.userMids);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class removeBuddyMembers_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("removeBuddyMembers_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  removeBuddyMembers_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("removeBuddyMembers_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendBuddyContentMessageToAll_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendBuddyContentMessageToAll_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _MSG_FIELD_DESC = new TField("msg", TType.STRUCT, 2);
  static final TField _CONTENT_FIELD_DESC = new TField("content", TType.STRING, 3);

  String _requestId;
  static const int REQUESTID = 1;
  Message _msg;
  static const int MSG = 2;
  Uint8List _content;
  static const int CONTENT = 3;


  sendBuddyContentMessageToAll_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // msg
  Message get msg => this._msg;

  set msg(Message msg) {
    this._msg = msg;
  }

  bool isSetMsg() => this.msg != null;

  unsetMsg() {
    this.msg = null;
  }

  // content
  Uint8List get content => this._content;

  set content(Uint8List content) {
    this._content = content;
  }

  bool isSetContent() => this.content != null;

  unsetContent() {
    this.content = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case MSG:
        return this.msg;
      case CONTENT:
        return this.content;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          this.msg = value;
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          this.content = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case MSG:
        return isSetMsg();
      case CONTENT:
        return isSetContent();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MSG:
          if (field.type == TType.STRUCT) {
            this.msg = new Message();
            this.msg.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTENT:
          if (field.type == TType.STRING) {
            this.content = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.msg != null) {
      oprot.writeFieldBegin(_MSG_FIELD_DESC);
      this.msg.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.content != null) {
      oprot.writeFieldBegin(_CONTENT_FIELD_DESC);
      oprot.writeBinary(this.content);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendBuddyContentMessageToAll_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("msg:");
    if (this.msg == null) {
      ret.write("null");
    } else {
      ret.write(this.msg);
    }

    ret.write(", ");
    ret.write("content:");
    if (this.content == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendBuddyContentMessageToAll_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendBuddyContentMessageToAll_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  SendBuddyMessageResult _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  sendBuddyContentMessageToAll_result() {
  }

  // success
  SendBuddyMessageResult get success => this._success;

  set success(SendBuddyMessageResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new SendBuddyMessageResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendBuddyContentMessageToAll_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendBuddyContentMessageToAllAsync_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendBuddyContentMessageToAllAsync_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _MSG_FIELD_DESC = new TField("msg", TType.STRUCT, 2);
  static final TField _CONTENT_FIELD_DESC = new TField("content", TType.STRING, 3);

  String _requestId;
  static const int REQUESTID = 1;
  Message _msg;
  static const int MSG = 2;
  Uint8List _content;
  static const int CONTENT = 3;


  sendBuddyContentMessageToAllAsync_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // msg
  Message get msg => this._msg;

  set msg(Message msg) {
    this._msg = msg;
  }

  bool isSetMsg() => this.msg != null;

  unsetMsg() {
    this.msg = null;
  }

  // content
  Uint8List get content => this._content;

  set content(Uint8List content) {
    this._content = content;
  }

  bool isSetContent() => this.content != null;

  unsetContent() {
    this.content = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case MSG:
        return this.msg;
      case CONTENT:
        return this.content;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          this.msg = value;
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          this.content = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case MSG:
        return isSetMsg();
      case CONTENT:
        return isSetContent();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MSG:
          if (field.type == TType.STRUCT) {
            this.msg = new Message();
            this.msg.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTENT:
          if (field.type == TType.STRING) {
            this.content = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.msg != null) {
      oprot.writeFieldBegin(_MSG_FIELD_DESC);
      this.msg.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.content != null) {
      oprot.writeFieldBegin(_CONTENT_FIELD_DESC);
      oprot.writeBinary(this.content);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendBuddyContentMessageToAllAsync_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("msg:");
    if (this.msg == null) {
      ret.write("null");
    } else {
      ret.write(this.msg);
    }

    ret.write(", ");
    ret.write("content:");
    if (this.content == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendBuddyContentMessageToAllAsync_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendBuddyContentMessageToAllAsync_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  String _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  sendBuddyContentMessageToAllAsync_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendBuddyContentMessageToAllAsync_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendBuddyContentMessageToMids_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendBuddyContentMessageToMids_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _MSG_FIELD_DESC = new TField("msg", TType.STRUCT, 2);
  static final TField _CONTENT_FIELD_DESC = new TField("content", TType.STRING, 3);
  static final TField _MIDS_FIELD_DESC = new TField("mids", TType.LIST, 4);

  String _requestId;
  static const int REQUESTID = 1;
  Message _msg;
  static const int MSG = 2;
  Uint8List _content;
  static const int CONTENT = 3;
  List<String> _mids;
  static const int MIDS = 4;


  sendBuddyContentMessageToMids_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // msg
  Message get msg => this._msg;

  set msg(Message msg) {
    this._msg = msg;
  }

  bool isSetMsg() => this.msg != null;

  unsetMsg() {
    this.msg = null;
  }

  // content
  Uint8List get content => this._content;

  set content(Uint8List content) {
    this._content = content;
  }

  bool isSetContent() => this.content != null;

  unsetContent() {
    this.content = null;
  }

  // mids
  List<String> get mids => this._mids;

  set mids(List<String> mids) {
    this._mids = mids;
  }

  bool isSetMids() => this.mids != null;

  unsetMids() {
    this.mids = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case MSG:
        return this.msg;
      case CONTENT:
        return this.content;
      case MIDS:
        return this.mids;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          this.msg = value;
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          this.content = value;
        }
        break;

      case MIDS:
        if (value == null) {
          unsetMids();
        } else {
          this.mids = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case MSG:
        return isSetMsg();
      case CONTENT:
        return isSetContent();
      case MIDS:
        return isSetMids();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MSG:
          if (field.type == TType.STRUCT) {
            this.msg = new Message();
            this.msg.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTENT:
          if (field.type == TType.STRING) {
            this.content = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MIDS:
          if (field.type == TType.LIST) {
            {
              TList _list630 = iprot.readListBegin();
              this.mids = new List<String>();
              for (int _i631 = 0; _i631 < _list630.length; ++_i631) {
                String _elem632;
                _elem632 = iprot.readString();
                this.mids.add(_elem632);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.msg != null) {
      oprot.writeFieldBegin(_MSG_FIELD_DESC);
      this.msg.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.content != null) {
      oprot.writeFieldBegin(_CONTENT_FIELD_DESC);
      oprot.writeBinary(this.content);
      oprot.writeFieldEnd();
    }
    if (this.mids != null) {
      oprot.writeFieldBegin(_MIDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.mids.length));
        for (var elem633 in this.mids) {
          oprot.writeString(elem633);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendBuddyContentMessageToMids_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("msg:");
    if (this.msg == null) {
      ret.write("null");
    } else {
      ret.write(this.msg);
    }

    ret.write(", ");
    ret.write("content:");
    if (this.content == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("mids:");
    if (this.mids == null) {
      ret.write("null");
    } else {
      ret.write(this.mids);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendBuddyContentMessageToMids_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendBuddyContentMessageToMids_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  SendBuddyMessageResult _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  sendBuddyContentMessageToMids_result() {
  }

  // success
  SendBuddyMessageResult get success => this._success;

  set success(SendBuddyMessageResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new SendBuddyMessageResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendBuddyContentMessageToMids_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendBuddyContentMessageToMidsAsync_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendBuddyContentMessageToMidsAsync_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _MSG_FIELD_DESC = new TField("msg", TType.STRUCT, 2);
  static final TField _CONTENT_FIELD_DESC = new TField("content", TType.STRING, 3);
  static final TField _MIDS_FIELD_DESC = new TField("mids", TType.LIST, 4);

  String _requestId;
  static const int REQUESTID = 1;
  Message _msg;
  static const int MSG = 2;
  Uint8List _content;
  static const int CONTENT = 3;
  List<String> _mids;
  static const int MIDS = 4;


  sendBuddyContentMessageToMidsAsync_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // msg
  Message get msg => this._msg;

  set msg(Message msg) {
    this._msg = msg;
  }

  bool isSetMsg() => this.msg != null;

  unsetMsg() {
    this.msg = null;
  }

  // content
  Uint8List get content => this._content;

  set content(Uint8List content) {
    this._content = content;
  }

  bool isSetContent() => this.content != null;

  unsetContent() {
    this.content = null;
  }

  // mids
  List<String> get mids => this._mids;

  set mids(List<String> mids) {
    this._mids = mids;
  }

  bool isSetMids() => this.mids != null;

  unsetMids() {
    this.mids = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case MSG:
        return this.msg;
      case CONTENT:
        return this.content;
      case MIDS:
        return this.mids;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          this.msg = value;
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          this.content = value;
        }
        break;

      case MIDS:
        if (value == null) {
          unsetMids();
        } else {
          this.mids = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case MSG:
        return isSetMsg();
      case CONTENT:
        return isSetContent();
      case MIDS:
        return isSetMids();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MSG:
          if (field.type == TType.STRUCT) {
            this.msg = new Message();
            this.msg.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTENT:
          if (field.type == TType.STRING) {
            this.content = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MIDS:
          if (field.type == TType.LIST) {
            {
              TList _list634 = iprot.readListBegin();
              this.mids = new List<String>();
              for (int _i635 = 0; _i635 < _list634.length; ++_i635) {
                String _elem636;
                _elem636 = iprot.readString();
                this.mids.add(_elem636);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.msg != null) {
      oprot.writeFieldBegin(_MSG_FIELD_DESC);
      this.msg.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.content != null) {
      oprot.writeFieldBegin(_CONTENT_FIELD_DESC);
      oprot.writeBinary(this.content);
      oprot.writeFieldEnd();
    }
    if (this.mids != null) {
      oprot.writeFieldBegin(_MIDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.mids.length));
        for (var elem637 in this.mids) {
          oprot.writeString(elem637);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendBuddyContentMessageToMidsAsync_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("msg:");
    if (this.msg == null) {
      ret.write("null");
    } else {
      ret.write(this.msg);
    }

    ret.write(", ");
    ret.write("content:");
    if (this.content == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("mids:");
    if (this.mids == null) {
      ret.write("null");
    } else {
      ret.write(this.mids);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendBuddyContentMessageToMidsAsync_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendBuddyContentMessageToMidsAsync_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  String _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  sendBuddyContentMessageToMidsAsync_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendBuddyContentMessageToMidsAsync_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendBuddyMessageToAll_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendBuddyMessageToAll_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _MSG_FIELD_DESC = new TField("msg", TType.STRUCT, 2);

  String _requestId;
  static const int REQUESTID = 1;
  Message _msg;
  static const int MSG = 2;


  sendBuddyMessageToAll_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // msg
  Message get msg => this._msg;

  set msg(Message msg) {
    this._msg = msg;
  }

  bool isSetMsg() => this.msg != null;

  unsetMsg() {
    this.msg = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case MSG:
        return this.msg;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          this.msg = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case MSG:
        return isSetMsg();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MSG:
          if (field.type == TType.STRUCT) {
            this.msg = new Message();
            this.msg.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.msg != null) {
      oprot.writeFieldBegin(_MSG_FIELD_DESC);
      this.msg.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendBuddyMessageToAll_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("msg:");
    if (this.msg == null) {
      ret.write("null");
    } else {
      ret.write(this.msg);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendBuddyMessageToAll_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendBuddyMessageToAll_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  SendBuddyMessageResult _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  sendBuddyMessageToAll_result() {
  }

  // success
  SendBuddyMessageResult get success => this._success;

  set success(SendBuddyMessageResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new SendBuddyMessageResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendBuddyMessageToAll_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendBuddyMessageToAllAsync_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendBuddyMessageToAllAsync_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _MSG_FIELD_DESC = new TField("msg", TType.STRUCT, 2);

  String _requestId;
  static const int REQUESTID = 1;
  Message _msg;
  static const int MSG = 2;


  sendBuddyMessageToAllAsync_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // msg
  Message get msg => this._msg;

  set msg(Message msg) {
    this._msg = msg;
  }

  bool isSetMsg() => this.msg != null;

  unsetMsg() {
    this.msg = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case MSG:
        return this.msg;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          this.msg = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case MSG:
        return isSetMsg();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MSG:
          if (field.type == TType.STRUCT) {
            this.msg = new Message();
            this.msg.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.msg != null) {
      oprot.writeFieldBegin(_MSG_FIELD_DESC);
      this.msg.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendBuddyMessageToAllAsync_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("msg:");
    if (this.msg == null) {
      ret.write("null");
    } else {
      ret.write(this.msg);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendBuddyMessageToAllAsync_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendBuddyMessageToAllAsync_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  String _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  sendBuddyMessageToAllAsync_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendBuddyMessageToAllAsync_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendBuddyMessageToMids_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendBuddyMessageToMids_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _MSG_FIELD_DESC = new TField("msg", TType.STRUCT, 2);
  static final TField _MIDS_FIELD_DESC = new TField("mids", TType.LIST, 3);

  String _requestId;
  static const int REQUESTID = 1;
  Message _msg;
  static const int MSG = 2;
  List<String> _mids;
  static const int MIDS = 3;


  sendBuddyMessageToMids_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // msg
  Message get msg => this._msg;

  set msg(Message msg) {
    this._msg = msg;
  }

  bool isSetMsg() => this.msg != null;

  unsetMsg() {
    this.msg = null;
  }

  // mids
  List<String> get mids => this._mids;

  set mids(List<String> mids) {
    this._mids = mids;
  }

  bool isSetMids() => this.mids != null;

  unsetMids() {
    this.mids = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case MSG:
        return this.msg;
      case MIDS:
        return this.mids;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          this.msg = value;
        }
        break;

      case MIDS:
        if (value == null) {
          unsetMids();
        } else {
          this.mids = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case MSG:
        return isSetMsg();
      case MIDS:
        return isSetMids();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MSG:
          if (field.type == TType.STRUCT) {
            this.msg = new Message();
            this.msg.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MIDS:
          if (field.type == TType.LIST) {
            {
              TList _list638 = iprot.readListBegin();
              this.mids = new List<String>();
              for (int _i639 = 0; _i639 < _list638.length; ++_i639) {
                String _elem640;
                _elem640 = iprot.readString();
                this.mids.add(_elem640);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.msg != null) {
      oprot.writeFieldBegin(_MSG_FIELD_DESC);
      this.msg.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.mids != null) {
      oprot.writeFieldBegin(_MIDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.mids.length));
        for (var elem641 in this.mids) {
          oprot.writeString(elem641);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendBuddyMessageToMids_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("msg:");
    if (this.msg == null) {
      ret.write("null");
    } else {
      ret.write(this.msg);
    }

    ret.write(", ");
    ret.write("mids:");
    if (this.mids == null) {
      ret.write("null");
    } else {
      ret.write(this.mids);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendBuddyMessageToMids_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendBuddyMessageToMids_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  SendBuddyMessageResult _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  sendBuddyMessageToMids_result() {
  }

  // success
  SendBuddyMessageResult get success => this._success;

  set success(SendBuddyMessageResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new SendBuddyMessageResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendBuddyMessageToMids_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendBuddyMessageToMidsAsync_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendBuddyMessageToMidsAsync_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _MSG_FIELD_DESC = new TField("msg", TType.STRUCT, 2);
  static final TField _MIDS_FIELD_DESC = new TField("mids", TType.LIST, 3);

  String _requestId;
  static const int REQUESTID = 1;
  Message _msg;
  static const int MSG = 2;
  List<String> _mids;
  static const int MIDS = 3;


  sendBuddyMessageToMidsAsync_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // msg
  Message get msg => this._msg;

  set msg(Message msg) {
    this._msg = msg;
  }

  bool isSetMsg() => this.msg != null;

  unsetMsg() {
    this.msg = null;
  }

  // mids
  List<String> get mids => this._mids;

  set mids(List<String> mids) {
    this._mids = mids;
  }

  bool isSetMids() => this.mids != null;

  unsetMids() {
    this.mids = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case MSG:
        return this.msg;
      case MIDS:
        return this.mids;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          this.msg = value;
        }
        break;

      case MIDS:
        if (value == null) {
          unsetMids();
        } else {
          this.mids = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case MSG:
        return isSetMsg();
      case MIDS:
        return isSetMids();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MSG:
          if (field.type == TType.STRUCT) {
            this.msg = new Message();
            this.msg.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MIDS:
          if (field.type == TType.LIST) {
            {
              TList _list642 = iprot.readListBegin();
              this.mids = new List<String>();
              for (int _i643 = 0; _i643 < _list642.length; ++_i643) {
                String _elem644;
                _elem644 = iprot.readString();
                this.mids.add(_elem644);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.msg != null) {
      oprot.writeFieldBegin(_MSG_FIELD_DESC);
      this.msg.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.mids != null) {
      oprot.writeFieldBegin(_MIDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.mids.length));
        for (var elem645 in this.mids) {
          oprot.writeString(elem645);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendBuddyMessageToMidsAsync_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("msg:");
    if (this.msg == null) {
      ret.write("null");
    } else {
      ret.write(this.msg);
    }

    ret.write(", ");
    ret.write("mids:");
    if (this.mids == null) {
      ret.write("null");
    } else {
      ret.write(this.mids);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendBuddyMessageToMidsAsync_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendBuddyMessageToMidsAsync_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  String _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  sendBuddyMessageToMidsAsync_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendBuddyMessageToMidsAsync_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendIndividualEventToAllAsync_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendIndividualEventToAllAsync_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, 2);
  static final TField _NOTIFICATION_STATUS_FIELD_DESC = new TField("notificationStatus", TType.I32, 3);

  String _requestId;
  static const int REQUESTID = 1;
  String _buddyMid;
  static const int BUDDYMID = 2;
  int _notificationStatus;
  static const int NOTIFICATIONSTATUS = 3;

  bool __isset_notificationStatus = false;

  sendIndividualEventToAllAsync_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // buddyMid
  String get buddyMid => this._buddyMid;

  set buddyMid(String buddyMid) {
    this._buddyMid = buddyMid;
  }

  bool isSetBuddyMid() => this.buddyMid != null;

  unsetBuddyMid() {
    this.buddyMid = null;
  }

  // notificationStatus
  int get notificationStatus => this._notificationStatus;

  set notificationStatus(int notificationStatus) {
    this._notificationStatus = notificationStatus;
    this.__isset_notificationStatus = true;
  }

  bool isSetNotificationStatus() => this.__isset_notificationStatus;

  unsetNotificationStatus() {
    this.__isset_notificationStatus = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case BUDDYMID:
        return this.buddyMid;
      case NOTIFICATIONSTATUS:
        return this.notificationStatus;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case BUDDYMID:
        if (value == null) {
          unsetBuddyMid();
        } else {
          this.buddyMid = value;
        }
        break;

      case NOTIFICATIONSTATUS:
        if (value == null) {
          unsetNotificationStatus();
        } else {
          this.notificationStatus = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case BUDDYMID:
        return isSetBuddyMid();
      case NOTIFICATIONSTATUS:
        return isSetNotificationStatus();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BUDDYMID:
          if (field.type == TType.STRING) {
            this.buddyMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTIFICATIONSTATUS:
          if (field.type == TType.I32) {
            this.notificationStatus = iprot.readI32();
            this.__isset_notificationStatus = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.buddyMid != null) {
      oprot.writeFieldBegin(_BUDDY_MID_FIELD_DESC);
      oprot.writeString(this.buddyMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_NOTIFICATION_STATUS_FIELD_DESC);
    oprot.writeI32(this.notificationStatus);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendIndividualEventToAllAsync_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("buddyMid:");
    if (this.buddyMid == null) {
      ret.write("null");
    } else {
      ret.write(this.buddyMid);
    }

    ret.write(", ");
    ret.write("notificationStatus:");
    String notificationStatus_name = NotificationStatus.VALUES_TO_NAMES[this.notificationStatus];
    if (notificationStatus_name != null) {
      ret.write(notificationStatus_name);
      ret.write(" (");
    }
    ret.write(this.notificationStatus);
    if (notificationStatus_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetNotificationStatus() && !NotificationStatus.VALID_VALUES.contains(notificationStatus)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'notificationStatus' has been assigned the invalid value $notificationStatus");
    }
  }

}

class sendIndividualEventToAllAsync_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendIndividualEventToAllAsync_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  sendIndividualEventToAllAsync_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendIndividualEventToAllAsync_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class setBuddyOnAir_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("setBuddyOnAir_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _ON_AIR_FIELD_DESC = new TField("onAir", TType.BOOL, 2);

  String _requestId;
  static const int REQUESTID = 1;
  bool _onAir = false;
  static const int ONAIR = 2;

  bool __isset_onAir = false;

  setBuddyOnAir_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // onAir
  bool get onAir => this._onAir;

  set onAir(bool onAir) {
    this._onAir = onAir;
    this.__isset_onAir = true;
  }

  bool isSetOnAir() => this.__isset_onAir;

  unsetOnAir() {
    this.__isset_onAir = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case ONAIR:
        return this.onAir;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case ONAIR:
        if (value == null) {
          unsetOnAir();
        } else {
          this.onAir = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case ONAIR:
        return isSetOnAir();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ONAIR:
          if (field.type == TType.BOOL) {
            this.onAir = iprot.readBool();
            this.__isset_onAir = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_ON_AIR_FIELD_DESC);
    oprot.writeBool(this.onAir);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("setBuddyOnAir_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("onAir:");
    ret.write(this.onAir);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class setBuddyOnAir_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("setBuddyOnAir_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  SetBuddyOnAirResult _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  setBuddyOnAir_result() {
  }

  // success
  SetBuddyOnAirResult get success => this._success;

  set success(SetBuddyOnAirResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new SetBuddyOnAirResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("setBuddyOnAir_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class setBuddyOnAirAsync_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("setBuddyOnAirAsync_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _ON_AIR_FIELD_DESC = new TField("onAir", TType.BOOL, 2);

  String _requestId;
  static const int REQUESTID = 1;
  bool _onAir = false;
  static const int ONAIR = 2;

  bool __isset_onAir = false;

  setBuddyOnAirAsync_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // onAir
  bool get onAir => this._onAir;

  set onAir(bool onAir) {
    this._onAir = onAir;
    this.__isset_onAir = true;
  }

  bool isSetOnAir() => this.__isset_onAir;

  unsetOnAir() {
    this.__isset_onAir = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case ONAIR:
        return this.onAir;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case ONAIR:
        if (value == null) {
          unsetOnAir();
        } else {
          this.onAir = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case ONAIR:
        return isSetOnAir();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ONAIR:
          if (field.type == TType.BOOL) {
            this.onAir = iprot.readBool();
            this.__isset_onAir = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_ON_AIR_FIELD_DESC);
    oprot.writeBool(this.onAir);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("setBuddyOnAirAsync_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("onAir:");
    ret.write(this.onAir);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class setBuddyOnAirAsync_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("setBuddyOnAirAsync_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  String _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  setBuddyOnAirAsync_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("setBuddyOnAirAsync_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class storeMessage_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("storeMessage_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _MESSAGE_REQUEST_FIELD_DESC = new TField("messageRequest", TType.STRUCT, 2);

  String _requestId;
  static const int REQUESTID = 1;
  BuddyMessageRequest _messageRequest;
  static const int MESSAGEREQUEST = 2;


  storeMessage_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // messageRequest
  BuddyMessageRequest get messageRequest => this._messageRequest;

  set messageRequest(BuddyMessageRequest messageRequest) {
    this._messageRequest = messageRequest;
  }

  bool isSetMessageRequest() => this.messageRequest != null;

  unsetMessageRequest() {
    this.messageRequest = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case MESSAGEREQUEST:
        return this.messageRequest;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case MESSAGEREQUEST:
        if (value == null) {
          unsetMessageRequest();
        } else {
          this.messageRequest = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case MESSAGEREQUEST:
        return isSetMessageRequest();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MESSAGEREQUEST:
          if (field.type == TType.STRUCT) {
            this.messageRequest = new BuddyMessageRequest();
            this.messageRequest.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.messageRequest != null) {
      oprot.writeFieldBegin(_MESSAGE_REQUEST_FIELD_DESC);
      this.messageRequest.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("storeMessage_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("messageRequest:");
    if (this.messageRequest == null) {
      ret.write("null");
    } else {
      ret.write(this.messageRequest);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class storeMessage_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("storeMessage_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  SendBuddyMessageResult _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  storeMessage_result() {
  }

  // success
  SendBuddyMessageResult get success => this._success;

  set success(SendBuddyMessageResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new SendBuddyMessageResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("storeMessage_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class unblockBuddyMember_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("unblockBuddyMember_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _MID_FIELD_DESC = new TField("mid", TType.STRING, 2);

  String _requestId;
  static const int REQUESTID = 1;
  String _mid;
  static const int MID = 2;


  unblockBuddyMember_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // mid
  String get mid => this._mid;

  set mid(String mid) {
    this._mid = mid;
  }

  bool isSetMid() => this.mid != null;

  unsetMid() {
    this.mid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case MID:
        return this.mid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case MID:
        if (value == null) {
          unsetMid();
        } else {
          this.mid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case MID:
        return isSetMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MID:
          if (field.type == TType.STRING) {
            this.mid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.mid != null) {
      oprot.writeFieldBegin(_MID_FIELD_DESC);
      oprot.writeString(this.mid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("unblockBuddyMember_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("mid:");
    if (this.mid == null) {
      ret.write("null");
    } else {
      ret.write(this.mid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class unblockBuddyMember_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("unblockBuddyMember_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  unblockBuddyMember_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("unblockBuddyMember_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class unregisterBuddy_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("unregisterBuddy_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);

  String _requestId;
  static const int REQUESTID = 1;


  unregisterBuddy_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("unregisterBuddy_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class unregisterBuddy_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("unregisterBuddy_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  unregisterBuddy_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("unregisterBuddy_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class unregisterBuddyAdmin_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("unregisterBuddyAdmin_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);

  String _requestId;
  static const int REQUESTID = 1;


  unregisterBuddyAdmin_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("unregisterBuddyAdmin_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class unregisterBuddyAdmin_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("unregisterBuddyAdmin_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  unregisterBuddyAdmin_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("unregisterBuddyAdmin_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateBuddyAdminProfileAttribute_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateBuddyAdminProfileAttribute_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _ATTRIBUTES_FIELD_DESC = new TField("attributes", TType.MAP, 2);

  String _requestId;
  static const int REQUESTID = 1;
  Map<String, String> _attributes;
  static const int ATTRIBUTES = 2;


  updateBuddyAdminProfileAttribute_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // attributes
  Map<String, String> get attributes => this._attributes;

  set attributes(Map<String, String> attributes) {
    this._attributes = attributes;
  }

  bool isSetAttributes() => this.attributes != null;

  unsetAttributes() {
    this.attributes = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case ATTRIBUTES:
        return this.attributes;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case ATTRIBUTES:
        if (value == null) {
          unsetAttributes();
        } else {
          this.attributes = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case ATTRIBUTES:
        return isSetAttributes();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ATTRIBUTES:
          if (field.type == TType.MAP) {
            {
              TMap _map646 = iprot.readMapBegin();
              this.attributes = new Map<String, String>();
              for (int _i647 = 0; _i647 < _map646.length; ++_i647) {
                String _key648;
                String _val649;
                _key648 = iprot.readString();
                _val649 = iprot.readString();
                this.attributes[_key648] = _val649;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.attributes != null) {
      oprot.writeFieldBegin(_ATTRIBUTES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.attributes.length));
        for (var elem651 in this.attributes.keys) {
          oprot.writeString(elem651);
          oprot.writeString(this.attributes[elem651]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateBuddyAdminProfileAttribute_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("attributes:");
    if (this.attributes == null) {
      ret.write("null");
    } else {
      ret.write(this.attributes);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateBuddyAdminProfileAttribute_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateBuddyAdminProfileAttribute_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  updateBuddyAdminProfileAttribute_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateBuddyAdminProfileAttribute_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateBuddyAdminProfileImage_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateBuddyAdminProfileImage_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _PICTURE_FIELD_DESC = new TField("picture", TType.STRING, 2);

  String _requestId;
  static const int REQUESTID = 1;
  Uint8List _picture;
  static const int PICTURE = 2;


  updateBuddyAdminProfileImage_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // picture
  Uint8List get picture => this._picture;

  set picture(Uint8List picture) {
    this._picture = picture;
  }

  bool isSetPicture() => this.picture != null;

  unsetPicture() {
    this.picture = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case PICTURE:
        return this.picture;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case PICTURE:
        if (value == null) {
          unsetPicture();
        } else {
          this.picture = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case PICTURE:
        return isSetPicture();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PICTURE:
          if (field.type == TType.STRING) {
            this.picture = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.picture != null) {
      oprot.writeFieldBegin(_PICTURE_FIELD_DESC);
      oprot.writeBinary(this.picture);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateBuddyAdminProfileImage_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("picture:");
    if (this.picture == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateBuddyAdminProfileImage_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateBuddyAdminProfileImage_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  updateBuddyAdminProfileImage_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateBuddyAdminProfileImage_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateBuddyProfileAttributes_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateBuddyProfileAttributes_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _ATTRIBUTES_FIELD_DESC = new TField("attributes", TType.MAP, 2);

  String _requestId;
  static const int REQUESTID = 1;
  Map<String, String> _attributes;
  static const int ATTRIBUTES = 2;


  updateBuddyProfileAttributes_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // attributes
  Map<String, String> get attributes => this._attributes;

  set attributes(Map<String, String> attributes) {
    this._attributes = attributes;
  }

  bool isSetAttributes() => this.attributes != null;

  unsetAttributes() {
    this.attributes = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case ATTRIBUTES:
        return this.attributes;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case ATTRIBUTES:
        if (value == null) {
          unsetAttributes();
        } else {
          this.attributes = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case ATTRIBUTES:
        return isSetAttributes();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ATTRIBUTES:
          if (field.type == TType.MAP) {
            {
              TMap _map652 = iprot.readMapBegin();
              this.attributes = new Map<String, String>();
              for (int _i653 = 0; _i653 < _map652.length; ++_i653) {
                String _key654;
                String _val655;
                _key654 = iprot.readString();
                _val655 = iprot.readString();
                this.attributes[_key654] = _val655;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.attributes != null) {
      oprot.writeFieldBegin(_ATTRIBUTES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.attributes.length));
        for (var elem657 in this.attributes.keys) {
          oprot.writeString(elem657);
          oprot.writeString(this.attributes[elem657]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateBuddyProfileAttributes_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("attributes:");
    if (this.attributes == null) {
      ret.write("null");
    } else {
      ret.write(this.attributes);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateBuddyProfileAttributes_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateBuddyProfileAttributes_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  UpdateBuddyProfileResult _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  updateBuddyProfileAttributes_result() {
  }

  // success
  UpdateBuddyProfileResult get success => this._success;

  set success(UpdateBuddyProfileResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new UpdateBuddyProfileResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateBuddyProfileAttributes_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateBuddyProfileAttributesAsync_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateBuddyProfileAttributesAsync_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _ATTRIBUTES_FIELD_DESC = new TField("attributes", TType.MAP, 2);

  String _requestId;
  static const int REQUESTID = 1;
  Map<String, String> _attributes;
  static const int ATTRIBUTES = 2;


  updateBuddyProfileAttributesAsync_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // attributes
  Map<String, String> get attributes => this._attributes;

  set attributes(Map<String, String> attributes) {
    this._attributes = attributes;
  }

  bool isSetAttributes() => this.attributes != null;

  unsetAttributes() {
    this.attributes = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case ATTRIBUTES:
        return this.attributes;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case ATTRIBUTES:
        if (value == null) {
          unsetAttributes();
        } else {
          this.attributes = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case ATTRIBUTES:
        return isSetAttributes();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ATTRIBUTES:
          if (field.type == TType.MAP) {
            {
              TMap _map658 = iprot.readMapBegin();
              this.attributes = new Map<String, String>();
              for (int _i659 = 0; _i659 < _map658.length; ++_i659) {
                String _key660;
                String _val661;
                _key660 = iprot.readString();
                _val661 = iprot.readString();
                this.attributes[_key660] = _val661;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.attributes != null) {
      oprot.writeFieldBegin(_ATTRIBUTES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.attributes.length));
        for (var elem663 in this.attributes.keys) {
          oprot.writeString(elem663);
          oprot.writeString(this.attributes[elem663]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateBuddyProfileAttributesAsync_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("attributes:");
    if (this.attributes == null) {
      ret.write("null");
    } else {
      ret.write(this.attributes);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateBuddyProfileAttributesAsync_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateBuddyProfileAttributesAsync_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  String _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  updateBuddyProfileAttributesAsync_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateBuddyProfileAttributesAsync_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateBuddyProfileImage_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateBuddyProfileImage_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _IMAGE_FIELD_DESC = new TField("image", TType.STRING, 2);

  String _requestId;
  static const int REQUESTID = 1;
  Uint8List _image;
  static const int IMAGE = 2;


  updateBuddyProfileImage_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // image
  Uint8List get image => this._image;

  set image(Uint8List image) {
    this._image = image;
  }

  bool isSetImage() => this.image != null;

  unsetImage() {
    this.image = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case IMAGE:
        return this.image;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case IMAGE:
        if (value == null) {
          unsetImage();
        } else {
          this.image = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case IMAGE:
        return isSetImage();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IMAGE:
          if (field.type == TType.STRING) {
            this.image = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.image != null) {
      oprot.writeFieldBegin(_IMAGE_FIELD_DESC);
      oprot.writeBinary(this.image);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateBuddyProfileImage_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("image:");
    if (this.image == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateBuddyProfileImage_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateBuddyProfileImage_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  UpdateBuddyProfileResult _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  updateBuddyProfileImage_result() {
  }

  // success
  UpdateBuddyProfileResult get success => this._success;

  set success(UpdateBuddyProfileResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new UpdateBuddyProfileResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateBuddyProfileImage_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateBuddyProfileImageAsync_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateBuddyProfileImageAsync_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _IMAGE_FIELD_DESC = new TField("image", TType.STRING, 2);

  String _requestId;
  static const int REQUESTID = 1;
  Uint8List _image;
  static const int IMAGE = 2;


  updateBuddyProfileImageAsync_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // image
  Uint8List get image => this._image;

  set image(Uint8List image) {
    this._image = image;
  }

  bool isSetImage() => this.image != null;

  unsetImage() {
    this.image = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case IMAGE:
        return this.image;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case IMAGE:
        if (value == null) {
          unsetImage();
        } else {
          this.image = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case IMAGE:
        return isSetImage();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IMAGE:
          if (field.type == TType.STRING) {
            this.image = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.image != null) {
      oprot.writeFieldBegin(_IMAGE_FIELD_DESC);
      oprot.writeBinary(this.image);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateBuddyProfileImageAsync_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("image:");
    if (this.image == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateBuddyProfileImageAsync_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateBuddyProfileImageAsync_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  String _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  updateBuddyProfileImageAsync_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateBuddyProfileImageAsync_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateBuddySearchId_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateBuddySearchId_args");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _SEARCH_ID_FIELD_DESC = new TField("searchId", TType.STRING, 2);

  String _requestId;
  static const int REQUESTID = 1;
  String _searchId;
  static const int SEARCHID = 2;


  updateBuddySearchId_args() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // searchId
  String get searchId => this._searchId;

  set searchId(String searchId) {
    this._searchId = searchId;
  }

  bool isSetSearchId() => this.searchId != null;

  unsetSearchId() {
    this.searchId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case SEARCHID:
        return this.searchId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case SEARCHID:
        if (value == null) {
          unsetSearchId();
        } else {
          this.searchId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case SEARCHID:
        return isSetSearchId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SEARCHID:
          if (field.type == TType.STRING) {
            this.searchId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.searchId != null) {
      oprot.writeFieldBegin(_SEARCH_ID_FIELD_DESC);
      oprot.writeString(this.searchId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateBuddySearchId_args(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("searchId:");
    if (this.searchId == null) {
      ret.write("null");
    } else {
      ret.write(this.searchId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateBuddySearchId_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateBuddySearchId_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  updateBuddySearchId_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateBuddySearchId_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateBuddySettings_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateBuddySettings_args");
  static final TField _SETTINGS_FIELD_DESC = new TField("settings", TType.MAP, 2);

  Map<String, String> _settings;
  static const int SETTINGS = 2;


  updateBuddySettings_args() {
  }

  // settings
  Map<String, String> get settings => this._settings;

  set settings(Map<String, String> settings) {
    this._settings = settings;
  }

  bool isSetSettings() => this.settings != null;

  unsetSettings() {
    this.settings = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SETTINGS:
        return this.settings;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SETTINGS:
        if (value == null) {
          unsetSettings();
        } else {
          this.settings = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SETTINGS:
        return isSetSettings();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SETTINGS:
          if (field.type == TType.MAP) {
            {
              TMap _map664 = iprot.readMapBegin();
              this.settings = new Map<String, String>();
              for (int _i665 = 0; _i665 < _map664.length; ++_i665) {
                String _key666;
                String _val667;
                _key666 = iprot.readString();
                _val667 = iprot.readString();
                this.settings[_key666] = _val667;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.settings != null) {
      oprot.writeFieldBegin(_SETTINGS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.settings.length));
        for (var elem669 in this.settings.keys) {
          oprot.writeString(elem669);
          oprot.writeString(this.settings[elem669]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateBuddySettings_args(");

    ret.write("settings:");
    if (this.settings == null) {
      ret.write("null");
    } else {
      ret.write(this.settings);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateBuddySettings_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateBuddySettings_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  updateBuddySettings_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateBuddySettings_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class uploadBuddyContent_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("uploadBuddyContent_args");
  static final TField _CONTENT_TYPE_FIELD_DESC = new TField("contentType", TType.I32, 2);
  static final TField _CONTENT_FIELD_DESC = new TField("content", TType.STRING, 3);

  int _contentType;
  static const int CONTENTTYPE = 2;
  Uint8List _content;
  static const int CONTENT = 3;

  bool __isset_contentType = false;

  uploadBuddyContent_args() {
  }

  // contentType
  int get contentType => this._contentType;

  set contentType(int contentType) {
    this._contentType = contentType;
    this.__isset_contentType = true;
  }

  bool isSetContentType() => this.__isset_contentType;

  unsetContentType() {
    this.__isset_contentType = false;
  }

  // content
  Uint8List get content => this._content;

  set content(Uint8List content) {
    this._content = content;
  }

  bool isSetContent() => this.content != null;

  unsetContent() {
    this.content = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CONTENTTYPE:
        return this.contentType;
      case CONTENT:
        return this.content;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CONTENTTYPE:
        if (value == null) {
          unsetContentType();
        } else {
          this.contentType = value;
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          this.content = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CONTENTTYPE:
        return isSetContentType();
      case CONTENT:
        return isSetContent();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CONTENTTYPE:
          if (field.type == TType.I32) {
            this.contentType = iprot.readI32();
            this.__isset_contentType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTENT:
          if (field.type == TType.STRING) {
            this.content = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_CONTENT_TYPE_FIELD_DESC);
    oprot.writeI32(this.contentType);
    oprot.writeFieldEnd();
    if (this.content != null) {
      oprot.writeFieldBegin(_CONTENT_FIELD_DESC);
      oprot.writeBinary(this.content);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("uploadBuddyContent_args(");

    ret.write("contentType:");
    String contentType_name = ContentType.VALUES_TO_NAMES[this.contentType];
    if (contentType_name != null) {
      ret.write(contentType_name);
      ret.write(" (");
    }
    ret.write(this.contentType);
    if (contentType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("content:");
    if (this.content == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetContentType() && !ContentType.VALID_VALUES.contains(contentType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'contentType' has been assigned the invalid value $contentType");
    }
  }

}

class uploadBuddyContent_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("uploadBuddyContent_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  String _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  uploadBuddyContent_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("uploadBuddyContent_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

