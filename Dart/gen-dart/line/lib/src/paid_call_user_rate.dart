/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.paid_call_user_rate;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class PaidCallUserRate implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("PaidCallUserRate");
  static final TField _COUNTRY_CODE_FIELD_DESC = new TField("countryCode", TType.STRING, 1);
  static final TField _RATE_FIELD_DESC = new TField("rate", TType.I32, 2);
  static final TField _RATE_DIVISION_FIELD_DESC = new TField("rateDivision", TType.STRING, 3);
  static final TField _RATE_NAME_FIELD_DESC = new TField("rateName", TType.STRING, 4);

  String _countryCode;
  static const int COUNTRYCODE = 1;
  int _rate = 0;
  static const int RATE = 2;
  String _rateDivision;
  static const int RATEDIVISION = 3;
  String _rateName;
  static const int RATENAME = 4;

  bool __isset_rate = false;

  PaidCallUserRate() {
  }

  // countryCode
  String get countryCode => this._countryCode;

  set countryCode(String countryCode) {
    this._countryCode = countryCode;
  }

  bool isSetCountryCode() => this.countryCode != null;

  unsetCountryCode() {
    this.countryCode = null;
  }

  // rate
  int get rate => this._rate;

  set rate(int rate) {
    this._rate = rate;
    this.__isset_rate = true;
  }

  bool isSetRate() => this.__isset_rate;

  unsetRate() {
    this.__isset_rate = false;
  }

  // rateDivision
  String get rateDivision => this._rateDivision;

  set rateDivision(String rateDivision) {
    this._rateDivision = rateDivision;
  }

  bool isSetRateDivision() => this.rateDivision != null;

  unsetRateDivision() {
    this.rateDivision = null;
  }

  // rateName
  String get rateName => this._rateName;

  set rateName(String rateName) {
    this._rateName = rateName;
  }

  bool isSetRateName() => this.rateName != null;

  unsetRateName() {
    this.rateName = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COUNTRYCODE:
        return this.countryCode;
      case RATE:
        return this.rate;
      case RATEDIVISION:
        return this.rateDivision;
      case RATENAME:
        return this.rateName;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COUNTRYCODE:
        if (value == null) {
          unsetCountryCode();
        } else {
          this.countryCode = value;
        }
        break;

      case RATE:
        if (value == null) {
          unsetRate();
        } else {
          this.rate = value;
        }
        break;

      case RATEDIVISION:
        if (value == null) {
          unsetRateDivision();
        } else {
          this.rateDivision = value;
        }
        break;

      case RATENAME:
        if (value == null) {
          unsetRateName();
        } else {
          this.rateName = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COUNTRYCODE:
        return isSetCountryCode();
      case RATE:
        return isSetRate();
      case RATEDIVISION:
        return isSetRateDivision();
      case RATENAME:
        return isSetRateName();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COUNTRYCODE:
          if (field.type == TType.STRING) {
            this.countryCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RATE:
          if (field.type == TType.I32) {
            this.rate = iprot.readI32();
            this.__isset_rate = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RATEDIVISION:
          if (field.type == TType.STRING) {
            this.rateDivision = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RATENAME:
          if (field.type == TType.STRING) {
            this.rateName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.countryCode != null) {
      oprot.writeFieldBegin(_COUNTRY_CODE_FIELD_DESC);
      oprot.writeString(this.countryCode);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_RATE_FIELD_DESC);
    oprot.writeI32(this.rate);
    oprot.writeFieldEnd();
    if (this.rateDivision != null) {
      oprot.writeFieldBegin(_RATE_DIVISION_FIELD_DESC);
      oprot.writeString(this.rateDivision);
      oprot.writeFieldEnd();
    }
    if (this.rateName != null) {
      oprot.writeFieldBegin(_RATE_NAME_FIELD_DESC);
      oprot.writeString(this.rateName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("PaidCallUserRate(");

    ret.write("countryCode:");
    if (this.countryCode == null) {
      ret.write("null");
    } else {
      ret.write(this.countryCode);
    }

    ret.write(", ");
    ret.write("rate:");
    ret.write(this.rate);

    ret.write(", ");
    ret.write("rateDivision:");
    if (this.rateDivision == null) {
      ret.write("null");
    } else {
      ret.write(this.rateDivision);
    }

    ret.write(", ");
    ret.write("rateName:");
    if (this.rateName == null) {
      ret.write("null");
    } else {
      ret.write(this.rateName);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

