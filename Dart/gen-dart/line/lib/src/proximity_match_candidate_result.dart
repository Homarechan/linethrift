/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.proximity_match_candidate_result;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ProximityMatchCandidateResult implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ProximityMatchCandidateResult");
  static final TField _USERS_FIELD_DESC = new TField("users", TType.LIST, 1);
  static final TField _BUDDIES_FIELD_DESC = new TField("buddies", TType.LIST, 2);

  List<Contact> _users;
  static const int USERS = 1;
  List<Contact> _buddies;
  static const int BUDDIES = 2;


  ProximityMatchCandidateResult() {
  }

  // users
  List<Contact> get users => this._users;

  set users(List<Contact> users) {
    this._users = users;
  }

  bool isSetUsers() => this.users != null;

  unsetUsers() {
    this.users = null;
  }

  // buddies
  List<Contact> get buddies => this._buddies;

  set buddies(List<Contact> buddies) {
    this._buddies = buddies;
  }

  bool isSetBuddies() => this.buddies != null;

  unsetBuddies() {
    this.buddies = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case USERS:
        return this.users;
      case BUDDIES:
        return this.buddies;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case USERS:
        if (value == null) {
          unsetUsers();
        } else {
          this.users = value;
        }
        break;

      case BUDDIES:
        if (value == null) {
          unsetBuddies();
        } else {
          this.buddies = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case USERS:
        return isSetUsers();
      case BUDDIES:
        return isSetBuddies();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case USERS:
          if (field.type == TType.LIST) {
            {
              TList _list218 = iprot.readListBegin();
              this.users = new List<Contact>();
              for (int _i219 = 0; _i219 < _list218.length; ++_i219) {
                Contact _elem220;
                _elem220 = new Contact();
                _elem220.read(iprot);
                this.users.add(_elem220);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BUDDIES:
          if (field.type == TType.LIST) {
            {
              TList _list221 = iprot.readListBegin();
              this.buddies = new List<Contact>();
              for (int _i222 = 0; _i222 < _list221.length; ++_i222) {
                Contact _elem223;
                _elem223 = new Contact();
                _elem223.read(iprot);
                this.buddies.add(_elem223);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.users != null) {
      oprot.writeFieldBegin(_USERS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.users.length));
        for (var elem224 in this.users) {
          elem224.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.buddies != null) {
      oprot.writeFieldBegin(_BUDDIES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.buddies.length));
        for (var elem225 in this.buddies) {
          elem225.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ProximityMatchCandidateResult(");

    ret.write("users:");
    if (this.users == null) {
      ret.write("null");
    } else {
      ret.write(this.users);
    }

    ret.write(", ");
    ret.write("buddies:");
    if (this.buddies == null) {
      ret.write("null");
    } else {
      ret.write(this.buddies);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

