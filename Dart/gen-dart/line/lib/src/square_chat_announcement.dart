/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.square_chat_announcement;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SquareChatAnnouncement implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SquareChatAnnouncement");
  static final TField _ANNOUNCEMENT_SEQ_FIELD_DESC = new TField("announcementSeq", TType.I64, 1);
  static final TField _TYPE_FIELD_DESC = new TField("type", TType.I32, 2);
  static final TField _CONTENTS_FIELD_DESC = new TField("contents", TType.STRUCT, 3);

  int _announcementSeq = 0;
  static const int ANNOUNCEMENTSEQ = 1;
  int _type;
  static const int TYPE = 2;
  SquareChatAnnouncementContents _contents;
  static const int CONTENTS = 3;

  bool __isset_announcementSeq = false;
  bool __isset_type = false;

  SquareChatAnnouncement() {
  }

  // announcementSeq
  int get announcementSeq => this._announcementSeq;

  set announcementSeq(int announcementSeq) {
    this._announcementSeq = announcementSeq;
    this.__isset_announcementSeq = true;
  }

  bool isSetAnnouncementSeq() => this.__isset_announcementSeq;

  unsetAnnouncementSeq() {
    this.__isset_announcementSeq = false;
  }

  // type
  int get type => this._type;

  set type(int type) {
    this._type = type;
    this.__isset_type = true;
  }

  bool isSetType() => this.__isset_type;

  unsetType() {
    this.__isset_type = false;
  }

  // contents
  SquareChatAnnouncementContents get contents => this._contents;

  set contents(SquareChatAnnouncementContents contents) {
    this._contents = contents;
  }

  bool isSetContents() => this.contents != null;

  unsetContents() {
    this.contents = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ANNOUNCEMENTSEQ:
        return this.announcementSeq;
      case TYPE:
        return this.type;
      case CONTENTS:
        return this.contents;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ANNOUNCEMENTSEQ:
        if (value == null) {
          unsetAnnouncementSeq();
        } else {
          this.announcementSeq = value;
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          this.type = value;
        }
        break;

      case CONTENTS:
        if (value == null) {
          unsetContents();
        } else {
          this.contents = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ANNOUNCEMENTSEQ:
        return isSetAnnouncementSeq();
      case TYPE:
        return isSetType();
      case CONTENTS:
        return isSetContents();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ANNOUNCEMENTSEQ:
          if (field.type == TType.I64) {
            this.announcementSeq = iprot.readI64();
            this.__isset_announcementSeq = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TYPE:
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            this.__isset_type = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTENTS:
          if (field.type == TType.STRUCT) {
            this.contents = new SquareChatAnnouncementContents();
            this.contents.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_ANNOUNCEMENT_SEQ_FIELD_DESC);
    oprot.writeI64(this.announcementSeq);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    if (this.contents != null) {
      oprot.writeFieldBegin(_CONTENTS_FIELD_DESC);
      this.contents.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SquareChatAnnouncement(");

    ret.write("announcementSeq:");
    ret.write(this.announcementSeq);

    ret.write(", ");
    ret.write("type:");
    String type_name = SquareChatAnnouncementType.VALUES_TO_NAMES[this.type];
    if (type_name != null) {
      ret.write(type_name);
      ret.write(" (");
    }
    ret.write(this.type);
    if (type_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("contents:");
    if (this.contents == null) {
      ret.write("null");
    } else {
      ret.write(this.contents);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !SquareChatAnnouncementType.VALID_VALUES.contains(type)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'type' has been assigned the invalid value $type");
    }
  }

}

