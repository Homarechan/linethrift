/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.product_category;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ProductCategory implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ProductCategory");
  static final TField _PRODUCT_CATEGORY_ID_FIELD_DESC = new TField("productCategoryId", TType.I64, 1);
  static final TField _TITLE_FIELD_DESC = new TField("title", TType.STRING, 2);
  static final TField _PRODUCT_COUNT_FIELD_DESC = new TField("productCount", TType.I32, 3);
  static final TField _NEW_FLAG_FIELD_DESC = new TField("newFlag", TType.BOOL, 4);

  int _productCategoryId = 0;
  static const int PRODUCTCATEGORYID = 1;
  String _title;
  static const int TITLE = 2;
  int _productCount = 0;
  static const int PRODUCTCOUNT = 3;
  bool _newFlag = false;
  static const int NEWFLAG = 4;

  bool __isset_productCategoryId = false;
  bool __isset_productCount = false;
  bool __isset_newFlag = false;

  ProductCategory() {
  }

  // productCategoryId
  int get productCategoryId => this._productCategoryId;

  set productCategoryId(int productCategoryId) {
    this._productCategoryId = productCategoryId;
    this.__isset_productCategoryId = true;
  }

  bool isSetProductCategoryId() => this.__isset_productCategoryId;

  unsetProductCategoryId() {
    this.__isset_productCategoryId = false;
  }

  // title
  String get title => this._title;

  set title(String title) {
    this._title = title;
  }

  bool isSetTitle() => this.title != null;

  unsetTitle() {
    this.title = null;
  }

  // productCount
  int get productCount => this._productCount;

  set productCount(int productCount) {
    this._productCount = productCount;
    this.__isset_productCount = true;
  }

  bool isSetProductCount() => this.__isset_productCount;

  unsetProductCount() {
    this.__isset_productCount = false;
  }

  // newFlag
  bool get newFlag => this._newFlag;

  set newFlag(bool newFlag) {
    this._newFlag = newFlag;
    this.__isset_newFlag = true;
  }

  bool isSetNewFlag() => this.__isset_newFlag;

  unsetNewFlag() {
    this.__isset_newFlag = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case PRODUCTCATEGORYID:
        return this.productCategoryId;
      case TITLE:
        return this.title;
      case PRODUCTCOUNT:
        return this.productCount;
      case NEWFLAG:
        return this.newFlag;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case PRODUCTCATEGORYID:
        if (value == null) {
          unsetProductCategoryId();
        } else {
          this.productCategoryId = value;
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          this.title = value;
        }
        break;

      case PRODUCTCOUNT:
        if (value == null) {
          unsetProductCount();
        } else {
          this.productCount = value;
        }
        break;

      case NEWFLAG:
        if (value == null) {
          unsetNewFlag();
        } else {
          this.newFlag = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case PRODUCTCATEGORYID:
        return isSetProductCategoryId();
      case TITLE:
        return isSetTitle();
      case PRODUCTCOUNT:
        return isSetProductCount();
      case NEWFLAG:
        return isSetNewFlag();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case PRODUCTCATEGORYID:
          if (field.type == TType.I64) {
            this.productCategoryId = iprot.readI64();
            this.__isset_productCategoryId = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TITLE:
          if (field.type == TType.STRING) {
            this.title = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRODUCTCOUNT:
          if (field.type == TType.I32) {
            this.productCount = iprot.readI32();
            this.__isset_productCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NEWFLAG:
          if (field.type == TType.BOOL) {
            this.newFlag = iprot.readBool();
            this.__isset_newFlag = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_PRODUCT_CATEGORY_ID_FIELD_DESC);
    oprot.writeI64(this.productCategoryId);
    oprot.writeFieldEnd();
    if (this.title != null) {
      oprot.writeFieldBegin(_TITLE_FIELD_DESC);
      oprot.writeString(this.title);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_PRODUCT_COUNT_FIELD_DESC);
    oprot.writeI32(this.productCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NEW_FLAG_FIELD_DESC);
    oprot.writeBool(this.newFlag);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ProductCategory(");

    ret.write("productCategoryId:");
    ret.write(this.productCategoryId);

    ret.write(", ");
    ret.write("title:");
    if (this.title == null) {
      ret.write("null");
    } else {
      ret.write(this.title);
    }

    ret.write(", ");
    ret.write("productCount:");
    ret.write(this.productCount);

    ret.write(", ");
    ret.write("newFlag:");
    ret.write(this.newFlag);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

