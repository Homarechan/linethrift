/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.buddy_service;

import 'dart:async';
import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';


abstract class BuddyService {

  Future<List<BuddySearchResult>> findBuddyContactsByQuery(String language, String country, String query, int fromIndex, int count, int requestSource);

  Future<List<Contact>> getBuddyContacts(String language, String country, String classification, int fromIndex, int count);

  Future<BuddyDetail> getBuddyDetail(String buddyMid);

  Future<BuddyOnAir> getBuddyOnAir(String buddyMid);

  Future<List<String>> getCountriesHavingBuddy();

  Future<Map<String, int>> getNewlyReleasedBuddyIds(String country);

  Future<BuddyBanner> getPopularBuddyBanner(String language, String country, int applicationType, String resourceSpecification);

  Future<List<BuddyList>> getPopularBuddyLists(String language, String country);

  Future<List<Contact>> getPromotedBuddyContacts(String language, String country);
}

class BuddyServiceClient implements BuddyService {

  BuddyServiceClient(TProtocol iprot, [TProtocol oprot = null]) {
    _iprot = iprot;
    _oprot = (oprot == null) ? iprot : oprot;
  }

  TProtocol _iprot;

  TProtocol get iprot => _iprot;

  TProtocol _oprot;

  TProtocol get oprot => _oprot;

  int _seqid = 0;

  int get seqid => _seqid;

  int nextSeqid() => ++_seqid;

  Future<List<BuddySearchResult>> findBuddyContactsByQuery(String language, String country, String query, int fromIndex, int count, int requestSource) async {
    oprot.writeMessageBegin(new TMessage("findBuddyContactsByQuery", TMessageType.CALL, nextSeqid()));
    findBuddyContactsByQuery_args args = new findBuddyContactsByQuery_args();
    args.language = language;
    args.country = country;
    args.query = query;
    args.fromIndex = fromIndex;
    args.count = count;
    args.requestSource = requestSource;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    findBuddyContactsByQuery_result result = new findBuddyContactsByQuery_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "findBuddyContactsByQuery failed: unknown result");
  }

  Future<List<Contact>> getBuddyContacts(String language, String country, String classification, int fromIndex, int count) async {
    oprot.writeMessageBegin(new TMessage("getBuddyContacts", TMessageType.CALL, nextSeqid()));
    getBuddyContacts_args args = new getBuddyContacts_args();
    args.language = language;
    args.country = country;
    args.classification = classification;
    args.fromIndex = fromIndex;
    args.count = count;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getBuddyContacts_result result = new getBuddyContacts_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getBuddyContacts failed: unknown result");
  }

  Future<BuddyDetail> getBuddyDetail(String buddyMid) async {
    oprot.writeMessageBegin(new TMessage("getBuddyDetail", TMessageType.CALL, nextSeqid()));
    getBuddyDetail_args args = new getBuddyDetail_args();
    args.buddyMid = buddyMid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getBuddyDetail_result result = new getBuddyDetail_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getBuddyDetail failed: unknown result");
  }

  Future<BuddyOnAir> getBuddyOnAir(String buddyMid) async {
    oprot.writeMessageBegin(new TMessage("getBuddyOnAir", TMessageType.CALL, nextSeqid()));
    getBuddyOnAir_args args = new getBuddyOnAir_args();
    args.buddyMid = buddyMid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getBuddyOnAir_result result = new getBuddyOnAir_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getBuddyOnAir failed: unknown result");
  }

  Future<List<String>> getCountriesHavingBuddy() async {
    oprot.writeMessageBegin(new TMessage("getCountriesHavingBuddy", TMessageType.CALL, nextSeqid()));
    getCountriesHavingBuddy_args args = new getCountriesHavingBuddy_args();
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getCountriesHavingBuddy_result result = new getCountriesHavingBuddy_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getCountriesHavingBuddy failed: unknown result");
  }

  Future<Map<String, int>> getNewlyReleasedBuddyIds(String country) async {
    oprot.writeMessageBegin(new TMessage("getNewlyReleasedBuddyIds", TMessageType.CALL, nextSeqid()));
    getNewlyReleasedBuddyIds_args args = new getNewlyReleasedBuddyIds_args();
    args.country = country;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getNewlyReleasedBuddyIds_result result = new getNewlyReleasedBuddyIds_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getNewlyReleasedBuddyIds failed: unknown result");
  }

  Future<BuddyBanner> getPopularBuddyBanner(String language, String country, int applicationType, String resourceSpecification) async {
    oprot.writeMessageBegin(new TMessage("getPopularBuddyBanner", TMessageType.CALL, nextSeqid()));
    getPopularBuddyBanner_args args = new getPopularBuddyBanner_args();
    args.language = language;
    args.country = country;
    args.applicationType = applicationType;
    args.resourceSpecification = resourceSpecification;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getPopularBuddyBanner_result result = new getPopularBuddyBanner_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getPopularBuddyBanner failed: unknown result");
  }

  Future<List<BuddyList>> getPopularBuddyLists(String language, String country) async {
    oprot.writeMessageBegin(new TMessage("getPopularBuddyLists", TMessageType.CALL, nextSeqid()));
    getPopularBuddyLists_args args = new getPopularBuddyLists_args();
    args.language = language;
    args.country = country;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getPopularBuddyLists_result result = new getPopularBuddyLists_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getPopularBuddyLists failed: unknown result");
  }

  Future<List<Contact>> getPromotedBuddyContacts(String language, String country) async {
    oprot.writeMessageBegin(new TMessage("getPromotedBuddyContacts", TMessageType.CALL, nextSeqid()));
    getPromotedBuddyContacts_args args = new getPromotedBuddyContacts_args();
    args.language = language;
    args.country = country;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getPromotedBuddyContacts_result result = new getPromotedBuddyContacts_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getPromotedBuddyContacts failed: unknown result");
  }

}

typedef void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);

class BuddyServiceProcessor implements TProcessor {
  BuddyServiceProcessor(BuddyService iface) {
    iface_ = iface;
    PROCESS_MAP["findBuddyContactsByQuery"] = findBuddyContactsByQuery;
    PROCESS_MAP["getBuddyContacts"] = getBuddyContacts;
    PROCESS_MAP["getBuddyDetail"] = getBuddyDetail;
    PROCESS_MAP["getBuddyOnAir"] = getBuddyOnAir;
    PROCESS_MAP["getCountriesHavingBuddy"] = getCountriesHavingBuddy;
    PROCESS_MAP["getNewlyReleasedBuddyIds"] = getNewlyReleasedBuddyIds;
    PROCESS_MAP["getPopularBuddyBanner"] = getPopularBuddyBanner;
    PROCESS_MAP["getPopularBuddyLists"] = getPopularBuddyLists;
    PROCESS_MAP["getPromotedBuddyContacts"] = getPromotedBuddyContacts;
  }

  BuddyService iface_;
  final Map<String, ProcessFunction> PROCESS_MAP = {};

  bool process(TProtocol iprot, TProtocol oprot) {
    TMessage msg = iprot.readMessageBegin();
    ProcessFunction fn = PROCESS_MAP[msg.name];
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      TApplicationError x = new TApplicationError(TApplicationErrorType.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return true;
    }
    fn(msg.seqid, iprot, oprot);
    return true;
  }

  findBuddyContactsByQuery(int seqid, TProtocol iprot, TProtocol oprot) async {
    findBuddyContactsByQuery_args args = new findBuddyContactsByQuery_args();
    args.read(iprot);
    iprot.readMessageEnd();
    findBuddyContactsByQuery_result result = new findBuddyContactsByQuery_result();
    try {
      result.success = await iface_.findBuddyContactsByQuery(args.language, args.country, args.query, args.fromIndex, args.count, args.requestSource);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing findBuddyContactsByQuery");
      oprot.writeMessageBegin(new TMessage("findBuddyContactsByQuery", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("findBuddyContactsByQuery", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getBuddyContacts(int seqid, TProtocol iprot, TProtocol oprot) async {
    getBuddyContacts_args args = new getBuddyContacts_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getBuddyContacts_result result = new getBuddyContacts_result();
    try {
      result.success = await iface_.getBuddyContacts(args.language, args.country, args.classification, args.fromIndex, args.count);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getBuddyContacts");
      oprot.writeMessageBegin(new TMessage("getBuddyContacts", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getBuddyContacts", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getBuddyDetail(int seqid, TProtocol iprot, TProtocol oprot) async {
    getBuddyDetail_args args = new getBuddyDetail_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getBuddyDetail_result result = new getBuddyDetail_result();
    try {
      result.success = await iface_.getBuddyDetail(args.buddyMid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getBuddyDetail");
      oprot.writeMessageBegin(new TMessage("getBuddyDetail", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getBuddyDetail", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getBuddyOnAir(int seqid, TProtocol iprot, TProtocol oprot) async {
    getBuddyOnAir_args args = new getBuddyOnAir_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getBuddyOnAir_result result = new getBuddyOnAir_result();
    try {
      result.success = await iface_.getBuddyOnAir(args.buddyMid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getBuddyOnAir");
      oprot.writeMessageBegin(new TMessage("getBuddyOnAir", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getBuddyOnAir", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getCountriesHavingBuddy(int seqid, TProtocol iprot, TProtocol oprot) async {
    getCountriesHavingBuddy_args args = new getCountriesHavingBuddy_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getCountriesHavingBuddy_result result = new getCountriesHavingBuddy_result();
    try {
      result.success = await iface_.getCountriesHavingBuddy();
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getCountriesHavingBuddy");
      oprot.writeMessageBegin(new TMessage("getCountriesHavingBuddy", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getCountriesHavingBuddy", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getNewlyReleasedBuddyIds(int seqid, TProtocol iprot, TProtocol oprot) async {
    getNewlyReleasedBuddyIds_args args = new getNewlyReleasedBuddyIds_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getNewlyReleasedBuddyIds_result result = new getNewlyReleasedBuddyIds_result();
    try {
      result.success = await iface_.getNewlyReleasedBuddyIds(args.country);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getNewlyReleasedBuddyIds");
      oprot.writeMessageBegin(new TMessage("getNewlyReleasedBuddyIds", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getNewlyReleasedBuddyIds", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getPopularBuddyBanner(int seqid, TProtocol iprot, TProtocol oprot) async {
    getPopularBuddyBanner_args args = new getPopularBuddyBanner_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getPopularBuddyBanner_result result = new getPopularBuddyBanner_result();
    try {
      result.success = await iface_.getPopularBuddyBanner(args.language, args.country, args.applicationType, args.resourceSpecification);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getPopularBuddyBanner");
      oprot.writeMessageBegin(new TMessage("getPopularBuddyBanner", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getPopularBuddyBanner", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getPopularBuddyLists(int seqid, TProtocol iprot, TProtocol oprot) async {
    getPopularBuddyLists_args args = new getPopularBuddyLists_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getPopularBuddyLists_result result = new getPopularBuddyLists_result();
    try {
      result.success = await iface_.getPopularBuddyLists(args.language, args.country);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getPopularBuddyLists");
      oprot.writeMessageBegin(new TMessage("getPopularBuddyLists", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getPopularBuddyLists", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getPromotedBuddyContacts(int seqid, TProtocol iprot, TProtocol oprot) async {
    getPromotedBuddyContacts_args args = new getPromotedBuddyContacts_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getPromotedBuddyContacts_result result = new getPromotedBuddyContacts_result();
    try {
      result.success = await iface_.getPromotedBuddyContacts(args.language, args.country);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getPromotedBuddyContacts");
      oprot.writeMessageBegin(new TMessage("getPromotedBuddyContacts", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getPromotedBuddyContacts", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

}

class findBuddyContactsByQuery_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("findBuddyContactsByQuery_args");
  static final TField _LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, 2);
  static final TField _COUNTRY_FIELD_DESC = new TField("country", TType.STRING, 3);
  static final TField _QUERY_FIELD_DESC = new TField("query", TType.STRING, 4);
  static final TField _FROM_INDEX_FIELD_DESC = new TField("fromIndex", TType.I32, 5);
  static final TField _COUNT_FIELD_DESC = new TField("count", TType.I32, 6);
  static final TField _REQUEST_SOURCE_FIELD_DESC = new TField("requestSource", TType.I32, 7);

  String _language;
  static const int LANGUAGE = 2;
  String _country;
  static const int COUNTRY = 3;
  String _query;
  static const int QUERY = 4;
  int _fromIndex = 0;
  static const int FROMINDEX = 5;
  int _count = 0;
  static const int COUNT = 6;
  int _requestSource;
  static const int REQUESTSOURCE = 7;

  bool __isset_fromIndex = false;
  bool __isset_count = false;
  bool __isset_requestSource = false;

  findBuddyContactsByQuery_args() {
  }

  // language
  String get language => this._language;

  set language(String language) {
    this._language = language;
  }

  bool isSetLanguage() => this.language != null;

  unsetLanguage() {
    this.language = null;
  }

  // country
  String get country => this._country;

  set country(String country) {
    this._country = country;
  }

  bool isSetCountry() => this.country != null;

  unsetCountry() {
    this.country = null;
  }

  // query
  String get query => this._query;

  set query(String query) {
    this._query = query;
  }

  bool isSetQuery() => this.query != null;

  unsetQuery() {
    this.query = null;
  }

  // fromIndex
  int get fromIndex => this._fromIndex;

  set fromIndex(int fromIndex) {
    this._fromIndex = fromIndex;
    this.__isset_fromIndex = true;
  }

  bool isSetFromIndex() => this.__isset_fromIndex;

  unsetFromIndex() {
    this.__isset_fromIndex = false;
  }

  // count
  int get count => this._count;

  set count(int count) {
    this._count = count;
    this.__isset_count = true;
  }

  bool isSetCount() => this.__isset_count;

  unsetCount() {
    this.__isset_count = false;
  }

  // requestSource
  int get requestSource => this._requestSource;

  set requestSource(int requestSource) {
    this._requestSource = requestSource;
    this.__isset_requestSource = true;
  }

  bool isSetRequestSource() => this.__isset_requestSource;

  unsetRequestSource() {
    this.__isset_requestSource = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case LANGUAGE:
        return this.language;
      case COUNTRY:
        return this.country;
      case QUERY:
        return this.query;
      case FROMINDEX:
        return this.fromIndex;
      case COUNT:
        return this.count;
      case REQUESTSOURCE:
        return this.requestSource;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case LANGUAGE:
        if (value == null) {
          unsetLanguage();
        } else {
          this.language = value;
        }
        break;

      case COUNTRY:
        if (value == null) {
          unsetCountry();
        } else {
          this.country = value;
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          this.query = value;
        }
        break;

      case FROMINDEX:
        if (value == null) {
          unsetFromIndex();
        } else {
          this.fromIndex = value;
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          this.count = value;
        }
        break;

      case REQUESTSOURCE:
        if (value == null) {
          unsetRequestSource();
        } else {
          this.requestSource = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case LANGUAGE:
        return isSetLanguage();
      case COUNTRY:
        return isSetCountry();
      case QUERY:
        return isSetQuery();
      case FROMINDEX:
        return isSetFromIndex();
      case COUNT:
        return isSetCount();
      case REQUESTSOURCE:
        return isSetRequestSource();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case LANGUAGE:
          if (field.type == TType.STRING) {
            this.language = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COUNTRY:
          if (field.type == TType.STRING) {
            this.country = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case QUERY:
          if (field.type == TType.STRING) {
            this.query = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FROMINDEX:
          if (field.type == TType.I32) {
            this.fromIndex = iprot.readI32();
            this.__isset_fromIndex = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COUNT:
          if (field.type == TType.I32) {
            this.count = iprot.readI32();
            this.__isset_count = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REQUESTSOURCE:
          if (field.type == TType.I32) {
            this.requestSource = iprot.readI32();
            this.__isset_requestSource = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.language != null) {
      oprot.writeFieldBegin(_LANGUAGE_FIELD_DESC);
      oprot.writeString(this.language);
      oprot.writeFieldEnd();
    }
    if (this.country != null) {
      oprot.writeFieldBegin(_COUNTRY_FIELD_DESC);
      oprot.writeString(this.country);
      oprot.writeFieldEnd();
    }
    if (this.query != null) {
      oprot.writeFieldBegin(_QUERY_FIELD_DESC);
      oprot.writeString(this.query);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_FROM_INDEX_FIELD_DESC);
    oprot.writeI32(this.fromIndex);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_COUNT_FIELD_DESC);
    oprot.writeI32(this.count);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_REQUEST_SOURCE_FIELD_DESC);
    oprot.writeI32(this.requestSource);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("findBuddyContactsByQuery_args(");

    ret.write("language:");
    if (this.language == null) {
      ret.write("null");
    } else {
      ret.write(this.language);
    }

    ret.write(", ");
    ret.write("country:");
    if (this.country == null) {
      ret.write("null");
    } else {
      ret.write(this.country);
    }

    ret.write(", ");
    ret.write("query:");
    if (this.query == null) {
      ret.write("null");
    } else {
      ret.write(this.query);
    }

    ret.write(", ");
    ret.write("fromIndex:");
    ret.write(this.fromIndex);

    ret.write(", ");
    ret.write("count:");
    ret.write(this.count);

    ret.write(", ");
    ret.write("requestSource:");
    String requestSource_name = BuddySearchRequestSource.VALUES_TO_NAMES[this.requestSource];
    if (requestSource_name != null) {
      ret.write(requestSource_name);
      ret.write(" (");
    }
    ret.write(this.requestSource);
    if (requestSource_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetRequestSource() && !BuddySearchRequestSource.VALID_VALUES.contains(requestSource)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'requestSource' has been assigned the invalid value $requestSource");
    }
  }

}

class findBuddyContactsByQuery_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("findBuddyContactsByQuery_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.LIST, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  List<BuddySearchResult> _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  findBuddyContactsByQuery_result() {
  }

  // success
  List<BuddySearchResult> get success => this._success;

  set success(List<BuddySearchResult> success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.LIST) {
            {
              TList _list670 = iprot.readListBegin();
              this.success = new List<BuddySearchResult>();
              for (int _i671 = 0; _i671 < _list670.length; ++_i671) {
                BuddySearchResult _elem672;
                _elem672 = new BuddySearchResult();
                _elem672.read(iprot);
                this.success.add(_elem672);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.success.length));
        for (var elem673 in this.success) {
          elem673.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("findBuddyContactsByQuery_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getBuddyContacts_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getBuddyContacts_args");
  static final TField _LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, 2);
  static final TField _COUNTRY_FIELD_DESC = new TField("country", TType.STRING, 3);
  static final TField _CLASSIFICATION_FIELD_DESC = new TField("classification", TType.STRING, 4);
  static final TField _FROM_INDEX_FIELD_DESC = new TField("fromIndex", TType.I32, 5);
  static final TField _COUNT_FIELD_DESC = new TField("count", TType.I32, 6);

  String _language;
  static const int LANGUAGE = 2;
  String _country;
  static const int COUNTRY = 3;
  String _classification;
  static const int CLASSIFICATION = 4;
  int _fromIndex = 0;
  static const int FROMINDEX = 5;
  int _count = 0;
  static const int COUNT = 6;

  bool __isset_fromIndex = false;
  bool __isset_count = false;

  getBuddyContacts_args() {
  }

  // language
  String get language => this._language;

  set language(String language) {
    this._language = language;
  }

  bool isSetLanguage() => this.language != null;

  unsetLanguage() {
    this.language = null;
  }

  // country
  String get country => this._country;

  set country(String country) {
    this._country = country;
  }

  bool isSetCountry() => this.country != null;

  unsetCountry() {
    this.country = null;
  }

  // classification
  String get classification => this._classification;

  set classification(String classification) {
    this._classification = classification;
  }

  bool isSetClassification() => this.classification != null;

  unsetClassification() {
    this.classification = null;
  }

  // fromIndex
  int get fromIndex => this._fromIndex;

  set fromIndex(int fromIndex) {
    this._fromIndex = fromIndex;
    this.__isset_fromIndex = true;
  }

  bool isSetFromIndex() => this.__isset_fromIndex;

  unsetFromIndex() {
    this.__isset_fromIndex = false;
  }

  // count
  int get count => this._count;

  set count(int count) {
    this._count = count;
    this.__isset_count = true;
  }

  bool isSetCount() => this.__isset_count;

  unsetCount() {
    this.__isset_count = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case LANGUAGE:
        return this.language;
      case COUNTRY:
        return this.country;
      case CLASSIFICATION:
        return this.classification;
      case FROMINDEX:
        return this.fromIndex;
      case COUNT:
        return this.count;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case LANGUAGE:
        if (value == null) {
          unsetLanguage();
        } else {
          this.language = value;
        }
        break;

      case COUNTRY:
        if (value == null) {
          unsetCountry();
        } else {
          this.country = value;
        }
        break;

      case CLASSIFICATION:
        if (value == null) {
          unsetClassification();
        } else {
          this.classification = value;
        }
        break;

      case FROMINDEX:
        if (value == null) {
          unsetFromIndex();
        } else {
          this.fromIndex = value;
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          this.count = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case LANGUAGE:
        return isSetLanguage();
      case COUNTRY:
        return isSetCountry();
      case CLASSIFICATION:
        return isSetClassification();
      case FROMINDEX:
        return isSetFromIndex();
      case COUNT:
        return isSetCount();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case LANGUAGE:
          if (field.type == TType.STRING) {
            this.language = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COUNTRY:
          if (field.type == TType.STRING) {
            this.country = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CLASSIFICATION:
          if (field.type == TType.STRING) {
            this.classification = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FROMINDEX:
          if (field.type == TType.I32) {
            this.fromIndex = iprot.readI32();
            this.__isset_fromIndex = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COUNT:
          if (field.type == TType.I32) {
            this.count = iprot.readI32();
            this.__isset_count = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.language != null) {
      oprot.writeFieldBegin(_LANGUAGE_FIELD_DESC);
      oprot.writeString(this.language);
      oprot.writeFieldEnd();
    }
    if (this.country != null) {
      oprot.writeFieldBegin(_COUNTRY_FIELD_DESC);
      oprot.writeString(this.country);
      oprot.writeFieldEnd();
    }
    if (this.classification != null) {
      oprot.writeFieldBegin(_CLASSIFICATION_FIELD_DESC);
      oprot.writeString(this.classification);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_FROM_INDEX_FIELD_DESC);
    oprot.writeI32(this.fromIndex);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_COUNT_FIELD_DESC);
    oprot.writeI32(this.count);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getBuddyContacts_args(");

    ret.write("language:");
    if (this.language == null) {
      ret.write("null");
    } else {
      ret.write(this.language);
    }

    ret.write(", ");
    ret.write("country:");
    if (this.country == null) {
      ret.write("null");
    } else {
      ret.write(this.country);
    }

    ret.write(", ");
    ret.write("classification:");
    if (this.classification == null) {
      ret.write("null");
    } else {
      ret.write(this.classification);
    }

    ret.write(", ");
    ret.write("fromIndex:");
    ret.write(this.fromIndex);

    ret.write(", ");
    ret.write("count:");
    ret.write(this.count);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getBuddyContacts_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getBuddyContacts_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.LIST, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  List<Contact> _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getBuddyContacts_result() {
  }

  // success
  List<Contact> get success => this._success;

  set success(List<Contact> success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.LIST) {
            {
              TList _list674 = iprot.readListBegin();
              this.success = new List<Contact>();
              for (int _i675 = 0; _i675 < _list674.length; ++_i675) {
                Contact _elem676;
                _elem676 = new Contact();
                _elem676.read(iprot);
                this.success.add(_elem676);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.success.length));
        for (var elem677 in this.success) {
          elem677.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getBuddyContacts_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getBuddyDetail_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getBuddyDetail_args");
  static final TField _BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, 4);

  String _buddyMid;
  static const int BUDDYMID = 4;


  getBuddyDetail_args() {
  }

  // buddyMid
  String get buddyMid => this._buddyMid;

  set buddyMid(String buddyMid) {
    this._buddyMid = buddyMid;
  }

  bool isSetBuddyMid() => this.buddyMid != null;

  unsetBuddyMid() {
    this.buddyMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return this.buddyMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case BUDDYMID:
        if (value == null) {
          unsetBuddyMid();
        } else {
          this.buddyMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return isSetBuddyMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case BUDDYMID:
          if (field.type == TType.STRING) {
            this.buddyMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.buddyMid != null) {
      oprot.writeFieldBegin(_BUDDY_MID_FIELD_DESC);
      oprot.writeString(this.buddyMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getBuddyDetail_args(");

    ret.write("buddyMid:");
    if (this.buddyMid == null) {
      ret.write("null");
    } else {
      ret.write(this.buddyMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getBuddyDetail_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getBuddyDetail_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  BuddyDetail _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getBuddyDetail_result() {
  }

  // success
  BuddyDetail get success => this._success;

  set success(BuddyDetail success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new BuddyDetail();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getBuddyDetail_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getBuddyOnAir_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getBuddyOnAir_args");
  static final TField _BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, 4);

  String _buddyMid;
  static const int BUDDYMID = 4;


  getBuddyOnAir_args() {
  }

  // buddyMid
  String get buddyMid => this._buddyMid;

  set buddyMid(String buddyMid) {
    this._buddyMid = buddyMid;
  }

  bool isSetBuddyMid() => this.buddyMid != null;

  unsetBuddyMid() {
    this.buddyMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return this.buddyMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case BUDDYMID:
        if (value == null) {
          unsetBuddyMid();
        } else {
          this.buddyMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case BUDDYMID:
        return isSetBuddyMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case BUDDYMID:
          if (field.type == TType.STRING) {
            this.buddyMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.buddyMid != null) {
      oprot.writeFieldBegin(_BUDDY_MID_FIELD_DESC);
      oprot.writeString(this.buddyMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getBuddyOnAir_args(");

    ret.write("buddyMid:");
    if (this.buddyMid == null) {
      ret.write("null");
    } else {
      ret.write(this.buddyMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getBuddyOnAir_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getBuddyOnAir_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  BuddyOnAir _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getBuddyOnAir_result() {
  }

  // success
  BuddyOnAir get success => this._success;

  set success(BuddyOnAir success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new BuddyOnAir();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getBuddyOnAir_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getCountriesHavingBuddy_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getCountriesHavingBuddy_args");



  getCountriesHavingBuddy_args() {
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getCountriesHavingBuddy_args(");

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getCountriesHavingBuddy_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getCountriesHavingBuddy_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.LIST, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  List<String> _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getCountriesHavingBuddy_result() {
  }

  // success
  List<String> get success => this._success;

  set success(List<String> success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.LIST) {
            {
              TList _list678 = iprot.readListBegin();
              this.success = new List<String>();
              for (int _i679 = 0; _i679 < _list678.length; ++_i679) {
                String _elem680;
                _elem680 = iprot.readString();
                this.success.add(_elem680);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.success.length));
        for (var elem681 in this.success) {
          oprot.writeString(elem681);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getCountriesHavingBuddy_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getNewlyReleasedBuddyIds_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getNewlyReleasedBuddyIds_args");
  static final TField _COUNTRY_FIELD_DESC = new TField("country", TType.STRING, 3);

  String _country;
  static const int COUNTRY = 3;


  getNewlyReleasedBuddyIds_args() {
  }

  // country
  String get country => this._country;

  set country(String country) {
    this._country = country;
  }

  bool isSetCountry() => this.country != null;

  unsetCountry() {
    this.country = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COUNTRY:
        return this.country;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COUNTRY:
        if (value == null) {
          unsetCountry();
        } else {
          this.country = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COUNTRY:
        return isSetCountry();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COUNTRY:
          if (field.type == TType.STRING) {
            this.country = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.country != null) {
      oprot.writeFieldBegin(_COUNTRY_FIELD_DESC);
      oprot.writeString(this.country);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getNewlyReleasedBuddyIds_args(");

    ret.write("country:");
    if (this.country == null) {
      ret.write("null");
    } else {
      ret.write(this.country);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getNewlyReleasedBuddyIds_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getNewlyReleasedBuddyIds_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.MAP, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  Map<String, int> _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getNewlyReleasedBuddyIds_result() {
  }

  // success
  Map<String, int> get success => this._success;

  set success(Map<String, int> success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.MAP) {
            {
              TMap _map682 = iprot.readMapBegin();
              this.success = new Map<String, int>();
              for (int _i683 = 0; _i683 < _map682.length; ++_i683) {
                String _key684;
                int _val685;
                _key684 = iprot.readString();
                _val685 = iprot.readI64();
                this.success[_key684] = _val685;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.I64, this.success.length));
        for (var elem687 in this.success.keys) {
          oprot.writeString(elem687);
          oprot.writeI64(this.success[elem687]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getNewlyReleasedBuddyIds_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getPopularBuddyBanner_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getPopularBuddyBanner_args");
  static final TField _LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, 2);
  static final TField _COUNTRY_FIELD_DESC = new TField("country", TType.STRING, 3);
  static final TField _APPLICATION_TYPE_FIELD_DESC = new TField("applicationType", TType.I32, 4);
  static final TField _RESOURCE_SPECIFICATION_FIELD_DESC = new TField("resourceSpecification", TType.STRING, 5);

  String _language;
  static const int LANGUAGE = 2;
  String _country;
  static const int COUNTRY = 3;
  int _applicationType;
  static const int APPLICATIONTYPE = 4;
  String _resourceSpecification;
  static const int RESOURCESPECIFICATION = 5;

  bool __isset_applicationType = false;

  getPopularBuddyBanner_args() {
  }

  // language
  String get language => this._language;

  set language(String language) {
    this._language = language;
  }

  bool isSetLanguage() => this.language != null;

  unsetLanguage() {
    this.language = null;
  }

  // country
  String get country => this._country;

  set country(String country) {
    this._country = country;
  }

  bool isSetCountry() => this.country != null;

  unsetCountry() {
    this.country = null;
  }

  // applicationType
  int get applicationType => this._applicationType;

  set applicationType(int applicationType) {
    this._applicationType = applicationType;
    this.__isset_applicationType = true;
  }

  bool isSetApplicationType() => this.__isset_applicationType;

  unsetApplicationType() {
    this.__isset_applicationType = false;
  }

  // resourceSpecification
  String get resourceSpecification => this._resourceSpecification;

  set resourceSpecification(String resourceSpecification) {
    this._resourceSpecification = resourceSpecification;
  }

  bool isSetResourceSpecification() => this.resourceSpecification != null;

  unsetResourceSpecification() {
    this.resourceSpecification = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case LANGUAGE:
        return this.language;
      case COUNTRY:
        return this.country;
      case APPLICATIONTYPE:
        return this.applicationType;
      case RESOURCESPECIFICATION:
        return this.resourceSpecification;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case LANGUAGE:
        if (value == null) {
          unsetLanguage();
        } else {
          this.language = value;
        }
        break;

      case COUNTRY:
        if (value == null) {
          unsetCountry();
        } else {
          this.country = value;
        }
        break;

      case APPLICATIONTYPE:
        if (value == null) {
          unsetApplicationType();
        } else {
          this.applicationType = value;
        }
        break;

      case RESOURCESPECIFICATION:
        if (value == null) {
          unsetResourceSpecification();
        } else {
          this.resourceSpecification = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case LANGUAGE:
        return isSetLanguage();
      case COUNTRY:
        return isSetCountry();
      case APPLICATIONTYPE:
        return isSetApplicationType();
      case RESOURCESPECIFICATION:
        return isSetResourceSpecification();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case LANGUAGE:
          if (field.type == TType.STRING) {
            this.language = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COUNTRY:
          if (field.type == TType.STRING) {
            this.country = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case APPLICATIONTYPE:
          if (field.type == TType.I32) {
            this.applicationType = iprot.readI32();
            this.__isset_applicationType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RESOURCESPECIFICATION:
          if (field.type == TType.STRING) {
            this.resourceSpecification = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.language != null) {
      oprot.writeFieldBegin(_LANGUAGE_FIELD_DESC);
      oprot.writeString(this.language);
      oprot.writeFieldEnd();
    }
    if (this.country != null) {
      oprot.writeFieldBegin(_COUNTRY_FIELD_DESC);
      oprot.writeString(this.country);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_APPLICATION_TYPE_FIELD_DESC);
    oprot.writeI32(this.applicationType);
    oprot.writeFieldEnd();
    if (this.resourceSpecification != null) {
      oprot.writeFieldBegin(_RESOURCE_SPECIFICATION_FIELD_DESC);
      oprot.writeString(this.resourceSpecification);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getPopularBuddyBanner_args(");

    ret.write("language:");
    if (this.language == null) {
      ret.write("null");
    } else {
      ret.write(this.language);
    }

    ret.write(", ");
    ret.write("country:");
    if (this.country == null) {
      ret.write("null");
    } else {
      ret.write(this.country);
    }

    ret.write(", ");
    ret.write("applicationType:");
    String applicationType_name = ApplicationType.VALUES_TO_NAMES[this.applicationType];
    if (applicationType_name != null) {
      ret.write(applicationType_name);
      ret.write(" (");
    }
    ret.write(this.applicationType);
    if (applicationType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("resourceSpecification:");
    if (this.resourceSpecification == null) {
      ret.write("null");
    } else {
      ret.write(this.resourceSpecification);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetApplicationType() && !ApplicationType.VALID_VALUES.contains(applicationType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'applicationType' has been assigned the invalid value $applicationType");
    }
  }

}

class getPopularBuddyBanner_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getPopularBuddyBanner_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  BuddyBanner _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getPopularBuddyBanner_result() {
  }

  // success
  BuddyBanner get success => this._success;

  set success(BuddyBanner success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new BuddyBanner();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getPopularBuddyBanner_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getPopularBuddyLists_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getPopularBuddyLists_args");
  static final TField _LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, 2);
  static final TField _COUNTRY_FIELD_DESC = new TField("country", TType.STRING, 3);

  String _language;
  static const int LANGUAGE = 2;
  String _country;
  static const int COUNTRY = 3;


  getPopularBuddyLists_args() {
  }

  // language
  String get language => this._language;

  set language(String language) {
    this._language = language;
  }

  bool isSetLanguage() => this.language != null;

  unsetLanguage() {
    this.language = null;
  }

  // country
  String get country => this._country;

  set country(String country) {
    this._country = country;
  }

  bool isSetCountry() => this.country != null;

  unsetCountry() {
    this.country = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case LANGUAGE:
        return this.language;
      case COUNTRY:
        return this.country;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case LANGUAGE:
        if (value == null) {
          unsetLanguage();
        } else {
          this.language = value;
        }
        break;

      case COUNTRY:
        if (value == null) {
          unsetCountry();
        } else {
          this.country = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case LANGUAGE:
        return isSetLanguage();
      case COUNTRY:
        return isSetCountry();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case LANGUAGE:
          if (field.type == TType.STRING) {
            this.language = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COUNTRY:
          if (field.type == TType.STRING) {
            this.country = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.language != null) {
      oprot.writeFieldBegin(_LANGUAGE_FIELD_DESC);
      oprot.writeString(this.language);
      oprot.writeFieldEnd();
    }
    if (this.country != null) {
      oprot.writeFieldBegin(_COUNTRY_FIELD_DESC);
      oprot.writeString(this.country);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getPopularBuddyLists_args(");

    ret.write("language:");
    if (this.language == null) {
      ret.write("null");
    } else {
      ret.write(this.language);
    }

    ret.write(", ");
    ret.write("country:");
    if (this.country == null) {
      ret.write("null");
    } else {
      ret.write(this.country);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getPopularBuddyLists_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getPopularBuddyLists_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.LIST, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  List<BuddyList> _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getPopularBuddyLists_result() {
  }

  // success
  List<BuddyList> get success => this._success;

  set success(List<BuddyList> success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.LIST) {
            {
              TList _list688 = iprot.readListBegin();
              this.success = new List<BuddyList>();
              for (int _i689 = 0; _i689 < _list688.length; ++_i689) {
                BuddyList _elem690;
                _elem690 = new BuddyList();
                _elem690.read(iprot);
                this.success.add(_elem690);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.success.length));
        for (var elem691 in this.success) {
          elem691.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getPopularBuddyLists_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getPromotedBuddyContacts_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getPromotedBuddyContacts_args");
  static final TField _LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, 2);
  static final TField _COUNTRY_FIELD_DESC = new TField("country", TType.STRING, 3);

  String _language;
  static const int LANGUAGE = 2;
  String _country;
  static const int COUNTRY = 3;


  getPromotedBuddyContacts_args() {
  }

  // language
  String get language => this._language;

  set language(String language) {
    this._language = language;
  }

  bool isSetLanguage() => this.language != null;

  unsetLanguage() {
    this.language = null;
  }

  // country
  String get country => this._country;

  set country(String country) {
    this._country = country;
  }

  bool isSetCountry() => this.country != null;

  unsetCountry() {
    this.country = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case LANGUAGE:
        return this.language;
      case COUNTRY:
        return this.country;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case LANGUAGE:
        if (value == null) {
          unsetLanguage();
        } else {
          this.language = value;
        }
        break;

      case COUNTRY:
        if (value == null) {
          unsetCountry();
        } else {
          this.country = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case LANGUAGE:
        return isSetLanguage();
      case COUNTRY:
        return isSetCountry();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case LANGUAGE:
          if (field.type == TType.STRING) {
            this.language = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COUNTRY:
          if (field.type == TType.STRING) {
            this.country = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.language != null) {
      oprot.writeFieldBegin(_LANGUAGE_FIELD_DESC);
      oprot.writeString(this.language);
      oprot.writeFieldEnd();
    }
    if (this.country != null) {
      oprot.writeFieldBegin(_COUNTRY_FIELD_DESC);
      oprot.writeString(this.country);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getPromotedBuddyContacts_args(");

    ret.write("language:");
    if (this.language == null) {
      ret.write("null");
    } else {
      ret.write(this.language);
    }

    ret.write(", ");
    ret.write("country:");
    if (this.country == null) {
      ret.write("null");
    } else {
      ret.write(this.country);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getPromotedBuddyContacts_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getPromotedBuddyContacts_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.LIST, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  List<Contact> _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getPromotedBuddyContacts_result() {
  }

  // success
  List<Contact> get success => this._success;

  set success(List<Contact> success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.LIST) {
            {
              TList _list692 = iprot.readListBegin();
              this.success = new List<Contact>();
              for (int _i693 = 0; _i693 < _list692.length; ++_i693) {
                Contact _elem694;
                _elem694 = new Contact();
                _elem694.read(iprot);
                this.success.add(_elem694);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.success.length));
        for (var elem695 in this.success) {
          elem695.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getPromotedBuddyContacts_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

