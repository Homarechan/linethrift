/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.coin;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class Coin implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Coin");
  static final TField _FREE_COIN_BALANCE_FIELD_DESC = new TField("freeCoinBalance", TType.I32, 1);
  static final TField _PAYED_COIN_BALANCE_FIELD_DESC = new TField("payedCoinBalance", TType.I32, 2);
  static final TField _TOTAL_COIN_BALANCE_FIELD_DESC = new TField("totalCoinBalance", TType.I32, 3);
  static final TField _REWARD_COIN_BALANCE_FIELD_DESC = new TField("rewardCoinBalance", TType.I32, 4);

  int _freeCoinBalance = 0;
  static const int FREECOINBALANCE = 1;
  int _payedCoinBalance = 0;
  static const int PAYEDCOINBALANCE = 2;
  int _totalCoinBalance = 0;
  static const int TOTALCOINBALANCE = 3;
  int _rewardCoinBalance = 0;
  static const int REWARDCOINBALANCE = 4;

  bool __isset_freeCoinBalance = false;
  bool __isset_payedCoinBalance = false;
  bool __isset_totalCoinBalance = false;
  bool __isset_rewardCoinBalance = false;

  Coin() {
  }

  // freeCoinBalance
  int get freeCoinBalance => this._freeCoinBalance;

  set freeCoinBalance(int freeCoinBalance) {
    this._freeCoinBalance = freeCoinBalance;
    this.__isset_freeCoinBalance = true;
  }

  bool isSetFreeCoinBalance() => this.__isset_freeCoinBalance;

  unsetFreeCoinBalance() {
    this.__isset_freeCoinBalance = false;
  }

  // payedCoinBalance
  int get payedCoinBalance => this._payedCoinBalance;

  set payedCoinBalance(int payedCoinBalance) {
    this._payedCoinBalance = payedCoinBalance;
    this.__isset_payedCoinBalance = true;
  }

  bool isSetPayedCoinBalance() => this.__isset_payedCoinBalance;

  unsetPayedCoinBalance() {
    this.__isset_payedCoinBalance = false;
  }

  // totalCoinBalance
  int get totalCoinBalance => this._totalCoinBalance;

  set totalCoinBalance(int totalCoinBalance) {
    this._totalCoinBalance = totalCoinBalance;
    this.__isset_totalCoinBalance = true;
  }

  bool isSetTotalCoinBalance() => this.__isset_totalCoinBalance;

  unsetTotalCoinBalance() {
    this.__isset_totalCoinBalance = false;
  }

  // rewardCoinBalance
  int get rewardCoinBalance => this._rewardCoinBalance;

  set rewardCoinBalance(int rewardCoinBalance) {
    this._rewardCoinBalance = rewardCoinBalance;
    this.__isset_rewardCoinBalance = true;
  }

  bool isSetRewardCoinBalance() => this.__isset_rewardCoinBalance;

  unsetRewardCoinBalance() {
    this.__isset_rewardCoinBalance = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case FREECOINBALANCE:
        return this.freeCoinBalance;
      case PAYEDCOINBALANCE:
        return this.payedCoinBalance;
      case TOTALCOINBALANCE:
        return this.totalCoinBalance;
      case REWARDCOINBALANCE:
        return this.rewardCoinBalance;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case FREECOINBALANCE:
        if (value == null) {
          unsetFreeCoinBalance();
        } else {
          this.freeCoinBalance = value;
        }
        break;

      case PAYEDCOINBALANCE:
        if (value == null) {
          unsetPayedCoinBalance();
        } else {
          this.payedCoinBalance = value;
        }
        break;

      case TOTALCOINBALANCE:
        if (value == null) {
          unsetTotalCoinBalance();
        } else {
          this.totalCoinBalance = value;
        }
        break;

      case REWARDCOINBALANCE:
        if (value == null) {
          unsetRewardCoinBalance();
        } else {
          this.rewardCoinBalance = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case FREECOINBALANCE:
        return isSetFreeCoinBalance();
      case PAYEDCOINBALANCE:
        return isSetPayedCoinBalance();
      case TOTALCOINBALANCE:
        return isSetTotalCoinBalance();
      case REWARDCOINBALANCE:
        return isSetRewardCoinBalance();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case FREECOINBALANCE:
          if (field.type == TType.I32) {
            this.freeCoinBalance = iprot.readI32();
            this.__isset_freeCoinBalance = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PAYEDCOINBALANCE:
          if (field.type == TType.I32) {
            this.payedCoinBalance = iprot.readI32();
            this.__isset_payedCoinBalance = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOTALCOINBALANCE:
          if (field.type == TType.I32) {
            this.totalCoinBalance = iprot.readI32();
            this.__isset_totalCoinBalance = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REWARDCOINBALANCE:
          if (field.type == TType.I32) {
            this.rewardCoinBalance = iprot.readI32();
            this.__isset_rewardCoinBalance = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_FREE_COIN_BALANCE_FIELD_DESC);
    oprot.writeI32(this.freeCoinBalance);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_PAYED_COIN_BALANCE_FIELD_DESC);
    oprot.writeI32(this.payedCoinBalance);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TOTAL_COIN_BALANCE_FIELD_DESC);
    oprot.writeI32(this.totalCoinBalance);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_REWARD_COIN_BALANCE_FIELD_DESC);
    oprot.writeI32(this.rewardCoinBalance);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Coin(");

    ret.write("freeCoinBalance:");
    ret.write(this.freeCoinBalance);

    ret.write(", ");
    ret.write("payedCoinBalance:");
    ret.write(this.payedCoinBalance);

    ret.write(", ");
    ret.write("totalCoinBalance:");
    ret.write(this.totalCoinBalance);

    ret.write(", ");
    ret.write("rewardCoinBalance:");
    ret.write(this.rewardCoinBalance);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

