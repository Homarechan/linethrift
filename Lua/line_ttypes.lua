--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'line_constants'

ApplicationType = {
  IOS = 16,
  IOS_RC = 17,
  IOS_BETA = 18,
  IOS_ALPHA = 19,
  ANDROID = 32,
  ANDROID_RC = 33,
  ANDROID_BETA = 34,
  ANDROID_ALPHA = 35,
  WAP = 48,
  WAP_RC = 49,
  WAP_BETA = 50,
  WAP_ALPHA = 51,
  BOT = 64,
  BOT_RC = 65,
  BOT_BETA = 66,
  BOT_ALPHA = 67,
  WEB = 80,
  WEB_RC = 81,
  WEB_BETA = 82,
  WEB_ALPHA = 83,
  DESKTOPWIN = 96,
  DESKTOPWIN_RC = 97,
  DESKTOPWIN_BETA = 98,
  DESKTOPWIN_ALPHA = 99,
  DESKTOPMAC = 112,
  DESKTOPMAC_RC = 113,
  DESKTOPMAC_BETA = 114,
  DESKTOPMAC_ALPHA = 115,
  CHANNELGW = 128,
  CHANNELGW_RC = 129,
  CHANNELGW_BETA = 130,
  CHANNELGW_ALPHA = 131,
  CHANNELCP = 144,
  CHANNELCP_RC = 145,
  CHANNELCP_BETA = 146,
  CHANNELCP_ALPHA = 147,
  WINPHONE = 160,
  WINPHONE_RC = 161,
  WINPHONE_BETA = 162,
  WINPHONE_ALPHA = 163,
  BLACKBERRY = 176,
  BLACKBERRY_RC = 177,
  BLACKBERRY_BETA = 178,
  BLACKBERRY_ALPHA = 179,
  WINMETRO = 192,
  WINMETRO_RC = 193,
  WINMETRO_BETA = 194,
  WINMETRO_ALPHA = 195,
  S40 = 208,
  S40_RC = 209,
  S40_BETA = 210,
  S40_ALPHA = 211,
  CHRONO = 224,
  CHRONO_RC = 225,
  CHRONO_BETA = 226,
  CHRONO_ALPHA = 227,
  TIZEN = 256,
  TIZEN_RC = 257,
  TIZEN_BETA = 258,
  TIZEN_ALPHA = 259,
  VIRTUAL = 272,
  FIREFOXOS = 288,
  FIREFOXOS_RC = 289,
  FIREFOXOS_BETA = 290,
  FIREFOXOS_ALPHA = 291,
  IOSIPAD = 304,
  IOSIPAD_RC = 305,
  IOSIPAD_BETA = 306,
  IOSIPAD_ALPHA = 307,
  BIZIOS = 320,
  BIZIOS_RC = 321,
  BIZIOS_BETA = 322,
  BIZIOS_ALPHA = 323,
  BIZANDROID = 336,
  BIZANDROID_RC = 337,
  BIZANDROID_BETA = 338,
  BIZANDROID_ALPHA = 339,
  BIZBOT = 352,
  BIZBOT_RC = 353,
  BIZBOT_BETA = 354,
  BIZBOT_ALPHA = 355,
  CHROMEOS = 368,
  CHROMEOS_RC = 369,
  CHROMEOS_BETA = 370,
  CHROMEOS_ALPHA = 371,
  ANDROIDLITE = 384,
  ANDROIDLITE_RC = 385,
  ANDROIDLITE_BETA = 386,
  ANDROIDLITE_ALPHA = 387,
  WIN10 = 400,
  WIN10_RC = 401,
  WIN10_BETA = 402,
  WIN10_ALPHA = 403,
  BIZWEB = 416,
  BIZWEB_RC = 417,
  BIZWEB_BETA = 418,
  BIZWEB_ALPHA = 419,
  DUMMYPRIMARY = 432,
  DUMMYPRIMARY_RC = 433,
  DUMMYPRIMARY_BETA = 434,
  DUMMYPRIMARY_ALPHA = 435,
  SQUARE = 448,
  SQUARE_RC = 449,
  SQUARE_BETA = 450,
  SQUARE_ALPHA = 451,
  INTERNAL = 464,
  INTERNAL_RC = 465,
  INTERNAL_BETA = 466,
  INTERNAL_ALPHA = 467,
  CLOVAFRIENDS = 480,
  CLOVAFRIENDS_RC = 481,
  CLOVAFRIENDS_BETA = 482,
  CLOVAFRIENDS_ALPHA = 483
}

ExtendedProfileAttribute = {
}

PrivacyLevelType = {
  PUBLIC = 0,
  PRIVATE = 1
}

PaidCallerIdStatus = {
  NOT_SPECIFIED = 0,
  VALID = 1,
  VERIFICATION_REQUIRED = 2,
  NOT_PERMITTED = 3,
  LIMIT_EXCEEDED = 4,
  LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 5
}

PaidCallProductType = {
  COIN = 0,
  CREDIT = 1,
  MONTHLY = 2
}

PaidCallType = {
  OUT = 0,
  IN = 1,
  TOLLFREE = 2,
  RECORD = 3,
  AD = 4,
  CS = 5
}

BotType = {
  RESERVED = 0,
  OFFICIAL = 1,
  LINE_AT_0 = 2,
  LINE_AT = 3
}

BuddyOnAirLabel = {
  ON_AIR = 0,
  LIVE = 1
}

BuddyBannerLinkType = {
  BUDDY_BANNER_LINK_HIDDEN = 0,
  BUDDY_BANNER_LINK_MID = 1,
  BUDDY_BANNER_LINK_URL = 2
}

BuddyOnAirType = {
  NORMAL = 0,
  LIVE = 1,
  VOIP = 2
}

Diff = {
  ADDED = 0,
  UPDATED = 1,
  REMOVED = 2
}

ReportType = {
  ADVERTISING = 1,
  GENDER_HARASSMENT = 2,
  HARASSMENT = 3,
  OTHER = 4
}

SyncTriggerReason = {
  OTHER = 0,
  REVISION_GAP_TOO_LARGE = 1,
  OPERATION_EXPIRED = 2
}

ReportCategory = {
  PUSH_NORMAL_PLAIN = 0,
  PUSH_NORMAL_E2EE = 1,
  PUSH_VOIP_PLAIN = 2,
  PUSH_VOIP_E2EE = 3
}

BuddyResultState = {
  ACCEPTED = 1,
  SUCCEEDED = 2,
  FAILED = 3,
  CANCELLED = 4,
  NOTIFY_FAILED = 5,
  STORING = 11,
  UPLOADING = 21,
  NOTIFYING = 31,
  REMOVING_SUBSCRIPTION = 41,
  UNREGISTERING_ACCOUNT = 42,
  NOTIFYING_LEAVE_CHAT = 43
}

BuddySearchRequestSource = {
  NA = 0,
  FRIEND_VIEW = 1,
  OFFICIAL_ACCOUNT_VIEW = 2
}

CarrierCode = {
  NOT_SPECIFIED = 0,
  JP_DOCOMO = 1,
  JP_AU = 2,
  JP_SOFTBANK = 3,
  JP_DOCOMO_LINE = 4,
  KR_SKT = 17,
  KR_KT = 18,
  KR_LGT = 19
}

ChannelConfiguration = {
  MESSAGE = 0,
  MESSAGE_NOTIFICATION = 1,
  NOTIFICATION_CENTER = 2
}

ChannelPermission = {
  PROFILE = 0,
  FRIENDS = 1,
  GROUP = 2
}

ChannelFeatureLicense = {
  BLE_LCS_API_USABLE = 26,
  PROHIBIT_MINIMIZE_CHANNEL_BROWSER = 27,
  ALLOW_IOS_WEBKIT = 28
}

ChannelErrorCode = {
  ILLEGAL_ARGUMENT = 0,
  INTERNAL_ERROR = 1,
  CONNECTION_ERROR = 2,
  AUTHENTICATIONI_FAILED = 3,
  NEED_PERMISSION_APPROVAL = 4,
  COIN_NOT_USABLE = 5,
  WEBVIEW_NOT_ALLOWED = 6
}

ChannelSyncType = {
  SYNC = 0,
  REMOVE = 1,
  REMOVE_ALL = 2
}

LoginType = {
  ID_CREDENTIAL = 0,
  QRCODE = 1,
  ID_CREDENTIAL_WITH_E2EE = 2
}

ContactAttribute = {
  CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL = 1,
  CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL = 2,
  CONTACT_ATTRIBUTE_CAPABLE_MY_HOME = 16,
  CONTACT_ATTRIBUTE_CAPABLE_BUDDY = 32
}

ContactCategory = {
  NORMAL = 0,
  RECOMMEND = 1
}

ContactRelation = {
  ONEWAY = 0,
  BOTH = 1,
  NOT_REGISTERED = 2
}

AsymmetricKeyAlgorithm = {
  ASYMMETRIC_KEY_ALGORITHM_RSA = 1,
  ASYMMETRIC_KEY_ALGORITHM_ECDH = 2
}

ContactSetting = {
  CONTACT_SETTING_NOTIFICATION_DISABLE = 1,
  CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2,
  CONTACT_SETTING_CONTACT_HIDE = 4,
  CONTACT_SETTING_FAVORITE = 8,
  CONTACT_SETTING_DELETE = 16
}

ContactStatus = {
  UNSPECIFIED = 0,
  FRIEND = 1,
  FRIEND_BLOCKED = 2,
  RECOMMEND = 3,
  RECOMMEND_BLOCKED = 4,
  DELETED = 5,
  DELETED_BLOCKED = 6
}

ContactType = {
  MID = 0,
  PHONE = 1,
  EMAIL = 2,
  USERID = 3,
  PROXIMITY = 4,
  GROUP = 5,
  USER = 6,
  QRCODE = 7,
  PROMOTION_BOT = 8,
  CONTACT_MESSAGE = 9,
  FRIEND_REQUEST = 10,
  REPAIR = 128,
  FACEBOOK = 2305,
  SINA = 2306,
  RENREN = 2307,
  FEIXIN = 2308,
  BBM = 2309,
  BEACON = 11
}

GroupPreferenceAttribute = {
  INVITATION_TICKET = 1,
  FAVORITE_TIMESTAMP = 2
}

ContentType = {
  NONE = 0,
  IMAGE = 1,
  VIDEO = 2,
  AUDIO = 3,
  HTML = 4,
  PDF = 5,
  CALL = 6,
  STICKER = 7,
  PRESENCE = 8,
  GIFT = 9,
  GROUPBOARD = 10,
  APPLINK = 11,
  LINK = 12,
  CONTACT = 13,
  FILE = 14,
  LOCATION = 15,
  POSTNOTIFICATION = 16,
  RICH = 17,
  CHATEVENT = 18,
  MUSIC = 19,
  PAYMENT = 20,
  EXTIMAGE = 21
}

MessageRelationType = {
  FORWARD = 0,
  AUTO_REPLY = 1,
  SUBORDINATE = 2
}

CustomMode = {
  PROMOTION_FRIENDS_INVITE = 1,
  CAPABILITY_SERVER_SIDE_SMS = 2,
  LINE_CLIENT_ANALYTICS_CONFIGURATION = 3
}

RoomAttribute = {
  ALL = 255,
  NOTIFICATION_SETTING = 1
}

UserStatus = {
  NORMAL = 0,
  UNBOUND = 1,
  UNREGISTERED = 2
}

EmailConfirmationStatus = {
  NOT_SPECIFIED = 0,
  NOT_YET = 1,
  DONE = 3,
  NEED_ENFORCED_INPUT = 4
}

AccountMigrationPincodeType = {
  NOT_APPLICABLE = 0,
  NOT_SET = 1,
  SET = 2,
  NEED_ENFORCED_INPUT = 3
}

AccountMigrationCheckType = {
  SKIP = 0,
  PINCODE = 1,
  SECURITY_CENTER = 2
}

SecurityCenterSettingsType = {
  NOT_APPLICABLE = 0,
  NOT_SET = 1,
  SET = 2,
  NEED_ENFORCED_INPUT = 3
}

EmailConfirmationType = {
  SERVER_SIDE_EMAIL = 0,
  CLIENT_SIDE_EMAIL = 1
}

SquareChatAnnouncementType = {
  TEXT_MESSAGE = 0
}

SquareChatAttribute = {
  NAME = 2,
  SQUARE_CHAT_IMAGE = 3,
  STATE = 4
}

SquareMemberAttribute = {
  DISPLAY_NAME = 1,
  PROFILE_IMAGE = 2,
  ABLE_TO_RECEIVE_MESSAGE = 3,
  MEMBERSHIP_STATE = 5,
  ROLE = 6,
  PREFERENCE = 7
}

SquareMemberRelationAttribute = {
  BLOCKED = 1
}

SquarePreferenceAttribute = {
  FAVORITE = 1,
  NOTI_FOR_NEW_JOIN_REQUEST = 2
}

SquareState = {
  ALIVE = 0,
  DELETED = 1,
  SUSPENDED = 2
}

CommitMessageResultCode = {
  DELIVERED = 0,
  DELIVERY_SKIPPED = 1,
  DELIVERY_RESTRICTED = 2
}

ErrorCode = {
  ILLEGAL_ARGUMENT = 0,
  AUTHENTICATION_FAILED = 1,
  DB_FAILED = 2,
  INVALID_STATE = 3,
  EXCESSIVE_ACCESS = 4,
  NOT_FOUND = 5,
  INVALID_MID = 9,
  NOT_A_MEMBER = 10,
  INVALID_LENGTH = 6,
  NOT_AVAILABLE_USER = 7,
  NOT_AUTHORIZED_DEVICE = 8,
  NOT_AUTHORIZED_SESSION = 14,
  INCOMPATIBLE_APP_VERSION = 11,
  NOT_READY = 12,
  NOT_AVAILABLE_SESSION = 13,
  SYSTEM_ERROR = 15,
  NO_AVAILABLE_VERIFICATION_METHOD = 16,
  NOT_AUTHENTICATED = 17,
  INVALID_IDENTITY_CREDENTIAL = 18,
  NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19,
  INTERNAL_ERROR = 20,
  NO_SUCH_IDENTITY_IDENFIER = 21,
  DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22,
  ILLEGAL_IDENTITY_CREDENTIAL = 23,
  UNKNOWN_CHANNEL = 24,
  NO_SUCH_MESSAGE_BOX = 25,
  NOT_AVAILABLE_MESSAGE_BOX = 26,
  CHANNEL_DOES_NOT_MATCH = 27,
  NOT_YOUR_MESSAGE = 28,
  MESSAGE_DEFINED_ERROR = 29,
  USER_CANNOT_ACCEPT_PRESENTS = 30,
  USER_NOT_STICKER_OWNER = 32,
  MAINTENANCE_ERROR = 33,
  ACCOUNT_NOT_MATCHED = 34,
  ABUSE_BLOCK = 35,
  NOT_FRIEND = 36,
  NOT_ALLOWED_CALL = 37,
  BLOCK_FRIEND = 38,
  INCOMPATIBLE_VOIP_VERSION = 39,
  INVALID_SNS_ACCESS_TOKEN = 40,
  EXTERNAL_SERVICE_NOT_AVAILABLE = 41,
  NOT_ALLOWED_ADD_CONTACT = 42,
  NOT_CERTIFICATED = 43,
  NOT_ALLOWED_SECONDARY_DEVICE = 44,
  INVALID_PIN_CODE = 45,
  NOT_FOUND_IDENTITY_CREDENTIAL = 46,
  EXCEED_FILE_MAX_SIZE = 47,
  EXCEED_DAILY_QUOTA = 48,
  NOT_SUPPORT_SEND_FILE = 49,
  MUST_UPGRADE = 50,
  NOT_AVAILABLE_PIN_CODE_SESSION = 51,
  EXPIRED_REVISION = 52,
  NOT_YET_PHONE_NUMBER = 54,
  BAD_CALL_NUMBER = 55,
  UNAVAILABLE_CALL_NUMBER = 56,
  NOT_SUPPORT_CALL_SERVICE = 57,
  CONGESTION_CONTROL = 58,
  NO_BALANCE = 59,
  NOT_PERMITTED_CALLER_ID = 60,
  NO_CALLER_ID_LIMIT_EXCEEDED = 61,
  CALLER_ID_VERIFICATION_REQUIRED = 62,
  NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 63,
  MESSAGE_NOT_FOUND = 64,
  INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT = 65,
  ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED = 66,
  ACCOUNT_MIGRATION_PINCODE_BLOCKED = 67,
  INVALID_PASSWORD_FORMAT = 69,
  FEATURE_RESTRICTED = 70,
  MESSAGE_NOT_DESTRUCTIBLE = 71,
  PAID_CALL_REDEEM_FAILED = 72,
  PREVENTED_JOIN_BY_TICKET = 73,
  SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT = 75,
  SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY = 76,
  SECURITY_CENTER_NOT_VERIFIED = 77,
  SECURITY_CENTER_BLOCKED_BY_SETTING = 78,
  SECURITY_CENTER_BLOCKED = 79,
  TALK_PROXY_EXCEPTION = 80,
  E2EE_INVALID_PROTOCOL = 81,
  E2EE_RETRY_ENCRYPT = 82,
  E2EE_UPDATE_SENDER_KEY = 83,
  E2EE_UPDATE_RECEIVER_KEY = 84,
  E2EE_INVALID_ARGUMENT = 85,
  E2EE_INVALID_VERSION = 86,
  E2EE_SENDER_DISABLED = 87,
  E2EE_RECEIVER_DISABLED = 88,
  E2EE_SENDER_NOT_ALLOWED = 89,
  E2EE_RECEIVER_NOT_ALLOWED = 90,
  E2EE_RESEND_FAIL = 91,
  E2EE_RESEND_OK = 92,
  HITOKOTO_BACKUP_NO_AVAILABLE_DATA = 93,
  E2EE_UPDATE_PRIMARY_DEVICE = 94,
  SUCCESS = 95,
  CANCEL = 96,
  E2EE_PRIMARY_NOT_SUPPORT = 97,
  E2EE_RETRY_PLAIN = 98,
  E2EE_RECREATE_GROUP_KEY = 99,
  E2EE_GROUP_TOO_MANY_MEMBERS = 100,
  SERVER_BUSY = 101,
  NOT_ALLOWED_ADD_FOLLOW = 102,
  INCOMING_FRIEND_REQUEST_LIMIT = 103,
  OUTGOING_FRIEND_REQUEST_LIMIT = 104,
  OUTGOING_FRIEND_REQUEST_QUOTA = 105,
  DUPLICATED = 106,
  BANNED = 107
}

FeatureType = {
  OBS_VIDEO = 1,
  OBS_GENERAL = 2
}

GroupAttribute = {
  NAME = 1,
  PICTURE_STATUS = 2,
  ALL = 255,
  PREVENTED_JOIN_BY_TICKET = 4,
  NOTIFICATION_SETTING = 8
}

IdentityProvider = {
  UNKNOWN = 0,
  LINE = 1,
  NAVER_KR = 2,
  LINE_PHONE = 3
}

LoginResultType = {
  SUCCESS = 1,
  REQUIRE_QRCODE = 2,
  REQUIRE_DEVICE_CONFIRM = 3,
  REQUIRE_SMS_CONFIRM = 4
}

MessageOperationType = {
  SEND_MESSAGE = 1,
  RECEIVE_MESSAGE = 2,
  READ_MESSAGE = 3,
  NOTIFIED_READ_MESSAGE = 4,
  NOTIFIED_JOIN_CHAT = 5,
  FAILED_SEND_MESSAGE = 6,
  SEND_CONTENT = 7,
  SEND_CONTENT_RECEIPT = 8,
  SEND_CHAT_REMOVED = 9,
  REMOVE_ALL_MESSAGES = 10
}

MIDType = {
  USER = 0,
  ROOM = 1,
  GROUP = 2,
  SQUARE = 3,
  SQUARE_CHAT = 4,
  SQUARE_MEMBER = 5,
  BOT = 6
}

ServiceCode = {
  UNKNOWN = 0,
  TALK = 1,
  SQUARE = 2
}

FriendRequestDirection = {
  INCOMING = 1,
  OUTGOING = 2
}

FriendRequestMethod = {
  TIMELINE = 1,
  NEARBY = 2,
  SQUARE = 3
}

FriendRequestStatus = {
  NONE = 0,
  AVAILABLE = 1,
  ALREADY_REQUESTED = 2,
  UNAVAILABLE = 3
}

ModificationType = {
  ADD = 0,
  REMOVE = 1,
  MODIFY = 2
}

NotificationItemFetchMode = {
  ALL = 0,
  APPEND = 1
}

NotificationQueueType = {
  GLOBAL = 1,
  MESSAGE = 2,
  PRIMARY = 3
}

GroupCallMediaType = {
  AUDIO = 1,
  VIDEO = 2
}

PersonalInfo = {
  EMAIL = 0,
  PHONE = 1,
  BIRTHDAY = 2,
  RAW_BIRTHDAY = 3
}

NotificationStatus = {
  NOTIFICATION_ITEM_EXIST = 1,
  TIMELINE_ITEM_EXIST = 2,
  NOTE_GROUP_NEW_ITEM_EXIST = 4,
  TIMELINE_BUDDYGROUP_CHANGED = 8,
  NOTE_ONE_TO_ONE_NEW_ITEM_EXIST = 16,
  ALBUM_ITEM_EXIST = 32,
  TIMELINE_ITEM_DELETED = 64,
  OTOGROUP_ITEM_EXIST = 128,
  GROUPHOME_NEW_ITEM_EXIST = 256,
  GROUPHOME_HIDDEN_ITEM_CHANGED = 512,
  NOTIFICATION_ITEM_CHANGED = 1024,
  BEAD_ITEM_HIDE = 2048,
  BEAD_ITEM_SHOW = 4096
}

NotificationType = {
  APPLE_APNS = 1,
  GOOGLE_C2DM = 2,
  NHN_NNI = 3,
  SKT_AOM = 4,
  MS_MPNS = 5,
  RIM_BIS = 6,
  GOOGLE_GCM = 7,
  NOKIA_NNAPI = 8,
  TIZEN = 9,
  LINE_BOT = 17,
  LINE_WAP = 18,
  APPLE_APNS_VOIP = 19,
  MS_WNS = 20,
  GOOGLE_FCM = 21
}

OpStatus = {
  NORMAL = 0,
  ALERT_DISABLED = 1,
  ALWAYS = 2
}

OpType = {
  END_OF_OPERATION = 0,
  UPDATE_PROFILE = 1,
  UPDATE_SETTINGS = 36,
  NOTIFIED_UPDATE_PROFILE = 2,
  REGISTER_USERID = 3,
  ADD_CONTACT = 4,
  NOTIFIED_ADD_CONTACT = 5,
  BLOCK_CONTACT = 6,
  UNBLOCK_CONTACT = 7,
  NOTIFIED_RECOMMEND_CONTACT = 8,
  CREATE_GROUP = 9,
  UPDATE_GROUP = 10,
  NOTIFIED_UPDATE_GROUP = 11,
  INVITE_INTO_GROUP = 12,
  NOTIFIED_INVITE_INTO_GROUP = 13,
  CANCEL_INVITATION_GROUP = 31,
  NOTIFIED_CANCEL_INVITATION_GROUP = 32,
  LEAVE_GROUP = 14,
  NOTIFIED_LEAVE_GROUP = 15,
  ACCEPT_GROUP_INVITATION = 16,
  NOTIFIED_ACCEPT_GROUP_INVITATION = 17,
  REJECT_GROUP_INVITATION = 34,
  NOTIFIED_REJECT_GROUP_INVITATION = 35,
  KICKOUT_FROM_GROUP = 18,
  NOTIFIED_KICKOUT_FROM_GROUP = 19,
  CREATE_ROOM = 20,
  INVITE_INTO_ROOM = 21,
  NOTIFIED_INVITE_INTO_ROOM = 22,
  LEAVE_ROOM = 23,
  NOTIFIED_LEAVE_ROOM = 24,
  SEND_MESSAGE = 25,
  RECEIVE_MESSAGE = 26,
  SEND_MESSAGE_RECEIPT = 27,
  RECEIVE_MESSAGE_RECEIPT = 28,
  SEND_CONTENT_RECEIPT = 29,
  RECEIVE_ANNOUNCEMENT = 30,
  NOTIFIED_UNREGISTER_USER = 33,
  INVITE_VIA_EMAIL = 38,
  NOTIFIED_REGISTER_USER = 37,
  NOTIFIED_REQUEST_RECOVERY = 39,
  SEND_CHAT_CHECKED = 40,
  SEND_CHAT_REMOVED = 41,
  NOTIFIED_FORCE_SYNC = 42,
  SEND_CONTENT = 43,
  SEND_MESSAGE_MYHOME = 44,
  NOTIFIED_UPDATE_CONTENT_PREVIEW = 45,
  REMOVE_ALL_MESSAGES = 46,
  NOTIFIED_UPDATE_PURCHASES = 47,
  DUMMY = 48,
  UPDATE_CONTACT = 49,
  NOTIFIED_RECEIVED_CALL = 50,
  CANCEL_CALL = 51,
  NOTIFIED_REDIRECT = 52,
  NOTIFIED_CHANNEL_SYNC = 53,
  FAILED_SEND_MESSAGE = 54,
  NOTIFIED_READ_MESSAGE = 55,
  FAILED_EMAIL_CONFIRMATION = 56,
  NOTIFIED_CHAT_CONTENT = 58,
  NOTIFIED_PUSH_NOTICENTER_ITEM = 59,
  NOTIFIED_JOIN_CHAT = 60,
  NOTIFIED_LEAVE_CHAT = 61,
  NOTIFIED_TYPING = 62,
  FRIEND_REQUEST_ACCEPTED = 63,
  DESTROY_MESSAGE = 64,
  NOTIFIED_DESTROY_MESSAGE = 65,
  UPDATE_PUBLICKEYCHAIN = 66,
  NOTIFIED_UPDATE_PUBLICKEYCHAIN = 67,
  NOTIFIED_BLOCK_CONTACT = 68,
  NOTIFIED_UNBLOCK_CONTACT = 69,
  UPDATE_GROUPPREFERENCE = 70,
  NOTIFIED_PAYMENT_EVENT = 71,
  REGISTER_E2EE_PUBLICKEY = 72,
  NOTIFIED_E2EE_KEY_EXCHANGE_REQ = 73,
  NOTIFIED_E2EE_KEY_EXCHANGE_RESP = 74,
  NOTIFIED_E2EE_MESSAGE_RESEND_REQ = 75,
  NOTIFIED_E2EE_MESSAGE_RESEND_RESP = 76,
  NOTIFIED_E2EE_KEY_UPDATE = 77,
  NOTIFIED_BUDDY_UPDATE_PROFILE = 78,
  NOTIFIED_UPDATE_LINEAT_TABS = 79,
  UPDATE_ROOM = 80,
  NOTIFIED_BEACON_DETECTED = 81,
  UPDATE_EXTENDED_PROFILE = 82,
  ADD_FOLLOW = 83,
  NOTIFIED_ADD_FOLLOW = 84,
  DELETE_FOLLOW = 85,
  NOTIFIED_DELETE_FOLLOW = 86,
  UPDATE_TIMELINE_SETTINGS = 87,
  NOTIFIED_FRIEND_REQUEST = 88,
  UPDATE_RINGBACK_TONE = 89,
  NOTIFIED_POSTBACK = 90,
  RECEIVE_READ_WATERMARK = 91,
  NOTIFIED_MESSAGE_DELIVERED = 92,
  NOTIFIED_UPDATE_CHAT_BAR = 93,
  NOTIFIED_CHATAPP_INSTALLED = 94,
  NOTIFIED_CHATAPP_UPDATED = 95,
  NOTIFIED_CHATAPP_NEW_MARK = 96,
  NOTIFIED_CHATAPP_DELETED = 97,
  NOTIFIED_CHATAPP_SYNC = 98,
  NOTIFIED_UPDATE_MESSAGE = 99
}

PayloadType = {
  PAYLOAD_BUY = 101,
  PAYLOAD_CS = 111,
  PAYLOAD_BONUS = 121,
  PAYLOAD_EVENT = 131
}

PaymentPgType = {
  PAYMENT_PG_NONE = 0,
  PAYMENT_PG_AU = 1,
  PAYMENT_PG_AL = 2
}

PaymentType = {
  PAYMENT_APPLE = 1,
  PAYMENT_GOOGLE = 2
}

ProductBannerLinkType = {
  BANNER_LINK_NONE = 0,
  BANNER_LINK_ITEM = 1,
  BANNER_LINK_URL = 2,
  BANNER_LINK_CATEGORY = 3
}

ProductEventType = {
  NO_EVENT = 0,
  CARRIER_ANY = 65537,
  BUDDY_ANY = 131073,
  INSTALL_IOS = 196609,
  INSTALL_ANDROID = 196610,
  MISSION_ANY = 262145,
  MUSTBUY_ANY = 327681
}

StickerResourceType = {
  STATIC = 1,
  ANIMATION = 2,
  SOUND = 3,
  ANIMATION_SOUND = 4,
  POPUP = 5,
  POPUP_SOUND = 6
}

PlaceSearchProvider = {
  GOOGLE = 0,
  BAIDU = 1
}

PointErrorCode = {
  REQUEST_DUPLICATION = 3001,
  INVALID_PARAMETER = 3002,
  NOT_ENOUGH_BALANCE = 3003,
  AUTHENTICATION_FAIL = 3004,
  API_ACCESS_FORBIDDEN = 3005,
  MEMBER_ACCOUNT_NOT_FOUND = 3006,
  SERVICE_ACCOUNT_NOT_FOUND = 3007,
  TRANSACTION_NOT_FOUND = 3008,
  ALREADY_REVERSED_TRANSACTION = 3009,
  MESSAGE_NOT_READABLE = 3010,
  HTTP_REQUEST_METHOD_NOT_SUPPORTED = 3011,
  HTTP_MEDIA_TYPE_NOT_SUPPORTED = 3012,
  NOT_ALLOWED_TO_DEPOSIT = 3013,
  NOT_ALLOWED_TO_PAY = 3014,
  TRANSACTION_ACCESS_FORBIDDEN = 3015,
  INVALID_SERVICE_CONFIGURATION = 4001,
  DCS_COMMUNICATION_FAIL = 5004,
  UPDATE_BALANCE_FAIL = 5007,
  SYSTEM_ERROR = 5999,
  SYSTEM_MAINTENANCE = 5888
}

ProfileAttribute = {
  ALL = 511,
  EMAIL = 1,
  DISPLAY_NAME = 2,
  PHONETIC_NAME = 4,
  PICTURE = 8,
  STATUS_MESSAGE = 16,
  ALLOW_SEARCH_BY_USERID = 32,
  ALLOW_SEARCH_BY_EMAIL = 64,
  BUDDY_STATUS = 128,
  MUSIC_PROFILE = 256
}

PublicType = {
  HIDDEN = 0,
  PUBLIC = 1000
}

RedirectType = {
  NONE = 0,
  EXPIRE_SECOND = 1
}

RegistrationType = {
  PHONE = 0,
  EMAIL_WAP = 1,
  FACEBOOK = 2305,
  SINA = 2306,
  RENREN = 2307,
  FEIXIN = 2308
}

ChatRoomAnnouncementType = {
  MESSAGE = 0,
  NOTE = 1
}

SettingsAttribute = {
  ALL = 2147483647,
  NOTIFICATION_ENABLE = 1,
  NOTIFICATION_MUTE_EXPIRATION = 2,
  NOTIFICATION_NEW_MESSAGE = 4,
  NOTIFICATION_GROUP_INVITATION = 8,
  NOTIFICATION_SHOW_MESSAGE = 16,
  NOTIFICATION_INCOMING_CALL = 32,
  NOTIFICATION_SOUND_MESSAGE = 256,
  NOTIFICATION_SOUND_GROUP = 512,
  NOTIFICATION_DISABLED_WITH_SUB = 65536,
  NOTIFICATION_PAYMENT = 131072,
  PRIVACY_SYNC_CONTACTS = 64,
  PRIVACY_SEARCH_BY_PHONE_NUMBER = 128,
  PRIVACY_SEARCH_BY_USERID = 8192,
  PRIVACY_SEARCH_BY_EMAIL = 16384,
  PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152,
  PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608,
  PRIVACY_ALLOW_FRIEND_REQUEST = 1073741824,
  PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432,
  PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 67108864,
  PRIVACY_AGREE_USE_PAIDCALL = 134217728,
  CONTACT_MY_TICKET = 1024,
  IDENTITY_PROVIDER = 2048,
  IDENTITY_IDENTIFIER = 4096,
  SNS_ACCOUNT = 524288,
  PHONE_REGISTRATION = 1048576,
  PREFERENCE_LOCALE = 32768,
  CUSTOM_MODE = 4194304,
  EMAIL_CONFIRMATION_STATUS = 16777216,
  ACCOUNT_MIGRATION_PINCODE = 268435456,
  ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 536870912,
  SECURITY_CENTER_SETTINGS = 262144
}

SettingsAttributeEx = {
  NOTIFICATION_ENABLE = 0,
  NOTIFICATION_MUTE_EXPIRATION = 1,
  NOTIFICATION_NEW_MESSAGE = 2,
  NOTIFICATION_GROUP_INVITATION = 3,
  NOTIFICATION_SHOW_MESSAGE = 4,
  NOTIFICATION_INCOMING_CALL = 5,
  NOTIFICATION_SOUND_MESSAGE = 8,
  NOTIFICATION_SOUND_GROUP = 9,
  NOTIFICATION_DISABLED_WITH_SUB = 16,
  NOTIFICATION_PAYMENT = 17,
  NOTIFICATION_MENTION = 40,
  NOTIFICATION_THUMBNAIL = 45,
  PRIVACY_SYNC_CONTACTS = 6,
  PRIVACY_SEARCH_BY_PHONE_NUMBER = 7,
  PRIVACY_SEARCH_BY_USERID = 13,
  PRIVACY_SEARCH_BY_EMAIL = 14,
  PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 21,
  PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 23,
  PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME = 35,
  PRIVACY_ALLOW_FRIEND_REQUEST = 30,
  PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 25,
  PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 26,
  PRIVACY_AGREE_USE_PAIDCALL = 27,
  CONTACT_MY_TICKET = 10,
  IDENTITY_PROVIDER = 11,
  IDENTITY_IDENTIFIER = 12,
  SNS_ACCOUNT = 19,
  PHONE_REGISTRATION = 20,
  PREFERENCE_LOCALE = 15,
  CUSTOM_MODE = 22,
  EMAIL_CONFIRMATION_STATUS = 24,
  ACCOUNT_MIGRATION_PINCODE = 28,
  ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 29,
  SECURITY_CENTER_SETTINGS = 18,
  E2EE_ENABLE = 33,
  ENABLE_SOUND_TO_TEXT = 47,
  HITOKOTO_BACKUP_REQUESTED = 34,
  CONTACT_ALLOW_FOLLOWING = 36,
  PRIVACY_ALLOW_NEARBY = 37,
  AGREEMENT_NEARBY = 38,
  AGREEMENT_SQUARE = 39,
  ALLOW_UNREGISTRATION_SECONDARY_DEVICE = 41,
  AGREEMENT_BOT_USE = 42,
  AGREEMENT_SHAKE_FUNCTION = 43,
  AGREEMENT_MOBILE_CONTACT_NAME = 44,
  AGREEMENT_SOUND_TO_TEXT = 46
}

SnsIdType = {
  FACEBOOK = 1,
  SINA = 2,
  RENREN = 3,
  FEIXIN = 4,
  BBM = 5
}

SpammerReason = {
  OTHER = 0,
  ADVERTISING = 1,
  GENDER_HARASSMENT = 2,
  HARASSMENT = 3
}

SyncActionType = {
  SYNC = 0,
  REPORT = 1
}

SpotCategory = {
  UNKNOWN = 0,
  GOURMET = 1,
  BEAUTY = 2,
  TRAVEL = 3,
  SHOPPING = 4,
  ENTERTAINMENT = 5,
  SPORTS = 6,
  TRANSPORT = 7,
  LIFE = 8,
  HOSPITAL = 9,
  FINANCE = 10,
  EDUCATION = 11,
  OTHER = 12,
  ALL = 10000
}

SyncCategory = {
  PROFILE = 0,
  SETTINGS = 1,
  OPS = 2,
  CONTACT = 3,
  RECOMMEND = 4,
  BLOCK = 5,
  GROUP = 6,
  ROOM = 7,
  NOTIFICATION = 8,
  ADDRESS_BOOK = 9
}

TMessageBoxStatus = {
  ACTIVATED = 1,
  UNREAD = 2
}

UniversalNotificationServiceErrorCode = {
  INTERNAL_ERROR = 0,
  INVALID_KEY = 1,
  ILLEGAL_ARGUMENT = 2,
  TOO_MANY_REQUEST = 3,
  AUTHENTICATION_FAILED = 4,
  NO_WRITE_PERMISSION = 5
}

UnregistrationReason = {
  UNREGISTRATION_REASON_UNREGISTER_USER = 1,
  UNREGISTRATION_REASON_UNBIND_DEVICE = 2
}

UserAgeType = {
  OVER = 1,
  UNDER = 2,
  UNDEFINED = 3
}

VerificationMethod = {
  NO_AVAILABLE = 0,
  PIN_VIA_SMS = 1,
  CALLERID_INDIGO = 2,
  PIN_VIA_TTS = 4,
  SKIP = 10
}

VerificationResult = {
  FAILED = 0,
  OK_NOT_REGISTERED_YET = 1,
  OK_REGISTERED_WITH_SAME_DEVICE = 2,
  OK_REGISTERED_WITH_ANOTHER_DEVICE = 3
}

WapInvitationType = {
  REGISTRATION = 1,
  CHAT = 2
}

MediaType = {
  AUDIO = 1,
  VIDEO = 2
}

SQErrorCode = {
  UNKNOWN = 0,
  ILLEGAL_ARGUMENT = 400,
  AUTHENTICATION_FAILURE = 401,
  FORBIDDEN = 403,
  NOT_FOUND = 404,
  REVISION_MISMATCH = 409,
  PRECONDITION_FAILED = 410,
  INTERNAL_ERROR = 500,
  NOT_IMPLEMENTED = 501,
  TRY_AGAIN_LATER = 505
}

SquareEventType = {
  RECEIVE_MESSAGE = 0,
  SEND_MESSAGE = 1,
  NOTIFIED_JOIN_SQUARE_CHAT = 2,
  NOTIFIED_INVITE_INTO_SQUARE_CHAT = 3,
  NOTIFIED_LEAVE_SQUARE_CHAT = 4,
  NOTIFIED_DESTROY_MESSAGE = 5,
  NOTIFIED_MARK_AS_READ = 6,
  NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE = 7,
  NOTIFIED_KICKOUT_FROM_SQUARE = 19,
  NOTIFIED_SHUTDOWN_SQUARE = 18,
  NOTIFIED_DELETE_SQUARE_CHAT = 20,
  NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME = 30,
  NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE = 31,
  NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT = 37,
  NOTIFIED_ADD_BOT = 33,
  NOTIFIED_REMOVE_BOT = 34,
  NOTIFIED_UPDATE_SQUARE = 8,
  NOTIFIED_UPDATE_SQUARE_STATUS = 9,
  NOTIFIED_UPDATE_SQUARE_AUTHORITY = 10,
  NOTIFIED_UPDATE_SQUARE_MEMBER = 11,
  NOTIFIED_UPDATE_SQUARE_CHAT = 12,
  NOTIFIED_UPDATE_SQUARE_CHAT_STATUS = 13,
  NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER = 14,
  NOTIFIED_CREATE_SQUARE_MEMBER = 15,
  NOTIFIED_CREATE_SQUARE_CHAT_MEMBER = 16,
  NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION = 17,
  NOTIFIED_UPDATE_SQUARE_FEATURE_SET = 32,
  NOTIFIED_UPDATE_SQUARE_NOTE_STATUS = 36,
  NOTIFICATION_JOIN_REQUEST = 21,
  NOTIFICATION_JOINED = 22,
  NOTIFICATION_PROMOTED_COADMIN = 23,
  NOTIFICATION_PROMOTED_ADMIN = 24,
  NOTIFICATION_DEMOTED_MEMBER = 25,
  NOTIFICATION_KICKED_OUT = 26,
  NOTIFICATION_SQUARE_DELETE = 27,
  NOTIFICATION_SQUARE_CHAT_DELETE = 28,
  NOTIFICATION_MESSAGE = 29
}

SquareMemberRelationState = {
  NONE = 1,
  BLOCKED = 2
}

SquareFeatureControlState = {
  DISABLED = 1,
  ENABLED = 2
}

BooleanState = {
  NONE = 0,
  OFF = 1,
  ON = 2
}

SquareType = {
  CLOSED = 0,
  OPEN = 1
}

SquareChatType = {
  OPEN = 1,
  SECRET = 2,
  ONE_ON_ONE = 3,
  SQUARE_DEFAULT = 4
}

SquareErrorCode = {
  UNKNOWN = 0,
  INTERNAL_ERROR = 500,
  NOT_IMPLEMENTED = 501,
  TRY_AGAIN_LATER = 503,
  MAINTENANCE = 505,
  ILLEGAL_ARGUMENT = 400,
  AUTHENTICATION_FAILURE = 401,
  FORBIDDEN = 403,
  NOT_FOUND = 404,
  REVISION_MISMATCH = 409,
  PRECONDITION_FAILED = 410
}

SquareChatState = {
  ALIVE = 0,
  DELETED = 1,
  SUSPENDED = 2
}

SquareFeatureSetAttribute = {
  CREATING_SECRET_SQUARE_CHAT = 1,
  INVITING_INTO_OPEN_SQUARE_CHAT = 2
}

SquareMembershipState = {
  JOIN_REQUESTED = 1,
  JOINED = 2,
  REJECTED = 3,
  LEFT = 4,
  KICK_OUT = 5,
  BANNED = 6,
  DELETED = 7
}

SquareChatMemberAttribute = {
  MEMBERSHIP_STATE = 4,
  NOTIFICATION_MESSAGE = 6
}

SquareMemberRole = {
  ADMIN = 1,
  CO_ADMIN = 2,
  MEMBER = 10
}

PreconditionFailedExtraInfo = {
  DUPLICATED_DISPLAY_NAME = 0
}

SquareChatMembershipState = {
  JOINED = 1,
  LEFT = 2
}

FetchDirection = {
  FORWARD = 1,
  BACKWARD = 2
}

SquareAttribute = {
  NAME = 1,
  WELCOME_MESSAGE = 2,
  PROFILE_IMAGE = 3,
  DESCRIPTION = 4,
  SEARCHABLE = 6,
  CATEGORY = 7,
  INVITATION_URL = 8,
  ABLE_TO_USE_INVITATION_URL = 9,
  STATE = 10
}

SquareAuthorityAttribute = {
  UPDATE_SQUARE_PROFILE = 1,
  INVITE_NEW_MEMBER = 2,
  APPROVE_JOIN_REQUEST = 3,
  CREATE_POST = 4,
  CREATE_OPEN_SQUARE_CHAT = 5,
  DELETE_SQUARE_CHAT_OR_POST = 6,
  REMOVE_SQUARE_MEMBER = 7,
  GRANT_ROLE = 8,
  ENABLE_INVITATION_TICKET = 9,
  CREATE_CHAT_ANNOUNCEMENT = 10
}

SquareEventStatus = {
  NORMAL = 1,
  ALERT_DISABLED = 2
}

SuggestDictionaryIncrementStatus = {
  SUCCESS = 0,
  INVALID_REVISION = 1,
  TOO_LARGE_DATA = 2,
  SCHEME_CHANGED = 3,
  RETRY = 4,
  FAIL = 5,
  TOO_OLD_DATA = 6
}

Location = __TObject:new{
  title,
  address,
  latitude,
  longitude,
  phone
}

function Location:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.title = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.address = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.DOUBLE then
        self.latitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.DOUBLE then
        self.longitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.phone = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Location:write(oprot)
  oprot:writeStructBegin('Location')
  if self.title ~= nil then
    oprot:writeFieldBegin('title', TType.STRING, 1)
    oprot:writeString(self.title)
    oprot:writeFieldEnd()
  end
  if self.address ~= nil then
    oprot:writeFieldBegin('address', TType.STRING, 2)
    oprot:writeString(self.address)
    oprot:writeFieldEnd()
  end
  if self.latitude ~= nil then
    oprot:writeFieldBegin('latitude', TType.DOUBLE, 3)
    oprot:writeDouble(self.latitude)
    oprot:writeFieldEnd()
  end
  if self.longitude ~= nil then
    oprot:writeFieldBegin('longitude', TType.DOUBLE, 4)
    oprot:writeDouble(self.longitude)
    oprot:writeFieldEnd()
  end
  if self.phone ~= nil then
    oprot:writeFieldBegin('phone', TType.STRING, 5)
    oprot:writeString(self.phone)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

MessageBoxV2MessageId = __TObject:new{
  deliveredTime,
  messageId
}

function MessageBoxV2MessageId:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.deliveredTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.messageId = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function MessageBoxV2MessageId:write(oprot)
  oprot:writeStructBegin('MessageBoxV2MessageId')
  if self.deliveredTime ~= nil then
    oprot:writeFieldBegin('deliveredTime', TType.I64, 1)
    oprot:writeI64(self.deliveredTime)
    oprot:writeFieldEnd()
  end
  if self.messageId ~= nil then
    oprot:writeFieldBegin('messageId', TType.I64, 2)
    oprot:writeI64(self.messageId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

MessageCommitResult = __TObject:new{
  requestId,
  state,
  messageStoreRequestId,
  messageIds,
  receiverCount,
  successCount,
  failCount,
  blockCount,
  unregisteredCount,
  unrelatedCount,
  errorDescription
}

function MessageCommitResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.state = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.messageStoreRequestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.messageIds = {}
        local _etype3, _size0 = iprot:readListBegin()
        for _i=1,_size0 do
          local _elem4 = iprot:readString()
          table.insert(self.messageIds, _elem4)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I64 then
        self.receiverCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I64 then
        self.successCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I64 then
        self.failCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I64 then
        self.blockCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I64 then
        self.unregisteredCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.I64 then
        self.unrelatedCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.errorDescription = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function MessageCommitResult:write(oprot)
  oprot:writeStructBegin('MessageCommitResult')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.state ~= nil then
    oprot:writeFieldBegin('state', TType.I32, 2)
    oprot:writeI32(self.state)
    oprot:writeFieldEnd()
  end
  if self.messageStoreRequestId ~= nil then
    oprot:writeFieldBegin('messageStoreRequestId', TType.STRING, 3)
    oprot:writeString(self.messageStoreRequestId)
    oprot:writeFieldEnd()
  end
  if self.messageIds ~= nil then
    oprot:writeFieldBegin('messageIds', TType.LIST, 4)
    oprot:writeListBegin(TType.STRING, #self.messageIds)
    for _,iter5 in ipairs(self.messageIds) do
      oprot:writeString(iter5)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.receiverCount ~= nil then
    oprot:writeFieldBegin('receiverCount', TType.I64, 11)
    oprot:writeI64(self.receiverCount)
    oprot:writeFieldEnd()
  end
  if self.successCount ~= nil then
    oprot:writeFieldBegin('successCount', TType.I64, 12)
    oprot:writeI64(self.successCount)
    oprot:writeFieldEnd()
  end
  if self.failCount ~= nil then
    oprot:writeFieldBegin('failCount', TType.I64, 13)
    oprot:writeI64(self.failCount)
    oprot:writeFieldEnd()
  end
  if self.blockCount ~= nil then
    oprot:writeFieldBegin('blockCount', TType.I64, 14)
    oprot:writeI64(self.blockCount)
    oprot:writeFieldEnd()
  end
  if self.unregisteredCount ~= nil then
    oprot:writeFieldBegin('unregisteredCount', TType.I64, 15)
    oprot:writeI64(self.unregisteredCount)
    oprot:writeFieldEnd()
  end
  if self.unrelatedCount ~= nil then
    oprot:writeFieldBegin('unrelatedCount', TType.I64, 16)
    oprot:writeI64(self.unrelatedCount)
    oprot:writeFieldEnd()
  end
  if self.errorDescription ~= nil then
    oprot:writeFieldBegin('errorDescription', TType.STRING, 21)
    oprot:writeString(self.errorDescription)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CallHost = __TObject:new{
  host,
  port,
  zone
}

function CallHost:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.host = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.port = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.zone = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CallHost:write(oprot)
  oprot:writeStructBegin('CallHost')
  if self.host ~= nil then
    oprot:writeFieldBegin('host', TType.STRING, 1)
    oprot:writeString(self.host)
    oprot:writeFieldEnd()
  end
  if self.port ~= nil then
    oprot:writeFieldBegin('port', TType.I32, 2)
    oprot:writeI32(self.port)
    oprot:writeFieldEnd()
  end
  if self.zone ~= nil then
    oprot:writeFieldBegin('zone', TType.STRING, 3)
    oprot:writeString(self.zone)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AgeCheckDocomoResult = __TObject:new{
  authUrl,
  userAgeType
}

function AgeCheckDocomoResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.userAgeType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AgeCheckDocomoResult:write(oprot)
  oprot:writeStructBegin('AgeCheckDocomoResult')
  if self.authUrl ~= nil then
    oprot:writeFieldBegin('authUrl', TType.STRING, 1)
    oprot:writeString(self.authUrl)
    oprot:writeFieldEnd()
  end
  if self.userAgeType ~= nil then
    oprot:writeFieldBegin('userAgeType', TType.I32, 2)
    oprot:writeI32(self.userAgeType)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AgeCheckRequestResult = __TObject:new{
  authUrl,
  sessionId
}

function AgeCheckRequestResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.sessionId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AgeCheckRequestResult:write(oprot)
  oprot:writeStructBegin('AgeCheckRequestResult')
  if self.authUrl ~= nil then
    oprot:writeFieldBegin('authUrl', TType.STRING, 1)
    oprot:writeString(self.authUrl)
    oprot:writeFieldEnd()
  end
  if self.sessionId ~= nil then
    oprot:writeFieldBegin('sessionId', TType.STRING, 2)
    oprot:writeString(self.sessionId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TextMessageAnnouncementContents = __TObject:new{
  messageId,
  text,
  senderSquareMemberMid,
  createdAt
}

function TextMessageAnnouncementContents:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.messageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.text = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.senderSquareMemberMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I64 then
        self.createdAt = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TextMessageAnnouncementContents:write(oprot)
  oprot:writeStructBegin('TextMessageAnnouncementContents')
  if self.messageId ~= nil then
    oprot:writeFieldBegin('messageId', TType.STRING, 1)
    oprot:writeString(self.messageId)
    oprot:writeFieldEnd()
  end
  if self.text ~= nil then
    oprot:writeFieldBegin('text', TType.STRING, 2)
    oprot:writeString(self.text)
    oprot:writeFieldEnd()
  end
  if self.senderSquareMemberMid ~= nil then
    oprot:writeFieldBegin('senderSquareMemberMid', TType.STRING, 3)
    oprot:writeString(self.senderSquareMemberMid)
    oprot:writeFieldEnd()
  end
  if self.createdAt ~= nil then
    oprot:writeFieldBegin('createdAt', TType.I64, 4)
    oprot:writeI64(self.createdAt)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareChatAnnouncementContents = __TObject:new{
  textMessageAnnouncementContents
}

function SquareChatAnnouncementContents:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.textMessageAnnouncementContents = TextMessageAnnouncementContents:new{}
        self.textMessageAnnouncementContents:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareChatAnnouncementContents:write(oprot)
  oprot:writeStructBegin('SquareChatAnnouncementContents')
  if self.textMessageAnnouncementContents ~= nil then
    oprot:writeFieldBegin('textMessageAnnouncementContents', TType.STRUCT, 1)
    self.textMessageAnnouncementContents:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareChatAnnouncement = __TObject:new{
  announcementSeq,
  type,
  contents
}

function SquareChatAnnouncement:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.announcementSeq = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.contents = SquareChatAnnouncementContents:new{}
        self.contents:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareChatAnnouncement:write(oprot)
  oprot:writeStructBegin('SquareChatAnnouncement')
  if self.announcementSeq ~= nil then
    oprot:writeFieldBegin('announcementSeq', TType.I64, 1)
    oprot:writeI64(self.announcementSeq)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 2)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.contents ~= nil then
    oprot:writeFieldBegin('contents', TType.STRUCT, 3)
    self.contents:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Announcement = __TObject:new{
  index,
  forceUpdate,
  title,
  text,
  createdTime,
  pictureUrl,
  thumbnailUrl
}

function Announcement:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.index = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.BOOL then
        self.forceUpdate = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.title = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.text = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRING then
        self.pictureUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.thumbnailUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Announcement:write(oprot)
  oprot:writeStructBegin('Announcement')
  if self.index ~= nil then
    oprot:writeFieldBegin('index', TType.I32, 1)
    oprot:writeI32(self.index)
    oprot:writeFieldEnd()
  end
  if self.forceUpdate ~= nil then
    oprot:writeFieldBegin('forceUpdate', TType.BOOL, 10)
    oprot:writeBool(self.forceUpdate)
    oprot:writeFieldEnd()
  end
  if self.title ~= nil then
    oprot:writeFieldBegin('title', TType.STRING, 11)
    oprot:writeString(self.title)
    oprot:writeFieldEnd()
  end
  if self.text ~= nil then
    oprot:writeFieldBegin('text', TType.STRING, 12)
    oprot:writeString(self.text)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 13)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.pictureUrl ~= nil then
    oprot:writeFieldBegin('pictureUrl', TType.STRING, 14)
    oprot:writeString(self.pictureUrl)
    oprot:writeFieldEnd()
  end
  if self.thumbnailUrl ~= nil then
    oprot:writeFieldBegin('thumbnailUrl', TType.STRING, 15)
    oprot:writeString(self.thumbnailUrl)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelProvider = __TObject:new{
  name
}

function ChannelProvider:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelProvider:write(oprot)
  oprot:writeStructBegin('ChannelProvider')
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 1)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

E2EEPublicKey = __TObject:new{
  version,
  keyId,
  keyData,
  createdTime
}

function E2EEPublicKey:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.version = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.keyId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.keyData = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function E2EEPublicKey:write(oprot)
  oprot:writeStructBegin('E2EEPublicKey')
  if self.version ~= nil then
    oprot:writeFieldBegin('version', TType.I32, 1)
    oprot:writeI32(self.version)
    oprot:writeFieldEnd()
  end
  if self.keyId ~= nil then
    oprot:writeFieldBegin('keyId', TType.I32, 2)
    oprot:writeI32(self.keyId)
    oprot:writeFieldEnd()
  end
  if self.keyData ~= nil then
    oprot:writeFieldBegin('keyData', TType.STRING, 4)
    oprot:writeString(self.keyData)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 5)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelDomain = __TObject:new{
  host,
  removed
}

function ChannelDomain:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.host = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.removed = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelDomain:write(oprot)
  oprot:writeStructBegin('ChannelDomain')
  if self.host ~= nil then
    oprot:writeFieldBegin('host', TType.STRING, 1)
    oprot:writeString(self.host)
    oprot:writeFieldEnd()
  end
  if self.removed ~= nil then
    oprot:writeFieldBegin('removed', TType.BOOL, 2)
    oprot:writeBool(self.removed)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

E2EENegotiationResult = __TObject:new{
  allowedTypes,
  publicKey
}

function E2EENegotiationResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.SET then
        self.allowedTypes = {}
        local _etype9, _size6 = iprot:readSetBegin()
        for _i=1,_size6 do
          local _elem10 = iprot:readI32()
          self.allowedTypes[_elem10] = _elem10
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.publicKey = E2EEPublicKey:new{}
        self.publicKey:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function E2EENegotiationResult:write(oprot)
  oprot:writeStructBegin('E2EENegotiationResult')
  if self.allowedTypes ~= nil then
    oprot:writeFieldBegin('allowedTypes', TType.SET, 1)
    oprot:writeSetBegin(TType.I32, ttable_size(self.allowedTypes))
    for iter11,_ in pairs(self.allowedTypes) do
      oprot:writeI32(iter11)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.publicKey ~= nil then
    oprot:writeFieldBegin('publicKey', TType.STRUCT, 2)
    self.publicKey:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

OTPResult = __TObject:new{
  otpId,
  otp
}

function OTPResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.otpId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.otp = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function OTPResult:write(oprot)
  oprot:writeStructBegin('OTPResult')
  if self.otpId ~= nil then
    oprot:writeFieldBegin('otpId', TType.STRING, 1)
    oprot:writeString(self.otpId)
    oprot:writeFieldEnd()
  end
  if self.otp ~= nil then
    oprot:writeFieldBegin('otp', TType.STRING, 2)
    oprot:writeString(self.otp)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Square = __TObject:new{
  mid,
  name,
  welcomeMessage,
  profileImageObsHash,
  desc,
  searchable,
  type,
  categoryID,
  invitationURL,
  revision,
  ableToUseInvitationTicket,
  state
}

function Square:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.welcomeMessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.profileImageObsHash = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.desc = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.searchable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I32 then
        self.categoryID = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.invitationURL = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.BOOL then
        self.ableToUseInvitationTicket = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.state = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Square:write(oprot)
  oprot:writeStructBegin('Square')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 2)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.welcomeMessage ~= nil then
    oprot:writeFieldBegin('welcomeMessage', TType.STRING, 3)
    oprot:writeString(self.welcomeMessage)
    oprot:writeFieldEnd()
  end
  if self.profileImageObsHash ~= nil then
    oprot:writeFieldBegin('profileImageObsHash', TType.STRING, 4)
    oprot:writeString(self.profileImageObsHash)
    oprot:writeFieldEnd()
  end
  if self.desc ~= nil then
    oprot:writeFieldBegin('desc', TType.STRING, 5)
    oprot:writeString(self.desc)
    oprot:writeFieldEnd()
  end
  if self.searchable ~= nil then
    oprot:writeFieldBegin('searchable', TType.BOOL, 6)
    oprot:writeBool(self.searchable)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 7)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.categoryID ~= nil then
    oprot:writeFieldBegin('categoryID', TType.I32, 8)
    oprot:writeI32(self.categoryID)
    oprot:writeFieldEnd()
  end
  if self.invitationURL ~= nil then
    oprot:writeFieldBegin('invitationURL', TType.STRING, 9)
    oprot:writeString(self.invitationURL)
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 10)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.ableToUseInvitationTicket ~= nil then
    oprot:writeFieldBegin('ableToUseInvitationTicket', TType.BOOL, 11)
    oprot:writeBool(self.ableToUseInvitationTicket)
    oprot:writeFieldEnd()
  end
  if self.state ~= nil then
    oprot:writeFieldBegin('state', TType.I32, 12)
    oprot:writeI32(self.state)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareAuthority = __TObject:new{
  squareMid,
  updateSquareProfile,
  inviteNewMember,
  approveJoinRequest,
  createPost,
  createOpenSquareChat,
  deleteSquareChatOrPost,
  removeSquareMember,
  grantRole,
  enableInvitationTicket,
  revision
}

function SquareAuthority:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.updateSquareProfile = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.inviteNewMember = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.approveJoinRequest = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.createPost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.createOpenSquareChat = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.deleteSquareChatOrPost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I32 then
        self.removeSquareMember = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.I32 then
        self.grantRole = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.enableInvitationTicket = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareAuthority:write(oprot)
  oprot:writeStructBegin('SquareAuthority')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 1)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.updateSquareProfile ~= nil then
    oprot:writeFieldBegin('updateSquareProfile', TType.I32, 2)
    oprot:writeI32(self.updateSquareProfile)
    oprot:writeFieldEnd()
  end
  if self.inviteNewMember ~= nil then
    oprot:writeFieldBegin('inviteNewMember', TType.I32, 3)
    oprot:writeI32(self.inviteNewMember)
    oprot:writeFieldEnd()
  end
  if self.approveJoinRequest ~= nil then
    oprot:writeFieldBegin('approveJoinRequest', TType.I32, 4)
    oprot:writeI32(self.approveJoinRequest)
    oprot:writeFieldEnd()
  end
  if self.createPost ~= nil then
    oprot:writeFieldBegin('createPost', TType.I32, 5)
    oprot:writeI32(self.createPost)
    oprot:writeFieldEnd()
  end
  if self.createOpenSquareChat ~= nil then
    oprot:writeFieldBegin('createOpenSquareChat', TType.I32, 6)
    oprot:writeI32(self.createOpenSquareChat)
    oprot:writeFieldEnd()
  end
  if self.deleteSquareChatOrPost ~= nil then
    oprot:writeFieldBegin('deleteSquareChatOrPost', TType.I32, 7)
    oprot:writeI32(self.deleteSquareChatOrPost)
    oprot:writeFieldEnd()
  end
  if self.removeSquareMember ~= nil then
    oprot:writeFieldBegin('removeSquareMember', TType.I32, 8)
    oprot:writeI32(self.removeSquareMember)
    oprot:writeFieldEnd()
  end
  if self.grantRole ~= nil then
    oprot:writeFieldBegin('grantRole', TType.I32, 9)
    oprot:writeI32(self.grantRole)
    oprot:writeFieldEnd()
  end
  if self.enableInvitationTicket ~= nil then
    oprot:writeFieldBegin('enableInvitationTicket', TType.I32, 10)
    oprot:writeI32(self.enableInvitationTicket)
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 11)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquarePreference = __TObject:new{
  favoriteTimestamp,
  notiForNewJoinRequest
}

function SquarePreference:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.favoriteTimestamp = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.notiForNewJoinRequest = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquarePreference:write(oprot)
  oprot:writeStructBegin('SquarePreference')
  if self.favoriteTimestamp ~= nil then
    oprot:writeFieldBegin('favoriteTimestamp', TType.I64, 1)
    oprot:writeI64(self.favoriteTimestamp)
    oprot:writeFieldEnd()
  end
  if self.notiForNewJoinRequest ~= nil then
    oprot:writeFieldBegin('notiForNewJoinRequest', TType.BOOL, 2)
    oprot:writeBool(self.notiForNewJoinRequest)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareMember = __TObject:new{
  squareMemberMid,
  squareMid,
  displayName,
  profileImageObsHash,
  ableToReceiveMessage,
  membershipState,
  role,
  revision,
  preference,
  joinMessage
}

function SquareMember:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMemberMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.displayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.profileImageObsHash = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.ableToReceiveMessage = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.membershipState = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I32 then
        self.role = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRUCT then
        self.preference = SquarePreference:new{}
        self.preference:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.joinMessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareMember:write(oprot)
  oprot:writeStructBegin('SquareMember')
  if self.squareMemberMid ~= nil then
    oprot:writeFieldBegin('squareMemberMid', TType.STRING, 1)
    oprot:writeString(self.squareMemberMid)
    oprot:writeFieldEnd()
  end
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 2)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRING, 3)
    oprot:writeString(self.displayName)
    oprot:writeFieldEnd()
  end
  if self.profileImageObsHash ~= nil then
    oprot:writeFieldBegin('profileImageObsHash', TType.STRING, 4)
    oprot:writeString(self.profileImageObsHash)
    oprot:writeFieldEnd()
  end
  if self.ableToReceiveMessage ~= nil then
    oprot:writeFieldBegin('ableToReceiveMessage', TType.BOOL, 5)
    oprot:writeBool(self.ableToReceiveMessage)
    oprot:writeFieldEnd()
  end
  if self.membershipState ~= nil then
    oprot:writeFieldBegin('membershipState', TType.I32, 7)
    oprot:writeI32(self.membershipState)
    oprot:writeFieldEnd()
  end
  if self.role ~= nil then
    oprot:writeFieldBegin('role', TType.I32, 8)
    oprot:writeI32(self.role)
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 9)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.preference ~= nil then
    oprot:writeFieldBegin('preference', TType.STRUCT, 10)
    self.preference:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.joinMessage ~= nil then
    oprot:writeFieldBegin('joinMessage', TType.STRING, 11)
    oprot:writeString(self.joinMessage)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareMemberRelation = __TObject:new{
  state,
  revision
}

function SquareMemberRelation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.state = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareMemberRelation:write(oprot)
  oprot:writeStructBegin('SquareMemberRelation')
  if self.state ~= nil then
    oprot:writeFieldBegin('state', TType.I32, 1)
    oprot:writeI32(self.state)
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 2)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareFeature = __TObject:new{
  controlState,
  booleanValue
}

function SquareFeature:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.controlState = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.booleanValue = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareFeature:write(oprot)
  oprot:writeStructBegin('SquareFeature')
  if self.controlState ~= nil then
    oprot:writeFieldBegin('controlState', TType.I32, 1)
    oprot:writeI32(self.controlState)
    oprot:writeFieldEnd()
  end
  if self.booleanValue ~= nil then
    oprot:writeFieldBegin('booleanValue', TType.I32, 2)
    oprot:writeI32(self.booleanValue)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareFeatureSet = __TObject:new{
  squareMid,
  revision,
  creatingSecretSquareChat,
  invitingIntoOpenSquareChat
}

function SquareFeatureSet:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRUCT then
        self.creatingSecretSquareChat = SquareFeature:new{}
        self.creatingSecretSquareChat:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRUCT then
        self.invitingIntoOpenSquareChat = SquareFeature:new{}
        self.invitingIntoOpenSquareChat:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareFeatureSet:write(oprot)
  oprot:writeStructBegin('SquareFeatureSet')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 1)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 2)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.creatingSecretSquareChat ~= nil then
    oprot:writeFieldBegin('creatingSecretSquareChat', TType.STRUCT, 11)
    self.creatingSecretSquareChat:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.invitingIntoOpenSquareChat ~= nil then
    oprot:writeFieldBegin('invitingIntoOpenSquareChat', TType.STRUCT, 12)
    self.invitingIntoOpenSquareChat:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareStatus = __TObject:new{
  memberCount,
  joinRequestCount,
  lastJoinRequestAt,
  openChatCount
}

function SquareStatus:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.memberCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.joinRequestCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.lastJoinRequestAt = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.openChatCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareStatus:write(oprot)
  oprot:writeStructBegin('SquareStatus')
  if self.memberCount ~= nil then
    oprot:writeFieldBegin('memberCount', TType.I32, 1)
    oprot:writeI32(self.memberCount)
    oprot:writeFieldEnd()
  end
  if self.joinRequestCount ~= nil then
    oprot:writeFieldBegin('joinRequestCount', TType.I32, 2)
    oprot:writeI32(self.joinRequestCount)
    oprot:writeFieldEnd()
  end
  if self.lastJoinRequestAt ~= nil then
    oprot:writeFieldBegin('lastJoinRequestAt', TType.I64, 3)
    oprot:writeI64(self.lastJoinRequestAt)
    oprot:writeFieldEnd()
  end
  if self.openChatCount ~= nil then
    oprot:writeFieldBegin('openChatCount', TType.I32, 4)
    oprot:writeI32(self.openChatCount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareChat = __TObject:new{
  squareChatMid,
  squareMid,
  type,
  name,
  chatImageObsHash,
  squareChatRevision,
  maxMemberCount,
  state
}

function SquareChat:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.chatImageObsHash = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I64 then
        self.squareChatRevision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.maxMemberCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I32 then
        self.state = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareChat:write(oprot)
  oprot:writeStructBegin('SquareChat')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 2)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 3)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 4)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.chatImageObsHash ~= nil then
    oprot:writeFieldBegin('chatImageObsHash', TType.STRING, 5)
    oprot:writeString(self.chatImageObsHash)
    oprot:writeFieldEnd()
  end
  if self.squareChatRevision ~= nil then
    oprot:writeFieldBegin('squareChatRevision', TType.I64, 6)
    oprot:writeI64(self.squareChatRevision)
    oprot:writeFieldEnd()
  end
  if self.maxMemberCount ~= nil then
    oprot:writeFieldBegin('maxMemberCount', TType.I32, 7)
    oprot:writeI32(self.maxMemberCount)
    oprot:writeFieldEnd()
  end
  if self.state ~= nil then
    oprot:writeFieldBegin('state', TType.I32, 8)
    oprot:writeI32(self.state)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NoteStatus = __TObject:new{
  noteCount,
  latestCreatedAt
}

function NoteStatus:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.noteCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.latestCreatedAt = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NoteStatus:write(oprot)
  oprot:writeStructBegin('NoteStatus')
  if self.noteCount ~= nil then
    oprot:writeFieldBegin('noteCount', TType.I32, 1)
    oprot:writeI32(self.noteCount)
    oprot:writeFieldEnd()
  end
  if self.latestCreatedAt ~= nil then
    oprot:writeFieldBegin('latestCreatedAt', TType.I64, 2)
    oprot:writeI64(self.latestCreatedAt)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareInfo = __TObject:new{
  square,
  squareStatus,
  squareNoteStatus
}

function SquareInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.square = Square:new{}
        self.square:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.squareStatus = SquareStatus:new{}
        self.squareStatus:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.squareNoteStatus = NoteStatus:new{}
        self.squareNoteStatus:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareInfo:write(oprot)
  oprot:writeStructBegin('SquareInfo')
  if self.square ~= nil then
    oprot:writeFieldBegin('square', TType.STRUCT, 1)
    self.square:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareStatus ~= nil then
    oprot:writeFieldBegin('squareStatus', TType.STRUCT, 2)
    self.squareStatus:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareNoteStatus ~= nil then
    oprot:writeFieldBegin('squareNoteStatus', TType.STRUCT, 3)
    self.squareNoteStatus:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BotUseInfo = __TObject:new{
  botUseAgreementAccepted,
  botInFriends,
  primaryApplication,
  locale
}

function BotUseInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.botUseAgreementAccepted = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.botInFriends = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.primaryApplication = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.locale = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BotUseInfo:write(oprot)
  oprot:writeStructBegin('BotUseInfo')
  if self.botUseAgreementAccepted ~= nil then
    oprot:writeFieldBegin('botUseAgreementAccepted', TType.BOOL, 1)
    oprot:writeBool(self.botUseAgreementAccepted)
    oprot:writeFieldEnd()
  end
  if self.botInFriends ~= nil then
    oprot:writeFieldBegin('botInFriends', TType.BOOL, 2)
    oprot:writeBool(self.botInFriends)
    oprot:writeFieldEnd()
  end
  if self.primaryApplication ~= nil then
    oprot:writeFieldBegin('primaryApplication', TType.STRING, 3)
    oprot:writeString(self.primaryApplication)
    oprot:writeFieldEnd()
  end
  if self.locale ~= nil then
    oprot:writeFieldBegin('locale', TType.STRING, 4)
    oprot:writeString(self.locale)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PaidCallAdCountry = __TObject:new{
  countryCode,
  rateDivision
}

function PaidCallAdCountry:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.countryCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.rateDivision = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PaidCallAdCountry:write(oprot)
  oprot:writeStructBegin('PaidCallAdCountry')
  if self.countryCode ~= nil then
    oprot:writeFieldBegin('countryCode', TType.STRING, 1)
    oprot:writeString(self.countryCode)
    oprot:writeFieldEnd()
  end
  if self.rateDivision ~= nil then
    oprot:writeFieldBegin('rateDivision', TType.STRING, 2)
    oprot:writeString(self.rateDivision)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PaidCallAdResult = __TObject:new{
  adRemains
}

function PaidCallAdResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.adRemains = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PaidCallAdResult:write(oprot)
  oprot:writeStructBegin('PaidCallAdResult')
  if self.adRemains ~= nil then
    oprot:writeFieldBegin('adRemains', TType.I32, 1)
    oprot:writeI32(self.adRemains)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PaidCallBalance = __TObject:new{
  productType,
  productName,
  unit,
  limitedPaidBalance,
  limitedFreeBalance,
  unlimitedPaidBalance,
  unlimitedFreeBalance,
  startTime,
  endTime,
  autopayEnabled
}

function PaidCallBalance:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.productType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.productName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.unit = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.limitedPaidBalance = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.limitedFreeBalance = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.unlimitedPaidBalance = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.unlimitedFreeBalance = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I64 then
        self.startTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.I64 then
        self.endTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.BOOL then
        self.autopayEnabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PaidCallBalance:write(oprot)
  oprot:writeStructBegin('PaidCallBalance')
  if self.productType ~= nil then
    oprot:writeFieldBegin('productType', TType.I32, 1)
    oprot:writeI32(self.productType)
    oprot:writeFieldEnd()
  end
  if self.productName ~= nil then
    oprot:writeFieldBegin('productName', TType.STRING, 2)
    oprot:writeString(self.productName)
    oprot:writeFieldEnd()
  end
  if self.unit ~= nil then
    oprot:writeFieldBegin('unit', TType.STRING, 3)
    oprot:writeString(self.unit)
    oprot:writeFieldEnd()
  end
  if self.limitedPaidBalance ~= nil then
    oprot:writeFieldBegin('limitedPaidBalance', TType.I32, 4)
    oprot:writeI32(self.limitedPaidBalance)
    oprot:writeFieldEnd()
  end
  if self.limitedFreeBalance ~= nil then
    oprot:writeFieldBegin('limitedFreeBalance', TType.I32, 5)
    oprot:writeI32(self.limitedFreeBalance)
    oprot:writeFieldEnd()
  end
  if self.unlimitedPaidBalance ~= nil then
    oprot:writeFieldBegin('unlimitedPaidBalance', TType.I32, 6)
    oprot:writeI32(self.unlimitedPaidBalance)
    oprot:writeFieldEnd()
  end
  if self.unlimitedFreeBalance ~= nil then
    oprot:writeFieldBegin('unlimitedFreeBalance', TType.I32, 7)
    oprot:writeI32(self.unlimitedFreeBalance)
    oprot:writeFieldEnd()
  end
  if self.startTime ~= nil then
    oprot:writeFieldBegin('startTime', TType.I64, 8)
    oprot:writeI64(self.startTime)
    oprot:writeFieldEnd()
  end
  if self.endTime ~= nil then
    oprot:writeFieldBegin('endTime', TType.I64, 9)
    oprot:writeI64(self.endTime)
    oprot:writeFieldEnd()
  end
  if self.autopayEnabled ~= nil then
    oprot:writeFieldBegin('autopayEnabled', TType.BOOL, 10)
    oprot:writeBool(self.autopayEnabled)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PaidCallCurrencyExchangeRate = __TObject:new{
  currencyCode,
  currencyName,
  currencySign,
  preferred,
  coinRate,
  creditRate
}

function PaidCallCurrencyExchangeRate:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.currencyCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.currencyName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.currencySign = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.preferred = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.coinRate = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.creditRate = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PaidCallCurrencyExchangeRate:write(oprot)
  oprot:writeStructBegin('PaidCallCurrencyExchangeRate')
  if self.currencyCode ~= nil then
    oprot:writeFieldBegin('currencyCode', TType.STRING, 1)
    oprot:writeString(self.currencyCode)
    oprot:writeFieldEnd()
  end
  if self.currencyName ~= nil then
    oprot:writeFieldBegin('currencyName', TType.STRING, 2)
    oprot:writeString(self.currencyName)
    oprot:writeFieldEnd()
  end
  if self.currencySign ~= nil then
    oprot:writeFieldBegin('currencySign', TType.STRING, 3)
    oprot:writeString(self.currencySign)
    oprot:writeFieldEnd()
  end
  if self.preferred ~= nil then
    oprot:writeFieldBegin('preferred', TType.BOOL, 4)
    oprot:writeBool(self.preferred)
    oprot:writeFieldEnd()
  end
  if self.coinRate ~= nil then
    oprot:writeFieldBegin('coinRate', TType.STRING, 5)
    oprot:writeString(self.coinRate)
    oprot:writeFieldEnd()
  end
  if self.creditRate ~= nil then
    oprot:writeFieldBegin('creditRate', TType.STRING, 6)
    oprot:writeString(self.creditRate)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ExtendedProfileBirthday = __TObject:new{
  year,
  yearPrivacyLevelType,
  yearEnabled,
  day,
  dayPrivacyLevelType,
  dayEnabled
}

function ExtendedProfileBirthday:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.year = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.yearPrivacyLevelType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.yearEnabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.day = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.dayPrivacyLevelType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.BOOL then
        self.dayEnabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ExtendedProfileBirthday:write(oprot)
  oprot:writeStructBegin('ExtendedProfileBirthday')
  if self.year ~= nil then
    oprot:writeFieldBegin('year', TType.STRING, 1)
    oprot:writeString(self.year)
    oprot:writeFieldEnd()
  end
  if self.yearPrivacyLevelType ~= nil then
    oprot:writeFieldBegin('yearPrivacyLevelType', TType.I32, 2)
    oprot:writeI32(self.yearPrivacyLevelType)
    oprot:writeFieldEnd()
  end
  if self.yearEnabled ~= nil then
    oprot:writeFieldBegin('yearEnabled', TType.BOOL, 3)
    oprot:writeBool(self.yearEnabled)
    oprot:writeFieldEnd()
  end
  if self.day ~= nil then
    oprot:writeFieldBegin('day', TType.STRING, 5)
    oprot:writeString(self.day)
    oprot:writeFieldEnd()
  end
  if self.dayPrivacyLevelType ~= nil then
    oprot:writeFieldBegin('dayPrivacyLevelType', TType.I32, 6)
    oprot:writeI32(self.dayPrivacyLevelType)
    oprot:writeFieldEnd()
  end
  if self.dayEnabled ~= nil then
    oprot:writeFieldBegin('dayEnabled', TType.BOOL, 7)
    oprot:writeBool(self.dayEnabled)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ExtendedProfile = __TObject:new{
  birthday
}

function ExtendedProfile:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.birthday = ExtendedProfileBirthday:new{}
        self.birthday:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ExtendedProfile:write(oprot)
  oprot:writeStructBegin('ExtendedProfile')
  if self.birthday ~= nil then
    oprot:writeFieldBegin('birthday', TType.STRUCT, 1)
    self.birthday:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PaidCallDialing = __TObject:new{
  type,
  dialedNumber,
  serviceDomain,
  productType,
  productName,
  multipleProduct,
  callerIdStatus,
  balance,
  unit,
  rate,
  displayCode,
  calledNumber,
  calleeNationalNumber,
  calleeCallingCode,
  rateDivision,
  adMaxMin,
  adRemains,
  adSessionId
}

function PaidCallDialing:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.dialedNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.serviceDomain = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.productType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.productName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.multipleProduct = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.callerIdStatus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.balance = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.unit = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.rate = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRING then
        self.displayCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRING then
        self.calledNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.calleeNationalNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.STRING then
        self.calleeCallingCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.STRING then
        self.rateDivision = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I32 then
        self.adMaxMin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I32 then
        self.adRemains = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.adSessionId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PaidCallDialing:write(oprot)
  oprot:writeStructBegin('PaidCallDialing')
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 1)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.dialedNumber ~= nil then
    oprot:writeFieldBegin('dialedNumber', TType.STRING, 2)
    oprot:writeString(self.dialedNumber)
    oprot:writeFieldEnd()
  end
  if self.serviceDomain ~= nil then
    oprot:writeFieldBegin('serviceDomain', TType.STRING, 3)
    oprot:writeString(self.serviceDomain)
    oprot:writeFieldEnd()
  end
  if self.productType ~= nil then
    oprot:writeFieldBegin('productType', TType.I32, 4)
    oprot:writeI32(self.productType)
    oprot:writeFieldEnd()
  end
  if self.productName ~= nil then
    oprot:writeFieldBegin('productName', TType.STRING, 5)
    oprot:writeString(self.productName)
    oprot:writeFieldEnd()
  end
  if self.multipleProduct ~= nil then
    oprot:writeFieldBegin('multipleProduct', TType.BOOL, 6)
    oprot:writeBool(self.multipleProduct)
    oprot:writeFieldEnd()
  end
  if self.callerIdStatus ~= nil then
    oprot:writeFieldBegin('callerIdStatus', TType.I32, 7)
    oprot:writeI32(self.callerIdStatus)
    oprot:writeFieldEnd()
  end
  if self.balance ~= nil then
    oprot:writeFieldBegin('balance', TType.I32, 10)
    oprot:writeI32(self.balance)
    oprot:writeFieldEnd()
  end
  if self.unit ~= nil then
    oprot:writeFieldBegin('unit', TType.STRING, 11)
    oprot:writeString(self.unit)
    oprot:writeFieldEnd()
  end
  if self.rate ~= nil then
    oprot:writeFieldBegin('rate', TType.I32, 12)
    oprot:writeI32(self.rate)
    oprot:writeFieldEnd()
  end
  if self.displayCode ~= nil then
    oprot:writeFieldBegin('displayCode', TType.STRING, 13)
    oprot:writeString(self.displayCode)
    oprot:writeFieldEnd()
  end
  if self.calledNumber ~= nil then
    oprot:writeFieldBegin('calledNumber', TType.STRING, 14)
    oprot:writeString(self.calledNumber)
    oprot:writeFieldEnd()
  end
  if self.calleeNationalNumber ~= nil then
    oprot:writeFieldBegin('calleeNationalNumber', TType.STRING, 15)
    oprot:writeString(self.calleeNationalNumber)
    oprot:writeFieldEnd()
  end
  if self.calleeCallingCode ~= nil then
    oprot:writeFieldBegin('calleeCallingCode', TType.STRING, 16)
    oprot:writeString(self.calleeCallingCode)
    oprot:writeFieldEnd()
  end
  if self.rateDivision ~= nil then
    oprot:writeFieldBegin('rateDivision', TType.STRING, 17)
    oprot:writeString(self.rateDivision)
    oprot:writeFieldEnd()
  end
  if self.adMaxMin ~= nil then
    oprot:writeFieldBegin('adMaxMin', TType.I32, 20)
    oprot:writeI32(self.adMaxMin)
    oprot:writeFieldEnd()
  end
  if self.adRemains ~= nil then
    oprot:writeFieldBegin('adRemains', TType.I32, 21)
    oprot:writeI32(self.adRemains)
    oprot:writeFieldEnd()
  end
  if self.adSessionId ~= nil then
    oprot:writeFieldBegin('adSessionId', TType.STRING, 22)
    oprot:writeString(self.adSessionId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SpotItem = __TObject:new{
  name,
  phone,
  category,
  mid,
  countryAreaCode,
  freePhoneCallable
}

function SpotItem:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.phone = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.category = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.countryAreaCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.BOOL then
        self.freePhoneCallable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SpotItem:write(oprot)
  oprot:writeStructBegin('SpotItem')
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 2)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.phone ~= nil then
    oprot:writeFieldBegin('phone', TType.STRING, 3)
    oprot:writeString(self.phone)
    oprot:writeFieldEnd()
  end
  if self.category ~= nil then
    oprot:writeFieldBegin('category', TType.I32, 4)
    oprot:writeI32(self.category)
    oprot:writeFieldEnd()
  end
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 5)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.countryAreaCode ~= nil then
    oprot:writeFieldBegin('countryAreaCode', TType.STRING, 6)
    oprot:writeString(self.countryAreaCode)
    oprot:writeFieldEnd()
  end
  if self.freePhoneCallable ~= nil then
    oprot:writeFieldBegin('freePhoneCallable', TType.BOOL, 10)
    oprot:writeBool(self.freePhoneCallable)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SpotNearbyItem = __TObject:new{
  spotItem,
  location
}

function SpotNearbyItem:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.spotItem = SpotItem:new{}
        self.spotItem:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRUCT then
        self.location = Location:new{}
        self.location:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SpotNearbyItem:write(oprot)
  oprot:writeStructBegin('SpotNearbyItem')
  if self.spotItem ~= nil then
    oprot:writeFieldBegin('spotItem', TType.STRUCT, 2)
    self.spotItem:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.location ~= nil then
    oprot:writeFieldBegin('location', TType.STRUCT, 11)
    self.location:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SpotNearbyResponse = __TObject:new{
  spotNearbyItems
}

function SpotNearbyResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.spotNearbyItems = {}
        local _etype15, _size12 = iprot:readListBegin()
        for _i=1,_size12 do
          local _elem16 = SpotNearbyItem:new{}
          _elem16:read(iprot)
          table.insert(self.spotNearbyItems, _elem16)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SpotNearbyResponse:write(oprot)
  oprot:writeStructBegin('SpotNearbyResponse')
  if self.spotNearbyItems ~= nil then
    oprot:writeFieldBegin('spotNearbyItems', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.spotNearbyItems)
    for _,iter17 in ipairs(self.spotNearbyItems) do
      iter17:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SpotPhoneNumberResponse = __TObject:new{
  spotItems
}

function SpotPhoneNumberResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.spotItems = {}
        local _etype21, _size18 = iprot:readListBegin()
        for _i=1,_size18 do
          local _elem22 = SpotItem:new{}
          _elem22:read(iprot)
          table.insert(self.spotItems, _elem22)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SpotPhoneNumberResponse:write(oprot)
  oprot:writeStructBegin('SpotPhoneNumberResponse')
  if self.spotItems ~= nil then
    oprot:writeFieldBegin('spotItems', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.spotItems)
    for _,iter23 in ipairs(self.spotItems) do
      iter23:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PaidCallHistory = __TObject:new{
  seq,
  type,
  dialedNumber,
  calledNumber,
  toMid,
  toName,
  setupTime,
  startTime,
  endTime,
  duration,
  terminate,
  productType,
  charge,
  unit,
  result
}

function PaidCallHistory:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.seq = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.dialedNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.calledNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.toMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.toName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I64 then
        self.setupTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I64 then
        self.startTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.I64 then
        self.endTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I64 then
        self.duration = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.terminate = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.productType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.charge = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRING then
        self.unit = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.result = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PaidCallHistory:write(oprot)
  oprot:writeStructBegin('PaidCallHistory')
  if self.seq ~= nil then
    oprot:writeFieldBegin('seq', TType.I64, 1)
    oprot:writeI64(self.seq)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 2)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.dialedNumber ~= nil then
    oprot:writeFieldBegin('dialedNumber', TType.STRING, 3)
    oprot:writeString(self.dialedNumber)
    oprot:writeFieldEnd()
  end
  if self.calledNumber ~= nil then
    oprot:writeFieldBegin('calledNumber', TType.STRING, 4)
    oprot:writeString(self.calledNumber)
    oprot:writeFieldEnd()
  end
  if self.toMid ~= nil then
    oprot:writeFieldBegin('toMid', TType.STRING, 5)
    oprot:writeString(self.toMid)
    oprot:writeFieldEnd()
  end
  if self.toName ~= nil then
    oprot:writeFieldBegin('toName', TType.STRING, 6)
    oprot:writeString(self.toName)
    oprot:writeFieldEnd()
  end
  if self.setupTime ~= nil then
    oprot:writeFieldBegin('setupTime', TType.I64, 7)
    oprot:writeI64(self.setupTime)
    oprot:writeFieldEnd()
  end
  if self.startTime ~= nil then
    oprot:writeFieldBegin('startTime', TType.I64, 8)
    oprot:writeI64(self.startTime)
    oprot:writeFieldEnd()
  end
  if self.endTime ~= nil then
    oprot:writeFieldBegin('endTime', TType.I64, 9)
    oprot:writeI64(self.endTime)
    oprot:writeFieldEnd()
  end
  if self.duration ~= nil then
    oprot:writeFieldBegin('duration', TType.I64, 10)
    oprot:writeI64(self.duration)
    oprot:writeFieldEnd()
  end
  if self.terminate ~= nil then
    oprot:writeFieldBegin('terminate', TType.I32, 11)
    oprot:writeI32(self.terminate)
    oprot:writeFieldEnd()
  end
  if self.productType ~= nil then
    oprot:writeFieldBegin('productType', TType.I32, 12)
    oprot:writeI32(self.productType)
    oprot:writeFieldEnd()
  end
  if self.charge ~= nil then
    oprot:writeFieldBegin('charge', TType.I32, 13)
    oprot:writeI32(self.charge)
    oprot:writeFieldEnd()
  end
  if self.unit ~= nil then
    oprot:writeFieldBegin('unit', TType.STRING, 14)
    oprot:writeString(self.unit)
    oprot:writeFieldEnd()
  end
  if self.result ~= nil then
    oprot:writeFieldBegin('result', TType.STRING, 15)
    oprot:writeString(self.result)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PaidCallHistoryResult = __TObject:new{
  historys,
  hasNext
}

function PaidCallHistoryResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.historys = {}
        local _etype27, _size24 = iprot:readListBegin()
        for _i=1,_size24 do
          local _elem28 = PaidCallHistory:new{}
          _elem28:read(iprot)
          table.insert(self.historys, _elem28)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.hasNext = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PaidCallHistoryResult:write(oprot)
  oprot:writeStructBegin('PaidCallHistoryResult')
  if self.historys ~= nil then
    oprot:writeFieldBegin('historys', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.historys)
    for _,iter29 in ipairs(self.historys) do
      iter29:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.hasNext ~= nil then
    oprot:writeFieldBegin('hasNext', TType.BOOL, 2)
    oprot:writeBool(self.hasNext)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PaidCallMetadataResult = __TObject:new{
  currencyExchangeRates,
  recommendedCountryCodes,
  adCountries
}

function PaidCallMetadataResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.currencyExchangeRates = {}
        local _etype33, _size30 = iprot:readListBegin()
        for _i=1,_size30 do
          local _elem34 = PaidCallCurrencyExchangeRate:new{}
          _elem34:read(iprot)
          table.insert(self.currencyExchangeRates, _elem34)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.recommendedCountryCodes = {}
        local _etype38, _size35 = iprot:readListBegin()
        for _i=1,_size35 do
          local _elem39 = iprot:readString()
          table.insert(self.recommendedCountryCodes, _elem39)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.adCountries = {}
        local _etype43, _size40 = iprot:readListBegin()
        for _i=1,_size40 do
          local _elem44 = PaidCallAdCountry:new{}
          _elem44:read(iprot)
          table.insert(self.adCountries, _elem44)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PaidCallMetadataResult:write(oprot)
  oprot:writeStructBegin('PaidCallMetadataResult')
  if self.currencyExchangeRates ~= nil then
    oprot:writeFieldBegin('currencyExchangeRates', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.currencyExchangeRates)
    for _,iter45 in ipairs(self.currencyExchangeRates) do
      iter45:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.recommendedCountryCodes ~= nil then
    oprot:writeFieldBegin('recommendedCountryCodes', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.recommendedCountryCodes)
    for _,iter46 in ipairs(self.recommendedCountryCodes) do
      oprot:writeString(iter46)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.adCountries ~= nil then
    oprot:writeFieldBegin('adCountries', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.adCountries)
    for _,iter47 in ipairs(self.adCountries) do
      iter47:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PaidCallRedeemResult = __TObject:new{
  eventName,
  eventAmount
}

function PaidCallRedeemResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.eventName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.eventAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PaidCallRedeemResult:write(oprot)
  oprot:writeStructBegin('PaidCallRedeemResult')
  if self.eventName ~= nil then
    oprot:writeFieldBegin('eventName', TType.STRING, 1)
    oprot:writeString(self.eventName)
    oprot:writeFieldEnd()
  end
  if self.eventAmount ~= nil then
    oprot:writeFieldBegin('eventAmount', TType.I32, 2)
    oprot:writeI32(self.eventAmount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PaidCallResponse = __TObject:new{
  host,
  dialing,
  token,
  spotItems
}

function PaidCallResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.host = CallHost:new{}
        self.host:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.dialing = PaidCallDialing:new{}
        self.dialing:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.token = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.spotItems = {}
        local _etype51, _size48 = iprot:readListBegin()
        for _i=1,_size48 do
          local _elem52 = SpotItem:new{}
          _elem52:read(iprot)
          table.insert(self.spotItems, _elem52)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PaidCallResponse:write(oprot)
  oprot:writeStructBegin('PaidCallResponse')
  if self.host ~= nil then
    oprot:writeFieldBegin('host', TType.STRUCT, 1)
    self.host:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.dialing ~= nil then
    oprot:writeFieldBegin('dialing', TType.STRUCT, 2)
    self.dialing:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.token ~= nil then
    oprot:writeFieldBegin('token', TType.STRING, 3)
    oprot:writeString(self.token)
    oprot:writeFieldEnd()
  end
  if self.spotItems ~= nil then
    oprot:writeFieldBegin('spotItems', TType.LIST, 4)
    oprot:writeListBegin(TType.STRUCT, #self.spotItems)
    for _,iter53 in ipairs(self.spotItems) do
      iter53:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PaidCallUserRate = __TObject:new{
  countryCode,
  rate,
  rateDivision,
  rateName
}

function PaidCallUserRate:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.countryCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.rate = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.rateDivision = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.rateName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PaidCallUserRate:write(oprot)
  oprot:writeStructBegin('PaidCallUserRate')
  if self.countryCode ~= nil then
    oprot:writeFieldBegin('countryCode', TType.STRING, 1)
    oprot:writeString(self.countryCode)
    oprot:writeFieldEnd()
  end
  if self.rate ~= nil then
    oprot:writeFieldBegin('rate', TType.I32, 2)
    oprot:writeI32(self.rate)
    oprot:writeFieldEnd()
  end
  if self.rateDivision ~= nil then
    oprot:writeFieldBegin('rateDivision', TType.STRING, 3)
    oprot:writeString(self.rateDivision)
    oprot:writeFieldEnd()
  end
  if self.rateName ~= nil then
    oprot:writeFieldBegin('rateName', TType.STRING, 4)
    oprot:writeString(self.rateName)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelInfo = __TObject:new{
  channelId,
  name,
  entryPageUrl,
  descriptionText,
  provider,
  publicType,
  iconImage,
  permissions,
  iconThumbnailImage,
  channelConfigurations,
  lcsAllApiUsable,
  allowedPermissions,
  channelDomains,
  updatedTimestamp
}

function ChannelInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.entryPageUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.descriptionText = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRUCT then
        self.provider = ChannelProvider:new{}
        self.provider:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.publicType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.iconImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.LIST then
        self.permissions = {}
        local _etype57, _size54 = iprot:readListBegin()
        for _i=1,_size54 do
          local _elem58 = iprot:readString()
          table.insert(self.permissions, _elem58)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.iconThumbnailImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.LIST then
        self.channelConfigurations = {}
        local _etype62, _size59 = iprot:readListBegin()
        for _i=1,_size59 do
          local _elem63 = iprot:readI32()
          table.insert(self.channelConfigurations, _elem63)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.BOOL then
        self.lcsAllApiUsable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.SET then
        self.allowedPermissions = {}
        local _etype67, _size64 = iprot:readSetBegin()
        for _i=1,_size64 do
          local _elem68 = iprot:readI32()
          self.allowedPermissions[_elem68] = _elem68
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.LIST then
        self.channelDomains = {}
        local _etype72, _size69 = iprot:readListBegin()
        for _i=1,_size69 do
          local _elem73 = ChannelDomain:new{}
          _elem73:read(iprot)
          table.insert(self.channelDomains, _elem73)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.I64 then
        self.updatedTimestamp = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelInfo:write(oprot)
  oprot:writeStructBegin('ChannelInfo')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 1)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 3)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.entryPageUrl ~= nil then
    oprot:writeFieldBegin('entryPageUrl', TType.STRING, 4)
    oprot:writeString(self.entryPageUrl)
    oprot:writeFieldEnd()
  end
  if self.descriptionText ~= nil then
    oprot:writeFieldBegin('descriptionText', TType.STRING, 5)
    oprot:writeString(self.descriptionText)
    oprot:writeFieldEnd()
  end
  if self.provider ~= nil then
    oprot:writeFieldBegin('provider', TType.STRUCT, 6)
    self.provider:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.publicType ~= nil then
    oprot:writeFieldBegin('publicType', TType.I32, 7)
    oprot:writeI32(self.publicType)
    oprot:writeFieldEnd()
  end
  if self.iconImage ~= nil then
    oprot:writeFieldBegin('iconImage', TType.STRING, 8)
    oprot:writeString(self.iconImage)
    oprot:writeFieldEnd()
  end
  if self.permissions ~= nil then
    oprot:writeFieldBegin('permissions', TType.LIST, 9)
    oprot:writeListBegin(TType.STRING, #self.permissions)
    for _,iter74 in ipairs(self.permissions) do
      oprot:writeString(iter74)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.iconThumbnailImage ~= nil then
    oprot:writeFieldBegin('iconThumbnailImage', TType.STRING, 11)
    oprot:writeString(self.iconThumbnailImage)
    oprot:writeFieldEnd()
  end
  if self.channelConfigurations ~= nil then
    oprot:writeFieldBegin('channelConfigurations', TType.LIST, 12)
    oprot:writeListBegin(TType.I32, #self.channelConfigurations)
    for _,iter75 in ipairs(self.channelConfigurations) do
      oprot:writeI32(iter75)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.lcsAllApiUsable ~= nil then
    oprot:writeFieldBegin('lcsAllApiUsable', TType.BOOL, 13)
    oprot:writeBool(self.lcsAllApiUsable)
    oprot:writeFieldEnd()
  end
  if self.allowedPermissions ~= nil then
    oprot:writeFieldBegin('allowedPermissions', TType.SET, 14)
    oprot:writeSetBegin(TType.I32, ttable_size(self.allowedPermissions))
    for iter76,_ in pairs(self.allowedPermissions) do
      oprot:writeI32(iter76)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.channelDomains ~= nil then
    oprot:writeFieldBegin('channelDomains', TType.LIST, 15)
    oprot:writeListBegin(TType.STRUCT, #self.channelDomains)
    for _,iter77 in ipairs(self.channelDomains) do
      iter77:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.updatedTimestamp ~= nil then
    oprot:writeFieldBegin('updatedTimestamp', TType.I64, 16)
    oprot:writeI64(self.updatedTimestamp)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ApprovedChannelInfo = __TObject:new{
  channelInfo,
  approvedAt
}

function ApprovedChannelInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.channelInfo = ChannelInfo:new{}
        self.channelInfo:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.approvedAt = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ApprovedChannelInfo:write(oprot)
  oprot:writeStructBegin('ApprovedChannelInfo')
  if self.channelInfo ~= nil then
    oprot:writeFieldBegin('channelInfo', TType.STRUCT, 1)
    self.channelInfo:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.approvedAt ~= nil then
    oprot:writeFieldBegin('approvedAt', TType.I64, 2)
    oprot:writeI64(self.approvedAt)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ApprovedChannelInfos = __TObject:new{
  approvedChannelInfos,
  revision
}

function ApprovedChannelInfos:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.approvedChannelInfos = {}
        local _etype81, _size78 = iprot:readListBegin()
        for _i=1,_size78 do
          local _elem82 = ApprovedChannelInfo:new{}
          _elem82:read(iprot)
          table.insert(self.approvedChannelInfos, _elem82)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ApprovedChannelInfos:write(oprot)
  oprot:writeStructBegin('ApprovedChannelInfos')
  if self.approvedChannelInfos ~= nil then
    oprot:writeFieldBegin('approvedChannelInfos', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.approvedChannelInfos)
    for _,iter83 in ipairs(self.approvedChannelInfos) do
      iter83:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 2)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AuthQrcode = __TObject:new{
  qrcode,
  verifier,
  callbackUrl
}

function AuthQrcode:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.qrcode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.verifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.callbackUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AuthQrcode:write(oprot)
  oprot:writeStructBegin('AuthQrcode')
  if self.qrcode ~= nil then
    oprot:writeFieldBegin('qrcode', TType.STRING, 1)
    oprot:writeString(self.qrcode)
    oprot:writeFieldEnd()
  end
  if self.verifier ~= nil then
    oprot:writeFieldBegin('verifier', TType.STRING, 2)
    oprot:writeString(self.verifier)
    oprot:writeFieldEnd()
  end
  if self.callbackUrl ~= nil then
    oprot:writeFieldBegin('callbackUrl', TType.STRING, 3)
    oprot:writeString(self.callbackUrl)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AnalyticsInfo = __TObject:new{
  gaSamplingRate,
  tmid
}

function AnalyticsInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.DOUBLE then
        self.gaSamplingRate = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.tmid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AnalyticsInfo:write(oprot)
  oprot:writeStructBegin('AnalyticsInfo')
  if self.gaSamplingRate ~= nil then
    oprot:writeFieldBegin('gaSamplingRate', TType.DOUBLE, 1)
    oprot:writeDouble(self.gaSamplingRate)
    oprot:writeFieldEnd()
  end
  if self.tmid ~= nil then
    oprot:writeFieldBegin('tmid', TType.STRING, 2)
    oprot:writeString(self.tmid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ContactTransition = __TObject:new{
  ownerMid,
  targetMid,
  previousStatus,
  resultStatus
}

function ContactTransition:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.ownerMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.targetMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.previousStatus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.resultStatus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ContactTransition:write(oprot)
  oprot:writeStructBegin('ContactTransition')
  if self.ownerMid ~= nil then
    oprot:writeFieldBegin('ownerMid', TType.STRING, 1)
    oprot:writeString(self.ownerMid)
    oprot:writeFieldEnd()
  end
  if self.targetMid ~= nil then
    oprot:writeFieldBegin('targetMid', TType.STRING, 2)
    oprot:writeString(self.targetMid)
    oprot:writeFieldEnd()
  end
  if self.previousStatus ~= nil then
    oprot:writeFieldBegin('previousStatus', TType.I32, 3)
    oprot:writeI32(self.previousStatus)
    oprot:writeFieldEnd()
  end
  if self.resultStatus ~= nil then
    oprot:writeFieldBegin('resultStatus', TType.I32, 4)
    oprot:writeI32(self.resultStatus)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UserTicketResponse = __TObject:new{
  mid,
  userTicket
}

function UserTicketResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.userTicket = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UserTicketResponse:write(oprot)
  oprot:writeStructBegin('UserTicketResponse')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.userTicket ~= nil then
    oprot:writeFieldBegin('userTicket', TType.STRING, 2)
    oprot:writeString(self.userTicket)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuddyBanner = __TObject:new{
  buddyBannerLinkType,
  buddyBannerLink,
  buddyBannerImageUrl
}

function BuddyBanner:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.buddyBannerLinkType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.buddyBannerLink = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.buddyBannerImageUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuddyBanner:write(oprot)
  oprot:writeStructBegin('BuddyBanner')
  if self.buddyBannerLinkType ~= nil then
    oprot:writeFieldBegin('buddyBannerLinkType', TType.I32, 1)
    oprot:writeI32(self.buddyBannerLinkType)
    oprot:writeFieldEnd()
  end
  if self.buddyBannerLink ~= nil then
    oprot:writeFieldBegin('buddyBannerLink', TType.STRING, 2)
    oprot:writeString(self.buddyBannerLink)
    oprot:writeFieldEnd()
  end
  if self.buddyBannerImageUrl ~= nil then
    oprot:writeFieldBegin('buddyBannerImageUrl', TType.STRING, 3)
    oprot:writeString(self.buddyBannerImageUrl)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuddyDetail = __TObject:new{
  mid,
  memberCount,
  onAir,
  businessAccount,
  addable,
  acceptableContentTypes,
  capableMyhome
}

function BuddyDetail:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.memberCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.onAir = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.businessAccount = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.addable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.SET then
        self.acceptableContentTypes = {}
        local _etype87, _size84 = iprot:readSetBegin()
        for _i=1,_size84 do
          local _elem88 = iprot:readI32()
          self.acceptableContentTypes[_elem88] = _elem88
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.BOOL then
        self.capableMyhome = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuddyDetail:write(oprot)
  oprot:writeStructBegin('BuddyDetail')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.memberCount ~= nil then
    oprot:writeFieldBegin('memberCount', TType.I64, 2)
    oprot:writeI64(self.memberCount)
    oprot:writeFieldEnd()
  end
  if self.onAir ~= nil then
    oprot:writeFieldBegin('onAir', TType.BOOL, 3)
    oprot:writeBool(self.onAir)
    oprot:writeFieldEnd()
  end
  if self.businessAccount ~= nil then
    oprot:writeFieldBegin('businessAccount', TType.BOOL, 4)
    oprot:writeBool(self.businessAccount)
    oprot:writeFieldEnd()
  end
  if self.addable ~= nil then
    oprot:writeFieldBegin('addable', TType.BOOL, 5)
    oprot:writeBool(self.addable)
    oprot:writeFieldEnd()
  end
  if self.acceptableContentTypes ~= nil then
    oprot:writeFieldBegin('acceptableContentTypes', TType.SET, 6)
    oprot:writeSetBegin(TType.I32, ttable_size(self.acceptableContentTypes))
    for iter89,_ in pairs(self.acceptableContentTypes) do
      oprot:writeI32(iter89)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.capableMyhome ~= nil then
    oprot:writeFieldBegin('capableMyhome', TType.BOOL, 7)
    oprot:writeBool(self.capableMyhome)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Contact = __TObject:new{
  mid,
  createdTime,
  type,
  status,
  relation,
  displayName,
  phoneticName,
  pictureStatus,
  thumbnailUrl,
  statusMessage,
  displayNameOverridden,
  favoriteTime,
  capableVoiceCall,
  capableVideoCall,
  capableMyhome,
  capableBuddy,
  attributes,
  settings,
  picturePath,
  recommendParams,
  friendRequestStatus,
  musicProfile,
  videoProfile
}

function Contact:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.status = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I32 then
        self.relation = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.displayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.STRING then
        self.phoneticName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.STRING then
        self.pictureStatus = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.STRING then
        self.thumbnailUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.STRING then
        self.statusMessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 27 then
      if ftype == TType.STRING then
        self.displayNameOverridden = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 28 then
      if ftype == TType.I64 then
        self.favoriteTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.BOOL then
        self.capableVoiceCall = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.BOOL then
        self.capableVideoCall = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.BOOL then
        self.capableMyhome = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 34 then
      if ftype == TType.BOOL then
        self.capableBuddy = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 35 then
      if ftype == TType.I32 then
        self.attributes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 36 then
      if ftype == TType.I64 then
        self.settings = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 37 then
      if ftype == TType.STRING then
        self.picturePath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 38 then
      if ftype == TType.STRING then
        self.recommendParams = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 39 then
      if ftype == TType.I32 then
        self.friendRequestStatus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRING then
        self.musicProfile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.STRING then
        self.videoProfile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Contact:write(oprot)
  oprot:writeStructBegin('Contact')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 2)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 10)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.status ~= nil then
    oprot:writeFieldBegin('status', TType.I32, 11)
    oprot:writeI32(self.status)
    oprot:writeFieldEnd()
  end
  if self.relation ~= nil then
    oprot:writeFieldBegin('relation', TType.I32, 21)
    oprot:writeI32(self.relation)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRING, 22)
    oprot:writeString(self.displayName)
    oprot:writeFieldEnd()
  end
  if self.phoneticName ~= nil then
    oprot:writeFieldBegin('phoneticName', TType.STRING, 23)
    oprot:writeString(self.phoneticName)
    oprot:writeFieldEnd()
  end
  if self.pictureStatus ~= nil then
    oprot:writeFieldBegin('pictureStatus', TType.STRING, 24)
    oprot:writeString(self.pictureStatus)
    oprot:writeFieldEnd()
  end
  if self.thumbnailUrl ~= nil then
    oprot:writeFieldBegin('thumbnailUrl', TType.STRING, 25)
    oprot:writeString(self.thumbnailUrl)
    oprot:writeFieldEnd()
  end
  if self.statusMessage ~= nil then
    oprot:writeFieldBegin('statusMessage', TType.STRING, 26)
    oprot:writeString(self.statusMessage)
    oprot:writeFieldEnd()
  end
  if self.displayNameOverridden ~= nil then
    oprot:writeFieldBegin('displayNameOverridden', TType.STRING, 27)
    oprot:writeString(self.displayNameOverridden)
    oprot:writeFieldEnd()
  end
  if self.favoriteTime ~= nil then
    oprot:writeFieldBegin('favoriteTime', TType.I64, 28)
    oprot:writeI64(self.favoriteTime)
    oprot:writeFieldEnd()
  end
  if self.capableVoiceCall ~= nil then
    oprot:writeFieldBegin('capableVoiceCall', TType.BOOL, 31)
    oprot:writeBool(self.capableVoiceCall)
    oprot:writeFieldEnd()
  end
  if self.capableVideoCall ~= nil then
    oprot:writeFieldBegin('capableVideoCall', TType.BOOL, 32)
    oprot:writeBool(self.capableVideoCall)
    oprot:writeFieldEnd()
  end
  if self.capableMyhome ~= nil then
    oprot:writeFieldBegin('capableMyhome', TType.BOOL, 33)
    oprot:writeBool(self.capableMyhome)
    oprot:writeFieldEnd()
  end
  if self.capableBuddy ~= nil then
    oprot:writeFieldBegin('capableBuddy', TType.BOOL, 34)
    oprot:writeBool(self.capableBuddy)
    oprot:writeFieldEnd()
  end
  if self.attributes ~= nil then
    oprot:writeFieldBegin('attributes', TType.I32, 35)
    oprot:writeI32(self.attributes)
    oprot:writeFieldEnd()
  end
  if self.settings ~= nil then
    oprot:writeFieldBegin('settings', TType.I64, 36)
    oprot:writeI64(self.settings)
    oprot:writeFieldEnd()
  end
  if self.picturePath ~= nil then
    oprot:writeFieldBegin('picturePath', TType.STRING, 37)
    oprot:writeString(self.picturePath)
    oprot:writeFieldEnd()
  end
  if self.recommendParams ~= nil then
    oprot:writeFieldBegin('recommendParams', TType.STRING, 38)
    oprot:writeString(self.recommendParams)
    oprot:writeFieldEnd()
  end
  if self.friendRequestStatus ~= nil then
    oprot:writeFieldBegin('friendRequestStatus', TType.I32, 39)
    oprot:writeI32(self.friendRequestStatus)
    oprot:writeFieldEnd()
  end
  if self.musicProfile ~= nil then
    oprot:writeFieldBegin('musicProfile', TType.STRING, 40)
    oprot:writeString(self.musicProfile)
    oprot:writeFieldEnd()
  end
  if self.videoProfile ~= nil then
    oprot:writeFieldBegin('videoProfile', TType.STRING, 42)
    oprot:writeString(self.videoProfile)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuddyList = __TObject:new{
  classification,
  displayName,
  totalBuddyCount,
  popularContacts
}

function BuddyList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.classification = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.displayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.totalBuddyCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.popularContacts = {}
        local _etype93, _size90 = iprot:readListBegin()
        for _i=1,_size90 do
          local _elem94 = Contact:new{}
          _elem94:read(iprot)
          table.insert(self.popularContacts, _elem94)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuddyList:write(oprot)
  oprot:writeStructBegin('BuddyList')
  if self.classification ~= nil then
    oprot:writeFieldBegin('classification', TType.STRING, 1)
    oprot:writeString(self.classification)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRING, 2)
    oprot:writeString(self.displayName)
    oprot:writeFieldEnd()
  end
  if self.totalBuddyCount ~= nil then
    oprot:writeFieldBegin('totalBuddyCount', TType.I32, 3)
    oprot:writeI32(self.totalBuddyCount)
    oprot:writeFieldEnd()
  end
  if self.popularContacts ~= nil then
    oprot:writeFieldBegin('popularContacts', TType.LIST, 4)
    oprot:writeListBegin(TType.STRUCT, #self.popularContacts)
    for _,iter95 in ipairs(self.popularContacts) do
      iter95:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RegisterWithPhoneNumberResult = __TObject:new{
  authToken,
  recommendEmailRegistration,
  certificate
}

function RegisterWithPhoneNumberResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.recommendEmailRegistration = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.certificate = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RegisterWithPhoneNumberResult:write(oprot)
  oprot:writeStructBegin('RegisterWithPhoneNumberResult')
  if self.authToken ~= nil then
    oprot:writeFieldBegin('authToken', TType.STRING, 1)
    oprot:writeString(self.authToken)
    oprot:writeFieldEnd()
  end
  if self.recommendEmailRegistration ~= nil then
    oprot:writeFieldBegin('recommendEmailRegistration', TType.BOOL, 2)
    oprot:writeBool(self.recommendEmailRegistration)
    oprot:writeFieldEnd()
  end
  if self.certificate ~= nil then
    oprot:writeFieldBegin('certificate', TType.STRING, 3)
    oprot:writeString(self.certificate)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuddyMessageRequest = __TObject:new{
  contentType,
  text,
  location,
  content,
  contentMetadata
}

function BuddyMessageRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.contentType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.text = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.location = Location:new{}
        self.location:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.content = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.MAP then
        self.contentMetadata = {}
        local _ktype97, _vtype98, _size96 = iprot:readMapBegin() 
        for _i=1,_size96 do
          local _key100 = iprot:readString()
          local _val101 = iprot:readString()
          self.contentMetadata[_key100] = _val101
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuddyMessageRequest:write(oprot)
  oprot:writeStructBegin('BuddyMessageRequest')
  if self.contentType ~= nil then
    oprot:writeFieldBegin('contentType', TType.I32, 1)
    oprot:writeI32(self.contentType)
    oprot:writeFieldEnd()
  end
  if self.text ~= nil then
    oprot:writeFieldBegin('text', TType.STRING, 2)
    oprot:writeString(self.text)
    oprot:writeFieldEnd()
  end
  if self.location ~= nil then
    oprot:writeFieldBegin('location', TType.STRUCT, 3)
    self.location:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.content ~= nil then
    oprot:writeFieldBegin('content', TType.STRING, 4)
    oprot:writeString(self.content)
    oprot:writeFieldEnd()
  end
  if self.contentMetadata ~= nil then
    oprot:writeFieldBegin('contentMetadata', TType.MAP, 5)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.contentMetadata))
    for kiter102,viter103 in pairs(self.contentMetadata) do
      oprot:writeString(kiter102)
      oprot:writeString(viter103)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuddyOnAirUrls = __TObject:new{
  hls,
  smoothStreaming
}

function BuddyOnAirUrls:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.MAP then
        self.hls = {}
        local _ktype105, _vtype106, _size104 = iprot:readMapBegin() 
        for _i=1,_size104 do
          local _key108 = iprot:readString()
          local _val109 = iprot:readString()
          self.hls[_key108] = _val109
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.MAP then
        self.smoothStreaming = {}
        local _ktype111, _vtype112, _size110 = iprot:readMapBegin() 
        for _i=1,_size110 do
          local _key114 = iprot:readString()
          local _val115 = iprot:readString()
          self.smoothStreaming[_key114] = _val115
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuddyOnAirUrls:write(oprot)
  oprot:writeStructBegin('BuddyOnAirUrls')
  if self.hls ~= nil then
    oprot:writeFieldBegin('hls', TType.MAP, 1)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.hls))
    for kiter116,viter117 in pairs(self.hls) do
      oprot:writeString(kiter116)
      oprot:writeString(viter117)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.smoothStreaming ~= nil then
    oprot:writeFieldBegin('smoothStreaming', TType.MAP, 2)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.smoothStreaming))
    for kiter118,viter119 in pairs(self.smoothStreaming) do
      oprot:writeString(kiter118)
      oprot:writeString(viter119)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuddyOnAir = __TObject:new{
  mid,
  freshnessLifetime,
  onAirId,
  onAir,
  text,
  viewerCount,
  targetCount,
  onAirType,
  onAirUrls
}

function BuddyOnAir:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.freshnessLifetime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.onAirId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.onAir = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.text = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I64 then
        self.viewerCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I64 then
        self.targetCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.I32 then
        self.onAirType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.STRUCT then
        self.onAirUrls = BuddyOnAirUrls:new{}
        self.onAirUrls:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuddyOnAir:write(oprot)
  oprot:writeStructBegin('BuddyOnAir')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.freshnessLifetime ~= nil then
    oprot:writeFieldBegin('freshnessLifetime', TType.I64, 3)
    oprot:writeI64(self.freshnessLifetime)
    oprot:writeFieldEnd()
  end
  if self.onAirId ~= nil then
    oprot:writeFieldBegin('onAirId', TType.STRING, 4)
    oprot:writeString(self.onAirId)
    oprot:writeFieldEnd()
  end
  if self.onAir ~= nil then
    oprot:writeFieldBegin('onAir', TType.BOOL, 5)
    oprot:writeBool(self.onAir)
    oprot:writeFieldEnd()
  end
  if self.text ~= nil then
    oprot:writeFieldBegin('text', TType.STRING, 11)
    oprot:writeString(self.text)
    oprot:writeFieldEnd()
  end
  if self.viewerCount ~= nil then
    oprot:writeFieldBegin('viewerCount', TType.I64, 12)
    oprot:writeI64(self.viewerCount)
    oprot:writeFieldEnd()
  end
  if self.targetCount ~= nil then
    oprot:writeFieldBegin('targetCount', TType.I64, 13)
    oprot:writeI64(self.targetCount)
    oprot:writeFieldEnd()
  end
  if self.onAirType ~= nil then
    oprot:writeFieldBegin('onAirType', TType.I32, 31)
    oprot:writeI32(self.onAirType)
    oprot:writeFieldEnd()
  end
  if self.onAirUrls ~= nil then
    oprot:writeFieldBegin('onAirUrls', TType.STRUCT, 32)
    self.onAirUrls:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuddyProfile = __TObject:new{
  buddyId,
  mid,
  searchId,
  displayName,
  statusMessage,
  contactCount
}

function BuddyProfile:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.buddyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.searchId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.displayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.statusMessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I64 then
        self.contactCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuddyProfile:write(oprot)
  oprot:writeStructBegin('BuddyProfile')
  if self.buddyId ~= nil then
    oprot:writeFieldBegin('buddyId', TType.STRING, 1)
    oprot:writeString(self.buddyId)
    oprot:writeFieldEnd()
  end
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 2)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.searchId ~= nil then
    oprot:writeFieldBegin('searchId', TType.STRING, 3)
    oprot:writeString(self.searchId)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRING, 4)
    oprot:writeString(self.displayName)
    oprot:writeFieldEnd()
  end
  if self.statusMessage ~= nil then
    oprot:writeFieldBegin('statusMessage', TType.STRING, 5)
    oprot:writeString(self.statusMessage)
    oprot:writeFieldEnd()
  end
  if self.contactCount ~= nil then
    oprot:writeFieldBegin('contactCount', TType.I64, 11)
    oprot:writeI64(self.contactCount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CommitMessageResult = __TObject:new{
  message,
  code,
  reason,
  successCount,
  failCount,
  unregisterCount,
  blockCount
}

function CommitMessageResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.message = Message:new{}
        self.message:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.code = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.reason = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I64 then
        self.successCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I64 then
        self.failCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I64 then
        self.unregisterCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I64 then
        self.blockCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CommitMessageResult:write(oprot)
  oprot:writeStructBegin('CommitMessageResult')
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRUCT, 1)
    self.message:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.code ~= nil then
    oprot:writeFieldBegin('code', TType.I32, 2)
    oprot:writeI32(self.code)
    oprot:writeFieldEnd()
  end
  if self.reason ~= nil then
    oprot:writeFieldBegin('reason', TType.STRING, 3)
    oprot:writeString(self.reason)
    oprot:writeFieldEnd()
  end
  if self.successCount ~= nil then
    oprot:writeFieldBegin('successCount', TType.I64, 4)
    oprot:writeI64(self.successCount)
    oprot:writeFieldEnd()
  end
  if self.failCount ~= nil then
    oprot:writeFieldBegin('failCount', TType.I64, 5)
    oprot:writeI64(self.failCount)
    oprot:writeFieldEnd()
  end
  if self.unregisterCount ~= nil then
    oprot:writeFieldBegin('unregisterCount', TType.I64, 6)
    oprot:writeI64(self.unregisterCount)
    oprot:writeFieldEnd()
  end
  if self.blockCount ~= nil then
    oprot:writeFieldBegin('blockCount', TType.I64, 7)
    oprot:writeI64(self.blockCount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuddySearchResult = __TObject:new{
  mid,
  displayName,
  pictureStatus,
  picturePath,
  statusMessage,
  businessAccount
}

function BuddySearchResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.displayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.pictureStatus = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.picturePath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.statusMessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.businessAccount = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuddySearchResult:write(oprot)
  oprot:writeStructBegin('BuddySearchResult')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRING, 2)
    oprot:writeString(self.displayName)
    oprot:writeFieldEnd()
  end
  if self.pictureStatus ~= nil then
    oprot:writeFieldBegin('pictureStatus', TType.STRING, 3)
    oprot:writeString(self.pictureStatus)
    oprot:writeFieldEnd()
  end
  if self.picturePath ~= nil then
    oprot:writeFieldBegin('picturePath', TType.STRING, 4)
    oprot:writeString(self.picturePath)
    oprot:writeFieldEnd()
  end
  if self.statusMessage ~= nil then
    oprot:writeFieldBegin('statusMessage', TType.STRING, 5)
    oprot:writeString(self.statusMessage)
    oprot:writeFieldEnd()
  end
  if self.businessAccount ~= nil then
    oprot:writeFieldBegin('businessAccount', TType.BOOL, 6)
    oprot:writeBool(self.businessAccount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SyncParamMid = __TObject:new{
  mid,
  diff,
  revision
}

function SyncParamMid:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.diff = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SyncParamMid:write(oprot)
  oprot:writeStructBegin('SyncParamMid')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.diff ~= nil then
    oprot:writeFieldBegin('diff', TType.I32, 2)
    oprot:writeI32(self.diff)
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 3)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SIMInfo = __TObject:new{
  phoneNumber,
  countryCode
}

function SIMInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.phoneNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.countryCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SIMInfo:write(oprot)
  oprot:writeStructBegin('SIMInfo')
  if self.phoneNumber ~= nil then
    oprot:writeFieldBegin('phoneNumber', TType.STRING, 1)
    oprot:writeString(self.phoneNumber)
    oprot:writeFieldEnd()
  end
  if self.countryCode ~= nil then
    oprot:writeFieldBegin('countryCode', TType.STRING, 2)
    oprot:writeString(self.countryCode)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SyncParamContact = __TObject:new{
  syncParamMid,
  contactStatus
}

function SyncParamContact:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.syncParamMid = SyncParamMid:new{}
        self.syncParamMid:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.contactStatus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SyncParamContact:write(oprot)
  oprot:writeStructBegin('SyncParamContact')
  if self.syncParamMid ~= nil then
    oprot:writeFieldBegin('syncParamMid', TType.STRUCT, 1)
    self.syncParamMid:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.contactStatus ~= nil then
    oprot:writeFieldBegin('contactStatus', TType.I32, 2)
    oprot:writeI32(self.contactStatus)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelDomains = __TObject:new{
  channelDomains,
  revision
}

function ChannelDomains:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.channelDomains = {}
        local _etype123, _size120 = iprot:readListBegin()
        for _i=1,_size120 do
          local _elem124 = ChannelDomain:new{}
          _elem124:read(iprot)
          table.insert(self.channelDomains, _elem124)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelDomains:write(oprot)
  oprot:writeStructBegin('ChannelDomains')
  if self.channelDomains ~= nil then
    oprot:writeFieldBegin('channelDomains', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.channelDomains)
    for _,iter125 in ipairs(self.channelDomains) do
      iter125:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 2)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ProductCategory = __TObject:new{
  productCategoryId,
  title,
  productCount,
  newFlag
}

function ProductCategory:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.productCategoryId = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.title = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.productCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.newFlag = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ProductCategory:write(oprot)
  oprot:writeStructBegin('ProductCategory')
  if self.productCategoryId ~= nil then
    oprot:writeFieldBegin('productCategoryId', TType.I64, 1)
    oprot:writeI64(self.productCategoryId)
    oprot:writeFieldEnd()
  end
  if self.title ~= nil then
    oprot:writeFieldBegin('title', TType.STRING, 2)
    oprot:writeString(self.title)
    oprot:writeFieldEnd()
  end
  if self.productCount ~= nil then
    oprot:writeFieldBegin('productCount', TType.I32, 3)
    oprot:writeI32(self.productCount)
    oprot:writeFieldEnd()
  end
  if self.newFlag ~= nil then
    oprot:writeFieldBegin('newFlag', TType.BOOL, 4)
    oprot:writeBool(self.newFlag)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelInfos = __TObject:new{
  channelInfos,
  revision
}

function ChannelInfos:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.channelInfos = {}
        local _etype129, _size126 = iprot:readListBegin()
        for _i=1,_size126 do
          local _elem130 = ChannelInfo:new{}
          _elem130:read(iprot)
          table.insert(self.channelInfos, _elem130)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelInfos:write(oprot)
  oprot:writeStructBegin('ChannelInfos')
  if self.channelInfos ~= nil then
    oprot:writeFieldBegin('channelInfos', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.channelInfos)
    for _,iter131 in ipairs(self.channelInfos) do
      iter131:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 2)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelNotificationSetting = __TObject:new{
  channelId,
  name,
  notificationReceivable,
  messageReceivable,
  showDefault
}

function ChannelNotificationSetting:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.notificationReceivable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.messageReceivable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.showDefault = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelNotificationSetting:write(oprot)
  oprot:writeStructBegin('ChannelNotificationSetting')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 1)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 2)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.notificationReceivable ~= nil then
    oprot:writeFieldBegin('notificationReceivable', TType.BOOL, 3)
    oprot:writeBool(self.notificationReceivable)
    oprot:writeFieldEnd()
  end
  if self.messageReceivable ~= nil then
    oprot:writeFieldBegin('messageReceivable', TType.BOOL, 4)
    oprot:writeBool(self.messageReceivable)
    oprot:writeFieldEnd()
  end
  if self.showDefault ~= nil then
    oprot:writeFieldBegin('showDefault', TType.BOOL, 5)
    oprot:writeBool(self.showDefault)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelSyncDatas = __TObject:new{
  channelInfos,
  channelDomains,
  revision,
  expires
}

function ChannelSyncDatas:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.channelInfos = {}
        local _etype135, _size132 = iprot:readListBegin()
        for _i=1,_size132 do
          local _elem136 = ChannelInfo:new{}
          _elem136:read(iprot)
          table.insert(self.channelInfos, _elem136)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.channelDomains = {}
        local _etype140, _size137 = iprot:readListBegin()
        for _i=1,_size137 do
          local _elem141 = ChannelDomain:new{}
          _elem141:read(iprot)
          table.insert(self.channelDomains, _elem141)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I64 then
        self.expires = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelSyncDatas:write(oprot)
  oprot:writeStructBegin('ChannelSyncDatas')
  if self.channelInfos ~= nil then
    oprot:writeFieldBegin('channelInfos', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.channelInfos)
    for _,iter142 in ipairs(self.channelInfos) do
      iter142:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.channelDomains ~= nil then
    oprot:writeFieldBegin('channelDomains', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.channelDomains)
    for _,iter143 in ipairs(self.channelDomains) do
      iter143:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 3)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.expires ~= nil then
    oprot:writeFieldBegin('expires', TType.I64, 4)
    oprot:writeI64(self.expires)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NotiCenterEventData = __TObject:new{
  id,
  to,
  from_,
  toChannel,
  fromChannel,
  eventType,
  createdTime,
  operationRevision,
  content,
  push
}

function NotiCenterEventData:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.to = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.from_ = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.toChannel = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.fromChannel = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.eventType = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I64 then
        self.operationRevision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.MAP then
        self.content = {}
        local _ktype145, _vtype146, _size144 = iprot:readMapBegin() 
        for _i=1,_size144 do
          local _key148 = iprot:readString()
          local _val149 = iprot:readString()
          self.content[_key148] = _val149
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.MAP then
        self.push = {}
        local _ktype151, _vtype152, _size150 = iprot:readMapBegin() 
        for _i=1,_size150 do
          local _key154 = iprot:readString()
          local _val155 = iprot:readString()
          self.push[_key154] = _val155
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NotiCenterEventData:write(oprot)
  oprot:writeStructBegin('NotiCenterEventData')
  if self.id ~= nil then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.to ~= nil then
    oprot:writeFieldBegin('to', TType.STRING, 2)
    oprot:writeString(self.to)
    oprot:writeFieldEnd()
  end
  if self.from_ ~= nil then
    oprot:writeFieldBegin('from_', TType.STRING, 3)
    oprot:writeString(self.from_)
    oprot:writeFieldEnd()
  end
  if self.toChannel ~= nil then
    oprot:writeFieldBegin('toChannel', TType.STRING, 4)
    oprot:writeString(self.toChannel)
    oprot:writeFieldEnd()
  end
  if self.fromChannel ~= nil then
    oprot:writeFieldBegin('fromChannel', TType.STRING, 5)
    oprot:writeString(self.fromChannel)
    oprot:writeFieldEnd()
  end
  if self.eventType ~= nil then
    oprot:writeFieldBegin('eventType', TType.STRING, 6)
    oprot:writeString(self.eventType)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 7)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.operationRevision ~= nil then
    oprot:writeFieldBegin('operationRevision', TType.I64, 8)
    oprot:writeI64(self.operationRevision)
    oprot:writeFieldEnd()
  end
  if self.content ~= nil then
    oprot:writeFieldBegin('content', TType.MAP, 9)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.content))
    for kiter156,viter157 in pairs(self.content) do
      oprot:writeString(kiter156)
      oprot:writeString(viter157)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.push ~= nil then
    oprot:writeFieldBegin('push', TType.MAP, 10)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.push))
    for kiter158,viter159 in pairs(self.push) do
      oprot:writeString(kiter158)
      oprot:writeString(viter159)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelToken = __TObject:new{
  token,
  obsToken,
  expiration,
  refreshToken,
  channelAccessToken
}

function ChannelToken:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.token = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.obsToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.expiration = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.refreshToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.channelAccessToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelToken:write(oprot)
  oprot:writeStructBegin('ChannelToken')
  if self.token ~= nil then
    oprot:writeFieldBegin('token', TType.STRING, 1)
    oprot:writeString(self.token)
    oprot:writeFieldEnd()
  end
  if self.obsToken ~= nil then
    oprot:writeFieldBegin('obsToken', TType.STRING, 2)
    oprot:writeString(self.obsToken)
    oprot:writeFieldEnd()
  end
  if self.expiration ~= nil then
    oprot:writeFieldBegin('expiration', TType.I64, 3)
    oprot:writeI64(self.expiration)
    oprot:writeFieldEnd()
  end
  if self.refreshToken ~= nil then
    oprot:writeFieldBegin('refreshToken', TType.STRING, 4)
    oprot:writeString(self.refreshToken)
    oprot:writeFieldEnd()
  end
  if self.channelAccessToken ~= nil then
    oprot:writeFieldBegin('channelAccessToken', TType.STRING, 5)
    oprot:writeString(self.channelAccessToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelSettings = __TObject:new{
  unapprovedMessageReceivable
}

function ChannelSettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.unapprovedMessageReceivable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelSettings:write(oprot)
  oprot:writeStructBegin('ChannelSettings')
  if self.unapprovedMessageReceivable ~= nil then
    oprot:writeFieldBegin('unapprovedMessageReceivable', TType.BOOL, 1)
    oprot:writeBool(self.unapprovedMessageReceivable)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelIdWithLastUpdated = __TObject:new{
  channelId,
  lastUpdated
}

function ChannelIdWithLastUpdated:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.lastUpdated = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelIdWithLastUpdated:write(oprot)
  oprot:writeStructBegin('ChannelIdWithLastUpdated')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 1)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  if self.lastUpdated ~= nil then
    oprot:writeFieldBegin('lastUpdated', TType.I64, 2)
    oprot:writeI64(self.lastUpdated)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Coin = __TObject:new{
  freeCoinBalance,
  payedCoinBalance,
  totalCoinBalance,
  rewardCoinBalance
}

function Coin:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.freeCoinBalance = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.payedCoinBalance = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.totalCoinBalance = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.rewardCoinBalance = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Coin:write(oprot)
  oprot:writeStructBegin('Coin')
  if self.freeCoinBalance ~= nil then
    oprot:writeFieldBegin('freeCoinBalance', TType.I32, 1)
    oprot:writeI32(self.freeCoinBalance)
    oprot:writeFieldEnd()
  end
  if self.payedCoinBalance ~= nil then
    oprot:writeFieldBegin('payedCoinBalance', TType.I32, 2)
    oprot:writeI32(self.payedCoinBalance)
    oprot:writeFieldEnd()
  end
  if self.totalCoinBalance ~= nil then
    oprot:writeFieldBegin('totalCoinBalance', TType.I32, 3)
    oprot:writeI32(self.totalCoinBalance)
    oprot:writeFieldEnd()
  end
  if self.rewardCoinBalance ~= nil then
    oprot:writeFieldBegin('rewardCoinBalance', TType.I32, 4)
    oprot:writeI32(self.rewardCoinBalance)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinPayLoad = __TObject:new{
  payCoin,
  freeCoin,
  type,
  rewardCoin
}

function CoinPayLoad:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.payCoin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.freeCoin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.rewardCoin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinPayLoad:write(oprot)
  oprot:writeStructBegin('CoinPayLoad')
  if self.payCoin ~= nil then
    oprot:writeFieldBegin('payCoin', TType.I32, 1)
    oprot:writeI32(self.payCoin)
    oprot:writeFieldEnd()
  end
  if self.freeCoin ~= nil then
    oprot:writeFieldBegin('freeCoin', TType.I32, 2)
    oprot:writeI32(self.freeCoin)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 3)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.rewardCoin ~= nil then
    oprot:writeFieldBegin('rewardCoin', TType.I32, 4)
    oprot:writeI32(self.rewardCoin)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinHistory = __TObject:new{
  payDate,
  coinBalance,
  coin,
  price,
  title,
  refund,
  paySeq,
  currency,
  currencySign,
  displayPrice,
  payload,
  channelId
}

function CoinHistory:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.payDate = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.coinBalance = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.coin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.price = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.title = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.refund = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.paySeq = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.currency = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.currencySign = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.displayPrice = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRUCT then
        self.payload = CoinPayLoad:new{}
        self.payload:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinHistory:write(oprot)
  oprot:writeStructBegin('CoinHistory')
  if self.payDate ~= nil then
    oprot:writeFieldBegin('payDate', TType.I64, 1)
    oprot:writeI64(self.payDate)
    oprot:writeFieldEnd()
  end
  if self.coinBalance ~= nil then
    oprot:writeFieldBegin('coinBalance', TType.I32, 2)
    oprot:writeI32(self.coinBalance)
    oprot:writeFieldEnd()
  end
  if self.coin ~= nil then
    oprot:writeFieldBegin('coin', TType.I32, 3)
    oprot:writeI32(self.coin)
    oprot:writeFieldEnd()
  end
  if self.price ~= nil then
    oprot:writeFieldBegin('price', TType.STRING, 4)
    oprot:writeString(self.price)
    oprot:writeFieldEnd()
  end
  if self.title ~= nil then
    oprot:writeFieldBegin('title', TType.STRING, 5)
    oprot:writeString(self.title)
    oprot:writeFieldEnd()
  end
  if self.refund ~= nil then
    oprot:writeFieldBegin('refund', TType.BOOL, 6)
    oprot:writeBool(self.refund)
    oprot:writeFieldEnd()
  end
  if self.paySeq ~= nil then
    oprot:writeFieldBegin('paySeq', TType.STRING, 7)
    oprot:writeString(self.paySeq)
    oprot:writeFieldEnd()
  end
  if self.currency ~= nil then
    oprot:writeFieldBegin('currency', TType.STRING, 8)
    oprot:writeString(self.currency)
    oprot:writeFieldEnd()
  end
  if self.currencySign ~= nil then
    oprot:writeFieldBegin('currencySign', TType.STRING, 9)
    oprot:writeString(self.currencySign)
    oprot:writeFieldEnd()
  end
  if self.displayPrice ~= nil then
    oprot:writeFieldBegin('displayPrice', TType.STRING, 10)
    oprot:writeString(self.displayPrice)
    oprot:writeFieldEnd()
  end
  if self.payload ~= nil then
    oprot:writeFieldBegin('payload', TType.STRUCT, 11)
    self.payload:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 12)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinHistoryCondition = __TObject:new{
  start,
  size,
  language,
  eddt,
  appStoreCode
}

function CoinHistoryCondition:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.start = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.size = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.eddt = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.appStoreCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinHistoryCondition:write(oprot)
  oprot:writeStructBegin('CoinHistoryCondition')
  if self.start ~= nil then
    oprot:writeFieldBegin('start', TType.I64, 1)
    oprot:writeI64(self.start)
    oprot:writeFieldEnd()
  end
  if self.size ~= nil then
    oprot:writeFieldBegin('size', TType.I32, 2)
    oprot:writeI32(self.size)
    oprot:writeFieldEnd()
  end
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 3)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  if self.eddt ~= nil then
    oprot:writeFieldBegin('eddt', TType.STRING, 4)
    oprot:writeString(self.eddt)
    oprot:writeFieldEnd()
  end
  if self.appStoreCode ~= nil then
    oprot:writeFieldBegin('appStoreCode', TType.I32, 5)
    oprot:writeI32(self.appStoreCode)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinHistoryResult = __TObject:new{
  historys,
  balance,
  hasNext
}

function CoinHistoryResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.historys = {}
        local _etype163, _size160 = iprot:readListBegin()
        for _i=1,_size160 do
          local _elem164 = CoinHistory:new{}
          _elem164:read(iprot)
          table.insert(self.historys, _elem164)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.balance = Coin:new{}
        self.balance:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.hasNext = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinHistoryResult:write(oprot)
  oprot:writeStructBegin('CoinHistoryResult')
  if self.historys ~= nil then
    oprot:writeFieldBegin('historys', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.historys)
    for _,iter165 in ipairs(self.historys) do
      iter165:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.balance ~= nil then
    oprot:writeFieldBegin('balance', TType.STRUCT, 2)
    self.balance:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.hasNext ~= nil then
    oprot:writeFieldBegin('hasNext', TType.BOOL, 3)
    oprot:writeBool(self.hasNext)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinProductItem = __TObject:new{
  itemId,
  coin,
  freeCoin,
  currency,
  price,
  displayPrice,
  name,
  desc
}

function CoinProductItem:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.itemId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.coin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.freeCoin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.currency = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.price = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.displayPrice = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.desc = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinProductItem:write(oprot)
  oprot:writeStructBegin('CoinProductItem')
  if self.itemId ~= nil then
    oprot:writeFieldBegin('itemId', TType.STRING, 1)
    oprot:writeString(self.itemId)
    oprot:writeFieldEnd()
  end
  if self.coin ~= nil then
    oprot:writeFieldBegin('coin', TType.I32, 2)
    oprot:writeI32(self.coin)
    oprot:writeFieldEnd()
  end
  if self.freeCoin ~= nil then
    oprot:writeFieldBegin('freeCoin', TType.I32, 3)
    oprot:writeI32(self.freeCoin)
    oprot:writeFieldEnd()
  end
  if self.currency ~= nil then
    oprot:writeFieldBegin('currency', TType.STRING, 5)
    oprot:writeString(self.currency)
    oprot:writeFieldEnd()
  end
  if self.price ~= nil then
    oprot:writeFieldBegin('price', TType.STRING, 6)
    oprot:writeString(self.price)
    oprot:writeFieldEnd()
  end
  if self.displayPrice ~= nil then
    oprot:writeFieldBegin('displayPrice', TType.STRING, 7)
    oprot:writeString(self.displayPrice)
    oprot:writeFieldEnd()
  end
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 8)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.desc ~= nil then
    oprot:writeFieldBegin('desc', TType.STRING, 9)
    oprot:writeString(self.desc)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinPurchaseConfirm = __TObject:new{
  orderId,
  appStoreCode,
  receipt,
  signature,
  seller,
  requestType,
  ignoreReceipt
}

function CoinPurchaseConfirm:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.orderId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.appStoreCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.receipt = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.signature = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.seller = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.requestType = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.BOOL then
        self.ignoreReceipt = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinPurchaseConfirm:write(oprot)
  oprot:writeStructBegin('CoinPurchaseConfirm')
  if self.orderId ~= nil then
    oprot:writeFieldBegin('orderId', TType.STRING, 1)
    oprot:writeString(self.orderId)
    oprot:writeFieldEnd()
  end
  if self.appStoreCode ~= nil then
    oprot:writeFieldBegin('appStoreCode', TType.I32, 2)
    oprot:writeI32(self.appStoreCode)
    oprot:writeFieldEnd()
  end
  if self.receipt ~= nil then
    oprot:writeFieldBegin('receipt', TType.STRING, 3)
    oprot:writeString(self.receipt)
    oprot:writeFieldEnd()
  end
  if self.signature ~= nil then
    oprot:writeFieldBegin('signature', TType.STRING, 4)
    oprot:writeString(self.signature)
    oprot:writeFieldEnd()
  end
  if self.seller ~= nil then
    oprot:writeFieldBegin('seller', TType.STRING, 5)
    oprot:writeString(self.seller)
    oprot:writeFieldEnd()
  end
  if self.requestType ~= nil then
    oprot:writeFieldBegin('requestType', TType.STRING, 6)
    oprot:writeString(self.requestType)
    oprot:writeFieldEnd()
  end
  if self.ignoreReceipt ~= nil then
    oprot:writeFieldBegin('ignoreReceipt', TType.BOOL, 7)
    oprot:writeBool(self.ignoreReceipt)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinPurchaseReservation = __TObject:new{
  productId,
  country,
  currency,
  price,
  appStoreCode,
  language,
  pgCode,
  redirectUrl
}

function CoinPurchaseReservation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.productId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.country = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.currency = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.price = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.appStoreCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.pgCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.redirectUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinPurchaseReservation:write(oprot)
  oprot:writeStructBegin('CoinPurchaseReservation')
  if self.productId ~= nil then
    oprot:writeFieldBegin('productId', TType.STRING, 1)
    oprot:writeString(self.productId)
    oprot:writeFieldEnd()
  end
  if self.country ~= nil then
    oprot:writeFieldBegin('country', TType.STRING, 2)
    oprot:writeString(self.country)
    oprot:writeFieldEnd()
  end
  if self.currency ~= nil then
    oprot:writeFieldBegin('currency', TType.STRING, 3)
    oprot:writeString(self.currency)
    oprot:writeFieldEnd()
  end
  if self.price ~= nil then
    oprot:writeFieldBegin('price', TType.STRING, 4)
    oprot:writeString(self.price)
    oprot:writeFieldEnd()
  end
  if self.appStoreCode ~= nil then
    oprot:writeFieldBegin('appStoreCode', TType.I32, 5)
    oprot:writeI32(self.appStoreCode)
    oprot:writeFieldEnd()
  end
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 6)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  if self.pgCode ~= nil then
    oprot:writeFieldBegin('pgCode', TType.I32, 7)
    oprot:writeI32(self.pgCode)
    oprot:writeFieldEnd()
  end
  if self.redirectUrl ~= nil then
    oprot:writeFieldBegin('redirectUrl', TType.STRING, 8)
    oprot:writeString(self.redirectUrl)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinUseReservationItem = __TObject:new{
  itemId,
  itemName,
  amount
}

function CoinUseReservationItem:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.itemId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.itemName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.amount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinUseReservationItem:write(oprot)
  oprot:writeStructBegin('CoinUseReservationItem')
  if self.itemId ~= nil then
    oprot:writeFieldBegin('itemId', TType.STRING, 1)
    oprot:writeString(self.itemId)
    oprot:writeFieldEnd()
  end
  if self.itemName ~= nil then
    oprot:writeFieldBegin('itemName', TType.STRING, 2)
    oprot:writeString(self.itemName)
    oprot:writeFieldEnd()
  end
  if self.amount ~= nil then
    oprot:writeFieldBegin('amount', TType.I32, 3)
    oprot:writeI32(self.amount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinUseReservation = __TObject:new{
  channelId,
  shopOrderId,
  appStoreCode,
  items,
  country
}

function CoinUseReservation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.shopOrderId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.appStoreCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.items = {}
        local _etype169, _size166 = iprot:readListBegin()
        for _i=1,_size166 do
          local _elem170 = CoinUseReservationItem:new{}
          _elem170:read(iprot)
          table.insert(self.items, _elem170)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.country = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinUseReservation:write(oprot)
  oprot:writeStructBegin('CoinUseReservation')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 1)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  if self.shopOrderId ~= nil then
    oprot:writeFieldBegin('shopOrderId', TType.STRING, 2)
    oprot:writeString(self.shopOrderId)
    oprot:writeFieldEnd()
  end
  if self.appStoreCode ~= nil then
    oprot:writeFieldBegin('appStoreCode', TType.I32, 3)
    oprot:writeI32(self.appStoreCode)
    oprot:writeFieldEnd()
  end
  if self.items ~= nil then
    oprot:writeFieldBegin('items', TType.LIST, 4)
    oprot:writeListBegin(TType.STRUCT, #self.items)
    for _,iter171 in ipairs(self.items) do
      iter171:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.country ~= nil then
    oprot:writeFieldBegin('country', TType.STRING, 5)
    oprot:writeString(self.country)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CompactContact = __TObject:new{
  mid,
  createdTime,
  modifiedTime,
  status,
  settings,
  displayNameOverridden
}

function CompactContact:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.modifiedTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.status = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I64 then
        self.settings = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.displayNameOverridden = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CompactContact:write(oprot)
  oprot:writeStructBegin('CompactContact')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 2)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.modifiedTime ~= nil then
    oprot:writeFieldBegin('modifiedTime', TType.I64, 3)
    oprot:writeI64(self.modifiedTime)
    oprot:writeFieldEnd()
  end
  if self.status ~= nil then
    oprot:writeFieldBegin('status', TType.I32, 4)
    oprot:writeI32(self.status)
    oprot:writeFieldEnd()
  end
  if self.settings ~= nil then
    oprot:writeFieldBegin('settings', TType.I64, 5)
    oprot:writeI64(self.settings)
    oprot:writeFieldEnd()
  end
  if self.displayNameOverridden ~= nil then
    oprot:writeFieldBegin('displayNameOverridden', TType.STRING, 6)
    oprot:writeString(self.displayNameOverridden)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ContactModification = __TObject:new{
  type,
  luid,
  phones,
  emails,
  userids
}

function ContactModification:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.luid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.LIST then
        self.phones = {}
        local _etype175, _size172 = iprot:readListBegin()
        for _i=1,_size172 do
          local _elem176 = iprot:readString()
          table.insert(self.phones, _elem176)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.LIST then
        self.emails = {}
        local _etype180, _size177 = iprot:readListBegin()
        for _i=1,_size177 do
          local _elem181 = iprot:readString()
          table.insert(self.emails, _elem181)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.LIST then
        self.userids = {}
        local _etype185, _size182 = iprot:readListBegin()
        for _i=1,_size182 do
          local _elem186 = iprot:readString()
          table.insert(self.userids, _elem186)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ContactModification:write(oprot)
  oprot:writeStructBegin('ContactModification')
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 1)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.luid ~= nil then
    oprot:writeFieldBegin('luid', TType.STRING, 2)
    oprot:writeString(self.luid)
    oprot:writeFieldEnd()
  end
  if self.phones ~= nil then
    oprot:writeFieldBegin('phones', TType.LIST, 11)
    oprot:writeListBegin(TType.STRING, #self.phones)
    for _,iter187 in ipairs(self.phones) do
      oprot:writeString(iter187)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.emails ~= nil then
    oprot:writeFieldBegin('emails', TType.LIST, 12)
    oprot:writeListBegin(TType.STRING, #self.emails)
    for _,iter188 in ipairs(self.emails) do
      oprot:writeString(iter188)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.userids ~= nil then
    oprot:writeFieldBegin('userids', TType.LIST, 13)
    oprot:writeListBegin(TType.STRING, #self.userids)
    for _,iter189 in ipairs(self.userids) do
      oprot:writeString(iter189)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ContactRegistration = __TObject:new{
  contact,
  luid,
  contactType,
  contactKey
}

function ContactRegistration:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.contact = Contact:new{}
        self.contact:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.luid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.contactType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.contactKey = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ContactRegistration:write(oprot)
  oprot:writeStructBegin('ContactRegistration')
  if self.contact ~= nil then
    oprot:writeFieldBegin('contact', TType.STRUCT, 1)
    self.contact:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.luid ~= nil then
    oprot:writeFieldBegin('luid', TType.STRING, 10)
    oprot:writeString(self.luid)
    oprot:writeFieldEnd()
  end
  if self.contactType ~= nil then
    oprot:writeFieldBegin('contactType', TType.I32, 11)
    oprot:writeI32(self.contactType)
    oprot:writeFieldEnd()
  end
  if self.contactKey ~= nil then
    oprot:writeFieldBegin('contactKey', TType.STRING, 12)
    oprot:writeString(self.contactKey)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ContactReport = __TObject:new{
  mid,
  exists,
  contact
}

function ContactReport:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.exists = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.contact = Contact:new{}
        self.contact:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ContactReport:write(oprot)
  oprot:writeStructBegin('ContactReport')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.exists ~= nil then
    oprot:writeFieldBegin('exists', TType.BOOL, 2)
    oprot:writeBool(self.exists)
    oprot:writeFieldEnd()
  end
  if self.contact ~= nil then
    oprot:writeFieldBegin('contact', TType.STRUCT, 3)
    self.contact:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ContactReportResult = __TObject:new{
  mid,
  exists
}

function ContactReportResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.exists = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ContactReportResult:write(oprot)
  oprot:writeStructBegin('ContactReportResult')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.exists ~= nil then
    oprot:writeFieldBegin('exists', TType.BOOL, 2)
    oprot:writeBool(self.exists)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

DeviceInfo = __TObject:new{
  deviceName,
  systemName,
  systemVersion,
  model,
  carrierCode,
  carrierName,
  applicationType
}

function DeviceInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.deviceName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.systemName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.systemVersion = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.model = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.carrierCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.carrierName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I32 then
        self.applicationType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function DeviceInfo:write(oprot)
  oprot:writeStructBegin('DeviceInfo')
  if self.deviceName ~= nil then
    oprot:writeFieldBegin('deviceName', TType.STRING, 1)
    oprot:writeString(self.deviceName)
    oprot:writeFieldEnd()
  end
  if self.systemName ~= nil then
    oprot:writeFieldBegin('systemName', TType.STRING, 2)
    oprot:writeString(self.systemName)
    oprot:writeFieldEnd()
  end
  if self.systemVersion ~= nil then
    oprot:writeFieldBegin('systemVersion', TType.STRING, 3)
    oprot:writeString(self.systemVersion)
    oprot:writeFieldEnd()
  end
  if self.model ~= nil then
    oprot:writeFieldBegin('model', TType.STRING, 4)
    oprot:writeString(self.model)
    oprot:writeFieldEnd()
  end
  if self.carrierCode ~= nil then
    oprot:writeFieldBegin('carrierCode', TType.I32, 10)
    oprot:writeI32(self.carrierCode)
    oprot:writeFieldEnd()
  end
  if self.carrierName ~= nil then
    oprot:writeFieldBegin('carrierName', TType.STRING, 11)
    oprot:writeString(self.carrierName)
    oprot:writeFieldEnd()
  end
  if self.applicationType ~= nil then
    oprot:writeFieldBegin('applicationType', TType.I32, 20)
    oprot:writeI32(self.applicationType)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

EmailConfirmation = __TObject:new{
  usePasswordSet,
  email,
  password,
  ignoreDuplication
}

function EmailConfirmation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.usePasswordSet = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.email = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.password = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.ignoreDuplication = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function EmailConfirmation:write(oprot)
  oprot:writeStructBegin('EmailConfirmation')
  if self.usePasswordSet ~= nil then
    oprot:writeFieldBegin('usePasswordSet', TType.BOOL, 1)
    oprot:writeBool(self.usePasswordSet)
    oprot:writeFieldEnd()
  end
  if self.email ~= nil then
    oprot:writeFieldBegin('email', TType.STRING, 2)
    oprot:writeString(self.email)
    oprot:writeFieldEnd()
  end
  if self.password ~= nil then
    oprot:writeFieldBegin('password', TType.STRING, 3)
    oprot:writeString(self.password)
    oprot:writeFieldEnd()
  end
  if self.ignoreDuplication ~= nil then
    oprot:writeFieldBegin('ignoreDuplication', TType.BOOL, 4)
    oprot:writeBool(self.ignoreDuplication)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

EmailConfirmationSession = __TObject:new{
  emailConfirmationType,
  verifier,
  targetEmail
}

function EmailConfirmationSession:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.emailConfirmationType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.verifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.targetEmail = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function EmailConfirmationSession:write(oprot)
  oprot:writeStructBegin('EmailConfirmationSession')
  if self.emailConfirmationType ~= nil then
    oprot:writeFieldBegin('emailConfirmationType', TType.I32, 1)
    oprot:writeI32(self.emailConfirmationType)
    oprot:writeFieldEnd()
  end
  if self.verifier ~= nil then
    oprot:writeFieldBegin('verifier', TType.STRING, 2)
    oprot:writeString(self.verifier)
    oprot:writeFieldEnd()
  end
  if self.targetEmail ~= nil then
    oprot:writeFieldBegin('targetEmail', TType.STRING, 3)
    oprot:writeString(self.targetEmail)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FriendChannelMatrix = __TObject:new{
  channelId,
  representMid,
  count,
  point
}

function FriendChannelMatrix:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.representMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.count = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.point = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FriendChannelMatrix:write(oprot)
  oprot:writeStructBegin('FriendChannelMatrix')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 1)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  if self.representMid ~= nil then
    oprot:writeFieldBegin('representMid', TType.STRING, 2)
    oprot:writeString(self.representMid)
    oprot:writeFieldEnd()
  end
  if self.count ~= nil then
    oprot:writeFieldBegin('count', TType.I32, 3)
    oprot:writeI32(self.count)
    oprot:writeFieldEnd()
  end
  if self.point ~= nil then
    oprot:writeFieldBegin('point', TType.I32, 4)
    oprot:writeI32(self.point)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FriendChannelMatricesResponse = __TObject:new{
  expires,
  matrices
}

function FriendChannelMatricesResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.expires = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.matrices = {}
        local _etype193, _size190 = iprot:readListBegin()
        for _i=1,_size190 do
          local _elem194 = FriendChannelMatrix:new{}
          _elem194:read(iprot)
          table.insert(self.matrices, _elem194)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FriendChannelMatricesResponse:write(oprot)
  oprot:writeStructBegin('FriendChannelMatricesResponse')
  if self.expires ~= nil then
    oprot:writeFieldBegin('expires', TType.I64, 1)
    oprot:writeI64(self.expires)
    oprot:writeFieldEnd()
  end
  if self.matrices ~= nil then
    oprot:writeFieldBegin('matrices', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.matrices)
    for _,iter195 in ipairs(self.matrices) do
      iter195:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FriendRequest = __TObject:new{
  eMid,
  mid,
  direction,
  method,
  param,
  timestamp,
  seqId,
  displayName,
  picturePath,
  pictureStatus
}

function FriendRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.eMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.direction = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.method = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.param = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I64 then
        self.timestamp = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I64 then
        self.seqId = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.displayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.picturePath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.pictureStatus = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FriendRequest:write(oprot)
  oprot:writeStructBegin('FriendRequest')
  if self.eMid ~= nil then
    oprot:writeFieldBegin('eMid', TType.STRING, 1)
    oprot:writeString(self.eMid)
    oprot:writeFieldEnd()
  end
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 2)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.direction ~= nil then
    oprot:writeFieldBegin('direction', TType.I32, 3)
    oprot:writeI32(self.direction)
    oprot:writeFieldEnd()
  end
  if self.method ~= nil then
    oprot:writeFieldBegin('method', TType.I32, 4)
    oprot:writeI32(self.method)
    oprot:writeFieldEnd()
  end
  if self.param ~= nil then
    oprot:writeFieldBegin('param', TType.STRING, 5)
    oprot:writeString(self.param)
    oprot:writeFieldEnd()
  end
  if self.timestamp ~= nil then
    oprot:writeFieldBegin('timestamp', TType.I64, 6)
    oprot:writeI64(self.timestamp)
    oprot:writeFieldEnd()
  end
  if self.seqId ~= nil then
    oprot:writeFieldBegin('seqId', TType.I64, 7)
    oprot:writeI64(self.seqId)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRING, 10)
    oprot:writeString(self.displayName)
    oprot:writeFieldEnd()
  end
  if self.picturePath ~= nil then
    oprot:writeFieldBegin('picturePath', TType.STRING, 11)
    oprot:writeString(self.picturePath)
    oprot:writeFieldEnd()
  end
  if self.pictureStatus ~= nil then
    oprot:writeFieldBegin('pictureStatus', TType.STRING, 12)
    oprot:writeString(self.pictureStatus)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FriendRequestsInfo = __TObject:new{
  totalIncomingCount,
  totalOutgoingCount,
  recentIncomings,
  recentOutgoings,
  totalIncomingLimit,
  totalOutgoingLimit
}

function FriendRequestsInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.totalIncomingCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.totalOutgoingCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.recentIncomings = {}
        local _etype199, _size196 = iprot:readListBegin()
        for _i=1,_size196 do
          local _elem200 = FriendRequest:new{}
          _elem200:read(iprot)
          table.insert(self.recentIncomings, _elem200)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.recentOutgoings = {}
        local _etype204, _size201 = iprot:readListBegin()
        for _i=1,_size201 do
          local _elem205 = FriendRequest:new{}
          _elem205:read(iprot)
          table.insert(self.recentOutgoings, _elem205)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.totalIncomingLimit = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.totalOutgoingLimit = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FriendRequestsInfo:write(oprot)
  oprot:writeStructBegin('FriendRequestsInfo')
  if self.totalIncomingCount ~= nil then
    oprot:writeFieldBegin('totalIncomingCount', TType.I32, 1)
    oprot:writeI32(self.totalIncomingCount)
    oprot:writeFieldEnd()
  end
  if self.totalOutgoingCount ~= nil then
    oprot:writeFieldBegin('totalOutgoingCount', TType.I32, 2)
    oprot:writeI32(self.totalOutgoingCount)
    oprot:writeFieldEnd()
  end
  if self.recentIncomings ~= nil then
    oprot:writeFieldBegin('recentIncomings', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.recentIncomings)
    for _,iter206 in ipairs(self.recentIncomings) do
      iter206:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.recentOutgoings ~= nil then
    oprot:writeFieldBegin('recentOutgoings', TType.LIST, 4)
    oprot:writeListBegin(TType.STRUCT, #self.recentOutgoings)
    for _,iter207 in ipairs(self.recentOutgoings) do
      iter207:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.totalIncomingLimit ~= nil then
    oprot:writeFieldBegin('totalIncomingLimit', TType.I32, 5)
    oprot:writeI32(self.totalIncomingLimit)
    oprot:writeFieldEnd()
  end
  if self.totalOutgoingLimit ~= nil then
    oprot:writeFieldBegin('totalOutgoingLimit', TType.I32, 6)
    oprot:writeI32(self.totalOutgoingLimit)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Geolocation = __TObject:new{
  longitude,
  latitude
}

function Geolocation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.DOUBLE then
        self.longitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.DOUBLE then
        self.latitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Geolocation:write(oprot)
  oprot:writeStructBegin('Geolocation')
  if self.longitude ~= nil then
    oprot:writeFieldBegin('longitude', TType.DOUBLE, 1)
    oprot:writeDouble(self.longitude)
    oprot:writeFieldEnd()
  end
  if self.latitude ~= nil then
    oprot:writeFieldBegin('latitude', TType.DOUBLE, 2)
    oprot:writeDouble(self.latitude)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NotificationTarget = __TObject:new{
  applicationType,
  applicationVersion,
  region
}

function NotificationTarget:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.applicationType = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.applicationVersion = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.region = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NotificationTarget:write(oprot)
  oprot:writeStructBegin('NotificationTarget')
  if self.applicationType ~= nil then
    oprot:writeFieldBegin('applicationType', TType.STRING, 1)
    oprot:writeString(self.applicationType)
    oprot:writeFieldEnd()
  end
  if self.applicationVersion ~= nil then
    oprot:writeFieldBegin('applicationVersion', TType.STRING, 2)
    oprot:writeString(self.applicationVersion)
    oprot:writeFieldEnd()
  end
  if self.region ~= nil then
    oprot:writeFieldBegin('region', TType.STRING, 3)
    oprot:writeString(self.region)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GlobalEvent = __TObject:new{
  key,
  targets,
  createdTime,
  data,
  maxDelay
}

function GlobalEvent:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.key = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.targets = {}
        local _etype211, _size208 = iprot:readListBegin()
        for _i=1,_size208 do
          local _elem212 = NotificationTarget:new{}
          _elem212:read(iprot)
          table.insert(self.targets, _elem212)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I64 then
        self.data = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.maxDelay = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GlobalEvent:write(oprot)
  oprot:writeStructBegin('GlobalEvent')
  if self.key ~= nil then
    oprot:writeFieldBegin('key', TType.STRING, 1)
    oprot:writeString(self.key)
    oprot:writeFieldEnd()
  end
  if self.targets ~= nil then
    oprot:writeFieldBegin('targets', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.targets)
    for _,iter213 in ipairs(self.targets) do
      iter213:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 3)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.data ~= nil then
    oprot:writeFieldBegin('data', TType.I64, 4)
    oprot:writeI64(self.data)
    oprot:writeFieldEnd()
  end
  if self.maxDelay ~= nil then
    oprot:writeFieldBegin('maxDelay', TType.I32, 5)
    oprot:writeI32(self.maxDelay)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GroupPreference = __TObject:new{
  invitationTicket,
  favoriteTimestamp
}

function GroupPreference:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.invitationTicket = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.favoriteTimestamp = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GroupPreference:write(oprot)
  oprot:writeStructBegin('GroupPreference')
  if self.invitationTicket ~= nil then
    oprot:writeFieldBegin('invitationTicket', TType.STRING, 1)
    oprot:writeString(self.invitationTicket)
    oprot:writeFieldEnd()
  end
  if self.favoriteTimestamp ~= nil then
    oprot:writeFieldBegin('favoriteTimestamp', TType.I64, 2)
    oprot:writeI64(self.favoriteTimestamp)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Group = __TObject:new{
  id,
  createdTime,
  name,
  pictureStatus,
  preventedJoinByTicket,
  groupPreference,
  members,
  creator,
  invitee,
  notificationDisabled
}

function Group:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.pictureStatus = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.BOOL then
        self.preventedJoinByTicket = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRUCT then
        self.groupPreference = GroupPreference:new{}
        self.groupPreference:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.LIST then
        self.members = {}
        local _etype217, _size214 = iprot:readListBegin()
        for _i=1,_size214 do
          local _elem218 = Contact:new{}
          _elem218:read(iprot)
          table.insert(self.members, _elem218)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRUCT then
        self.creator = Contact:new{}
        self.creator:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.LIST then
        self.invitee = {}
        local _etype222, _size219 = iprot:readListBegin()
        for _i=1,_size219 do
          local _elem223 = Contact:new{}
          _elem223:read(iprot)
          table.insert(self.invitee, _elem223)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.BOOL then
        self.notificationDisabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Group:write(oprot)
  oprot:writeStructBegin('Group')
  if self.id ~= nil then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 2)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 10)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.pictureStatus ~= nil then
    oprot:writeFieldBegin('pictureStatus', TType.STRING, 11)
    oprot:writeString(self.pictureStatus)
    oprot:writeFieldEnd()
  end
  if self.preventedJoinByTicket ~= nil then
    oprot:writeFieldBegin('preventedJoinByTicket', TType.BOOL, 12)
    oprot:writeBool(self.preventedJoinByTicket)
    oprot:writeFieldEnd()
  end
  if self.groupPreference ~= nil then
    oprot:writeFieldBegin('groupPreference', TType.STRUCT, 13)
    self.groupPreference:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.members ~= nil then
    oprot:writeFieldBegin('members', TType.LIST, 20)
    oprot:writeListBegin(TType.STRUCT, #self.members)
    for _,iter224 in ipairs(self.members) do
      iter224:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.creator ~= nil then
    oprot:writeFieldBegin('creator', TType.STRUCT, 21)
    self.creator:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.invitee ~= nil then
    oprot:writeFieldBegin('invitee', TType.LIST, 22)
    oprot:writeListBegin(TType.STRUCT, #self.invitee)
    for _,iter225 in ipairs(self.invitee) do
      iter225:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.notificationDisabled ~= nil then
    oprot:writeFieldBegin('notificationDisabled', TType.BOOL, 31)
    oprot:writeBool(self.notificationDisabled)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

IdentityCredential = __TObject:new{
  provider,
  identifier,
  password
}

function IdentityCredential:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.provider = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.identifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.password = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function IdentityCredential:write(oprot)
  oprot:writeStructBegin('IdentityCredential')
  if self.provider ~= nil then
    oprot:writeFieldBegin('provider', TType.I32, 1)
    oprot:writeI32(self.provider)
    oprot:writeFieldEnd()
  end
  if self.identifier ~= nil then
    oprot:writeFieldBegin('identifier', TType.STRING, 2)
    oprot:writeString(self.identifier)
    oprot:writeFieldEnd()
  end
  if self.password ~= nil then
    oprot:writeFieldBegin('password', TType.STRING, 3)
    oprot:writeString(self.password)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LastReadMessageId = __TObject:new{
  mid,
  lastReadMessageId
}

function LastReadMessageId:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.lastReadMessageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LastReadMessageId:write(oprot)
  oprot:writeStructBegin('LastReadMessageId')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.lastReadMessageId ~= nil then
    oprot:writeFieldBegin('lastReadMessageId', TType.STRING, 2)
    oprot:writeString(self.lastReadMessageId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LastReadMessageIds = __TObject:new{
  chatId,
  lastReadMessageIds
}

function LastReadMessageIds:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.chatId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.lastReadMessageIds = {}
        local _etype229, _size226 = iprot:readListBegin()
        for _i=1,_size226 do
          local _elem230 = LastReadMessageId:new{}
          _elem230:read(iprot)
          table.insert(self.lastReadMessageIds, _elem230)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LastReadMessageIds:write(oprot)
  oprot:writeStructBegin('LastReadMessageIds')
  if self.chatId ~= nil then
    oprot:writeFieldBegin('chatId', TType.STRING, 1)
    oprot:writeString(self.chatId)
    oprot:writeFieldEnd()
  end
  if self.lastReadMessageIds ~= nil then
    oprot:writeFieldBegin('lastReadMessageIds', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.lastReadMessageIds)
    for _,iter231 in ipairs(self.lastReadMessageIds) do
      iter231:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

VerificationSessionData = __TObject:new{
  sessionId,
  method,
  callback,
  normalizedPhone,
  countryCode,
  nationalSignificantNumber,
  availableVerificationMethods
}

function VerificationSessionData:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.sessionId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.method = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.callback = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.normalizedPhone = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.countryCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.nationalSignificantNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.LIST then
        self.availableVerificationMethods = {}
        local _etype235, _size232 = iprot:readListBegin()
        for _i=1,_size232 do
          local _elem236 = iprot:readI32()
          table.insert(self.availableVerificationMethods, _elem236)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function VerificationSessionData:write(oprot)
  oprot:writeStructBegin('VerificationSessionData')
  if self.sessionId ~= nil then
    oprot:writeFieldBegin('sessionId', TType.STRING, 1)
    oprot:writeString(self.sessionId)
    oprot:writeFieldEnd()
  end
  if self.method ~= nil then
    oprot:writeFieldBegin('method', TType.I32, 2)
    oprot:writeI32(self.method)
    oprot:writeFieldEnd()
  end
  if self.callback ~= nil then
    oprot:writeFieldBegin('callback', TType.STRING, 3)
    oprot:writeString(self.callback)
    oprot:writeFieldEnd()
  end
  if self.normalizedPhone ~= nil then
    oprot:writeFieldBegin('normalizedPhone', TType.STRING, 4)
    oprot:writeString(self.normalizedPhone)
    oprot:writeFieldEnd()
  end
  if self.countryCode ~= nil then
    oprot:writeFieldBegin('countryCode', TType.STRING, 5)
    oprot:writeString(self.countryCode)
    oprot:writeFieldEnd()
  end
  if self.nationalSignificantNumber ~= nil then
    oprot:writeFieldBegin('nationalSignificantNumber', TType.STRING, 6)
    oprot:writeString(self.nationalSignificantNumber)
    oprot:writeFieldEnd()
  end
  if self.availableVerificationMethods ~= nil then
    oprot:writeFieldBegin('availableVerificationMethods', TType.LIST, 7)
    oprot:writeListBegin(TType.I32, #self.availableVerificationMethods)
    for _,iter237 in ipairs(self.availableVerificationMethods) do
      oprot:writeI32(iter237)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LoginResult = __TObject:new{
  authToken,
  certificate,
  verifier,
  pinCode,
  type,
  lastPrimaryBindTime,
  displayMessage,
  sessionForSMSConfirm
}

function LoginResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.certificate = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.verifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.pinCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I64 then
        self.lastPrimaryBindTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.displayMessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRUCT then
        self.sessionForSMSConfirm = VerificationSessionData:new{}
        self.sessionForSMSConfirm:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LoginResult:write(oprot)
  oprot:writeStructBegin('LoginResult')
  if self.authToken ~= nil then
    oprot:writeFieldBegin('authToken', TType.STRING, 1)
    oprot:writeString(self.authToken)
    oprot:writeFieldEnd()
  end
  if self.certificate ~= nil then
    oprot:writeFieldBegin('certificate', TType.STRING, 2)
    oprot:writeString(self.certificate)
    oprot:writeFieldEnd()
  end
  if self.verifier ~= nil then
    oprot:writeFieldBegin('verifier', TType.STRING, 3)
    oprot:writeString(self.verifier)
    oprot:writeFieldEnd()
  end
  if self.pinCode ~= nil then
    oprot:writeFieldBegin('pinCode', TType.STRING, 4)
    oprot:writeString(self.pinCode)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 5)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.lastPrimaryBindTime ~= nil then
    oprot:writeFieldBegin('lastPrimaryBindTime', TType.I64, 6)
    oprot:writeI64(self.lastPrimaryBindTime)
    oprot:writeFieldEnd()
  end
  if self.displayMessage ~= nil then
    oprot:writeFieldBegin('displayMessage', TType.STRING, 7)
    oprot:writeString(self.displayMessage)
    oprot:writeFieldEnd()
  end
  if self.sessionForSMSConfirm ~= nil then
    oprot:writeFieldBegin('sessionForSMSConfirm', TType.STRUCT, 8)
    self.sessionForSMSConfirm:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LoginRequest = __TObject:new{
  type,
  identityProvider,
  identifier,
  password,
  keepLoggedIn,
  accessLocation,
  systemName,
  certificate,
  verifier,
  secret,
  e2eeVersion
}

function LoginRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.identityProvider = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.identifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.password = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.keepLoggedIn = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.accessLocation = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.systemName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.certificate = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.verifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.secret = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.e2eeVersion = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LoginRequest:write(oprot)
  oprot:writeStructBegin('LoginRequest')
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 1)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.identityProvider ~= nil then
    oprot:writeFieldBegin('identityProvider', TType.I32, 2)
    oprot:writeI32(self.identityProvider)
    oprot:writeFieldEnd()
  end
  if self.identifier ~= nil then
    oprot:writeFieldBegin('identifier', TType.STRING, 3)
    oprot:writeString(self.identifier)
    oprot:writeFieldEnd()
  end
  if self.password ~= nil then
    oprot:writeFieldBegin('password', TType.STRING, 4)
    oprot:writeString(self.password)
    oprot:writeFieldEnd()
  end
  if self.keepLoggedIn ~= nil then
    oprot:writeFieldBegin('keepLoggedIn', TType.BOOL, 5)
    oprot:writeBool(self.keepLoggedIn)
    oprot:writeFieldEnd()
  end
  if self.accessLocation ~= nil then
    oprot:writeFieldBegin('accessLocation', TType.STRING, 6)
    oprot:writeString(self.accessLocation)
    oprot:writeFieldEnd()
  end
  if self.systemName ~= nil then
    oprot:writeFieldBegin('systemName', TType.STRING, 7)
    oprot:writeString(self.systemName)
    oprot:writeFieldEnd()
  end
  if self.certificate ~= nil then
    oprot:writeFieldBegin('certificate', TType.STRING, 8)
    oprot:writeString(self.certificate)
    oprot:writeFieldEnd()
  end
  if self.verifier ~= nil then
    oprot:writeFieldBegin('verifier', TType.STRING, 9)
    oprot:writeString(self.verifier)
    oprot:writeFieldEnd()
  end
  if self.secret ~= nil then
    oprot:writeFieldBegin('secret', TType.STRING, 10)
    oprot:writeString(self.secret)
    oprot:writeFieldEnd()
  end
  if self.e2eeVersion ~= nil then
    oprot:writeFieldBegin('e2eeVersion', TType.I32, 11)
    oprot:writeI32(self.e2eeVersion)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LoginSession = __TObject:new{
  tokenKey,
  expirationTime,
  applicationType,
  systemName,
  accessLocation
}

function LoginSession:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.tokenKey = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.expirationTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.applicationType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.systemName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.accessLocation = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LoginSession:write(oprot)
  oprot:writeStructBegin('LoginSession')
  if self.tokenKey ~= nil then
    oprot:writeFieldBegin('tokenKey', TType.STRING, 1)
    oprot:writeString(self.tokenKey)
    oprot:writeFieldEnd()
  end
  if self.expirationTime ~= nil then
    oprot:writeFieldBegin('expirationTime', TType.I64, 3)
    oprot:writeI64(self.expirationTime)
    oprot:writeFieldEnd()
  end
  if self.applicationType ~= nil then
    oprot:writeFieldBegin('applicationType', TType.I32, 11)
    oprot:writeI32(self.applicationType)
    oprot:writeFieldEnd()
  end
  if self.systemName ~= nil then
    oprot:writeFieldBegin('systemName', TType.STRING, 12)
    oprot:writeString(self.systemName)
    oprot:writeFieldEnd()
  end
  if self.accessLocation ~= nil then
    oprot:writeFieldBegin('accessLocation', TType.STRING, 22)
    oprot:writeString(self.accessLocation)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Message = __TObject:new{
  _from,
  to,
  toType,
  id,
  createdTime,
  deliveredTime,
  text,
  location,
  hasContent,
  contentType,
  contentPreview,
  contentMetadata,
  sessionId,
  chunks,
  relatedMessageId,
  messageRelationType,
  readCount,
  relatedMessageServiceCode
}

function Message:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self._from = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.to = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.toType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I64 then
        self.deliveredTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.text = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRUCT then
        self.location = Location:new{}
        self.location:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.BOOL then
        self.hasContent = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I32 then
        self.contentType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.STRING then
        self.contentPreview = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.MAP then
        self.contentMetadata = {}
        local _ktype239, _vtype240, _size238 = iprot:readMapBegin() 
        for _i=1,_size238 do
          local _key242 = iprot:readString()
          local _val243 = iprot:readString()
          self.contentMetadata[_key242] = _val243
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.BYTE then
        self.sessionId = iprot:readByte()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.LIST then
        self.chunks = {}
        local _etype247, _size244 = iprot:readListBegin()
        for _i=1,_size244 do
          local _elem248 = iprot:readString()
          table.insert(self.chunks, _elem248)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.relatedMessageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.I32 then
        self.messageRelationType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.I64 then
        self.readCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.I32 then
        self.relatedMessageServiceCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Message:write(oprot)
  oprot:writeStructBegin('Message')
  if self._from ~= nil then
    oprot:writeFieldBegin('_from', TType.STRING, 1)
    oprot:writeString(self._from)
    oprot:writeFieldEnd()
  end
  if self.to ~= nil then
    oprot:writeFieldBegin('to', TType.STRING, 2)
    oprot:writeString(self.to)
    oprot:writeFieldEnd()
  end
  if self.toType ~= nil then
    oprot:writeFieldBegin('toType', TType.I32, 3)
    oprot:writeI32(self.toType)
    oprot:writeFieldEnd()
  end
  if self.id ~= nil then
    oprot:writeFieldBegin('id', TType.STRING, 4)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 5)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.deliveredTime ~= nil then
    oprot:writeFieldBegin('deliveredTime', TType.I64, 6)
    oprot:writeI64(self.deliveredTime)
    oprot:writeFieldEnd()
  end
  if self.text ~= nil then
    oprot:writeFieldBegin('text', TType.STRING, 10)
    oprot:writeString(self.text)
    oprot:writeFieldEnd()
  end
  if self.location ~= nil then
    oprot:writeFieldBegin('location', TType.STRUCT, 11)
    self.location:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.hasContent ~= nil then
    oprot:writeFieldBegin('hasContent', TType.BOOL, 14)
    oprot:writeBool(self.hasContent)
    oprot:writeFieldEnd()
  end
  if self.contentType ~= nil then
    oprot:writeFieldBegin('contentType', TType.I32, 15)
    oprot:writeI32(self.contentType)
    oprot:writeFieldEnd()
  end
  if self.contentPreview ~= nil then
    oprot:writeFieldBegin('contentPreview', TType.STRING, 17)
    oprot:writeString(self.contentPreview)
    oprot:writeFieldEnd()
  end
  if self.contentMetadata ~= nil then
    oprot:writeFieldBegin('contentMetadata', TType.MAP, 18)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.contentMetadata))
    for kiter249,viter250 in pairs(self.contentMetadata) do
      oprot:writeString(kiter249)
      oprot:writeString(viter250)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.sessionId ~= nil then
    oprot:writeFieldBegin('sessionId', TType.BYTE, 19)
    oprot:writeByte(self.sessionId)
    oprot:writeFieldEnd()
  end
  if self.chunks ~= nil then
    oprot:writeFieldBegin('chunks', TType.LIST, 20)
    oprot:writeListBegin(TType.STRING, #self.chunks)
    for _,iter251 in ipairs(self.chunks) do
      oprot:writeString(iter251)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.relatedMessageId ~= nil then
    oprot:writeFieldBegin('relatedMessageId', TType.STRING, 21)
    oprot:writeString(self.relatedMessageId)
    oprot:writeFieldEnd()
  end
  if self.messageRelationType ~= nil then
    oprot:writeFieldBegin('messageRelationType', TType.I32, 22)
    oprot:writeI32(self.messageRelationType)
    oprot:writeFieldEnd()
  end
  if self.readCount ~= nil then
    oprot:writeFieldBegin('readCount', TType.I64, 23)
    oprot:writeI64(self.readCount)
    oprot:writeFieldEnd()
  end
  if self.relatedMessageServiceCode ~= nil then
    oprot:writeFieldBegin('relatedMessageServiceCode', TType.I32, 24)
    oprot:writeI32(self.relatedMessageServiceCode)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareMessage = __TObject:new{
  message,
  fromType,
  squareMessageRevision
}

function SquareMessage:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.message = Message:new{}
        self.message:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.fromType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I64 then
        self.squareMessageRevision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareMessage:write(oprot)
  oprot:writeStructBegin('SquareMessage')
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRUCT, 1)
    self.message:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.fromType ~= nil then
    oprot:writeFieldBegin('fromType', TType.I32, 3)
    oprot:writeI32(self.fromType)
    oprot:writeFieldEnd()
  end
  if self.squareMessageRevision ~= nil then
    oprot:writeFieldBegin('squareMessageRevision', TType.I64, 4)
    oprot:writeI64(self.squareMessageRevision)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareChatStatusWithoutMessage = __TObject:new{
  memberCount,
  unreadMessageCount
}

function SquareChatStatusWithoutMessage:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.memberCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.unreadMessageCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareChatStatusWithoutMessage:write(oprot)
  oprot:writeStructBegin('SquareChatStatusWithoutMessage')
  if self.memberCount ~= nil then
    oprot:writeFieldBegin('memberCount', TType.I32, 1)
    oprot:writeI32(self.memberCount)
    oprot:writeFieldEnd()
  end
  if self.unreadMessageCount ~= nil then
    oprot:writeFieldBegin('unreadMessageCount', TType.I32, 2)
    oprot:writeI32(self.unreadMessageCount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareChatStatus = __TObject:new{
  lastMessage,
  senderDisplayName,
  otherStatus
}

function SquareChatStatus:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.lastMessage = SquareMessage:new{}
        self.lastMessage:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.senderDisplayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRUCT then
        self.otherStatus = SquareChatStatusWithoutMessage:new{}
        self.otherStatus:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareChatStatus:write(oprot)
  oprot:writeStructBegin('SquareChatStatus')
  if self.lastMessage ~= nil then
    oprot:writeFieldBegin('lastMessage', TType.STRUCT, 3)
    self.lastMessage:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.senderDisplayName ~= nil then
    oprot:writeFieldBegin('senderDisplayName', TType.STRING, 4)
    oprot:writeString(self.senderDisplayName)
    oprot:writeFieldEnd()
  end
  if self.otherStatus ~= nil then
    oprot:writeFieldBegin('otherStatus', TType.STRUCT, 5)
    self.otherStatus:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareChatMember = __TObject:new{
  squareMemberMid,
  squareChatMid,
  revision,
  membershipState,
  notificationForMessage
}

function SquareChatMember:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMemberMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.membershipState = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.notificationForMessage = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareChatMember:write(oprot)
  oprot:writeStructBegin('SquareChatMember')
  if self.squareMemberMid ~= nil then
    oprot:writeFieldBegin('squareMemberMid', TType.STRING, 1)
    oprot:writeString(self.squareMemberMid)
    oprot:writeFieldEnd()
  end
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 2)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 3)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.membershipState ~= nil then
    oprot:writeFieldBegin('membershipState', TType.I32, 4)
    oprot:writeI32(self.membershipState)
    oprot:writeFieldEnd()
  end
  if self.notificationForMessage ~= nil then
    oprot:writeFieldBegin('notificationForMessage', TType.BOOL, 5)
    oprot:writeBool(self.notificationForMessage)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

MessageOperation = __TObject:new{
  revision,
  createdTime,
  type,
  reqSeq,
  status,
  param1,
  param2,
  param3,
  message
}

function MessageOperation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.reqSeq = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.status = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.param1 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.param2 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.param3 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRUCT then
        self.message = Message:new{}
        self.message:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function MessageOperation:write(oprot)
  oprot:writeStructBegin('MessageOperation')
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 1)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 2)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 3)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.reqSeq ~= nil then
    oprot:writeFieldBegin('reqSeq', TType.I32, 4)
    oprot:writeI32(self.reqSeq)
    oprot:writeFieldEnd()
  end
  if self.status ~= nil then
    oprot:writeFieldBegin('status', TType.I32, 5)
    oprot:writeI32(self.status)
    oprot:writeFieldEnd()
  end
  if self.param1 ~= nil then
    oprot:writeFieldBegin('param1', TType.STRING, 10)
    oprot:writeString(self.param1)
    oprot:writeFieldEnd()
  end
  if self.param2 ~= nil then
    oprot:writeFieldBegin('param2', TType.STRING, 11)
    oprot:writeString(self.param2)
    oprot:writeFieldEnd()
  end
  if self.param3 ~= nil then
    oprot:writeFieldBegin('param3', TType.STRING, 12)
    oprot:writeString(self.param3)
    oprot:writeFieldEnd()
  end
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRUCT, 20)
    self.message:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

MessageOperations = __TObject:new{
  operations,
  endFlag
}

function MessageOperations:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.operations = {}
        local _etype255, _size252 = iprot:readListBegin()
        for _i=1,_size252 do
          local _elem256 = MessageOperation:new{}
          _elem256:read(iprot)
          table.insert(self.operations, _elem256)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.endFlag = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function MessageOperations:write(oprot)
  oprot:writeStructBegin('MessageOperations')
  if self.operations ~= nil then
    oprot:writeFieldBegin('operations', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.operations)
    for _,iter257 in ipairs(self.operations) do
      iter257:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.endFlag ~= nil then
    oprot:writeFieldBegin('endFlag', TType.BOOL, 2)
    oprot:writeBool(self.endFlag)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

MessageStoreResult = __TObject:new{
  requestId,
  messageIds
}

function MessageStoreResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.messageIds = {}
        local _etype261, _size258 = iprot:readListBegin()
        for _i=1,_size258 do
          local _elem262 = iprot:readString()
          table.insert(self.messageIds, _elem262)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function MessageStoreResult:write(oprot)
  oprot:writeStructBegin('MessageStoreResult')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.messageIds ~= nil then
    oprot:writeFieldBegin('messageIds', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.messageIds)
    for _,iter263 in ipairs(self.messageIds) do
      oprot:writeString(iter263)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

MetaProfile = __TObject:new{
  createTime,
  regionCode,
  identities
}

function MetaProfile:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.createTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.regionCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.identities = {}
        local _ktype265, _vtype266, _size264 = iprot:readMapBegin() 
        for _i=1,_size264 do
          local _key268 = iprot:readI32()
          local _val269 = iprot:readString()
          self.identities[_key268] = _val269
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function MetaProfile:write(oprot)
  oprot:writeStructBegin('MetaProfile')
  if self.createTime ~= nil then
    oprot:writeFieldBegin('createTime', TType.I64, 1)
    oprot:writeI64(self.createTime)
    oprot:writeFieldEnd()
  end
  if self.regionCode ~= nil then
    oprot:writeFieldBegin('regionCode', TType.STRING, 2)
    oprot:writeString(self.regionCode)
    oprot:writeFieldEnd()
  end
  if self.identities ~= nil then
    oprot:writeFieldBegin('identities', TType.MAP, 3)
    oprot:writeMapBegin(TType.I32, TType.STRING, ttable_size(self.identities))
    for kiter270,viter271 in pairs(self.identities) do
      oprot:writeI32(kiter270)
      oprot:writeString(viter271)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NotificationItem = __TObject:new{
  id,
  _from,
  to,
  fromChannel,
  toChannel,
  revision,
  createdTime,
  content
}

function NotificationItem:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self._from = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.to = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.fromChannel = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.toChannel = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.MAP then
        self.content = {}
        local _ktype273, _vtype274, _size272 = iprot:readMapBegin() 
        for _i=1,_size272 do
          local _key276 = iprot:readString()
          local _val277 = iprot:readString()
          self.content[_key276] = _val277
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NotificationItem:write(oprot)
  oprot:writeStructBegin('NotificationItem')
  if self.id ~= nil then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self._from ~= nil then
    oprot:writeFieldBegin('_from', TType.STRING, 2)
    oprot:writeString(self._from)
    oprot:writeFieldEnd()
  end
  if self.to ~= nil then
    oprot:writeFieldBegin('to', TType.STRING, 3)
    oprot:writeString(self.to)
    oprot:writeFieldEnd()
  end
  if self.fromChannel ~= nil then
    oprot:writeFieldBegin('fromChannel', TType.STRING, 4)
    oprot:writeString(self.fromChannel)
    oprot:writeFieldEnd()
  end
  if self.toChannel ~= nil then
    oprot:writeFieldBegin('toChannel', TType.STRING, 5)
    oprot:writeString(self.toChannel)
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 7)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 8)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.content ~= nil then
    oprot:writeFieldBegin('content', TType.MAP, 9)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.content))
    for kiter278,viter279 in pairs(self.content) do
      oprot:writeString(kiter278)
      oprot:writeString(viter279)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NotificationFetchResult = __TObject:new{
  fetchMode,
  itemList
}

function NotificationFetchResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.fetchMode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.itemList = {}
        local _etype283, _size280 = iprot:readListBegin()
        for _i=1,_size280 do
          local _elem284 = NotificationItem:new{}
          _elem284:read(iprot)
          table.insert(self.itemList, _elem284)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NotificationFetchResult:write(oprot)
  oprot:writeStructBegin('NotificationFetchResult')
  if self.fetchMode ~= nil then
    oprot:writeFieldBegin('fetchMode', TType.I32, 1)
    oprot:writeI32(self.fetchMode)
    oprot:writeFieldEnd()
  end
  if self.itemList ~= nil then
    oprot:writeFieldBegin('itemList', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.itemList)
    for _,iter285 in ipairs(self.itemList) do
      iter285:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Operation = __TObject:new{
  revision,
  createdTime,
  type,
  reqSeq,
  checksum,
  status,
  param1,
  param2,
  param3,
  message
}

function Operation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.reqSeq = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.checksum = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.status = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.param1 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.param2 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.param3 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRUCT then
        self.message = Message:new{}
        self.message:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Operation:write(oprot)
  oprot:writeStructBegin('Operation')
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 1)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 2)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 3)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.reqSeq ~= nil then
    oprot:writeFieldBegin('reqSeq', TType.I32, 4)
    oprot:writeI32(self.reqSeq)
    oprot:writeFieldEnd()
  end
  if self.checksum ~= nil then
    oprot:writeFieldBegin('checksum', TType.STRING, 5)
    oprot:writeString(self.checksum)
    oprot:writeFieldEnd()
  end
  if self.status ~= nil then
    oprot:writeFieldBegin('status', TType.I32, 7)
    oprot:writeI32(self.status)
    oprot:writeFieldEnd()
  end
  if self.param1 ~= nil then
    oprot:writeFieldBegin('param1', TType.STRING, 10)
    oprot:writeString(self.param1)
    oprot:writeFieldEnd()
  end
  if self.param2 ~= nil then
    oprot:writeFieldBegin('param2', TType.STRING, 11)
    oprot:writeString(self.param2)
    oprot:writeFieldEnd()
  end
  if self.param3 ~= nil then
    oprot:writeFieldBegin('param3', TType.STRING, 12)
    oprot:writeString(self.param3)
    oprot:writeFieldEnd()
  end
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRUCT, 20)
    self.message:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PaymentReservation = __TObject:new{
  receiverMid,
  productId,
  language,
  location,
  currency,
  price,
  appStoreCode,
  messageText,
  messageTemplate,
  packageId
}

function PaymentReservation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.receiverMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.productId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.location = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.currency = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.price = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.appStoreCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.messageText = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.I32 then
        self.messageTemplate = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I64 then
        self.packageId = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PaymentReservation:write(oprot)
  oprot:writeStructBegin('PaymentReservation')
  if self.receiverMid ~= nil then
    oprot:writeFieldBegin('receiverMid', TType.STRING, 1)
    oprot:writeString(self.receiverMid)
    oprot:writeFieldEnd()
  end
  if self.productId ~= nil then
    oprot:writeFieldBegin('productId', TType.STRING, 2)
    oprot:writeString(self.productId)
    oprot:writeFieldEnd()
  end
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 3)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  if self.location ~= nil then
    oprot:writeFieldBegin('location', TType.STRING, 4)
    oprot:writeString(self.location)
    oprot:writeFieldEnd()
  end
  if self.currency ~= nil then
    oprot:writeFieldBegin('currency', TType.STRING, 5)
    oprot:writeString(self.currency)
    oprot:writeFieldEnd()
  end
  if self.price ~= nil then
    oprot:writeFieldBegin('price', TType.STRING, 6)
    oprot:writeString(self.price)
    oprot:writeFieldEnd()
  end
  if self.appStoreCode ~= nil then
    oprot:writeFieldBegin('appStoreCode', TType.I32, 7)
    oprot:writeI32(self.appStoreCode)
    oprot:writeFieldEnd()
  end
  if self.messageText ~= nil then
    oprot:writeFieldBegin('messageText', TType.STRING, 8)
    oprot:writeString(self.messageText)
    oprot:writeFieldEnd()
  end
  if self.messageTemplate ~= nil then
    oprot:writeFieldBegin('messageTemplate', TType.I32, 9)
    oprot:writeI32(self.messageTemplate)
    oprot:writeFieldEnd()
  end
  if self.packageId ~= nil then
    oprot:writeFieldBegin('packageId', TType.I64, 10)
    oprot:writeI64(self.packageId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PaymentReservationResult = __TObject:new{
  orderId,
  confirmUrl,
  extras
}

function PaymentReservationResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.orderId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.confirmUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.extras = {}
        local _ktype287, _vtype288, _size286 = iprot:readMapBegin() 
        for _i=1,_size286 do
          local _key290 = iprot:readString()
          local _val291 = iprot:readString()
          self.extras[_key290] = _val291
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PaymentReservationResult:write(oprot)
  oprot:writeStructBegin('PaymentReservationResult')
  if self.orderId ~= nil then
    oprot:writeFieldBegin('orderId', TType.STRING, 1)
    oprot:writeString(self.orderId)
    oprot:writeFieldEnd()
  end
  if self.confirmUrl ~= nil then
    oprot:writeFieldBegin('confirmUrl', TType.STRING, 2)
    oprot:writeString(self.confirmUrl)
    oprot:writeFieldEnd()
  end
  if self.extras ~= nil then
    oprot:writeFieldBegin('extras', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extras))
    for kiter292,viter293 in pairs(self.extras) do
      oprot:writeString(kiter292)
      oprot:writeString(viter293)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Product = __TObject:new{
  productId,
  packageId,
  version,
  authorName,
  onSale,
  validDays,
  saleType,
  copyright,
  title,
  descriptionText,
  shopOrderId,
  fromMid,
  toMid,
  validUntil,
  priceTier,
  price,
  currency,
  currencySymbol,
  paymentType,
  createDate,
  ownFlag,
  eventType,
  urlSchema,
  downloadUrl,
  buddyMid,
  publishSince,
  newFlag,
  missionFlag,
  categories,
  missionButtonText,
  missionShortDescription,
  authorId,
  grantedByDefault,
  displayOrder,
  availableForPresent,
  availableForMyself,
  hasAnimation,
  hasSound,
  recommendationsEnabled,
  stickerResourceType
}

function Product:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.productId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.packageId = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.version = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.authorName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.onSale = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.validDays = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.saleType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.copyright = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.title = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.descriptionText = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I64 then
        self.shopOrderId = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.fromMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRING then
        self.toMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I64 then
        self.validUntil = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I32 then
        self.priceTier = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.STRING then
        self.price = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.STRING then
        self.currency = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.STRING then
        self.currencySymbol = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.I32 then
        self.paymentType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I64 then
        self.createDate = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.BOOL then
        self.ownFlag = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.I32 then
        self.eventType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.STRING then
        self.urlSchema = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.STRING then
        self.downloadUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.STRING then
        self.buddyMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.I64 then
        self.publishSince = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 27 then
      if ftype == TType.BOOL then
        self.newFlag = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 28 then
      if ftype == TType.BOOL then
        self.missionFlag = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 29 then
      if ftype == TType.LIST then
        self.categories = {}
        local _etype297, _size294 = iprot:readListBegin()
        for _i=1,_size294 do
          local _elem298 = ProductCategory:new{}
          _elem298:read(iprot)
          table.insert(self.categories, _elem298)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.missionButtonText = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.STRING then
        self.missionShortDescription = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.STRING then
        self.authorId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.BOOL then
        self.grantedByDefault = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.I32 then
        self.displayOrder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 43 then
      if ftype == TType.BOOL then
        self.availableForPresent = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 44 then
      if ftype == TType.BOOL then
        self.availableForMyself = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.BOOL then
        self.hasAnimation = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 52 then
      if ftype == TType.BOOL then
        self.hasSound = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 53 then
      if ftype == TType.BOOL then
        self.recommendationsEnabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 54 then
      if ftype == TType.I32 then
        self.stickerResourceType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Product:write(oprot)
  oprot:writeStructBegin('Product')
  if self.productId ~= nil then
    oprot:writeFieldBegin('productId', TType.STRING, 1)
    oprot:writeString(self.productId)
    oprot:writeFieldEnd()
  end
  if self.packageId ~= nil then
    oprot:writeFieldBegin('packageId', TType.I64, 2)
    oprot:writeI64(self.packageId)
    oprot:writeFieldEnd()
  end
  if self.version ~= nil then
    oprot:writeFieldBegin('version', TType.I32, 3)
    oprot:writeI32(self.version)
    oprot:writeFieldEnd()
  end
  if self.authorName ~= nil then
    oprot:writeFieldBegin('authorName', TType.STRING, 4)
    oprot:writeString(self.authorName)
    oprot:writeFieldEnd()
  end
  if self.onSale ~= nil then
    oprot:writeFieldBegin('onSale', TType.BOOL, 5)
    oprot:writeBool(self.onSale)
    oprot:writeFieldEnd()
  end
  if self.validDays ~= nil then
    oprot:writeFieldBegin('validDays', TType.I32, 6)
    oprot:writeI32(self.validDays)
    oprot:writeFieldEnd()
  end
  if self.saleType ~= nil then
    oprot:writeFieldBegin('saleType', TType.I32, 7)
    oprot:writeI32(self.saleType)
    oprot:writeFieldEnd()
  end
  if self.copyright ~= nil then
    oprot:writeFieldBegin('copyright', TType.STRING, 8)
    oprot:writeString(self.copyright)
    oprot:writeFieldEnd()
  end
  if self.title ~= nil then
    oprot:writeFieldBegin('title', TType.STRING, 9)
    oprot:writeString(self.title)
    oprot:writeFieldEnd()
  end
  if self.descriptionText ~= nil then
    oprot:writeFieldBegin('descriptionText', TType.STRING, 10)
    oprot:writeString(self.descriptionText)
    oprot:writeFieldEnd()
  end
  if self.shopOrderId ~= nil then
    oprot:writeFieldBegin('shopOrderId', TType.I64, 11)
    oprot:writeI64(self.shopOrderId)
    oprot:writeFieldEnd()
  end
  if self.fromMid ~= nil then
    oprot:writeFieldBegin('fromMid', TType.STRING, 12)
    oprot:writeString(self.fromMid)
    oprot:writeFieldEnd()
  end
  if self.toMid ~= nil then
    oprot:writeFieldBegin('toMid', TType.STRING, 13)
    oprot:writeString(self.toMid)
    oprot:writeFieldEnd()
  end
  if self.validUntil ~= nil then
    oprot:writeFieldBegin('validUntil', TType.I64, 14)
    oprot:writeI64(self.validUntil)
    oprot:writeFieldEnd()
  end
  if self.priceTier ~= nil then
    oprot:writeFieldBegin('priceTier', TType.I32, 15)
    oprot:writeI32(self.priceTier)
    oprot:writeFieldEnd()
  end
  if self.price ~= nil then
    oprot:writeFieldBegin('price', TType.STRING, 16)
    oprot:writeString(self.price)
    oprot:writeFieldEnd()
  end
  if self.currency ~= nil then
    oprot:writeFieldBegin('currency', TType.STRING, 17)
    oprot:writeString(self.currency)
    oprot:writeFieldEnd()
  end
  if self.currencySymbol ~= nil then
    oprot:writeFieldBegin('currencySymbol', TType.STRING, 18)
    oprot:writeString(self.currencySymbol)
    oprot:writeFieldEnd()
  end
  if self.paymentType ~= nil then
    oprot:writeFieldBegin('paymentType', TType.I32, 19)
    oprot:writeI32(self.paymentType)
    oprot:writeFieldEnd()
  end
  if self.createDate ~= nil then
    oprot:writeFieldBegin('createDate', TType.I64, 20)
    oprot:writeI64(self.createDate)
    oprot:writeFieldEnd()
  end
  if self.ownFlag ~= nil then
    oprot:writeFieldBegin('ownFlag', TType.BOOL, 21)
    oprot:writeBool(self.ownFlag)
    oprot:writeFieldEnd()
  end
  if self.eventType ~= nil then
    oprot:writeFieldBegin('eventType', TType.I32, 22)
    oprot:writeI32(self.eventType)
    oprot:writeFieldEnd()
  end
  if self.urlSchema ~= nil then
    oprot:writeFieldBegin('urlSchema', TType.STRING, 23)
    oprot:writeString(self.urlSchema)
    oprot:writeFieldEnd()
  end
  if self.downloadUrl ~= nil then
    oprot:writeFieldBegin('downloadUrl', TType.STRING, 24)
    oprot:writeString(self.downloadUrl)
    oprot:writeFieldEnd()
  end
  if self.buddyMid ~= nil then
    oprot:writeFieldBegin('buddyMid', TType.STRING, 25)
    oprot:writeString(self.buddyMid)
    oprot:writeFieldEnd()
  end
  if self.publishSince ~= nil then
    oprot:writeFieldBegin('publishSince', TType.I64, 26)
    oprot:writeI64(self.publishSince)
    oprot:writeFieldEnd()
  end
  if self.newFlag ~= nil then
    oprot:writeFieldBegin('newFlag', TType.BOOL, 27)
    oprot:writeBool(self.newFlag)
    oprot:writeFieldEnd()
  end
  if self.missionFlag ~= nil then
    oprot:writeFieldBegin('missionFlag', TType.BOOL, 28)
    oprot:writeBool(self.missionFlag)
    oprot:writeFieldEnd()
  end
  if self.categories ~= nil then
    oprot:writeFieldBegin('categories', TType.LIST, 29)
    oprot:writeListBegin(TType.STRUCT, #self.categories)
    for _,iter299 in ipairs(self.categories) do
      iter299:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.missionButtonText ~= nil then
    oprot:writeFieldBegin('missionButtonText', TType.STRING, 30)
    oprot:writeString(self.missionButtonText)
    oprot:writeFieldEnd()
  end
  if self.missionShortDescription ~= nil then
    oprot:writeFieldBegin('missionShortDescription', TType.STRING, 31)
    oprot:writeString(self.missionShortDescription)
    oprot:writeFieldEnd()
  end
  if self.authorId ~= nil then
    oprot:writeFieldBegin('authorId', TType.STRING, 32)
    oprot:writeString(self.authorId)
    oprot:writeFieldEnd()
  end
  if self.grantedByDefault ~= nil then
    oprot:writeFieldBegin('grantedByDefault', TType.BOOL, 41)
    oprot:writeBool(self.grantedByDefault)
    oprot:writeFieldEnd()
  end
  if self.displayOrder ~= nil then
    oprot:writeFieldBegin('displayOrder', TType.I32, 42)
    oprot:writeI32(self.displayOrder)
    oprot:writeFieldEnd()
  end
  if self.availableForPresent ~= nil then
    oprot:writeFieldBegin('availableForPresent', TType.BOOL, 43)
    oprot:writeBool(self.availableForPresent)
    oprot:writeFieldEnd()
  end
  if self.availableForMyself ~= nil then
    oprot:writeFieldBegin('availableForMyself', TType.BOOL, 44)
    oprot:writeBool(self.availableForMyself)
    oprot:writeFieldEnd()
  end
  if self.hasAnimation ~= nil then
    oprot:writeFieldBegin('hasAnimation', TType.BOOL, 51)
    oprot:writeBool(self.hasAnimation)
    oprot:writeFieldEnd()
  end
  if self.hasSound ~= nil then
    oprot:writeFieldBegin('hasSound', TType.BOOL, 52)
    oprot:writeBool(self.hasSound)
    oprot:writeFieldEnd()
  end
  if self.recommendationsEnabled ~= nil then
    oprot:writeFieldBegin('recommendationsEnabled', TType.BOOL, 53)
    oprot:writeBool(self.recommendationsEnabled)
    oprot:writeFieldEnd()
  end
  if self.stickerResourceType ~= nil then
    oprot:writeFieldBegin('stickerResourceType', TType.I32, 54)
    oprot:writeI32(self.stickerResourceType)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ProductList = __TObject:new{
  hasNext,
  bannerSequence,
  bannerTargetType,
  bannerTargetPath,
  productList,
  bannerLang
}

function ProductList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.hasNext = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I64 then
        self.bannerSequence = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.bannerTargetType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.bannerTargetPath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.LIST then
        self.productList = {}
        local _etype303, _size300 = iprot:readListBegin()
        for _i=1,_size300 do
          local _elem304 = Product:new{}
          _elem304:read(iprot)
          table.insert(self.productList, _elem304)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.bannerLang = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ProductList:write(oprot)
  oprot:writeStructBegin('ProductList')
  if self.hasNext ~= nil then
    oprot:writeFieldBegin('hasNext', TType.BOOL, 1)
    oprot:writeBool(self.hasNext)
    oprot:writeFieldEnd()
  end
  if self.bannerSequence ~= nil then
    oprot:writeFieldBegin('bannerSequence', TType.I64, 4)
    oprot:writeI64(self.bannerSequence)
    oprot:writeFieldEnd()
  end
  if self.bannerTargetType ~= nil then
    oprot:writeFieldBegin('bannerTargetType', TType.I32, 5)
    oprot:writeI32(self.bannerTargetType)
    oprot:writeFieldEnd()
  end
  if self.bannerTargetPath ~= nil then
    oprot:writeFieldBegin('bannerTargetPath', TType.STRING, 6)
    oprot:writeString(self.bannerTargetPath)
    oprot:writeFieldEnd()
  end
  if self.productList ~= nil then
    oprot:writeFieldBegin('productList', TType.LIST, 7)
    oprot:writeListBegin(TType.STRUCT, #self.productList)
    for _,iter305 in ipairs(self.productList) do
      iter305:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.bannerLang ~= nil then
    oprot:writeFieldBegin('bannerLang', TType.STRING, 8)
    oprot:writeString(self.bannerLang)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

StickerIdRange = __TObject:new{
  start,
  size
}

function StickerIdRange:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.start = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.size = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function StickerIdRange:write(oprot)
  oprot:writeStructBegin('StickerIdRange')
  if self.start ~= nil then
    oprot:writeFieldBegin('start', TType.I64, 1)
    oprot:writeI64(self.start)
    oprot:writeFieldEnd()
  end
  if self.size ~= nil then
    oprot:writeFieldBegin('size', TType.I32, 2)
    oprot:writeI32(self.size)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ProductSimple = __TObject:new{
  productId,
  packageId,
  version,
  onSale,
  validUntil,
  stickerIdRanges,
  grantedByDefault,
  displayOrder
}

function ProductSimple:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.productId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.packageId = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.version = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.onSale = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I64 then
        self.validUntil = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.stickerIdRanges = {}
        local _etype309, _size306 = iprot:readListBegin()
        for _i=1,_size306 do
          local _elem310 = StickerIdRange:new{}
          _elem310:read(iprot)
          table.insert(self.stickerIdRanges, _elem310)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.BOOL then
        self.grantedByDefault = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.I32 then
        self.displayOrder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ProductSimple:write(oprot)
  oprot:writeStructBegin('ProductSimple')
  if self.productId ~= nil then
    oprot:writeFieldBegin('productId', TType.STRING, 1)
    oprot:writeString(self.productId)
    oprot:writeFieldEnd()
  end
  if self.packageId ~= nil then
    oprot:writeFieldBegin('packageId', TType.I64, 2)
    oprot:writeI64(self.packageId)
    oprot:writeFieldEnd()
  end
  if self.version ~= nil then
    oprot:writeFieldBegin('version', TType.I32, 3)
    oprot:writeI32(self.version)
    oprot:writeFieldEnd()
  end
  if self.onSale ~= nil then
    oprot:writeFieldBegin('onSale', TType.BOOL, 4)
    oprot:writeBool(self.onSale)
    oprot:writeFieldEnd()
  end
  if self.validUntil ~= nil then
    oprot:writeFieldBegin('validUntil', TType.I64, 5)
    oprot:writeI64(self.validUntil)
    oprot:writeFieldEnd()
  end
  if self.stickerIdRanges ~= nil then
    oprot:writeFieldBegin('stickerIdRanges', TType.LIST, 10)
    oprot:writeListBegin(TType.STRUCT, #self.stickerIdRanges)
    for _,iter311 in ipairs(self.stickerIdRanges) do
      iter311:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.grantedByDefault ~= nil then
    oprot:writeFieldBegin('grantedByDefault', TType.BOOL, 41)
    oprot:writeBool(self.grantedByDefault)
    oprot:writeFieldEnd()
  end
  if self.displayOrder ~= nil then
    oprot:writeFieldBegin('displayOrder', TType.I32, 42)
    oprot:writeI32(self.displayOrder)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ProductSimpleList = __TObject:new{
  hasNext,
  reinvokeHour,
  lastVersionSeq,
  productList,
  recentNewReleaseDate,
  recentEventReleaseDate
}

function ProductSimpleList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.hasNext = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.reinvokeHour = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.lastVersionSeq = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.productList = {}
        local _etype315, _size312 = iprot:readListBegin()
        for _i=1,_size312 do
          local _elem316 = ProductSimple:new{}
          _elem316:read(iprot)
          table.insert(self.productList, _elem316)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I64 then
        self.recentNewReleaseDate = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I64 then
        self.recentEventReleaseDate = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ProductSimpleList:write(oprot)
  oprot:writeStructBegin('ProductSimpleList')
  if self.hasNext ~= nil then
    oprot:writeFieldBegin('hasNext', TType.BOOL, 1)
    oprot:writeBool(self.hasNext)
    oprot:writeFieldEnd()
  end
  if self.reinvokeHour ~= nil then
    oprot:writeFieldBegin('reinvokeHour', TType.I32, 2)
    oprot:writeI32(self.reinvokeHour)
    oprot:writeFieldEnd()
  end
  if self.lastVersionSeq ~= nil then
    oprot:writeFieldBegin('lastVersionSeq', TType.I64, 3)
    oprot:writeI64(self.lastVersionSeq)
    oprot:writeFieldEnd()
  end
  if self.productList ~= nil then
    oprot:writeFieldBegin('productList', TType.LIST, 4)
    oprot:writeListBegin(TType.STRUCT, #self.productList)
    for _,iter317 in ipairs(self.productList) do
      iter317:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.recentNewReleaseDate ~= nil then
    oprot:writeFieldBegin('recentNewReleaseDate', TType.I64, 5)
    oprot:writeI64(self.recentNewReleaseDate)
    oprot:writeFieldEnd()
  end
  if self.recentEventReleaseDate ~= nil then
    oprot:writeFieldBegin('recentEventReleaseDate', TType.I64, 6)
    oprot:writeI64(self.recentEventReleaseDate)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Profile = __TObject:new{
  mid,
  userid,
  phone,
  email,
  regionCode,
  displayName,
  phoneticName,
  pictureStatus,
  thumbnailUrl,
  statusMessage,
  allowSearchByUserid,
  allowSearchByEmail,
  picturePath,
  musicProfile,
  videoProfile
}

function Profile:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.userid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.phone = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.email = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.regionCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.displayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.phoneticName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.pictureStatus = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.STRING then
        self.thumbnailUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.STRING then
        self.statusMessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.BOOL then
        self.allowSearchByUserid = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.BOOL then
        self.allowSearchByEmail = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.STRING then
        self.picturePath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 34 then
      if ftype == TType.STRING then
        self.musicProfile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 35 then
      if ftype == TType.STRING then
        self.videoProfile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Profile:write(oprot)
  oprot:writeStructBegin('Profile')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.userid ~= nil then
    oprot:writeFieldBegin('userid', TType.STRING, 3)
    oprot:writeString(self.userid)
    oprot:writeFieldEnd()
  end
  if self.phone ~= nil then
    oprot:writeFieldBegin('phone', TType.STRING, 10)
    oprot:writeString(self.phone)
    oprot:writeFieldEnd()
  end
  if self.email ~= nil then
    oprot:writeFieldBegin('email', TType.STRING, 11)
    oprot:writeString(self.email)
    oprot:writeFieldEnd()
  end
  if self.regionCode ~= nil then
    oprot:writeFieldBegin('regionCode', TType.STRING, 12)
    oprot:writeString(self.regionCode)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRING, 20)
    oprot:writeString(self.displayName)
    oprot:writeFieldEnd()
  end
  if self.phoneticName ~= nil then
    oprot:writeFieldBegin('phoneticName', TType.STRING, 21)
    oprot:writeString(self.phoneticName)
    oprot:writeFieldEnd()
  end
  if self.pictureStatus ~= nil then
    oprot:writeFieldBegin('pictureStatus', TType.STRING, 22)
    oprot:writeString(self.pictureStatus)
    oprot:writeFieldEnd()
  end
  if self.thumbnailUrl ~= nil then
    oprot:writeFieldBegin('thumbnailUrl', TType.STRING, 23)
    oprot:writeString(self.thumbnailUrl)
    oprot:writeFieldEnd()
  end
  if self.statusMessage ~= nil then
    oprot:writeFieldBegin('statusMessage', TType.STRING, 24)
    oprot:writeString(self.statusMessage)
    oprot:writeFieldEnd()
  end
  if self.allowSearchByUserid ~= nil then
    oprot:writeFieldBegin('allowSearchByUserid', TType.BOOL, 31)
    oprot:writeBool(self.allowSearchByUserid)
    oprot:writeFieldEnd()
  end
  if self.allowSearchByEmail ~= nil then
    oprot:writeFieldBegin('allowSearchByEmail', TType.BOOL, 32)
    oprot:writeBool(self.allowSearchByEmail)
    oprot:writeFieldEnd()
  end
  if self.picturePath ~= nil then
    oprot:writeFieldBegin('picturePath', TType.STRING, 33)
    oprot:writeString(self.picturePath)
    oprot:writeFieldEnd()
  end
  if self.musicProfile ~= nil then
    oprot:writeFieldBegin('musicProfile', TType.STRING, 34)
    oprot:writeString(self.musicProfile)
    oprot:writeFieldEnd()
  end
  if self.videoProfile ~= nil then
    oprot:writeFieldBegin('videoProfile', TType.STRING, 35)
    oprot:writeString(self.videoProfile)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ProximityMatchCandidateResult = __TObject:new{
  users,
  buddies
}

function ProximityMatchCandidateResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.users = {}
        local _etype321, _size318 = iprot:readListBegin()
        for _i=1,_size318 do
          local _elem322 = Contact:new{}
          _elem322:read(iprot)
          table.insert(self.users, _elem322)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.buddies = {}
        local _etype326, _size323 = iprot:readListBegin()
        for _i=1,_size323 do
          local _elem327 = Contact:new{}
          _elem327:read(iprot)
          table.insert(self.buddies, _elem327)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ProximityMatchCandidateResult:write(oprot)
  oprot:writeStructBegin('ProximityMatchCandidateResult')
  if self.users ~= nil then
    oprot:writeFieldBegin('users', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.users)
    for _,iter328 in ipairs(self.users) do
      iter328:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.buddies ~= nil then
    oprot:writeFieldBegin('buddies', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.buddies)
    for _,iter329 in ipairs(self.buddies) do
      iter329:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RegisterWithSnsIdResult = __TObject:new{
  authToken,
  userCreated
}

function RegisterWithSnsIdResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.userCreated = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RegisterWithSnsIdResult:write(oprot)
  oprot:writeStructBegin('RegisterWithSnsIdResult')
  if self.authToken ~= nil then
    oprot:writeFieldBegin('authToken', TType.STRING, 1)
    oprot:writeString(self.authToken)
    oprot:writeFieldEnd()
  end
  if self.userCreated ~= nil then
    oprot:writeFieldBegin('userCreated', TType.BOOL, 2)
    oprot:writeBool(self.userCreated)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RequestTokenResponse = __TObject:new{
  requestToken,
  returnUrl
}

function RequestTokenResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.returnUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RequestTokenResponse:write(oprot)
  oprot:writeStructBegin('RequestTokenResponse')
  if self.requestToken ~= nil then
    oprot:writeFieldBegin('requestToken', TType.STRING, 1)
    oprot:writeString(self.requestToken)
    oprot:writeFieldEnd()
  end
  if self.returnUrl ~= nil then
    oprot:writeFieldBegin('returnUrl', TType.STRING, 2)
    oprot:writeString(self.returnUrl)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Room = __TObject:new{
  mid,
  createdTime,
  contacts,
  notificationDisabled,
  memberMids
}

function Room:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.contacts = {}
        local _etype333, _size330 = iprot:readListBegin()
        for _i=1,_size330 do
          local _elem334 = Contact:new{}
          _elem334:read(iprot)
          table.insert(self.contacts, _elem334)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.BOOL then
        self.notificationDisabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.LIST then
        self.memberMids = {}
        local _etype338, _size335 = iprot:readListBegin()
        for _i=1,_size335 do
          local _elem339 = iprot:readString()
          table.insert(self.memberMids, _elem339)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Room:write(oprot)
  oprot:writeStructBegin('Room')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 2)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.contacts ~= nil then
    oprot:writeFieldBegin('contacts', TType.LIST, 10)
    oprot:writeListBegin(TType.STRUCT, #self.contacts)
    for _,iter340 in ipairs(self.contacts) do
      iter340:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.notificationDisabled ~= nil then
    oprot:writeFieldBegin('notificationDisabled', TType.BOOL, 31)
    oprot:writeBool(self.notificationDisabled)
    oprot:writeFieldEnd()
  end
  if self.memberMids ~= nil then
    oprot:writeFieldBegin('memberMids', TType.LIST, 40)
    oprot:writeListBegin(TType.STRING, #self.memberMids)
    for _,iter341 in ipairs(self.memberMids) do
      oprot:writeString(iter341)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SuggestDictionary = __TObject:new{
  language,
  name
}

function SuggestDictionary:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SuggestDictionary:write(oprot)
  oprot:writeStructBegin('SuggestDictionary')
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 1)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 2)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SuggestItemDictionaryIncrement = __TObject:new{
  status,
  revision,
  scheme,
  data
}

function SuggestItemDictionaryIncrement:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.status = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.scheme = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.data = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SuggestItemDictionaryIncrement:write(oprot)
  oprot:writeStructBegin('SuggestItemDictionaryIncrement')
  if self.status ~= nil then
    oprot:writeFieldBegin('status', TType.I32, 1)
    oprot:writeI32(self.status)
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 2)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.scheme ~= nil then
    oprot:writeFieldBegin('scheme', TType.STRING, 3)
    oprot:writeString(self.scheme)
    oprot:writeFieldEnd()
  end
  if self.data ~= nil then
    oprot:writeFieldBegin('data', TType.STRING, 4)
    oprot:writeString(self.data)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SuggestTagDictionaryIncrement = __TObject:new{
  status,
  language,
  revision,
  scheme,
  data
}

function SuggestTagDictionaryIncrement:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.status = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.scheme = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.data = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SuggestTagDictionaryIncrement:write(oprot)
  oprot:writeStructBegin('SuggestTagDictionaryIncrement')
  if self.status ~= nil then
    oprot:writeFieldBegin('status', TType.I32, 1)
    oprot:writeI32(self.status)
    oprot:writeFieldEnd()
  end
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 2)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 3)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.scheme ~= nil then
    oprot:writeFieldBegin('scheme', TType.STRING, 4)
    oprot:writeString(self.scheme)
    oprot:writeFieldEnd()
  end
  if self.data ~= nil then
    oprot:writeFieldBegin('data', TType.STRING, 5)
    oprot:writeString(self.data)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SuggestDictionaryIncrements = __TObject:new{
  itemIncrement,
  tagIncrements
}

function SuggestDictionaryIncrements:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.itemIncrement = SuggestItemDictionaryIncrement:new{}
        self.itemIncrement:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.tagIncrements = {}
        local _etype345, _size342 = iprot:readListBegin()
        for _i=1,_size342 do
          local _elem346 = SuggestTagDictionaryIncrement:new{}
          _elem346:read(iprot)
          table.insert(self.tagIncrements, _elem346)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SuggestDictionaryIncrements:write(oprot)
  oprot:writeStructBegin('SuggestDictionaryIncrements')
  if self.itemIncrement ~= nil then
    oprot:writeFieldBegin('itemIncrement', TType.STRUCT, 1)
    self.itemIncrement:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.tagIncrements ~= nil then
    oprot:writeFieldBegin('tagIncrements', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.tagIncrements)
    for _,iter347 in ipairs(self.tagIncrements) do
      iter347:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SuggestItemDictionaryRevision = __TObject:new{
  revision,
  scheme
}

function SuggestItemDictionaryRevision:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.scheme = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SuggestItemDictionaryRevision:write(oprot)
  oprot:writeStructBegin('SuggestItemDictionaryRevision')
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 1)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.scheme ~= nil then
    oprot:writeFieldBegin('scheme', TType.STRING, 2)
    oprot:writeString(self.scheme)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SuggestTagDictionaryRevision = __TObject:new{
  language,
  revision,
  scheme
}

function SuggestTagDictionaryRevision:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.scheme = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SuggestTagDictionaryRevision:write(oprot)
  oprot:writeStructBegin('SuggestTagDictionaryRevision')
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 1)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 2)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.scheme ~= nil then
    oprot:writeFieldBegin('scheme', TType.STRING, 3)
    oprot:writeString(self.scheme)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SuggestDictionaryRevisions = __TObject:new{
  itemRevision,
  tagRevisions
}

function SuggestDictionaryRevisions:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.itemRevision = SuggestItemDictionaryRevision:new{}
        self.itemRevision:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.tagRevisions = {}
        local _etype351, _size348 = iprot:readListBegin()
        for _i=1,_size348 do
          local _elem352 = SuggestTagDictionaryRevision:new{}
          _elem352:read(iprot)
          table.insert(self.tagRevisions, _elem352)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SuggestDictionaryRevisions:write(oprot)
  oprot:writeStructBegin('SuggestDictionaryRevisions')
  if self.itemRevision ~= nil then
    oprot:writeFieldBegin('itemRevision', TType.STRUCT, 1)
    self.itemRevision:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.tagRevisions ~= nil then
    oprot:writeFieldBegin('tagRevisions', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.tagRevisions)
    for _,iter353 in ipairs(self.tagRevisions) do
      iter353:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SuggestDictionarySettings = __TObject:new{
  revision,
  newRevision,
  dictionaries,
  preloadedDictionaries
}

function SuggestDictionarySettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.newRevision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.dictionaries = {}
        local _etype357, _size354 = iprot:readListBegin()
        for _i=1,_size354 do
          local _elem358 = SuggestDictionary:new{}
          _elem358:read(iprot)
          table.insert(self.dictionaries, _elem358)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.preloadedDictionaries = {}
        local _etype362, _size359 = iprot:readListBegin()
        for _i=1,_size359 do
          local _elem363 = iprot:readString()
          table.insert(self.preloadedDictionaries, _elem363)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SuggestDictionarySettings:write(oprot)
  oprot:writeStructBegin('SuggestDictionarySettings')
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 1)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.newRevision ~= nil then
    oprot:writeFieldBegin('newRevision', TType.I64, 2)
    oprot:writeI64(self.newRevision)
    oprot:writeFieldEnd()
  end
  if self.dictionaries ~= nil then
    oprot:writeFieldBegin('dictionaries', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.dictionaries)
    for _,iter364 in ipairs(self.dictionaries) do
      iter364:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.preloadedDictionaries ~= nil then
    oprot:writeFieldBegin('preloadedDictionaries', TType.LIST, 4)
    oprot:writeListBegin(TType.STRING, #self.preloadedDictionaries)
    for _,iter365 in ipairs(self.preloadedDictionaries) do
      oprot:writeString(iter365)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PhoneInfoForChannel = __TObject:new{
  mid,
  normalizedPhoneNumber,
  allowedToSearchByPhoneNumber,
  allowedToReceiveMessageFromNonFriend,
  region
}

function PhoneInfoForChannel:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.normalizedPhoneNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.allowedToSearchByPhoneNumber = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.allowedToReceiveMessageFromNonFriend = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.region = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PhoneInfoForChannel:write(oprot)
  oprot:writeStructBegin('PhoneInfoForChannel')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.normalizedPhoneNumber ~= nil then
    oprot:writeFieldBegin('normalizedPhoneNumber', TType.STRING, 2)
    oprot:writeString(self.normalizedPhoneNumber)
    oprot:writeFieldEnd()
  end
  if self.allowedToSearchByPhoneNumber ~= nil then
    oprot:writeFieldBegin('allowedToSearchByPhoneNumber', TType.BOOL, 3)
    oprot:writeBool(self.allowedToSearchByPhoneNumber)
    oprot:writeFieldEnd()
  end
  if self.allowedToReceiveMessageFromNonFriend ~= nil then
    oprot:writeFieldBegin('allowedToReceiveMessageFromNonFriend', TType.BOOL, 4)
    oprot:writeBool(self.allowedToReceiveMessageFromNonFriend)
    oprot:writeFieldEnd()
  end
  if self.region ~= nil then
    oprot:writeFieldBegin('region', TType.STRING, 5)
    oprot:writeString(self.region)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PhoneVerificationResult = __TObject:new{
  verificationResult,
  accountMigrationCheckType,
  recommendAddFriends
}

function PhoneVerificationResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.verificationResult = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.accountMigrationCheckType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.recommendAddFriends = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PhoneVerificationResult:write(oprot)
  oprot:writeStructBegin('PhoneVerificationResult')
  if self.verificationResult ~= nil then
    oprot:writeFieldBegin('verificationResult', TType.I32, 1)
    oprot:writeI32(self.verificationResult)
    oprot:writeFieldEnd()
  end
  if self.accountMigrationCheckType ~= nil then
    oprot:writeFieldBegin('accountMigrationCheckType', TType.I32, 2)
    oprot:writeI32(self.accountMigrationCheckType)
    oprot:writeFieldEnd()
  end
  if self.recommendAddFriends ~= nil then
    oprot:writeFieldBegin('recommendAddFriends', TType.BOOL, 3)
    oprot:writeBool(self.recommendAddFriends)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PlaceSearchInfo = __TObject:new{
  name,
  address,
  latitude,
  longitude
}

function PlaceSearchInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.address = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.DOUBLE then
        self.latitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.DOUBLE then
        self.longitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PlaceSearchInfo:write(oprot)
  oprot:writeStructBegin('PlaceSearchInfo')
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 1)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.address ~= nil then
    oprot:writeFieldBegin('address', TType.STRING, 2)
    oprot:writeString(self.address)
    oprot:writeFieldEnd()
  end
  if self.latitude ~= nil then
    oprot:writeFieldBegin('latitude', TType.DOUBLE, 3)
    oprot:writeDouble(self.latitude)
    oprot:writeFieldEnd()
  end
  if self.longitude ~= nil then
    oprot:writeFieldBegin('longitude', TType.DOUBLE, 4)
    oprot:writeDouble(self.longitude)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RSAKey = __TObject:new{
  keynm,
  nvalue,
  evalue,
  sessionKey
}

function RSAKey:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.keynm = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.nvalue = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.evalue = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.sessionKey = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RSAKey:write(oprot)
  oprot:writeStructBegin('RSAKey')
  if self.keynm ~= nil then
    oprot:writeFieldBegin('keynm', TType.STRING, 1)
    oprot:writeString(self.keynm)
    oprot:writeFieldEnd()
  end
  if self.nvalue ~= nil then
    oprot:writeFieldBegin('nvalue', TType.STRING, 2)
    oprot:writeString(self.nvalue)
    oprot:writeFieldEnd()
  end
  if self.evalue ~= nil then
    oprot:writeFieldBegin('evalue', TType.STRING, 3)
    oprot:writeString(self.evalue)
    oprot:writeFieldEnd()
  end
  if self.sessionKey ~= nil then
    oprot:writeFieldBegin('sessionKey', TType.STRING, 4)
    oprot:writeString(self.sessionKey)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SecurityCenterResult = __TObject:new{
  uri,
  token,
  cookiePath,
  skip
}

function SecurityCenterResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.uri = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.token = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.cookiePath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.skip = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SecurityCenterResult:write(oprot)
  oprot:writeStructBegin('SecurityCenterResult')
  if self.uri ~= nil then
    oprot:writeFieldBegin('uri', TType.STRING, 1)
    oprot:writeString(self.uri)
    oprot:writeFieldEnd()
  end
  if self.token ~= nil then
    oprot:writeFieldBegin('token', TType.STRING, 2)
    oprot:writeString(self.token)
    oprot:writeFieldEnd()
  end
  if self.cookiePath ~= nil then
    oprot:writeFieldBegin('cookiePath', TType.STRING, 3)
    oprot:writeString(self.cookiePath)
    oprot:writeFieldEnd()
  end
  if self.skip ~= nil then
    oprot:writeFieldBegin('skip', TType.BOOL, 4)
    oprot:writeBool(self.skip)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SendBuddyMessageResult = __TObject:new{
  requestId,
  state,
  messageId,
  eventNo,
  receiverCount,
  successCount,
  failCount,
  cancelCount,
  blockCount,
  unregisterCount,
  timestamp,
  message
}

function SendBuddyMessageResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.state = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.messageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.eventNo = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I64 then
        self.receiverCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I64 then
        self.successCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I64 then
        self.failCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I64 then
        self.cancelCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I64 then
        self.blockCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.I64 then
        self.unregisterCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I64 then
        self.timestamp = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.message = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SendBuddyMessageResult:write(oprot)
  oprot:writeStructBegin('SendBuddyMessageResult')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.state ~= nil then
    oprot:writeFieldBegin('state', TType.I32, 2)
    oprot:writeI32(self.state)
    oprot:writeFieldEnd()
  end
  if self.messageId ~= nil then
    oprot:writeFieldBegin('messageId', TType.STRING, 3)
    oprot:writeString(self.messageId)
    oprot:writeFieldEnd()
  end
  if self.eventNo ~= nil then
    oprot:writeFieldBegin('eventNo', TType.I32, 4)
    oprot:writeI32(self.eventNo)
    oprot:writeFieldEnd()
  end
  if self.receiverCount ~= nil then
    oprot:writeFieldBegin('receiverCount', TType.I64, 11)
    oprot:writeI64(self.receiverCount)
    oprot:writeFieldEnd()
  end
  if self.successCount ~= nil then
    oprot:writeFieldBegin('successCount', TType.I64, 12)
    oprot:writeI64(self.successCount)
    oprot:writeFieldEnd()
  end
  if self.failCount ~= nil then
    oprot:writeFieldBegin('failCount', TType.I64, 13)
    oprot:writeI64(self.failCount)
    oprot:writeFieldEnd()
  end
  if self.cancelCount ~= nil then
    oprot:writeFieldBegin('cancelCount', TType.I64, 14)
    oprot:writeI64(self.cancelCount)
    oprot:writeFieldEnd()
  end
  if self.blockCount ~= nil then
    oprot:writeFieldBegin('blockCount', TType.I64, 15)
    oprot:writeI64(self.blockCount)
    oprot:writeFieldEnd()
  end
  if self.unregisterCount ~= nil then
    oprot:writeFieldBegin('unregisterCount', TType.I64, 16)
    oprot:writeI64(self.unregisterCount)
    oprot:writeFieldEnd()
  end
  if self.timestamp ~= nil then
    oprot:writeFieldBegin('timestamp', TType.I64, 21)
    oprot:writeI64(self.timestamp)
    oprot:writeFieldEnd()
  end
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRING, 22)
    oprot:writeString(self.message)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SetBuddyOnAirResult = __TObject:new{
  requestId,
  state,
  eventNo,
  receiverCount,
  successCount,
  failCount,
  cancelCount,
  unregisterCount,
  timestamp,
  message
}

function SetBuddyOnAirResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.state = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.eventNo = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I64 then
        self.receiverCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I64 then
        self.successCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I64 then
        self.failCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I64 then
        self.cancelCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I64 then
        self.unregisterCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I64 then
        self.timestamp = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.message = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SetBuddyOnAirResult:write(oprot)
  oprot:writeStructBegin('SetBuddyOnAirResult')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.state ~= nil then
    oprot:writeFieldBegin('state', TType.I32, 2)
    oprot:writeI32(self.state)
    oprot:writeFieldEnd()
  end
  if self.eventNo ~= nil then
    oprot:writeFieldBegin('eventNo', TType.I32, 3)
    oprot:writeI32(self.eventNo)
    oprot:writeFieldEnd()
  end
  if self.receiverCount ~= nil then
    oprot:writeFieldBegin('receiverCount', TType.I64, 11)
    oprot:writeI64(self.receiverCount)
    oprot:writeFieldEnd()
  end
  if self.successCount ~= nil then
    oprot:writeFieldBegin('successCount', TType.I64, 12)
    oprot:writeI64(self.successCount)
    oprot:writeFieldEnd()
  end
  if self.failCount ~= nil then
    oprot:writeFieldBegin('failCount', TType.I64, 13)
    oprot:writeI64(self.failCount)
    oprot:writeFieldEnd()
  end
  if self.cancelCount ~= nil then
    oprot:writeFieldBegin('cancelCount', TType.I64, 14)
    oprot:writeI64(self.cancelCount)
    oprot:writeFieldEnd()
  end
  if self.unregisterCount ~= nil then
    oprot:writeFieldBegin('unregisterCount', TType.I64, 15)
    oprot:writeI64(self.unregisterCount)
    oprot:writeFieldEnd()
  end
  if self.timestamp ~= nil then
    oprot:writeFieldBegin('timestamp', TType.I64, 21)
    oprot:writeI64(self.timestamp)
    oprot:writeFieldEnd()
  end
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRING, 22)
    oprot:writeString(self.message)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Settings = __TObject:new{
  notificationEnable,
  notificationMuteExpiration,
  notificationNewMessage,
  notificationGroupInvitation,
  notificationShowMessage,
  notificationIncomingCall,
  notificationSoundMessage,
  notificationSoundGroup,
  notificationDisabledWithSub,
  privacySyncContacts,
  privacySearchByPhoneNumber,
  privacySearchByUserid,
  privacySearchByEmail,
  privacyAllowSecondaryDeviceLogin,
  privacyProfileImagePostToMyhome,
  privacyReceiveMessagesFromNotFriend,
  contactMyTicket,
  identityProvider,
  identityIdentifier,
  snsAccounts,
  phoneRegistration,
  emailConfirmationStatus,
  preferenceLocale,
  customModes,
  e2eeEnable,
  hitokotoBackupRequested,
  privacyProfileMusicPostToMyhome,
  privacyAllowNearby,
  agreementNearbyTime,
  agreementSquareTime,
  notificationMention,
  botUseAgreementAcceptedAt
}

function Settings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 10 then
      if ftype == TType.BOOL then
        self.notificationEnable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I64 then
        self.notificationMuteExpiration = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.BOOL then
        self.notificationNewMessage = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.BOOL then
        self.notificationGroupInvitation = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.BOOL then
        self.notificationShowMessage = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.BOOL then
        self.notificationIncomingCall = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.STRING then
        self.notificationSoundMessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.STRING then
        self.notificationSoundGroup = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.BOOL then
        self.notificationDisabledWithSub = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.BOOL then
        self.privacySyncContacts = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.BOOL then
        self.privacySearchByPhoneNumber = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.BOOL then
        self.privacySearchByUserid = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.BOOL then
        self.privacySearchByEmail = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.BOOL then
        self.privacyAllowSecondaryDeviceLogin = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.BOOL then
        self.privacyProfileImagePostToMyhome = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.BOOL then
        self.privacyReceiveMessagesFromNotFriend = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.contactMyTicket = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.I32 then
        self.identityProvider = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.STRING then
        self.identityIdentifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.MAP then
        self.snsAccounts = {}
        local _ktype367, _vtype368, _size366 = iprot:readMapBegin() 
        for _i=1,_size366 do
          local _key370 = iprot:readI32()
          local _val371 = iprot:readString()
          self.snsAccounts[_key370] = _val371
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 43 then
      if ftype == TType.BOOL then
        self.phoneRegistration = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 44 then
      if ftype == TType.I32 then
        self.emailConfirmationStatus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.STRING then
        self.preferenceLocale = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.MAP then
        self.customModes = {}
        local _ktype373, _vtype374, _size372 = iprot:readMapBegin() 
        for _i=1,_size372 do
          local _key376 = iprot:readI32()
          local _val377 = iprot:readString()
          self.customModes[_key376] = _val377
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 61 then
      if ftype == TType.BOOL then
        self.e2eeEnable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 62 then
      if ftype == TType.BOOL then
        self.hitokotoBackupRequested = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 63 then
      if ftype == TType.BOOL then
        self.privacyProfileMusicPostToMyhome = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 65 then
      if ftype == TType.BOOL then
        self.privacyAllowNearby = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 66 then
      if ftype == TType.I64 then
        self.agreementNearbyTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 67 then
      if ftype == TType.I64 then
        self.agreementSquareTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 68 then
      if ftype == TType.BOOL then
        self.notificationMention = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 69 then
      if ftype == TType.I64 then
        self.botUseAgreementAcceptedAt = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Settings:write(oprot)
  oprot:writeStructBegin('Settings')
  if self.notificationEnable ~= nil then
    oprot:writeFieldBegin('notificationEnable', TType.BOOL, 10)
    oprot:writeBool(self.notificationEnable)
    oprot:writeFieldEnd()
  end
  if self.notificationMuteExpiration ~= nil then
    oprot:writeFieldBegin('notificationMuteExpiration', TType.I64, 11)
    oprot:writeI64(self.notificationMuteExpiration)
    oprot:writeFieldEnd()
  end
  if self.notificationNewMessage ~= nil then
    oprot:writeFieldBegin('notificationNewMessage', TType.BOOL, 12)
    oprot:writeBool(self.notificationNewMessage)
    oprot:writeFieldEnd()
  end
  if self.notificationGroupInvitation ~= nil then
    oprot:writeFieldBegin('notificationGroupInvitation', TType.BOOL, 13)
    oprot:writeBool(self.notificationGroupInvitation)
    oprot:writeFieldEnd()
  end
  if self.notificationShowMessage ~= nil then
    oprot:writeFieldBegin('notificationShowMessage', TType.BOOL, 14)
    oprot:writeBool(self.notificationShowMessage)
    oprot:writeFieldEnd()
  end
  if self.notificationIncomingCall ~= nil then
    oprot:writeFieldBegin('notificationIncomingCall', TType.BOOL, 15)
    oprot:writeBool(self.notificationIncomingCall)
    oprot:writeFieldEnd()
  end
  if self.notificationSoundMessage ~= nil then
    oprot:writeFieldBegin('notificationSoundMessage', TType.STRING, 16)
    oprot:writeString(self.notificationSoundMessage)
    oprot:writeFieldEnd()
  end
  if self.notificationSoundGroup ~= nil then
    oprot:writeFieldBegin('notificationSoundGroup', TType.STRING, 17)
    oprot:writeString(self.notificationSoundGroup)
    oprot:writeFieldEnd()
  end
  if self.notificationDisabledWithSub ~= nil then
    oprot:writeFieldBegin('notificationDisabledWithSub', TType.BOOL, 18)
    oprot:writeBool(self.notificationDisabledWithSub)
    oprot:writeFieldEnd()
  end
  if self.privacySyncContacts ~= nil then
    oprot:writeFieldBegin('privacySyncContacts', TType.BOOL, 20)
    oprot:writeBool(self.privacySyncContacts)
    oprot:writeFieldEnd()
  end
  if self.privacySearchByPhoneNumber ~= nil then
    oprot:writeFieldBegin('privacySearchByPhoneNumber', TType.BOOL, 21)
    oprot:writeBool(self.privacySearchByPhoneNumber)
    oprot:writeFieldEnd()
  end
  if self.privacySearchByUserid ~= nil then
    oprot:writeFieldBegin('privacySearchByUserid', TType.BOOL, 22)
    oprot:writeBool(self.privacySearchByUserid)
    oprot:writeFieldEnd()
  end
  if self.privacySearchByEmail ~= nil then
    oprot:writeFieldBegin('privacySearchByEmail', TType.BOOL, 23)
    oprot:writeBool(self.privacySearchByEmail)
    oprot:writeFieldEnd()
  end
  if self.privacyAllowSecondaryDeviceLogin ~= nil then
    oprot:writeFieldBegin('privacyAllowSecondaryDeviceLogin', TType.BOOL, 24)
    oprot:writeBool(self.privacyAllowSecondaryDeviceLogin)
    oprot:writeFieldEnd()
  end
  if self.privacyProfileImagePostToMyhome ~= nil then
    oprot:writeFieldBegin('privacyProfileImagePostToMyhome', TType.BOOL, 25)
    oprot:writeBool(self.privacyProfileImagePostToMyhome)
    oprot:writeFieldEnd()
  end
  if self.privacyReceiveMessagesFromNotFriend ~= nil then
    oprot:writeFieldBegin('privacyReceiveMessagesFromNotFriend', TType.BOOL, 26)
    oprot:writeBool(self.privacyReceiveMessagesFromNotFriend)
    oprot:writeFieldEnd()
  end
  if self.contactMyTicket ~= nil then
    oprot:writeFieldBegin('contactMyTicket', TType.STRING, 30)
    oprot:writeString(self.contactMyTicket)
    oprot:writeFieldEnd()
  end
  if self.identityProvider ~= nil then
    oprot:writeFieldBegin('identityProvider', TType.I32, 40)
    oprot:writeI32(self.identityProvider)
    oprot:writeFieldEnd()
  end
  if self.identityIdentifier ~= nil then
    oprot:writeFieldBegin('identityIdentifier', TType.STRING, 41)
    oprot:writeString(self.identityIdentifier)
    oprot:writeFieldEnd()
  end
  if self.snsAccounts ~= nil then
    oprot:writeFieldBegin('snsAccounts', TType.MAP, 42)
    oprot:writeMapBegin(TType.I32, TType.STRING, ttable_size(self.snsAccounts))
    for kiter378,viter379 in pairs(self.snsAccounts) do
      oprot:writeI32(kiter378)
      oprot:writeString(viter379)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.phoneRegistration ~= nil then
    oprot:writeFieldBegin('phoneRegistration', TType.BOOL, 43)
    oprot:writeBool(self.phoneRegistration)
    oprot:writeFieldEnd()
  end
  if self.emailConfirmationStatus ~= nil then
    oprot:writeFieldBegin('emailConfirmationStatus', TType.I32, 44)
    oprot:writeI32(self.emailConfirmationStatus)
    oprot:writeFieldEnd()
  end
  if self.preferenceLocale ~= nil then
    oprot:writeFieldBegin('preferenceLocale', TType.STRING, 50)
    oprot:writeString(self.preferenceLocale)
    oprot:writeFieldEnd()
  end
  if self.customModes ~= nil then
    oprot:writeFieldBegin('customModes', TType.MAP, 60)
    oprot:writeMapBegin(TType.I32, TType.STRING, ttable_size(self.customModes))
    for kiter380,viter381 in pairs(self.customModes) do
      oprot:writeI32(kiter380)
      oprot:writeString(viter381)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.e2eeEnable ~= nil then
    oprot:writeFieldBegin('e2eeEnable', TType.BOOL, 61)
    oprot:writeBool(self.e2eeEnable)
    oprot:writeFieldEnd()
  end
  if self.hitokotoBackupRequested ~= nil then
    oprot:writeFieldBegin('hitokotoBackupRequested', TType.BOOL, 62)
    oprot:writeBool(self.hitokotoBackupRequested)
    oprot:writeFieldEnd()
  end
  if self.privacyProfileMusicPostToMyhome ~= nil then
    oprot:writeFieldBegin('privacyProfileMusicPostToMyhome', TType.BOOL, 63)
    oprot:writeBool(self.privacyProfileMusicPostToMyhome)
    oprot:writeFieldEnd()
  end
  if self.privacyAllowNearby ~= nil then
    oprot:writeFieldBegin('privacyAllowNearby', TType.BOOL, 65)
    oprot:writeBool(self.privacyAllowNearby)
    oprot:writeFieldEnd()
  end
  if self.agreementNearbyTime ~= nil then
    oprot:writeFieldBegin('agreementNearbyTime', TType.I64, 66)
    oprot:writeI64(self.agreementNearbyTime)
    oprot:writeFieldEnd()
  end
  if self.agreementSquareTime ~= nil then
    oprot:writeFieldBegin('agreementSquareTime', TType.I64, 67)
    oprot:writeI64(self.agreementSquareTime)
    oprot:writeFieldEnd()
  end
  if self.notificationMention ~= nil then
    oprot:writeFieldBegin('notificationMention', TType.BOOL, 68)
    oprot:writeBool(self.notificationMention)
    oprot:writeFieldEnd()
  end
  if self.botUseAgreementAcceptedAt ~= nil then
    oprot:writeFieldBegin('botUseAgreementAcceptedAt', TType.I64, 69)
    oprot:writeI64(self.botUseAgreementAcceptedAt)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SimpleChannelClient = __TObject:new{
  applicationType,
  applicationVersion,
  locale
}

function SimpleChannelClient:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.applicationType = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.applicationVersion = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.locale = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SimpleChannelClient:write(oprot)
  oprot:writeStructBegin('SimpleChannelClient')
  if self.applicationType ~= nil then
    oprot:writeFieldBegin('applicationType', TType.STRING, 1)
    oprot:writeString(self.applicationType)
    oprot:writeFieldEnd()
  end
  if self.applicationVersion ~= nil then
    oprot:writeFieldBegin('applicationVersion', TType.STRING, 2)
    oprot:writeString(self.applicationVersion)
    oprot:writeFieldEnd()
  end
  if self.locale ~= nil then
    oprot:writeFieldBegin('locale', TType.STRING, 3)
    oprot:writeString(self.locale)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SimpleChannelContact = __TObject:new{
  mid,
  displayName,
  pictureStatus,
  picturePath,
  statusMessage
}

function SimpleChannelContact:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.displayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.pictureStatus = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.picturePath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.statusMessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SimpleChannelContact:write(oprot)
  oprot:writeStructBegin('SimpleChannelContact')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRING, 2)
    oprot:writeString(self.displayName)
    oprot:writeFieldEnd()
  end
  if self.pictureStatus ~= nil then
    oprot:writeFieldBegin('pictureStatus', TType.STRING, 3)
    oprot:writeString(self.pictureStatus)
    oprot:writeFieldEnd()
  end
  if self.picturePath ~= nil then
    oprot:writeFieldBegin('picturePath', TType.STRING, 4)
    oprot:writeString(self.picturePath)
    oprot:writeFieldEnd()
  end
  if self.statusMessage ~= nil then
    oprot:writeFieldBegin('statusMessage', TType.STRING, 5)
    oprot:writeString(self.statusMessage)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SnsFriend = __TObject:new{
  snsUserId,
  snsUserName,
  snsIdType
}

function SnsFriend:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.snsUserId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.snsUserName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.snsIdType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SnsFriend:write(oprot)
  oprot:writeStructBegin('SnsFriend')
  if self.snsUserId ~= nil then
    oprot:writeFieldBegin('snsUserId', TType.STRING, 1)
    oprot:writeString(self.snsUserId)
    oprot:writeFieldEnd()
  end
  if self.snsUserName ~= nil then
    oprot:writeFieldBegin('snsUserName', TType.STRING, 2)
    oprot:writeString(self.snsUserName)
    oprot:writeFieldEnd()
  end
  if self.snsIdType ~= nil then
    oprot:writeFieldBegin('snsIdType', TType.I32, 3)
    oprot:writeI32(self.snsIdType)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SnsFriendContactRegistration = __TObject:new{
  contact,
  snsIdType,
  snsUserId
}

function SnsFriendContactRegistration:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.contact = Contact:new{}
        self.contact:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.snsIdType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.snsUserId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SnsFriendContactRegistration:write(oprot)
  oprot:writeStructBegin('SnsFriendContactRegistration')
  if self.contact ~= nil then
    oprot:writeFieldBegin('contact', TType.STRUCT, 1)
    self.contact:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.snsIdType ~= nil then
    oprot:writeFieldBegin('snsIdType', TType.I32, 2)
    oprot:writeI32(self.snsIdType)
    oprot:writeFieldEnd()
  end
  if self.snsUserId ~= nil then
    oprot:writeFieldBegin('snsUserId', TType.STRING, 3)
    oprot:writeString(self.snsUserId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SnsFriendModification = __TObject:new{
  type,
  snsFriend
}

function SnsFriendModification:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.snsFriend = SnsFriend:new{}
        self.snsFriend:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SnsFriendModification:write(oprot)
  oprot:writeStructBegin('SnsFriendModification')
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 1)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.snsFriend ~= nil then
    oprot:writeFieldBegin('snsFriend', TType.STRUCT, 2)
    self.snsFriend:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SnsFriends = __TObject:new{
  snsFriends,
  hasMore
}

function SnsFriends:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.snsFriends = {}
        local _etype385, _size382 = iprot:readListBegin()
        for _i=1,_size382 do
          local _elem386 = SnsFriend:new{}
          _elem386:read(iprot)
          table.insert(self.snsFriends, _elem386)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.hasMore = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SnsFriends:write(oprot)
  oprot:writeStructBegin('SnsFriends')
  if self.snsFriends ~= nil then
    oprot:writeFieldBegin('snsFriends', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.snsFriends)
    for _,iter387 in ipairs(self.snsFriends) do
      iter387:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.hasMore ~= nil then
    oprot:writeFieldBegin('hasMore', TType.BOOL, 2)
    oprot:writeBool(self.hasMore)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SnsIdUserStatus = __TObject:new{
  userExisting,
  phoneNumberRegistered,
  sameDevice
}

function SnsIdUserStatus:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.userExisting = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.phoneNumberRegistered = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.sameDevice = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SnsIdUserStatus:write(oprot)
  oprot:writeStructBegin('SnsIdUserStatus')
  if self.userExisting ~= nil then
    oprot:writeFieldBegin('userExisting', TType.BOOL, 1)
    oprot:writeBool(self.userExisting)
    oprot:writeFieldEnd()
  end
  if self.phoneNumberRegistered ~= nil then
    oprot:writeFieldBegin('phoneNumberRegistered', TType.BOOL, 2)
    oprot:writeBool(self.phoneNumberRegistered)
    oprot:writeFieldEnd()
  end
  if self.sameDevice ~= nil then
    oprot:writeFieldBegin('sameDevice', TType.BOOL, 3)
    oprot:writeBool(self.sameDevice)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SnsProfile = __TObject:new{
  snsUserId,
  snsUserName,
  email,
  thumbnailUrl
}

function SnsProfile:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.snsUserId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.snsUserName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.email = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.thumbnailUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SnsProfile:write(oprot)
  oprot:writeStructBegin('SnsProfile')
  if self.snsUserId ~= nil then
    oprot:writeFieldBegin('snsUserId', TType.STRING, 1)
    oprot:writeString(self.snsUserId)
    oprot:writeFieldEnd()
  end
  if self.snsUserName ~= nil then
    oprot:writeFieldBegin('snsUserName', TType.STRING, 2)
    oprot:writeString(self.snsUserName)
    oprot:writeFieldEnd()
  end
  if self.email ~= nil then
    oprot:writeFieldBegin('email', TType.STRING, 3)
    oprot:writeString(self.email)
    oprot:writeFieldEnd()
  end
  if self.thumbnailUrl ~= nil then
    oprot:writeFieldBegin('thumbnailUrl', TType.STRING, 4)
    oprot:writeString(self.thumbnailUrl)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SystemConfiguration = __TObject:new{
  endpoint,
  endpointSsl,
  updateUrl,
  c2dmAccount,
  nniServer
}

function SystemConfiguration:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.endpoint = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.endpointSsl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.updateUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.c2dmAccount = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.nniServer = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SystemConfiguration:write(oprot)
  oprot:writeStructBegin('SystemConfiguration')
  if self.endpoint ~= nil then
    oprot:writeFieldBegin('endpoint', TType.STRING, 1)
    oprot:writeString(self.endpoint)
    oprot:writeFieldEnd()
  end
  if self.endpointSsl ~= nil then
    oprot:writeFieldBegin('endpointSsl', TType.STRING, 2)
    oprot:writeString(self.endpointSsl)
    oprot:writeFieldEnd()
  end
  if self.updateUrl ~= nil then
    oprot:writeFieldBegin('updateUrl', TType.STRING, 3)
    oprot:writeString(self.updateUrl)
    oprot:writeFieldEnd()
  end
  if self.c2dmAccount ~= nil then
    oprot:writeFieldBegin('c2dmAccount', TType.STRING, 11)
    oprot:writeString(self.c2dmAccount)
    oprot:writeFieldEnd()
  end
  if self.nniServer ~= nil then
    oprot:writeFieldBegin('nniServer', TType.STRING, 12)
    oprot:writeString(self.nniServer)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Ticket = __TObject:new{
  id,
  expirationTime,
  maxUseCount
}

function Ticket:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I64 then
        self.expirationTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I32 then
        self.maxUseCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Ticket:write(oprot)
  oprot:writeStructBegin('Ticket')
  if self.id ~= nil then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.expirationTime ~= nil then
    oprot:writeFieldBegin('expirationTime', TType.I64, 10)
    oprot:writeI64(self.expirationTime)
    oprot:writeFieldEnd()
  end
  if self.maxUseCount ~= nil then
    oprot:writeFieldBegin('maxUseCount', TType.I32, 21)
    oprot:writeI32(self.maxUseCount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TMessageBox = __TObject:new{
  id,
  channelId,
  lastSeq,
  unreadCount,
  lastModifiedTime,
  status,
  midType,
  lastMessages
}

function TMessageBox:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I64 then
        self.lastSeq = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I64 then
        self.unreadCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I64 then
        self.lastModifiedTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I32 then
        self.status = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.I32 then
        self.midType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.lastMessages = {}
        local _etype391, _size388 = iprot:readListBegin()
        for _i=1,_size388 do
          local _elem392 = Message:new{}
          _elem392:read(iprot)
          table.insert(self.lastMessages, _elem392)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TMessageBox:write(oprot)
  oprot:writeStructBegin('TMessageBox')
  if self.id ~= nil then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 2)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  if self.lastSeq ~= nil then
    oprot:writeFieldBegin('lastSeq', TType.I64, 5)
    oprot:writeI64(self.lastSeq)
    oprot:writeFieldEnd()
  end
  if self.unreadCount ~= nil then
    oprot:writeFieldBegin('unreadCount', TType.I64, 6)
    oprot:writeI64(self.unreadCount)
    oprot:writeFieldEnd()
  end
  if self.lastModifiedTime ~= nil then
    oprot:writeFieldBegin('lastModifiedTime', TType.I64, 7)
    oprot:writeI64(self.lastModifiedTime)
    oprot:writeFieldEnd()
  end
  if self.status ~= nil then
    oprot:writeFieldBegin('status', TType.I32, 8)
    oprot:writeI32(self.status)
    oprot:writeFieldEnd()
  end
  if self.midType ~= nil then
    oprot:writeFieldBegin('midType', TType.I32, 9)
    oprot:writeI32(self.midType)
    oprot:writeFieldEnd()
  end
  if self.lastMessages ~= nil then
    oprot:writeFieldBegin('lastMessages', TType.LIST, 10)
    oprot:writeListBegin(TType.STRUCT, #self.lastMessages)
    for _,iter393 in ipairs(self.lastMessages) do
      iter393:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TMessageBoxWrapUp = __TObject:new{
  messageBox,
  name,
  contacts,
  pictureRevision
}

function TMessageBoxWrapUp:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.messageBox = TMessageBox:new{}
        self.messageBox:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.contacts = {}
        local _etype397, _size394 = iprot:readListBegin()
        for _i=1,_size394 do
          local _elem398 = Contact:new{}
          _elem398:read(iprot)
          table.insert(self.contacts, _elem398)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.pictureRevision = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TMessageBoxWrapUp:write(oprot)
  oprot:writeStructBegin('TMessageBoxWrapUp')
  if self.messageBox ~= nil then
    oprot:writeFieldBegin('messageBox', TType.STRUCT, 1)
    self.messageBox:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 2)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.contacts ~= nil then
    oprot:writeFieldBegin('contacts', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.contacts)
    for _,iter399 in ipairs(self.contacts) do
      iter399:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.pictureRevision ~= nil then
    oprot:writeFieldBegin('pictureRevision', TType.STRING, 4)
    oprot:writeString(self.pictureRevision)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TMessageBoxWrapUpResponse = __TObject:new{
  messageBoxWrapUpList,
  totalSize
}

function TMessageBoxWrapUpResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.messageBoxWrapUpList = {}
        local _etype403, _size400 = iprot:readListBegin()
        for _i=1,_size400 do
          local _elem404 = TMessageBoxWrapUp:new{}
          _elem404:read(iprot)
          table.insert(self.messageBoxWrapUpList, _elem404)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.totalSize = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TMessageBoxWrapUpResponse:write(oprot)
  oprot:writeStructBegin('TMessageBoxWrapUpResponse')
  if self.messageBoxWrapUpList ~= nil then
    oprot:writeFieldBegin('messageBoxWrapUpList', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.messageBoxWrapUpList)
    for _,iter405 in ipairs(self.messageBoxWrapUpList) do
      iter405:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.totalSize ~= nil then
    oprot:writeFieldBegin('totalSize', TType.I32, 2)
    oprot:writeI32(self.totalSize)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TMessageReadRangeEntry = __TObject:new{
  startMessageId,
  endMessageId,
  startTime,
  endTime
}

function TMessageReadRangeEntry:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.startMessageId = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.endMessageId = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.startTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I64 then
        self.endTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TMessageReadRangeEntry:write(oprot)
  oprot:writeStructBegin('TMessageReadRangeEntry')
  if self.startMessageId ~= nil then
    oprot:writeFieldBegin('startMessageId', TType.I64, 1)
    oprot:writeI64(self.startMessageId)
    oprot:writeFieldEnd()
  end
  if self.endMessageId ~= nil then
    oprot:writeFieldBegin('endMessageId', TType.I64, 2)
    oprot:writeI64(self.endMessageId)
    oprot:writeFieldEnd()
  end
  if self.startTime ~= nil then
    oprot:writeFieldBegin('startTime', TType.I64, 3)
    oprot:writeI64(self.startTime)
    oprot:writeFieldEnd()
  end
  if self.endTime ~= nil then
    oprot:writeFieldBegin('endTime', TType.I64, 4)
    oprot:writeI64(self.endTime)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TMessageReadRange = __TObject:new{
  chatId,
  ranges
}

function TMessageReadRange:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.chatId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.MAP then
        self.ranges = {}
        local _ktype407, _vtype408, _size406 = iprot:readMapBegin() 
        for _i=1,_size406 do
          local _key410 = iprot:readString()
          local _val411 = {}
          local _etype415, _size412 = iprot:readListBegin()
          for _i=1,_size412 do
            local _elem416 = TMessageReadRangeEntry:new{}
            _elem416:read(iprot)
            table.insert(_val411, _elem416)
          end
          iprot:readListEnd()
          self.ranges[_key410] = _val411
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TMessageReadRange:write(oprot)
  oprot:writeStructBegin('TMessageReadRange')
  if self.chatId ~= nil then
    oprot:writeFieldBegin('chatId', TType.STRING, 1)
    oprot:writeString(self.chatId)
    oprot:writeFieldEnd()
  end
  if self.ranges ~= nil then
    oprot:writeFieldBegin('ranges', TType.MAP, 2)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.ranges))
    for kiter417,viter418 in pairs(self.ranges) do
      oprot:writeString(kiter417)
      oprot:writeListBegin(TType.STRUCT, #viter418)
      for _,iter419 in ipairs(viter418) do
        iter419:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChatRoomAnnouncementContents = __TObject:new{
  displayFields,
  text,
  link,
  thumbnail
}

function ChatRoomAnnouncementContents:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.displayFields = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.text = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.link = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.thumbnail = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChatRoomAnnouncementContents:write(oprot)
  oprot:writeStructBegin('ChatRoomAnnouncementContents')
  if self.displayFields ~= nil then
    oprot:writeFieldBegin('displayFields', TType.I32, 1)
    oprot:writeI32(self.displayFields)
    oprot:writeFieldEnd()
  end
  if self.text ~= nil then
    oprot:writeFieldBegin('text', TType.STRING, 2)
    oprot:writeString(self.text)
    oprot:writeFieldEnd()
  end
  if self.link ~= nil then
    oprot:writeFieldBegin('link', TType.STRING, 3)
    oprot:writeString(self.link)
    oprot:writeFieldEnd()
  end
  if self.thumbnail ~= nil then
    oprot:writeFieldBegin('thumbnail', TType.STRING, 4)
    oprot:writeString(self.thumbnail)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChatRoomAnnouncement = __TObject:new{
  announcementSeq,
  type,
  contents,
  creatorMid,
  createdTime
}

function ChatRoomAnnouncement:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.announcementSeq = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.contents = ChatRoomAnnouncementContents:new{}
        self.contents:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.creatorMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChatRoomAnnouncement:write(oprot)
  oprot:writeStructBegin('ChatRoomAnnouncement')
  if self.announcementSeq ~= nil then
    oprot:writeFieldBegin('announcementSeq', TType.I64, 1)
    oprot:writeI64(self.announcementSeq)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 2)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.contents ~= nil then
    oprot:writeFieldBegin('contents', TType.STRUCT, 3)
    self.contents:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.creatorMid ~= nil then
    oprot:writeFieldBegin('creatorMid', TType.STRING, 4)
    oprot:writeString(self.creatorMid)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 5)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ErrorExtraInfo = __TObject:new{
  preconditionFailedExtraInfo
}

function ErrorExtraInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.preconditionFailedExtraInfo = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ErrorExtraInfo:write(oprot)
  oprot:writeStructBegin('ErrorExtraInfo')
  if self.preconditionFailedExtraInfo ~= nil then
    oprot:writeFieldBegin('preconditionFailedExtraInfo', TType.I32, 1)
    oprot:writeI32(self.preconditionFailedExtraInfo)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SyncRelations = __TObject:new{
  syncAll,
  syncParamContact,
  syncParamMid
}

function SyncRelations:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.syncAll = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.syncParamContact = {}
        local _etype423, _size420 = iprot:readListBegin()
        for _i=1,_size420 do
          local _elem424 = SyncParamContact:new{}
          _elem424:read(iprot)
          table.insert(self.syncParamContact, _elem424)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.syncParamMid = {}
        local _etype428, _size425 = iprot:readListBegin()
        for _i=1,_size425 do
          local _elem429 = SyncParamMid:new{}
          _elem429:read(iprot)
          table.insert(self.syncParamMid, _elem429)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SyncRelations:write(oprot)
  oprot:writeStructBegin('SyncRelations')
  if self.syncAll ~= nil then
    oprot:writeFieldBegin('syncAll', TType.BOOL, 1)
    oprot:writeBool(self.syncAll)
    oprot:writeFieldEnd()
  end
  if self.syncParamContact ~= nil then
    oprot:writeFieldBegin('syncParamContact', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.syncParamContact)
    for _,iter430 in ipairs(self.syncParamContact) do
      iter430:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.syncParamMid ~= nil then
    oprot:writeFieldBegin('syncParamMid', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.syncParamMid)
    for _,iter431 in ipairs(self.syncParamMid) do
      iter431:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SyncScope = __TObject:new{
  syncProfile,
  syncSettings,
  syncSticker,
  syncThemeShop,
  contact,
  group,
  room,
  chat
}

function SyncScope:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.syncProfile = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.syncSettings = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.syncSticker = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.syncThemeShop = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRUCT then
        self.contact = SyncRelations:new{}
        self.contact:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRUCT then
        self.group = SyncRelations:new{}
        self.group:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRUCT then
        self.room = SyncRelations:new{}
        self.room:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRUCT then
        self.chat = SyncRelations:new{}
        self.chat:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SyncScope:write(oprot)
  oprot:writeStructBegin('SyncScope')
  if self.syncProfile ~= nil then
    oprot:writeFieldBegin('syncProfile', TType.BOOL, 1)
    oprot:writeBool(self.syncProfile)
    oprot:writeFieldEnd()
  end
  if self.syncSettings ~= nil then
    oprot:writeFieldBegin('syncSettings', TType.BOOL, 2)
    oprot:writeBool(self.syncSettings)
    oprot:writeFieldEnd()
  end
  if self.syncSticker ~= nil then
    oprot:writeFieldBegin('syncSticker', TType.BOOL, 3)
    oprot:writeBool(self.syncSticker)
    oprot:writeFieldEnd()
  end
  if self.syncThemeShop ~= nil then
    oprot:writeFieldBegin('syncThemeShop', TType.BOOL, 4)
    oprot:writeBool(self.syncThemeShop)
    oprot:writeFieldEnd()
  end
  if self.contact ~= nil then
    oprot:writeFieldBegin('contact', TType.STRUCT, 10)
    self.contact:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.group ~= nil then
    oprot:writeFieldBegin('group', TType.STRUCT, 11)
    self.group:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.room ~= nil then
    oprot:writeFieldBegin('room', TType.STRUCT, 12)
    self.room:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.chat ~= nil then
    oprot:writeFieldBegin('chat', TType.STRUCT, 13)
    self.chat:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

JoinSquareResponse = __TObject:new{
  square,
  squareAuthority,
  squareStatus,
  squareMember,
  squareFeatureSet,
  noteStatus
}

function JoinSquareResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.square = Square:new{}
        self.square:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.squareAuthority = SquareAuthority:new{}
        self.squareAuthority:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.squareStatus = SquareStatus:new{}
        self.squareStatus:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.squareMember = SquareMember:new{}
        self.squareMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRUCT then
        self.squareFeatureSet = SquareFeatureSet:new{}
        self.squareFeatureSet:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRUCT then
        self.noteStatus = NoteStatus:new{}
        self.noteStatus:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function JoinSquareResponse:write(oprot)
  oprot:writeStructBegin('JoinSquareResponse')
  if self.square ~= nil then
    oprot:writeFieldBegin('square', TType.STRUCT, 1)
    self.square:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareAuthority ~= nil then
    oprot:writeFieldBegin('squareAuthority', TType.STRUCT, 2)
    self.squareAuthority:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareStatus ~= nil then
    oprot:writeFieldBegin('squareStatus', TType.STRUCT, 3)
    self.squareStatus:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareMember ~= nil then
    oprot:writeFieldBegin('squareMember', TType.STRUCT, 4)
    self.squareMember:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareFeatureSet ~= nil then
    oprot:writeFieldBegin('squareFeatureSet', TType.STRUCT, 5)
    self.squareFeatureSet:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.noteStatus ~= nil then
    oprot:writeFieldBegin('noteStatus', TType.STRUCT, 6)
    self.noteStatus:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

JoinSquareRequest = __TObject:new{
  squareMid,
  member
}

function JoinSquareRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.member = SquareMember:new{}
        self.member:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function JoinSquareRequest:write(oprot)
  oprot:writeStructBegin('JoinSquareRequest')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 2)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.member ~= nil then
    oprot:writeFieldBegin('member', TType.STRUCT, 3)
    self.member:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

JoinSquareChatResponse = __TObject:new{
  squareChat,
  squareChatStatus,
  squareChatMember
}

function JoinSquareChatResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.squareChat = SquareChat:new{}
        self.squareChat:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.squareChatStatus = SquareChatStatus:new{}
        self.squareChatStatus:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.squareChatMember = SquareChatMember:new{}
        self.squareChatMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function JoinSquareChatResponse:write(oprot)
  oprot:writeStructBegin('JoinSquareChatResponse')
  if self.squareChat ~= nil then
    oprot:writeFieldBegin('squareChat', TType.STRUCT, 1)
    self.squareChat:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareChatStatus ~= nil then
    oprot:writeFieldBegin('squareChatStatus', TType.STRUCT, 2)
    self.squareChatStatus:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareChatMember ~= nil then
    oprot:writeFieldBegin('squareChatMember', TType.STRUCT, 3)
    self.squareChatMember:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

JoinSquareChatRequest = __TObject:new{
  squareChatMid
}

function JoinSquareChatRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function JoinSquareChatRequest:write(oprot)
  oprot:writeStructBegin('JoinSquareChatRequest')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SendMessageResponse = __TObject:new{
  createdSquareMessage
}

function SendMessageResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.createdSquareMessage = SquareMessage:new{}
        self.createdSquareMessage:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SendMessageResponse:write(oprot)
  oprot:writeStructBegin('SendMessageResponse')
  if self.createdSquareMessage ~= nil then
    oprot:writeFieldBegin('createdSquareMessage', TType.STRUCT, 1)
    self.createdSquareMessage:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SendMessageRequest = __TObject:new{
  reqSeq,
  squareChatMid,
  squareMessage
}

function SendMessageRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.reqSeq = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.squareMessage = SquareMessage:new{}
        self.squareMessage:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SendMessageRequest:write(oprot)
  oprot:writeStructBegin('SendMessageRequest')
  if self.reqSeq ~= nil then
    oprot:writeFieldBegin('reqSeq', TType.I32, 1)
    oprot:writeI32(self.reqSeq)
    oprot:writeFieldEnd()
  end
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 2)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.squareMessage ~= nil then
    oprot:writeFieldBegin('squareMessage', TType.STRUCT, 3)
    self.squareMessage:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

MarkAsReadRequest = __TObject:new{
  squareChatMid,
  messageId
}

function MarkAsReadRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.messageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function MarkAsReadRequest:write(oprot)
  oprot:writeStructBegin('MarkAsReadRequest')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 2)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.messageId ~= nil then
    oprot:writeFieldBegin('messageId', TType.STRING, 4)
    oprot:writeString(self.messageId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

MarkAsReadResponse = __TObject:new{

}

function MarkAsReadResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function MarkAsReadResponse:write(oprot)
  oprot:writeStructBegin('MarkAsReadResponse')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SubscriptionState = __TObject:new{
  subscriptionId,
  ttlMillis
}

function SubscriptionState:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.subscriptionId = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.ttlMillis = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SubscriptionState:write(oprot)
  oprot:writeStructBegin('SubscriptionState')
  if self.subscriptionId ~= nil then
    oprot:writeFieldBegin('subscriptionId', TType.I64, 1)
    oprot:writeI64(self.subscriptionId)
    oprot:writeFieldEnd()
  end
  if self.ttlMillis ~= nil then
    oprot:writeFieldBegin('ttlMillis', TType.I64, 2)
    oprot:writeI64(self.ttlMillis)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ApproveSquareMembersResponse = __TObject:new{
  approvedMembers,
  status
}

function ApproveSquareMembersResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.approvedMembers = {}
        local _etype435, _size432 = iprot:readListBegin()
        for _i=1,_size432 do
          local _elem436 = SquareMember:new{}
          _elem436:read(iprot)
          table.insert(self.approvedMembers, _elem436)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.status = SquareStatus:new{}
        self.status:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ApproveSquareMembersResponse:write(oprot)
  oprot:writeStructBegin('ApproveSquareMembersResponse')
  if self.approvedMembers ~= nil then
    oprot:writeFieldBegin('approvedMembers', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.approvedMembers)
    for _,iter437 in ipairs(self.approvedMembers) do
      iter437:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.status ~= nil then
    oprot:writeFieldBegin('status', TType.STRUCT, 2)
    self.status:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ApproveSquareMembersRequest = __TObject:new{
  squareMid,
  requestedMemberMids
}

function ApproveSquareMembersRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.requestedMemberMids = {}
        local _etype441, _size438 = iprot:readListBegin()
        for _i=1,_size438 do
          local _elem442 = iprot:readString()
          table.insert(self.requestedMemberMids, _elem442)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ApproveSquareMembersRequest:write(oprot)
  oprot:writeStructBegin('ApproveSquareMembersRequest')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 2)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.requestedMemberMids ~= nil then
    oprot:writeFieldBegin('requestedMemberMids', TType.LIST, 3)
    oprot:writeListBegin(TType.STRING, #self.requestedMemberMids)
    for _,iter443 in ipairs(self.requestedMemberMids) do
      oprot:writeString(iter443)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CreateSquareChatResponse = __TObject:new{
  squareChat,
  squareChatStatus,
  squareChatMember
}

function CreateSquareChatResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.squareChat = SquareChat:new{}
        self.squareChat:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.squareChatStatus = SquareChatStatus:new{}
        self.squareChatStatus:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.squareChatMember = SquareChatMember:new{}
        self.squareChatMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CreateSquareChatResponse:write(oprot)
  oprot:writeStructBegin('CreateSquareChatResponse')
  if self.squareChat ~= nil then
    oprot:writeFieldBegin('squareChat', TType.STRUCT, 1)
    self.squareChat:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareChatStatus ~= nil then
    oprot:writeFieldBegin('squareChatStatus', TType.STRUCT, 2)
    self.squareChatStatus:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareChatMember ~= nil then
    oprot:writeFieldBegin('squareChatMember', TType.STRUCT, 3)
    self.squareChatMember:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CreateSquareChatRequest = __TObject:new{
  reqSeq,
  squareChat,
  squareMemberMids
}

function CreateSquareChatRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.reqSeq = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.squareChat = SquareChat:new{}
        self.squareChat:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.squareMemberMids = {}
        local _etype447, _size444 = iprot:readListBegin()
        for _i=1,_size444 do
          local _elem448 = iprot:readString()
          table.insert(self.squareMemberMids, _elem448)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CreateSquareChatRequest:write(oprot)
  oprot:writeStructBegin('CreateSquareChatRequest')
  if self.reqSeq ~= nil then
    oprot:writeFieldBegin('reqSeq', TType.I32, 1)
    oprot:writeI32(self.reqSeq)
    oprot:writeFieldEnd()
  end
  if self.squareChat ~= nil then
    oprot:writeFieldBegin('squareChat', TType.STRUCT, 2)
    self.squareChat:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareMemberMids ~= nil then
    oprot:writeFieldBegin('squareMemberMids', TType.LIST, 3)
    oprot:writeListBegin(TType.STRING, #self.squareMemberMids)
    for _,iter449 in ipairs(self.squareMemberMids) do
      oprot:writeString(iter449)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CreateSquareResponse = __TObject:new{
  square,
  creator,
  authority,
  status
}

function CreateSquareResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.square = Square:new{}
        self.square:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.creator = SquareMember:new{}
        self.creator:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.authority = SquareAuthority:new{}
        self.authority:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.status = SquareStatus:new{}
        self.status:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CreateSquareResponse:write(oprot)
  oprot:writeStructBegin('CreateSquareResponse')
  if self.square ~= nil then
    oprot:writeFieldBegin('square', TType.STRUCT, 1)
    self.square:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.creator ~= nil then
    oprot:writeFieldBegin('creator', TType.STRUCT, 2)
    self.creator:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.authority ~= nil then
    oprot:writeFieldBegin('authority', TType.STRUCT, 3)
    self.authority:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.status ~= nil then
    oprot:writeFieldBegin('status', TType.STRUCT, 4)
    self.status:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CreateSquareRequest = __TObject:new{
  reqSeq,
  square,
  creator
}

function CreateSquareRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.reqSeq = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.square = Square:new{}
        self.square:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.creator = SquareMember:new{}
        self.creator:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CreateSquareRequest:write(oprot)
  oprot:writeStructBegin('CreateSquareRequest')
  if self.reqSeq ~= nil then
    oprot:writeFieldBegin('reqSeq', TType.I32, 1)
    oprot:writeI32(self.reqSeq)
    oprot:writeFieldEnd()
  end
  if self.square ~= nil then
    oprot:writeFieldBegin('square', TType.STRUCT, 2)
    self.square:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.creator ~= nil then
    oprot:writeFieldBegin('creator', TType.STRUCT, 3)
    self.creator:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

DeleteSquareResponse = __TObject:new{

}

function DeleteSquareResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function DeleteSquareResponse:write(oprot)
  oprot:writeStructBegin('DeleteSquareResponse')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

DeleteSquareRequest = __TObject:new{
  mid,
  revision
}

function DeleteSquareRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function DeleteSquareRequest:write(oprot)
  oprot:writeStructBegin('DeleteSquareRequest')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 2)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 3)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

DestroyMessageResponse = __TObject:new{

}

function DestroyMessageResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function DestroyMessageResponse:write(oprot)
  oprot:writeStructBegin('DestroyMessageResponse')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

DestroyMessageRequest = __TObject:new{
  squareChatMid,
  messageId
}

function DestroyMessageRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.messageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function DestroyMessageRequest:write(oprot)
  oprot:writeStructBegin('DestroyMessageRequest')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 2)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.messageId ~= nil then
    oprot:writeFieldBegin('messageId', TType.STRING, 4)
    oprot:writeString(self.messageId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareChatMembersRequest = __TObject:new{
  squareChatMid,
  continuationToken,
  limit
}

function GetSquareChatMembersRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.continuationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.limit = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareChatMembersRequest:write(oprot)
  oprot:writeStructBegin('GetSquareChatMembersRequest')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.continuationToken ~= nil then
    oprot:writeFieldBegin('continuationToken', TType.STRING, 2)
    oprot:writeString(self.continuationToken)
    oprot:writeFieldEnd()
  end
  if self.limit ~= nil then
    oprot:writeFieldBegin('limit', TType.I32, 3)
    oprot:writeI32(self.limit)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareChatMembersResponse = __TObject:new{
  squareChatMembers,
  continuationToken
}

function GetSquareChatMembersResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.squareChatMembers = SquareMember:new{}
        self.squareChatMembers:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.continuationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareChatMembersResponse:write(oprot)
  oprot:writeStructBegin('GetSquareChatMembersResponse')
  if self.squareChatMembers ~= nil then
    oprot:writeFieldBegin('squareChatMembers', TType.STRUCT, 1)
    self.squareChatMembers:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.continuationToken ~= nil then
    oprot:writeFieldBegin('continuationToken', TType.STRING, 2)
    oprot:writeString(self.continuationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareChatStatusRequest = __TObject:new{
  squareChatMid
}

function GetSquareChatStatusRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareChatStatusRequest:write(oprot)
  oprot:writeStructBegin('GetSquareChatStatusRequest')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 2)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareChatStatusResponse = __TObject:new{
  chatStatus
}

function GetSquareChatStatusResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.chatStatus = SquareChatStatus:new{}
        self.chatStatus:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareChatStatusResponse:write(oprot)
  oprot:writeStructBegin('GetSquareChatStatusResponse')
  if self.chatStatus ~= nil then
    oprot:writeFieldBegin('chatStatus', TType.STRUCT, 1)
    self.chatStatus:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareChatRequest = __TObject:new{
  squareChatMid
}

function GetSquareChatRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareChatRequest:write(oprot)
  oprot:writeStructBegin('GetSquareChatRequest')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareChatResponse = __TObject:new{
  squareChat,
  squareChatMember,
  squareChatStatus
}

function GetSquareChatResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.squareChat = SquareChat:new{}
        self.squareChat:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.squareChatMember = SquareChatMember:new{}
        self.squareChatMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.squareChatStatus = SquareChatStatus:new{}
        self.squareChatStatus:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareChatResponse:write(oprot)
  oprot:writeStructBegin('GetSquareChatResponse')
  if self.squareChat ~= nil then
    oprot:writeFieldBegin('squareChat', TType.STRUCT, 1)
    self.squareChat:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareChatMember ~= nil then
    oprot:writeFieldBegin('squareChatMember', TType.STRUCT, 2)
    self.squareChatMember:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareChatStatus ~= nil then
    oprot:writeFieldBegin('squareChatStatus', TType.STRUCT, 3)
    self.squareChatStatus:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareAuthorityRequest = __TObject:new{
  squareMid
}

function GetSquareAuthorityRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareAuthorityRequest:write(oprot)
  oprot:writeStructBegin('GetSquareAuthorityRequest')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 1)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareAuthorityResponse = __TObject:new{
  authority
}

function GetSquareAuthorityResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.authority = SquareAuthority:new{}
        self.authority:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareAuthorityResponse:write(oprot)
  oprot:writeStructBegin('GetSquareAuthorityResponse')
  if self.authority ~= nil then
    oprot:writeFieldBegin('authority', TType.STRUCT, 1)
    self.authority:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetJoinedSquaresRequest = __TObject:new{
  continuationToken,
  limit
}

function GetJoinedSquaresRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.continuationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.limit = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetJoinedSquaresRequest:write(oprot)
  oprot:writeStructBegin('GetJoinedSquaresRequest')
  if self.continuationToken ~= nil then
    oprot:writeFieldBegin('continuationToken', TType.STRING, 2)
    oprot:writeString(self.continuationToken)
    oprot:writeFieldEnd()
  end
  if self.limit ~= nil then
    oprot:writeFieldBegin('limit', TType.I32, 3)
    oprot:writeI32(self.limit)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetJoinedSquaresResponse = __TObject:new{
  squares,
  members,
  authorities,
  statuses,
  continuationToken,
  noteStatuses
}

function GetJoinedSquaresResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.squares = {}
        local _etype453, _size450 = iprot:readListBegin()
        for _i=1,_size450 do
          local _elem454 = Square:new{}
          _elem454:read(iprot)
          table.insert(self.squares, _elem454)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.MAP then
        self.members = {}
        local _ktype456, _vtype457, _size455 = iprot:readMapBegin() 
        for _i=1,_size455 do
          local _key459 = iprot:readString()
          local _val460 = SquareMember:new{}
          _val460:read(iprot)
          self.members[_key459] = _val460
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.authorities = {}
        local _ktype462, _vtype463, _size461 = iprot:readMapBegin() 
        for _i=1,_size461 do
          local _key465 = iprot:readString()
          local _val466 = SquareAuthority:new{}
          _val466:read(iprot)
          self.authorities[_key465] = _val466
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.MAP then
        self.statuses = {}
        local _ktype468, _vtype469, _size467 = iprot:readMapBegin() 
        for _i=1,_size467 do
          local _key471 = iprot:readString()
          local _val472 = SquareStatus:new{}
          _val472:read(iprot)
          self.statuses[_key471] = _val472
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.continuationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.MAP then
        self.noteStatuses = {}
        local _ktype474, _vtype475, _size473 = iprot:readMapBegin() 
        for _i=1,_size473 do
          local _key477 = iprot:readString()
          local _val478 = NoteStatus:new{}
          _val478:read(iprot)
          self.noteStatuses[_key477] = _val478
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetJoinedSquaresResponse:write(oprot)
  oprot:writeStructBegin('GetJoinedSquaresResponse')
  if self.squares ~= nil then
    oprot:writeFieldBegin('squares', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.squares)
    for _,iter479 in ipairs(self.squares) do
      iter479:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.members ~= nil then
    oprot:writeFieldBegin('members', TType.MAP, 2)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.members))
    for kiter480,viter481 in pairs(self.members) do
      oprot:writeString(kiter480)
      viter481:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.authorities ~= nil then
    oprot:writeFieldBegin('authorities', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.authorities))
    for kiter482,viter483 in pairs(self.authorities) do
      oprot:writeString(kiter482)
      viter483:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.statuses ~= nil then
    oprot:writeFieldBegin('statuses', TType.MAP, 4)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.statuses))
    for kiter484,viter485 in pairs(self.statuses) do
      oprot:writeString(kiter484)
      viter485:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.continuationToken ~= nil then
    oprot:writeFieldBegin('continuationToken', TType.STRING, 5)
    oprot:writeString(self.continuationToken)
    oprot:writeFieldEnd()
  end
  if self.noteStatuses ~= nil then
    oprot:writeFieldBegin('noteStatuses', TType.MAP, 6)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.noteStatuses))
    for kiter486,viter487 in pairs(self.noteStatuses) do
      oprot:writeString(kiter486)
      viter487:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetJoinableSquareChatsRequest = __TObject:new{
  squareMid,
  continuationToken,
  limit
}

function GetJoinableSquareChatsRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.continuationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.limit = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetJoinableSquareChatsRequest:write(oprot)
  oprot:writeStructBegin('GetJoinableSquareChatsRequest')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 1)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.continuationToken ~= nil then
    oprot:writeFieldBegin('continuationToken', TType.STRING, 10)
    oprot:writeString(self.continuationToken)
    oprot:writeFieldEnd()
  end
  if self.limit ~= nil then
    oprot:writeFieldBegin('limit', TType.I32, 11)
    oprot:writeI32(self.limit)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetJoinableSquareChatsResponse = __TObject:new{
  squareChats,
  continuationToken,
  totalSquareChatCount,
  squareChatStatuses
}

function GetJoinableSquareChatsResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.squareChats = {}
        local _etype491, _size488 = iprot:readListBegin()
        for _i=1,_size488 do
          local _elem492 = SquareChat:new{}
          _elem492:read(iprot)
          table.insert(self.squareChats, _elem492)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.continuationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.totalSquareChatCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.MAP then
        self.squareChatStatuses = {}
        local _ktype494, _vtype495, _size493 = iprot:readMapBegin() 
        for _i=1,_size493 do
          local _key497 = iprot:readString()
          local _val498 = SquareChatStatus:new{}
          _val498:read(iprot)
          self.squareChatStatuses[_key497] = _val498
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetJoinableSquareChatsResponse:write(oprot)
  oprot:writeStructBegin('GetJoinableSquareChatsResponse')
  if self.squareChats ~= nil then
    oprot:writeFieldBegin('squareChats', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.squareChats)
    for _,iter499 in ipairs(self.squareChats) do
      iter499:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.continuationToken ~= nil then
    oprot:writeFieldBegin('continuationToken', TType.STRING, 2)
    oprot:writeString(self.continuationToken)
    oprot:writeFieldEnd()
  end
  if self.totalSquareChatCount ~= nil then
    oprot:writeFieldBegin('totalSquareChatCount', TType.I32, 3)
    oprot:writeI32(self.totalSquareChatCount)
    oprot:writeFieldEnd()
  end
  if self.squareChatStatuses ~= nil then
    oprot:writeFieldBegin('squareChatStatuses', TType.MAP, 4)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.squareChatStatuses))
    for kiter500,viter501 in pairs(self.squareChatStatuses) do
      oprot:writeString(kiter500)
      viter501:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetInvitationTicketUrlRequest = __TObject:new{
  mid
}

function GetInvitationTicketUrlRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetInvitationTicketUrlRequest:write(oprot)
  oprot:writeStructBegin('GetInvitationTicketUrlRequest')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 2)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetInvitationTicketUrlResponse = __TObject:new{
  invitationURL
}

function GetInvitationTicketUrlResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.invitationURL = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetInvitationTicketUrlResponse:write(oprot)
  oprot:writeStructBegin('GetInvitationTicketUrlResponse')
  if self.invitationURL ~= nil then
    oprot:writeFieldBegin('invitationURL', TType.STRING, 1)
    oprot:writeString(self.invitationURL)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LeaveSquareRequest = __TObject:new{
  squareMid
}

function LeaveSquareRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LeaveSquareRequest:write(oprot)
  oprot:writeStructBegin('LeaveSquareRequest')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 2)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LeaveSquareResponse = __TObject:new{

}

function LeaveSquareResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LeaveSquareResponse:write(oprot)
  oprot:writeStructBegin('LeaveSquareResponse')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LeaveSquareChatRequest = __TObject:new{
  squareChatMid,
  sayGoodbye,
  squareChatMemberRevision
}

function LeaveSquareChatRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.sayGoodbye = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I64 then
        self.squareChatMemberRevision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LeaveSquareChatRequest:write(oprot)
  oprot:writeStructBegin('LeaveSquareChatRequest')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 2)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.sayGoodbye ~= nil then
    oprot:writeFieldBegin('sayGoodbye', TType.BOOL, 3)
    oprot:writeBool(self.sayGoodbye)
    oprot:writeFieldEnd()
  end
  if self.squareChatMemberRevision ~= nil then
    oprot:writeFieldBegin('squareChatMemberRevision', TType.I64, 4)
    oprot:writeI64(self.squareChatMemberRevision)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LeaveSquareChatResponse = __TObject:new{

}

function LeaveSquareChatResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LeaveSquareChatResponse:write(oprot)
  oprot:writeStructBegin('LeaveSquareChatResponse')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareMemberSearchOption = __TObject:new{
  membershipState,
  memberRoles,
  displayName,
  ableToReceiveMessage,
  ableToReceiveFriendRequest,
  chatMidToExcludeMembers,
  includingMe
}

function SquareMemberSearchOption:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.membershipState = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.SET then
        self.memberRoles = {}
        local _etype505, _size502 = iprot:readSetBegin()
        for _i=1,_size502 do
          local _elem506 = iprot:readI32()
          self.memberRoles[_elem506] = _elem506
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.displayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.ableToReceiveMessage = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.ableToReceiveFriendRequest = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.chatMidToExcludeMembers = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.BOOL then
        self.includingMe = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareMemberSearchOption:write(oprot)
  oprot:writeStructBegin('SquareMemberSearchOption')
  if self.membershipState ~= nil then
    oprot:writeFieldBegin('membershipState', TType.I32, 1)
    oprot:writeI32(self.membershipState)
    oprot:writeFieldEnd()
  end
  if self.memberRoles ~= nil then
    oprot:writeFieldBegin('memberRoles', TType.SET, 2)
    oprot:writeSetBegin(TType.I32, ttable_size(self.memberRoles))
    for iter507,_ in pairs(self.memberRoles) do
      oprot:writeI32(iter507)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRING, 3)
    oprot:writeString(self.displayName)
    oprot:writeFieldEnd()
  end
  if self.ableToReceiveMessage ~= nil then
    oprot:writeFieldBegin('ableToReceiveMessage', TType.I32, 4)
    oprot:writeI32(self.ableToReceiveMessage)
    oprot:writeFieldEnd()
  end
  if self.ableToReceiveFriendRequest ~= nil then
    oprot:writeFieldBegin('ableToReceiveFriendRequest', TType.I32, 5)
    oprot:writeI32(self.ableToReceiveFriendRequest)
    oprot:writeFieldEnd()
  end
  if self.chatMidToExcludeMembers ~= nil then
    oprot:writeFieldBegin('chatMidToExcludeMembers', TType.STRING, 6)
    oprot:writeString(self.chatMidToExcludeMembers)
    oprot:writeFieldEnd()
  end
  if self.includingMe ~= nil then
    oprot:writeFieldBegin('includingMe', TType.BOOL, 7)
    oprot:writeBool(self.includingMe)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SearchSquareMembersRequest = __TObject:new{
  squareMid,
  searchOption,
  continuationToken,
  limit
}

function SearchSquareMembersRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.searchOption = SquareMemberSearchOption:new{}
        self.searchOption:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.continuationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.limit = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SearchSquareMembersRequest:write(oprot)
  oprot:writeStructBegin('SearchSquareMembersRequest')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 2)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.searchOption ~= nil then
    oprot:writeFieldBegin('searchOption', TType.STRUCT, 3)
    self.searchOption:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.continuationToken ~= nil then
    oprot:writeFieldBegin('continuationToken', TType.STRING, 4)
    oprot:writeString(self.continuationToken)
    oprot:writeFieldEnd()
  end
  if self.limit ~= nil then
    oprot:writeFieldBegin('limit', TType.I32, 5)
    oprot:writeI32(self.limit)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SearchSquareMembersResponse = __TObject:new{
  members,
  revision,
  continuationToken,
  totalCount
}

function SearchSquareMembersResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.members = {}
        local _etype511, _size508 = iprot:readListBegin()
        for _i=1,_size508 do
          local _elem512 = SquareMember:new{}
          _elem512:read(iprot)
          table.insert(self.members, _elem512)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.continuationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.totalCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SearchSquareMembersResponse:write(oprot)
  oprot:writeStructBegin('SearchSquareMembersResponse')
  if self.members ~= nil then
    oprot:writeFieldBegin('members', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.members)
    for _,iter513 in ipairs(self.members) do
      iter513:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 2)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.continuationToken ~= nil then
    oprot:writeFieldBegin('continuationToken', TType.STRING, 3)
    oprot:writeString(self.continuationToken)
    oprot:writeFieldEnd()
  end
  if self.totalCount ~= nil then
    oprot:writeFieldBegin('totalCount', TType.I32, 4)
    oprot:writeI32(self.totalCount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FindSquareByInvitationTicketRequest = __TObject:new{
  invitationTicket
}

function FindSquareByInvitationTicketRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.invitationTicket = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FindSquareByInvitationTicketRequest:write(oprot)
  oprot:writeStructBegin('FindSquareByInvitationTicketRequest')
  if self.invitationTicket ~= nil then
    oprot:writeFieldBegin('invitationTicket', TType.STRING, 2)
    oprot:writeString(self.invitationTicket)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FindSquareByInvitationTicketResponse = __TObject:new{
  square,
  myMembership,
  squareAuthority,
  squareStatus
}

function FindSquareByInvitationTicketResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.square = Square:new{}
        self.square:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.myMembership = SquareMember:new{}
        self.myMembership:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.squareAuthority = SquareAuthority:new{}
        self.squareAuthority:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.squareStatus = SquareStatus:new{}
        self.squareStatus:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FindSquareByInvitationTicketResponse:write(oprot)
  oprot:writeStructBegin('FindSquareByInvitationTicketResponse')
  if self.square ~= nil then
    oprot:writeFieldBegin('square', TType.STRUCT, 1)
    self.square:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.myMembership ~= nil then
    oprot:writeFieldBegin('myMembership', TType.STRUCT, 2)
    self.myMembership:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareAuthority ~= nil then
    oprot:writeFieldBegin('squareAuthority', TType.STRUCT, 3)
    self.squareAuthority:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareStatus ~= nil then
    oprot:writeFieldBegin('squareStatus', TType.STRUCT, 4)
    self.squareStatus:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventReceiveMessage = __TObject:new{
  squareChatMid,
  squareMessage
}

function SquareEventReceiveMessage:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.squareMessage = SquareMessage:new{}
        self.squareMessage:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventReceiveMessage:write(oprot)
  oprot:writeStructBegin('SquareEventReceiveMessage')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.squareMessage ~= nil then
    oprot:writeFieldBegin('squareMessage', TType.STRUCT, 2)
    self.squareMessage:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventSendMessage = __TObject:new{
  squareChatMid,
  squareMessage,
  reqSeq
}

function SquareEventSendMessage:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.squareMessage = SquareMessage:new{}
        self.squareMessage:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.reqSeq = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventSendMessage:write(oprot)
  oprot:writeStructBegin('SquareEventSendMessage')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.squareMessage ~= nil then
    oprot:writeFieldBegin('squareMessage', TType.STRUCT, 2)
    self.squareMessage:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.reqSeq ~= nil then
    oprot:writeFieldBegin('reqSeq', TType.I32, 3)
    oprot:writeI32(self.reqSeq)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedJoinSquareChat = __TObject:new{
  squareChatMid,
  joinedMember
}

function SquareEventNotifiedJoinSquareChat:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.joinedMember = SquareMember:new{}
        self.joinedMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedJoinSquareChat:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedJoinSquareChat')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.joinedMember ~= nil then
    oprot:writeFieldBegin('joinedMember', TType.STRUCT, 2)
    self.joinedMember:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedInviteIntoSquareChat = __TObject:new{
  squareChatMid,
  invitees,
  invitor,
  invitorRelation
}

function SquareEventNotifiedInviteIntoSquareChat:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.invitees = {}
        local _etype517, _size514 = iprot:readListBegin()
        for _i=1,_size514 do
          local _elem518 = SquareMember:new{}
          _elem518:read(iprot)
          table.insert(self.invitees, _elem518)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.invitor = SquareMember:new{}
        self.invitor:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.invitorRelation = SquareMemberRelation:new{}
        self.invitorRelation:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedInviteIntoSquareChat:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedInviteIntoSquareChat')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.invitees ~= nil then
    oprot:writeFieldBegin('invitees', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.invitees)
    for _,iter519 in ipairs(self.invitees) do
      iter519:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.invitor ~= nil then
    oprot:writeFieldBegin('invitor', TType.STRUCT, 3)
    self.invitor:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.invitorRelation ~= nil then
    oprot:writeFieldBegin('invitorRelation', TType.STRUCT, 4)
    self.invitorRelation:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedLeaveSquareChat = __TObject:new{
  squareChatMid,
  squareMemberMid,
  sayGoodbye,
  squareMember
}

function SquareEventNotifiedLeaveSquareChat:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMemberMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.sayGoodbye = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.squareMember = SquareMember:new{}
        self.squareMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedLeaveSquareChat:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedLeaveSquareChat')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.squareMemberMid ~= nil then
    oprot:writeFieldBegin('squareMemberMid', TType.STRING, 2)
    oprot:writeString(self.squareMemberMid)
    oprot:writeFieldEnd()
  end
  if self.sayGoodbye ~= nil then
    oprot:writeFieldBegin('sayGoodbye', TType.BOOL, 3)
    oprot:writeBool(self.sayGoodbye)
    oprot:writeFieldEnd()
  end
  if self.squareMember ~= nil then
    oprot:writeFieldBegin('squareMember', TType.STRUCT, 4)
    self.squareMember:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedDestroyMessage = __TObject:new{
  squareChatMid,
  messageId
}

function SquareEventNotifiedDestroyMessage:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.messageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedDestroyMessage:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedDestroyMessage')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.messageId ~= nil then
    oprot:writeFieldBegin('messageId', TType.STRING, 3)
    oprot:writeString(self.messageId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedMarkAsRead = __TObject:new{
  squareChatMid,
  sMemberMid,
  messageId
}

function SquareEventNotifiedMarkAsRead:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.sMemberMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.messageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedMarkAsRead:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedMarkAsRead')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.sMemberMid ~= nil then
    oprot:writeFieldBegin('sMemberMid', TType.STRING, 2)
    oprot:writeString(self.sMemberMid)
    oprot:writeFieldEnd()
  end
  if self.messageId ~= nil then
    oprot:writeFieldBegin('messageId', TType.STRING, 4)
    oprot:writeString(self.messageId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedUpdateSquareMemberProfile = __TObject:new{
  squareChatMid,
  squareMember
}

function SquareEventNotifiedUpdateSquareMemberProfile:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.squareMember = SquareMember:new{}
        self.squareMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedUpdateSquareMemberProfile:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedUpdateSquareMemberProfile')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.squareMember ~= nil then
    oprot:writeFieldBegin('squareMember', TType.STRUCT, 2)
    self.squareMember:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedKickoutFromSquare = __TObject:new{
  squareChatMid,
  kickees
}

function SquareEventNotifiedKickoutFromSquare:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.kickees = {}
        local _etype523, _size520 = iprot:readListBegin()
        for _i=1,_size520 do
          local _elem524 = SquareMember:new{}
          _elem524:read(iprot)
          table.insert(self.kickees, _elem524)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedKickoutFromSquare:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedKickoutFromSquare')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.kickees ~= nil then
    oprot:writeFieldBegin('kickees', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.kickees)
    for _,iter525 in ipairs(self.kickees) do
      iter525:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedShutdownSquare = __TObject:new{
  squareChatMid,
  square
}

function SquareEventNotifiedShutdownSquare:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.square = Square:new{}
        self.square:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedShutdownSquare:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedShutdownSquare')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.square ~= nil then
    oprot:writeFieldBegin('square', TType.STRUCT, 2)
    self.square:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedDeleteSquareChat = __TObject:new{
  squareChat
}

function SquareEventNotifiedDeleteSquareChat:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.squareChat = SquareChat:new{}
        self.squareChat:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedDeleteSquareChat:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedDeleteSquareChat')
  if self.squareChat ~= nil then
    oprot:writeFieldBegin('squareChat', TType.STRUCT, 1)
    self.squareChat:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedUpdateSquareChatProfileName = __TObject:new{
  squareChatMid,
  editor,
  updatedChatName
}

function SquareEventNotifiedUpdateSquareChatProfileName:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.editor = SquareMember:new{}
        self.editor:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.updatedChatName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedUpdateSquareChatProfileName:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedUpdateSquareChatProfileName')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.editor ~= nil then
    oprot:writeFieldBegin('editor', TType.STRUCT, 2)
    self.editor:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.updatedChatName ~= nil then
    oprot:writeFieldBegin('updatedChatName', TType.STRING, 3)
    oprot:writeString(self.updatedChatName)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedUpdateSquareChatProfileImage = __TObject:new{
  squareChatMid,
  editor
}

function SquareEventNotifiedUpdateSquareChatProfileImage:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.editor = SquareMember:new{}
        self.editor:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedUpdateSquareChatProfileImage:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedUpdateSquareChatProfileImage')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.editor ~= nil then
    oprot:writeFieldBegin('editor', TType.STRUCT, 2)
    self.editor:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedUpdateSquareChatStatus = __TObject:new{
  squareChatMid,
  statusWithoutMessage
}

function SquareEventNotifiedUpdateSquareChatStatus:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.statusWithoutMessage = SquareChatStatusWithoutMessage:new{}
        self.statusWithoutMessage:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedUpdateSquareChatStatus:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedUpdateSquareChatStatus')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.statusWithoutMessage ~= nil then
    oprot:writeFieldBegin('statusWithoutMessage', TType.STRUCT, 2)
    self.statusWithoutMessage:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedUpdateSquareStatus = __TObject:new{
  squareMid,
  squareStatus
}

function SquareEventNotifiedUpdateSquareStatus:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.squareStatus = SquareStatus:new{}
        self.squareStatus:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedUpdateSquareStatus:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedUpdateSquareStatus')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 1)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.squareStatus ~= nil then
    oprot:writeFieldBegin('squareStatus', TType.STRUCT, 2)
    self.squareStatus:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedCreateSquareMember = __TObject:new{
  square,
  squareAuthority,
  squareStatus,
  squareMember,
  squareFeatureSet
}

function SquareEventNotifiedCreateSquareMember:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.square = Square:new{}
        self.square:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.squareAuthority = SquareAuthority:new{}
        self.squareAuthority:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.squareStatus = SquareStatus:new{}
        self.squareStatus:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.squareMember = SquareMember:new{}
        self.squareMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRUCT then
        self.squareFeatureSet = SquareFeatureSet:new{}
        self.squareFeatureSet:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedCreateSquareMember:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedCreateSquareMember')
  if self.square ~= nil then
    oprot:writeFieldBegin('square', TType.STRUCT, 1)
    self.square:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareAuthority ~= nil then
    oprot:writeFieldBegin('squareAuthority', TType.STRUCT, 2)
    self.squareAuthority:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareStatus ~= nil then
    oprot:writeFieldBegin('squareStatus', TType.STRUCT, 3)
    self.squareStatus:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareMember ~= nil then
    oprot:writeFieldBegin('squareMember', TType.STRUCT, 4)
    self.squareMember:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareFeatureSet ~= nil then
    oprot:writeFieldBegin('squareFeatureSet', TType.STRUCT, 5)
    self.squareFeatureSet:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedCreateSquareChatMember = __TObject:new{
  squareChatMid,
  squareMemberMid,
  squareChatMember
}

function SquareEventNotifiedCreateSquareChatMember:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMemberMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.squareChatMember = SquareChatMember:new{}
        self.squareChatMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedCreateSquareChatMember:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedCreateSquareChatMember')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.squareMemberMid ~= nil then
    oprot:writeFieldBegin('squareMemberMid', TType.STRING, 2)
    oprot:writeString(self.squareMemberMid)
    oprot:writeFieldEnd()
  end
  if self.squareChatMember ~= nil then
    oprot:writeFieldBegin('squareChatMember', TType.STRUCT, 3)
    self.squareChatMember:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedUpdateSquareMemberRelation = __TObject:new{
  squareMid,
  myMemberMid,
  targetSquareMemberMid,
  squareMemberRelation
}

function SquareEventNotifiedUpdateSquareMemberRelation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.myMemberMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.targetSquareMemberMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.squareMemberRelation = SquareMemberRelation:new{}
        self.squareMemberRelation:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedUpdateSquareMemberRelation:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedUpdateSquareMemberRelation')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 1)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.myMemberMid ~= nil then
    oprot:writeFieldBegin('myMemberMid', TType.STRING, 2)
    oprot:writeString(self.myMemberMid)
    oprot:writeFieldEnd()
  end
  if self.targetSquareMemberMid ~= nil then
    oprot:writeFieldBegin('targetSquareMemberMid', TType.STRING, 3)
    oprot:writeString(self.targetSquareMemberMid)
    oprot:writeFieldEnd()
  end
  if self.squareMemberRelation ~= nil then
    oprot:writeFieldBegin('squareMemberRelation', TType.STRUCT, 4)
    self.squareMemberRelation:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedUpdateSquare = __TObject:new{
  squareMid,
  square
}

function SquareEventNotifiedUpdateSquare:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.square = Square:new{}
        self.square:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedUpdateSquare:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedUpdateSquare')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 1)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.square ~= nil then
    oprot:writeFieldBegin('square', TType.STRUCT, 2)
    self.square:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedUpdateSquareMember = __TObject:new{
  squareMid,
  squareMemberMid,
  squareMember
}

function SquareEventNotifiedUpdateSquareMember:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMemberMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.squareMember = SquareMember:new{}
        self.squareMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedUpdateSquareMember:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedUpdateSquareMember')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 1)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.squareMemberMid ~= nil then
    oprot:writeFieldBegin('squareMemberMid', TType.STRING, 2)
    oprot:writeString(self.squareMemberMid)
    oprot:writeFieldEnd()
  end
  if self.squareMember ~= nil then
    oprot:writeFieldBegin('squareMember', TType.STRUCT, 3)
    self.squareMember:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedUpdateSquareChat = __TObject:new{
  squareMid,
  squareChatMid,
  squareChat
}

function SquareEventNotifiedUpdateSquareChat:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.squareChat = SquareChat:new{}
        self.squareChat:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedUpdateSquareChat:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedUpdateSquareChat')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 1)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 2)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.squareChat ~= nil then
    oprot:writeFieldBegin('squareChat', TType.STRUCT, 3)
    self.squareChat:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotificationJoinRequest = __TObject:new{
  squareMid,
  squareName,
  requestMemberName,
  profileImageObsHash
}

function SquareEventNotificationJoinRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.requestMemberName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.profileImageObsHash = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotificationJoinRequest:write(oprot)
  oprot:writeStructBegin('SquareEventNotificationJoinRequest')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 1)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.squareName ~= nil then
    oprot:writeFieldBegin('squareName', TType.STRING, 2)
    oprot:writeString(self.squareName)
    oprot:writeFieldEnd()
  end
  if self.requestMemberName ~= nil then
    oprot:writeFieldBegin('requestMemberName', TType.STRING, 3)
    oprot:writeString(self.requestMemberName)
    oprot:writeFieldEnd()
  end
  if self.profileImageObsHash ~= nil then
    oprot:writeFieldBegin('profileImageObsHash', TType.STRING, 4)
    oprot:writeString(self.profileImageObsHash)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotificationMemberUpdate = __TObject:new{
  squareMid,
  squareName,
  profileImageObsHash
}

function SquareEventNotificationMemberUpdate:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.profileImageObsHash = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotificationMemberUpdate:write(oprot)
  oprot:writeStructBegin('SquareEventNotificationMemberUpdate')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 1)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.squareName ~= nil then
    oprot:writeFieldBegin('squareName', TType.STRING, 2)
    oprot:writeString(self.squareName)
    oprot:writeFieldEnd()
  end
  if self.profileImageObsHash ~= nil then
    oprot:writeFieldBegin('profileImageObsHash', TType.STRING, 3)
    oprot:writeString(self.profileImageObsHash)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotificationSquareDelete = __TObject:new{
  squareMid,
  squareName,
  profileImageObsHash
}

function SquareEventNotificationSquareDelete:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.profileImageObsHash = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotificationSquareDelete:write(oprot)
  oprot:writeStructBegin('SquareEventNotificationSquareDelete')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 1)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.squareName ~= nil then
    oprot:writeFieldBegin('squareName', TType.STRING, 2)
    oprot:writeString(self.squareName)
    oprot:writeFieldEnd()
  end
  if self.profileImageObsHash ~= nil then
    oprot:writeFieldBegin('profileImageObsHash', TType.STRING, 3)
    oprot:writeString(self.profileImageObsHash)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotificationSquareChatDelete = __TObject:new{
  squareChatMid,
  squareChatName,
  profileImageObsHash
}

function SquareEventNotificationSquareChatDelete:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareChatName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.profileImageObsHash = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotificationSquareChatDelete:write(oprot)
  oprot:writeStructBegin('SquareEventNotificationSquareChatDelete')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.squareChatName ~= nil then
    oprot:writeFieldBegin('squareChatName', TType.STRING, 2)
    oprot:writeString(self.squareChatName)
    oprot:writeFieldEnd()
  end
  if self.profileImageObsHash ~= nil then
    oprot:writeFieldBegin('profileImageObsHash', TType.STRING, 3)
    oprot:writeString(self.profileImageObsHash)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotificationMessage = __TObject:new{
  squareChatMid,
  squareMessage,
  senderDisplayName,
  unreadCount,
  requiredToFetchChatEvents
}

function SquareEventNotificationMessage:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.squareMessage = SquareMessage:new{}
        self.squareMessage:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.senderDisplayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.unreadCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.requiredToFetchChatEvents = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotificationMessage:write(oprot)
  oprot:writeStructBegin('SquareEventNotificationMessage')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.squareMessage ~= nil then
    oprot:writeFieldBegin('squareMessage', TType.STRUCT, 2)
    self.squareMessage:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.senderDisplayName ~= nil then
    oprot:writeFieldBegin('senderDisplayName', TType.STRING, 3)
    oprot:writeString(self.senderDisplayName)
    oprot:writeFieldEnd()
  end
  if self.unreadCount ~= nil then
    oprot:writeFieldBegin('unreadCount', TType.I32, 4)
    oprot:writeI32(self.unreadCount)
    oprot:writeFieldEnd()
  end
  if self.requiredToFetchChatEvents ~= nil then
    oprot:writeFieldBegin('requiredToFetchChatEvents', TType.BOOL, 5)
    oprot:writeBool(self.requiredToFetchChatEvents)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedUpdateSquareChatMember = __TObject:new{
  squareChatMid,
  squareMemberMid,
  squareChatMember
}

function SquareEventNotifiedUpdateSquareChatMember:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMemberMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.squareChatMember = SquareChatMember:new{}
        self.squareChatMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedUpdateSquareChatMember:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedUpdateSquareChatMember')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 1)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.squareMemberMid ~= nil then
    oprot:writeFieldBegin('squareMemberMid', TType.STRING, 2)
    oprot:writeString(self.squareMemberMid)
    oprot:writeFieldEnd()
  end
  if self.squareChatMember ~= nil then
    oprot:writeFieldBegin('squareChatMember', TType.STRUCT, 3)
    self.squareChatMember:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedUpdateSquareAuthority = __TObject:new{
  squareMid,
  squareAuthority
}

function SquareEventNotifiedUpdateSquareAuthority:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.squareAuthority = SquareAuthority:new{}
        self.squareAuthority:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedUpdateSquareAuthority:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedUpdateSquareAuthority')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 1)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.squareAuthority ~= nil then
    oprot:writeFieldBegin('squareAuthority', TType.STRUCT, 2)
    self.squareAuthority:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventNotifiedUpdateSquareFeatureSet = __TObject:new{
  squareFeatureSet
}

function SquareEventNotifiedUpdateSquareFeatureSet:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.squareFeatureSet = SquareFeatureSet:new{}
        self.squareFeatureSet:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventNotifiedUpdateSquareFeatureSet:write(oprot)
  oprot:writeStructBegin('SquareEventNotifiedUpdateSquareFeatureSet')
  if self.squareFeatureSet ~= nil then
    oprot:writeFieldBegin('squareFeatureSet', TType.STRUCT, 1)
    self.squareFeatureSet:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEventPayload = __TObject:new{
  receiveMessage,
  sendMessage,
  notifiedJoinSquareChat,
  notifiedInviteIntoSquareChat,
  notifiedLeaveSquareChat,
  notifiedDestroyMessage,
  notifiedMarkAsRead,
  notifiedUpdateSquareMemberProfile,
  notifiedKickoutFromSquare,
  notifiedShutdownSquare,
  notifiedDeleteSquareChat,
  notifiedUpdateSquareChatProfileName,
  notifiedUpdateSquareChatProfileImage,
  notifiedUpdateSquareStatus,
  notifiedUpdateSquareChatStatus,
  notifiedCreateSquareMember,
  notifiedCreateSquareChatMember,
  notifiedUpdateSquareMemberRelation,
  notifiedUpdateSquare,
  notifiedUpdateSquareMember,
  notifiedUpdateSquareChat,
  notificationJoinRequest,
  notificationJoined,
  notificationPromoteCoadmin,
  notificationPromoteAdmin,
  notificationDemoteMember,
  notificationKickedOut,
  notificationSquareDelete,
  notificationSquareChatDelete,
  notificationMessage,
  notifiedUpdateSquareChatMember,
  notifiedUpdateSquareAuthority,
  notifiedUpdateSquareFeatureSet
}

function SquareEventPayload:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.receiveMessage = SquareEventReceiveMessage:new{}
        self.receiveMessage:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.sendMessage = SquareEventSendMessage:new{}
        self.sendMessage:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notifiedJoinSquareChat = SquareEventNotifiedJoinSquareChat:new{}
        self.notifiedJoinSquareChat:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.notifiedInviteIntoSquareChat = SquareEventNotifiedInviteIntoSquareChat:new{}
        self.notifiedInviteIntoSquareChat:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRUCT then
        self.notifiedLeaveSquareChat = SquareEventNotifiedLeaveSquareChat:new{}
        self.notifiedLeaveSquareChat:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRUCT then
        self.notifiedDestroyMessage = SquareEventNotifiedDestroyMessage:new{}
        self.notifiedDestroyMessage:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRUCT then
        self.notifiedMarkAsRead = SquareEventNotifiedMarkAsRead:new{}
        self.notifiedMarkAsRead:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRUCT then
        self.notifiedUpdateSquareMemberProfile = SquareEventNotifiedUpdateSquareMemberProfile:new{}
        self.notifiedUpdateSquareMemberProfile:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRUCT then
        self.notifiedKickoutFromSquare = SquareEventNotifiedKickoutFromSquare:new{}
        self.notifiedKickoutFromSquare:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.STRUCT then
        self.notifiedShutdownSquare = SquareEventNotifiedShutdownSquare:new{}
        self.notifiedShutdownSquare:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRUCT then
        self.notifiedDeleteSquareChat = SquareEventNotifiedDeleteSquareChat:new{}
        self.notifiedDeleteSquareChat:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.STRUCT then
        self.notifiedUpdateSquareChatProfileName = SquareEventNotifiedUpdateSquareChatProfileName:new{}
        self.notifiedUpdateSquareChatProfileName:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.STRUCT then
        self.notifiedUpdateSquareChatProfileImage = SquareEventNotifiedUpdateSquareChatProfileImage:new{}
        self.notifiedUpdateSquareChatProfileImage:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRUCT then
        self.notifiedUpdateSquareStatus = SquareEventNotifiedUpdateSquareStatus:new{}
        self.notifiedUpdateSquareStatus:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRUCT then
        self.notifiedUpdateSquareChatStatus = SquareEventNotifiedUpdateSquareChatStatus:new{}
        self.notifiedUpdateSquareChatStatus:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.STRUCT then
        self.notifiedCreateSquareMember = SquareEventNotifiedCreateSquareMember:new{}
        self.notifiedCreateSquareMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.STRUCT then
        self.notifiedCreateSquareChatMember = SquareEventNotifiedCreateSquareChatMember:new{}
        self.notifiedCreateSquareChatMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.STRUCT then
        self.notifiedUpdateSquareMemberRelation = SquareEventNotifiedUpdateSquareMemberRelation:new{}
        self.notifiedUpdateSquareMemberRelation:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRUCT then
        self.notifiedUpdateSquare = SquareEventNotifiedUpdateSquare:new{}
        self.notifiedUpdateSquare:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRUCT then
        self.notifiedUpdateSquareMember = SquareEventNotifiedUpdateSquareMember:new{}
        self.notifiedUpdateSquareMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRUCT then
        self.notifiedUpdateSquareChat = SquareEventNotifiedUpdateSquareChat:new{}
        self.notifiedUpdateSquareChat:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRUCT then
        self.notificationJoinRequest = SquareEventNotificationJoinRequest:new{}
        self.notificationJoinRequest:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.STRUCT then
        self.notificationJoined = SquareEventNotificationMemberUpdate:new{}
        self.notificationJoined:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.STRUCT then
        self.notificationPromoteCoadmin = SquareEventNotificationMemberUpdate:new{}
        self.notificationPromoteCoadmin:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.STRUCT then
        self.notificationPromoteAdmin = SquareEventNotificationMemberUpdate:new{}
        self.notificationPromoteAdmin:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.STRUCT then
        self.notificationDemoteMember = SquareEventNotificationMemberUpdate:new{}
        self.notificationDemoteMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 27 then
      if ftype == TType.STRUCT then
        self.notificationKickedOut = SquareEventNotificationMemberUpdate:new{}
        self.notificationKickedOut:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 28 then
      if ftype == TType.STRUCT then
        self.notificationSquareDelete = SquareEventNotificationSquareDelete:new{}
        self.notificationSquareDelete:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 29 then
      if ftype == TType.STRUCT then
        self.notificationSquareChatDelete = SquareEventNotificationSquareChatDelete:new{}
        self.notificationSquareChatDelete:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRUCT then
        self.notificationMessage = SquareEventNotificationMessage:new{}
        self.notificationMessage:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRUCT then
        self.notifiedUpdateSquareChatMember = SquareEventNotifiedUpdateSquareChatMember:new{}
        self.notifiedUpdateSquareChatMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRUCT then
        self.notifiedUpdateSquareAuthority = SquareEventNotifiedUpdateSquareAuthority:new{}
        self.notifiedUpdateSquareAuthority:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.STRUCT then
        self.notifiedUpdateSquareFeatureSet = SquareEventNotifiedUpdateSquareFeatureSet:new{}
        self.notifiedUpdateSquareFeatureSet:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEventPayload:write(oprot)
  oprot:writeStructBegin('SquareEventPayload')
  if self.receiveMessage ~= nil then
    oprot:writeFieldBegin('receiveMessage', TType.STRUCT, 1)
    self.receiveMessage:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.sendMessage ~= nil then
    oprot:writeFieldBegin('sendMessage', TType.STRUCT, 2)
    self.sendMessage:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedJoinSquareChat ~= nil then
    oprot:writeFieldBegin('notifiedJoinSquareChat', TType.STRUCT, 3)
    self.notifiedJoinSquareChat:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedInviteIntoSquareChat ~= nil then
    oprot:writeFieldBegin('notifiedInviteIntoSquareChat', TType.STRUCT, 4)
    self.notifiedInviteIntoSquareChat:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedLeaveSquareChat ~= nil then
    oprot:writeFieldBegin('notifiedLeaveSquareChat', TType.STRUCT, 5)
    self.notifiedLeaveSquareChat:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedDestroyMessage ~= nil then
    oprot:writeFieldBegin('notifiedDestroyMessage', TType.STRUCT, 6)
    self.notifiedDestroyMessage:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedMarkAsRead ~= nil then
    oprot:writeFieldBegin('notifiedMarkAsRead', TType.STRUCT, 7)
    self.notifiedMarkAsRead:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedUpdateSquareMemberProfile ~= nil then
    oprot:writeFieldBegin('notifiedUpdateSquareMemberProfile', TType.STRUCT, 8)
    self.notifiedUpdateSquareMemberProfile:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedKickoutFromSquare ~= nil then
    oprot:writeFieldBegin('notifiedKickoutFromSquare', TType.STRUCT, 20)
    self.notifiedKickoutFromSquare:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedShutdownSquare ~= nil then
    oprot:writeFieldBegin('notifiedShutdownSquare', TType.STRUCT, 19)
    self.notifiedShutdownSquare:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedDeleteSquareChat ~= nil then
    oprot:writeFieldBegin('notifiedDeleteSquareChat', TType.STRUCT, 21)
    self.notifiedDeleteSquareChat:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedUpdateSquareChatProfileName ~= nil then
    oprot:writeFieldBegin('notifiedUpdateSquareChatProfileName', TType.STRUCT, 31)
    self.notifiedUpdateSquareChatProfileName:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedUpdateSquareChatProfileImage ~= nil then
    oprot:writeFieldBegin('notifiedUpdateSquareChatProfileImage', TType.STRUCT, 32)
    self.notifiedUpdateSquareChatProfileImage:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedUpdateSquareStatus ~= nil then
    oprot:writeFieldBegin('notifiedUpdateSquareStatus', TType.STRUCT, 14)
    self.notifiedUpdateSquareStatus:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedUpdateSquareChatStatus ~= nil then
    oprot:writeFieldBegin('notifiedUpdateSquareChatStatus', TType.STRUCT, 15)
    self.notifiedUpdateSquareChatStatus:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedCreateSquareMember ~= nil then
    oprot:writeFieldBegin('notifiedCreateSquareMember', TType.STRUCT, 16)
    self.notifiedCreateSquareMember:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedCreateSquareChatMember ~= nil then
    oprot:writeFieldBegin('notifiedCreateSquareChatMember', TType.STRUCT, 17)
    self.notifiedCreateSquareChatMember:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedUpdateSquareMemberRelation ~= nil then
    oprot:writeFieldBegin('notifiedUpdateSquareMemberRelation', TType.STRUCT, 18)
    self.notifiedUpdateSquareMemberRelation:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedUpdateSquare ~= nil then
    oprot:writeFieldBegin('notifiedUpdateSquare', TType.STRUCT, 9)
    self.notifiedUpdateSquare:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedUpdateSquareMember ~= nil then
    oprot:writeFieldBegin('notifiedUpdateSquareMember', TType.STRUCT, 10)
    self.notifiedUpdateSquareMember:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedUpdateSquareChat ~= nil then
    oprot:writeFieldBegin('notifiedUpdateSquareChat', TType.STRUCT, 11)
    self.notifiedUpdateSquareChat:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notificationJoinRequest ~= nil then
    oprot:writeFieldBegin('notificationJoinRequest', TType.STRUCT, 22)
    self.notificationJoinRequest:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notificationJoined ~= nil then
    oprot:writeFieldBegin('notificationJoined', TType.STRUCT, 23)
    self.notificationJoined:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notificationPromoteCoadmin ~= nil then
    oprot:writeFieldBegin('notificationPromoteCoadmin', TType.STRUCT, 24)
    self.notificationPromoteCoadmin:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notificationPromoteAdmin ~= nil then
    oprot:writeFieldBegin('notificationPromoteAdmin', TType.STRUCT, 25)
    self.notificationPromoteAdmin:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notificationDemoteMember ~= nil then
    oprot:writeFieldBegin('notificationDemoteMember', TType.STRUCT, 26)
    self.notificationDemoteMember:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notificationKickedOut ~= nil then
    oprot:writeFieldBegin('notificationKickedOut', TType.STRUCT, 27)
    self.notificationKickedOut:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notificationSquareDelete ~= nil then
    oprot:writeFieldBegin('notificationSquareDelete', TType.STRUCT, 28)
    self.notificationSquareDelete:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notificationSquareChatDelete ~= nil then
    oprot:writeFieldBegin('notificationSquareChatDelete', TType.STRUCT, 29)
    self.notificationSquareChatDelete:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notificationMessage ~= nil then
    oprot:writeFieldBegin('notificationMessage', TType.STRUCT, 30)
    self.notificationMessage:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedUpdateSquareChatMember ~= nil then
    oprot:writeFieldBegin('notifiedUpdateSquareChatMember', TType.STRUCT, 12)
    self.notifiedUpdateSquareChatMember:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedUpdateSquareAuthority ~= nil then
    oprot:writeFieldBegin('notifiedUpdateSquareAuthority', TType.STRUCT, 13)
    self.notifiedUpdateSquareAuthority:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notifiedUpdateSquareFeatureSet ~= nil then
    oprot:writeFieldBegin('notifiedUpdateSquareFeatureSet', TType.STRUCT, 33)
    self.notifiedUpdateSquareFeatureSet:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareEvent = __TObject:new{
  createdTime,
  type,
  payload,
  syncToken,
  eventStatus
}

function SquareEvent:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.payload = SquareEventPayload:new{}
        self.payload:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.syncToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.eventStatus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareEvent:write(oprot)
  oprot:writeStructBegin('SquareEvent')
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 2)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 3)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.payload ~= nil then
    oprot:writeFieldBegin('payload', TType.STRUCT, 4)
    self.payload:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.syncToken ~= nil then
    oprot:writeFieldBegin('syncToken', TType.STRING, 5)
    oprot:writeString(self.syncToken)
    oprot:writeFieldEnd()
  end
  if self.eventStatus ~= nil then
    oprot:writeFieldBegin('eventStatus', TType.I32, 6)
    oprot:writeI32(self.eventStatus)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FetchMyEventsRequest = __TObject:new{
  subscriptionId,
  syncToken,
  limit,
  continuationToken
}

function FetchMyEventsRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.subscriptionId = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.syncToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.limit = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.continuationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FetchMyEventsRequest:write(oprot)
  oprot:writeStructBegin('FetchMyEventsRequest')
  if self.subscriptionId ~= nil then
    oprot:writeFieldBegin('subscriptionId', TType.I64, 1)
    oprot:writeI64(self.subscriptionId)
    oprot:writeFieldEnd()
  end
  if self.syncToken ~= nil then
    oprot:writeFieldBegin('syncToken', TType.STRING, 2)
    oprot:writeString(self.syncToken)
    oprot:writeFieldEnd()
  end
  if self.limit ~= nil then
    oprot:writeFieldBegin('limit', TType.I32, 3)
    oprot:writeI32(self.limit)
    oprot:writeFieldEnd()
  end
  if self.continuationToken ~= nil then
    oprot:writeFieldBegin('continuationToken', TType.STRING, 4)
    oprot:writeString(self.continuationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FetchMyEventsResponse = __TObject:new{
  subscription,
  events,
  syncToken,
  continuationToken
}

function FetchMyEventsResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.subscription = SubscriptionState:new{}
        self.subscription:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.events = {}
        local _etype529, _size526 = iprot:readListBegin()
        for _i=1,_size526 do
          local _elem530 = SquareEvent:new{}
          _elem530:read(iprot)
          table.insert(self.events, _elem530)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.syncToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.continuationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FetchMyEventsResponse:write(oprot)
  oprot:writeStructBegin('FetchMyEventsResponse')
  if self.subscription ~= nil then
    oprot:writeFieldBegin('subscription', TType.STRUCT, 1)
    self.subscription:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.events ~= nil then
    oprot:writeFieldBegin('events', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.events)
    for _,iter531 in ipairs(self.events) do
      iter531:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.syncToken ~= nil then
    oprot:writeFieldBegin('syncToken', TType.STRING, 3)
    oprot:writeString(self.syncToken)
    oprot:writeFieldEnd()
  end
  if self.continuationToken ~= nil then
    oprot:writeFieldBegin('continuationToken', TType.STRING, 4)
    oprot:writeString(self.continuationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FetchSquareChatEventsRequest = __TObject:new{
  subscriptionId,
  squareChatMid,
  syncToken,
  limit,
  direction
}

function FetchSquareChatEventsRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.subscriptionId = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.syncToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.limit = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.direction = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FetchSquareChatEventsRequest:write(oprot)
  oprot:writeStructBegin('FetchSquareChatEventsRequest')
  if self.subscriptionId ~= nil then
    oprot:writeFieldBegin('subscriptionId', TType.I64, 1)
    oprot:writeI64(self.subscriptionId)
    oprot:writeFieldEnd()
  end
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 2)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.syncToken ~= nil then
    oprot:writeFieldBegin('syncToken', TType.STRING, 3)
    oprot:writeString(self.syncToken)
    oprot:writeFieldEnd()
  end
  if self.limit ~= nil then
    oprot:writeFieldBegin('limit', TType.I32, 4)
    oprot:writeI32(self.limit)
    oprot:writeFieldEnd()
  end
  if self.direction ~= nil then
    oprot:writeFieldBegin('direction', TType.I32, 5)
    oprot:writeI32(self.direction)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FetchSquareChatEventsResponse = __TObject:new{
  subscription,
  events,
  syncToken,
  continuationToken
}

function FetchSquareChatEventsResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.subscription = SubscriptionState:new{}
        self.subscription:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.events = {}
        local _etype535, _size532 = iprot:readListBegin()
        for _i=1,_size532 do
          local _elem536 = SquareEvent:new{}
          _elem536:read(iprot)
          table.insert(self.events, _elem536)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.syncToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.continuationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FetchSquareChatEventsResponse:write(oprot)
  oprot:writeStructBegin('FetchSquareChatEventsResponse')
  if self.subscription ~= nil then
    oprot:writeFieldBegin('subscription', TType.STRUCT, 1)
    self.subscription:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.events ~= nil then
    oprot:writeFieldBegin('events', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.events)
    for _,iter537 in ipairs(self.events) do
      iter537:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.syncToken ~= nil then
    oprot:writeFieldBegin('syncToken', TType.STRING, 3)
    oprot:writeString(self.syncToken)
    oprot:writeFieldEnd()
  end
  if self.continuationToken ~= nil then
    oprot:writeFieldBegin('continuationToken', TType.STRING, 4)
    oprot:writeString(self.continuationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

InviteToSquareRequest = __TObject:new{
  squareMid,
  invitees,
  squareChatMid
}

function InviteToSquareRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.invitees = {}
        local _etype541, _size538 = iprot:readListBegin()
        for _i=1,_size538 do
          local _elem542 = iprot:readString()
          table.insert(self.invitees, _elem542)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function InviteToSquareRequest:write(oprot)
  oprot:writeStructBegin('InviteToSquareRequest')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 2)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.invitees ~= nil then
    oprot:writeFieldBegin('invitees', TType.LIST, 3)
    oprot:writeListBegin(TType.STRING, #self.invitees)
    for _,iter543 in ipairs(self.invitees) do
      oprot:writeString(iter543)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 4)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

InviteToSquareResponse = __TObject:new{

}

function InviteToSquareResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function InviteToSquareResponse:write(oprot)
  oprot:writeStructBegin('InviteToSquareResponse')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

InviteToSquareChatRequest = __TObject:new{
  inviteeMids,
  squareChatMid
}

function InviteToSquareChatRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.inviteeMids = {}
        local _etype547, _size544 = iprot:readListBegin()
        for _i=1,_size544 do
          local _elem548 = iprot:readString()
          table.insert(self.inviteeMids, _elem548)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function InviteToSquareChatRequest:write(oprot)
  oprot:writeStructBegin('InviteToSquareChatRequest')
  if self.inviteeMids ~= nil then
    oprot:writeFieldBegin('inviteeMids', TType.LIST, 1)
    oprot:writeListBegin(TType.STRING, #self.inviteeMids)
    for _,iter549 in ipairs(self.inviteeMids) do
      oprot:writeString(iter549)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 2)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

InviteToSquareChatResponse = __TObject:new{
  inviteeMids
}

function InviteToSquareChatResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.inviteeMids = {}
        local _etype553, _size550 = iprot:readListBegin()
        for _i=1,_size550 do
          local _elem554 = iprot:readString()
          table.insert(self.inviteeMids, _elem554)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function InviteToSquareChatResponse:write(oprot)
  oprot:writeStructBegin('InviteToSquareChatResponse')
  if self.inviteeMids ~= nil then
    oprot:writeFieldBegin('inviteeMids', TType.LIST, 1)
    oprot:writeListBegin(TType.STRING, #self.inviteeMids)
    for _,iter555 in ipairs(self.inviteeMids) do
      oprot:writeString(iter555)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareMemberRequest = __TObject:new{
  squareMemberMid
}

function GetSquareMemberRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMemberMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareMemberRequest:write(oprot)
  oprot:writeStructBegin('GetSquareMemberRequest')
  if self.squareMemberMid ~= nil then
    oprot:writeFieldBegin('squareMemberMid', TType.STRING, 1)
    oprot:writeString(self.squareMemberMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareMemberResponse = __TObject:new{
  squareMember,
  relation,
  oneOnOneChatMid
}

function GetSquareMemberResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.squareMember = SquareMember:new{}
        self.squareMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.relation = SquareMemberRelation:new{}
        self.relation:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.oneOnOneChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareMemberResponse:write(oprot)
  oprot:writeStructBegin('GetSquareMemberResponse')
  if self.squareMember ~= nil then
    oprot:writeFieldBegin('squareMember', TType.STRUCT, 1)
    self.squareMember:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.relation ~= nil then
    oprot:writeFieldBegin('relation', TType.STRUCT, 2)
    self.relation:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.oneOnOneChatMid ~= nil then
    oprot:writeFieldBegin('oneOnOneChatMid', TType.STRING, 3)
    oprot:writeString(self.oneOnOneChatMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareMembersRequest = __TObject:new{
  mids
}

function GetSquareMembersRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.SET then
        self.mids = {}
        local _etype559, _size556 = iprot:readSetBegin()
        for _i=1,_size556 do
          local _elem560 = iprot:readString()
          self.mids[_elem560] = _elem560
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareMembersRequest:write(oprot)
  oprot:writeStructBegin('GetSquareMembersRequest')
  if self.mids ~= nil then
    oprot:writeFieldBegin('mids', TType.SET, 2)
    oprot:writeSetBegin(TType.STRING, ttable_size(self.mids))
    for iter561,_ in pairs(self.mids) do
      oprot:writeString(iter561)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareMembersResponse = __TObject:new{
  members
}

function GetSquareMembersResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.members = SquareMember:new{}
        self.members:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareMembersResponse:write(oprot)
  oprot:writeStructBegin('GetSquareMembersResponse')
  if self.members ~= nil then
    oprot:writeFieldBegin('members', TType.STRUCT, 1)
    self.members:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareMemberRelationsRequest = __TObject:new{
  state,
  continuationToken,
  limit
}

function GetSquareMemberRelationsRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.state = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.continuationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.limit = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareMemberRelationsRequest:write(oprot)
  oprot:writeStructBegin('GetSquareMemberRelationsRequest')
  if self.state ~= nil then
    oprot:writeFieldBegin('state', TType.I32, 2)
    oprot:writeI32(self.state)
    oprot:writeFieldEnd()
  end
  if self.continuationToken ~= nil then
    oprot:writeFieldBegin('continuationToken', TType.STRING, 3)
    oprot:writeString(self.continuationToken)
    oprot:writeFieldEnd()
  end
  if self.limit ~= nil then
    oprot:writeFieldBegin('limit', TType.I32, 4)
    oprot:writeI32(self.limit)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareMemberRelationsResponse = __TObject:new{
  squareMembers,
  relations,
  continuationToken
}

function GetSquareMemberRelationsResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.squareMembers = {}
        local _etype565, _size562 = iprot:readListBegin()
        for _i=1,_size562 do
          local _elem566 = SquareMember:new{}
          _elem566:read(iprot)
          table.insert(self.squareMembers, _elem566)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.MAP then
        self.relations = {}
        local _ktype568, _vtype569, _size567 = iprot:readMapBegin() 
        for _i=1,_size567 do
          local _key571 = iprot:readString()
          local _val572 = SquareMemberRelation:new{}
          _val572:read(iprot)
          self.relations[_key571] = _val572
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.continuationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareMemberRelationsResponse:write(oprot)
  oprot:writeStructBegin('GetSquareMemberRelationsResponse')
  if self.squareMembers ~= nil then
    oprot:writeFieldBegin('squareMembers', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.squareMembers)
    for _,iter573 in ipairs(self.squareMembers) do
      iter573:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.relations ~= nil then
    oprot:writeFieldBegin('relations', TType.MAP, 2)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.relations))
    for kiter574,viter575 in pairs(self.relations) do
      oprot:writeString(kiter574)
      viter575:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.continuationToken ~= nil then
    oprot:writeFieldBegin('continuationToken', TType.STRING, 3)
    oprot:writeString(self.continuationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareMemberRelationRequest = __TObject:new{
  squareMid,
  targetSquareMemberMid
}

function GetSquareMemberRelationRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.targetSquareMemberMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareMemberRelationRequest:write(oprot)
  oprot:writeStructBegin('GetSquareMemberRelationRequest')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 2)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.targetSquareMemberMid ~= nil then
    oprot:writeFieldBegin('targetSquareMemberMid', TType.STRING, 3)
    oprot:writeString(self.targetSquareMemberMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareMemberRelationResponse = __TObject:new{
  squareMid,
  targetSquareMemberMid,
  relation
}

function GetSquareMemberRelationResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.targetSquareMemberMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.relation = SquareMemberRelation:new{}
        self.relation:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareMemberRelationResponse:write(oprot)
  oprot:writeStructBegin('GetSquareMemberRelationResponse')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 1)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.targetSquareMemberMid ~= nil then
    oprot:writeFieldBegin('targetSquareMemberMid', TType.STRING, 2)
    oprot:writeString(self.targetSquareMemberMid)
    oprot:writeFieldEnd()
  end
  if self.relation ~= nil then
    oprot:writeFieldBegin('relation', TType.STRUCT, 3)
    self.relation:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Category = __TObject:new{
  id,
  name
}

function Category:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.id = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Category:write(oprot)
  oprot:writeStructBegin('Category')
  if self.id ~= nil then
    oprot:writeFieldBegin('id', TType.I32, 1)
    oprot:writeI32(self.id)
    oprot:writeFieldEnd()
  end
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 2)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareCategoriesRequest = __TObject:new{

}

function GetSquareCategoriesRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareCategoriesRequest:write(oprot)
  oprot:writeStructBegin('GetSquareCategoriesRequest')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareCategoriesResponse = __TObject:new{
  categoryList
}

function GetSquareCategoriesResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.categoryList = {}
        local _etype579, _size576 = iprot:readListBegin()
        for _i=1,_size576 do
          local _elem580 = Category:new{}
          _elem580:read(iprot)
          table.insert(self.categoryList, _elem580)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareCategoriesResponse:write(oprot)
  oprot:writeStructBegin('GetSquareCategoriesResponse')
  if self.categoryList ~= nil then
    oprot:writeFieldBegin('categoryList', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.categoryList)
    for _,iter581 in ipairs(self.categoryList) do
      iter581:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateSquareRequest = __TObject:new{
  updatedAttrs,
  square
}

function UpdateSquareRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.SET then
        self.updatedAttrs = {}
        local _etype585, _size582 = iprot:readSetBegin()
        for _i=1,_size582 do
          local _elem586 = iprot:readI32()
          self.updatedAttrs[_elem586] = _elem586
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.square = Square:new{}
        self.square:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateSquareRequest:write(oprot)
  oprot:writeStructBegin('UpdateSquareRequest')
  if self.updatedAttrs ~= nil then
    oprot:writeFieldBegin('updatedAttrs', TType.SET, 2)
    oprot:writeSetBegin(TType.I32, ttable_size(self.updatedAttrs))
    for iter587,_ in pairs(self.updatedAttrs) do
      oprot:writeI32(iter587)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.square ~= nil then
    oprot:writeFieldBegin('square', TType.STRUCT, 3)
    self.square:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateSquareResponse = __TObject:new{
  updatedAttrs,
  square
}

function UpdateSquareResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.SET then
        self.updatedAttrs = {}
        local _etype591, _size588 = iprot:readSetBegin()
        for _i=1,_size588 do
          local _elem592 = iprot:readI32()
          self.updatedAttrs[_elem592] = _elem592
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.square = Square:new{}
        self.square:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateSquareResponse:write(oprot)
  oprot:writeStructBegin('UpdateSquareResponse')
  if self.updatedAttrs ~= nil then
    oprot:writeFieldBegin('updatedAttrs', TType.SET, 1)
    oprot:writeSetBegin(TType.I32, ttable_size(self.updatedAttrs))
    for iter593,_ in pairs(self.updatedAttrs) do
      oprot:writeI32(iter593)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.square ~= nil then
    oprot:writeFieldBegin('square', TType.STRUCT, 2)
    self.square:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SearchSquaresRequest = __TObject:new{
  query,
  continuationToken,
  limit
}

function SearchSquaresRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.query = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.continuationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.limit = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SearchSquaresRequest:write(oprot)
  oprot:writeStructBegin('SearchSquaresRequest')
  if self.query ~= nil then
    oprot:writeFieldBegin('query', TType.STRING, 2)
    oprot:writeString(self.query)
    oprot:writeFieldEnd()
  end
  if self.continuationToken ~= nil then
    oprot:writeFieldBegin('continuationToken', TType.STRING, 3)
    oprot:writeString(self.continuationToken)
    oprot:writeFieldEnd()
  end
  if self.limit ~= nil then
    oprot:writeFieldBegin('limit', TType.I32, 4)
    oprot:writeI32(self.limit)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SearchSquaresResponse = __TObject:new{
  squares,
  squareStatuses,
  myMemberships,
  continuationToken,
  noteStatuses
}

function SearchSquaresResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.squares = {}
        local _etype597, _size594 = iprot:readListBegin()
        for _i=1,_size594 do
          local _elem598 = Square:new{}
          _elem598:read(iprot)
          table.insert(self.squares, _elem598)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.MAP then
        self.squareStatuses = {}
        local _ktype600, _vtype601, _size599 = iprot:readMapBegin() 
        for _i=1,_size599 do
          local _key603 = iprot:readString()
          local _val604 = SquareStatus:new{}
          _val604:read(iprot)
          self.squareStatuses[_key603] = _val604
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.myMemberships = {}
        local _ktype606, _vtype607, _size605 = iprot:readMapBegin() 
        for _i=1,_size605 do
          local _key609 = iprot:readString()
          local _val610 = SquareMember:new{}
          _val610:read(iprot)
          self.myMemberships[_key609] = _val610
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.continuationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.MAP then
        self.noteStatuses = {}
        local _ktype612, _vtype613, _size611 = iprot:readMapBegin() 
        for _i=1,_size611 do
          local _key615 = iprot:readString()
          local _val616 = NoteStatus:new{}
          _val616:read(iprot)
          self.noteStatuses[_key615] = _val616
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SearchSquaresResponse:write(oprot)
  oprot:writeStructBegin('SearchSquaresResponse')
  if self.squares ~= nil then
    oprot:writeFieldBegin('squares', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.squares)
    for _,iter617 in ipairs(self.squares) do
      iter617:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.squareStatuses ~= nil then
    oprot:writeFieldBegin('squareStatuses', TType.MAP, 2)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.squareStatuses))
    for kiter618,viter619 in pairs(self.squareStatuses) do
      oprot:writeString(kiter618)
      viter619:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.myMemberships ~= nil then
    oprot:writeFieldBegin('myMemberships', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.myMemberships))
    for kiter620,viter621 in pairs(self.myMemberships) do
      oprot:writeString(kiter620)
      viter621:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.continuationToken ~= nil then
    oprot:writeFieldBegin('continuationToken', TType.STRING, 4)
    oprot:writeString(self.continuationToken)
    oprot:writeFieldEnd()
  end
  if self.noteStatuses ~= nil then
    oprot:writeFieldBegin('noteStatuses', TType.MAP, 5)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.noteStatuses))
    for kiter622,viter623 in pairs(self.noteStatuses) do
      oprot:writeString(kiter622)
      viter623:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareFeatureSetRequest = __TObject:new{
  squareMid
}

function GetSquareFeatureSetRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareFeatureSetRequest:write(oprot)
  oprot:writeStructBegin('GetSquareFeatureSetRequest')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 2)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareFeatureSetResponse = __TObject:new{
  squareFeatureSet
}

function GetSquareFeatureSetResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.squareFeatureSet = SquareFeatureSet:new{}
        self.squareFeatureSet:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareFeatureSetResponse:write(oprot)
  oprot:writeStructBegin('GetSquareFeatureSetResponse')
  if self.squareFeatureSet ~= nil then
    oprot:writeFieldBegin('squareFeatureSet', TType.STRUCT, 1)
    self.squareFeatureSet:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateSquareFeatureSetRequest = __TObject:new{
  updateAttributes,
  squareFeatureSet
}

function UpdateSquareFeatureSetRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.SET then
        self.updateAttributes = {}
        local _etype627, _size624 = iprot:readSetBegin()
        for _i=1,_size624 do
          local _elem628 = iprot:readI32()
          self.updateAttributes[_elem628] = _elem628
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.squareFeatureSet = SquareFeatureSet:new{}
        self.squareFeatureSet:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateSquareFeatureSetRequest:write(oprot)
  oprot:writeStructBegin('UpdateSquareFeatureSetRequest')
  if self.updateAttributes ~= nil then
    oprot:writeFieldBegin('updateAttributes', TType.SET, 2)
    oprot:writeSetBegin(TType.I32, ttable_size(self.updateAttributes))
    for iter629,_ in pairs(self.updateAttributes) do
      oprot:writeI32(iter629)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.squareFeatureSet ~= nil then
    oprot:writeFieldBegin('squareFeatureSet', TType.STRUCT, 3)
    self.squareFeatureSet:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateSquareFeatureSetResponse = __TObject:new{
  updateAttributes,
  squareFeatureSet
}

function UpdateSquareFeatureSetResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.SET then
        self.updateAttributes = {}
        local _etype633, _size630 = iprot:readSetBegin()
        for _i=1,_size630 do
          local _elem634 = iprot:readI32()
          self.updateAttributes[_elem634] = _elem634
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.squareFeatureSet = SquareFeatureSet:new{}
        self.squareFeatureSet:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateSquareFeatureSetResponse:write(oprot)
  oprot:writeStructBegin('UpdateSquareFeatureSetResponse')
  if self.updateAttributes ~= nil then
    oprot:writeFieldBegin('updateAttributes', TType.SET, 1)
    oprot:writeSetBegin(TType.I32, ttable_size(self.updateAttributes))
    for iter635,_ in pairs(self.updateAttributes) do
      oprot:writeI32(iter635)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.squareFeatureSet ~= nil then
    oprot:writeFieldBegin('squareFeatureSet', TType.STRUCT, 2)
    self.squareFeatureSet:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateSquareMemberRequest = __TObject:new{
  updatedAttrs,
  updatedPreferenceAttrs,
  squareMember
}

function UpdateSquareMemberRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.SET then
        self.updatedAttrs = {}
        local _etype639, _size636 = iprot:readSetBegin()
        for _i=1,_size636 do
          local _elem640 = iprot:readI32()
          self.updatedAttrs[_elem640] = _elem640
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.SET then
        self.updatedPreferenceAttrs = {}
        local _etype644, _size641 = iprot:readSetBegin()
        for _i=1,_size641 do
          local _elem645 = iprot:readI32()
          self.updatedPreferenceAttrs[_elem645] = _elem645
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.squareMember = SquareMember:new{}
        self.squareMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateSquareMemberRequest:write(oprot)
  oprot:writeStructBegin('UpdateSquareMemberRequest')
  if self.updatedAttrs ~= nil then
    oprot:writeFieldBegin('updatedAttrs', TType.SET, 2)
    oprot:writeSetBegin(TType.I32, ttable_size(self.updatedAttrs))
    for iter646,_ in pairs(self.updatedAttrs) do
      oprot:writeI32(iter646)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.updatedPreferenceAttrs ~= nil then
    oprot:writeFieldBegin('updatedPreferenceAttrs', TType.SET, 3)
    oprot:writeSetBegin(TType.I32, ttable_size(self.updatedPreferenceAttrs))
    for iter647,_ in pairs(self.updatedPreferenceAttrs) do
      oprot:writeI32(iter647)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.squareMember ~= nil then
    oprot:writeFieldBegin('squareMember', TType.STRUCT, 4)
    self.squareMember:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateSquareMemberResponse = __TObject:new{
  updatedAttrs,
  squareMember,
  updatedPreferenceAttrs
}

function UpdateSquareMemberResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.SET then
        self.updatedAttrs = {}
        local _etype651, _size648 = iprot:readSetBegin()
        for _i=1,_size648 do
          local _elem652 = iprot:readI32()
          self.updatedAttrs[_elem652] = _elem652
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.squareMember = SquareMember:new{}
        self.squareMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.SET then
        self.updatedPreferenceAttrs = {}
        local _etype656, _size653 = iprot:readSetBegin()
        for _i=1,_size653 do
          local _elem657 = iprot:readI32()
          self.updatedPreferenceAttrs[_elem657] = _elem657
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateSquareMemberResponse:write(oprot)
  oprot:writeStructBegin('UpdateSquareMemberResponse')
  if self.updatedAttrs ~= nil then
    oprot:writeFieldBegin('updatedAttrs', TType.SET, 1)
    oprot:writeSetBegin(TType.I32, ttable_size(self.updatedAttrs))
    for iter658,_ in pairs(self.updatedAttrs) do
      oprot:writeI32(iter658)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.squareMember ~= nil then
    oprot:writeFieldBegin('squareMember', TType.STRUCT, 2)
    self.squareMember:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.updatedPreferenceAttrs ~= nil then
    oprot:writeFieldBegin('updatedPreferenceAttrs', TType.SET, 3)
    oprot:writeSetBegin(TType.I32, ttable_size(self.updatedPreferenceAttrs))
    for iter659,_ in pairs(self.updatedPreferenceAttrs) do
      oprot:writeI32(iter659)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateSquareMembersRequest = __TObject:new{
  updatedAttrs,
  members
}

function UpdateSquareMembersRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.SET then
        self.updatedAttrs = {}
        local _etype663, _size660 = iprot:readSetBegin()
        for _i=1,_size660 do
          local _elem664 = iprot:readI32()
          self.updatedAttrs[_elem664] = _elem664
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.members = {}
        local _etype668, _size665 = iprot:readListBegin()
        for _i=1,_size665 do
          local _elem669 = SquareMember:new{}
          _elem669:read(iprot)
          table.insert(self.members, _elem669)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateSquareMembersRequest:write(oprot)
  oprot:writeStructBegin('UpdateSquareMembersRequest')
  if self.updatedAttrs ~= nil then
    oprot:writeFieldBegin('updatedAttrs', TType.SET, 2)
    oprot:writeSetBegin(TType.I32, ttable_size(self.updatedAttrs))
    for iter670,_ in pairs(self.updatedAttrs) do
      oprot:writeI32(iter670)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.members ~= nil then
    oprot:writeFieldBegin('members', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.members)
    for _,iter671 in ipairs(self.members) do
      iter671:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateSquareMembersResponse = __TObject:new{
  updatedAttrs,
  editor,
  members
}

function UpdateSquareMembersResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.SET then
        self.updatedAttrs = {}
        local _etype675, _size672 = iprot:readSetBegin()
        for _i=1,_size672 do
          local _elem676 = iprot:readI32()
          self.updatedAttrs[_elem676] = _elem676
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.editor = SquareMember:new{}
        self.editor:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.members = {}
        local _ktype678, _vtype679, _size677 = iprot:readMapBegin() 
        for _i=1,_size677 do
          local _key681 = iprot:readString()
          local _val682 = SquareMember:new{}
          _val682:read(iprot)
          self.members[_key681] = _val682
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateSquareMembersResponse:write(oprot)
  oprot:writeStructBegin('UpdateSquareMembersResponse')
  if self.updatedAttrs ~= nil then
    oprot:writeFieldBegin('updatedAttrs', TType.SET, 1)
    oprot:writeSetBegin(TType.I32, ttable_size(self.updatedAttrs))
    for iter683,_ in pairs(self.updatedAttrs) do
      oprot:writeI32(iter683)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.editor ~= nil then
    oprot:writeFieldBegin('editor', TType.STRUCT, 2)
    self.editor:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.members ~= nil then
    oprot:writeFieldBegin('members', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.members))
    for kiter684,viter685 in pairs(self.members) do
      oprot:writeString(kiter684)
      viter685:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RejectSquareMembersRequest = __TObject:new{
  squareMid,
  requestedMemberMids
}

function RejectSquareMembersRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.requestedMemberMids = {}
        local _etype689, _size686 = iprot:readListBegin()
        for _i=1,_size686 do
          local _elem690 = iprot:readString()
          table.insert(self.requestedMemberMids, _elem690)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RejectSquareMembersRequest:write(oprot)
  oprot:writeStructBegin('RejectSquareMembersRequest')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 2)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.requestedMemberMids ~= nil then
    oprot:writeFieldBegin('requestedMemberMids', TType.LIST, 3)
    oprot:writeListBegin(TType.STRING, #self.requestedMemberMids)
    for _,iter691 in ipairs(self.requestedMemberMids) do
      oprot:writeString(iter691)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RejectSquareMembersResponse = __TObject:new{
  rejectedMembers,
  status
}

function RejectSquareMembersResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.rejectedMembers = {}
        local _etype695, _size692 = iprot:readListBegin()
        for _i=1,_size692 do
          local _elem696 = SquareMember:new{}
          _elem696:read(iprot)
          table.insert(self.rejectedMembers, _elem696)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.status = SquareStatus:new{}
        self.status:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RejectSquareMembersResponse:write(oprot)
  oprot:writeStructBegin('RejectSquareMembersResponse')
  if self.rejectedMembers ~= nil then
    oprot:writeFieldBegin('rejectedMembers', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.rejectedMembers)
    for _,iter697 in ipairs(self.rejectedMembers) do
      iter697:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.status ~= nil then
    oprot:writeFieldBegin('status', TType.STRUCT, 2)
    self.status:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RemoveSubscriptionsRequest = __TObject:new{
  unsubscriptions
}

function RemoveSubscriptionsRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.unsubscriptions = {}
        local _etype701, _size698 = iprot:readListBegin()
        for _i=1,_size698 do
          local _elem702 = iprot:readI64()
          table.insert(self.unsubscriptions, _elem702)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RemoveSubscriptionsRequest:write(oprot)
  oprot:writeStructBegin('RemoveSubscriptionsRequest')
  if self.unsubscriptions ~= nil then
    oprot:writeFieldBegin('unsubscriptions', TType.LIST, 2)
    oprot:writeListBegin(TType.I64, #self.unsubscriptions)
    for _,iter703 in ipairs(self.unsubscriptions) do
      oprot:writeI64(iter703)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RemoveSubscriptionsResponse = __TObject:new{

}

function RemoveSubscriptionsResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RemoveSubscriptionsResponse:write(oprot)
  oprot:writeStructBegin('RemoveSubscriptionsResponse')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RefreshSubscriptionsRequest = __TObject:new{
  subscriptions
}

function RefreshSubscriptionsRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.subscriptions = {}
        local _etype707, _size704 = iprot:readListBegin()
        for _i=1,_size704 do
          local _elem708 = iprot:readI64()
          table.insert(self.subscriptions, _elem708)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RefreshSubscriptionsRequest:write(oprot)
  oprot:writeStructBegin('RefreshSubscriptionsRequest')
  if self.subscriptions ~= nil then
    oprot:writeFieldBegin('subscriptions', TType.LIST, 2)
    oprot:writeListBegin(TType.I64, #self.subscriptions)
    for _,iter709 in ipairs(self.subscriptions) do
      oprot:writeI64(iter709)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RefreshSubscriptionsResponse = __TObject:new{
  ttlMillis,
  subscriptionStates
}

function RefreshSubscriptionsResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.ttlMillis = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.MAP then
        self.subscriptionStates = {}
        local _ktype711, _vtype712, _size710 = iprot:readMapBegin() 
        for _i=1,_size710 do
          local _key714 = iprot:readI64()
          local _val715 = SubscriptionState:new{}
          _val715:read(iprot)
          self.subscriptionStates[_key714] = _val715
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RefreshSubscriptionsResponse:write(oprot)
  oprot:writeStructBegin('RefreshSubscriptionsResponse')
  if self.ttlMillis ~= nil then
    oprot:writeFieldBegin('ttlMillis', TType.I64, 1)
    oprot:writeI64(self.ttlMillis)
    oprot:writeFieldEnd()
  end
  if self.subscriptionStates ~= nil then
    oprot:writeFieldBegin('subscriptionStates', TType.MAP, 2)
    oprot:writeMapBegin(TType.I64, TType.STRUCT, ttable_size(self.subscriptionStates))
    for kiter716,viter717 in pairs(self.subscriptionStates) do
      oprot:writeI64(kiter716)
      viter717:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateSquareChatRequest = __TObject:new{
  updatedAttrs,
  squareChat
}

function UpdateSquareChatRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.SET then
        self.updatedAttrs = {}
        local _etype721, _size718 = iprot:readSetBegin()
        for _i=1,_size718 do
          local _elem722 = iprot:readI32()
          self.updatedAttrs[_elem722] = _elem722
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.squareChat = SquareChat:new{}
        self.squareChat:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateSquareChatRequest:write(oprot)
  oprot:writeStructBegin('UpdateSquareChatRequest')
  if self.updatedAttrs ~= nil then
    oprot:writeFieldBegin('updatedAttrs', TType.SET, 2)
    oprot:writeSetBegin(TType.I32, ttable_size(self.updatedAttrs))
    for iter723,_ in pairs(self.updatedAttrs) do
      oprot:writeI32(iter723)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.squareChat ~= nil then
    oprot:writeFieldBegin('squareChat', TType.STRUCT, 3)
    self.squareChat:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateSquareChatResponse = __TObject:new{
  updatedAttrs,
  squareChat
}

function UpdateSquareChatResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.SET then
        self.updatedAttrs = {}
        local _etype727, _size724 = iprot:readSetBegin()
        for _i=1,_size724 do
          local _elem728 = iprot:readI32()
          self.updatedAttrs[_elem728] = _elem728
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.squareChat = SquareChat:new{}
        self.squareChat:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateSquareChatResponse:write(oprot)
  oprot:writeStructBegin('UpdateSquareChatResponse')
  if self.updatedAttrs ~= nil then
    oprot:writeFieldBegin('updatedAttrs', TType.SET, 1)
    oprot:writeSetBegin(TType.I32, ttable_size(self.updatedAttrs))
    for iter729,_ in pairs(self.updatedAttrs) do
      oprot:writeI32(iter729)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.squareChat ~= nil then
    oprot:writeFieldBegin('squareChat', TType.STRUCT, 2)
    self.squareChat:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

DeleteSquareChatRequest = __TObject:new{
  squareChatMid,
  revision
}

function DeleteSquareChatRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function DeleteSquareChatRequest:write(oprot)
  oprot:writeStructBegin('DeleteSquareChatRequest')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 2)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 3)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

DeleteSquareChatResponse = __TObject:new{

}

function DeleteSquareChatResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function DeleteSquareChatResponse:write(oprot)
  oprot:writeStructBegin('DeleteSquareChatResponse')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateSquareChatMemberRequest = __TObject:new{
  updatedAttrs,
  chatMember
}

function UpdateSquareChatMemberRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.SET then
        self.updatedAttrs = {}
        local _etype733, _size730 = iprot:readSetBegin()
        for _i=1,_size730 do
          local _elem734 = iprot:readI32()
          self.updatedAttrs[_elem734] = _elem734
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.chatMember = SquareChatMember:new{}
        self.chatMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateSquareChatMemberRequest:write(oprot)
  oprot:writeStructBegin('UpdateSquareChatMemberRequest')
  if self.updatedAttrs ~= nil then
    oprot:writeFieldBegin('updatedAttrs', TType.SET, 2)
    oprot:writeSetBegin(TType.I32, ttable_size(self.updatedAttrs))
    for iter735,_ in pairs(self.updatedAttrs) do
      oprot:writeI32(iter735)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.chatMember ~= nil then
    oprot:writeFieldBegin('chatMember', TType.STRUCT, 3)
    self.chatMember:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateSquareChatMemberResponse = __TObject:new{
  updatedChatMember
}

function UpdateSquareChatMemberResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.updatedChatMember = SquareChatMember:new{}
        self.updatedChatMember:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateSquareChatMemberResponse:write(oprot)
  oprot:writeStructBegin('UpdateSquareChatMemberResponse')
  if self.updatedChatMember ~= nil then
    oprot:writeFieldBegin('updatedChatMember', TType.STRUCT, 1)
    self.updatedChatMember:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateSquareAuthorityRequest = __TObject:new{
  updateAttributes,
  authority
}

function UpdateSquareAuthorityRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.SET then
        self.updateAttributes = {}
        local _etype739, _size736 = iprot:readSetBegin()
        for _i=1,_size736 do
          local _elem740 = iprot:readI32()
          self.updateAttributes[_elem740] = _elem740
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.authority = SquareAuthority:new{}
        self.authority:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateSquareAuthorityRequest:write(oprot)
  oprot:writeStructBegin('UpdateSquareAuthorityRequest')
  if self.updateAttributes ~= nil then
    oprot:writeFieldBegin('updateAttributes', TType.SET, 2)
    oprot:writeSetBegin(TType.I32, ttable_size(self.updateAttributes))
    for iter741,_ in pairs(self.updateAttributes) do
      oprot:writeI32(iter741)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.authority ~= nil then
    oprot:writeFieldBegin('authority', TType.STRUCT, 3)
    self.authority:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateSquareAuthorityResponse = __TObject:new{
  updatdAttributes,
  authority
}

function UpdateSquareAuthorityResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.SET then
        self.updatdAttributes = {}
        local _etype745, _size742 = iprot:readSetBegin()
        for _i=1,_size742 do
          local _elem746 = iprot:readI32()
          self.updatdAttributes[_elem746] = _elem746
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.authority = SquareAuthority:new{}
        self.authority:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateSquareAuthorityResponse:write(oprot)
  oprot:writeStructBegin('UpdateSquareAuthorityResponse')
  if self.updatdAttributes ~= nil then
    oprot:writeFieldBegin('updatdAttributes', TType.SET, 1)
    oprot:writeSetBegin(TType.I32, ttable_size(self.updatdAttributes))
    for iter747,_ in pairs(self.updatdAttributes) do
      oprot:writeI32(iter747)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.authority ~= nil then
    oprot:writeFieldBegin('authority', TType.STRUCT, 2)
    self.authority:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateSquareMemberRelationRequest = __TObject:new{
  squareMid,
  targetSquareMemberMid,
  updatedAttrs,
  relation
}

function UpdateSquareMemberRelationRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.targetSquareMemberMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.SET then
        self.updatedAttrs = {}
        local _etype751, _size748 = iprot:readSetBegin()
        for _i=1,_size748 do
          local _elem752 = iprot:readI32()
          self.updatedAttrs[_elem752] = _elem752
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRUCT then
        self.relation = SquareMemberRelation:new{}
        self.relation:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateSquareMemberRelationRequest:write(oprot)
  oprot:writeStructBegin('UpdateSquareMemberRelationRequest')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 2)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.targetSquareMemberMid ~= nil then
    oprot:writeFieldBegin('targetSquareMemberMid', TType.STRING, 3)
    oprot:writeString(self.targetSquareMemberMid)
    oprot:writeFieldEnd()
  end
  if self.updatedAttrs ~= nil then
    oprot:writeFieldBegin('updatedAttrs', TType.SET, 4)
    oprot:writeSetBegin(TType.I32, ttable_size(self.updatedAttrs))
    for iter753,_ in pairs(self.updatedAttrs) do
      oprot:writeI32(iter753)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.relation ~= nil then
    oprot:writeFieldBegin('relation', TType.STRUCT, 5)
    self.relation:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateSquareMemberRelationResponse = __TObject:new{
  squareMid,
  targetSquareMemberMid,
  updatedAttrs,
  relation
}

function UpdateSquareMemberRelationResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.targetSquareMemberMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.SET then
        self.updatedAttrs = {}
        local _etype757, _size754 = iprot:readSetBegin()
        for _i=1,_size754 do
          local _elem758 = iprot:readI32()
          self.updatedAttrs[_elem758] = _elem758
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.relation = SquareMemberRelation:new{}
        self.relation:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateSquareMemberRelationResponse:write(oprot)
  oprot:writeStructBegin('UpdateSquareMemberRelationResponse')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 1)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.targetSquareMemberMid ~= nil then
    oprot:writeFieldBegin('targetSquareMemberMid', TType.STRING, 2)
    oprot:writeString(self.targetSquareMemberMid)
    oprot:writeFieldEnd()
  end
  if self.updatedAttrs ~= nil then
    oprot:writeFieldBegin('updatedAttrs', TType.SET, 3)
    oprot:writeSetBegin(TType.I32, ttable_size(self.updatedAttrs))
    for iter759,_ in pairs(self.updatedAttrs) do
      oprot:writeI32(iter759)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.relation ~= nil then
    oprot:writeFieldBegin('relation', TType.STRUCT, 4)
    self.relation:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReportSquareRequest = __TObject:new{
  squareMid,
  reportType,
  otherReason
}

function ReportSquareRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.reportType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.otherReason = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReportSquareRequest:write(oprot)
  oprot:writeStructBegin('ReportSquareRequest')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 2)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.reportType ~= nil then
    oprot:writeFieldBegin('reportType', TType.I32, 3)
    oprot:writeI32(self.reportType)
    oprot:writeFieldEnd()
  end
  if self.otherReason ~= nil then
    oprot:writeFieldBegin('otherReason', TType.STRING, 4)
    oprot:writeString(self.otherReason)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReportSquareResponse = __TObject:new{

}

function ReportSquareResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReportSquareResponse:write(oprot)
  oprot:writeStructBegin('ReportSquareResponse')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReportSquareChatRequest = __TObject:new{
  squareMid,
  squareChatMid,
  reportType,
  otherReason
}

function ReportSquareChatRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.reportType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.otherReason = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReportSquareChatRequest:write(oprot)
  oprot:writeStructBegin('ReportSquareChatRequest')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 2)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 3)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.reportType ~= nil then
    oprot:writeFieldBegin('reportType', TType.I32, 5)
    oprot:writeI32(self.reportType)
    oprot:writeFieldEnd()
  end
  if self.otherReason ~= nil then
    oprot:writeFieldBegin('otherReason', TType.STRING, 6)
    oprot:writeString(self.otherReason)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReportSquareChatResponse = __TObject:new{

}

function ReportSquareChatResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReportSquareChatResponse:write(oprot)
  oprot:writeStructBegin('ReportSquareChatResponse')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReportSquareMessageRequest = __TObject:new{
  squareMid,
  squareChatMid,
  squareMessageId,
  reportType,
  otherReason
}

function ReportSquareMessageRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.squareMessageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.reportType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.otherReason = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReportSquareMessageRequest:write(oprot)
  oprot:writeStructBegin('ReportSquareMessageRequest')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 2)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 3)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.squareMessageId ~= nil then
    oprot:writeFieldBegin('squareMessageId', TType.STRING, 4)
    oprot:writeString(self.squareMessageId)
    oprot:writeFieldEnd()
  end
  if self.reportType ~= nil then
    oprot:writeFieldBegin('reportType', TType.I32, 5)
    oprot:writeI32(self.reportType)
    oprot:writeFieldEnd()
  end
  if self.otherReason ~= nil then
    oprot:writeFieldBegin('otherReason', TType.STRING, 6)
    oprot:writeString(self.otherReason)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReportSquareMessageResponse = __TObject:new{

}

function ReportSquareMessageResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReportSquareMessageResponse:write(oprot)
  oprot:writeStructBegin('ReportSquareMessageResponse')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReportSquareMemberRequest = __TObject:new{
  squareMemberMid,
  reportType,
  otherReason,
  squareChatMid
}

function ReportSquareMemberRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMemberMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.reportType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.otherReason = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReportSquareMemberRequest:write(oprot)
  oprot:writeStructBegin('ReportSquareMemberRequest')
  if self.squareMemberMid ~= nil then
    oprot:writeFieldBegin('squareMemberMid', TType.STRING, 2)
    oprot:writeString(self.squareMemberMid)
    oprot:writeFieldEnd()
  end
  if self.reportType ~= nil then
    oprot:writeFieldBegin('reportType', TType.I32, 3)
    oprot:writeI32(self.reportType)
    oprot:writeFieldEnd()
  end
  if self.otherReason ~= nil then
    oprot:writeFieldBegin('otherReason', TType.STRING, 4)
    oprot:writeString(self.otherReason)
    oprot:writeFieldEnd()
  end
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 5)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReportSquareMemberResponse = __TObject:new{

}

function ReportSquareMemberResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReportSquareMemberResponse:write(oprot)
  oprot:writeStructBegin('ReportSquareMemberResponse')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareRequest = __TObject:new{
  mid
}

function GetSquareRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareRequest:write(oprot)
  oprot:writeStructBegin('GetSquareRequest')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 2)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareResponse = __TObject:new{
  square,
  myMembership,
  squareAuthority,
  squareStatus,
  squareFeatureSet,
  noteStatus
}

function GetSquareResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.square = Square:new{}
        self.square:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.myMembership = SquareMember:new{}
        self.myMembership:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.squareAuthority = SquareAuthority:new{}
        self.squareAuthority:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.squareStatus = SquareStatus:new{}
        self.squareStatus:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRUCT then
        self.squareFeatureSet = SquareFeatureSet:new{}
        self.squareFeatureSet:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRUCT then
        self.noteStatus = NoteStatus:new{}
        self.noteStatus:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareResponse:write(oprot)
  oprot:writeStructBegin('GetSquareResponse')
  if self.square ~= nil then
    oprot:writeFieldBegin('square', TType.STRUCT, 1)
    self.square:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.myMembership ~= nil then
    oprot:writeFieldBegin('myMembership', TType.STRUCT, 2)
    self.myMembership:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareAuthority ~= nil then
    oprot:writeFieldBegin('squareAuthority', TType.STRUCT, 3)
    self.squareAuthority:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareStatus ~= nil then
    oprot:writeFieldBegin('squareStatus', TType.STRUCT, 4)
    self.squareStatus:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.squareFeatureSet ~= nil then
    oprot:writeFieldBegin('squareFeatureSet', TType.STRUCT, 5)
    self.squareFeatureSet:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.noteStatus ~= nil then
    oprot:writeFieldBegin('noteStatus', TType.STRUCT, 6)
    self.noteStatus:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareStatusRequest = __TObject:new{
  squareMid
}

function GetSquareStatusRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareStatusRequest:write(oprot)
  oprot:writeStructBegin('GetSquareStatusRequest')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 2)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareStatusResponse = __TObject:new{
  squareStatus
}

function GetSquareStatusResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.squareStatus = SquareStatus:new{}
        self.squareStatus:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareStatusResponse:write(oprot)
  oprot:writeStructBegin('GetSquareStatusResponse')
  if self.squareStatus ~= nil then
    oprot:writeFieldBegin('squareStatus', TType.STRUCT, 1)
    self.squareStatus:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetNoteStatusRequest = __TObject:new{
  squareMid
}

function GetNoteStatusRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetNoteStatusRequest:write(oprot)
  oprot:writeStructBegin('GetNoteStatusRequest')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 2)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetNoteStatusResponse = __TObject:new{
  squareMid,
  status
}

function GetNoteStatusResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.squareMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.status = NoteStatus:new{}
        self.status:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetNoteStatusResponse:write(oprot)
  oprot:writeStructBegin('GetNoteStatusResponse')
  if self.squareMid ~= nil then
    oprot:writeFieldBegin('squareMid', TType.STRING, 1)
    oprot:writeString(self.squareMid)
    oprot:writeFieldEnd()
  end
  if self.status ~= nil then
    oprot:writeFieldBegin('status', TType.STRUCT, 2)
    self.status:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CreateSquareChatAnnouncementRequest = __TObject:new{
  reqSeq,
  squareChatMid,
  squareChatAnnouncement
}

function CreateSquareChatAnnouncementRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.reqSeq = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.squareChatAnnouncement = SquareChatAnnouncement:new{}
        self.squareChatAnnouncement:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CreateSquareChatAnnouncementRequest:write(oprot)
  oprot:writeStructBegin('CreateSquareChatAnnouncementRequest')
  if self.reqSeq ~= nil then
    oprot:writeFieldBegin('reqSeq', TType.I32, 1)
    oprot:writeI32(self.reqSeq)
    oprot:writeFieldEnd()
  end
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 2)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.squareChatAnnouncement ~= nil then
    oprot:writeFieldBegin('squareChatAnnouncement', TType.STRUCT, 3)
    self.squareChatAnnouncement:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CreateSquareChatAnnouncementResponse = __TObject:new{
  announcement
}

function CreateSquareChatAnnouncementResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.announcement = SquareChatAnnouncement:new{}
        self.announcement:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CreateSquareChatAnnouncementResponse:write(oprot)
  oprot:writeStructBegin('CreateSquareChatAnnouncementResponse')
  if self.announcement ~= nil then
    oprot:writeFieldBegin('announcement', TType.STRUCT, 1)
    self.announcement:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

DeleteSquareChatAnnouncementRequest = __TObject:new{
  squareChatMid,
  announcementSeq
}

function DeleteSquareChatAnnouncementRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.announcementSeq = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function DeleteSquareChatAnnouncementRequest:write(oprot)
  oprot:writeStructBegin('DeleteSquareChatAnnouncementRequest')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 2)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  if self.announcementSeq ~= nil then
    oprot:writeFieldBegin('announcementSeq', TType.I64, 3)
    oprot:writeI64(self.announcementSeq)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

DeleteSquareChatAnnouncementResponse = __TObject:new{

}

function DeleteSquareChatAnnouncementResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function DeleteSquareChatAnnouncementResponse:write(oprot)
  oprot:writeStructBegin('DeleteSquareChatAnnouncementResponse')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareChatAnnouncementsRequest = __TObject:new{
  squareChatMid
}

function GetSquareChatAnnouncementsRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.squareChatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareChatAnnouncementsRequest:write(oprot)
  oprot:writeStructBegin('GetSquareChatAnnouncementsRequest')
  if self.squareChatMid ~= nil then
    oprot:writeFieldBegin('squareChatMid', TType.STRING, 2)
    oprot:writeString(self.squareChatMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetSquareChatAnnouncementsResponse = __TObject:new{
  announcements
}

function GetSquareChatAnnouncementsResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.announcements = {}
        local _etype763, _size760 = iprot:readListBegin()
        for _i=1,_size760 do
          local _elem764 = SquareChatAnnouncement:new{}
          _elem764:read(iprot)
          table.insert(self.announcements, _elem764)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetSquareChatAnnouncementsResponse:write(oprot)
  oprot:writeStructBegin('GetSquareChatAnnouncementsResponse')
  if self.announcements ~= nil then
    oprot:writeFieldBegin('announcements', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.announcements)
    for _,iter765 in ipairs(self.announcements) do
      iter765:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetJoinedSquareChatsRequest = __TObject:new{
  continuationToken,
  limit
}

function GetJoinedSquareChatsRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.continuationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.limit = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetJoinedSquareChatsRequest:write(oprot)
  oprot:writeStructBegin('GetJoinedSquareChatsRequest')
  if self.continuationToken ~= nil then
    oprot:writeFieldBegin('continuationToken', TType.STRING, 2)
    oprot:writeString(self.continuationToken)
    oprot:writeFieldEnd()
  end
  if self.limit ~= nil then
    oprot:writeFieldBegin('limit', TType.I32, 3)
    oprot:writeI32(self.limit)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetJoinedSquareChatsResponse = __TObject:new{
  chats,
  chatMembers,
  statuses,
  continuationToken
}

function GetJoinedSquareChatsResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.chats = {}
        local _etype769, _size766 = iprot:readListBegin()
        for _i=1,_size766 do
          local _elem770 = SquareChat:new{}
          _elem770:read(iprot)
          table.insert(self.chats, _elem770)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.MAP then
        self.chatMembers = {}
        local _ktype772, _vtype773, _size771 = iprot:readMapBegin() 
        for _i=1,_size771 do
          local _key775 = iprot:readString()
          local _val776 = SquareChatMember:new{}
          _val776:read(iprot)
          self.chatMembers[_key775] = _val776
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.statuses = {}
        local _ktype778, _vtype779, _size777 = iprot:readMapBegin() 
        for _i=1,_size777 do
          local _key781 = iprot:readString()
          local _val782 = SquareChatStatus:new{}
          _val782:read(iprot)
          self.statuses[_key781] = _val782
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.continuationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetJoinedSquareChatsResponse:write(oprot)
  oprot:writeStructBegin('GetJoinedSquareChatsResponse')
  if self.chats ~= nil then
    oprot:writeFieldBegin('chats', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.chats)
    for _,iter783 in ipairs(self.chats) do
      iter783:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.chatMembers ~= nil then
    oprot:writeFieldBegin('chatMembers', TType.MAP, 2)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.chatMembers))
    for kiter784,viter785 in pairs(self.chatMembers) do
      oprot:writeString(kiter784)
      viter785:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.statuses ~= nil then
    oprot:writeFieldBegin('statuses', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.statuses))
    for kiter786,viter787 in pairs(self.statuses) do
      oprot:writeString(kiter786)
      viter787:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.continuationToken ~= nil then
    oprot:writeFieldBegin('continuationToken', TType.STRING, 4)
    oprot:writeString(self.continuationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TalkException = TException:new{
  __type = 'TalkException',
  code,
  reason,
  parameterMap
}

function TalkException:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.code = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.reason = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.parameterMap = {}
        local _ktype789, _vtype790, _size788 = iprot:readMapBegin() 
        for _i=1,_size788 do
          local _key792 = iprot:readString()
          local _val793 = iprot:readString()
          self.parameterMap[_key792] = _val793
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TalkException:write(oprot)
  oprot:writeStructBegin('TalkException')
  if self.code ~= nil then
    oprot:writeFieldBegin('code', TType.I32, 1)
    oprot:writeI32(self.code)
    oprot:writeFieldEnd()
  end
  if self.reason ~= nil then
    oprot:writeFieldBegin('reason', TType.STRING, 2)
    oprot:writeString(self.reason)
    oprot:writeFieldEnd()
  end
  if self.parameterMap ~= nil then
    oprot:writeFieldBegin('parameterMap', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.parameterMap))
    for kiter794,viter795 in pairs(self.parameterMap) do
      oprot:writeString(kiter794)
      oprot:writeString(viter795)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ShouldSyncException = TException:new{
  __type = 'ShouldSyncException',
  syncOpRevision,
  syncScope,
  syncReason,
  message
}

function ShouldSyncException:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.syncOpRevision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.syncScope = SyncScope:new{}
        self.syncScope:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.syncReason = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.message = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ShouldSyncException:write(oprot)
  oprot:writeStructBegin('ShouldSyncException')
  if self.syncOpRevision ~= nil then
    oprot:writeFieldBegin('syncOpRevision', TType.I64, 1)
    oprot:writeI64(self.syncOpRevision)
    oprot:writeFieldEnd()
  end
  if self.syncScope ~= nil then
    oprot:writeFieldBegin('syncScope', TType.STRUCT, 2)
    self.syncScope:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.syncReason ~= nil then
    oprot:writeFieldBegin('syncReason', TType.I32, 3)
    oprot:writeI32(self.syncReason)
    oprot:writeFieldEnd()
  end
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRING, 4)
    oprot:writeString(self.message)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PointException = TException:new{
  __type = 'PointException',
  code,
  reason,
  extra
}

function PointException:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.code = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.reason = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.extra = {}
        local _ktype797, _vtype798, _size796 = iprot:readMapBegin() 
        for _i=1,_size796 do
          local _key800 = iprot:readString()
          local _val801 = iprot:readString()
          self.extra[_key800] = _val801
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PointException:write(oprot)
  oprot:writeStructBegin('PointException')
  if self.code ~= nil then
    oprot:writeFieldBegin('code', TType.I32, 1)
    oprot:writeI32(self.code)
    oprot:writeFieldEnd()
  end
  if self.reason ~= nil then
    oprot:writeFieldBegin('reason', TType.STRING, 2)
    oprot:writeString(self.reason)
    oprot:writeFieldEnd()
  end
  if self.extra ~= nil then
    oprot:writeFieldBegin('extra', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extra))
    for kiter802,viter803 in pairs(self.extra) do
      oprot:writeString(kiter802)
      oprot:writeString(viter803)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelException = TException:new{
  __type = 'ChannelException',
  code,
  reason,
  parameterMap
}

function ChannelException:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.code = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.reason = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.parameterMap = {}
        local _ktype805, _vtype806, _size804 = iprot:readMapBegin() 
        for _i=1,_size804 do
          local _key808 = iprot:readString()
          local _val809 = iprot:readString()
          self.parameterMap[_key808] = _val809
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelException:write(oprot)
  oprot:writeStructBegin('ChannelException')
  if self.code ~= nil then
    oprot:writeFieldBegin('code', TType.I32, 1)
    oprot:writeI32(self.code)
    oprot:writeFieldEnd()
  end
  if self.reason ~= nil then
    oprot:writeFieldBegin('reason', TType.STRING, 2)
    oprot:writeString(self.reason)
    oprot:writeFieldEnd()
  end
  if self.parameterMap ~= nil then
    oprot:writeFieldBegin('parameterMap', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.parameterMap))
    for kiter810,viter811 in pairs(self.parameterMap) do
      oprot:writeString(kiter810)
      oprot:writeString(viter811)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SquareException = TException:new{
  __type = 'SquareException',
  errorCode,
  errorExtraInfo,
  reason
}

function SquareException:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.errorCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.errorExtraInfo = ErrorExtraInfo:new{}
        self.errorExtraInfo:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.reason = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SquareException:write(oprot)
  oprot:writeStructBegin('SquareException')
  if self.errorCode ~= nil then
    oprot:writeFieldBegin('errorCode', TType.I32, 1)
    oprot:writeI32(self.errorCode)
    oprot:writeFieldEnd()
  end
  if self.errorExtraInfo ~= nil then
    oprot:writeFieldBegin('errorExtraInfo', TType.STRUCT, 2)
    self.errorExtraInfo:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.reason ~= nil then
    oprot:writeFieldBegin('reason', TType.STRING, 3)
    oprot:writeString(self.reason)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UniversalNotificationServiceException = TException:new{
  __type = 'UniversalNotificationServiceException',
  code,
  reason,
  parameterMap
}

function UniversalNotificationServiceException:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.code = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.reason = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.parameterMap = {}
        local _ktype813, _vtype814, _size812 = iprot:readMapBegin() 
        for _i=1,_size812 do
          local _key816 = iprot:readString()
          local _val817 = iprot:readString()
          self.parameterMap[_key816] = _val817
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UniversalNotificationServiceException:write(oprot)
  oprot:writeStructBegin('UniversalNotificationServiceException')
  if self.code ~= nil then
    oprot:writeFieldBegin('code', TType.I32, 1)
    oprot:writeI32(self.code)
    oprot:writeFieldEnd()
  end
  if self.reason ~= nil then
    oprot:writeFieldBegin('reason', TType.STRING, 2)
    oprot:writeString(self.reason)
    oprot:writeFieldEnd()
  end
  if self.parameterMap ~= nil then
    oprot:writeFieldBegin('parameterMap', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.parameterMap))
    for kiter818,viter819 in pairs(self.parameterMap) do
      oprot:writeString(kiter818)
      oprot:writeString(viter819)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateBuddyProfileResult = __TObject:new{
  requestId,
  state,
  eventNo,
  receiverCount,
  successCount,
  failCount,
  cancelCount,
  unregisterCount,
  timestamp,
  message
}

function UpdateBuddyProfileResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.state = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.eventNo = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I64 then
        self.receiverCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I64 then
        self.successCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I64 then
        self.failCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I64 then
        self.cancelCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I64 then
        self.unregisterCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I64 then
        self.timestamp = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.message = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateBuddyProfileResult:write(oprot)
  oprot:writeStructBegin('UpdateBuddyProfileResult')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.state ~= nil then
    oprot:writeFieldBegin('state', TType.I32, 2)
    oprot:writeI32(self.state)
    oprot:writeFieldEnd()
  end
  if self.eventNo ~= nil then
    oprot:writeFieldBegin('eventNo', TType.I32, 3)
    oprot:writeI32(self.eventNo)
    oprot:writeFieldEnd()
  end
  if self.receiverCount ~= nil then
    oprot:writeFieldBegin('receiverCount', TType.I64, 11)
    oprot:writeI64(self.receiverCount)
    oprot:writeFieldEnd()
  end
  if self.successCount ~= nil then
    oprot:writeFieldBegin('successCount', TType.I64, 12)
    oprot:writeI64(self.successCount)
    oprot:writeFieldEnd()
  end
  if self.failCount ~= nil then
    oprot:writeFieldBegin('failCount', TType.I64, 13)
    oprot:writeI64(self.failCount)
    oprot:writeFieldEnd()
  end
  if self.cancelCount ~= nil then
    oprot:writeFieldBegin('cancelCount', TType.I64, 14)
    oprot:writeI64(self.cancelCount)
    oprot:writeFieldEnd()
  end
  if self.unregisterCount ~= nil then
    oprot:writeFieldBegin('unregisterCount', TType.I64, 15)
    oprot:writeI64(self.unregisterCount)
    oprot:writeFieldEnd()
  end
  if self.timestamp ~= nil then
    oprot:writeFieldBegin('timestamp', TType.I64, 21)
    oprot:writeI64(self.timestamp)
    oprot:writeFieldEnd()
  end
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRING, 22)
    oprot:writeString(self.message)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UserAuthStatus = __TObject:new{
  phoneNumberRegistered,
  registeredSnsIdTypes
}

function UserAuthStatus:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.phoneNumberRegistered = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.registeredSnsIdTypes = {}
        local _etype823, _size820 = iprot:readListBegin()
        for _i=1,_size820 do
          local _elem824 = iprot:readI32()
          table.insert(self.registeredSnsIdTypes, _elem824)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UserAuthStatus:write(oprot)
  oprot:writeStructBegin('UserAuthStatus')
  if self.phoneNumberRegistered ~= nil then
    oprot:writeFieldBegin('phoneNumberRegistered', TType.BOOL, 1)
    oprot:writeBool(self.phoneNumberRegistered)
    oprot:writeFieldEnd()
  end
  if self.registeredSnsIdTypes ~= nil then
    oprot:writeFieldBegin('registeredSnsIdTypes', TType.LIST, 2)
    oprot:writeListBegin(TType.I32, #self.registeredSnsIdTypes)
    for _,iter825 in ipairs(self.registeredSnsIdTypes) do
      oprot:writeI32(iter825)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

WapInvitation = __TObject:new{
  type,
  inviteeEmail,
  inviterMid,
  roomMid
}

function WapInvitation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.inviteeEmail = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.inviterMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.roomMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function WapInvitation:write(oprot)
  oprot:writeStructBegin('WapInvitation')
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 1)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.inviteeEmail ~= nil then
    oprot:writeFieldBegin('inviteeEmail', TType.STRING, 10)
    oprot:writeString(self.inviteeEmail)
    oprot:writeFieldEnd()
  end
  if self.inviterMid ~= nil then
    oprot:writeFieldBegin('inviterMid', TType.STRING, 11)
    oprot:writeString(self.inviterMid)
    oprot:writeFieldEnd()
  end
  if self.roomMid ~= nil then
    oprot:writeFieldBegin('roomMid', TType.STRING, 12)
    oprot:writeString(self.roomMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GroupCall = __TObject:new{
  online,
  chatMid,
  hostMids,
  memberMids,
  started,
  mediaType
}

function GroupCall:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.online = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.chatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.hostMids = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.memberMids = {}
        local _etype829, _size826 = iprot:readListBegin()
        for _i=1,_size826 do
          local _elem830 = iprot:readString()
          table.insert(self.memberMids, _elem830)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I64 then
        self.started = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.mediaType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GroupCall:write(oprot)
  oprot:writeStructBegin('GroupCall')
  if self.online ~= nil then
    oprot:writeFieldBegin('online', TType.BOOL, 1)
    oprot:writeBool(self.online)
    oprot:writeFieldEnd()
  end
  if self.chatMid ~= nil then
    oprot:writeFieldBegin('chatMid', TType.STRING, 2)
    oprot:writeString(self.chatMid)
    oprot:writeFieldEnd()
  end
  if self.hostMids ~= nil then
    oprot:writeFieldBegin('hostMids', TType.STRING, 3)
    oprot:writeString(self.hostMids)
    oprot:writeFieldEnd()
  end
  if self.memberMids ~= nil then
    oprot:writeFieldBegin('memberMids', TType.LIST, 4)
    oprot:writeListBegin(TType.STRING, #self.memberMids)
    for _,iter831 in ipairs(self.memberMids) do
      oprot:writeString(iter831)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.started ~= nil then
    oprot:writeFieldBegin('started', TType.I64, 5)
    oprot:writeI64(self.started)
    oprot:writeFieldEnd()
  end
  if self.mediaType ~= nil then
    oprot:writeFieldBegin('mediaType', TType.I32, 6)
    oprot:writeI32(self.mediaType)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GroupCallRoute = __TObject:new{
  token,
  cscf,
  mix
}

function GroupCallRoute:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.token = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.cscf = CallHost:new{}
        self.cscf:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.mix = CallHost:new{}
        self.mix:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GroupCallRoute:write(oprot)
  oprot:writeStructBegin('GroupCallRoute')
  if self.token ~= nil then
    oprot:writeFieldBegin('token', TType.STRING, 1)
    oprot:writeString(self.token)
    oprot:writeFieldEnd()
  end
  if self.cscf ~= nil then
    oprot:writeFieldBegin('cscf', TType.STRUCT, 2)
    self.cscf:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.mix ~= nil then
    oprot:writeFieldBegin('mix', TType.STRUCT, 3)
    self.mix:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end