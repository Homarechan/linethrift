--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'line_ttypes'

BuddyServiceClient = __TObject.new(__TClient, {
  __type = 'BuddyServiceClient'
})

function BuddyServiceClient:findBuddyContactsByQuery(language, country, query, fromIndex, count, requestSource)
  self:send_findBuddyContactsByQuery(language, country, query, fromIndex, count, requestSource)
  return self:recv_findBuddyContactsByQuery(language, country, query, fromIndex, count, requestSource)
end

function BuddyServiceClient:send_findBuddyContactsByQuery(language, country, query, fromIndex, count, requestSource)
  self.oprot:writeMessageBegin('findBuddyContactsByQuery', TMessageType.CALL, self._seqid)
  local args = findBuddyContactsByQuery_args:new{}
  args.language = language
  args.country = country
  args.query = query
  args.fromIndex = fromIndex
  args.count = count
  args.requestSource = requestSource
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyServiceClient:recv_findBuddyContactsByQuery(language, country, query, fromIndex, count, requestSource)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = findBuddyContactsByQuery_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyServiceClient:getBuddyContacts(language, country, classification, fromIndex, count)
  self:send_getBuddyContacts(language, country, classification, fromIndex, count)
  return self:recv_getBuddyContacts(language, country, classification, fromIndex, count)
end

function BuddyServiceClient:send_getBuddyContacts(language, country, classification, fromIndex, count)
  self.oprot:writeMessageBegin('getBuddyContacts', TMessageType.CALL, self._seqid)
  local args = getBuddyContacts_args:new{}
  args.language = language
  args.country = country
  args.classification = classification
  args.fromIndex = fromIndex
  args.count = count
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyServiceClient:recv_getBuddyContacts(language, country, classification, fromIndex, count)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getBuddyContacts_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyServiceClient:getBuddyDetail(buddyMid)
  self:send_getBuddyDetail(buddyMid)
  return self:recv_getBuddyDetail(buddyMid)
end

function BuddyServiceClient:send_getBuddyDetail(buddyMid)
  self.oprot:writeMessageBegin('getBuddyDetail', TMessageType.CALL, self._seqid)
  local args = getBuddyDetail_args:new{}
  args.buddyMid = buddyMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyServiceClient:recv_getBuddyDetail(buddyMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getBuddyDetail_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyServiceClient:getBuddyOnAir(buddyMid)
  self:send_getBuddyOnAir(buddyMid)
  return self:recv_getBuddyOnAir(buddyMid)
end

function BuddyServiceClient:send_getBuddyOnAir(buddyMid)
  self.oprot:writeMessageBegin('getBuddyOnAir', TMessageType.CALL, self._seqid)
  local args = getBuddyOnAir_args:new{}
  args.buddyMid = buddyMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyServiceClient:recv_getBuddyOnAir(buddyMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getBuddyOnAir_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyServiceClient:getCountriesHavingBuddy()
  self:send_getCountriesHavingBuddy()
  return self:recv_getCountriesHavingBuddy()
end

function BuddyServiceClient:send_getCountriesHavingBuddy()
  self.oprot:writeMessageBegin('getCountriesHavingBuddy', TMessageType.CALL, self._seqid)
  local args = getCountriesHavingBuddy_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyServiceClient:recv_getCountriesHavingBuddy()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getCountriesHavingBuddy_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyServiceClient:getNewlyReleasedBuddyIds(country)
  self:send_getNewlyReleasedBuddyIds(country)
  return self:recv_getNewlyReleasedBuddyIds(country)
end

function BuddyServiceClient:send_getNewlyReleasedBuddyIds(country)
  self.oprot:writeMessageBegin('getNewlyReleasedBuddyIds', TMessageType.CALL, self._seqid)
  local args = getNewlyReleasedBuddyIds_args:new{}
  args.country = country
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyServiceClient:recv_getNewlyReleasedBuddyIds(country)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getNewlyReleasedBuddyIds_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyServiceClient:getPopularBuddyBanner(language, country, applicationType, resourceSpecification)
  self:send_getPopularBuddyBanner(language, country, applicationType, resourceSpecification)
  return self:recv_getPopularBuddyBanner(language, country, applicationType, resourceSpecification)
end

function BuddyServiceClient:send_getPopularBuddyBanner(language, country, applicationType, resourceSpecification)
  self.oprot:writeMessageBegin('getPopularBuddyBanner', TMessageType.CALL, self._seqid)
  local args = getPopularBuddyBanner_args:new{}
  args.language = language
  args.country = country
  args.applicationType = applicationType
  args.resourceSpecification = resourceSpecification
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyServiceClient:recv_getPopularBuddyBanner(language, country, applicationType, resourceSpecification)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getPopularBuddyBanner_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyServiceClient:getPopularBuddyLists(language, country)
  self:send_getPopularBuddyLists(language, country)
  return self:recv_getPopularBuddyLists(language, country)
end

function BuddyServiceClient:send_getPopularBuddyLists(language, country)
  self.oprot:writeMessageBegin('getPopularBuddyLists', TMessageType.CALL, self._seqid)
  local args = getPopularBuddyLists_args:new{}
  args.language = language
  args.country = country
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyServiceClient:recv_getPopularBuddyLists(language, country)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getPopularBuddyLists_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyServiceClient:getPromotedBuddyContacts(language, country)
  self:send_getPromotedBuddyContacts(language, country)
  return self:recv_getPromotedBuddyContacts(language, country)
end

function BuddyServiceClient:send_getPromotedBuddyContacts(language, country)
  self.oprot:writeMessageBegin('getPromotedBuddyContacts', TMessageType.CALL, self._seqid)
  local args = getPromotedBuddyContacts_args:new{}
  args.language = language
  args.country = country
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyServiceClient:recv_getPromotedBuddyContacts(language, country)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getPromotedBuddyContacts_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
BuddyServiceIface = __TObject:new{
  __type = 'BuddyServiceIface'
}


BuddyServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'BuddyServiceProcessor'
})

function BuddyServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function BuddyServiceProcessor:process_findBuddyContactsByQuery(seqid, iprot, oprot, server_ctx)
  local args = findBuddyContactsByQuery_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = findBuddyContactsByQuery_result:new{}
  local status, res = pcall(self.handler.findBuddyContactsByQuery, self.handler, args.language, args.country, args.query, args.fromIndex, args.count, args.requestSource)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('findBuddyContactsByQuery', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyServiceProcessor:process_getBuddyContacts(seqid, iprot, oprot, server_ctx)
  local args = getBuddyContacts_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getBuddyContacts_result:new{}
  local status, res = pcall(self.handler.getBuddyContacts, self.handler, args.language, args.country, args.classification, args.fromIndex, args.count)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getBuddyContacts', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyServiceProcessor:process_getBuddyDetail(seqid, iprot, oprot, server_ctx)
  local args = getBuddyDetail_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getBuddyDetail_result:new{}
  local status, res = pcall(self.handler.getBuddyDetail, self.handler, args.buddyMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getBuddyDetail', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyServiceProcessor:process_getBuddyOnAir(seqid, iprot, oprot, server_ctx)
  local args = getBuddyOnAir_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getBuddyOnAir_result:new{}
  local status, res = pcall(self.handler.getBuddyOnAir, self.handler, args.buddyMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getBuddyOnAir', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyServiceProcessor:process_getCountriesHavingBuddy(seqid, iprot, oprot, server_ctx)
  local args = getCountriesHavingBuddy_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getCountriesHavingBuddy_result:new{}
  local status, res = pcall(self.handler.getCountriesHavingBuddy, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getCountriesHavingBuddy', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyServiceProcessor:process_getNewlyReleasedBuddyIds(seqid, iprot, oprot, server_ctx)
  local args = getNewlyReleasedBuddyIds_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getNewlyReleasedBuddyIds_result:new{}
  local status, res = pcall(self.handler.getNewlyReleasedBuddyIds, self.handler, args.country)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getNewlyReleasedBuddyIds', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyServiceProcessor:process_getPopularBuddyBanner(seqid, iprot, oprot, server_ctx)
  local args = getPopularBuddyBanner_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getPopularBuddyBanner_result:new{}
  local status, res = pcall(self.handler.getPopularBuddyBanner, self.handler, args.language, args.country, args.applicationType, args.resourceSpecification)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getPopularBuddyBanner', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyServiceProcessor:process_getPopularBuddyLists(seqid, iprot, oprot, server_ctx)
  local args = getPopularBuddyLists_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getPopularBuddyLists_result:new{}
  local status, res = pcall(self.handler.getPopularBuddyLists, self.handler, args.language, args.country)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getPopularBuddyLists', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyServiceProcessor:process_getPromotedBuddyContacts(seqid, iprot, oprot, server_ctx)
  local args = getPromotedBuddyContacts_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getPromotedBuddyContacts_result:new{}
  local status, res = pcall(self.handler.getPromotedBuddyContacts, self.handler, args.language, args.country)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getPromotedBuddyContacts', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

findBuddyContactsByQuery_args = __TObject:new{
  language,
  country,
  query,
  fromIndex,
  count,
  requestSource
}

function findBuddyContactsByQuery_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.country = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.query = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.fromIndex = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.count = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.requestSource = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findBuddyContactsByQuery_args:write(oprot)
  oprot:writeStructBegin('findBuddyContactsByQuery_args')
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 2)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  if self.country ~= nil then
    oprot:writeFieldBegin('country', TType.STRING, 3)
    oprot:writeString(self.country)
    oprot:writeFieldEnd()
  end
  if self.query ~= nil then
    oprot:writeFieldBegin('query', TType.STRING, 4)
    oprot:writeString(self.query)
    oprot:writeFieldEnd()
  end
  if self.fromIndex ~= nil then
    oprot:writeFieldBegin('fromIndex', TType.I32, 5)
    oprot:writeI32(self.fromIndex)
    oprot:writeFieldEnd()
  end
  if self.count ~= nil then
    oprot:writeFieldBegin('count', TType.I32, 6)
    oprot:writeI32(self.count)
    oprot:writeFieldEnd()
  end
  if self.requestSource ~= nil then
    oprot:writeFieldBegin('requestSource', TType.I32, 7)
    oprot:writeI32(self.requestSource)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

findBuddyContactsByQuery_result = __TObject:new{
  success,
  e
}

function findBuddyContactsByQuery_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1109, _size1106 = iprot:readListBegin()
        for _i=1,_size1106 do
          local _elem1110 = BuddySearchResult:new{}
          _elem1110:read(iprot)
          table.insert(self.success, _elem1110)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findBuddyContactsByQuery_result:write(oprot)
  oprot:writeStructBegin('findBuddyContactsByQuery_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter1111 in ipairs(self.success) do
      iter1111:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBuddyContacts_args = __TObject:new{
  language,
  country,
  classification,
  fromIndex,
  count
}

function getBuddyContacts_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.country = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.classification = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.fromIndex = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.count = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBuddyContacts_args:write(oprot)
  oprot:writeStructBegin('getBuddyContacts_args')
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 2)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  if self.country ~= nil then
    oprot:writeFieldBegin('country', TType.STRING, 3)
    oprot:writeString(self.country)
    oprot:writeFieldEnd()
  end
  if self.classification ~= nil then
    oprot:writeFieldBegin('classification', TType.STRING, 4)
    oprot:writeString(self.classification)
    oprot:writeFieldEnd()
  end
  if self.fromIndex ~= nil then
    oprot:writeFieldBegin('fromIndex', TType.I32, 5)
    oprot:writeI32(self.fromIndex)
    oprot:writeFieldEnd()
  end
  if self.count ~= nil then
    oprot:writeFieldBegin('count', TType.I32, 6)
    oprot:writeI32(self.count)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBuddyContacts_result = __TObject:new{
  success,
  e
}

function getBuddyContacts_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1115, _size1112 = iprot:readListBegin()
        for _i=1,_size1112 do
          local _elem1116 = Contact:new{}
          _elem1116:read(iprot)
          table.insert(self.success, _elem1116)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBuddyContacts_result:write(oprot)
  oprot:writeStructBegin('getBuddyContacts_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter1117 in ipairs(self.success) do
      iter1117:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBuddyDetail_args = __TObject:new{
  buddyMid
}

function getBuddyDetail_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.buddyMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBuddyDetail_args:write(oprot)
  oprot:writeStructBegin('getBuddyDetail_args')
  if self.buddyMid ~= nil then
    oprot:writeFieldBegin('buddyMid', TType.STRING, 4)
    oprot:writeString(self.buddyMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBuddyDetail_result = __TObject:new{
  success,
  e
}

function getBuddyDetail_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = BuddyDetail:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBuddyDetail_result:write(oprot)
  oprot:writeStructBegin('getBuddyDetail_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBuddyOnAir_args = __TObject:new{
  buddyMid
}

function getBuddyOnAir_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.buddyMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBuddyOnAir_args:write(oprot)
  oprot:writeStructBegin('getBuddyOnAir_args')
  if self.buddyMid ~= nil then
    oprot:writeFieldBegin('buddyMid', TType.STRING, 4)
    oprot:writeString(self.buddyMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBuddyOnAir_result = __TObject:new{
  success,
  e
}

function getBuddyOnAir_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = BuddyOnAir:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBuddyOnAir_result:write(oprot)
  oprot:writeStructBegin('getBuddyOnAir_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getCountriesHavingBuddy_args = __TObject:new{

}

function getCountriesHavingBuddy_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCountriesHavingBuddy_args:write(oprot)
  oprot:writeStructBegin('getCountriesHavingBuddy_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getCountriesHavingBuddy_result = __TObject:new{
  success,
  e
}

function getCountriesHavingBuddy_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1121, _size1118 = iprot:readListBegin()
        for _i=1,_size1118 do
          local _elem1122 = iprot:readString()
          table.insert(self.success, _elem1122)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCountriesHavingBuddy_result:write(oprot)
  oprot:writeStructBegin('getCountriesHavingBuddy_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter1123 in ipairs(self.success) do
      oprot:writeString(iter1123)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNewlyReleasedBuddyIds_args = __TObject:new{
  country
}

function getNewlyReleasedBuddyIds_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.country = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNewlyReleasedBuddyIds_args:write(oprot)
  oprot:writeStructBegin('getNewlyReleasedBuddyIds_args')
  if self.country ~= nil then
    oprot:writeFieldBegin('country', TType.STRING, 3)
    oprot:writeString(self.country)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNewlyReleasedBuddyIds_result = __TObject:new{
  success,
  e
}

function getNewlyReleasedBuddyIds_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.MAP then
        self.success = {}
        local _ktype1125, _vtype1126, _size1124 = iprot:readMapBegin() 
        for _i=1,_size1124 do
          local _key1128 = iprot:readString()
          local _val1129 = iprot:readI64()
          self.success[_key1128] = _val1129
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNewlyReleasedBuddyIds_result:write(oprot)
  oprot:writeStructBegin('getNewlyReleasedBuddyIds_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.MAP, 0)
    oprot:writeMapBegin(TType.STRING, TType.I64, ttable_size(self.success))
    for kiter1130,viter1131 in pairs(self.success) do
      oprot:writeString(kiter1130)
      oprot:writeI64(viter1131)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPopularBuddyBanner_args = __TObject:new{
  language,
  country,
  applicationType,
  resourceSpecification
}

function getPopularBuddyBanner_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.country = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.applicationType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.resourceSpecification = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPopularBuddyBanner_args:write(oprot)
  oprot:writeStructBegin('getPopularBuddyBanner_args')
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 2)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  if self.country ~= nil then
    oprot:writeFieldBegin('country', TType.STRING, 3)
    oprot:writeString(self.country)
    oprot:writeFieldEnd()
  end
  if self.applicationType ~= nil then
    oprot:writeFieldBegin('applicationType', TType.I32, 4)
    oprot:writeI32(self.applicationType)
    oprot:writeFieldEnd()
  end
  if self.resourceSpecification ~= nil then
    oprot:writeFieldBegin('resourceSpecification', TType.STRING, 5)
    oprot:writeString(self.resourceSpecification)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPopularBuddyBanner_result = __TObject:new{
  success,
  e
}

function getPopularBuddyBanner_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = BuddyBanner:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPopularBuddyBanner_result:write(oprot)
  oprot:writeStructBegin('getPopularBuddyBanner_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPopularBuddyLists_args = __TObject:new{
  language,
  country
}

function getPopularBuddyLists_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.country = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPopularBuddyLists_args:write(oprot)
  oprot:writeStructBegin('getPopularBuddyLists_args')
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 2)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  if self.country ~= nil then
    oprot:writeFieldBegin('country', TType.STRING, 3)
    oprot:writeString(self.country)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPopularBuddyLists_result = __TObject:new{
  success,
  e
}

function getPopularBuddyLists_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1135, _size1132 = iprot:readListBegin()
        for _i=1,_size1132 do
          local _elem1136 = BuddyList:new{}
          _elem1136:read(iprot)
          table.insert(self.success, _elem1136)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPopularBuddyLists_result:write(oprot)
  oprot:writeStructBegin('getPopularBuddyLists_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter1137 in ipairs(self.success) do
      iter1137:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPromotedBuddyContacts_args = __TObject:new{
  language,
  country
}

function getPromotedBuddyContacts_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.country = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPromotedBuddyContacts_args:write(oprot)
  oprot:writeStructBegin('getPromotedBuddyContacts_args')
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 2)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  if self.country ~= nil then
    oprot:writeFieldBegin('country', TType.STRING, 3)
    oprot:writeString(self.country)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPromotedBuddyContacts_result = __TObject:new{
  success,
  e
}

function getPromotedBuddyContacts_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1141, _size1138 = iprot:readListBegin()
        for _i=1,_size1138 do
          local _elem1142 = Contact:new{}
          _elem1142:read(iprot)
          table.insert(self.success, _elem1142)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPromotedBuddyContacts_result:write(oprot)
  oprot:writeStructBegin('getPromotedBuddyContacts_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter1143 in ipairs(self.success) do
      iter1143:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end