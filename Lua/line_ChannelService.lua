--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'line_ttypes'

ChannelServiceClient = __TObject.new(__TClient, {
  __type = 'ChannelServiceClient'
})

function ChannelServiceClient:issueOTP(channelId)
  self:send_issueOTP(channelId)
  return self:recv_issueOTP(channelId)
end

function ChannelServiceClient:send_issueOTP(channelId)
  self.oprot:writeMessageBegin('issueOTP', TMessageType.CALL, self._seqid)
  local args = issueOTP_args:new{}
  args.channelId = channelId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_issueOTP(channelId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = issueOTP_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:approveChannelAndIssueChannelToken(channelId)
  self:send_approveChannelAndIssueChannelToken(channelId)
  return self:recv_approveChannelAndIssueChannelToken(channelId)
end

function ChannelServiceClient:send_approveChannelAndIssueChannelToken(channelId)
  self.oprot:writeMessageBegin('approveChannelAndIssueChannelToken', TMessageType.CALL, self._seqid)
  local args = approveChannelAndIssueChannelToken_args:new{}
  args.channelId = channelId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_approveChannelAndIssueChannelToken(channelId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = approveChannelAndIssueChannelToken_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:approveChannelAndIssueRequestToken(channelId, otpId)
  self:send_approveChannelAndIssueRequestToken(channelId, otpId)
  return self:recv_approveChannelAndIssueRequestToken(channelId, otpId)
end

function ChannelServiceClient:send_approveChannelAndIssueRequestToken(channelId, otpId)
  self.oprot:writeMessageBegin('approveChannelAndIssueRequestToken', TMessageType.CALL, self._seqid)
  local args = approveChannelAndIssueRequestToken_args:new{}
  args.channelId = channelId
  args.otpId = otpId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_approveChannelAndIssueRequestToken(channelId, otpId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = approveChannelAndIssueRequestToken_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:fetchNotificationItems(localRev)
  self:send_fetchNotificationItems(localRev)
  return self:recv_fetchNotificationItems(localRev)
end

function ChannelServiceClient:send_fetchNotificationItems(localRev)
  self.oprot:writeMessageBegin('fetchNotificationItems', TMessageType.CALL, self._seqid)
  local args = fetchNotificationItems_args:new{}
  args.localRev = localRev
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_fetchNotificationItems(localRev)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = fetchNotificationItems_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:getApprovedChannels(lastSynced, locale)
  self:send_getApprovedChannels(lastSynced, locale)
  return self:recv_getApprovedChannels(lastSynced, locale)
end

function ChannelServiceClient:send_getApprovedChannels(lastSynced, locale)
  self.oprot:writeMessageBegin('getApprovedChannels', TMessageType.CALL, self._seqid)
  local args = getApprovedChannels_args:new{}
  args.lastSynced = lastSynced
  args.locale = locale
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_getApprovedChannels(lastSynced, locale)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getApprovedChannels_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:getChannelInfo(channelId, locale)
  self:send_getChannelInfo(channelId, locale)
  return self:recv_getChannelInfo(channelId, locale)
end

function ChannelServiceClient:send_getChannelInfo(channelId, locale)
  self.oprot:writeMessageBegin('getChannelInfo', TMessageType.CALL, self._seqid)
  local args = getChannelInfo_args:new{}
  args.channelId = channelId
  args.locale = locale
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_getChannelInfo(channelId, locale)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getChannelInfo_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:getChannelNotificationSetting(channelId, locale)
  self:send_getChannelNotificationSetting(channelId, locale)
  return self:recv_getChannelNotificationSetting(channelId, locale)
end

function ChannelServiceClient:send_getChannelNotificationSetting(channelId, locale)
  self.oprot:writeMessageBegin('getChannelNotificationSetting', TMessageType.CALL, self._seqid)
  local args = getChannelNotificationSetting_args:new{}
  args.channelId = channelId
  args.locale = locale
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_getChannelNotificationSetting(channelId, locale)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getChannelNotificationSetting_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:getChannelNotificationSettings(locale)
  self:send_getChannelNotificationSettings(locale)
  return self:recv_getChannelNotificationSettings(locale)
end

function ChannelServiceClient:send_getChannelNotificationSettings(locale)
  self.oprot:writeMessageBegin('getChannelNotificationSettings', TMessageType.CALL, self._seqid)
  local args = getChannelNotificationSettings_args:new{}
  args.locale = locale
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_getChannelNotificationSettings(locale)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getChannelNotificationSettings_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:getChannels(lastSynced, locale)
  self:send_getChannels(lastSynced, locale)
  return self:recv_getChannels(lastSynced, locale)
end

function ChannelServiceClient:send_getChannels(lastSynced, locale)
  self.oprot:writeMessageBegin('getChannels', TMessageType.CALL, self._seqid)
  local args = getChannels_args:new{}
  args.lastSynced = lastSynced
  args.locale = locale
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_getChannels(lastSynced, locale)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getChannels_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:getDomains(lastSynced)
  self:send_getDomains(lastSynced)
  return self:recv_getDomains(lastSynced)
end

function ChannelServiceClient:send_getDomains(lastSynced)
  self.oprot:writeMessageBegin('getDomains', TMessageType.CALL, self._seqid)
  local args = getDomains_args:new{}
  args.lastSynced = lastSynced
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_getDomains(lastSynced)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getDomains_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:getFriendChannelMatrices(channelIds)
  self:send_getFriendChannelMatrices(channelIds)
  return self:recv_getFriendChannelMatrices(channelIds)
end

function ChannelServiceClient:send_getFriendChannelMatrices(channelIds)
  self.oprot:writeMessageBegin('getFriendChannelMatrices', TMessageType.CALL, self._seqid)
  local args = getFriendChannelMatrices_args:new{}
  args.channelIds = channelIds
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_getFriendChannelMatrices(channelIds)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getFriendChannelMatrices_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:updateChannelSettings(channelSettings)
  self:send_updateChannelSettings(channelSettings)
  return self:recv_updateChannelSettings(channelSettings)
end

function ChannelServiceClient:send_updateChannelSettings(channelSettings)
  self.oprot:writeMessageBegin('updateChannelSettings', TMessageType.CALL, self._seqid)
  local args = updateChannelSettings_args:new{}
  args.channelSettings = channelSettings
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_updateChannelSettings(channelSettings)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateChannelSettings_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:getCommonDomains(lastSynced)
  self:send_getCommonDomains(lastSynced)
  return self:recv_getCommonDomains(lastSynced)
end

function ChannelServiceClient:send_getCommonDomains(lastSynced)
  self.oprot:writeMessageBegin('getCommonDomains', TMessageType.CALL, self._seqid)
  local args = getCommonDomains_args:new{}
  args.lastSynced = lastSynced
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_getCommonDomains(lastSynced)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getCommonDomains_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:getNotificationBadgeCount(localRev)
  self:send_getNotificationBadgeCount(localRev)
  return self:recv_getNotificationBadgeCount(localRev)
end

function ChannelServiceClient:send_getNotificationBadgeCount(localRev)
  self.oprot:writeMessageBegin('getNotificationBadgeCount', TMessageType.CALL, self._seqid)
  local args = getNotificationBadgeCount_args:new{}
  args.localRev = localRev
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_getNotificationBadgeCount(localRev)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getNotificationBadgeCount_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:issueChannelToken(channelId)
  self:send_issueChannelToken(channelId)
  return self:recv_issueChannelToken(channelId)
end

function ChannelServiceClient:send_issueChannelToken(channelId)
  self.oprot:writeMessageBegin('issueChannelToken', TMessageType.CALL, self._seqid)
  local args = issueChannelToken_args:new{}
  args.channelId = channelId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_issueChannelToken(channelId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = issueChannelToken_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:issueRequestToken(channelId, otpId)
  self:send_issueRequestToken(channelId, otpId)
  return self:recv_issueRequestToken(channelId, otpId)
end

function ChannelServiceClient:send_issueRequestToken(channelId, otpId)
  self.oprot:writeMessageBegin('issueRequestToken', TMessageType.CALL, self._seqid)
  local args = issueRequestToken_args:new{}
  args.channelId = channelId
  args.otpId = otpId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_issueRequestToken(channelId, otpId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = issueRequestToken_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:issueRequestTokenWithAuthScheme(channelId, otpId, authScheme, returnUrl)
  self:send_issueRequestTokenWithAuthScheme(channelId, otpId, authScheme, returnUrl)
  return self:recv_issueRequestTokenWithAuthScheme(channelId, otpId, authScheme, returnUrl)
end

function ChannelServiceClient:send_issueRequestTokenWithAuthScheme(channelId, otpId, authScheme, returnUrl)
  self.oprot:writeMessageBegin('issueRequestTokenWithAuthScheme', TMessageType.CALL, self._seqid)
  local args = issueRequestTokenWithAuthScheme_args:new{}
  args.channelId = channelId
  args.otpId = otpId
  args.authScheme = authScheme
  args.returnUrl = returnUrl
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_issueRequestTokenWithAuthScheme(channelId, otpId, authScheme, returnUrl)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = issueRequestTokenWithAuthScheme_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:issueRequestTokenForAutoLogin(channelId, otpId, redirectUrl)
  self:send_issueRequestTokenForAutoLogin(channelId, otpId, redirectUrl)
  return self:recv_issueRequestTokenForAutoLogin(channelId, otpId, redirectUrl)
end

function ChannelServiceClient:send_issueRequestTokenForAutoLogin(channelId, otpId, redirectUrl)
  self.oprot:writeMessageBegin('issueRequestTokenForAutoLogin', TMessageType.CALL, self._seqid)
  local args = issueRequestTokenForAutoLogin_args:new{}
  args.channelId = channelId
  args.otpId = otpId
  args.redirectUrl = redirectUrl
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_issueRequestTokenForAutoLogin(channelId, otpId, redirectUrl)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = issueRequestTokenForAutoLogin_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:getUpdatedChannelIds(channelIds)
  self:send_getUpdatedChannelIds(channelIds)
  return self:recv_getUpdatedChannelIds(channelIds)
end

function ChannelServiceClient:send_getUpdatedChannelIds(channelIds)
  self.oprot:writeMessageBegin('getUpdatedChannelIds', TMessageType.CALL, self._seqid)
  local args = getUpdatedChannelIds_args:new{}
  args.channelIds = channelIds
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_getUpdatedChannelIds(channelIds)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getUpdatedChannelIds_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:reserveCoinUse(request, locale)
  self:send_reserveCoinUse(request, locale)
  return self:recv_reserveCoinUse(request, locale)
end

function ChannelServiceClient:send_reserveCoinUse(request, locale)
  self.oprot:writeMessageBegin('reserveCoinUse', TMessageType.CALL, self._seqid)
  local args = reserveCoinUse_args:new{}
  args.request = request
  args.locale = locale
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_reserveCoinUse(request, locale)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = reserveCoinUse_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:revokeChannel(channelId)
  self:send_revokeChannel(channelId)
  self:recv_revokeChannel(channelId)
end

function ChannelServiceClient:send_revokeChannel(channelId)
  self.oprot:writeMessageBegin('revokeChannel', TMessageType.CALL, self._seqid)
  local args = revokeChannel_args:new{}
  args.channelId = channelId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_revokeChannel(channelId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = revokeChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ChannelServiceClient:syncChannelData(lastSynced, locale)
  self:send_syncChannelData(lastSynced, locale)
  return self:recv_syncChannelData(lastSynced, locale)
end

function ChannelServiceClient:send_syncChannelData(lastSynced, locale)
  self.oprot:writeMessageBegin('syncChannelData', TMessageType.CALL, self._seqid)
  local args = syncChannelData_args:new{}
  args.lastSynced = lastSynced
  args.locale = locale
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_syncChannelData(lastSynced, locale)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = syncChannelData_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelServiceClient:updateChannelNotificationSetting(setting)
  self:send_updateChannelNotificationSetting(setting)
  self:recv_updateChannelNotificationSetting(setting)
end

function ChannelServiceClient:send_updateChannelNotificationSetting(setting)
  self.oprot:writeMessageBegin('updateChannelNotificationSetting', TMessageType.CALL, self._seqid)
  local args = updateChannelNotificationSetting_args:new{}
  args.setting = setting
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelServiceClient:recv_updateChannelNotificationSetting(setting)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateChannelNotificationSetting_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end
ChannelServiceIface = __TObject:new{
  __type = 'ChannelServiceIface'
}


ChannelServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'ChannelServiceProcessor'
})

function ChannelServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function ChannelServiceProcessor:process_issueOTP(seqid, iprot, oprot, server_ctx)
  local args = issueOTP_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = issueOTP_result:new{}
  local status, res = pcall(self.handler.issueOTP, self.handler, args.channelId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('issueOTP', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_approveChannelAndIssueChannelToken(seqid, iprot, oprot, server_ctx)
  local args = approveChannelAndIssueChannelToken_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = approveChannelAndIssueChannelToken_result:new{}
  local status, res = pcall(self.handler.approveChannelAndIssueChannelToken, self.handler, args.channelId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('approveChannelAndIssueChannelToken', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_approveChannelAndIssueRequestToken(seqid, iprot, oprot, server_ctx)
  local args = approveChannelAndIssueRequestToken_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = approveChannelAndIssueRequestToken_result:new{}
  local status, res = pcall(self.handler.approveChannelAndIssueRequestToken, self.handler, args.channelId, args.otpId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('approveChannelAndIssueRequestToken', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_fetchNotificationItems(seqid, iprot, oprot, server_ctx)
  local args = fetchNotificationItems_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = fetchNotificationItems_result:new{}
  local status, res = pcall(self.handler.fetchNotificationItems, self.handler, args.localRev)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('fetchNotificationItems', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_getApprovedChannels(seqid, iprot, oprot, server_ctx)
  local args = getApprovedChannels_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getApprovedChannels_result:new{}
  local status, res = pcall(self.handler.getApprovedChannels, self.handler, args.lastSynced, args.locale)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getApprovedChannels', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_getChannelInfo(seqid, iprot, oprot, server_ctx)
  local args = getChannelInfo_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getChannelInfo_result:new{}
  local status, res = pcall(self.handler.getChannelInfo, self.handler, args.channelId, args.locale)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getChannelInfo', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_getChannelNotificationSetting(seqid, iprot, oprot, server_ctx)
  local args = getChannelNotificationSetting_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getChannelNotificationSetting_result:new{}
  local status, res = pcall(self.handler.getChannelNotificationSetting, self.handler, args.channelId, args.locale)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getChannelNotificationSetting', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_getChannelNotificationSettings(seqid, iprot, oprot, server_ctx)
  local args = getChannelNotificationSettings_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getChannelNotificationSettings_result:new{}
  local status, res = pcall(self.handler.getChannelNotificationSettings, self.handler, args.locale)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getChannelNotificationSettings', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_getChannels(seqid, iprot, oprot, server_ctx)
  local args = getChannels_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getChannels_result:new{}
  local status, res = pcall(self.handler.getChannels, self.handler, args.lastSynced, args.locale)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getChannels', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_getDomains(seqid, iprot, oprot, server_ctx)
  local args = getDomains_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getDomains_result:new{}
  local status, res = pcall(self.handler.getDomains, self.handler, args.lastSynced)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getDomains', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_getFriendChannelMatrices(seqid, iprot, oprot, server_ctx)
  local args = getFriendChannelMatrices_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getFriendChannelMatrices_result:new{}
  local status, res = pcall(self.handler.getFriendChannelMatrices, self.handler, args.channelIds)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getFriendChannelMatrices', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_updateChannelSettings(seqid, iprot, oprot, server_ctx)
  local args = updateChannelSettings_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateChannelSettings_result:new{}
  local status, res = pcall(self.handler.updateChannelSettings, self.handler, args.channelSettings)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateChannelSettings', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_getCommonDomains(seqid, iprot, oprot, server_ctx)
  local args = getCommonDomains_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getCommonDomains_result:new{}
  local status, res = pcall(self.handler.getCommonDomains, self.handler, args.lastSynced)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getCommonDomains', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_getNotificationBadgeCount(seqid, iprot, oprot, server_ctx)
  local args = getNotificationBadgeCount_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getNotificationBadgeCount_result:new{}
  local status, res = pcall(self.handler.getNotificationBadgeCount, self.handler, args.localRev)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getNotificationBadgeCount', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_issueChannelToken(seqid, iprot, oprot, server_ctx)
  local args = issueChannelToken_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = issueChannelToken_result:new{}
  local status, res = pcall(self.handler.issueChannelToken, self.handler, args.channelId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('issueChannelToken', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_issueRequestToken(seqid, iprot, oprot, server_ctx)
  local args = issueRequestToken_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = issueRequestToken_result:new{}
  local status, res = pcall(self.handler.issueRequestToken, self.handler, args.channelId, args.otpId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('issueRequestToken', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_issueRequestTokenWithAuthScheme(seqid, iprot, oprot, server_ctx)
  local args = issueRequestTokenWithAuthScheme_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = issueRequestTokenWithAuthScheme_result:new{}
  local status, res = pcall(self.handler.issueRequestTokenWithAuthScheme, self.handler, args.channelId, args.otpId, args.authScheme, args.returnUrl)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('issueRequestTokenWithAuthScheme', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_issueRequestTokenForAutoLogin(seqid, iprot, oprot, server_ctx)
  local args = issueRequestTokenForAutoLogin_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = issueRequestTokenForAutoLogin_result:new{}
  local status, res = pcall(self.handler.issueRequestTokenForAutoLogin, self.handler, args.channelId, args.otpId, args.redirectUrl)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('issueRequestTokenForAutoLogin', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_getUpdatedChannelIds(seqid, iprot, oprot, server_ctx)
  local args = getUpdatedChannelIds_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getUpdatedChannelIds_result:new{}
  local status, res = pcall(self.handler.getUpdatedChannelIds, self.handler, args.channelIds)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getUpdatedChannelIds', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_reserveCoinUse(seqid, iprot, oprot, server_ctx)
  local args = reserveCoinUse_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = reserveCoinUse_result:new{}
  local status, res = pcall(self.handler.reserveCoinUse, self.handler, args.request, args.locale)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('reserveCoinUse', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_revokeChannel(seqid, iprot, oprot, server_ctx)
  local args = revokeChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = revokeChannel_result:new{}
  local status, res = pcall(self.handler.revokeChannel, self.handler, args.channelId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('revokeChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_syncChannelData(seqid, iprot, oprot, server_ctx)
  local args = syncChannelData_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = syncChannelData_result:new{}
  local status, res = pcall(self.handler.syncChannelData, self.handler, args.lastSynced, args.locale)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('syncChannelData', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelServiceProcessor:process_updateChannelNotificationSetting(seqid, iprot, oprot, server_ctx)
  local args = updateChannelNotificationSetting_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateChannelNotificationSetting_result:new{}
  local status, res = pcall(self.handler.updateChannelNotificationSetting, self.handler, args.setting)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ChannelException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateChannelNotificationSetting', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

issueOTP_args = __TObject:new{
  channelId
}

function issueOTP_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function issueOTP_args:write(oprot)
  oprot:writeStructBegin('issueOTP_args')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 2)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

issueOTP_result = __TObject:new{
  success,
  e
}

function issueOTP_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = OTPResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function issueOTP_result:write(oprot)
  oprot:writeStructBegin('issueOTP_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

approveChannelAndIssueChannelToken_args = __TObject:new{
  channelId
}

function approveChannelAndIssueChannelToken_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function approveChannelAndIssueChannelToken_args:write(oprot)
  oprot:writeStructBegin('approveChannelAndIssueChannelToken_args')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 1)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

approveChannelAndIssueChannelToken_result = __TObject:new{
  success,
  e
}

function approveChannelAndIssueChannelToken_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ChannelToken:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function approveChannelAndIssueChannelToken_result:write(oprot)
  oprot:writeStructBegin('approveChannelAndIssueChannelToken_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

approveChannelAndIssueRequestToken_args = __TObject:new{
  channelId,
  otpId
}

function approveChannelAndIssueRequestToken_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.otpId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function approveChannelAndIssueRequestToken_args:write(oprot)
  oprot:writeStructBegin('approveChannelAndIssueRequestToken_args')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 1)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  if self.otpId ~= nil then
    oprot:writeFieldBegin('otpId', TType.STRING, 2)
    oprot:writeString(self.otpId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

approveChannelAndIssueRequestToken_result = __TObject:new{
  success,
  e
}

function approveChannelAndIssueRequestToken_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function approveChannelAndIssueRequestToken_result:write(oprot)
  oprot:writeStructBegin('approveChannelAndIssueRequestToken_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

fetchNotificationItems_args = __TObject:new{
  localRev
}

function fetchNotificationItems_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.localRev = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function fetchNotificationItems_args:write(oprot)
  oprot:writeStructBegin('fetchNotificationItems_args')
  if self.localRev ~= nil then
    oprot:writeFieldBegin('localRev', TType.I64, 2)
    oprot:writeI64(self.localRev)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

fetchNotificationItems_result = __TObject:new{
  success,
  e
}

function fetchNotificationItems_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = NotificationFetchResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function fetchNotificationItems_result:write(oprot)
  oprot:writeStructBegin('fetchNotificationItems_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getApprovedChannels_args = __TObject:new{
  lastSynced,
  locale
}

function getApprovedChannels_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.lastSynced = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.locale = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getApprovedChannels_args:write(oprot)
  oprot:writeStructBegin('getApprovedChannels_args')
  if self.lastSynced ~= nil then
    oprot:writeFieldBegin('lastSynced', TType.I64, 2)
    oprot:writeI64(self.lastSynced)
    oprot:writeFieldEnd()
  end
  if self.locale ~= nil then
    oprot:writeFieldBegin('locale', TType.STRING, 3)
    oprot:writeString(self.locale)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getApprovedChannels_result = __TObject:new{
  success,
  e
}

function getApprovedChannels_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ApprovedChannelInfos:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getApprovedChannels_result:write(oprot)
  oprot:writeStructBegin('getApprovedChannels_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getChannelInfo_args = __TObject:new{
  channelId,
  locale
}

function getChannelInfo_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.locale = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getChannelInfo_args:write(oprot)
  oprot:writeStructBegin('getChannelInfo_args')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 2)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  if self.locale ~= nil then
    oprot:writeFieldBegin('locale', TType.STRING, 3)
    oprot:writeString(self.locale)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getChannelInfo_result = __TObject:new{
  success,
  e
}

function getChannelInfo_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ChannelInfo:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getChannelInfo_result:write(oprot)
  oprot:writeStructBegin('getChannelInfo_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getChannelNotificationSetting_args = __TObject:new{
  channelId,
  locale
}

function getChannelNotificationSetting_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.locale = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getChannelNotificationSetting_args:write(oprot)
  oprot:writeStructBegin('getChannelNotificationSetting_args')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 1)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  if self.locale ~= nil then
    oprot:writeFieldBegin('locale', TType.STRING, 2)
    oprot:writeString(self.locale)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getChannelNotificationSetting_result = __TObject:new{
  success,
  e
}

function getChannelNotificationSetting_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ChannelNotificationSetting:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getChannelNotificationSetting_result:write(oprot)
  oprot:writeStructBegin('getChannelNotificationSetting_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getChannelNotificationSettings_args = __TObject:new{
  locale
}

function getChannelNotificationSettings_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.locale = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getChannelNotificationSettings_args:write(oprot)
  oprot:writeStructBegin('getChannelNotificationSettings_args')
  if self.locale ~= nil then
    oprot:writeFieldBegin('locale', TType.STRING, 1)
    oprot:writeString(self.locale)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getChannelNotificationSettings_result = __TObject:new{
  success,
  e
}

function getChannelNotificationSettings_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1097, _size1094 = iprot:readListBegin()
        for _i=1,_size1094 do
          local _elem1098 = ChannelNotificationSetting:new{}
          _elem1098:read(iprot)
          table.insert(self.success, _elem1098)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getChannelNotificationSettings_result:write(oprot)
  oprot:writeStructBegin('getChannelNotificationSettings_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter1099 in ipairs(self.success) do
      iter1099:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getChannels_args = __TObject:new{
  lastSynced,
  locale
}

function getChannels_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.lastSynced = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.locale = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getChannels_args:write(oprot)
  oprot:writeStructBegin('getChannels_args')
  if self.lastSynced ~= nil then
    oprot:writeFieldBegin('lastSynced', TType.I64, 2)
    oprot:writeI64(self.lastSynced)
    oprot:writeFieldEnd()
  end
  if self.locale ~= nil then
    oprot:writeFieldBegin('locale', TType.STRING, 3)
    oprot:writeString(self.locale)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getChannels_result = __TObject:new{
  success,
  e
}

function getChannels_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ChannelInfos:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getChannels_result:write(oprot)
  oprot:writeStructBegin('getChannels_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getDomains_args = __TObject:new{
  lastSynced
}

function getDomains_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.lastSynced = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getDomains_args:write(oprot)
  oprot:writeStructBegin('getDomains_args')
  if self.lastSynced ~= nil then
    oprot:writeFieldBegin('lastSynced', TType.I64, 2)
    oprot:writeI64(self.lastSynced)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getDomains_result = __TObject:new{
  success,
  e
}

function getDomains_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ChannelDomains:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getDomains_result:write(oprot)
  oprot:writeStructBegin('getDomains_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getFriendChannelMatrices_args = __TObject:new{
  channelIds
}

function getFriendChannelMatrices_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.channelIds = {}
        local _etype1103, _size1100 = iprot:readListBegin()
        for _i=1,_size1100 do
          local _elem1104 = iprot:readString()
          table.insert(self.channelIds, _elem1104)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getFriendChannelMatrices_args:write(oprot)
  oprot:writeStructBegin('getFriendChannelMatrices_args')
  if self.channelIds ~= nil then
    oprot:writeFieldBegin('channelIds', TType.LIST, 1)
    oprot:writeListBegin(TType.STRING, #self.channelIds)
    for _,iter1105 in ipairs(self.channelIds) do
      oprot:writeString(iter1105)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getFriendChannelMatrices_result = __TObject:new{
  success,
  e
}

function getFriendChannelMatrices_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = FriendChannelMatricesResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getFriendChannelMatrices_result:write(oprot)
  oprot:writeStructBegin('getFriendChannelMatrices_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateChannelSettings_args = __TObject:new{
  channelSettings
}

function updateChannelSettings_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.channelSettings = ChannelSettings:new{}
        self.channelSettings:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateChannelSettings_args:write(oprot)
  oprot:writeStructBegin('updateChannelSettings_args')
  if self.channelSettings ~= nil then
    oprot:writeFieldBegin('channelSettings', TType.STRUCT, 1)
    self.channelSettings:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateChannelSettings_result = __TObject:new{
  success,
  e
}

function updateChannelSettings_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateChannelSettings_result:write(oprot)
  oprot:writeStructBegin('updateChannelSettings_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getCommonDomains_args = __TObject:new{
  lastSynced
}

function getCommonDomains_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.lastSynced = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCommonDomains_args:write(oprot)
  oprot:writeStructBegin('getCommonDomains_args')
  if self.lastSynced ~= nil then
    oprot:writeFieldBegin('lastSynced', TType.I64, 1)
    oprot:writeI64(self.lastSynced)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getCommonDomains_result = __TObject:new{
  success,
  e
}

function getCommonDomains_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ChannelDomains:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCommonDomains_result:write(oprot)
  oprot:writeStructBegin('getCommonDomains_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNotificationBadgeCount_args = __TObject:new{
  localRev
}

function getNotificationBadgeCount_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.localRev = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNotificationBadgeCount_args:write(oprot)
  oprot:writeStructBegin('getNotificationBadgeCount_args')
  if self.localRev ~= nil then
    oprot:writeFieldBegin('localRev', TType.I64, 2)
    oprot:writeI64(self.localRev)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNotificationBadgeCount_result = __TObject:new{
  success,
  e
}

function getNotificationBadgeCount_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNotificationBadgeCount_result:write(oprot)
  oprot:writeStructBegin('getNotificationBadgeCount_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

issueChannelToken_args = __TObject:new{
  channelId
}

function issueChannelToken_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function issueChannelToken_args:write(oprot)
  oprot:writeStructBegin('issueChannelToken_args')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 1)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

issueChannelToken_result = __TObject:new{
  success,
  e
}

function issueChannelToken_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ChannelToken:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function issueChannelToken_result:write(oprot)
  oprot:writeStructBegin('issueChannelToken_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

issueRequestToken_args = __TObject:new{
  channelId,
  otpId
}

function issueRequestToken_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.otpId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function issueRequestToken_args:write(oprot)
  oprot:writeStructBegin('issueRequestToken_args')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 1)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  if self.otpId ~= nil then
    oprot:writeFieldBegin('otpId', TType.STRING, 2)
    oprot:writeString(self.otpId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

issueRequestToken_result = __TObject:new{
  success,
  e
}

function issueRequestToken_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function issueRequestToken_result:write(oprot)
  oprot:writeStructBegin('issueRequestToken_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

issueRequestTokenWithAuthScheme_args = __TObject:new{
  channelId,
  otpId,
  authScheme,
  returnUrl
}

function issueRequestTokenWithAuthScheme_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.otpId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.authScheme = {}
        local _etype1109, _size1106 = iprot:readListBegin()
        for _i=1,_size1106 do
          local _elem1110 = iprot:readString()
          table.insert(self.authScheme, _elem1110)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.returnUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function issueRequestTokenWithAuthScheme_args:write(oprot)
  oprot:writeStructBegin('issueRequestTokenWithAuthScheme_args')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 1)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  if self.otpId ~= nil then
    oprot:writeFieldBegin('otpId', TType.STRING, 2)
    oprot:writeString(self.otpId)
    oprot:writeFieldEnd()
  end
  if self.authScheme ~= nil then
    oprot:writeFieldBegin('authScheme', TType.LIST, 3)
    oprot:writeListBegin(TType.STRING, #self.authScheme)
    for _,iter1111 in ipairs(self.authScheme) do
      oprot:writeString(iter1111)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.returnUrl ~= nil then
    oprot:writeFieldBegin('returnUrl', TType.STRING, 4)
    oprot:writeString(self.returnUrl)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

issueRequestTokenWithAuthScheme_result = __TObject:new{
  success,
  e
}

function issueRequestTokenWithAuthScheme_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = RequestTokenResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function issueRequestTokenWithAuthScheme_result:write(oprot)
  oprot:writeStructBegin('issueRequestTokenWithAuthScheme_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

issueRequestTokenForAutoLogin_args = __TObject:new{
  channelId,
  otpId,
  redirectUrl
}

function issueRequestTokenForAutoLogin_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.otpId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.redirectUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function issueRequestTokenForAutoLogin_args:write(oprot)
  oprot:writeStructBegin('issueRequestTokenForAutoLogin_args')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 2)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  if self.otpId ~= nil then
    oprot:writeFieldBegin('otpId', TType.STRING, 3)
    oprot:writeString(self.otpId)
    oprot:writeFieldEnd()
  end
  if self.redirectUrl ~= nil then
    oprot:writeFieldBegin('redirectUrl', TType.STRING, 4)
    oprot:writeString(self.redirectUrl)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

issueRequestTokenForAutoLogin_result = __TObject:new{
  success,
  e
}

function issueRequestTokenForAutoLogin_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function issueRequestTokenForAutoLogin_result:write(oprot)
  oprot:writeStructBegin('issueRequestTokenForAutoLogin_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUpdatedChannelIds_args = __TObject:new{
  channelIds
}

function getUpdatedChannelIds_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.channelIds = {}
        local _etype1115, _size1112 = iprot:readListBegin()
        for _i=1,_size1112 do
          local _elem1116 = ChannelIdWithLastUpdated:new{}
          _elem1116:read(iprot)
          table.insert(self.channelIds, _elem1116)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUpdatedChannelIds_args:write(oprot)
  oprot:writeStructBegin('getUpdatedChannelIds_args')
  if self.channelIds ~= nil then
    oprot:writeFieldBegin('channelIds', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.channelIds)
    for _,iter1117 in ipairs(self.channelIds) do
      iter1117:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUpdatedChannelIds_result = __TObject:new{
  success,
  e
}

function getUpdatedChannelIds_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1121, _size1118 = iprot:readListBegin()
        for _i=1,_size1118 do
          local _elem1122 = iprot:readString()
          table.insert(self.success, _elem1122)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUpdatedChannelIds_result:write(oprot)
  oprot:writeStructBegin('getUpdatedChannelIds_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter1123 in ipairs(self.success) do
      oprot:writeString(iter1123)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

reserveCoinUse_args = __TObject:new{
  request,
  locale
}

function reserveCoinUse_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.request = CoinUseReservation:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.locale = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function reserveCoinUse_args:write(oprot)
  oprot:writeStructBegin('reserveCoinUse_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 2)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.locale ~= nil then
    oprot:writeFieldBegin('locale', TType.STRING, 3)
    oprot:writeString(self.locale)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

reserveCoinUse_result = __TObject:new{
  success,
  e
}

function reserveCoinUse_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function reserveCoinUse_result:write(oprot)
  oprot:writeStructBegin('reserveCoinUse_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

revokeChannel_args = __TObject:new{
  channelId
}

function revokeChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function revokeChannel_args:write(oprot)
  oprot:writeStructBegin('revokeChannel_args')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 1)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

revokeChannel_result = __TObject:new{
  e
}

function revokeChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function revokeChannel_result:write(oprot)
  oprot:writeStructBegin('revokeChannel_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

syncChannelData_args = __TObject:new{
  lastSynced,
  locale
}

function syncChannelData_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.lastSynced = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.locale = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function syncChannelData_args:write(oprot)
  oprot:writeStructBegin('syncChannelData_args')
  if self.lastSynced ~= nil then
    oprot:writeFieldBegin('lastSynced', TType.I64, 2)
    oprot:writeI64(self.lastSynced)
    oprot:writeFieldEnd()
  end
  if self.locale ~= nil then
    oprot:writeFieldBegin('locale', TType.STRING, 3)
    oprot:writeString(self.locale)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

syncChannelData_result = __TObject:new{
  success,
  e
}

function syncChannelData_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ChannelSyncDatas:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function syncChannelData_result:write(oprot)
  oprot:writeStructBegin('syncChannelData_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateChannelNotificationSetting_args = __TObject:new{
  setting
}

function updateChannelNotificationSetting_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.setting = {}
        local _etype1127, _size1124 = iprot:readListBegin()
        for _i=1,_size1124 do
          local _elem1128 = ChannelNotificationSetting:new{}
          _elem1128:read(iprot)
          table.insert(self.setting, _elem1128)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateChannelNotificationSetting_args:write(oprot)
  oprot:writeStructBegin('updateChannelNotificationSetting_args')
  if self.setting ~= nil then
    oprot:writeFieldBegin('setting', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.setting)
    for _,iter1129 in ipairs(self.setting) do
      iter1129:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateChannelNotificationSetting_result = __TObject:new{
  e
}

function updateChannelNotificationSetting_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = ChannelException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateChannelNotificationSetting_result:write(oprot)
  oprot:writeStructBegin('updateChannelNotificationSetting_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end