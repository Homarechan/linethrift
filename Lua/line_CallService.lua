--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'line_ttypes'

CallServiceClient = __TObject.new(__TClient, {
  __type = 'CallServiceClient'
})

function CallServiceClient:getUserStatus(mid)
  self:send_getUserStatus(mid)
  return self:recv_getUserStatus(mid)
end

function CallServiceClient:send_getUserStatus(mid)
  self.oprot:writeMessageBegin('getUserStatus', TMessageType.CALL, self._seqid)
  local args = getUserStatus_args:new{}
  args.mid = mid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getUserStatus(mid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getUserStatus_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:updateProfileAttributeForChannel(profileAttribute, value)
  self:send_updateProfileAttributeForChannel(profileAttribute, value)
  self:recv_updateProfileAttributeForChannel(profileAttribute, value)
end

function CallServiceClient:send_updateProfileAttributeForChannel(profileAttribute, value)
  self.oprot:writeMessageBegin('updateProfileAttributeForChannel', TMessageType.CALL, self._seqid)
  local args = updateProfileAttributeForChannel_args:new{}
  args.profileAttribute = profileAttribute
  args.value = value
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_updateProfileAttributeForChannel(profileAttribute, value)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateProfileAttributeForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function CallServiceClient:updateExtendedProfileAttribute(attr, extendedProfile)
  self:send_updateExtendedProfileAttribute(attr, extendedProfile)
  self:recv_updateExtendedProfileAttribute(attr, extendedProfile)
end

function CallServiceClient:send_updateExtendedProfileAttribute(attr, extendedProfile)
  self.oprot:writeMessageBegin('updateExtendedProfileAttribute', TMessageType.CALL, self._seqid)
  local args = updateExtendedProfileAttribute_args:new{}
  args.attr = attr
  args.extendedProfile = extendedProfile
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_updateExtendedProfileAttribute(attr, extendedProfile)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateExtendedProfileAttribute_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function CallServiceClient:getAllSimpleChannelContacts(statusSticonFallbackDisabled)
  self:send_getAllSimpleChannelContacts(statusSticonFallbackDisabled)
  return self:recv_getAllSimpleChannelContacts(statusSticonFallbackDisabled)
end

function CallServiceClient:send_getAllSimpleChannelContacts(statusSticonFallbackDisabled)
  self.oprot:writeMessageBegin('getAllSimpleChannelContacts', TMessageType.CALL, self._seqid)
  local args = getAllSimpleChannelContacts_args:new{}
  args.statusSticonFallbackDisabled = statusSticonFallbackDisabled
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getAllSimpleChannelContacts(statusSticonFallbackDisabled)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getAllSimpleChannelContacts_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getUserIdentities()
  self:send_getUserIdentities()
  return self:recv_getUserIdentities()
end

function CallServiceClient:send_getUserIdentities()
  self.oprot:writeMessageBegin('getUserIdentities', TMessageType.CALL, self._seqid)
  local args = getUserIdentities_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getUserIdentities()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getUserIdentities_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:markPaidCallAd(dialedNumber, language, disableCallerId)
  self:send_markPaidCallAd(dialedNumber, language, disableCallerId)
  return self:recv_markPaidCallAd(dialedNumber, language, disableCallerId)
end

function CallServiceClient:send_markPaidCallAd(dialedNumber, language, disableCallerId)
  self.oprot:writeMessageBegin('markPaidCallAd', TMessageType.CALL, self._seqid)
  local args = markPaidCallAd_args:new{}
  args.dialedNumber = dialedNumber
  args.language = language
  args.disableCallerId = disableCallerId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_markPaidCallAd(dialedNumber, language, disableCallerId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = markPaidCallAd_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:isGroupMember(groupId)
  self:send_isGroupMember(groupId)
  return self:recv_isGroupMember(groupId)
end

function CallServiceClient:send_isGroupMember(groupId)
  self.oprot:writeMessageBegin('isGroupMember', TMessageType.CALL, self._seqid)
  local args = isGroupMember_args:new{}
  args.groupId = groupId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_isGroupMember(groupId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = isGroupMember_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getPhoneInfoFromPhoneNumber(region, phoneNumber)
  self:send_getPhoneInfoFromPhoneNumber(region, phoneNumber)
  return self:recv_getPhoneInfoFromPhoneNumber(region, phoneNumber)
end

function CallServiceClient:send_getPhoneInfoFromPhoneNumber(region, phoneNumber)
  self.oprot:writeMessageBegin('getPhoneInfoFromPhoneNumber', TMessageType.CALL, self._seqid)
  local args = getPhoneInfoFromPhoneNumber_args:new{}
  args.region = region
  args.phoneNumber = phoneNumber
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getPhoneInfoFromPhoneNumber(region, phoneNumber)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getPhoneInfoFromPhoneNumber_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:redeemPaidCallVoucher(serial, language)
  self:send_redeemPaidCallVoucher(serial, language)
  return self:recv_redeemPaidCallVoucher(serial, language)
end

function CallServiceClient:send_redeemPaidCallVoucher(serial, language)
  self.oprot:writeMessageBegin('redeemPaidCallVoucher', TMessageType.CALL, self._seqid)
  local args = redeemPaidCallVoucher_args:new{}
  args.serial = serial
  args.language = language
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_redeemPaidCallVoucher(serial, language)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = redeemPaidCallVoucher_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getPreferredDisplayName(mids)
  self:send_getPreferredDisplayName(mids)
  return self:recv_getPreferredDisplayName(mids)
end

function CallServiceClient:send_getPreferredDisplayName(mids)
  self.oprot:writeMessageBegin('getPreferredDisplayName', TMessageType.CALL, self._seqid)
  local args = getPreferredDisplayName_args:new{}
  args.mids = mids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getPreferredDisplayName(mids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getPreferredDisplayName_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getContactsForChannel(ids)
  self:send_getContactsForChannel(ids)
  return self:recv_getContactsForChannel(ids)
end

function CallServiceClient:send_getContactsForChannel(ids)
  self.oprot:writeMessageBegin('getContactsForChannel', TMessageType.CALL, self._seqid)
  local args = getContactsForChannel_args:new{}
  args.ids = ids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getContactsForChannel(ids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getContactsForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getCallCreditProducts(appStoreCode, pgCode, country, language)
  self:send_getCallCreditProducts(appStoreCode, pgCode, country, language)
  return self:recv_getCallCreditProducts(appStoreCode, pgCode, country, language)
end

function CallServiceClient:send_getCallCreditProducts(appStoreCode, pgCode, country, language)
  self.oprot:writeMessageBegin('getCallCreditProducts', TMessageType.CALL, self._seqid)
  local args = getCallCreditProducts_args:new{}
  args.appStoreCode = appStoreCode
  args.pgCode = pgCode
  args.country = country
  args.language = language
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getCallCreditProducts(appStoreCode, pgCode, country, language)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getCallCreditProducts_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getCompactContacts(lastModifiedTimestamp)
  self:send_getCompactContacts(lastModifiedTimestamp)
  return self:recv_getCompactContacts(lastModifiedTimestamp)
end

function CallServiceClient:send_getCompactContacts(lastModifiedTimestamp)
  self.oprot:writeMessageBegin('getCompactContacts', TMessageType.CALL, self._seqid)
  local args = getCompactContacts_args:new{}
  args.lastModifiedTimestamp = lastModifiedTimestamp
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getCompactContacts(lastModifiedTimestamp)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getCompactContacts_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:notifyNotiCenterEvent(event)
  self:send_notifyNotiCenterEvent(event)
  self:recv_notifyNotiCenterEvent(event)
end

function CallServiceClient:send_notifyNotiCenterEvent(event)
  self.oprot:writeMessageBegin('notifyNotiCenterEvent', TMessageType.CALL, self._seqid)
  local args = notifyNotiCenterEvent_args:new{}
  args.event = event
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_notifyNotiCenterEvent(event)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = notifyNotiCenterEvent_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function CallServiceClient:isInContact(mid)
  self:send_isInContact(mid)
  return self:recv_isInContact(mid)
end

function CallServiceClient:send_isInContact(mid)
  self.oprot:writeMessageBegin('isInContact', TMessageType.CALL, self._seqid)
  local args = isInContact_args:new{}
  args.mid = mid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_isInContact(mid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = isInContact_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:lookupGroupMembers(groupId, mids)
  self:send_lookupGroupMembers(groupId, mids)
  return self:recv_lookupGroupMembers(groupId, mids)
end

function CallServiceClient:send_lookupGroupMembers(groupId, mids)
  self.oprot:writeMessageBegin('lookupGroupMembers', TMessageType.CALL, self._seqid)
  local args = lookupGroupMembers_args:new{}
  args.groupId = groupId
  args.mids = mids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_lookupGroupMembers(groupId, mids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = lookupGroupMembers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getRoomInformation(roomMid)
  self:send_getRoomInformation(roomMid)
  return self:recv_getRoomInformation(roomMid)
end

function CallServiceClient:send_getRoomInformation(roomMid)
  self.oprot:writeMessageBegin('getRoomInformation', TMessageType.CALL, self._seqid)
  local args = getRoomInformation_args:new{}
  args.roomMid = roomMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getRoomInformation(roomMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getRoomInformation_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getGroupCall(chatMid)
  self:send_getGroupCall(chatMid)
  return self:recv_getGroupCall(chatMid)
end

function CallServiceClient:send_getGroupCall(chatMid)
  self.oprot:writeMessageBegin('getGroupCall', TMessageType.CALL, self._seqid)
  local args = getGroupCall_args:new{}
  args.chatMid = chatMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getGroupCall(chatMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getGroupCall_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:isAllowSecondaryDeviceLogin()
  self:send_isAllowSecondaryDeviceLogin()
  return self:recv_isAllowSecondaryDeviceLogin()
end

function CallServiceClient:send_isAllowSecondaryDeviceLogin()
  self.oprot:writeMessageBegin('isAllowSecondaryDeviceLogin', TMessageType.CALL, self._seqid)
  local args = isAllowSecondaryDeviceLogin_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_isAllowSecondaryDeviceLogin()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = isAllowSecondaryDeviceLogin_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getPrimaryClientForChannel()
  self:send_getPrimaryClientForChannel()
  return self:recv_getPrimaryClientForChannel()
end

function CallServiceClient:send_getPrimaryClientForChannel()
  self.oprot:writeMessageBegin('getPrimaryClientForChannel', TMessageType.CALL, self._seqid)
  local args = getPrimaryClientForChannel_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getPrimaryClientForChannel()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getPrimaryClientForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:createRoomWithBuddy(reqSeq, buddyMid, contactIds)
  self:send_createRoomWithBuddy(reqSeq, buddyMid, contactIds)
  return self:recv_createRoomWithBuddy(reqSeq, buddyMid, contactIds)
end

function CallServiceClient:send_createRoomWithBuddy(reqSeq, buddyMid, contactIds)
  self.oprot:writeMessageBegin('createRoomWithBuddy', TMessageType.CALL, self._seqid)
  local args = createRoomWithBuddy_args:new{}
  args.reqSeq = reqSeq
  args.buddyMid = buddyMid
  args.contactIds = contactIds
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_createRoomWithBuddy(reqSeq, buddyMid, contactIds)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = createRoomWithBuddy_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getDisplayName(mid)
  self:send_getDisplayName(mid)
  return self:recv_getDisplayName(mid)
end

function CallServiceClient:send_getDisplayName(mid)
  self.oprot:writeMessageBegin('getDisplayName', TMessageType.CALL, self._seqid)
  local args = getDisplayName_args:new{}
  args.mid = mid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getDisplayName(mid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getDisplayName_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getPaidCallMetadata(language)
  self:send_getPaidCallMetadata(language)
  return self:recv_getPaidCallMetadata(language)
end

function CallServiceClient:send_getPaidCallMetadata(language)
  self.oprot:writeMessageBegin('getPaidCallMetadata', TMessageType.CALL, self._seqid)
  local args = getPaidCallMetadata_args:new{}
  args.language = language
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getPaidCallMetadata(language)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getPaidCallMetadata_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getMid()
  self:send_getMid()
  return self:recv_getMid()
end

function CallServiceClient:send_getMid()
  self.oprot:writeMessageBegin('getMid', TMessageType.CALL, self._seqid)
  local args = getMid_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getMid()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getMid_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getUserCountryForBilling(country, remoteIp)
  self:send_getUserCountryForBilling(country, remoteIp)
  return self:recv_getUserCountryForBilling(country, remoteIp)
end

function CallServiceClient:send_getUserCountryForBilling(country, remoteIp)
  self.oprot:writeMessageBegin('getUserCountryForBilling', TMessageType.CALL, self._seqid)
  local args = getUserCountryForBilling_args:new{}
  args.country = country
  args.remoteIp = remoteIp
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getUserCountryForBilling(country, remoteIp)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getUserCountryForBilling_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getFavoriteGroupIdsForChannel()
  self:send_getFavoriteGroupIdsForChannel()
  return self:recv_getFavoriteGroupIdsForChannel()
end

function CallServiceClient:send_getFavoriteGroupIdsForChannel()
  self.oprot:writeMessageBegin('getFavoriteGroupIdsForChannel', TMessageType.CALL, self._seqid)
  local args = getFavoriteGroupIdsForChannel_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getFavoriteGroupIdsForChannel()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getFavoriteGroupIdsForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getPaidCallHistory(start, size, language)
  self:send_getPaidCallHistory(start, size, language)
  return self:recv_getPaidCallHistory(start, size, language)
end

function CallServiceClient:send_getPaidCallHistory(start, size, language)
  self.oprot:writeMessageBegin('getPaidCallHistory', TMessageType.CALL, self._seqid)
  local args = getPaidCallHistory_args:new{}
  args.start = start
  args.size = size
  args.language = language
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getPaidCallHistory(start, size, language)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getPaidCallHistory_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:sendPinCodeOperation(verifier)
  self:send_sendPinCodeOperation(verifier)
  self:recv_sendPinCodeOperation(verifier)
end

function CallServiceClient:send_sendPinCodeOperation(verifier)
  self.oprot:writeMessageBegin('sendPinCodeOperation', TMessageType.CALL, self._seqid)
  local args = sendPinCodeOperation_args:new{}
  args.verifier = verifier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_sendPinCodeOperation(verifier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendPinCodeOperation_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function CallServiceClient:inviteIntoGroupCall(chatMid, memberMids, mediaType)
  self:send_inviteIntoGroupCall(chatMid, memberMids, mediaType)
  self:recv_inviteIntoGroupCall(chatMid, memberMids, mediaType)
end

function CallServiceClient:send_inviteIntoGroupCall(chatMid, memberMids, mediaType)
  self.oprot:writeMessageBegin('inviteIntoGroupCall', TMessageType.CALL, self._seqid)
  local args = inviteIntoGroupCall_args:new{}
  args.chatMid = chatMid
  args.memberMids = memberMids
  args.mediaType = mediaType
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_inviteIntoGroupCall(chatMid, memberMids, mediaType)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = inviteIntoGroupCall_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function CallServiceClient:getFriendMids()
  self:send_getFriendMids()
  return self:recv_getFriendMids()
end

function CallServiceClient:send_getFriendMids()
  self.oprot:writeMessageBegin('getFriendMids', TMessageType.CALL, self._seqid)
  local args = getFriendMids_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getFriendMids()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getFriendMids_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getMetaProfile()
  self:send_getMetaProfile()
  return self:recv_getMetaProfile()
end

function CallServiceClient:send_getMetaProfile()
  self.oprot:writeMessageBegin('getMetaProfile', TMessageType.CALL, self._seqid)
  local args = getMetaProfile_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getMetaProfile()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getMetaProfile_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:sendMessageForChannel(message)
  self:send_sendMessageForChannel(message)
  return self:recv_sendMessageForChannel(message)
end

function CallServiceClient:send_sendMessageForChannel(message)
  self.oprot:writeMessageBegin('sendMessageForChannel', TMessageType.CALL, self._seqid)
  local args = sendMessageForChannel_args:new{}
  args.message = message
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_sendMessageForChannel(message)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendMessageForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:activeBuddySubscriberCount()
  self:send_activeBuddySubscriberCount()
  return self:recv_activeBuddySubscriberCount()
end

function CallServiceClient:send_activeBuddySubscriberCount()
  self.oprot:writeMessageBegin('activeBuddySubscriberCount', TMessageType.CALL, self._seqid)
  local args = activeBuddySubscriberCount_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_activeBuddySubscriberCount()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = activeBuddySubscriberCount_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getCallCreditPurchaseHistory(request)
  self:send_getCallCreditPurchaseHistory(request)
  return self:recv_getCallCreditPurchaseHistory(request)
end

function CallServiceClient:send_getCallCreditPurchaseHistory(request)
  self.oprot:writeMessageBegin('getCallCreditPurchaseHistory', TMessageType.CALL, self._seqid)
  local args = getCallCreditPurchaseHistory_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getCallCreditPurchaseHistory(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getCallCreditPurchaseHistory_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:isRoomMember(roomId)
  self:send_isRoomMember(roomId)
  return self:recv_isRoomMember(roomId)
end

function CallServiceClient:send_isRoomMember(roomId)
  self.oprot:writeMessageBegin('isRoomMember', TMessageType.CALL, self._seqid)
  local args = isRoomMember_args:new{}
  args.roomId = roomId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_isRoomMember(roomId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = isRoomMember_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:sendSystemOAMessage(message)
  self:send_sendSystemOAMessage(message)
  return self:recv_sendSystemOAMessage(message)
end

function CallServiceClient:send_sendSystemOAMessage(message)
  self.oprot:writeMessageBegin('sendSystemOAMessage', TMessageType.CALL, self._seqid)
  local args = sendSystemOAMessage_args:new{}
  args.message = message
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_sendSystemOAMessage(message)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendSystemOAMessage_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:acquirePaidCallRoute(paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId)
  self:send_acquirePaidCallRoute(paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId)
  return self:recv_acquirePaidCallRoute(paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId)
end

function CallServiceClient:send_acquirePaidCallRoute(paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId)
  self.oprot:writeMessageBegin('acquirePaidCallRoute', TMessageType.CALL, self._seqid)
  local args = acquirePaidCallRoute_args:new{}
  args.paidCallType = paidCallType
  args.dialedNumber = dialedNumber
  args.language = language
  args.networkCode = networkCode
  args.disableCallerId = disableCallerId
  args.referer = referer
  args.adSessionId = adSessionId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_acquirePaidCallRoute(paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = acquirePaidCallRoute_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getGroupsForChannel(groupIds)
  self:send_getGroupsForChannel(groupIds)
  return self:recv_getGroupsForChannel(groupIds)
end

function CallServiceClient:send_getGroupsForChannel(groupIds)
  self.oprot:writeMessageBegin('getGroupsForChannel', TMessageType.CALL, self._seqid)
  local args = getGroupsForChannel_args:new{}
  args.groupIds = groupIds
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getGroupsForChannel(groupIds)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getGroupsForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getUserCreateTime()
  self:send_getUserCreateTime()
  return self:recv_getUserCreateTime()
end

function CallServiceClient:send_getUserCreateTime()
  self.oprot:writeMessageBegin('getUserCreateTime', TMessageType.CALL, self._seqid)
  local args = getUserCreateTime_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getUserCreateTime()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getUserCreateTime_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:registerChannelCP(cpId, registerPassword)
  self:send_registerChannelCP(cpId, registerPassword)
  return self:recv_registerChannelCP(cpId, registerPassword)
end

function CallServiceClient:send_registerChannelCP(cpId, registerPassword)
  self.oprot:writeMessageBegin('registerChannelCP', TMessageType.CALL, self._seqid)
  local args = registerChannelCP_args:new{}
  args.cpId = cpId
  args.registerPassword = registerPassword
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_registerChannelCP(cpId, registerPassword)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = registerChannelCP_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:reserveCallCreditPurchase(request)
  self:send_reserveCallCreditPurchase(request)
  return self:recv_reserveCallCreditPurchase(request)
end

function CallServiceClient:send_reserveCallCreditPurchase(request)
  self.oprot:writeMessageBegin('reserveCallCreditPurchase', TMessageType.CALL, self._seqid)
  local args = reserveCallCreditPurchase_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_reserveCallCreditPurchase(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = reserveCallCreditPurchase_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:acquirePaidCallCurrencyExchangeRate(language)
  self:send_acquirePaidCallCurrencyExchangeRate(language)
  return self:recv_acquirePaidCallCurrencyExchangeRate(language)
end

function CallServiceClient:send_acquirePaidCallCurrencyExchangeRate(language)
  self.oprot:writeMessageBegin('acquirePaidCallCurrencyExchangeRate', TMessageType.CALL, self._seqid)
  local args = acquirePaidCallCurrencyExchangeRate_args:new{}
  args.language = language
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_acquirePaidCallCurrencyExchangeRate(language)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = acquirePaidCallCurrencyExchangeRate_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getRoomMemberMidsForAppPlatform(roomId)
  self:send_getRoomMemberMidsForAppPlatform(roomId)
  return self:recv_getRoomMemberMidsForAppPlatform(roomId)
end

function CallServiceClient:send_getRoomMemberMidsForAppPlatform(roomId)
  self.oprot:writeMessageBegin('getRoomMemberMidsForAppPlatform', TMessageType.CALL, self._seqid)
  local args = getRoomMemberMidsForAppPlatform_args:new{}
  args.roomId = roomId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getRoomMemberMidsForAppPlatform(roomId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getRoomMemberMidsForAppPlatform_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getPaidCallBalanceList(language)
  self:send_getPaidCallBalanceList(language)
  return self:recv_getPaidCallBalanceList(language)
end

function CallServiceClient:send_getPaidCallBalanceList(language)
  self.oprot:writeMessageBegin('getPaidCallBalanceList', TMessageType.CALL, self._seqid)
  local args = getPaidCallBalanceList_args:new{}
  args.language = language
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getPaidCallBalanceList(language)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getPaidCallBalanceList_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getPersonalInfos(requiredPersonalInfos)
  self:send_getPersonalInfos(requiredPersonalInfos)
  return self:recv_getPersonalInfos(requiredPersonalInfos)
end

function CallServiceClient:send_getPersonalInfos(requiredPersonalInfos)
  self.oprot:writeMessageBegin('getPersonalInfos', TMessageType.CALL, self._seqid)
  local args = getPersonalInfos_args:new{}
  args.requiredPersonalInfos = requiredPersonalInfos
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getPersonalInfos(requiredPersonalInfos)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getPersonalInfos_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getPrimaryClientsForChannel(userMids)
  self:send_getPrimaryClientsForChannel(userMids)
  return self:recv_getPrimaryClientsForChannel(userMids)
end

function CallServiceClient:send_getPrimaryClientsForChannel(userMids)
  self.oprot:writeMessageBegin('getPrimaryClientsForChannel', TMessageType.CALL, self._seqid)
  local args = getPrimaryClientsForChannel_args:new{}
  args.userMids = userMids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getPrimaryClientsForChannel(userMids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getPrimaryClientsForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:addBuddyToContact(buddyMid)
  self:send_addBuddyToContact(buddyMid)
  return self:recv_addBuddyToContact(buddyMid)
end

function CallServiceClient:send_addBuddyToContact(buddyMid)
  self.oprot:writeMessageBegin('addBuddyToContact', TMessageType.CALL, self._seqid)
  local args = addBuddyToContact_args:new{}
  args.buddyMid = buddyMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_addBuddyToContact(buddyMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = addBuddyToContact_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getGroupMemberMidsForAppPlatform(groupId)
  self:send_getGroupMemberMidsForAppPlatform(groupId)
  return self:recv_getGroupMemberMidsForAppPlatform(groupId)
end

function CallServiceClient:send_getGroupMemberMidsForAppPlatform(groupId)
  self.oprot:writeMessageBegin('getGroupMemberMidsForAppPlatform', TMessageType.CALL, self._seqid)
  local args = getGroupMemberMidsForAppPlatform_args:new{}
  args.groupId = groupId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getGroupMemberMidsForAppPlatform(groupId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getGroupMemberMidsForAppPlatform_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getUserLanguage()
  self:send_getUserLanguage()
  return self:recv_getUserLanguage()
end

function CallServiceClient:send_getUserLanguage()
  self.oprot:writeMessageBegin('getUserLanguage', TMessageType.CALL, self._seqid)
  local args = getUserLanguage_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getUserLanguage()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getUserLanguage_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:lookupPaidCall(dialedNumber, language, referer)
  self:send_lookupPaidCall(dialedNumber, language, referer)
  return self:recv_lookupPaidCall(dialedNumber, language, referer)
end

function CallServiceClient:send_lookupPaidCall(dialedNumber, language, referer)
  self.oprot:writeMessageBegin('lookupPaidCall', TMessageType.CALL, self._seqid)
  local args = lookupPaidCall_args:new{}
  args.dialedNumber = dialedNumber
  args.language = language
  args.referer = referer
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_lookupPaidCall(dialedNumber, language, referer)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = lookupPaidCall_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getExtendedProfile()
  self:send_getExtendedProfile()
  return self:recv_getExtendedProfile()
end

function CallServiceClient:send_getExtendedProfile()
  self.oprot:writeMessageBegin('getExtendedProfile', TMessageType.CALL, self._seqid)
  local args = getExtendedProfile_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getExtendedProfile()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getExtendedProfile_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getReverseCompactContacts(ids)
  self:send_getReverseCompactContacts(ids)
  return self:recv_getReverseCompactContacts(ids)
end

function CallServiceClient:send_getReverseCompactContacts(ids)
  self.oprot:writeMessageBegin('getReverseCompactContacts', TMessageType.CALL, self._seqid)
  local args = getReverseCompactContacts_args:new{}
  args.ids = ids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getReverseCompactContacts(ids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getReverseCompactContacts_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getPaidCallAdStatus()
  self:send_getPaidCallAdStatus()
  return self:recv_getPaidCallAdStatus()
end

function CallServiceClient:send_getPaidCallAdStatus()
  self.oprot:writeMessageBegin('getPaidCallAdStatus', TMessageType.CALL, self._seqid)
  local args = getPaidCallAdStatus_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getPaidCallAdStatus()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getPaidCallAdStatus_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:findContactByUseridWithoutAbuseBlockForChannel(userid)
  self:send_findContactByUseridWithoutAbuseBlockForChannel(userid)
  return self:recv_findContactByUseridWithoutAbuseBlockForChannel(userid)
end

function CallServiceClient:send_findContactByUseridWithoutAbuseBlockForChannel(userid)
  self.oprot:writeMessageBegin('findContactByUseridWithoutAbuseBlockForChannel', TMessageType.CALL, self._seqid)
  local args = findContactByUseridWithoutAbuseBlockForChannel_args:new{}
  args.userid = userid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_findContactByUseridWithoutAbuseBlockForChannel(userid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = findContactByUseridWithoutAbuseBlockForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getGroupMemberMids(groupId)
  self:send_getGroupMemberMids(groupId)
  return self:recv_getGroupMemberMids(groupId)
end

function CallServiceClient:send_getGroupMemberMids(groupId)
  self.oprot:writeMessageBegin('getGroupMemberMids', TMessageType.CALL, self._seqid)
  local args = getGroupMemberMids_args:new{}
  args.groupId = groupId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getGroupMemberMids(groupId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getGroupMemberMids_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:sendMessageWithoutRelationship(message)
  self:send_sendMessageWithoutRelationship(message)
  return self:recv_sendMessageWithoutRelationship(message)
end

function CallServiceClient:send_sendMessageWithoutRelationship(message)
  self.oprot:writeMessageBegin('sendMessageWithoutRelationship', TMessageType.CALL, self._seqid)
  local args = sendMessageWithoutRelationship_args:new{}
  args.message = message
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_sendMessageWithoutRelationship(message)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendMessageWithoutRelationship_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:displayBuddySubscriberCountInBulk(mids)
  self:send_displayBuddySubscriberCountInBulk(mids)
  return self:recv_displayBuddySubscriberCountInBulk(mids)
end

function CallServiceClient:send_displayBuddySubscriberCountInBulk(mids)
  self.oprot:writeMessageBegin('displayBuddySubscriberCountInBulk', TMessageType.CALL, self._seqid)
  local args = displayBuddySubscriberCountInBulk_args:new{}
  args.mids = mids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_displayBuddySubscriberCountInBulk(mids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = displayBuddySubscriberCountInBulk_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:lookupRoomMembers(roomId, mids)
  self:send_lookupRoomMembers(roomId, mids)
  return self:recv_lookupRoomMembers(roomId, mids)
end

function CallServiceClient:send_lookupRoomMembers(roomId, mids)
  self.oprot:writeMessageBegin('lookupRoomMembers', TMessageType.CALL, self._seqid)
  local args = lookupRoomMembers_args:new{}
  args.roomId = roomId
  args.mids = mids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_lookupRoomMembers(roomId, mids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = lookupRoomMembers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getFavoriteMidsForChannel()
  self:send_getFavoriteMidsForChannel()
  return self:recv_getFavoriteMidsForChannel()
end

function CallServiceClient:send_getFavoriteMidsForChannel()
  self.oprot:writeMessageBegin('getFavoriteMidsForChannel', TMessageType.CALL, self._seqid)
  local args = getFavoriteMidsForChannel_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getFavoriteMidsForChannel()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getFavoriteMidsForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getAllContactIdsForChannel()
  self:send_getAllContactIdsForChannel()
  return self:recv_getAllContactIdsForChannel()
end

function CallServiceClient:send_getAllContactIdsForChannel()
  self.oprot:writeMessageBegin('getAllContactIdsForChannel', TMessageType.CALL, self._seqid)
  local args = getAllContactIdsForChannel_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getAllContactIdsForChannel()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getAllContactIdsForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:displayBuddySubscriberCount()
  self:send_displayBuddySubscriberCount()
  return self:recv_displayBuddySubscriberCount()
end

function CallServiceClient:send_displayBuddySubscriberCount()
  self.oprot:writeMessageBegin('displayBuddySubscriberCount', TMessageType.CALL, self._seqid)
  local args = displayBuddySubscriberCount_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_displayBuddySubscriberCount()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = displayBuddySubscriberCount_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getProfileForChannel()
  self:send_getProfileForChannel()
  return self:recv_getProfileForChannel()
end

function CallServiceClient:send_getProfileForChannel()
  self.oprot:writeMessageBegin('getProfileForChannel', TMessageType.CALL, self._seqid)
  local args = getProfileForChannel_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getProfileForChannel()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getProfileForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getUserTickets(userMids)
  self:send_getUserTickets(userMids)
  return self:recv_getUserTickets(userMids)
end

function CallServiceClient:send_getUserTickets(userMids)
  self.oprot:writeMessageBegin('getUserTickets', TMessageType.CALL, self._seqid)
  local args = getUserTickets_args:new{}
  args.userMids = userMids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getUserTickets(userMids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getUserTickets_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getOAFriendMids()
  self:send_getOAFriendMids()
  return self:recv_getOAFriendMids()
end

function CallServiceClient:send_getOAFriendMids()
  self.oprot:writeMessageBegin('getOAFriendMids', TMessageType.CALL, self._seqid)
  local args = getOAFriendMids_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getOAFriendMids()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getOAFriendMids_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:searchPaidCallUserRate(countryCode, language)
  self:send_searchPaidCallUserRate(countryCode, language)
  return self:recv_searchPaidCallUserRate(countryCode, language)
end

function CallServiceClient:send_searchPaidCallUserRate(countryCode, language)
  self.oprot:writeMessageBegin('searchPaidCallUserRate', TMessageType.CALL, self._seqid)
  local args = searchPaidCallUserRate_args:new{}
  args.countryCode = countryCode
  args.language = language
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_searchPaidCallUserRate(countryCode, language)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = searchPaidCallUserRate_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getJoinedGroupIdsForChannel()
  self:send_getJoinedGroupIdsForChannel()
  return self:recv_getJoinedGroupIdsForChannel()
end

function CallServiceClient:send_getJoinedGroupIdsForChannel()
  self.oprot:writeMessageBegin('getJoinedGroupIdsForChannel', TMessageType.CALL, self._seqid)
  local args = getJoinedGroupIdsForChannel_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getJoinedGroupIdsForChannel()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getJoinedGroupIdsForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:acquireGroupCallRoute(chatMid, mediaType)
  self:send_acquireGroupCallRoute(chatMid, mediaType)
  return self:recv_acquireGroupCallRoute(chatMid, mediaType)
end

function CallServiceClient:send_acquireGroupCallRoute(chatMid, mediaType)
  self.oprot:writeMessageBegin('acquireGroupCallRoute', TMessageType.CALL, self._seqid)
  local args = acquireGroupCallRoute_args:new{}
  args.chatMid = chatMid
  args.mediaType = mediaType
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_acquireGroupCallRoute(chatMid, mediaType)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = acquireGroupCallRoute_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getUserMidsWhoAddedMe()
  self:send_getUserMidsWhoAddedMe()
  return self:recv_getUserMidsWhoAddedMe()
end

function CallServiceClient:send_getUserMidsWhoAddedMe()
  self.oprot:writeMessageBegin('getUserMidsWhoAddedMe', TMessageType.CALL, self._seqid)
  local args = getUserMidsWhoAddedMe_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getUserMidsWhoAddedMe()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getUserMidsWhoAddedMe_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getIdentityCredential()
  self:send_getIdentityCredential()
  return self:recv_getIdentityCredential()
end

function CallServiceClient:send_getIdentityCredential()
  self.oprot:writeMessageBegin('getIdentityCredential', TMessageType.CALL, self._seqid)
  local args = getIdentityCredential_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getIdentityCredential()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getIdentityCredential_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:addOperationForChannel(opType, param1, param2, param3)
  self:send_addOperationForChannel(opType, param1, param2, param3)
  self:recv_addOperationForChannel(opType, param1, param2, param3)
end

function CallServiceClient:send_addOperationForChannel(opType, param1, param2, param3)
  self.oprot:writeMessageBegin('addOperationForChannel', TMessageType.CALL, self._seqid)
  local args = addOperationForChannel_args:new{}
  args.opType = opType
  args.param1 = param1
  args.param2 = param2
  args.param3 = param3
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_addOperationForChannel(opType, param1, param2, param3)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = addOperationForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function CallServiceClient:getSimpleChannelContacts(ids, statusSticonFallbackDisabled)
  self:send_getSimpleChannelContacts(ids, statusSticonFallbackDisabled)
  return self:recv_getSimpleChannelContacts(ids, statusSticonFallbackDisabled)
end

function CallServiceClient:send_getSimpleChannelContacts(ids, statusSticonFallbackDisabled)
  self.oprot:writeMessageBegin('getSimpleChannelContacts', TMessageType.CALL, self._seqid)
  local args = getSimpleChannelContacts_args:new{}
  args.ids = ids
  args.statusSticonFallbackDisabled = statusSticonFallbackDisabled
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getSimpleChannelContacts(ids, statusSticonFallbackDisabled)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSimpleChannelContacts_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CallServiceClient:getUserLastSentMessageTimeStamp(mid)
  self:send_getUserLastSentMessageTimeStamp(mid)
  return self:recv_getUserLastSentMessageTimeStamp(mid)
end

function CallServiceClient:send_getUserLastSentMessageTimeStamp(mid)
  self.oprot:writeMessageBegin('getUserLastSentMessageTimeStamp', TMessageType.CALL, self._seqid)
  local args = getUserLastSentMessageTimeStamp_args:new{}
  args.mid = mid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CallServiceClient:recv_getUserLastSentMessageTimeStamp(mid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getUserLastSentMessageTimeStamp_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
CallServiceIface = __TObject:new{
  __type = 'CallServiceIface'
}


CallServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'CallServiceProcessor'
})

function CallServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function CallServiceProcessor:process_getUserStatus(seqid, iprot, oprot, server_ctx)
  local args = getUserStatus_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getUserStatus_result:new{}
  local status, res = pcall(self.handler.getUserStatus, self.handler, args.mid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getUserStatus', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_updateProfileAttributeForChannel(seqid, iprot, oprot, server_ctx)
  local args = updateProfileAttributeForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateProfileAttributeForChannel_result:new{}
  local status, res = pcall(self.handler.updateProfileAttributeForChannel, self.handler, args.profileAttribute, args.value)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateProfileAttributeForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_updateExtendedProfileAttribute(seqid, iprot, oprot, server_ctx)
  local args = updateExtendedProfileAttribute_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateExtendedProfileAttribute_result:new{}
  local status, res = pcall(self.handler.updateExtendedProfileAttribute, self.handler, args.attr, args.extendedProfile)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateExtendedProfileAttribute', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getAllSimpleChannelContacts(seqid, iprot, oprot, server_ctx)
  local args = getAllSimpleChannelContacts_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getAllSimpleChannelContacts_result:new{}
  local status, res = pcall(self.handler.getAllSimpleChannelContacts, self.handler, args.statusSticonFallbackDisabled)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getAllSimpleChannelContacts', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getUserIdentities(seqid, iprot, oprot, server_ctx)
  local args = getUserIdentities_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getUserIdentities_result:new{}
  local status, res = pcall(self.handler.getUserIdentities, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getUserIdentities', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_markPaidCallAd(seqid, iprot, oprot, server_ctx)
  local args = markPaidCallAd_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = markPaidCallAd_result:new{}
  local status, res = pcall(self.handler.markPaidCallAd, self.handler, args.dialedNumber, args.language, args.disableCallerId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('markPaidCallAd', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_isGroupMember(seqid, iprot, oprot, server_ctx)
  local args = isGroupMember_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = isGroupMember_result:new{}
  local status, res = pcall(self.handler.isGroupMember, self.handler, args.groupId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('isGroupMember', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getPhoneInfoFromPhoneNumber(seqid, iprot, oprot, server_ctx)
  local args = getPhoneInfoFromPhoneNumber_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getPhoneInfoFromPhoneNumber_result:new{}
  local status, res = pcall(self.handler.getPhoneInfoFromPhoneNumber, self.handler, args.region, args.phoneNumber)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getPhoneInfoFromPhoneNumber', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_redeemPaidCallVoucher(seqid, iprot, oprot, server_ctx)
  local args = redeemPaidCallVoucher_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = redeemPaidCallVoucher_result:new{}
  local status, res = pcall(self.handler.redeemPaidCallVoucher, self.handler, args.serial, args.language)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('redeemPaidCallVoucher', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getPreferredDisplayName(seqid, iprot, oprot, server_ctx)
  local args = getPreferredDisplayName_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getPreferredDisplayName_result:new{}
  local status, res = pcall(self.handler.getPreferredDisplayName, self.handler, args.mids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getPreferredDisplayName', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getContactsForChannel(seqid, iprot, oprot, server_ctx)
  local args = getContactsForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getContactsForChannel_result:new{}
  local status, res = pcall(self.handler.getContactsForChannel, self.handler, args.ids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getContactsForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getCallCreditProducts(seqid, iprot, oprot, server_ctx)
  local args = getCallCreditProducts_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getCallCreditProducts_result:new{}
  local status, res = pcall(self.handler.getCallCreditProducts, self.handler, args.appStoreCode, args.pgCode, args.country, args.language)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getCallCreditProducts', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getCompactContacts(seqid, iprot, oprot, server_ctx)
  local args = getCompactContacts_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getCompactContacts_result:new{}
  local status, res = pcall(self.handler.getCompactContacts, self.handler, args.lastModifiedTimestamp)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getCompactContacts', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_notifyNotiCenterEvent(seqid, iprot, oprot, server_ctx)
  local args = notifyNotiCenterEvent_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = notifyNotiCenterEvent_result:new{}
  local status, res = pcall(self.handler.notifyNotiCenterEvent, self.handler, args.event)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('notifyNotiCenterEvent', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_isInContact(seqid, iprot, oprot, server_ctx)
  local args = isInContact_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = isInContact_result:new{}
  local status, res = pcall(self.handler.isInContact, self.handler, args.mid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('isInContact', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_lookupGroupMembers(seqid, iprot, oprot, server_ctx)
  local args = lookupGroupMembers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = lookupGroupMembers_result:new{}
  local status, res = pcall(self.handler.lookupGroupMembers, self.handler, args.groupId, args.mids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('lookupGroupMembers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getRoomInformation(seqid, iprot, oprot, server_ctx)
  local args = getRoomInformation_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getRoomInformation_result:new{}
  local status, res = pcall(self.handler.getRoomInformation, self.handler, args.roomMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getRoomInformation', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getGroupCall(seqid, iprot, oprot, server_ctx)
  local args = getGroupCall_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getGroupCall_result:new{}
  local status, res = pcall(self.handler.getGroupCall, self.handler, args.chatMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getGroupCall', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_isAllowSecondaryDeviceLogin(seqid, iprot, oprot, server_ctx)
  local args = isAllowSecondaryDeviceLogin_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = isAllowSecondaryDeviceLogin_result:new{}
  local status, res = pcall(self.handler.isAllowSecondaryDeviceLogin, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('isAllowSecondaryDeviceLogin', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getPrimaryClientForChannel(seqid, iprot, oprot, server_ctx)
  local args = getPrimaryClientForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getPrimaryClientForChannel_result:new{}
  local status, res = pcall(self.handler.getPrimaryClientForChannel, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getPrimaryClientForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_createRoomWithBuddy(seqid, iprot, oprot, server_ctx)
  local args = createRoomWithBuddy_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = createRoomWithBuddy_result:new{}
  local status, res = pcall(self.handler.createRoomWithBuddy, self.handler, args.reqSeq, args.buddyMid, args.contactIds)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('createRoomWithBuddy', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getDisplayName(seqid, iprot, oprot, server_ctx)
  local args = getDisplayName_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getDisplayName_result:new{}
  local status, res = pcall(self.handler.getDisplayName, self.handler, args.mid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getDisplayName', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getPaidCallMetadata(seqid, iprot, oprot, server_ctx)
  local args = getPaidCallMetadata_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getPaidCallMetadata_result:new{}
  local status, res = pcall(self.handler.getPaidCallMetadata, self.handler, args.language)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getPaidCallMetadata', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getMid(seqid, iprot, oprot, server_ctx)
  local args = getMid_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getMid_result:new{}
  local status, res = pcall(self.handler.getMid, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getMid', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getUserCountryForBilling(seqid, iprot, oprot, server_ctx)
  local args = getUserCountryForBilling_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getUserCountryForBilling_result:new{}
  local status, res = pcall(self.handler.getUserCountryForBilling, self.handler, args.country, args.remoteIp)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getUserCountryForBilling', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getFavoriteGroupIdsForChannel(seqid, iprot, oprot, server_ctx)
  local args = getFavoriteGroupIdsForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getFavoriteGroupIdsForChannel_result:new{}
  local status, res = pcall(self.handler.getFavoriteGroupIdsForChannel, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getFavoriteGroupIdsForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getPaidCallHistory(seqid, iprot, oprot, server_ctx)
  local args = getPaidCallHistory_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getPaidCallHistory_result:new{}
  local status, res = pcall(self.handler.getPaidCallHistory, self.handler, args.start, args.size, args.language)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getPaidCallHistory', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_sendPinCodeOperation(seqid, iprot, oprot, server_ctx)
  local args = sendPinCodeOperation_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendPinCodeOperation_result:new{}
  local status, res = pcall(self.handler.sendPinCodeOperation, self.handler, args.verifier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendPinCodeOperation', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_inviteIntoGroupCall(seqid, iprot, oprot, server_ctx)
  local args = inviteIntoGroupCall_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = inviteIntoGroupCall_result:new{}
  local status, res = pcall(self.handler.inviteIntoGroupCall, self.handler, args.chatMid, args.memberMids, args.mediaType)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('inviteIntoGroupCall', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getFriendMids(seqid, iprot, oprot, server_ctx)
  local args = getFriendMids_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getFriendMids_result:new{}
  local status, res = pcall(self.handler.getFriendMids, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getFriendMids', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getMetaProfile(seqid, iprot, oprot, server_ctx)
  local args = getMetaProfile_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getMetaProfile_result:new{}
  local status, res = pcall(self.handler.getMetaProfile, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getMetaProfile', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_sendMessageForChannel(seqid, iprot, oprot, server_ctx)
  local args = sendMessageForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendMessageForChannel_result:new{}
  local status, res = pcall(self.handler.sendMessageForChannel, self.handler, args.message)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendMessageForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_activeBuddySubscriberCount(seqid, iprot, oprot, server_ctx)
  local args = activeBuddySubscriberCount_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = activeBuddySubscriberCount_result:new{}
  local status, res = pcall(self.handler.activeBuddySubscriberCount, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('activeBuddySubscriberCount', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getCallCreditPurchaseHistory(seqid, iprot, oprot, server_ctx)
  local args = getCallCreditPurchaseHistory_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getCallCreditPurchaseHistory_result:new{}
  local status, res = pcall(self.handler.getCallCreditPurchaseHistory, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getCallCreditPurchaseHistory', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_isRoomMember(seqid, iprot, oprot, server_ctx)
  local args = isRoomMember_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = isRoomMember_result:new{}
  local status, res = pcall(self.handler.isRoomMember, self.handler, args.roomId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('isRoomMember', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_sendSystemOAMessage(seqid, iprot, oprot, server_ctx)
  local args = sendSystemOAMessage_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendSystemOAMessage_result:new{}
  local status, res = pcall(self.handler.sendSystemOAMessage, self.handler, args.message)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendSystemOAMessage', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_acquirePaidCallRoute(seqid, iprot, oprot, server_ctx)
  local args = acquirePaidCallRoute_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = acquirePaidCallRoute_result:new{}
  local status, res = pcall(self.handler.acquirePaidCallRoute, self.handler, args.paidCallType, args.dialedNumber, args.language, args.networkCode, args.disableCallerId, args.referer, args.adSessionId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('acquirePaidCallRoute', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getGroupsForChannel(seqid, iprot, oprot, server_ctx)
  local args = getGroupsForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getGroupsForChannel_result:new{}
  local status, res = pcall(self.handler.getGroupsForChannel, self.handler, args.groupIds)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getGroupsForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getUserCreateTime(seqid, iprot, oprot, server_ctx)
  local args = getUserCreateTime_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getUserCreateTime_result:new{}
  local status, res = pcall(self.handler.getUserCreateTime, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getUserCreateTime', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_registerChannelCP(seqid, iprot, oprot, server_ctx)
  local args = registerChannelCP_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = registerChannelCP_result:new{}
  local status, res = pcall(self.handler.registerChannelCP, self.handler, args.cpId, args.registerPassword)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('registerChannelCP', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_reserveCallCreditPurchase(seqid, iprot, oprot, server_ctx)
  local args = reserveCallCreditPurchase_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = reserveCallCreditPurchase_result:new{}
  local status, res = pcall(self.handler.reserveCallCreditPurchase, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('reserveCallCreditPurchase', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_acquirePaidCallCurrencyExchangeRate(seqid, iprot, oprot, server_ctx)
  local args = acquirePaidCallCurrencyExchangeRate_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = acquirePaidCallCurrencyExchangeRate_result:new{}
  local status, res = pcall(self.handler.acquirePaidCallCurrencyExchangeRate, self.handler, args.language)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('acquirePaidCallCurrencyExchangeRate', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getRoomMemberMidsForAppPlatform(seqid, iprot, oprot, server_ctx)
  local args = getRoomMemberMidsForAppPlatform_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getRoomMemberMidsForAppPlatform_result:new{}
  local status, res = pcall(self.handler.getRoomMemberMidsForAppPlatform, self.handler, args.roomId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getRoomMemberMidsForAppPlatform', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getPaidCallBalanceList(seqid, iprot, oprot, server_ctx)
  local args = getPaidCallBalanceList_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getPaidCallBalanceList_result:new{}
  local status, res = pcall(self.handler.getPaidCallBalanceList, self.handler, args.language)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getPaidCallBalanceList', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getPersonalInfos(seqid, iprot, oprot, server_ctx)
  local args = getPersonalInfos_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getPersonalInfos_result:new{}
  local status, res = pcall(self.handler.getPersonalInfos, self.handler, args.requiredPersonalInfos)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getPersonalInfos', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getPrimaryClientsForChannel(seqid, iprot, oprot, server_ctx)
  local args = getPrimaryClientsForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getPrimaryClientsForChannel_result:new{}
  local status, res = pcall(self.handler.getPrimaryClientsForChannel, self.handler, args.userMids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getPrimaryClientsForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_addBuddyToContact(seqid, iprot, oprot, server_ctx)
  local args = addBuddyToContact_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = addBuddyToContact_result:new{}
  local status, res = pcall(self.handler.addBuddyToContact, self.handler, args.buddyMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('addBuddyToContact', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getGroupMemberMidsForAppPlatform(seqid, iprot, oprot, server_ctx)
  local args = getGroupMemberMidsForAppPlatform_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getGroupMemberMidsForAppPlatform_result:new{}
  local status, res = pcall(self.handler.getGroupMemberMidsForAppPlatform, self.handler, args.groupId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getGroupMemberMidsForAppPlatform', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getUserLanguage(seqid, iprot, oprot, server_ctx)
  local args = getUserLanguage_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getUserLanguage_result:new{}
  local status, res = pcall(self.handler.getUserLanguage, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getUserLanguage', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_lookupPaidCall(seqid, iprot, oprot, server_ctx)
  local args = lookupPaidCall_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = lookupPaidCall_result:new{}
  local status, res = pcall(self.handler.lookupPaidCall, self.handler, args.dialedNumber, args.language, args.referer)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('lookupPaidCall', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getExtendedProfile(seqid, iprot, oprot, server_ctx)
  local args = getExtendedProfile_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getExtendedProfile_result:new{}
  local status, res = pcall(self.handler.getExtendedProfile, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getExtendedProfile', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getReverseCompactContacts(seqid, iprot, oprot, server_ctx)
  local args = getReverseCompactContacts_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getReverseCompactContacts_result:new{}
  local status, res = pcall(self.handler.getReverseCompactContacts, self.handler, args.ids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getReverseCompactContacts', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getPaidCallAdStatus(seqid, iprot, oprot, server_ctx)
  local args = getPaidCallAdStatus_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getPaidCallAdStatus_result:new{}
  local status, res = pcall(self.handler.getPaidCallAdStatus, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getPaidCallAdStatus', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_findContactByUseridWithoutAbuseBlockForChannel(seqid, iprot, oprot, server_ctx)
  local args = findContactByUseridWithoutAbuseBlockForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = findContactByUseridWithoutAbuseBlockForChannel_result:new{}
  local status, res = pcall(self.handler.findContactByUseridWithoutAbuseBlockForChannel, self.handler, args.userid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('findContactByUseridWithoutAbuseBlockForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getGroupMemberMids(seqid, iprot, oprot, server_ctx)
  local args = getGroupMemberMids_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getGroupMemberMids_result:new{}
  local status, res = pcall(self.handler.getGroupMemberMids, self.handler, args.groupId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getGroupMemberMids', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_sendMessageWithoutRelationship(seqid, iprot, oprot, server_ctx)
  local args = sendMessageWithoutRelationship_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendMessageWithoutRelationship_result:new{}
  local status, res = pcall(self.handler.sendMessageWithoutRelationship, self.handler, args.message)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendMessageWithoutRelationship', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_displayBuddySubscriberCountInBulk(seqid, iprot, oprot, server_ctx)
  local args = displayBuddySubscriberCountInBulk_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = displayBuddySubscriberCountInBulk_result:new{}
  local status, res = pcall(self.handler.displayBuddySubscriberCountInBulk, self.handler, args.mids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('displayBuddySubscriberCountInBulk', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_lookupRoomMembers(seqid, iprot, oprot, server_ctx)
  local args = lookupRoomMembers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = lookupRoomMembers_result:new{}
  local status, res = pcall(self.handler.lookupRoomMembers, self.handler, args.roomId, args.mids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('lookupRoomMembers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getFavoriteMidsForChannel(seqid, iprot, oprot, server_ctx)
  local args = getFavoriteMidsForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getFavoriteMidsForChannel_result:new{}
  local status, res = pcall(self.handler.getFavoriteMidsForChannel, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getFavoriteMidsForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getAllContactIdsForChannel(seqid, iprot, oprot, server_ctx)
  local args = getAllContactIdsForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getAllContactIdsForChannel_result:new{}
  local status, res = pcall(self.handler.getAllContactIdsForChannel, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getAllContactIdsForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_displayBuddySubscriberCount(seqid, iprot, oprot, server_ctx)
  local args = displayBuddySubscriberCount_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = displayBuddySubscriberCount_result:new{}
  local status, res = pcall(self.handler.displayBuddySubscriberCount, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('displayBuddySubscriberCount', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getProfileForChannel(seqid, iprot, oprot, server_ctx)
  local args = getProfileForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getProfileForChannel_result:new{}
  local status, res = pcall(self.handler.getProfileForChannel, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getProfileForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getUserTickets(seqid, iprot, oprot, server_ctx)
  local args = getUserTickets_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getUserTickets_result:new{}
  local status, res = pcall(self.handler.getUserTickets, self.handler, args.userMids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getUserTickets', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getOAFriendMids(seqid, iprot, oprot, server_ctx)
  local args = getOAFriendMids_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getOAFriendMids_result:new{}
  local status, res = pcall(self.handler.getOAFriendMids, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getOAFriendMids', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_searchPaidCallUserRate(seqid, iprot, oprot, server_ctx)
  local args = searchPaidCallUserRate_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = searchPaidCallUserRate_result:new{}
  local status, res = pcall(self.handler.searchPaidCallUserRate, self.handler, args.countryCode, args.language)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('searchPaidCallUserRate', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getJoinedGroupIdsForChannel(seqid, iprot, oprot, server_ctx)
  local args = getJoinedGroupIdsForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getJoinedGroupIdsForChannel_result:new{}
  local status, res = pcall(self.handler.getJoinedGroupIdsForChannel, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getJoinedGroupIdsForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_acquireGroupCallRoute(seqid, iprot, oprot, server_ctx)
  local args = acquireGroupCallRoute_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = acquireGroupCallRoute_result:new{}
  local status, res = pcall(self.handler.acquireGroupCallRoute, self.handler, args.chatMid, args.mediaType)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('acquireGroupCallRoute', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getUserMidsWhoAddedMe(seqid, iprot, oprot, server_ctx)
  local args = getUserMidsWhoAddedMe_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getUserMidsWhoAddedMe_result:new{}
  local status, res = pcall(self.handler.getUserMidsWhoAddedMe, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getUserMidsWhoAddedMe', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getIdentityCredential(seqid, iprot, oprot, server_ctx)
  local args = getIdentityCredential_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getIdentityCredential_result:new{}
  local status, res = pcall(self.handler.getIdentityCredential, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getIdentityCredential', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_addOperationForChannel(seqid, iprot, oprot, server_ctx)
  local args = addOperationForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = addOperationForChannel_result:new{}
  local status, res = pcall(self.handler.addOperationForChannel, self.handler, args.opType, args.param1, args.param2, args.param3)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('addOperationForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getSimpleChannelContacts(seqid, iprot, oprot, server_ctx)
  local args = getSimpleChannelContacts_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSimpleChannelContacts_result:new{}
  local status, res = pcall(self.handler.getSimpleChannelContacts, self.handler, args.ids, args.statusSticonFallbackDisabled)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSimpleChannelContacts', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CallServiceProcessor:process_getUserLastSentMessageTimeStamp(seqid, iprot, oprot, server_ctx)
  local args = getUserLastSentMessageTimeStamp_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getUserLastSentMessageTimeStamp_result:new{}
  local status, res = pcall(self.handler.getUserLastSentMessageTimeStamp, self.handler, args.mid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getUserLastSentMessageTimeStamp', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

getUserStatus_args = __TObject:new{
  mid
}

function getUserStatus_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserStatus_args:write(oprot)
  oprot:writeStructBegin('getUserStatus_args')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserStatus_result = __TObject:new{
  success,
  e
}

function getUserStatus_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserStatus_result:write(oprot)
  oprot:writeStructBegin('getUserStatus_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateProfileAttributeForChannel_args = __TObject:new{
  profileAttribute,
  value
}

function updateProfileAttributeForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.profileAttribute = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.value = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateProfileAttributeForChannel_args:write(oprot)
  oprot:writeStructBegin('updateProfileAttributeForChannel_args')
  if self.profileAttribute ~= nil then
    oprot:writeFieldBegin('profileAttribute', TType.I32, 2)
    oprot:writeI32(self.profileAttribute)
    oprot:writeFieldEnd()
  end
  if self.value ~= nil then
    oprot:writeFieldBegin('value', TType.STRING, 3)
    oprot:writeString(self.value)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateProfileAttributeForChannel_result = __TObject:new{
  e
}

function updateProfileAttributeForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateProfileAttributeForChannel_result:write(oprot)
  oprot:writeStructBegin('updateProfileAttributeForChannel_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateExtendedProfileAttribute_args = __TObject:new{
  attr,
  extendedProfile
}

function updateExtendedProfileAttribute_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.attr = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.extendedProfile = ExtendedProfile:new{}
        self.extendedProfile:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateExtendedProfileAttribute_args:write(oprot)
  oprot:writeStructBegin('updateExtendedProfileAttribute_args')
  if self.attr ~= nil then
    oprot:writeFieldBegin('attr', TType.I32, 1)
    oprot:writeI32(self.attr)
    oprot:writeFieldEnd()
  end
  if self.extendedProfile ~= nil then
    oprot:writeFieldBegin('extendedProfile', TType.STRUCT, 2)
    self.extendedProfile:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateExtendedProfileAttribute_result = __TObject:new{
  e
}

function updateExtendedProfileAttribute_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateExtendedProfileAttribute_result:write(oprot)
  oprot:writeStructBegin('updateExtendedProfileAttribute_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getAllSimpleChannelContacts_args = __TObject:new{
  statusSticonFallbackDisabled
}

function getAllSimpleChannelContacts_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.statusSticonFallbackDisabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getAllSimpleChannelContacts_args:write(oprot)
  oprot:writeStructBegin('getAllSimpleChannelContacts_args')
  if self.statusSticonFallbackDisabled ~= nil then
    oprot:writeFieldBegin('statusSticonFallbackDisabled', TType.BOOL, 1)
    oprot:writeBool(self.statusSticonFallbackDisabled)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getAllSimpleChannelContacts_result = __TObject:new{
  success,
  e
}

function getAllSimpleChannelContacts_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1953, _size1950 = iprot:readListBegin()
        for _i=1,_size1950 do
          local _elem1954 = SimpleChannelContact:new{}
          _elem1954:read(iprot)
          table.insert(self.success, _elem1954)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getAllSimpleChannelContacts_result:write(oprot)
  oprot:writeStructBegin('getAllSimpleChannelContacts_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter1955 in ipairs(self.success) do
      iter1955:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserIdentities_args = __TObject:new{

}

function getUserIdentities_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserIdentities_args:write(oprot)
  oprot:writeStructBegin('getUserIdentities_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserIdentities_result = __TObject:new{
  success,
  e
}

function getUserIdentities_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.MAP then
        self.success = {}
        local _ktype1957, _vtype1958, _size1956 = iprot:readMapBegin() 
        for _i=1,_size1956 do
          local _key1960 = iprot:readI32()
          local _val1961 = iprot:readString()
          self.success[_key1960] = _val1961
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserIdentities_result:write(oprot)
  oprot:writeStructBegin('getUserIdentities_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.MAP, 0)
    oprot:writeMapBegin(TType.I32, TType.STRING, ttable_size(self.success))
    for kiter1962,viter1963 in pairs(self.success) do
      oprot:writeI32(kiter1962)
      oprot:writeString(viter1963)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

markPaidCallAd_args = __TObject:new{
  dialedNumber,
  language,
  disableCallerId
}

function markPaidCallAd_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.dialedNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.disableCallerId = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function markPaidCallAd_args:write(oprot)
  oprot:writeStructBegin('markPaidCallAd_args')
  if self.dialedNumber ~= nil then
    oprot:writeFieldBegin('dialedNumber', TType.STRING, 2)
    oprot:writeString(self.dialedNumber)
    oprot:writeFieldEnd()
  end
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 3)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  if self.disableCallerId ~= nil then
    oprot:writeFieldBegin('disableCallerId', TType.BOOL, 4)
    oprot:writeBool(self.disableCallerId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

markPaidCallAd_result = __TObject:new{
  success,
  e
}

function markPaidCallAd_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = PaidCallDialing:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function markPaidCallAd_result:write(oprot)
  oprot:writeStructBegin('markPaidCallAd_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

isGroupMember_args = __TObject:new{
  groupId
}

function isGroupMember_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.groupId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function isGroupMember_args:write(oprot)
  oprot:writeStructBegin('isGroupMember_args')
  if self.groupId ~= nil then
    oprot:writeFieldBegin('groupId', TType.STRING, 1)
    oprot:writeString(self.groupId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

isGroupMember_result = __TObject:new{
  success,
  e
}

function isGroupMember_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function isGroupMember_result:write(oprot)
  oprot:writeStructBegin('isGroupMember_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPhoneInfoFromPhoneNumber_args = __TObject:new{
  region,
  phoneNumber
}

function getPhoneInfoFromPhoneNumber_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.region = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.phoneNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPhoneInfoFromPhoneNumber_args:write(oprot)
  oprot:writeStructBegin('getPhoneInfoFromPhoneNumber_args')
  if self.region ~= nil then
    oprot:writeFieldBegin('region', TType.STRING, 1)
    oprot:writeString(self.region)
    oprot:writeFieldEnd()
  end
  if self.phoneNumber ~= nil then
    oprot:writeFieldBegin('phoneNumber', TType.STRING, 2)
    oprot:writeString(self.phoneNumber)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPhoneInfoFromPhoneNumber_result = __TObject:new{
  success,
  e
}

function getPhoneInfoFromPhoneNumber_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = PhoneInfoForChannel:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPhoneInfoFromPhoneNumber_result:write(oprot)
  oprot:writeStructBegin('getPhoneInfoFromPhoneNumber_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

redeemPaidCallVoucher_args = __TObject:new{
  serial,
  language
}

function redeemPaidCallVoucher_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.serial = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function redeemPaidCallVoucher_args:write(oprot)
  oprot:writeStructBegin('redeemPaidCallVoucher_args')
  if self.serial ~= nil then
    oprot:writeFieldBegin('serial', TType.STRING, 2)
    oprot:writeString(self.serial)
    oprot:writeFieldEnd()
  end
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 3)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

redeemPaidCallVoucher_result = __TObject:new{
  success,
  e
}

function redeemPaidCallVoucher_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = PaidCallRedeemResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function redeemPaidCallVoucher_result:write(oprot)
  oprot:writeStructBegin('redeemPaidCallVoucher_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPreferredDisplayName_args = __TObject:new{
  mids
}

function getPreferredDisplayName_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.mids = {}
        local _etype1967, _size1964 = iprot:readListBegin()
        for _i=1,_size1964 do
          local _elem1968 = iprot:readString()
          table.insert(self.mids, _elem1968)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPreferredDisplayName_args:write(oprot)
  oprot:writeStructBegin('getPreferredDisplayName_args')
  if self.mids ~= nil then
    oprot:writeFieldBegin('mids', TType.LIST, 1)
    oprot:writeListBegin(TType.STRING, #self.mids)
    for _,iter1969 in ipairs(self.mids) do
      oprot:writeString(iter1969)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPreferredDisplayName_result = __TObject:new{
  success,
  e
}

function getPreferredDisplayName_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.MAP then
        self.success = {}
        local _ktype1971, _vtype1972, _size1970 = iprot:readMapBegin() 
        for _i=1,_size1970 do
          local _key1974 = iprot:readString()
          local _val1975 = iprot:readString()
          self.success[_key1974] = _val1975
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPreferredDisplayName_result:write(oprot)
  oprot:writeStructBegin('getPreferredDisplayName_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.MAP, 0)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.success))
    for kiter1976,viter1977 in pairs(self.success) do
      oprot:writeString(kiter1976)
      oprot:writeString(viter1977)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getContactsForChannel_args = __TObject:new{
  ids
}

function getContactsForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.ids = {}
        local _etype1981, _size1978 = iprot:readListBegin()
        for _i=1,_size1978 do
          local _elem1982 = iprot:readString()
          table.insert(self.ids, _elem1982)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getContactsForChannel_args:write(oprot)
  oprot:writeStructBegin('getContactsForChannel_args')
  if self.ids ~= nil then
    oprot:writeFieldBegin('ids', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.ids)
    for _,iter1983 in ipairs(self.ids) do
      oprot:writeString(iter1983)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getContactsForChannel_result = __TObject:new{
  success,
  e
}

function getContactsForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1987, _size1984 = iprot:readListBegin()
        for _i=1,_size1984 do
          local _elem1988 = Contact:new{}
          _elem1988:read(iprot)
          table.insert(self.success, _elem1988)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getContactsForChannel_result:write(oprot)
  oprot:writeStructBegin('getContactsForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter1989 in ipairs(self.success) do
      iter1989:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getCallCreditProducts_args = __TObject:new{
  appStoreCode,
  pgCode,
  country,
  language
}

function getCallCreditProducts_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.appStoreCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.pgCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.country = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCallCreditProducts_args:write(oprot)
  oprot:writeStructBegin('getCallCreditProducts_args')
  if self.appStoreCode ~= nil then
    oprot:writeFieldBegin('appStoreCode', TType.I32, 2)
    oprot:writeI32(self.appStoreCode)
    oprot:writeFieldEnd()
  end
  if self.pgCode ~= nil then
    oprot:writeFieldBegin('pgCode', TType.I32, 3)
    oprot:writeI32(self.pgCode)
    oprot:writeFieldEnd()
  end
  if self.country ~= nil then
    oprot:writeFieldBegin('country', TType.STRING, 4)
    oprot:writeString(self.country)
    oprot:writeFieldEnd()
  end
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 5)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getCallCreditProducts_result = __TObject:new{
  success,
  e
}

function getCallCreditProducts_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1993, _size1990 = iprot:readListBegin()
        for _i=1,_size1990 do
          local _elem1994 = CoinProductItem:new{}
          _elem1994:read(iprot)
          table.insert(self.success, _elem1994)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCallCreditProducts_result:write(oprot)
  oprot:writeStructBegin('getCallCreditProducts_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter1995 in ipairs(self.success) do
      iter1995:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getCompactContacts_args = __TObject:new{
  lastModifiedTimestamp
}

function getCompactContacts_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.lastModifiedTimestamp = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCompactContacts_args:write(oprot)
  oprot:writeStructBegin('getCompactContacts_args')
  if self.lastModifiedTimestamp ~= nil then
    oprot:writeFieldBegin('lastModifiedTimestamp', TType.I64, 2)
    oprot:writeI64(self.lastModifiedTimestamp)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getCompactContacts_result = __TObject:new{
  success,
  e
}

function getCompactContacts_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1999, _size1996 = iprot:readListBegin()
        for _i=1,_size1996 do
          local _elem2000 = CompactContact:new{}
          _elem2000:read(iprot)
          table.insert(self.success, _elem2000)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCompactContacts_result:write(oprot)
  oprot:writeStructBegin('getCompactContacts_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter2001 in ipairs(self.success) do
      iter2001:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

notifyNotiCenterEvent_args = __TObject:new{
  event
}

function notifyNotiCenterEvent_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.event = NotiCenterEventData:new{}
        self.event:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function notifyNotiCenterEvent_args:write(oprot)
  oprot:writeStructBegin('notifyNotiCenterEvent_args')
  if self.event ~= nil then
    oprot:writeFieldBegin('event', TType.STRUCT, 1)
    self.event:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

notifyNotiCenterEvent_result = __TObject:new{
  e
}

function notifyNotiCenterEvent_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function notifyNotiCenterEvent_result:write(oprot)
  oprot:writeStructBegin('notifyNotiCenterEvent_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

isInContact_args = __TObject:new{
  mid
}

function isInContact_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function isInContact_args:write(oprot)
  oprot:writeStructBegin('isInContact_args')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 2)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

isInContact_result = __TObject:new{
  success,
  e
}

function isInContact_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function isInContact_result:write(oprot)
  oprot:writeStructBegin('isInContact_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

lookupGroupMembers_args = __TObject:new{
  groupId,
  mids
}

function lookupGroupMembers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.groupId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.mids = {}
        local _etype2005, _size2002 = iprot:readListBegin()
        for _i=1,_size2002 do
          local _elem2006 = iprot:readString()
          table.insert(self.mids, _elem2006)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function lookupGroupMembers_args:write(oprot)
  oprot:writeStructBegin('lookupGroupMembers_args')
  if self.groupId ~= nil then
    oprot:writeFieldBegin('groupId', TType.STRING, 1)
    oprot:writeString(self.groupId)
    oprot:writeFieldEnd()
  end
  if self.mids ~= nil then
    oprot:writeFieldBegin('mids', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.mids)
    for _,iter2007 in ipairs(self.mids) do
      oprot:writeString(iter2007)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

lookupGroupMembers_result = __TObject:new{
  success,
  e
}

function lookupGroupMembers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2011, _size2008 = iprot:readListBegin()
        for _i=1,_size2008 do
          local _elem2012 = SimpleChannelContact:new{}
          _elem2012:read(iprot)
          table.insert(self.success, _elem2012)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function lookupGroupMembers_result:write(oprot)
  oprot:writeStructBegin('lookupGroupMembers_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter2013 in ipairs(self.success) do
      iter2013:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getRoomInformation_args = __TObject:new{
  roomMid
}

function getRoomInformation_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.roomMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getRoomInformation_args:write(oprot)
  oprot:writeStructBegin('getRoomInformation_args')
  if self.roomMid ~= nil then
    oprot:writeFieldBegin('roomMid', TType.STRING, 1)
    oprot:writeString(self.roomMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getRoomInformation_result = __TObject:new{
  success,
  e
}

function getRoomInformation_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Room:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getRoomInformation_result:write(oprot)
  oprot:writeStructBegin('getRoomInformation_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getGroupCall_args = __TObject:new{
  chatMid
}

function getGroupCall_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.chatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getGroupCall_args:write(oprot)
  oprot:writeStructBegin('getGroupCall_args')
  if self.chatMid ~= nil then
    oprot:writeFieldBegin('chatMid', TType.STRING, 2)
    oprot:writeString(self.chatMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getGroupCall_result = __TObject:new{
  success,
  e
}

function getGroupCall_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GroupCall:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getGroupCall_result:write(oprot)
  oprot:writeStructBegin('getGroupCall_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

isAllowSecondaryDeviceLogin_args = __TObject:new{

}

function isAllowSecondaryDeviceLogin_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function isAllowSecondaryDeviceLogin_args:write(oprot)
  oprot:writeStructBegin('isAllowSecondaryDeviceLogin_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

isAllowSecondaryDeviceLogin_result = __TObject:new{
  success,
  e
}

function isAllowSecondaryDeviceLogin_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function isAllowSecondaryDeviceLogin_result:write(oprot)
  oprot:writeStructBegin('isAllowSecondaryDeviceLogin_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPrimaryClientForChannel_args = __TObject:new{

}

function getPrimaryClientForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPrimaryClientForChannel_args:write(oprot)
  oprot:writeStructBegin('getPrimaryClientForChannel_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPrimaryClientForChannel_result = __TObject:new{
  success,
  e
}

function getPrimaryClientForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SimpleChannelClient:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPrimaryClientForChannel_result:write(oprot)
  oprot:writeStructBegin('getPrimaryClientForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createRoomWithBuddy_args = __TObject:new{
  reqSeq,
  buddyMid,
  contactIds
}

function createRoomWithBuddy_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.reqSeq = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.buddyMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.contactIds = {}
        local _etype2017, _size2014 = iprot:readListBegin()
        for _i=1,_size2014 do
          local _elem2018 = iprot:readString()
          table.insert(self.contactIds, _elem2018)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createRoomWithBuddy_args:write(oprot)
  oprot:writeStructBegin('createRoomWithBuddy_args')
  if self.reqSeq ~= nil then
    oprot:writeFieldBegin('reqSeq', TType.I32, 1)
    oprot:writeI32(self.reqSeq)
    oprot:writeFieldEnd()
  end
  if self.buddyMid ~= nil then
    oprot:writeFieldBegin('buddyMid', TType.STRING, 2)
    oprot:writeString(self.buddyMid)
    oprot:writeFieldEnd()
  end
  if self.contactIds ~= nil then
    oprot:writeFieldBegin('contactIds', TType.LIST, 3)
    oprot:writeListBegin(TType.STRING, #self.contactIds)
    for _,iter2019 in ipairs(self.contactIds) do
      oprot:writeString(iter2019)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createRoomWithBuddy_result = __TObject:new{
  success,
  e
}

function createRoomWithBuddy_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Room:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createRoomWithBuddy_result:write(oprot)
  oprot:writeStructBegin('createRoomWithBuddy_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getDisplayName_args = __TObject:new{
  mid
}

function getDisplayName_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getDisplayName_args:write(oprot)
  oprot:writeStructBegin('getDisplayName_args')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 2)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getDisplayName_result = __TObject:new{
  success,
  e
}

function getDisplayName_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getDisplayName_result:write(oprot)
  oprot:writeStructBegin('getDisplayName_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPaidCallMetadata_args = __TObject:new{
  language
}

function getPaidCallMetadata_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPaidCallMetadata_args:write(oprot)
  oprot:writeStructBegin('getPaidCallMetadata_args')
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 2)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPaidCallMetadata_result = __TObject:new{
  success,
  e
}

function getPaidCallMetadata_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = PaidCallMetadataResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPaidCallMetadata_result:write(oprot)
  oprot:writeStructBegin('getPaidCallMetadata_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getMid_args = __TObject:new{

}

function getMid_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getMid_args:write(oprot)
  oprot:writeStructBegin('getMid_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getMid_result = __TObject:new{
  success,
  e
}

function getMid_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getMid_result:write(oprot)
  oprot:writeStructBegin('getMid_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserCountryForBilling_args = __TObject:new{
  country,
  remoteIp
}

function getUserCountryForBilling_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.country = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.remoteIp = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserCountryForBilling_args:write(oprot)
  oprot:writeStructBegin('getUserCountryForBilling_args')
  if self.country ~= nil then
    oprot:writeFieldBegin('country', TType.STRING, 2)
    oprot:writeString(self.country)
    oprot:writeFieldEnd()
  end
  if self.remoteIp ~= nil then
    oprot:writeFieldBegin('remoteIp', TType.STRING, 3)
    oprot:writeString(self.remoteIp)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserCountryForBilling_result = __TObject:new{
  success,
  e
}

function getUserCountryForBilling_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserCountryForBilling_result:write(oprot)
  oprot:writeStructBegin('getUserCountryForBilling_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getFavoriteGroupIdsForChannel_args = __TObject:new{

}

function getFavoriteGroupIdsForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getFavoriteGroupIdsForChannel_args:write(oprot)
  oprot:writeStructBegin('getFavoriteGroupIdsForChannel_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getFavoriteGroupIdsForChannel_result = __TObject:new{
  success,
  e
}

function getFavoriteGroupIdsForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2023, _size2020 = iprot:readListBegin()
        for _i=1,_size2020 do
          local _elem2024 = iprot:readString()
          table.insert(self.success, _elem2024)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getFavoriteGroupIdsForChannel_result:write(oprot)
  oprot:writeStructBegin('getFavoriteGroupIdsForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter2025 in ipairs(self.success) do
      oprot:writeString(iter2025)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPaidCallHistory_args = __TObject:new{
  start,
  size,
  language
}

function getPaidCallHistory_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.start = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.size = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPaidCallHistory_args:write(oprot)
  oprot:writeStructBegin('getPaidCallHistory_args')
  if self.start ~= nil then
    oprot:writeFieldBegin('start', TType.I64, 2)
    oprot:writeI64(self.start)
    oprot:writeFieldEnd()
  end
  if self.size ~= nil then
    oprot:writeFieldBegin('size', TType.I32, 3)
    oprot:writeI32(self.size)
    oprot:writeFieldEnd()
  end
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 4)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPaidCallHistory_result = __TObject:new{
  success,
  e
}

function getPaidCallHistory_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = PaidCallHistoryResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPaidCallHistory_result:write(oprot)
  oprot:writeStructBegin('getPaidCallHistory_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendPinCodeOperation_args = __TObject:new{
  verifier
}

function sendPinCodeOperation_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.verifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendPinCodeOperation_args:write(oprot)
  oprot:writeStructBegin('sendPinCodeOperation_args')
  if self.verifier ~= nil then
    oprot:writeFieldBegin('verifier', TType.STRING, 1)
    oprot:writeString(self.verifier)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendPinCodeOperation_result = __TObject:new{
  e
}

function sendPinCodeOperation_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendPinCodeOperation_result:write(oprot)
  oprot:writeStructBegin('sendPinCodeOperation_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

inviteIntoGroupCall_args = __TObject:new{
  chatMid,
  memberMids,
  mediaType
}

function inviteIntoGroupCall_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.chatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.memberMids = {}
        local _etype2029, _size2026 = iprot:readListBegin()
        for _i=1,_size2026 do
          local _elem2030 = iprot:readString()
          table.insert(self.memberMids, _elem2030)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.mediaType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function inviteIntoGroupCall_args:write(oprot)
  oprot:writeStructBegin('inviteIntoGroupCall_args')
  if self.chatMid ~= nil then
    oprot:writeFieldBegin('chatMid', TType.STRING, 2)
    oprot:writeString(self.chatMid)
    oprot:writeFieldEnd()
  end
  if self.memberMids ~= nil then
    oprot:writeFieldBegin('memberMids', TType.LIST, 3)
    oprot:writeListBegin(TType.STRING, #self.memberMids)
    for _,iter2031 in ipairs(self.memberMids) do
      oprot:writeString(iter2031)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.mediaType ~= nil then
    oprot:writeFieldBegin('mediaType', TType.I32, 4)
    oprot:writeI32(self.mediaType)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

inviteIntoGroupCall_result = __TObject:new{
  e
}

function inviteIntoGroupCall_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function inviteIntoGroupCall_result:write(oprot)
  oprot:writeStructBegin('inviteIntoGroupCall_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getFriendMids_args = __TObject:new{

}

function getFriendMids_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getFriendMids_args:write(oprot)
  oprot:writeStructBegin('getFriendMids_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getFriendMids_result = __TObject:new{
  success,
  e
}

function getFriendMids_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2035, _size2032 = iprot:readListBegin()
        for _i=1,_size2032 do
          local _elem2036 = iprot:readString()
          table.insert(self.success, _elem2036)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getFriendMids_result:write(oprot)
  oprot:writeStructBegin('getFriendMids_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter2037 in ipairs(self.success) do
      oprot:writeString(iter2037)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getMetaProfile_args = __TObject:new{

}

function getMetaProfile_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getMetaProfile_args:write(oprot)
  oprot:writeStructBegin('getMetaProfile_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getMetaProfile_result = __TObject:new{
  success,
  e
}

function getMetaProfile_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = MetaProfile:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getMetaProfile_result:write(oprot)
  oprot:writeStructBegin('getMetaProfile_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendMessageForChannel_args = __TObject:new{
  message
}

function sendMessageForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.message = Message:new{}
        self.message:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendMessageForChannel_args:write(oprot)
  oprot:writeStructBegin('sendMessageForChannel_args')
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRUCT, 2)
    self.message:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendMessageForChannel_result = __TObject:new{
  success,
  e
}

function sendMessageForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Message:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendMessageForChannel_result:write(oprot)
  oprot:writeStructBegin('sendMessageForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

activeBuddySubscriberCount_args = __TObject:new{

}

function activeBuddySubscriberCount_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function activeBuddySubscriberCount_args:write(oprot)
  oprot:writeStructBegin('activeBuddySubscriberCount_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

activeBuddySubscriberCount_result = __TObject:new{
  success,
  e
}

function activeBuddySubscriberCount_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I64 then
        self.success = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function activeBuddySubscriberCount_result:write(oprot)
  oprot:writeStructBegin('activeBuddySubscriberCount_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.I64, 0)
    oprot:writeI64(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getCallCreditPurchaseHistory_args = __TObject:new{
  request
}

function getCallCreditPurchaseHistory_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.request = CoinHistoryCondition:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCallCreditPurchaseHistory_args:write(oprot)
  oprot:writeStructBegin('getCallCreditPurchaseHistory_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 2)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getCallCreditPurchaseHistory_result = __TObject:new{
  success,
  e
}

function getCallCreditPurchaseHistory_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = CoinHistoryResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCallCreditPurchaseHistory_result:write(oprot)
  oprot:writeStructBegin('getCallCreditPurchaseHistory_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

isRoomMember_args = __TObject:new{
  roomId
}

function isRoomMember_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.roomId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function isRoomMember_args:write(oprot)
  oprot:writeStructBegin('isRoomMember_args')
  if self.roomId ~= nil then
    oprot:writeFieldBegin('roomId', TType.STRING, 1)
    oprot:writeString(self.roomId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

isRoomMember_result = __TObject:new{
  success,
  e
}

function isRoomMember_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function isRoomMember_result:write(oprot)
  oprot:writeStructBegin('isRoomMember_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendSystemOAMessage_args = __TObject:new{
  message
}

function sendSystemOAMessage_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.message = Message:new{}
        self.message:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendSystemOAMessage_args:write(oprot)
  oprot:writeStructBegin('sendSystemOAMessage_args')
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRUCT, 1)
    self.message:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendSystemOAMessage_result = __TObject:new{
  success,
  e
}

function sendSystemOAMessage_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Message:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendSystemOAMessage_result:write(oprot)
  oprot:writeStructBegin('sendSystemOAMessage_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

acquirePaidCallRoute_args = __TObject:new{
  paidCallType,
  dialedNumber,
  language,
  networkCode,
  disableCallerId,
  referer,
  adSessionId
}

function acquirePaidCallRoute_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.paidCallType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.dialedNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.networkCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.disableCallerId = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.referer = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.adSessionId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function acquirePaidCallRoute_args:write(oprot)
  oprot:writeStructBegin('acquirePaidCallRoute_args')
  if self.paidCallType ~= nil then
    oprot:writeFieldBegin('paidCallType', TType.I32, 2)
    oprot:writeI32(self.paidCallType)
    oprot:writeFieldEnd()
  end
  if self.dialedNumber ~= nil then
    oprot:writeFieldBegin('dialedNumber', TType.STRING, 3)
    oprot:writeString(self.dialedNumber)
    oprot:writeFieldEnd()
  end
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 4)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  if self.networkCode ~= nil then
    oprot:writeFieldBegin('networkCode', TType.STRING, 5)
    oprot:writeString(self.networkCode)
    oprot:writeFieldEnd()
  end
  if self.disableCallerId ~= nil then
    oprot:writeFieldBegin('disableCallerId', TType.BOOL, 6)
    oprot:writeBool(self.disableCallerId)
    oprot:writeFieldEnd()
  end
  if self.referer ~= nil then
    oprot:writeFieldBegin('referer', TType.STRING, 7)
    oprot:writeString(self.referer)
    oprot:writeFieldEnd()
  end
  if self.adSessionId ~= nil then
    oprot:writeFieldBegin('adSessionId', TType.STRING, 8)
    oprot:writeString(self.adSessionId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

acquirePaidCallRoute_result = __TObject:new{
  success,
  e
}

function acquirePaidCallRoute_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = PaidCallResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function acquirePaidCallRoute_result:write(oprot)
  oprot:writeStructBegin('acquirePaidCallRoute_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getGroupsForChannel_args = __TObject:new{
  groupIds
}

function getGroupsForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.groupIds = {}
        local _etype2041, _size2038 = iprot:readListBegin()
        for _i=1,_size2038 do
          local _elem2042 = iprot:readString()
          table.insert(self.groupIds, _elem2042)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getGroupsForChannel_args:write(oprot)
  oprot:writeStructBegin('getGroupsForChannel_args')
  if self.groupIds ~= nil then
    oprot:writeFieldBegin('groupIds', TType.LIST, 1)
    oprot:writeListBegin(TType.STRING, #self.groupIds)
    for _,iter2043 in ipairs(self.groupIds) do
      oprot:writeString(iter2043)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getGroupsForChannel_result = __TObject:new{
  success,
  e
}

function getGroupsForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2047, _size2044 = iprot:readListBegin()
        for _i=1,_size2044 do
          local _elem2048 = Group:new{}
          _elem2048:read(iprot)
          table.insert(self.success, _elem2048)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getGroupsForChannel_result:write(oprot)
  oprot:writeStructBegin('getGroupsForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter2049 in ipairs(self.success) do
      iter2049:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserCreateTime_args = __TObject:new{

}

function getUserCreateTime_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserCreateTime_args:write(oprot)
  oprot:writeStructBegin('getUserCreateTime_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserCreateTime_result = __TObject:new{
  success,
  e
}

function getUserCreateTime_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I64 then
        self.success = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserCreateTime_result:write(oprot)
  oprot:writeStructBegin('getUserCreateTime_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.I64, 0)
    oprot:writeI64(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

registerChannelCP_args = __TObject:new{
  cpId,
  registerPassword
}

function registerChannelCP_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.cpId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.registerPassword = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function registerChannelCP_args:write(oprot)
  oprot:writeStructBegin('registerChannelCP_args')
  if self.cpId ~= nil then
    oprot:writeFieldBegin('cpId', TType.STRING, 2)
    oprot:writeString(self.cpId)
    oprot:writeFieldEnd()
  end
  if self.registerPassword ~= nil then
    oprot:writeFieldBegin('registerPassword', TType.STRING, 3)
    oprot:writeString(self.registerPassword)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

registerChannelCP_result = __TObject:new{
  success,
  e
}

function registerChannelCP_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function registerChannelCP_result:write(oprot)
  oprot:writeStructBegin('registerChannelCP_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

reserveCallCreditPurchase_args = __TObject:new{
  request
}

function reserveCallCreditPurchase_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.request = CoinPurchaseReservation:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function reserveCallCreditPurchase_args:write(oprot)
  oprot:writeStructBegin('reserveCallCreditPurchase_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 2)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

reserveCallCreditPurchase_result = __TObject:new{
  success,
  e
}

function reserveCallCreditPurchase_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = PaymentReservationResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function reserveCallCreditPurchase_result:write(oprot)
  oprot:writeStructBegin('reserveCallCreditPurchase_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

acquirePaidCallCurrencyExchangeRate_args = __TObject:new{
  language
}

function acquirePaidCallCurrencyExchangeRate_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function acquirePaidCallCurrencyExchangeRate_args:write(oprot)
  oprot:writeStructBegin('acquirePaidCallCurrencyExchangeRate_args')
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 2)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

acquirePaidCallCurrencyExchangeRate_result = __TObject:new{
  success,
  e
}

function acquirePaidCallCurrencyExchangeRate_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2053, _size2050 = iprot:readListBegin()
        for _i=1,_size2050 do
          local _elem2054 = PaidCallCurrencyExchangeRate:new{}
          _elem2054:read(iprot)
          table.insert(self.success, _elem2054)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function acquirePaidCallCurrencyExchangeRate_result:write(oprot)
  oprot:writeStructBegin('acquirePaidCallCurrencyExchangeRate_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter2055 in ipairs(self.success) do
      iter2055:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getRoomMemberMidsForAppPlatform_args = __TObject:new{
  roomId
}

function getRoomMemberMidsForAppPlatform_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.roomId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getRoomMemberMidsForAppPlatform_args:write(oprot)
  oprot:writeStructBegin('getRoomMemberMidsForAppPlatform_args')
  if self.roomId ~= nil then
    oprot:writeFieldBegin('roomId', TType.STRING, 1)
    oprot:writeString(self.roomId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getRoomMemberMidsForAppPlatform_result = __TObject:new{
  success,
  e
}

function getRoomMemberMidsForAppPlatform_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2059, _size2056 = iprot:readListBegin()
        for _i=1,_size2056 do
          local _elem2060 = iprot:readString()
          table.insert(self.success, _elem2060)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getRoomMemberMidsForAppPlatform_result:write(oprot)
  oprot:writeStructBegin('getRoomMemberMidsForAppPlatform_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter2061 in ipairs(self.success) do
      oprot:writeString(iter2061)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPaidCallBalanceList_args = __TObject:new{
  language
}

function getPaidCallBalanceList_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPaidCallBalanceList_args:write(oprot)
  oprot:writeStructBegin('getPaidCallBalanceList_args')
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 2)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPaidCallBalanceList_result = __TObject:new{
  success,
  e
}

function getPaidCallBalanceList_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2065, _size2062 = iprot:readListBegin()
        for _i=1,_size2062 do
          local _elem2066 = PaidCallBalance:new{}
          _elem2066:read(iprot)
          table.insert(self.success, _elem2066)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPaidCallBalanceList_result:write(oprot)
  oprot:writeStructBegin('getPaidCallBalanceList_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter2067 in ipairs(self.success) do
      iter2067:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPersonalInfos_args = __TObject:new{
  requiredPersonalInfos
}

function getPersonalInfos_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.SET then
        self.requiredPersonalInfos = {}
        local _etype2071, _size2068 = iprot:readSetBegin()
        for _i=1,_size2068 do
          local _elem2072 = iprot:readI32()
          self.requiredPersonalInfos[_elem2072] = _elem2072
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPersonalInfos_args:write(oprot)
  oprot:writeStructBegin('getPersonalInfos_args')
  if self.requiredPersonalInfos ~= nil then
    oprot:writeFieldBegin('requiredPersonalInfos', TType.SET, 1)
    oprot:writeSetBegin(TType.I32, ttable_size(self.requiredPersonalInfos))
    for iter2073,_ in pairs(self.requiredPersonalInfos) do
      oprot:writeI32(iter2073)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPersonalInfos_result = __TObject:new{
  success,
  e
}

function getPersonalInfos_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.MAP then
        self.success = {}
        local _ktype2075, _vtype2076, _size2074 = iprot:readMapBegin() 
        for _i=1,_size2074 do
          local _key2078 = iprot:readI32()
          local _val2079 = iprot:readString()
          self.success[_key2078] = _val2079
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPersonalInfos_result:write(oprot)
  oprot:writeStructBegin('getPersonalInfos_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.MAP, 0)
    oprot:writeMapBegin(TType.I32, TType.STRING, ttable_size(self.success))
    for kiter2080,viter2081 in pairs(self.success) do
      oprot:writeI32(kiter2080)
      oprot:writeString(viter2081)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPrimaryClientsForChannel_args = __TObject:new{
  userMids
}

function getPrimaryClientsForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.userMids = {}
        local _etype2085, _size2082 = iprot:readListBegin()
        for _i=1,_size2082 do
          local _elem2086 = iprot:readString()
          table.insert(self.userMids, _elem2086)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPrimaryClientsForChannel_args:write(oprot)
  oprot:writeStructBegin('getPrimaryClientsForChannel_args')
  if self.userMids ~= nil then
    oprot:writeFieldBegin('userMids', TType.LIST, 1)
    oprot:writeListBegin(TType.STRING, #self.userMids)
    for _,iter2087 in ipairs(self.userMids) do
      oprot:writeString(iter2087)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPrimaryClientsForChannel_result = __TObject:new{
  success,
  e
}

function getPrimaryClientsForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2091, _size2088 = iprot:readListBegin()
        for _i=1,_size2088 do
          local _elem2092 = SimpleChannelClient:new{}
          _elem2092:read(iprot)
          table.insert(self.success, _elem2092)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPrimaryClientsForChannel_result:write(oprot)
  oprot:writeStructBegin('getPrimaryClientsForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter2093 in ipairs(self.success) do
      iter2093:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

addBuddyToContact_args = __TObject:new{
  buddyMid
}

function addBuddyToContact_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.buddyMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function addBuddyToContact_args:write(oprot)
  oprot:writeStructBegin('addBuddyToContact_args')
  if self.buddyMid ~= nil then
    oprot:writeFieldBegin('buddyMid', TType.STRING, 1)
    oprot:writeString(self.buddyMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

addBuddyToContact_result = __TObject:new{
  success,
  e
}

function addBuddyToContact_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ContactTransition:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function addBuddyToContact_result:write(oprot)
  oprot:writeStructBegin('addBuddyToContact_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getGroupMemberMidsForAppPlatform_args = __TObject:new{
  groupId
}

function getGroupMemberMidsForAppPlatform_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.groupId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getGroupMemberMidsForAppPlatform_args:write(oprot)
  oprot:writeStructBegin('getGroupMemberMidsForAppPlatform_args')
  if self.groupId ~= nil then
    oprot:writeFieldBegin('groupId', TType.STRING, 1)
    oprot:writeString(self.groupId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getGroupMemberMidsForAppPlatform_result = __TObject:new{
  success,
  e
}

function getGroupMemberMidsForAppPlatform_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2097, _size2094 = iprot:readListBegin()
        for _i=1,_size2094 do
          local _elem2098 = iprot:readString()
          table.insert(self.success, _elem2098)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getGroupMemberMidsForAppPlatform_result:write(oprot)
  oprot:writeStructBegin('getGroupMemberMidsForAppPlatform_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter2099 in ipairs(self.success) do
      oprot:writeString(iter2099)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserLanguage_args = __TObject:new{

}

function getUserLanguage_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserLanguage_args:write(oprot)
  oprot:writeStructBegin('getUserLanguage_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserLanguage_result = __TObject:new{
  success,
  e
}

function getUserLanguage_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserLanguage_result:write(oprot)
  oprot:writeStructBegin('getUserLanguage_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

lookupPaidCall_args = __TObject:new{
  dialedNumber,
  language,
  referer
}

function lookupPaidCall_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.dialedNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.referer = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function lookupPaidCall_args:write(oprot)
  oprot:writeStructBegin('lookupPaidCall_args')
  if self.dialedNumber ~= nil then
    oprot:writeFieldBegin('dialedNumber', TType.STRING, 2)
    oprot:writeString(self.dialedNumber)
    oprot:writeFieldEnd()
  end
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 3)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  if self.referer ~= nil then
    oprot:writeFieldBegin('referer', TType.STRING, 4)
    oprot:writeString(self.referer)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

lookupPaidCall_result = __TObject:new{
  success,
  e
}

function lookupPaidCall_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = PaidCallResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function lookupPaidCall_result:write(oprot)
  oprot:writeStructBegin('lookupPaidCall_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getExtendedProfile_args = __TObject:new{

}

function getExtendedProfile_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getExtendedProfile_args:write(oprot)
  oprot:writeStructBegin('getExtendedProfile_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getExtendedProfile_result = __TObject:new{
  success,
  e
}

function getExtendedProfile_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ExtendedProfile:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getExtendedProfile_result:write(oprot)
  oprot:writeStructBegin('getExtendedProfile_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getReverseCompactContacts_args = __TObject:new{
  ids
}

function getReverseCompactContacts_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.ids = {}
        local _etype2103, _size2100 = iprot:readListBegin()
        for _i=1,_size2100 do
          local _elem2104 = iprot:readString()
          table.insert(self.ids, _elem2104)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getReverseCompactContacts_args:write(oprot)
  oprot:writeStructBegin('getReverseCompactContacts_args')
  if self.ids ~= nil then
    oprot:writeFieldBegin('ids', TType.LIST, 1)
    oprot:writeListBegin(TType.STRING, #self.ids)
    for _,iter2105 in ipairs(self.ids) do
      oprot:writeString(iter2105)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getReverseCompactContacts_result = __TObject:new{
  success,
  e
}

function getReverseCompactContacts_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.MAP then
        self.success = {}
        local _ktype2107, _vtype2108, _size2106 = iprot:readMapBegin() 
        for _i=1,_size2106 do
          local _key2110 = iprot:readString()
          local _val2111 = CompactContact:new{}
          _val2111:read(iprot)
          self.success[_key2110] = _val2111
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getReverseCompactContacts_result:write(oprot)
  oprot:writeStructBegin('getReverseCompactContacts_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.MAP, 0)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.success))
    for kiter2112,viter2113 in pairs(self.success) do
      oprot:writeString(kiter2112)
      viter2113:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPaidCallAdStatus_args = __TObject:new{

}

function getPaidCallAdStatus_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPaidCallAdStatus_args:write(oprot)
  oprot:writeStructBegin('getPaidCallAdStatus_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPaidCallAdStatus_result = __TObject:new{
  success,
  e
}

function getPaidCallAdStatus_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = PaidCallAdResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPaidCallAdStatus_result:write(oprot)
  oprot:writeStructBegin('getPaidCallAdStatus_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

findContactByUseridWithoutAbuseBlockForChannel_args = __TObject:new{
  userid
}

function findContactByUseridWithoutAbuseBlockForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.userid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findContactByUseridWithoutAbuseBlockForChannel_args:write(oprot)
  oprot:writeStructBegin('findContactByUseridWithoutAbuseBlockForChannel_args')
  if self.userid ~= nil then
    oprot:writeFieldBegin('userid', TType.STRING, 2)
    oprot:writeString(self.userid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

findContactByUseridWithoutAbuseBlockForChannel_result = __TObject:new{
  success,
  e
}

function findContactByUseridWithoutAbuseBlockForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Contact:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findContactByUseridWithoutAbuseBlockForChannel_result:write(oprot)
  oprot:writeStructBegin('findContactByUseridWithoutAbuseBlockForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getGroupMemberMids_args = __TObject:new{
  groupId
}

function getGroupMemberMids_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.groupId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getGroupMemberMids_args:write(oprot)
  oprot:writeStructBegin('getGroupMemberMids_args')
  if self.groupId ~= nil then
    oprot:writeFieldBegin('groupId', TType.STRING, 1)
    oprot:writeString(self.groupId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getGroupMemberMids_result = __TObject:new{
  success,
  e
}

function getGroupMemberMids_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2117, _size2114 = iprot:readListBegin()
        for _i=1,_size2114 do
          local _elem2118 = iprot:readString()
          table.insert(self.success, _elem2118)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getGroupMemberMids_result:write(oprot)
  oprot:writeStructBegin('getGroupMemberMids_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter2119 in ipairs(self.success) do
      oprot:writeString(iter2119)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendMessageWithoutRelationship_args = __TObject:new{
  message
}

function sendMessageWithoutRelationship_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.message = Message:new{}
        self.message:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendMessageWithoutRelationship_args:write(oprot)
  oprot:writeStructBegin('sendMessageWithoutRelationship_args')
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRUCT, 2)
    self.message:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendMessageWithoutRelationship_result = __TObject:new{
  success,
  e
}

function sendMessageWithoutRelationship_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Message:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendMessageWithoutRelationship_result:write(oprot)
  oprot:writeStructBegin('sendMessageWithoutRelationship_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

displayBuddySubscriberCountInBulk_args = __TObject:new{
  mids
}

function displayBuddySubscriberCountInBulk_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.mids = {}
        local _etype2123, _size2120 = iprot:readListBegin()
        for _i=1,_size2120 do
          local _elem2124 = iprot:readString()
          table.insert(self.mids, _elem2124)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function displayBuddySubscriberCountInBulk_args:write(oprot)
  oprot:writeStructBegin('displayBuddySubscriberCountInBulk_args')
  if self.mids ~= nil then
    oprot:writeFieldBegin('mids', TType.LIST, 1)
    oprot:writeListBegin(TType.STRING, #self.mids)
    for _,iter2125 in ipairs(self.mids) do
      oprot:writeString(iter2125)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

displayBuddySubscriberCountInBulk_result = __TObject:new{
  success,
  e
}

function displayBuddySubscriberCountInBulk_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.MAP then
        self.success = {}
        local _ktype2127, _vtype2128, _size2126 = iprot:readMapBegin() 
        for _i=1,_size2126 do
          local _key2130 = iprot:readString()
          local _val2131 = iprot:readI64()
          self.success[_key2130] = _val2131
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function displayBuddySubscriberCountInBulk_result:write(oprot)
  oprot:writeStructBegin('displayBuddySubscriberCountInBulk_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.MAP, 0)
    oprot:writeMapBegin(TType.STRING, TType.I64, ttable_size(self.success))
    for kiter2132,viter2133 in pairs(self.success) do
      oprot:writeString(kiter2132)
      oprot:writeI64(viter2133)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

lookupRoomMembers_args = __TObject:new{
  roomId,
  mids
}

function lookupRoomMembers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.roomId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.mids = {}
        local _etype2137, _size2134 = iprot:readListBegin()
        for _i=1,_size2134 do
          local _elem2138 = iprot:readString()
          table.insert(self.mids, _elem2138)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function lookupRoomMembers_args:write(oprot)
  oprot:writeStructBegin('lookupRoomMembers_args')
  if self.roomId ~= nil then
    oprot:writeFieldBegin('roomId', TType.STRING, 1)
    oprot:writeString(self.roomId)
    oprot:writeFieldEnd()
  end
  if self.mids ~= nil then
    oprot:writeFieldBegin('mids', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.mids)
    for _,iter2139 in ipairs(self.mids) do
      oprot:writeString(iter2139)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

lookupRoomMembers_result = __TObject:new{
  success,
  e
}

function lookupRoomMembers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2143, _size2140 = iprot:readListBegin()
        for _i=1,_size2140 do
          local _elem2144 = SimpleChannelContact:new{}
          _elem2144:read(iprot)
          table.insert(self.success, _elem2144)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function lookupRoomMembers_result:write(oprot)
  oprot:writeStructBegin('lookupRoomMembers_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter2145 in ipairs(self.success) do
      iter2145:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getFavoriteMidsForChannel_args = __TObject:new{

}

function getFavoriteMidsForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getFavoriteMidsForChannel_args:write(oprot)
  oprot:writeStructBegin('getFavoriteMidsForChannel_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getFavoriteMidsForChannel_result = __TObject:new{
  success,
  e
}

function getFavoriteMidsForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2149, _size2146 = iprot:readListBegin()
        for _i=1,_size2146 do
          local _elem2150 = iprot:readString()
          table.insert(self.success, _elem2150)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getFavoriteMidsForChannel_result:write(oprot)
  oprot:writeStructBegin('getFavoriteMidsForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter2151 in ipairs(self.success) do
      oprot:writeString(iter2151)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getAllContactIdsForChannel_args = __TObject:new{

}

function getAllContactIdsForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getAllContactIdsForChannel_args:write(oprot)
  oprot:writeStructBegin('getAllContactIdsForChannel_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getAllContactIdsForChannel_result = __TObject:new{
  success,
  e
}

function getAllContactIdsForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2155, _size2152 = iprot:readListBegin()
        for _i=1,_size2152 do
          local _elem2156 = iprot:readString()
          table.insert(self.success, _elem2156)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getAllContactIdsForChannel_result:write(oprot)
  oprot:writeStructBegin('getAllContactIdsForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter2157 in ipairs(self.success) do
      oprot:writeString(iter2157)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

displayBuddySubscriberCount_args = __TObject:new{

}

function displayBuddySubscriberCount_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function displayBuddySubscriberCount_args:write(oprot)
  oprot:writeStructBegin('displayBuddySubscriberCount_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

displayBuddySubscriberCount_result = __TObject:new{
  success,
  e
}

function displayBuddySubscriberCount_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I64 then
        self.success = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function displayBuddySubscriberCount_result:write(oprot)
  oprot:writeStructBegin('displayBuddySubscriberCount_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.I64, 0)
    oprot:writeI64(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getProfileForChannel_args = __TObject:new{

}

function getProfileForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getProfileForChannel_args:write(oprot)
  oprot:writeStructBegin('getProfileForChannel_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getProfileForChannel_result = __TObject:new{
  success,
  e
}

function getProfileForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Profile:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getProfileForChannel_result:write(oprot)
  oprot:writeStructBegin('getProfileForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserTickets_args = __TObject:new{
  userMids
}

function getUserTickets_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.userMids = {}
        local _etype2161, _size2158 = iprot:readListBegin()
        for _i=1,_size2158 do
          local _elem2162 = iprot:readString()
          table.insert(self.userMids, _elem2162)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserTickets_args:write(oprot)
  oprot:writeStructBegin('getUserTickets_args')
  if self.userMids ~= nil then
    oprot:writeFieldBegin('userMids', TType.LIST, 1)
    oprot:writeListBegin(TType.STRING, #self.userMids)
    for _,iter2163 in ipairs(self.userMids) do
      oprot:writeString(iter2163)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserTickets_result = __TObject:new{
  success,
  e
}

function getUserTickets_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2167, _size2164 = iprot:readListBegin()
        for _i=1,_size2164 do
          local _elem2168 = UserTicketResponse:new{}
          _elem2168:read(iprot)
          table.insert(self.success, _elem2168)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserTickets_result:write(oprot)
  oprot:writeStructBegin('getUserTickets_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter2169 in ipairs(self.success) do
      iter2169:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getOAFriendMids_args = __TObject:new{

}

function getOAFriendMids_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getOAFriendMids_args:write(oprot)
  oprot:writeStructBegin('getOAFriendMids_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getOAFriendMids_result = __TObject:new{
  success,
  e
}

function getOAFriendMids_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2173, _size2170 = iprot:readListBegin()
        for _i=1,_size2170 do
          local _elem2174 = iprot:readString()
          table.insert(self.success, _elem2174)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getOAFriendMids_result:write(oprot)
  oprot:writeStructBegin('getOAFriendMids_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter2175 in ipairs(self.success) do
      oprot:writeString(iter2175)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

searchPaidCallUserRate_args = __TObject:new{
  countryCode,
  language
}

function searchPaidCallUserRate_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.countryCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function searchPaidCallUserRate_args:write(oprot)
  oprot:writeStructBegin('searchPaidCallUserRate_args')
  if self.countryCode ~= nil then
    oprot:writeFieldBegin('countryCode', TType.STRING, 2)
    oprot:writeString(self.countryCode)
    oprot:writeFieldEnd()
  end
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 3)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

searchPaidCallUserRate_result = __TObject:new{
  success,
  e
}

function searchPaidCallUserRate_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2179, _size2176 = iprot:readListBegin()
        for _i=1,_size2176 do
          local _elem2180 = PaidCallUserRate:new{}
          _elem2180:read(iprot)
          table.insert(self.success, _elem2180)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function searchPaidCallUserRate_result:write(oprot)
  oprot:writeStructBegin('searchPaidCallUserRate_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter2181 in ipairs(self.success) do
      iter2181:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getJoinedGroupIdsForChannel_args = __TObject:new{

}

function getJoinedGroupIdsForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getJoinedGroupIdsForChannel_args:write(oprot)
  oprot:writeStructBegin('getJoinedGroupIdsForChannel_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getJoinedGroupIdsForChannel_result = __TObject:new{
  success,
  e
}

function getJoinedGroupIdsForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2185, _size2182 = iprot:readListBegin()
        for _i=1,_size2182 do
          local _elem2186 = iprot:readString()
          table.insert(self.success, _elem2186)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getJoinedGroupIdsForChannel_result:write(oprot)
  oprot:writeStructBegin('getJoinedGroupIdsForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter2187 in ipairs(self.success) do
      oprot:writeString(iter2187)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

acquireGroupCallRoute_args = __TObject:new{
  chatMid,
  mediaType
}

function acquireGroupCallRoute_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.chatMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.mediaType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function acquireGroupCallRoute_args:write(oprot)
  oprot:writeStructBegin('acquireGroupCallRoute_args')
  if self.chatMid ~= nil then
    oprot:writeFieldBegin('chatMid', TType.STRING, 2)
    oprot:writeString(self.chatMid)
    oprot:writeFieldEnd()
  end
  if self.mediaType ~= nil then
    oprot:writeFieldBegin('mediaType', TType.I32, 3)
    oprot:writeI32(self.mediaType)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

acquireGroupCallRoute_result = __TObject:new{
  success,
  e
}

function acquireGroupCallRoute_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GroupCallRoute:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function acquireGroupCallRoute_result:write(oprot)
  oprot:writeStructBegin('acquireGroupCallRoute_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserMidsWhoAddedMe_args = __TObject:new{

}

function getUserMidsWhoAddedMe_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserMidsWhoAddedMe_args:write(oprot)
  oprot:writeStructBegin('getUserMidsWhoAddedMe_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserMidsWhoAddedMe_result = __TObject:new{
  success,
  e
}

function getUserMidsWhoAddedMe_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2191, _size2188 = iprot:readListBegin()
        for _i=1,_size2188 do
          local _elem2192 = iprot:readString()
          table.insert(self.success, _elem2192)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserMidsWhoAddedMe_result:write(oprot)
  oprot:writeStructBegin('getUserMidsWhoAddedMe_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter2193 in ipairs(self.success) do
      oprot:writeString(iter2193)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getIdentityCredential_args = __TObject:new{

}

function getIdentityCredential_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getIdentityCredential_args:write(oprot)
  oprot:writeStructBegin('getIdentityCredential_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getIdentityCredential_result = __TObject:new{
  success,
  e
}

function getIdentityCredential_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = IdentityCredential:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getIdentityCredential_result:write(oprot)
  oprot:writeStructBegin('getIdentityCredential_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

addOperationForChannel_args = __TObject:new{
  opType,
  param1,
  param2,
  param3
}

function addOperationForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.opType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.param1 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.param2 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.param3 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function addOperationForChannel_args:write(oprot)
  oprot:writeStructBegin('addOperationForChannel_args')
  if self.opType ~= nil then
    oprot:writeFieldBegin('opType', TType.I32, 1)
    oprot:writeI32(self.opType)
    oprot:writeFieldEnd()
  end
  if self.param1 ~= nil then
    oprot:writeFieldBegin('param1', TType.STRING, 2)
    oprot:writeString(self.param1)
    oprot:writeFieldEnd()
  end
  if self.param2 ~= nil then
    oprot:writeFieldBegin('param2', TType.STRING, 3)
    oprot:writeString(self.param2)
    oprot:writeFieldEnd()
  end
  if self.param3 ~= nil then
    oprot:writeFieldBegin('param3', TType.STRING, 4)
    oprot:writeString(self.param3)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

addOperationForChannel_result = __TObject:new{
  e
}

function addOperationForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function addOperationForChannel_result:write(oprot)
  oprot:writeStructBegin('addOperationForChannel_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSimpleChannelContacts_args = __TObject:new{
  ids,
  statusSticonFallbackDisabled
}

function getSimpleChannelContacts_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.ids = {}
        local _etype2197, _size2194 = iprot:readListBegin()
        for _i=1,_size2194 do
          local _elem2198 = iprot:readString()
          table.insert(self.ids, _elem2198)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.statusSticonFallbackDisabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSimpleChannelContacts_args:write(oprot)
  oprot:writeStructBegin('getSimpleChannelContacts_args')
  if self.ids ~= nil then
    oprot:writeFieldBegin('ids', TType.LIST, 1)
    oprot:writeListBegin(TType.STRING, #self.ids)
    for _,iter2199 in ipairs(self.ids) do
      oprot:writeString(iter2199)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.statusSticonFallbackDisabled ~= nil then
    oprot:writeFieldBegin('statusSticonFallbackDisabled', TType.BOOL, 2)
    oprot:writeBool(self.statusSticonFallbackDisabled)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSimpleChannelContacts_result = __TObject:new{
  success,
  e
}

function getSimpleChannelContacts_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype2203, _size2200 = iprot:readListBegin()
        for _i=1,_size2200 do
          local _elem2204 = SimpleChannelContact:new{}
          _elem2204:read(iprot)
          table.insert(self.success, _elem2204)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSimpleChannelContacts_result:write(oprot)
  oprot:writeStructBegin('getSimpleChannelContacts_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter2205 in ipairs(self.success) do
      iter2205:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserLastSentMessageTimeStamp_args = __TObject:new{
  mid
}

function getUserLastSentMessageTimeStamp_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserLastSentMessageTimeStamp_args:write(oprot)
  oprot:writeStructBegin('getUserLastSentMessageTimeStamp_args')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserLastSentMessageTimeStamp_result = __TObject:new{
  success,
  e
}

function getUserLastSentMessageTimeStamp_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I64 then
        self.success = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserLastSentMessageTimeStamp_result:write(oprot)
  oprot:writeStructBegin('getUserLastSentMessageTimeStamp_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.I64, 0)
    oprot:writeI64(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end