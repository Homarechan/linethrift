--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'line_ttypes'

SpotServiceClient = __TObject.new(__TClient, {
  __type = 'SpotServiceClient'
})

function SpotServiceClient:lookupByPhoneNumber(countryAreaCode, phoneNumber)
  self:send_lookupByPhoneNumber(countryAreaCode, phoneNumber)
  return self:recv_lookupByPhoneNumber(countryAreaCode, phoneNumber)
end

function SpotServiceClient:send_lookupByPhoneNumber(countryAreaCode, phoneNumber)
  self.oprot:writeMessageBegin('lookupByPhoneNumber', TMessageType.CALL, self._seqid)
  local args = lookupByPhoneNumber_args:new{}
  args.countryAreaCode = countryAreaCode
  args.phoneNumber = phoneNumber
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SpotServiceClient:recv_lookupByPhoneNumber(countryAreaCode, phoneNumber)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = lookupByPhoneNumber_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SpotServiceClient:lookupNearby(location, category, query, countryAreaCode)
  self:send_lookupNearby(location, category, query, countryAreaCode)
  return self:recv_lookupNearby(location, category, query, countryAreaCode)
end

function SpotServiceClient:send_lookupNearby(location, category, query, countryAreaCode)
  self.oprot:writeMessageBegin('lookupNearby', TMessageType.CALL, self._seqid)
  local args = lookupNearby_args:new{}
  args.location = location
  args.category = category
  args.query = query
  args.countryAreaCode = countryAreaCode
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SpotServiceClient:recv_lookupNearby(location, category, query, countryAreaCode)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = lookupNearby_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
SpotServiceIface = __TObject:new{
  __type = 'SpotServiceIface'
}


SpotServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'SpotServiceProcessor'
})

function SpotServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function SpotServiceProcessor:process_lookupByPhoneNumber(seqid, iprot, oprot, server_ctx)
  local args = lookupByPhoneNumber_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = lookupByPhoneNumber_result:new{}
  local status, res = pcall(self.handler.lookupByPhoneNumber, self.handler, args.countryAreaCode, args.phoneNumber)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('lookupByPhoneNumber', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SpotServiceProcessor:process_lookupNearby(seqid, iprot, oprot, server_ctx)
  local args = lookupNearby_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = lookupNearby_result:new{}
  local status, res = pcall(self.handler.lookupNearby, self.handler, args.location, args.category, args.query, args.countryAreaCode)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('lookupNearby', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

lookupByPhoneNumber_args = __TObject:new{
  countryAreaCode,
  phoneNumber
}

function lookupByPhoneNumber_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.countryAreaCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.phoneNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function lookupByPhoneNumber_args:write(oprot)
  oprot:writeStructBegin('lookupByPhoneNumber_args')
  if self.countryAreaCode ~= nil then
    oprot:writeFieldBegin('countryAreaCode', TType.STRING, 2)
    oprot:writeString(self.countryAreaCode)
    oprot:writeFieldEnd()
  end
  if self.phoneNumber ~= nil then
    oprot:writeFieldBegin('phoneNumber', TType.STRING, 3)
    oprot:writeString(self.phoneNumber)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

lookupByPhoneNumber_result = __TObject:new{
  success,
  e
}

function lookupByPhoneNumber_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SpotPhoneNumberResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function lookupByPhoneNumber_result:write(oprot)
  oprot:writeStructBegin('lookupByPhoneNumber_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

lookupNearby_args = __TObject:new{
  location,
  category,
  query,
  countryAreaCode
}

function lookupNearby_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.location = Location:new{}
        self.location:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.category = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.query = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.countryAreaCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function lookupNearby_args:write(oprot)
  oprot:writeStructBegin('lookupNearby_args')
  if self.location ~= nil then
    oprot:writeFieldBegin('location', TType.STRUCT, 2)
    self.location:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.category ~= nil then
    oprot:writeFieldBegin('category', TType.I32, 3)
    oprot:writeI32(self.category)
    oprot:writeFieldEnd()
  end
  if self.query ~= nil then
    oprot:writeFieldBegin('query', TType.STRING, 4)
    oprot:writeString(self.query)
    oprot:writeFieldEnd()
  end
  if self.countryAreaCode ~= nil then
    oprot:writeFieldBegin('countryAreaCode', TType.STRING, 5)
    oprot:writeString(self.countryAreaCode)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

lookupNearby_result = __TObject:new{
  success,
  e
}

function lookupNearby_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SpotNearbyResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function lookupNearby_result:write(oprot)
  oprot:writeStructBegin('lookupNearby_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end