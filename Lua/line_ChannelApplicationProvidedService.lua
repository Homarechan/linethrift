--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'line_ttypes'

ChannelApplicationProvidedServiceClient = __TObject.new(__TClient, {
  __type = 'ChannelApplicationProvidedServiceClient'
})

function ChannelApplicationProvidedServiceClient:activeBuddySubscriberCount()
  self:send_activeBuddySubscriberCount()
  return self:recv_activeBuddySubscriberCount()
end

function ChannelApplicationProvidedServiceClient:send_activeBuddySubscriberCount()
  self.oprot:writeMessageBegin('activeBuddySubscriberCount', TMessageType.CALL, self._seqid)
  local args = activeBuddySubscriberCount_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_activeBuddySubscriberCount()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = activeBuddySubscriberCount_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:addOperationForChannel(opType, param1, param2, param3)
  self:send_addOperationForChannel(opType, param1, param2, param3)
  self:recv_addOperationForChannel(opType, param1, param2, param3)
end

function ChannelApplicationProvidedServiceClient:send_addOperationForChannel(opType, param1, param2, param3)
  self.oprot:writeMessageBegin('addOperationForChannel', TMessageType.CALL, self._seqid)
  local args = addOperationForChannel_args:new{}
  args.opType = opType
  args.param1 = param1
  args.param2 = param2
  args.param3 = param3
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_addOperationForChannel(opType, param1, param2, param3)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = addOperationForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ChannelApplicationProvidedServiceClient:displayBuddySubscriberCount()
  self:send_displayBuddySubscriberCount()
  return self:recv_displayBuddySubscriberCount()
end

function ChannelApplicationProvidedServiceClient:send_displayBuddySubscriberCount()
  self.oprot:writeMessageBegin('displayBuddySubscriberCount', TMessageType.CALL, self._seqid)
  local args = displayBuddySubscriberCount_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_displayBuddySubscriberCount()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = displayBuddySubscriberCount_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:findContactByUseridWithoutAbuseBlockForChannel(userid)
  self:send_findContactByUseridWithoutAbuseBlockForChannel(userid)
  return self:recv_findContactByUseridWithoutAbuseBlockForChannel(userid)
end

function ChannelApplicationProvidedServiceClient:send_findContactByUseridWithoutAbuseBlockForChannel(userid)
  self.oprot:writeMessageBegin('findContactByUseridWithoutAbuseBlockForChannel', TMessageType.CALL, self._seqid)
  local args = findContactByUseridWithoutAbuseBlockForChannel_args:new{}
  args.userid = userid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_findContactByUseridWithoutAbuseBlockForChannel(userid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = findContactByUseridWithoutAbuseBlockForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getAllContactIdsForChannel()
  self:send_getAllContactIdsForChannel()
  return self:recv_getAllContactIdsForChannel()
end

function ChannelApplicationProvidedServiceClient:send_getAllContactIdsForChannel()
  self.oprot:writeMessageBegin('getAllContactIdsForChannel', TMessageType.CALL, self._seqid)
  local args = getAllContactIdsForChannel_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getAllContactIdsForChannel()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getAllContactIdsForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getCompactContacts(lastModifiedTimestamp)
  self:send_getCompactContacts(lastModifiedTimestamp)
  return self:recv_getCompactContacts(lastModifiedTimestamp)
end

function ChannelApplicationProvidedServiceClient:send_getCompactContacts(lastModifiedTimestamp)
  self.oprot:writeMessageBegin('getCompactContacts', TMessageType.CALL, self._seqid)
  local args = getCompactContacts_args:new{}
  args.lastModifiedTimestamp = lastModifiedTimestamp
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getCompactContacts(lastModifiedTimestamp)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getCompactContacts_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getContactsForChannel(ids)
  self:send_getContactsForChannel(ids)
  return self:recv_getContactsForChannel(ids)
end

function ChannelApplicationProvidedServiceClient:send_getContactsForChannel(ids)
  self.oprot:writeMessageBegin('getContactsForChannel', TMessageType.CALL, self._seqid)
  local args = getContactsForChannel_args:new{}
  args.ids = ids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getContactsForChannel(ids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getContactsForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getDisplayName(mid)
  self:send_getDisplayName(mid)
  return self:recv_getDisplayName(mid)
end

function ChannelApplicationProvidedServiceClient:send_getDisplayName(mid)
  self.oprot:writeMessageBegin('getDisplayName', TMessageType.CALL, self._seqid)
  local args = getDisplayName_args:new{}
  args.mid = mid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getDisplayName(mid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getDisplayName_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getFavoriteMidsForChannel()
  self:send_getFavoriteMidsForChannel()
  return self:recv_getFavoriteMidsForChannel()
end

function ChannelApplicationProvidedServiceClient:send_getFavoriteMidsForChannel()
  self.oprot:writeMessageBegin('getFavoriteMidsForChannel', TMessageType.CALL, self._seqid)
  local args = getFavoriteMidsForChannel_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getFavoriteMidsForChannel()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getFavoriteMidsForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getFriendMids()
  self:send_getFriendMids()
  return self:recv_getFriendMids()
end

function ChannelApplicationProvidedServiceClient:send_getFriendMids()
  self.oprot:writeMessageBegin('getFriendMids', TMessageType.CALL, self._seqid)
  local args = getFriendMids_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getFriendMids()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getFriendMids_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getGroupMemberMids(groupId)
  self:send_getGroupMemberMids(groupId)
  return self:recv_getGroupMemberMids(groupId)
end

function ChannelApplicationProvidedServiceClient:send_getGroupMemberMids(groupId)
  self.oprot:writeMessageBegin('getGroupMemberMids', TMessageType.CALL, self._seqid)
  local args = getGroupMemberMids_args:new{}
  args.groupId = groupId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getGroupMemberMids(groupId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getGroupMemberMids_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getGroupsForChannel(groupIds)
  self:send_getGroupsForChannel(groupIds)
  return self:recv_getGroupsForChannel(groupIds)
end

function ChannelApplicationProvidedServiceClient:send_getGroupsForChannel(groupIds)
  self.oprot:writeMessageBegin('getGroupsForChannel', TMessageType.CALL, self._seqid)
  local args = getGroupsForChannel_args:new{}
  args.groupIds = groupIds
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getGroupsForChannel(groupIds)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getGroupsForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getIdentityCredential()
  self:send_getIdentityCredential()
  return self:recv_getIdentityCredential()
end

function ChannelApplicationProvidedServiceClient:send_getIdentityCredential()
  self.oprot:writeMessageBegin('getIdentityCredential', TMessageType.CALL, self._seqid)
  local args = getIdentityCredential_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getIdentityCredential()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getIdentityCredential_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getJoinedGroupIdsForChannel()
  self:send_getJoinedGroupIdsForChannel()
  return self:recv_getJoinedGroupIdsForChannel()
end

function ChannelApplicationProvidedServiceClient:send_getJoinedGroupIdsForChannel()
  self.oprot:writeMessageBegin('getJoinedGroupIdsForChannel', TMessageType.CALL, self._seqid)
  local args = getJoinedGroupIdsForChannel_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getJoinedGroupIdsForChannel()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getJoinedGroupIdsForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getMetaProfile()
  self:send_getMetaProfile()
  return self:recv_getMetaProfile()
end

function ChannelApplicationProvidedServiceClient:send_getMetaProfile()
  self.oprot:writeMessageBegin('getMetaProfile', TMessageType.CALL, self._seqid)
  local args = getMetaProfile_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getMetaProfile()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getMetaProfile_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getMid()
  self:send_getMid()
  return self:recv_getMid()
end

function ChannelApplicationProvidedServiceClient:send_getMid()
  self.oprot:writeMessageBegin('getMid', TMessageType.CALL, self._seqid)
  local args = getMid_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getMid()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getMid_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getPrimaryClientForChannel()
  self:send_getPrimaryClientForChannel()
  return self:recv_getPrimaryClientForChannel()
end

function ChannelApplicationProvidedServiceClient:send_getPrimaryClientForChannel()
  self.oprot:writeMessageBegin('getPrimaryClientForChannel', TMessageType.CALL, self._seqid)
  local args = getPrimaryClientForChannel_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getPrimaryClientForChannel()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getPrimaryClientForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getProfileForChannel()
  self:send_getProfileForChannel()
  return self:recv_getProfileForChannel()
end

function ChannelApplicationProvidedServiceClient:send_getProfileForChannel()
  self.oprot:writeMessageBegin('getProfileForChannel', TMessageType.CALL, self._seqid)
  local args = getProfileForChannel_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getProfileForChannel()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getProfileForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getSimpleChannelContacts(ids)
  self:send_getSimpleChannelContacts(ids)
  return self:recv_getSimpleChannelContacts(ids)
end

function ChannelApplicationProvidedServiceClient:send_getSimpleChannelContacts(ids)
  self.oprot:writeMessageBegin('getSimpleChannelContacts', TMessageType.CALL, self._seqid)
  local args = getSimpleChannelContacts_args:new{}
  args.ids = ids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getSimpleChannelContacts(ids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSimpleChannelContacts_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getUserCountryForBilling(country, remoteIp)
  self:send_getUserCountryForBilling(country, remoteIp)
  return self:recv_getUserCountryForBilling(country, remoteIp)
end

function ChannelApplicationProvidedServiceClient:send_getUserCountryForBilling(country, remoteIp)
  self.oprot:writeMessageBegin('getUserCountryForBilling', TMessageType.CALL, self._seqid)
  local args = getUserCountryForBilling_args:new{}
  args.country = country
  args.remoteIp = remoteIp
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getUserCountryForBilling(country, remoteIp)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getUserCountryForBilling_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getUserCreateTime()
  self:send_getUserCreateTime()
  return self:recv_getUserCreateTime()
end

function ChannelApplicationProvidedServiceClient:send_getUserCreateTime()
  self.oprot:writeMessageBegin('getUserCreateTime', TMessageType.CALL, self._seqid)
  local args = getUserCreateTime_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getUserCreateTime()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getUserCreateTime_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getUserIdentities()
  self:send_getUserIdentities()
  return self:recv_getUserIdentities()
end

function ChannelApplicationProvidedServiceClient:send_getUserIdentities()
  self.oprot:writeMessageBegin('getUserIdentities', TMessageType.CALL, self._seqid)
  local args = getUserIdentities_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getUserIdentities()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getUserIdentities_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getUserLanguage()
  self:send_getUserLanguage()
  return self:recv_getUserLanguage()
end

function ChannelApplicationProvidedServiceClient:send_getUserLanguage()
  self.oprot:writeMessageBegin('getUserLanguage', TMessageType.CALL, self._seqid)
  local args = getUserLanguage_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getUserLanguage()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getUserLanguage_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:getUserMidsWhoAddedMe()
  self:send_getUserMidsWhoAddedMe()
  return self:recv_getUserMidsWhoAddedMe()
end

function ChannelApplicationProvidedServiceClient:send_getUserMidsWhoAddedMe()
  self.oprot:writeMessageBegin('getUserMidsWhoAddedMe', TMessageType.CALL, self._seqid)
  local args = getUserMidsWhoAddedMe_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_getUserMidsWhoAddedMe()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getUserMidsWhoAddedMe_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:isGroupMember(groupId)
  self:send_isGroupMember(groupId)
  return self:recv_isGroupMember(groupId)
end

function ChannelApplicationProvidedServiceClient:send_isGroupMember(groupId)
  self.oprot:writeMessageBegin('isGroupMember', TMessageType.CALL, self._seqid)
  local args = isGroupMember_args:new{}
  args.groupId = groupId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_isGroupMember(groupId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = isGroupMember_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:isInContact(mid)
  self:send_isInContact(mid)
  return self:recv_isInContact(mid)
end

function ChannelApplicationProvidedServiceClient:send_isInContact(mid)
  self.oprot:writeMessageBegin('isInContact', TMessageType.CALL, self._seqid)
  local args = isInContact_args:new{}
  args.mid = mid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_isInContact(mid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = isInContact_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:registerChannelCP(cpId, registerPassword)
  self:send_registerChannelCP(cpId, registerPassword)
  return self:recv_registerChannelCP(cpId, registerPassword)
end

function ChannelApplicationProvidedServiceClient:send_registerChannelCP(cpId, registerPassword)
  self.oprot:writeMessageBegin('registerChannelCP', TMessageType.CALL, self._seqid)
  local args = registerChannelCP_args:new{}
  args.cpId = cpId
  args.registerPassword = registerPassword
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_registerChannelCP(cpId, registerPassword)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = registerChannelCP_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:removeNotificationStatus(notificationStatus)
  self:send_removeNotificationStatus(notificationStatus)
  self:recv_removeNotificationStatus(notificationStatus)
end

function ChannelApplicationProvidedServiceClient:send_removeNotificationStatus(notificationStatus)
  self.oprot:writeMessageBegin('removeNotificationStatus', TMessageType.CALL, self._seqid)
  local args = removeNotificationStatus_args:new{}
  args.notificationStatus = notificationStatus
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_removeNotificationStatus(notificationStatus)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = removeNotificationStatus_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ChannelApplicationProvidedServiceClient:sendMessageForChannel(message)
  self:send_sendMessageForChannel(message)
  return self:recv_sendMessageForChannel(message)
end

function ChannelApplicationProvidedServiceClient:send_sendMessageForChannel(message)
  self.oprot:writeMessageBegin('sendMessageForChannel', TMessageType.CALL, self._seqid)
  local args = sendMessageForChannel_args:new{}
  args.message = message
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_sendMessageForChannel(message)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendMessageForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ChannelApplicationProvidedServiceClient:sendPinCodeOperation(verifier)
  self:send_sendPinCodeOperation(verifier)
  self:recv_sendPinCodeOperation(verifier)
end

function ChannelApplicationProvidedServiceClient:send_sendPinCodeOperation(verifier)
  self.oprot:writeMessageBegin('sendPinCodeOperation', TMessageType.CALL, self._seqid)
  local args = sendPinCodeOperation_args:new{}
  args.verifier = verifier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_sendPinCodeOperation(verifier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendPinCodeOperation_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ChannelApplicationProvidedServiceClient:updateProfileAttributeForChannel(profileAttribute, value)
  self:send_updateProfileAttributeForChannel(profileAttribute, value)
  self:recv_updateProfileAttributeForChannel(profileAttribute, value)
end

function ChannelApplicationProvidedServiceClient:send_updateProfileAttributeForChannel(profileAttribute, value)
  self.oprot:writeMessageBegin('updateProfileAttributeForChannel', TMessageType.CALL, self._seqid)
  local args = updateProfileAttributeForChannel_args:new{}
  args.profileAttribute = profileAttribute
  args.value = value
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ChannelApplicationProvidedServiceClient:recv_updateProfileAttributeForChannel(profileAttribute, value)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateProfileAttributeForChannel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end
ChannelApplicationProvidedServiceIface = __TObject:new{
  __type = 'ChannelApplicationProvidedServiceIface'
}


ChannelApplicationProvidedServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'ChannelApplicationProvidedServiceProcessor'
})

function ChannelApplicationProvidedServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function ChannelApplicationProvidedServiceProcessor:process_activeBuddySubscriberCount(seqid, iprot, oprot, server_ctx)
  local args = activeBuddySubscriberCount_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = activeBuddySubscriberCount_result:new{}
  local status, res = pcall(self.handler.activeBuddySubscriberCount, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('activeBuddySubscriberCount', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_addOperationForChannel(seqid, iprot, oprot, server_ctx)
  local args = addOperationForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = addOperationForChannel_result:new{}
  local status, res = pcall(self.handler.addOperationForChannel, self.handler, args.opType, args.param1, args.param2, args.param3)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('addOperationForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_displayBuddySubscriberCount(seqid, iprot, oprot, server_ctx)
  local args = displayBuddySubscriberCount_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = displayBuddySubscriberCount_result:new{}
  local status, res = pcall(self.handler.displayBuddySubscriberCount, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('displayBuddySubscriberCount', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_findContactByUseridWithoutAbuseBlockForChannel(seqid, iprot, oprot, server_ctx)
  local args = findContactByUseridWithoutAbuseBlockForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = findContactByUseridWithoutAbuseBlockForChannel_result:new{}
  local status, res = pcall(self.handler.findContactByUseridWithoutAbuseBlockForChannel, self.handler, args.userid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('findContactByUseridWithoutAbuseBlockForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getAllContactIdsForChannel(seqid, iprot, oprot, server_ctx)
  local args = getAllContactIdsForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getAllContactIdsForChannel_result:new{}
  local status, res = pcall(self.handler.getAllContactIdsForChannel, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getAllContactIdsForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getCompactContacts(seqid, iprot, oprot, server_ctx)
  local args = getCompactContacts_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getCompactContacts_result:new{}
  local status, res = pcall(self.handler.getCompactContacts, self.handler, args.lastModifiedTimestamp)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getCompactContacts', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getContactsForChannel(seqid, iprot, oprot, server_ctx)
  local args = getContactsForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getContactsForChannel_result:new{}
  local status, res = pcall(self.handler.getContactsForChannel, self.handler, args.ids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getContactsForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getDisplayName(seqid, iprot, oprot, server_ctx)
  local args = getDisplayName_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getDisplayName_result:new{}
  local status, res = pcall(self.handler.getDisplayName, self.handler, args.mid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getDisplayName', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getFavoriteMidsForChannel(seqid, iprot, oprot, server_ctx)
  local args = getFavoriteMidsForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getFavoriteMidsForChannel_result:new{}
  local status, res = pcall(self.handler.getFavoriteMidsForChannel, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getFavoriteMidsForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getFriendMids(seqid, iprot, oprot, server_ctx)
  local args = getFriendMids_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getFriendMids_result:new{}
  local status, res = pcall(self.handler.getFriendMids, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getFriendMids', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getGroupMemberMids(seqid, iprot, oprot, server_ctx)
  local args = getGroupMemberMids_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getGroupMemberMids_result:new{}
  local status, res = pcall(self.handler.getGroupMemberMids, self.handler, args.groupId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getGroupMemberMids', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getGroupsForChannel(seqid, iprot, oprot, server_ctx)
  local args = getGroupsForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getGroupsForChannel_result:new{}
  local status, res = pcall(self.handler.getGroupsForChannel, self.handler, args.groupIds)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getGroupsForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getIdentityCredential(seqid, iprot, oprot, server_ctx)
  local args = getIdentityCredential_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getIdentityCredential_result:new{}
  local status, res = pcall(self.handler.getIdentityCredential, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getIdentityCredential', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getJoinedGroupIdsForChannel(seqid, iprot, oprot, server_ctx)
  local args = getJoinedGroupIdsForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getJoinedGroupIdsForChannel_result:new{}
  local status, res = pcall(self.handler.getJoinedGroupIdsForChannel, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getJoinedGroupIdsForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getMetaProfile(seqid, iprot, oprot, server_ctx)
  local args = getMetaProfile_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getMetaProfile_result:new{}
  local status, res = pcall(self.handler.getMetaProfile, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getMetaProfile', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getMid(seqid, iprot, oprot, server_ctx)
  local args = getMid_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getMid_result:new{}
  local status, res = pcall(self.handler.getMid, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getMid', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getPrimaryClientForChannel(seqid, iprot, oprot, server_ctx)
  local args = getPrimaryClientForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getPrimaryClientForChannel_result:new{}
  local status, res = pcall(self.handler.getPrimaryClientForChannel, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getPrimaryClientForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getProfileForChannel(seqid, iprot, oprot, server_ctx)
  local args = getProfileForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getProfileForChannel_result:new{}
  local status, res = pcall(self.handler.getProfileForChannel, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getProfileForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getSimpleChannelContacts(seqid, iprot, oprot, server_ctx)
  local args = getSimpleChannelContacts_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSimpleChannelContacts_result:new{}
  local status, res = pcall(self.handler.getSimpleChannelContacts, self.handler, args.ids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSimpleChannelContacts', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getUserCountryForBilling(seqid, iprot, oprot, server_ctx)
  local args = getUserCountryForBilling_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getUserCountryForBilling_result:new{}
  local status, res = pcall(self.handler.getUserCountryForBilling, self.handler, args.country, args.remoteIp)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getUserCountryForBilling', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getUserCreateTime(seqid, iprot, oprot, server_ctx)
  local args = getUserCreateTime_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getUserCreateTime_result:new{}
  local status, res = pcall(self.handler.getUserCreateTime, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getUserCreateTime', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getUserIdentities(seqid, iprot, oprot, server_ctx)
  local args = getUserIdentities_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getUserIdentities_result:new{}
  local status, res = pcall(self.handler.getUserIdentities, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getUserIdentities', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getUserLanguage(seqid, iprot, oprot, server_ctx)
  local args = getUserLanguage_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getUserLanguage_result:new{}
  local status, res = pcall(self.handler.getUserLanguage, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getUserLanguage', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_getUserMidsWhoAddedMe(seqid, iprot, oprot, server_ctx)
  local args = getUserMidsWhoAddedMe_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getUserMidsWhoAddedMe_result:new{}
  local status, res = pcall(self.handler.getUserMidsWhoAddedMe, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getUserMidsWhoAddedMe', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_isGroupMember(seqid, iprot, oprot, server_ctx)
  local args = isGroupMember_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = isGroupMember_result:new{}
  local status, res = pcall(self.handler.isGroupMember, self.handler, args.groupId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('isGroupMember', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_isInContact(seqid, iprot, oprot, server_ctx)
  local args = isInContact_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = isInContact_result:new{}
  local status, res = pcall(self.handler.isInContact, self.handler, args.mid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('isInContact', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_registerChannelCP(seqid, iprot, oprot, server_ctx)
  local args = registerChannelCP_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = registerChannelCP_result:new{}
  local status, res = pcall(self.handler.registerChannelCP, self.handler, args.cpId, args.registerPassword)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('registerChannelCP', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_removeNotificationStatus(seqid, iprot, oprot, server_ctx)
  local args = removeNotificationStatus_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = removeNotificationStatus_result:new{}
  local status, res = pcall(self.handler.removeNotificationStatus, self.handler, args.notificationStatus)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('removeNotificationStatus', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_sendMessageForChannel(seqid, iprot, oprot, server_ctx)
  local args = sendMessageForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendMessageForChannel_result:new{}
  local status, res = pcall(self.handler.sendMessageForChannel, self.handler, args.message)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendMessageForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_sendPinCodeOperation(seqid, iprot, oprot, server_ctx)
  local args = sendPinCodeOperation_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendPinCodeOperation_result:new{}
  local status, res = pcall(self.handler.sendPinCodeOperation, self.handler, args.verifier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendPinCodeOperation', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ChannelApplicationProvidedServiceProcessor:process_updateProfileAttributeForChannel(seqid, iprot, oprot, server_ctx)
  local args = updateProfileAttributeForChannel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateProfileAttributeForChannel_result:new{}
  local status, res = pcall(self.handler.updateProfileAttributeForChannel, self.handler, args.profileAttribute, args.value)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateProfileAttributeForChannel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

activeBuddySubscriberCount_args = __TObject:new{

}

function activeBuddySubscriberCount_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function activeBuddySubscriberCount_args:write(oprot)
  oprot:writeStructBegin('activeBuddySubscriberCount_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

activeBuddySubscriberCount_result = __TObject:new{
  success,
  e
}

function activeBuddySubscriberCount_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I64 then
        self.success = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function activeBuddySubscriberCount_result:write(oprot)
  oprot:writeStructBegin('activeBuddySubscriberCount_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.I64, 0)
    oprot:writeI64(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

addOperationForChannel_args = __TObject:new{
  opType,
  param1,
  param2,
  param3
}

function addOperationForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.opType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.param1 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.param2 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.param3 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function addOperationForChannel_args:write(oprot)
  oprot:writeStructBegin('addOperationForChannel_args')
  if self.opType ~= nil then
    oprot:writeFieldBegin('opType', TType.I32, 1)
    oprot:writeI32(self.opType)
    oprot:writeFieldEnd()
  end
  if self.param1 ~= nil then
    oprot:writeFieldBegin('param1', TType.STRING, 2)
    oprot:writeString(self.param1)
    oprot:writeFieldEnd()
  end
  if self.param2 ~= nil then
    oprot:writeFieldBegin('param2', TType.STRING, 3)
    oprot:writeString(self.param2)
    oprot:writeFieldEnd()
  end
  if self.param3 ~= nil then
    oprot:writeFieldBegin('param3', TType.STRING, 4)
    oprot:writeString(self.param3)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

addOperationForChannel_result = __TObject:new{
  e
}

function addOperationForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function addOperationForChannel_result:write(oprot)
  oprot:writeStructBegin('addOperationForChannel_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

displayBuddySubscriberCount_args = __TObject:new{

}

function displayBuddySubscriberCount_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function displayBuddySubscriberCount_args:write(oprot)
  oprot:writeStructBegin('displayBuddySubscriberCount_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

displayBuddySubscriberCount_result = __TObject:new{
  success,
  e
}

function displayBuddySubscriberCount_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I64 then
        self.success = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function displayBuddySubscriberCount_result:write(oprot)
  oprot:writeStructBegin('displayBuddySubscriberCount_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.I64, 0)
    oprot:writeI64(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

findContactByUseridWithoutAbuseBlockForChannel_args = __TObject:new{
  userid
}

function findContactByUseridWithoutAbuseBlockForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.userid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findContactByUseridWithoutAbuseBlockForChannel_args:write(oprot)
  oprot:writeStructBegin('findContactByUseridWithoutAbuseBlockForChannel_args')
  if self.userid ~= nil then
    oprot:writeFieldBegin('userid', TType.STRING, 2)
    oprot:writeString(self.userid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

findContactByUseridWithoutAbuseBlockForChannel_result = __TObject:new{
  success,
  e
}

function findContactByUseridWithoutAbuseBlockForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Contact:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findContactByUseridWithoutAbuseBlockForChannel_result:write(oprot)
  oprot:writeStructBegin('findContactByUseridWithoutAbuseBlockForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getAllContactIdsForChannel_args = __TObject:new{

}

function getAllContactIdsForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getAllContactIdsForChannel_args:write(oprot)
  oprot:writeStructBegin('getAllContactIdsForChannel_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getAllContactIdsForChannel_result = __TObject:new{
  success,
  e
}

function getAllContactIdsForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1011, _size1008 = iprot:readListBegin()
        for _i=1,_size1008 do
          local _elem1012 = iprot:readString()
          table.insert(self.success, _elem1012)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getAllContactIdsForChannel_result:write(oprot)
  oprot:writeStructBegin('getAllContactIdsForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter1013 in ipairs(self.success) do
      oprot:writeString(iter1013)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getCompactContacts_args = __TObject:new{
  lastModifiedTimestamp
}

function getCompactContacts_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.lastModifiedTimestamp = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCompactContacts_args:write(oprot)
  oprot:writeStructBegin('getCompactContacts_args')
  if self.lastModifiedTimestamp ~= nil then
    oprot:writeFieldBegin('lastModifiedTimestamp', TType.I64, 2)
    oprot:writeI64(self.lastModifiedTimestamp)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getCompactContacts_result = __TObject:new{
  success,
  e
}

function getCompactContacts_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1017, _size1014 = iprot:readListBegin()
        for _i=1,_size1014 do
          local _elem1018 = CompactContact:new{}
          _elem1018:read(iprot)
          table.insert(self.success, _elem1018)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCompactContacts_result:write(oprot)
  oprot:writeStructBegin('getCompactContacts_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter1019 in ipairs(self.success) do
      iter1019:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getContactsForChannel_args = __TObject:new{
  ids
}

function getContactsForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.ids = {}
        local _etype1023, _size1020 = iprot:readListBegin()
        for _i=1,_size1020 do
          local _elem1024 = iprot:readString()
          table.insert(self.ids, _elem1024)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getContactsForChannel_args:write(oprot)
  oprot:writeStructBegin('getContactsForChannel_args')
  if self.ids ~= nil then
    oprot:writeFieldBegin('ids', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.ids)
    for _,iter1025 in ipairs(self.ids) do
      oprot:writeString(iter1025)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getContactsForChannel_result = __TObject:new{
  success,
  e
}

function getContactsForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1029, _size1026 = iprot:readListBegin()
        for _i=1,_size1026 do
          local _elem1030 = Contact:new{}
          _elem1030:read(iprot)
          table.insert(self.success, _elem1030)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getContactsForChannel_result:write(oprot)
  oprot:writeStructBegin('getContactsForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter1031 in ipairs(self.success) do
      iter1031:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getDisplayName_args = __TObject:new{
  mid
}

function getDisplayName_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getDisplayName_args:write(oprot)
  oprot:writeStructBegin('getDisplayName_args')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 2)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getDisplayName_result = __TObject:new{
  success,
  e
}

function getDisplayName_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getDisplayName_result:write(oprot)
  oprot:writeStructBegin('getDisplayName_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getFavoriteMidsForChannel_args = __TObject:new{

}

function getFavoriteMidsForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getFavoriteMidsForChannel_args:write(oprot)
  oprot:writeStructBegin('getFavoriteMidsForChannel_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getFavoriteMidsForChannel_result = __TObject:new{
  success,
  e
}

function getFavoriteMidsForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1035, _size1032 = iprot:readListBegin()
        for _i=1,_size1032 do
          local _elem1036 = iprot:readString()
          table.insert(self.success, _elem1036)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getFavoriteMidsForChannel_result:write(oprot)
  oprot:writeStructBegin('getFavoriteMidsForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter1037 in ipairs(self.success) do
      oprot:writeString(iter1037)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getFriendMids_args = __TObject:new{

}

function getFriendMids_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getFriendMids_args:write(oprot)
  oprot:writeStructBegin('getFriendMids_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getFriendMids_result = __TObject:new{
  success,
  e
}

function getFriendMids_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1041, _size1038 = iprot:readListBegin()
        for _i=1,_size1038 do
          local _elem1042 = iprot:readString()
          table.insert(self.success, _elem1042)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getFriendMids_result:write(oprot)
  oprot:writeStructBegin('getFriendMids_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter1043 in ipairs(self.success) do
      oprot:writeString(iter1043)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getGroupMemberMids_args = __TObject:new{
  groupId
}

function getGroupMemberMids_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.groupId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getGroupMemberMids_args:write(oprot)
  oprot:writeStructBegin('getGroupMemberMids_args')
  if self.groupId ~= nil then
    oprot:writeFieldBegin('groupId', TType.STRING, 1)
    oprot:writeString(self.groupId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getGroupMemberMids_result = __TObject:new{
  success,
  e
}

function getGroupMemberMids_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1047, _size1044 = iprot:readListBegin()
        for _i=1,_size1044 do
          local _elem1048 = iprot:readString()
          table.insert(self.success, _elem1048)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getGroupMemberMids_result:write(oprot)
  oprot:writeStructBegin('getGroupMemberMids_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter1049 in ipairs(self.success) do
      oprot:writeString(iter1049)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getGroupsForChannel_args = __TObject:new{
  groupIds
}

function getGroupsForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.groupIds = {}
        local _etype1053, _size1050 = iprot:readListBegin()
        for _i=1,_size1050 do
          local _elem1054 = iprot:readString()
          table.insert(self.groupIds, _elem1054)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getGroupsForChannel_args:write(oprot)
  oprot:writeStructBegin('getGroupsForChannel_args')
  if self.groupIds ~= nil then
    oprot:writeFieldBegin('groupIds', TType.LIST, 1)
    oprot:writeListBegin(TType.STRING, #self.groupIds)
    for _,iter1055 in ipairs(self.groupIds) do
      oprot:writeString(iter1055)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getGroupsForChannel_result = __TObject:new{
  success,
  e
}

function getGroupsForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1059, _size1056 = iprot:readListBegin()
        for _i=1,_size1056 do
          local _elem1060 = Group:new{}
          _elem1060:read(iprot)
          table.insert(self.success, _elem1060)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getGroupsForChannel_result:write(oprot)
  oprot:writeStructBegin('getGroupsForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter1061 in ipairs(self.success) do
      iter1061:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getIdentityCredential_args = __TObject:new{

}

function getIdentityCredential_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getIdentityCredential_args:write(oprot)
  oprot:writeStructBegin('getIdentityCredential_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getIdentityCredential_result = __TObject:new{
  success,
  e
}

function getIdentityCredential_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = IdentityCredential:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getIdentityCredential_result:write(oprot)
  oprot:writeStructBegin('getIdentityCredential_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getJoinedGroupIdsForChannel_args = __TObject:new{

}

function getJoinedGroupIdsForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getJoinedGroupIdsForChannel_args:write(oprot)
  oprot:writeStructBegin('getJoinedGroupIdsForChannel_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getJoinedGroupIdsForChannel_result = __TObject:new{
  success,
  e
}

function getJoinedGroupIdsForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1065, _size1062 = iprot:readListBegin()
        for _i=1,_size1062 do
          local _elem1066 = iprot:readString()
          table.insert(self.success, _elem1066)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getJoinedGroupIdsForChannel_result:write(oprot)
  oprot:writeStructBegin('getJoinedGroupIdsForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter1067 in ipairs(self.success) do
      oprot:writeString(iter1067)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getMetaProfile_args = __TObject:new{

}

function getMetaProfile_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getMetaProfile_args:write(oprot)
  oprot:writeStructBegin('getMetaProfile_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getMetaProfile_result = __TObject:new{
  success,
  e
}

function getMetaProfile_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = MetaProfile:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getMetaProfile_result:write(oprot)
  oprot:writeStructBegin('getMetaProfile_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getMid_args = __TObject:new{

}

function getMid_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getMid_args:write(oprot)
  oprot:writeStructBegin('getMid_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getMid_result = __TObject:new{
  success,
  e
}

function getMid_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getMid_result:write(oprot)
  oprot:writeStructBegin('getMid_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPrimaryClientForChannel_args = __TObject:new{

}

function getPrimaryClientForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPrimaryClientForChannel_args:write(oprot)
  oprot:writeStructBegin('getPrimaryClientForChannel_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPrimaryClientForChannel_result = __TObject:new{
  success,
  e
}

function getPrimaryClientForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SimpleChannelClient:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPrimaryClientForChannel_result:write(oprot)
  oprot:writeStructBegin('getPrimaryClientForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getProfileForChannel_args = __TObject:new{

}

function getProfileForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getProfileForChannel_args:write(oprot)
  oprot:writeStructBegin('getProfileForChannel_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getProfileForChannel_result = __TObject:new{
  success,
  e
}

function getProfileForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Profile:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getProfileForChannel_result:write(oprot)
  oprot:writeStructBegin('getProfileForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSimpleChannelContacts_args = __TObject:new{
  ids
}

function getSimpleChannelContacts_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.ids = {}
        local _etype1071, _size1068 = iprot:readListBegin()
        for _i=1,_size1068 do
          local _elem1072 = iprot:readString()
          table.insert(self.ids, _elem1072)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSimpleChannelContacts_args:write(oprot)
  oprot:writeStructBegin('getSimpleChannelContacts_args')
  if self.ids ~= nil then
    oprot:writeFieldBegin('ids', TType.LIST, 1)
    oprot:writeListBegin(TType.STRING, #self.ids)
    for _,iter1073 in ipairs(self.ids) do
      oprot:writeString(iter1073)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSimpleChannelContacts_result = __TObject:new{
  success,
  e
}

function getSimpleChannelContacts_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1077, _size1074 = iprot:readListBegin()
        for _i=1,_size1074 do
          local _elem1078 = SimpleChannelContact:new{}
          _elem1078:read(iprot)
          table.insert(self.success, _elem1078)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSimpleChannelContacts_result:write(oprot)
  oprot:writeStructBegin('getSimpleChannelContacts_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter1079 in ipairs(self.success) do
      iter1079:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserCountryForBilling_args = __TObject:new{
  country,
  remoteIp
}

function getUserCountryForBilling_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.country = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.remoteIp = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserCountryForBilling_args:write(oprot)
  oprot:writeStructBegin('getUserCountryForBilling_args')
  if self.country ~= nil then
    oprot:writeFieldBegin('country', TType.STRING, 2)
    oprot:writeString(self.country)
    oprot:writeFieldEnd()
  end
  if self.remoteIp ~= nil then
    oprot:writeFieldBegin('remoteIp', TType.STRING, 3)
    oprot:writeString(self.remoteIp)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserCountryForBilling_result = __TObject:new{
  success,
  e
}

function getUserCountryForBilling_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserCountryForBilling_result:write(oprot)
  oprot:writeStructBegin('getUserCountryForBilling_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserCreateTime_args = __TObject:new{

}

function getUserCreateTime_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserCreateTime_args:write(oprot)
  oprot:writeStructBegin('getUserCreateTime_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserCreateTime_result = __TObject:new{
  success,
  e
}

function getUserCreateTime_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I64 then
        self.success = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserCreateTime_result:write(oprot)
  oprot:writeStructBegin('getUserCreateTime_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.I64, 0)
    oprot:writeI64(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserIdentities_args = __TObject:new{

}

function getUserIdentities_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserIdentities_args:write(oprot)
  oprot:writeStructBegin('getUserIdentities_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserIdentities_result = __TObject:new{
  success,
  e
}

function getUserIdentities_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.MAP then
        self.success = {}
        local _ktype1081, _vtype1082, _size1080 = iprot:readMapBegin() 
        for _i=1,_size1080 do
          local _key1084 = iprot:readI32()
          local _val1085 = iprot:readString()
          self.success[_key1084] = _val1085
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserIdentities_result:write(oprot)
  oprot:writeStructBegin('getUserIdentities_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.MAP, 0)
    oprot:writeMapBegin(TType.I32, TType.STRING, ttable_size(self.success))
    for kiter1086,viter1087 in pairs(self.success) do
      oprot:writeI32(kiter1086)
      oprot:writeString(viter1087)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserLanguage_args = __TObject:new{

}

function getUserLanguage_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserLanguage_args:write(oprot)
  oprot:writeStructBegin('getUserLanguage_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserLanguage_result = __TObject:new{
  success,
  e
}

function getUserLanguage_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserLanguage_result:write(oprot)
  oprot:writeStructBegin('getUserLanguage_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserMidsWhoAddedMe_args = __TObject:new{

}

function getUserMidsWhoAddedMe_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserMidsWhoAddedMe_args:write(oprot)
  oprot:writeStructBegin('getUserMidsWhoAddedMe_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUserMidsWhoAddedMe_result = __TObject:new{
  success,
  e
}

function getUserMidsWhoAddedMe_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1091, _size1088 = iprot:readListBegin()
        for _i=1,_size1088 do
          local _elem1092 = iprot:readString()
          table.insert(self.success, _elem1092)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUserMidsWhoAddedMe_result:write(oprot)
  oprot:writeStructBegin('getUserMidsWhoAddedMe_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter1093 in ipairs(self.success) do
      oprot:writeString(iter1093)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

isGroupMember_args = __TObject:new{
  groupId
}

function isGroupMember_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.groupId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function isGroupMember_args:write(oprot)
  oprot:writeStructBegin('isGroupMember_args')
  if self.groupId ~= nil then
    oprot:writeFieldBegin('groupId', TType.STRING, 1)
    oprot:writeString(self.groupId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

isGroupMember_result = __TObject:new{
  success,
  e
}

function isGroupMember_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function isGroupMember_result:write(oprot)
  oprot:writeStructBegin('isGroupMember_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

isInContact_args = __TObject:new{
  mid
}

function isInContact_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function isInContact_args:write(oprot)
  oprot:writeStructBegin('isInContact_args')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 2)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

isInContact_result = __TObject:new{
  success,
  e
}

function isInContact_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function isInContact_result:write(oprot)
  oprot:writeStructBegin('isInContact_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

registerChannelCP_args = __TObject:new{
  cpId,
  registerPassword
}

function registerChannelCP_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.cpId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.registerPassword = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function registerChannelCP_args:write(oprot)
  oprot:writeStructBegin('registerChannelCP_args')
  if self.cpId ~= nil then
    oprot:writeFieldBegin('cpId', TType.STRING, 2)
    oprot:writeString(self.cpId)
    oprot:writeFieldEnd()
  end
  if self.registerPassword ~= nil then
    oprot:writeFieldBegin('registerPassword', TType.STRING, 3)
    oprot:writeString(self.registerPassword)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

registerChannelCP_result = __TObject:new{
  success,
  e
}

function registerChannelCP_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function registerChannelCP_result:write(oprot)
  oprot:writeStructBegin('registerChannelCP_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

removeNotificationStatus_args = __TObject:new{
  notificationStatus
}

function removeNotificationStatus_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.notificationStatus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function removeNotificationStatus_args:write(oprot)
  oprot:writeStructBegin('removeNotificationStatus_args')
  if self.notificationStatus ~= nil then
    oprot:writeFieldBegin('notificationStatus', TType.I32, 2)
    oprot:writeI32(self.notificationStatus)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

removeNotificationStatus_result = __TObject:new{
  e
}

function removeNotificationStatus_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function removeNotificationStatus_result:write(oprot)
  oprot:writeStructBegin('removeNotificationStatus_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendMessageForChannel_args = __TObject:new{
  message
}

function sendMessageForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.message = Message:new{}
        self.message:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendMessageForChannel_args:write(oprot)
  oprot:writeStructBegin('sendMessageForChannel_args')
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRUCT, 2)
    self.message:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendMessageForChannel_result = __TObject:new{
  success,
  e
}

function sendMessageForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Message:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendMessageForChannel_result:write(oprot)
  oprot:writeStructBegin('sendMessageForChannel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendPinCodeOperation_args = __TObject:new{
  verifier
}

function sendPinCodeOperation_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.verifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendPinCodeOperation_args:write(oprot)
  oprot:writeStructBegin('sendPinCodeOperation_args')
  if self.verifier ~= nil then
    oprot:writeFieldBegin('verifier', TType.STRING, 1)
    oprot:writeString(self.verifier)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendPinCodeOperation_result = __TObject:new{
  e
}

function sendPinCodeOperation_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendPinCodeOperation_result:write(oprot)
  oprot:writeStructBegin('sendPinCodeOperation_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateProfileAttributeForChannel_args = __TObject:new{
  profileAttribute,
  value
}

function updateProfileAttributeForChannel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.profileAttribute = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.value = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateProfileAttributeForChannel_args:write(oprot)
  oprot:writeStructBegin('updateProfileAttributeForChannel_args')
  if self.profileAttribute ~= nil then
    oprot:writeFieldBegin('profileAttribute', TType.I32, 2)
    oprot:writeI32(self.profileAttribute)
    oprot:writeFieldEnd()
  end
  if self.value ~= nil then
    oprot:writeFieldBegin('value', TType.STRING, 3)
    oprot:writeString(self.value)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateProfileAttributeForChannel_result = __TObject:new{
  e
}

function updateProfileAttributeForChannel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateProfileAttributeForChannel_result:write(oprot)
  oprot:writeStructBegin('updateProfileAttributeForChannel_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end