--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'line_ttypes'

SquareServiceClient = __TObject.new(__TClient, {
  __type = 'SquareServiceClient'
})

function SquareServiceClient:getSquareChatAnnouncements(request)
  self:send_getSquareChatAnnouncements(request)
  return self:recv_getSquareChatAnnouncements(request)
end

function SquareServiceClient:send_getSquareChatAnnouncements(request)
  self.oprot:writeMessageBegin('getSquareChatAnnouncements', TMessageType.CALL, self._seqid)
  local args = getSquareChatAnnouncements_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getSquareChatAnnouncements(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSquareChatAnnouncements_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:deleteSquareChatAnnouncement(request)
  self:send_deleteSquareChatAnnouncement(request)
  return self:recv_deleteSquareChatAnnouncement(request)
end

function SquareServiceClient:send_deleteSquareChatAnnouncement(request)
  self.oprot:writeMessageBegin('deleteSquareChatAnnouncement', TMessageType.CALL, self._seqid)
  local args = deleteSquareChatAnnouncement_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_deleteSquareChatAnnouncement(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = deleteSquareChatAnnouncement_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:createSquareChatAnnouncement(request)
  self:send_createSquareChatAnnouncement(request)
  return self:recv_createSquareChatAnnouncement(request)
end

function SquareServiceClient:send_createSquareChatAnnouncement(request)
  self.oprot:writeMessageBegin('createSquareChatAnnouncement', TMessageType.CALL, self._seqid)
  local args = createSquareChatAnnouncement_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_createSquareChatAnnouncement(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = createSquareChatAnnouncement_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:getNoteStatus(request)
  self:send_getNoteStatus(request)
  return self:recv_getNoteStatus(request)
end

function SquareServiceClient:send_getNoteStatus(request)
  self.oprot:writeMessageBegin('getNoteStatus', TMessageType.CALL, self._seqid)
  local args = getNoteStatus_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getNoteStatus(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getNoteStatus_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:getSquareStatus(request)
  self:send_getSquareStatus(request)
  return self:recv_getSquareStatus(request)
end

function SquareServiceClient:send_getSquareStatus(request)
  self.oprot:writeMessageBegin('getSquareStatus', TMessageType.CALL, self._seqid)
  local args = getSquareStatus_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getSquareStatus(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSquareStatus_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:reportSquareMember(request)
  self:send_reportSquareMember(request)
  return self:recv_reportSquareMember(request)
end

function SquareServiceClient:send_reportSquareMember(request)
  self.oprot:writeMessageBegin('reportSquareMember', TMessageType.CALL, self._seqid)
  local args = reportSquareMember_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_reportSquareMember(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = reportSquareMember_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:reportSquareMessage(request)
  self:send_reportSquareMessage(request)
  return self:recv_reportSquareMessage(request)
end

function SquareServiceClient:send_reportSquareMessage(request)
  self.oprot:writeMessageBegin('reportSquareMessage', TMessageType.CALL, self._seqid)
  local args = reportSquareMessage_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_reportSquareMessage(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = reportSquareMessage_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:reportSquareChat(request)
  self:send_reportSquareChat(request)
  return self:recv_reportSquareChat(request)
end

function SquareServiceClient:send_reportSquareChat(request)
  self.oprot:writeMessageBegin('reportSquareChat', TMessageType.CALL, self._seqid)
  local args = reportSquareChat_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_reportSquareChat(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = reportSquareChat_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:reportSquare(request)
  self:send_reportSquare(request)
  return self:recv_reportSquare(request)
end

function SquareServiceClient:send_reportSquare(request)
  self.oprot:writeMessageBegin('reportSquare', TMessageType.CALL, self._seqid)
  local args = reportSquare_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_reportSquare(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = reportSquare_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:updateSquareMemberRelation(request)
  self:send_updateSquareMemberRelation(request)
  return self:recv_updateSquareMemberRelation(request)
end

function SquareServiceClient:send_updateSquareMemberRelation(request)
  self.oprot:writeMessageBegin('updateSquareMemberRelation', TMessageType.CALL, self._seqid)
  local args = updateSquareMemberRelation_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_updateSquareMemberRelation(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateSquareMemberRelation_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:updateSquareAuthority(request)
  self:send_updateSquareAuthority(request)
  return self:recv_updateSquareAuthority(request)
end

function SquareServiceClient:send_updateSquareAuthority(request)
  self.oprot:writeMessageBegin('updateSquareAuthority', TMessageType.CALL, self._seqid)
  local args = updateSquareAuthority_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_updateSquareAuthority(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateSquareAuthority_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:updateSquareChatMember(request)
  self:send_updateSquareChatMember(request)
  return self:recv_updateSquareChatMember(request)
end

function SquareServiceClient:send_updateSquareChatMember(request)
  self.oprot:writeMessageBegin('updateSquareChatMember', TMessageType.CALL, self._seqid)
  local args = updateSquareChatMember_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_updateSquareChatMember(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateSquareChatMember_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:updateSquareChat(request)
  self:send_updateSquareChat(request)
  return self:recv_updateSquareChat(request)
end

function SquareServiceClient:send_updateSquareChat(request)
  self.oprot:writeMessageBegin('updateSquareChat', TMessageType.CALL, self._seqid)
  local args = updateSquareChat_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_updateSquareChat(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateSquareChat_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:refreshSubscriptions(request)
  self:send_refreshSubscriptions(request)
  return self:recv_refreshSubscriptions(request)
end

function SquareServiceClient:send_refreshSubscriptions(request)
  self.oprot:writeMessageBegin('refreshSubscriptions', TMessageType.CALL, self._seqid)
  local args = refreshSubscriptions_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_refreshSubscriptions(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = refreshSubscriptions_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:removeSubscriptions(request)
  self:send_removeSubscriptions(request)
  return self:recv_removeSubscriptions(request)
end

function SquareServiceClient:send_removeSubscriptions(request)
  self.oprot:writeMessageBegin('removeSubscriptions', TMessageType.CALL, self._seqid)
  local args = removeSubscriptions_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_removeSubscriptions(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = removeSubscriptions_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:rejectSquareMembers(request)
  self:send_rejectSquareMembers(request)
  return self:recv_rejectSquareMembers(request)
end

function SquareServiceClient:send_rejectSquareMembers(request)
  self.oprot:writeMessageBegin('rejectSquareMembers', TMessageType.CALL, self._seqid)
  local args = rejectSquareMembers_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_rejectSquareMembers(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = rejectSquareMembers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:updateSquareMembers(request)
  self:send_updateSquareMembers(request)
  return self:recv_updateSquareMembers(request)
end

function SquareServiceClient:send_updateSquareMembers(request)
  self.oprot:writeMessageBegin('updateSquareMembers', TMessageType.CALL, self._seqid)
  local args = updateSquareMembers_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_updateSquareMembers(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateSquareMembers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:updateSquareMember(request)
  self:send_updateSquareMember(request)
  return self:recv_updateSquareMember(request)
end

function SquareServiceClient:send_updateSquareMember(request)
  self.oprot:writeMessageBegin('updateSquareMember', TMessageType.CALL, self._seqid)
  local args = updateSquareMember_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_updateSquareMember(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateSquareMember_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:updateSquareFeatureSet(request)
  self:send_updateSquareFeatureSet(request)
  return self:recv_updateSquareFeatureSet(request)
end

function SquareServiceClient:send_updateSquareFeatureSet(request)
  self.oprot:writeMessageBegin('updateSquareFeatureSet', TMessageType.CALL, self._seqid)
  local args = updateSquareFeatureSet_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_updateSquareFeatureSet(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateSquareFeatureSet_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:getSquareFeatureSet(request)
  self:send_getSquareFeatureSet(request)
  return self:recv_getSquareFeatureSet(request)
end

function SquareServiceClient:send_getSquareFeatureSet(request)
  self.oprot:writeMessageBegin('getSquareFeatureSet', TMessageType.CALL, self._seqid)
  local args = getSquareFeatureSet_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getSquareFeatureSet(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSquareFeatureSet_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:searchSquares(request)
  self:send_searchSquares(request)
  return self:recv_searchSquares(request)
end

function SquareServiceClient:send_searchSquares(request)
  self.oprot:writeMessageBegin('searchSquares', TMessageType.CALL, self._seqid)
  local args = searchSquares_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_searchSquares(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = searchSquares_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:updateSquare(request)
  self:send_updateSquare(request)
  return self:recv_updateSquare(request)
end

function SquareServiceClient:send_updateSquare(request)
  self.oprot:writeMessageBegin('updateSquare', TMessageType.CALL, self._seqid)
  local args = updateSquare_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_updateSquare(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateSquare_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:getCategories(request)
  self:send_getCategories(request)
  return self:recv_getCategories(request)
end

function SquareServiceClient:send_getCategories(request)
  self.oprot:writeMessageBegin('getCategories', TMessageType.CALL, self._seqid)
  local args = getCategories_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getCategories(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getCategories_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:searchSquareMembers(request)
  self:send_searchSquareMembers(request)
  return self:recv_searchSquareMembers(request)
end

function SquareServiceClient:send_searchSquareMembers(request)
  self.oprot:writeMessageBegin('searchSquareMembers', TMessageType.CALL, self._seqid)
  local args = searchSquareMembers_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_searchSquareMembers(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = searchSquareMembers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:fetchSquareChatEvents(request)
  self:send_fetchSquareChatEvents(request)
  return self:recv_fetchSquareChatEvents(request)
end

function SquareServiceClient:send_fetchSquareChatEvents(request)
  self.oprot:writeMessageBegin('fetchSquareChatEvents', TMessageType.CALL, self._seqid)
  local args = fetchSquareChatEvents_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_fetchSquareChatEvents(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = fetchSquareChatEvents_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:fetchMyEvents(request)
  self:send_fetchMyEvents(request)
  return self:recv_fetchMyEvents(request)
end

function SquareServiceClient:send_fetchMyEvents(request)
  self.oprot:writeMessageBegin('fetchMyEvents', TMessageType.CALL, self._seqid)
  local args = fetchMyEvents_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_fetchMyEvents(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = fetchMyEvents_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:markAsRead(request)
  self:send_markAsRead(request)
  return self:recv_markAsRead(request)
end

function SquareServiceClient:send_markAsRead(request)
  self.oprot:writeMessageBegin('markAsRead', TMessageType.CALL, self._seqid)
  local args = markAsRead_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_markAsRead(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = markAsRead_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:getSquareAuthority(request)
  self:send_getSquareAuthority(request)
  return self:recv_getSquareAuthority(request)
end

function SquareServiceClient:send_getSquareAuthority(request)
  self.oprot:writeMessageBegin('getSquareAuthority', TMessageType.CALL, self._seqid)
  local args = getSquareAuthority_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getSquareAuthority(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSquareAuthority_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:sendMessage(request)
  self:send_sendMessage(request)
  return self:recv_sendMessage(request)
end

function SquareServiceClient:send_sendMessage(request)
  self.oprot:writeMessageBegin('sendMessage', TMessageType.CALL, self._seqid)
  local args = sendMessage_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_sendMessage(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendMessage_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:leaveSquare(request)
  self:send_leaveSquare(request)
  return self:recv_leaveSquare(request)
end

function SquareServiceClient:send_leaveSquare(request)
  self.oprot:writeMessageBegin('leaveSquare', TMessageType.CALL, self._seqid)
  local args = leaveSquare_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_leaveSquare(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = leaveSquare_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:leaveSquareChat(request)
  self:send_leaveSquareChat(request)
  return self:recv_leaveSquareChat(request)
end

function SquareServiceClient:send_leaveSquareChat(request)
  self.oprot:writeMessageBegin('leaveSquareChat', TMessageType.CALL, self._seqid)
  local args = leaveSquareChat_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_leaveSquareChat(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = leaveSquareChat_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:joinSquareChat(request)
  self:send_joinSquareChat(request)
  return self:recv_joinSquareChat(request)
end

function SquareServiceClient:send_joinSquareChat(request)
  self.oprot:writeMessageBegin('joinSquareChat', TMessageType.CALL, self._seqid)
  local args = joinSquareChat_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_joinSquareChat(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = joinSquareChat_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:joinSquare(request)
  self:send_joinSquare(request)
  return self:recv_joinSquare(request)
end

function SquareServiceClient:send_joinSquare(request)
  self.oprot:writeMessageBegin('joinSquare', TMessageType.CALL, self._seqid)
  local args = joinSquare_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_joinSquare(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = joinSquare_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:inviteToSquare(request)
  self:send_inviteToSquare(request)
  return self:recv_inviteToSquare(request)
end

function SquareServiceClient:send_inviteToSquare(request)
  self.oprot:writeMessageBegin('inviteToSquare', TMessageType.CALL, self._seqid)
  local args = inviteToSquare_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_inviteToSquare(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = inviteToSquare_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:inviteToSquareChat(request)
  self:send_inviteToSquareChat(request)
  return self:recv_inviteToSquareChat(request)
end

function SquareServiceClient:send_inviteToSquareChat(request)
  self.oprot:writeMessageBegin('inviteToSquareChat', TMessageType.CALL, self._seqid)
  local args = inviteToSquareChat_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_inviteToSquareChat(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = inviteToSquareChat_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:getSquareMember(request)
  self:send_getSquareMember(request)
  return self:recv_getSquareMember(request)
end

function SquareServiceClient:send_getSquareMember(request)
  self.oprot:writeMessageBegin('getSquareMember', TMessageType.CALL, self._seqid)
  local args = getSquareMember_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getSquareMember(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSquareMember_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:getSquareMembers(request)
  self:send_getSquareMembers(request)
  return self:recv_getSquareMembers(request)
end

function SquareServiceClient:send_getSquareMembers(request)
  self.oprot:writeMessageBegin('getSquareMembers', TMessageType.CALL, self._seqid)
  local args = getSquareMembers_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getSquareMembers(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSquareMembers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:getSquareMemberRelation(request)
  self:send_getSquareMemberRelation(request)
  return self:recv_getSquareMemberRelation(request)
end

function SquareServiceClient:send_getSquareMemberRelation(request)
  self.oprot:writeMessageBegin('getSquareMemberRelation', TMessageType.CALL, self._seqid)
  local args = getSquareMemberRelation_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getSquareMemberRelation(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSquareMemberRelation_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:getSquareMemberRelations(request)
  self:send_getSquareMemberRelations(request)
  return self:recv_getSquareMemberRelations(request)
end

function SquareServiceClient:send_getSquareMemberRelations(request)
  self.oprot:writeMessageBegin('getSquareMemberRelations', TMessageType.CALL, self._seqid)
  local args = getSquareMemberRelations_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getSquareMemberRelations(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSquareMemberRelations_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:getSquareChatMembers(request)
  self:send_getSquareChatMembers(request)
  return self:recv_getSquareChatMembers(request)
end

function SquareServiceClient:send_getSquareChatMembers(request)
  self.oprot:writeMessageBegin('getSquareChatMembers', TMessageType.CALL, self._seqid)
  local args = getSquareChatMembers_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getSquareChatMembers(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSquareChatMembers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:getSquareChatStatus(request)
  self:send_getSquareChatStatus(request)
  return self:recv_getSquareChatStatus(request)
end

function SquareServiceClient:send_getSquareChatStatus(request)
  self.oprot:writeMessageBegin('getSquareChatStatus', TMessageType.CALL, self._seqid)
  local args = getSquareChatStatus_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getSquareChatStatus(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSquareChatStatus_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:getSquareChat(request)
  self:send_getSquareChat(request)
  return self:recv_getSquareChat(request)
end

function SquareServiceClient:send_getSquareChat(request)
  self.oprot:writeMessageBegin('getSquareChat', TMessageType.CALL, self._seqid)
  local args = getSquareChat_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getSquareChat(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSquareChat_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:getSquare(request)
  self:send_getSquare(request)
  return self:recv_getSquare(request)
end

function SquareServiceClient:send_getSquare(request)
  self.oprot:writeMessageBegin('getSquare', TMessageType.CALL, self._seqid)
  local args = getSquare_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getSquare(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSquare_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:getJoinedSquares(request)
  self:send_getJoinedSquares(request)
  return self:recv_getJoinedSquares(request)
end

function SquareServiceClient:send_getJoinedSquares(request)
  self.oprot:writeMessageBegin('getJoinedSquares', TMessageType.CALL, self._seqid)
  local args = getJoinedSquares_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getJoinedSquares(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getJoinedSquares_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:getJoinedSquareChats(request)
  self:send_getJoinedSquareChats(request)
  return self:recv_getJoinedSquareChats(request)
end

function SquareServiceClient:send_getJoinedSquareChats(request)
  self.oprot:writeMessageBegin('getJoinedSquareChats', TMessageType.CALL, self._seqid)
  local args = getJoinedSquareChats_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getJoinedSquareChats(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getJoinedSquareChats_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:approveSquareMembers(request)
  self:send_approveSquareMembers(request)
  return self:recv_approveSquareMembers(request)
end

function SquareServiceClient:send_approveSquareMembers(request)
  self.oprot:writeMessageBegin('approveSquareMembers', TMessageType.CALL, self._seqid)
  local args = approveSquareMembers_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_approveSquareMembers(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = approveSquareMembers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:createSquareChat(request)
  self:send_createSquareChat(request)
  return self:recv_createSquareChat(request)
end

function SquareServiceClient:send_createSquareChat(request)
  self.oprot:writeMessageBegin('createSquareChat', TMessageType.CALL, self._seqid)
  local args = createSquareChat_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_createSquareChat(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = createSquareChat_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:createSquare(request)
  self:send_createSquare(request)
  return self:recv_createSquare(request)
end

function SquareServiceClient:send_createSquare(request)
  self.oprot:writeMessageBegin('createSquare', TMessageType.CALL, self._seqid)
  local args = createSquare_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_createSquare(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = createSquare_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:deleteSquareChat(request)
  self:send_deleteSquareChat(request)
  return self:recv_deleteSquareChat(request)
end

function SquareServiceClient:send_deleteSquareChat(request)
  self.oprot:writeMessageBegin('deleteSquareChat', TMessageType.CALL, self._seqid)
  local args = deleteSquareChat_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_deleteSquareChat(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = deleteSquareChat_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:deleteSquare(request)
  self:send_deleteSquare(request)
  return self:recv_deleteSquare(request)
end

function SquareServiceClient:send_deleteSquare(request)
  self.oprot:writeMessageBegin('deleteSquare', TMessageType.CALL, self._seqid)
  local args = deleteSquare_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_deleteSquare(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = deleteSquare_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:destroyMessage(request)
  self:send_destroyMessage(request)
  return self:recv_destroyMessage(request)
end

function SquareServiceClient:send_destroyMessage(request)
  self.oprot:writeMessageBegin('destroyMessage', TMessageType.CALL, self._seqid)
  local args = destroyMessage_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_destroyMessage(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = destroyMessage_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:getJoinableSquareChats(request)
  self:send_getJoinableSquareChats(request)
  return self:recv_getJoinableSquareChats(request)
end

function SquareServiceClient:send_getJoinableSquareChats(request)
  self.oprot:writeMessageBegin('getJoinableSquareChats', TMessageType.CALL, self._seqid)
  local args = getJoinableSquareChats_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getJoinableSquareChats(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getJoinableSquareChats_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:getInvitationTicketUrl(request)
  self:send_getInvitationTicketUrl(request)
  return self:recv_getInvitationTicketUrl(request)
end

function SquareServiceClient:send_getInvitationTicketUrl(request)
  self.oprot:writeMessageBegin('getInvitationTicketUrl', TMessageType.CALL, self._seqid)
  local args = getInvitationTicketUrl_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_getInvitationTicketUrl(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getInvitationTicketUrl_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SquareServiceClient:findSquareByInvitationTicket(request)
  self:send_findSquareByInvitationTicket(request)
  return self:recv_findSquareByInvitationTicket(request)
end

function SquareServiceClient:send_findSquareByInvitationTicket(request)
  self.oprot:writeMessageBegin('findSquareByInvitationTicket', TMessageType.CALL, self._seqid)
  local args = findSquareByInvitationTicket_args:new{}
  args.request = request
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SquareServiceClient:recv_findSquareByInvitationTicket(request)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = findSquareByInvitationTicket_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
SquareServiceIface = __TObject:new{
  __type = 'SquareServiceIface'
}


SquareServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'SquareServiceProcessor'
})

function SquareServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function SquareServiceProcessor:process_getSquareChatAnnouncements(seqid, iprot, oprot, server_ctx)
  local args = getSquareChatAnnouncements_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSquareChatAnnouncements_result:new{}
  local status, res = pcall(self.handler.getSquareChatAnnouncements, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSquareChatAnnouncements', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_deleteSquareChatAnnouncement(seqid, iprot, oprot, server_ctx)
  local args = deleteSquareChatAnnouncement_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = deleteSquareChatAnnouncement_result:new{}
  local status, res = pcall(self.handler.deleteSquareChatAnnouncement, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('deleteSquareChatAnnouncement', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_createSquareChatAnnouncement(seqid, iprot, oprot, server_ctx)
  local args = createSquareChatAnnouncement_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = createSquareChatAnnouncement_result:new{}
  local status, res = pcall(self.handler.createSquareChatAnnouncement, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('createSquareChatAnnouncement', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_getNoteStatus(seqid, iprot, oprot, server_ctx)
  local args = getNoteStatus_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getNoteStatus_result:new{}
  local status, res = pcall(self.handler.getNoteStatus, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getNoteStatus', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_getSquareStatus(seqid, iprot, oprot, server_ctx)
  local args = getSquareStatus_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSquareStatus_result:new{}
  local status, res = pcall(self.handler.getSquareStatus, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSquareStatus', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_reportSquareMember(seqid, iprot, oprot, server_ctx)
  local args = reportSquareMember_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = reportSquareMember_result:new{}
  local status, res = pcall(self.handler.reportSquareMember, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('reportSquareMember', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_reportSquareMessage(seqid, iprot, oprot, server_ctx)
  local args = reportSquareMessage_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = reportSquareMessage_result:new{}
  local status, res = pcall(self.handler.reportSquareMessage, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('reportSquareMessage', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_reportSquareChat(seqid, iprot, oprot, server_ctx)
  local args = reportSquareChat_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = reportSquareChat_result:new{}
  local status, res = pcall(self.handler.reportSquareChat, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('reportSquareChat', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_reportSquare(seqid, iprot, oprot, server_ctx)
  local args = reportSquare_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = reportSquare_result:new{}
  local status, res = pcall(self.handler.reportSquare, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('reportSquare', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_updateSquareMemberRelation(seqid, iprot, oprot, server_ctx)
  local args = updateSquareMemberRelation_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateSquareMemberRelation_result:new{}
  local status, res = pcall(self.handler.updateSquareMemberRelation, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateSquareMemberRelation', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_updateSquareAuthority(seqid, iprot, oprot, server_ctx)
  local args = updateSquareAuthority_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateSquareAuthority_result:new{}
  local status, res = pcall(self.handler.updateSquareAuthority, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateSquareAuthority', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_updateSquareChatMember(seqid, iprot, oprot, server_ctx)
  local args = updateSquareChatMember_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateSquareChatMember_result:new{}
  local status, res = pcall(self.handler.updateSquareChatMember, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateSquareChatMember', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_updateSquareChat(seqid, iprot, oprot, server_ctx)
  local args = updateSquareChat_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateSquareChat_result:new{}
  local status, res = pcall(self.handler.updateSquareChat, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateSquareChat', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_refreshSubscriptions(seqid, iprot, oprot, server_ctx)
  local args = refreshSubscriptions_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = refreshSubscriptions_result:new{}
  local status, res = pcall(self.handler.refreshSubscriptions, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('refreshSubscriptions', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_removeSubscriptions(seqid, iprot, oprot, server_ctx)
  local args = removeSubscriptions_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = removeSubscriptions_result:new{}
  local status, res = pcall(self.handler.removeSubscriptions, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('removeSubscriptions', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_rejectSquareMembers(seqid, iprot, oprot, server_ctx)
  local args = rejectSquareMembers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = rejectSquareMembers_result:new{}
  local status, res = pcall(self.handler.rejectSquareMembers, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('rejectSquareMembers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_updateSquareMembers(seqid, iprot, oprot, server_ctx)
  local args = updateSquareMembers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateSquareMembers_result:new{}
  local status, res = pcall(self.handler.updateSquareMembers, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateSquareMembers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_updateSquareMember(seqid, iprot, oprot, server_ctx)
  local args = updateSquareMember_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateSquareMember_result:new{}
  local status, res = pcall(self.handler.updateSquareMember, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateSquareMember', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_updateSquareFeatureSet(seqid, iprot, oprot, server_ctx)
  local args = updateSquareFeatureSet_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateSquareFeatureSet_result:new{}
  local status, res = pcall(self.handler.updateSquareFeatureSet, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateSquareFeatureSet', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_getSquareFeatureSet(seqid, iprot, oprot, server_ctx)
  local args = getSquareFeatureSet_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSquareFeatureSet_result:new{}
  local status, res = pcall(self.handler.getSquareFeatureSet, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSquareFeatureSet', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_searchSquares(seqid, iprot, oprot, server_ctx)
  local args = searchSquares_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = searchSquares_result:new{}
  local status, res = pcall(self.handler.searchSquares, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('searchSquares', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_updateSquare(seqid, iprot, oprot, server_ctx)
  local args = updateSquare_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateSquare_result:new{}
  local status, res = pcall(self.handler.updateSquare, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateSquare', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_getCategories(seqid, iprot, oprot, server_ctx)
  local args = getCategories_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getCategories_result:new{}
  local status, res = pcall(self.handler.getCategories, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getCategories', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_searchSquareMembers(seqid, iprot, oprot, server_ctx)
  local args = searchSquareMembers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = searchSquareMembers_result:new{}
  local status, res = pcall(self.handler.searchSquareMembers, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('searchSquareMembers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_fetchSquareChatEvents(seqid, iprot, oprot, server_ctx)
  local args = fetchSquareChatEvents_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = fetchSquareChatEvents_result:new{}
  local status, res = pcall(self.handler.fetchSquareChatEvents, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('fetchSquareChatEvents', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_fetchMyEvents(seqid, iprot, oprot, server_ctx)
  local args = fetchMyEvents_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = fetchMyEvents_result:new{}
  local status, res = pcall(self.handler.fetchMyEvents, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('fetchMyEvents', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_markAsRead(seqid, iprot, oprot, server_ctx)
  local args = markAsRead_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = markAsRead_result:new{}
  local status, res = pcall(self.handler.markAsRead, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('markAsRead', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_getSquareAuthority(seqid, iprot, oprot, server_ctx)
  local args = getSquareAuthority_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSquareAuthority_result:new{}
  local status, res = pcall(self.handler.getSquareAuthority, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSquareAuthority', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_sendMessage(seqid, iprot, oprot, server_ctx)
  local args = sendMessage_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendMessage_result:new{}
  local status, res = pcall(self.handler.sendMessage, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendMessage', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_leaveSquare(seqid, iprot, oprot, server_ctx)
  local args = leaveSquare_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = leaveSquare_result:new{}
  local status, res = pcall(self.handler.leaveSquare, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('leaveSquare', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_leaveSquareChat(seqid, iprot, oprot, server_ctx)
  local args = leaveSquareChat_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = leaveSquareChat_result:new{}
  local status, res = pcall(self.handler.leaveSquareChat, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('leaveSquareChat', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_joinSquareChat(seqid, iprot, oprot, server_ctx)
  local args = joinSquareChat_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = joinSquareChat_result:new{}
  local status, res = pcall(self.handler.joinSquareChat, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('joinSquareChat', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_joinSquare(seqid, iprot, oprot, server_ctx)
  local args = joinSquare_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = joinSquare_result:new{}
  local status, res = pcall(self.handler.joinSquare, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('joinSquare', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_inviteToSquare(seqid, iprot, oprot, server_ctx)
  local args = inviteToSquare_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = inviteToSquare_result:new{}
  local status, res = pcall(self.handler.inviteToSquare, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('inviteToSquare', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_inviteToSquareChat(seqid, iprot, oprot, server_ctx)
  local args = inviteToSquareChat_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = inviteToSquareChat_result:new{}
  local status, res = pcall(self.handler.inviteToSquareChat, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('inviteToSquareChat', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_getSquareMember(seqid, iprot, oprot, server_ctx)
  local args = getSquareMember_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSquareMember_result:new{}
  local status, res = pcall(self.handler.getSquareMember, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSquareMember', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_getSquareMembers(seqid, iprot, oprot, server_ctx)
  local args = getSquareMembers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSquareMembers_result:new{}
  local status, res = pcall(self.handler.getSquareMembers, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSquareMembers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_getSquareMemberRelation(seqid, iprot, oprot, server_ctx)
  local args = getSquareMemberRelation_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSquareMemberRelation_result:new{}
  local status, res = pcall(self.handler.getSquareMemberRelation, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSquareMemberRelation', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_getSquareMemberRelations(seqid, iprot, oprot, server_ctx)
  local args = getSquareMemberRelations_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSquareMemberRelations_result:new{}
  local status, res = pcall(self.handler.getSquareMemberRelations, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSquareMemberRelations', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_getSquareChatMembers(seqid, iprot, oprot, server_ctx)
  local args = getSquareChatMembers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSquareChatMembers_result:new{}
  local status, res = pcall(self.handler.getSquareChatMembers, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSquareChatMembers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_getSquareChatStatus(seqid, iprot, oprot, server_ctx)
  local args = getSquareChatStatus_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSquareChatStatus_result:new{}
  local status, res = pcall(self.handler.getSquareChatStatus, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSquareChatStatus', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_getSquareChat(seqid, iprot, oprot, server_ctx)
  local args = getSquareChat_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSquareChat_result:new{}
  local status, res = pcall(self.handler.getSquareChat, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSquareChat', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_getSquare(seqid, iprot, oprot, server_ctx)
  local args = getSquare_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSquare_result:new{}
  local status, res = pcall(self.handler.getSquare, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSquare', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_getJoinedSquares(seqid, iprot, oprot, server_ctx)
  local args = getJoinedSquares_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getJoinedSquares_result:new{}
  local status, res = pcall(self.handler.getJoinedSquares, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getJoinedSquares', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_getJoinedSquareChats(seqid, iprot, oprot, server_ctx)
  local args = getJoinedSquareChats_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getJoinedSquareChats_result:new{}
  local status, res = pcall(self.handler.getJoinedSquareChats, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getJoinedSquareChats', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_approveSquareMembers(seqid, iprot, oprot, server_ctx)
  local args = approveSquareMembers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = approveSquareMembers_result:new{}
  local status, res = pcall(self.handler.approveSquareMembers, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('approveSquareMembers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_createSquareChat(seqid, iprot, oprot, server_ctx)
  local args = createSquareChat_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = createSquareChat_result:new{}
  local status, res = pcall(self.handler.createSquareChat, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('createSquareChat', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_createSquare(seqid, iprot, oprot, server_ctx)
  local args = createSquare_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = createSquare_result:new{}
  local status, res = pcall(self.handler.createSquare, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('createSquare', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_deleteSquareChat(seqid, iprot, oprot, server_ctx)
  local args = deleteSquareChat_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = deleteSquareChat_result:new{}
  local status, res = pcall(self.handler.deleteSquareChat, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('deleteSquareChat', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_deleteSquare(seqid, iprot, oprot, server_ctx)
  local args = deleteSquare_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = deleteSquare_result:new{}
  local status, res = pcall(self.handler.deleteSquare, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('deleteSquare', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_destroyMessage(seqid, iprot, oprot, server_ctx)
  local args = destroyMessage_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = destroyMessage_result:new{}
  local status, res = pcall(self.handler.destroyMessage, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('destroyMessage', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_getJoinableSquareChats(seqid, iprot, oprot, server_ctx)
  local args = getJoinableSquareChats_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getJoinableSquareChats_result:new{}
  local status, res = pcall(self.handler.getJoinableSquareChats, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getJoinableSquareChats', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_getInvitationTicketUrl(seqid, iprot, oprot, server_ctx)
  local args = getInvitationTicketUrl_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getInvitationTicketUrl_result:new{}
  local status, res = pcall(self.handler.getInvitationTicketUrl, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getInvitationTicketUrl', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SquareServiceProcessor:process_findSquareByInvitationTicket(seqid, iprot, oprot, server_ctx)
  local args = findSquareByInvitationTicket_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = findSquareByInvitationTicket_result:new{}
  local status, res = pcall(self.handler.findSquareByInvitationTicket, self.handler, args.request)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'SquareException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('findSquareByInvitationTicket', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

getSquareChatAnnouncements_args = __TObject:new{
  request
}

function getSquareChatAnnouncements_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetSquareChatAnnouncementsRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareChatAnnouncements_args:write(oprot)
  oprot:writeStructBegin('getSquareChatAnnouncements_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareChatAnnouncements_result = __TObject:new{
  success,
  e
}

function getSquareChatAnnouncements_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetSquareChatAnnouncementsResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareChatAnnouncements_result:write(oprot)
  oprot:writeStructBegin('getSquareChatAnnouncements_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

deleteSquareChatAnnouncement_args = __TObject:new{
  request
}

function deleteSquareChatAnnouncement_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = DeleteSquareChatAnnouncementRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function deleteSquareChatAnnouncement_args:write(oprot)
  oprot:writeStructBegin('deleteSquareChatAnnouncement_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

deleteSquareChatAnnouncement_result = __TObject:new{
  success,
  e
}

function deleteSquareChatAnnouncement_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = DeleteSquareChatAnnouncementResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function deleteSquareChatAnnouncement_result:write(oprot)
  oprot:writeStructBegin('deleteSquareChatAnnouncement_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createSquareChatAnnouncement_args = __TObject:new{
  request
}

function createSquareChatAnnouncement_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = CreateSquareChatAnnouncementRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createSquareChatAnnouncement_args:write(oprot)
  oprot:writeStructBegin('createSquareChatAnnouncement_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createSquareChatAnnouncement_result = __TObject:new{
  success,
  e
}

function createSquareChatAnnouncement_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = CreateSquareChatAnnouncementResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createSquareChatAnnouncement_result:write(oprot)
  oprot:writeStructBegin('createSquareChatAnnouncement_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNoteStatus_args = __TObject:new{
  request
}

function getNoteStatus_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetNoteStatusRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNoteStatus_args:write(oprot)
  oprot:writeStructBegin('getNoteStatus_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNoteStatus_result = __TObject:new{
  success,
  e
}

function getNoteStatus_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetNoteStatusResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNoteStatus_result:write(oprot)
  oprot:writeStructBegin('getNoteStatus_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareStatus_args = __TObject:new{
  request
}

function getSquareStatus_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetSquareStatusRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareStatus_args:write(oprot)
  oprot:writeStructBegin('getSquareStatus_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareStatus_result = __TObject:new{
  success,
  e
}

function getSquareStatus_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetSquareStatusResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareStatus_result:write(oprot)
  oprot:writeStructBegin('getSquareStatus_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

reportSquareMember_args = __TObject:new{
  request
}

function reportSquareMember_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = ReportSquareMemberRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function reportSquareMember_args:write(oprot)
  oprot:writeStructBegin('reportSquareMember_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

reportSquareMember_result = __TObject:new{
  success,
  e
}

function reportSquareMember_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ReportSquareMemberResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function reportSquareMember_result:write(oprot)
  oprot:writeStructBegin('reportSquareMember_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

reportSquareMessage_args = __TObject:new{
  request
}

function reportSquareMessage_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = ReportSquareMessageRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function reportSquareMessage_args:write(oprot)
  oprot:writeStructBegin('reportSquareMessage_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

reportSquareMessage_result = __TObject:new{
  success,
  e
}

function reportSquareMessage_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ReportSquareMessageResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function reportSquareMessage_result:write(oprot)
  oprot:writeStructBegin('reportSquareMessage_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

reportSquareChat_args = __TObject:new{
  request
}

function reportSquareChat_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = ReportSquareChatRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function reportSquareChat_args:write(oprot)
  oprot:writeStructBegin('reportSquareChat_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

reportSquareChat_result = __TObject:new{
  success,
  e
}

function reportSquareChat_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ReportSquareChatResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function reportSquareChat_result:write(oprot)
  oprot:writeStructBegin('reportSquareChat_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

reportSquare_args = __TObject:new{
  request
}

function reportSquare_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = ReportSquareRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function reportSquare_args:write(oprot)
  oprot:writeStructBegin('reportSquare_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

reportSquare_result = __TObject:new{
  success,
  e
}

function reportSquare_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ReportSquareResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function reportSquare_result:write(oprot)
  oprot:writeStructBegin('reportSquare_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSquareMemberRelation_args = __TObject:new{
  request
}

function updateSquareMemberRelation_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = UpdateSquareMemberRelationRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSquareMemberRelation_args:write(oprot)
  oprot:writeStructBegin('updateSquareMemberRelation_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSquareMemberRelation_result = __TObject:new{
  success,
  e
}

function updateSquareMemberRelation_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = UpdateSquareMemberRelationResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSquareMemberRelation_result:write(oprot)
  oprot:writeStructBegin('updateSquareMemberRelation_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSquareAuthority_args = __TObject:new{
  request
}

function updateSquareAuthority_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = UpdateSquareAuthorityRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSquareAuthority_args:write(oprot)
  oprot:writeStructBegin('updateSquareAuthority_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSquareAuthority_result = __TObject:new{
  success,
  e
}

function updateSquareAuthority_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = UpdateSquareAuthorityResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSquareAuthority_result:write(oprot)
  oprot:writeStructBegin('updateSquareAuthority_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSquareChatMember_args = __TObject:new{
  request
}

function updateSquareChatMember_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = UpdateSquareChatMemberRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSquareChatMember_args:write(oprot)
  oprot:writeStructBegin('updateSquareChatMember_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSquareChatMember_result = __TObject:new{
  success,
  e
}

function updateSquareChatMember_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = UpdateSquareChatMemberResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSquareChatMember_result:write(oprot)
  oprot:writeStructBegin('updateSquareChatMember_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSquareChat_args = __TObject:new{
  request
}

function updateSquareChat_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = UpdateSquareChatRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSquareChat_args:write(oprot)
  oprot:writeStructBegin('updateSquareChat_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSquareChat_result = __TObject:new{
  success,
  e
}

function updateSquareChat_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = UpdateSquareChatResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSquareChat_result:write(oprot)
  oprot:writeStructBegin('updateSquareChat_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

refreshSubscriptions_args = __TObject:new{
  request
}

function refreshSubscriptions_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = RefreshSubscriptionsRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function refreshSubscriptions_args:write(oprot)
  oprot:writeStructBegin('refreshSubscriptions_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

refreshSubscriptions_result = __TObject:new{
  success,
  e
}

function refreshSubscriptions_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = RefreshSubscriptionsResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function refreshSubscriptions_result:write(oprot)
  oprot:writeStructBegin('refreshSubscriptions_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

removeSubscriptions_args = __TObject:new{
  request
}

function removeSubscriptions_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = RemoveSubscriptionsRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function removeSubscriptions_args:write(oprot)
  oprot:writeStructBegin('removeSubscriptions_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

removeSubscriptions_result = __TObject:new{
  success,
  e
}

function removeSubscriptions_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = RemoveSubscriptionsResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function removeSubscriptions_result:write(oprot)
  oprot:writeStructBegin('removeSubscriptions_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

rejectSquareMembers_args = __TObject:new{
  request
}

function rejectSquareMembers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = RejectSquareMembersRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function rejectSquareMembers_args:write(oprot)
  oprot:writeStructBegin('rejectSquareMembers_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

rejectSquareMembers_result = __TObject:new{
  success,
  e
}

function rejectSquareMembers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = RejectSquareMembersResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function rejectSquareMembers_result:write(oprot)
  oprot:writeStructBegin('rejectSquareMembers_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSquareMembers_args = __TObject:new{
  request
}

function updateSquareMembers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = UpdateSquareMembersRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSquareMembers_args:write(oprot)
  oprot:writeStructBegin('updateSquareMembers_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSquareMembers_result = __TObject:new{
  success,
  e
}

function updateSquareMembers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = UpdateSquareMembersResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSquareMembers_result:write(oprot)
  oprot:writeStructBegin('updateSquareMembers_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSquareMember_args = __TObject:new{
  request
}

function updateSquareMember_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = UpdateSquareMemberRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSquareMember_args:write(oprot)
  oprot:writeStructBegin('updateSquareMember_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSquareMember_result = __TObject:new{
  success,
  e
}

function updateSquareMember_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = UpdateSquareMemberResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSquareMember_result:write(oprot)
  oprot:writeStructBegin('updateSquareMember_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSquareFeatureSet_args = __TObject:new{
  request
}

function updateSquareFeatureSet_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = UpdateSquareFeatureSetRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSquareFeatureSet_args:write(oprot)
  oprot:writeStructBegin('updateSquareFeatureSet_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSquareFeatureSet_result = __TObject:new{
  success,
  e
}

function updateSquareFeatureSet_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = UpdateSquareFeatureSetResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSquareFeatureSet_result:write(oprot)
  oprot:writeStructBegin('updateSquareFeatureSet_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareFeatureSet_args = __TObject:new{
  request
}

function getSquareFeatureSet_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetSquareFeatureSetRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareFeatureSet_args:write(oprot)
  oprot:writeStructBegin('getSquareFeatureSet_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareFeatureSet_result = __TObject:new{
  success,
  e
}

function getSquareFeatureSet_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetSquareFeatureSetResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareFeatureSet_result:write(oprot)
  oprot:writeStructBegin('getSquareFeatureSet_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

searchSquares_args = __TObject:new{
  request
}

function searchSquares_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = SearchSquaresRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function searchSquares_args:write(oprot)
  oprot:writeStructBegin('searchSquares_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

searchSquares_result = __TObject:new{
  success,
  e
}

function searchSquares_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SearchSquaresResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function searchSquares_result:write(oprot)
  oprot:writeStructBegin('searchSquares_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSquare_args = __TObject:new{
  request
}

function updateSquare_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = UpdateSquareRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSquare_args:write(oprot)
  oprot:writeStructBegin('updateSquare_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSquare_result = __TObject:new{
  success,
  e
}

function updateSquare_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = UpdateSquareResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSquare_result:write(oprot)
  oprot:writeStructBegin('updateSquare_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getCategories_args = __TObject:new{
  request
}

function getCategories_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetSquareCategoriesRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCategories_args:write(oprot)
  oprot:writeStructBegin('getCategories_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getCategories_result = __TObject:new{
  success,
  e
}

function getCategories_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetSquareCategoriesResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCategories_result:write(oprot)
  oprot:writeStructBegin('getCategories_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

searchSquareMembers_args = __TObject:new{
  request
}

function searchSquareMembers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = SearchSquareMembersRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function searchSquareMembers_args:write(oprot)
  oprot:writeStructBegin('searchSquareMembers_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

searchSquareMembers_result = __TObject:new{
  success,
  e
}

function searchSquareMembers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SearchSquareMembersResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function searchSquareMembers_result:write(oprot)
  oprot:writeStructBegin('searchSquareMembers_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

fetchSquareChatEvents_args = __TObject:new{
  request
}

function fetchSquareChatEvents_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = FetchSquareChatEventsRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function fetchSquareChatEvents_args:write(oprot)
  oprot:writeStructBegin('fetchSquareChatEvents_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

fetchSquareChatEvents_result = __TObject:new{
  success,
  e
}

function fetchSquareChatEvents_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = FetchSquareChatEventsResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function fetchSquareChatEvents_result:write(oprot)
  oprot:writeStructBegin('fetchSquareChatEvents_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

fetchMyEvents_args = __TObject:new{
  request
}

function fetchMyEvents_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = FetchMyEventsRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function fetchMyEvents_args:write(oprot)
  oprot:writeStructBegin('fetchMyEvents_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

fetchMyEvents_result = __TObject:new{
  success,
  e
}

function fetchMyEvents_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = FetchMyEventsResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function fetchMyEvents_result:write(oprot)
  oprot:writeStructBegin('fetchMyEvents_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

markAsRead_args = __TObject:new{
  request
}

function markAsRead_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = MarkAsReadRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function markAsRead_args:write(oprot)
  oprot:writeStructBegin('markAsRead_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

markAsRead_result = __TObject:new{
  success,
  e
}

function markAsRead_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = MarkAsReadResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function markAsRead_result:write(oprot)
  oprot:writeStructBegin('markAsRead_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareAuthority_args = __TObject:new{
  request
}

function getSquareAuthority_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetSquareAuthorityRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareAuthority_args:write(oprot)
  oprot:writeStructBegin('getSquareAuthority_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareAuthority_result = __TObject:new{
  success,
  e
}

function getSquareAuthority_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetSquareAuthorityResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareAuthority_result:write(oprot)
  oprot:writeStructBegin('getSquareAuthority_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendMessage_args = __TObject:new{
  request
}

function sendMessage_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = SendMessageRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendMessage_args:write(oprot)
  oprot:writeStructBegin('sendMessage_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendMessage_result = __TObject:new{
  success,
  e
}

function sendMessage_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SendMessageResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendMessage_result:write(oprot)
  oprot:writeStructBegin('sendMessage_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

leaveSquare_args = __TObject:new{
  request
}

function leaveSquare_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = LeaveSquareRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function leaveSquare_args:write(oprot)
  oprot:writeStructBegin('leaveSquare_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

leaveSquare_result = __TObject:new{
  success,
  e
}

function leaveSquare_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = LeaveSquareResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function leaveSquare_result:write(oprot)
  oprot:writeStructBegin('leaveSquare_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

leaveSquareChat_args = __TObject:new{
  request
}

function leaveSquareChat_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = LeaveSquareChatRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function leaveSquareChat_args:write(oprot)
  oprot:writeStructBegin('leaveSquareChat_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

leaveSquareChat_result = __TObject:new{
  success,
  e
}

function leaveSquareChat_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = LeaveSquareChatResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function leaveSquareChat_result:write(oprot)
  oprot:writeStructBegin('leaveSquareChat_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

joinSquareChat_args = __TObject:new{
  request
}

function joinSquareChat_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = JoinSquareChatRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function joinSquareChat_args:write(oprot)
  oprot:writeStructBegin('joinSquareChat_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

joinSquareChat_result = __TObject:new{
  success,
  e
}

function joinSquareChat_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = JoinSquareChatResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function joinSquareChat_result:write(oprot)
  oprot:writeStructBegin('joinSquareChat_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

joinSquare_args = __TObject:new{
  request
}

function joinSquare_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = JoinSquareRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function joinSquare_args:write(oprot)
  oprot:writeStructBegin('joinSquare_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

joinSquare_result = __TObject:new{
  success,
  e
}

function joinSquare_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = JoinSquareResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function joinSquare_result:write(oprot)
  oprot:writeStructBegin('joinSquare_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

inviteToSquare_args = __TObject:new{
  request
}

function inviteToSquare_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = InviteToSquareRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function inviteToSquare_args:write(oprot)
  oprot:writeStructBegin('inviteToSquare_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

inviteToSquare_result = __TObject:new{
  success,
  e
}

function inviteToSquare_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = InviteToSquareResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function inviteToSquare_result:write(oprot)
  oprot:writeStructBegin('inviteToSquare_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

inviteToSquareChat_args = __TObject:new{
  request
}

function inviteToSquareChat_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = InviteToSquareChatRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function inviteToSquareChat_args:write(oprot)
  oprot:writeStructBegin('inviteToSquareChat_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

inviteToSquareChat_result = __TObject:new{
  success,
  e
}

function inviteToSquareChat_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = InviteToSquareChatResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function inviteToSquareChat_result:write(oprot)
  oprot:writeStructBegin('inviteToSquareChat_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareMember_args = __TObject:new{
  request
}

function getSquareMember_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetSquareMemberRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareMember_args:write(oprot)
  oprot:writeStructBegin('getSquareMember_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareMember_result = __TObject:new{
  success,
  e
}

function getSquareMember_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetSquareMemberResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareMember_result:write(oprot)
  oprot:writeStructBegin('getSquareMember_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareMembers_args = __TObject:new{
  request
}

function getSquareMembers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetSquareMembersRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareMembers_args:write(oprot)
  oprot:writeStructBegin('getSquareMembers_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareMembers_result = __TObject:new{
  success,
  e
}

function getSquareMembers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetSquareMembersResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareMembers_result:write(oprot)
  oprot:writeStructBegin('getSquareMembers_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareMemberRelation_args = __TObject:new{
  request
}

function getSquareMemberRelation_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetSquareMemberRelationRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareMemberRelation_args:write(oprot)
  oprot:writeStructBegin('getSquareMemberRelation_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareMemberRelation_result = __TObject:new{
  success,
  e
}

function getSquareMemberRelation_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetSquareMemberRelationResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareMemberRelation_result:write(oprot)
  oprot:writeStructBegin('getSquareMemberRelation_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareMemberRelations_args = __TObject:new{
  request
}

function getSquareMemberRelations_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetSquareMemberRelationsRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareMemberRelations_args:write(oprot)
  oprot:writeStructBegin('getSquareMemberRelations_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareMemberRelations_result = __TObject:new{
  success,
  e
}

function getSquareMemberRelations_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetSquareMemberRelationsResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareMemberRelations_result:write(oprot)
  oprot:writeStructBegin('getSquareMemberRelations_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareChatMembers_args = __TObject:new{
  request
}

function getSquareChatMembers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetSquareChatMembersRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareChatMembers_args:write(oprot)
  oprot:writeStructBegin('getSquareChatMembers_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareChatMembers_result = __TObject:new{
  success,
  e
}

function getSquareChatMembers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetSquareChatMembersResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareChatMembers_result:write(oprot)
  oprot:writeStructBegin('getSquareChatMembers_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareChatStatus_args = __TObject:new{
  request
}

function getSquareChatStatus_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetSquareChatStatusRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareChatStatus_args:write(oprot)
  oprot:writeStructBegin('getSquareChatStatus_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareChatStatus_result = __TObject:new{
  success,
  e
}

function getSquareChatStatus_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetSquareChatStatusResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareChatStatus_result:write(oprot)
  oprot:writeStructBegin('getSquareChatStatus_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareChat_args = __TObject:new{
  request
}

function getSquareChat_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetSquareChatRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareChat_args:write(oprot)
  oprot:writeStructBegin('getSquareChat_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquareChat_result = __TObject:new{
  success,
  e
}

function getSquareChat_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetSquareChatResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquareChat_result:write(oprot)
  oprot:writeStructBegin('getSquareChat_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquare_args = __TObject:new{
  request
}

function getSquare_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetSquareRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquare_args:write(oprot)
  oprot:writeStructBegin('getSquare_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSquare_result = __TObject:new{
  success,
  e
}

function getSquare_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetSquareResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSquare_result:write(oprot)
  oprot:writeStructBegin('getSquare_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getJoinedSquares_args = __TObject:new{
  request
}

function getJoinedSquares_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetJoinedSquaresRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getJoinedSquares_args:write(oprot)
  oprot:writeStructBegin('getJoinedSquares_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getJoinedSquares_result = __TObject:new{
  success,
  e
}

function getJoinedSquares_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetJoinedSquaresResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getJoinedSquares_result:write(oprot)
  oprot:writeStructBegin('getJoinedSquares_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getJoinedSquareChats_args = __TObject:new{
  request
}

function getJoinedSquareChats_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetJoinedSquareChatsRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getJoinedSquareChats_args:write(oprot)
  oprot:writeStructBegin('getJoinedSquareChats_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getJoinedSquareChats_result = __TObject:new{
  success,
  e
}

function getJoinedSquareChats_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetJoinedSquareChatsResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getJoinedSquareChats_result:write(oprot)
  oprot:writeStructBegin('getJoinedSquareChats_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

approveSquareMembers_args = __TObject:new{
  request
}

function approveSquareMembers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = ApproveSquareMembersRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function approveSquareMembers_args:write(oprot)
  oprot:writeStructBegin('approveSquareMembers_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

approveSquareMembers_result = __TObject:new{
  success,
  e
}

function approveSquareMembers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ApproveSquareMembersResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function approveSquareMembers_result:write(oprot)
  oprot:writeStructBegin('approveSquareMembers_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createSquareChat_args = __TObject:new{
  request
}

function createSquareChat_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = CreateSquareChatRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createSquareChat_args:write(oprot)
  oprot:writeStructBegin('createSquareChat_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createSquareChat_result = __TObject:new{
  success,
  e
}

function createSquareChat_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = CreateSquareChatResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createSquareChat_result:write(oprot)
  oprot:writeStructBegin('createSquareChat_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createSquare_args = __TObject:new{
  request
}

function createSquare_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = CreateSquareRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createSquare_args:write(oprot)
  oprot:writeStructBegin('createSquare_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createSquare_result = __TObject:new{
  success,
  e
}

function createSquare_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = CreateSquareResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createSquare_result:write(oprot)
  oprot:writeStructBegin('createSquare_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

deleteSquareChat_args = __TObject:new{
  request
}

function deleteSquareChat_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = DeleteSquareChatRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function deleteSquareChat_args:write(oprot)
  oprot:writeStructBegin('deleteSquareChat_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

deleteSquareChat_result = __TObject:new{
  success,
  e
}

function deleteSquareChat_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = DeleteSquareChatResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function deleteSquareChat_result:write(oprot)
  oprot:writeStructBegin('deleteSquareChat_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

deleteSquare_args = __TObject:new{
  request
}

function deleteSquare_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = DeleteSquareRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function deleteSquare_args:write(oprot)
  oprot:writeStructBegin('deleteSquare_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

deleteSquare_result = __TObject:new{
  success,
  e
}

function deleteSquare_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = DeleteSquareResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function deleteSquare_result:write(oprot)
  oprot:writeStructBegin('deleteSquare_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

destroyMessage_args = __TObject:new{
  request
}

function destroyMessage_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = DestroyMessageRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function destroyMessage_args:write(oprot)
  oprot:writeStructBegin('destroyMessage_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

destroyMessage_result = __TObject:new{
  success,
  e
}

function destroyMessage_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = DestroyMessageResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function destroyMessage_result:write(oprot)
  oprot:writeStructBegin('destroyMessage_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getJoinableSquareChats_args = __TObject:new{
  request
}

function getJoinableSquareChats_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetJoinableSquareChatsRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getJoinableSquareChats_args:write(oprot)
  oprot:writeStructBegin('getJoinableSquareChats_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getJoinableSquareChats_result = __TObject:new{
  success,
  e
}

function getJoinableSquareChats_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetJoinableSquareChatsResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getJoinableSquareChats_result:write(oprot)
  oprot:writeStructBegin('getJoinableSquareChats_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getInvitationTicketUrl_args = __TObject:new{
  request
}

function getInvitationTicketUrl_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = GetInvitationTicketUrlRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getInvitationTicketUrl_args:write(oprot)
  oprot:writeStructBegin('getInvitationTicketUrl_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getInvitationTicketUrl_result = __TObject:new{
  success,
  e
}

function getInvitationTicketUrl_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = GetInvitationTicketUrlResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getInvitationTicketUrl_result:write(oprot)
  oprot:writeStructBegin('getInvitationTicketUrl_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

findSquareByInvitationTicket_args = __TObject:new{
  request
}

function findSquareByInvitationTicket_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.request = FindSquareByInvitationTicketRequest:new{}
        self.request:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findSquareByInvitationTicket_args:write(oprot)
  oprot:writeStructBegin('findSquareByInvitationTicket_args')
  if self.request ~= nil then
    oprot:writeFieldBegin('request', TType.STRUCT, 1)
    self.request:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

findSquareByInvitationTicket_result = __TObject:new{
  success,
  e
}

function findSquareByInvitationTicket_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = FindSquareByInvitationTicketResponse:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = SquareException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findSquareByInvitationTicket_result:write(oprot)
  oprot:writeStructBegin('findSquareByInvitationTicket_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end