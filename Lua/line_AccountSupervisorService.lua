--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'line_ttypes'

AccountSupervisorServiceClient = __TObject.new(__TClient, {
  __type = 'AccountSupervisorServiceClient'
})

function AccountSupervisorServiceClient:getRSAKey()
  self:send_getRSAKey()
  return self:recv_getRSAKey()
end

function AccountSupervisorServiceClient:send_getRSAKey()
  self.oprot:writeMessageBegin('getRSAKey', TMessageType.CALL, self._seqid)
  local args = getRSAKey_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function AccountSupervisorServiceClient:recv_getRSAKey()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getRSAKey_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function AccountSupervisorServiceClient:notifyEmailConfirmationResult(parameterMap)
  self:send_notifyEmailConfirmationResult(parameterMap)
  self:recv_notifyEmailConfirmationResult(parameterMap)
end

function AccountSupervisorServiceClient:send_notifyEmailConfirmationResult(parameterMap)
  self.oprot:writeMessageBegin('notifyEmailConfirmationResult', TMessageType.CALL, self._seqid)
  local args = notifyEmailConfirmationResult_args:new{}
  args.parameterMap = parameterMap
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function AccountSupervisorServiceClient:recv_notifyEmailConfirmationResult(parameterMap)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = notifyEmailConfirmationResult_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function AccountSupervisorServiceClient:registerVirtualAccount(locale, encryptedVirtualUserId, encryptedPassword)
  self:send_registerVirtualAccount(locale, encryptedVirtualUserId, encryptedPassword)
  return self:recv_registerVirtualAccount(locale, encryptedVirtualUserId, encryptedPassword)
end

function AccountSupervisorServiceClient:send_registerVirtualAccount(locale, encryptedVirtualUserId, encryptedPassword)
  self.oprot:writeMessageBegin('registerVirtualAccount', TMessageType.CALL, self._seqid)
  local args = registerVirtualAccount_args:new{}
  args.locale = locale
  args.encryptedVirtualUserId = encryptedVirtualUserId
  args.encryptedPassword = encryptedPassword
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function AccountSupervisorServiceClient:recv_registerVirtualAccount(locale, encryptedVirtualUserId, encryptedPassword)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = registerVirtualAccount_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function AccountSupervisorServiceClient:requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword)
  self:send_requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword)
  self:recv_requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword)
end

function AccountSupervisorServiceClient:send_requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword)
  self.oprot:writeMessageBegin('requestVirtualAccountPasswordChange', TMessageType.CALL, self._seqid)
  local args = requestVirtualAccountPasswordChange_args:new{}
  args.virtualMid = virtualMid
  args.encryptedVirtualUserId = encryptedVirtualUserId
  args.encryptedOldPassword = encryptedOldPassword
  args.encryptedNewPassword = encryptedNewPassword
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function AccountSupervisorServiceClient:recv_requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = requestVirtualAccountPasswordChange_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function AccountSupervisorServiceClient:requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword)
  self:send_requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword)
  self:recv_requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword)
end

function AccountSupervisorServiceClient:send_requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword)
  self.oprot:writeMessageBegin('requestVirtualAccountPasswordSet', TMessageType.CALL, self._seqid)
  local args = requestVirtualAccountPasswordSet_args:new{}
  args.virtualMid = virtualMid
  args.encryptedVirtualUserId = encryptedVirtualUserId
  args.encryptedNewPassword = encryptedNewPassword
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function AccountSupervisorServiceClient:recv_requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = requestVirtualAccountPasswordSet_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function AccountSupervisorServiceClient:unregisterVirtualAccount(virtualMid)
  self:send_unregisterVirtualAccount(virtualMid)
  self:recv_unregisterVirtualAccount(virtualMid)
end

function AccountSupervisorServiceClient:send_unregisterVirtualAccount(virtualMid)
  self.oprot:writeMessageBegin('unregisterVirtualAccount', TMessageType.CALL, self._seqid)
  local args = unregisterVirtualAccount_args:new{}
  args.virtualMid = virtualMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function AccountSupervisorServiceClient:recv_unregisterVirtualAccount(virtualMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = unregisterVirtualAccount_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end
AccountSupervisorServiceIface = __TObject:new{
  __type = 'AccountSupervisorServiceIface'
}


AccountSupervisorServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'AccountSupervisorServiceProcessor'
})

function AccountSupervisorServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function AccountSupervisorServiceProcessor:process_getRSAKey(seqid, iprot, oprot, server_ctx)
  local args = getRSAKey_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getRSAKey_result:new{}
  local status, res = pcall(self.handler.getRSAKey, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getRSAKey', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function AccountSupervisorServiceProcessor:process_notifyEmailConfirmationResult(seqid, iprot, oprot, server_ctx)
  local args = notifyEmailConfirmationResult_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = notifyEmailConfirmationResult_result:new{}
  local status, res = pcall(self.handler.notifyEmailConfirmationResult, self.handler, args.parameterMap)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('notifyEmailConfirmationResult', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function AccountSupervisorServiceProcessor:process_registerVirtualAccount(seqid, iprot, oprot, server_ctx)
  local args = registerVirtualAccount_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = registerVirtualAccount_result:new{}
  local status, res = pcall(self.handler.registerVirtualAccount, self.handler, args.locale, args.encryptedVirtualUserId, args.encryptedPassword)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('registerVirtualAccount', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function AccountSupervisorServiceProcessor:process_requestVirtualAccountPasswordChange(seqid, iprot, oprot, server_ctx)
  local args = requestVirtualAccountPasswordChange_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = requestVirtualAccountPasswordChange_result:new{}
  local status, res = pcall(self.handler.requestVirtualAccountPasswordChange, self.handler, args.virtualMid, args.encryptedVirtualUserId, args.encryptedOldPassword, args.encryptedNewPassword)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('requestVirtualAccountPasswordChange', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function AccountSupervisorServiceProcessor:process_requestVirtualAccountPasswordSet(seqid, iprot, oprot, server_ctx)
  local args = requestVirtualAccountPasswordSet_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = requestVirtualAccountPasswordSet_result:new{}
  local status, res = pcall(self.handler.requestVirtualAccountPasswordSet, self.handler, args.virtualMid, args.encryptedVirtualUserId, args.encryptedNewPassword)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('requestVirtualAccountPasswordSet', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function AccountSupervisorServiceProcessor:process_unregisterVirtualAccount(seqid, iprot, oprot, server_ctx)
  local args = unregisterVirtualAccount_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = unregisterVirtualAccount_result:new{}
  local status, res = pcall(self.handler.unregisterVirtualAccount, self.handler, args.virtualMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('unregisterVirtualAccount', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

getRSAKey_args = __TObject:new{

}

function getRSAKey_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getRSAKey_args:write(oprot)
  oprot:writeStructBegin('getRSAKey_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getRSAKey_result = __TObject:new{
  success,
  e
}

function getRSAKey_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = RSAKey:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getRSAKey_result:write(oprot)
  oprot:writeStructBegin('getRSAKey_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

notifyEmailConfirmationResult_args = __TObject:new{
  parameterMap
}

function notifyEmailConfirmationResult_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.MAP then
        self.parameterMap = {}
        local _ktype833, _vtype834, _size832 = iprot:readMapBegin() 
        for _i=1,_size832 do
          local _key836 = iprot:readString()
          local _val837 = iprot:readString()
          self.parameterMap[_key836] = _val837
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function notifyEmailConfirmationResult_args:write(oprot)
  oprot:writeStructBegin('notifyEmailConfirmationResult_args')
  if self.parameterMap ~= nil then
    oprot:writeFieldBegin('parameterMap', TType.MAP, 2)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.parameterMap))
    for kiter838,viter839 in pairs(self.parameterMap) do
      oprot:writeString(kiter838)
      oprot:writeString(viter839)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

notifyEmailConfirmationResult_result = __TObject:new{
  e
}

function notifyEmailConfirmationResult_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function notifyEmailConfirmationResult_result:write(oprot)
  oprot:writeStructBegin('notifyEmailConfirmationResult_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

registerVirtualAccount_args = __TObject:new{
  locale,
  encryptedVirtualUserId,
  encryptedPassword
}

function registerVirtualAccount_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.locale = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.encryptedVirtualUserId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.encryptedPassword = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function registerVirtualAccount_args:write(oprot)
  oprot:writeStructBegin('registerVirtualAccount_args')
  if self.locale ~= nil then
    oprot:writeFieldBegin('locale', TType.STRING, 2)
    oprot:writeString(self.locale)
    oprot:writeFieldEnd()
  end
  if self.encryptedVirtualUserId ~= nil then
    oprot:writeFieldBegin('encryptedVirtualUserId', TType.STRING, 3)
    oprot:writeString(self.encryptedVirtualUserId)
    oprot:writeFieldEnd()
  end
  if self.encryptedPassword ~= nil then
    oprot:writeFieldBegin('encryptedPassword', TType.STRING, 4)
    oprot:writeString(self.encryptedPassword)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

registerVirtualAccount_result = __TObject:new{
  success,
  e
}

function registerVirtualAccount_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function registerVirtualAccount_result:write(oprot)
  oprot:writeStructBegin('registerVirtualAccount_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

requestVirtualAccountPasswordChange_args = __TObject:new{
  virtualMid,
  encryptedVirtualUserId,
  encryptedOldPassword,
  encryptedNewPassword
}

function requestVirtualAccountPasswordChange_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.virtualMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.encryptedVirtualUserId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.encryptedOldPassword = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.encryptedNewPassword = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function requestVirtualAccountPasswordChange_args:write(oprot)
  oprot:writeStructBegin('requestVirtualAccountPasswordChange_args')
  if self.virtualMid ~= nil then
    oprot:writeFieldBegin('virtualMid', TType.STRING, 2)
    oprot:writeString(self.virtualMid)
    oprot:writeFieldEnd()
  end
  if self.encryptedVirtualUserId ~= nil then
    oprot:writeFieldBegin('encryptedVirtualUserId', TType.STRING, 3)
    oprot:writeString(self.encryptedVirtualUserId)
    oprot:writeFieldEnd()
  end
  if self.encryptedOldPassword ~= nil then
    oprot:writeFieldBegin('encryptedOldPassword', TType.STRING, 4)
    oprot:writeString(self.encryptedOldPassword)
    oprot:writeFieldEnd()
  end
  if self.encryptedNewPassword ~= nil then
    oprot:writeFieldBegin('encryptedNewPassword', TType.STRING, 5)
    oprot:writeString(self.encryptedNewPassword)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

requestVirtualAccountPasswordChange_result = __TObject:new{
  e
}

function requestVirtualAccountPasswordChange_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function requestVirtualAccountPasswordChange_result:write(oprot)
  oprot:writeStructBegin('requestVirtualAccountPasswordChange_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

requestVirtualAccountPasswordSet_args = __TObject:new{
  virtualMid,
  encryptedVirtualUserId,
  encryptedNewPassword
}

function requestVirtualAccountPasswordSet_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.virtualMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.encryptedVirtualUserId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.encryptedNewPassword = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function requestVirtualAccountPasswordSet_args:write(oprot)
  oprot:writeStructBegin('requestVirtualAccountPasswordSet_args')
  if self.virtualMid ~= nil then
    oprot:writeFieldBegin('virtualMid', TType.STRING, 2)
    oprot:writeString(self.virtualMid)
    oprot:writeFieldEnd()
  end
  if self.encryptedVirtualUserId ~= nil then
    oprot:writeFieldBegin('encryptedVirtualUserId', TType.STRING, 3)
    oprot:writeString(self.encryptedVirtualUserId)
    oprot:writeFieldEnd()
  end
  if self.encryptedNewPassword ~= nil then
    oprot:writeFieldBegin('encryptedNewPassword', TType.STRING, 4)
    oprot:writeString(self.encryptedNewPassword)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

requestVirtualAccountPasswordSet_result = __TObject:new{
  e
}

function requestVirtualAccountPasswordSet_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function requestVirtualAccountPasswordSet_result:write(oprot)
  oprot:writeStructBegin('requestVirtualAccountPasswordSet_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

unregisterVirtualAccount_args = __TObject:new{
  virtualMid
}

function unregisterVirtualAccount_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.virtualMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function unregisterVirtualAccount_args:write(oprot)
  oprot:writeStructBegin('unregisterVirtualAccount_args')
  if self.virtualMid ~= nil then
    oprot:writeFieldBegin('virtualMid', TType.STRING, 2)
    oprot:writeString(self.virtualMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

unregisterVirtualAccount_result = __TObject:new{
  e
}

function unregisterVirtualAccount_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function unregisterVirtualAccount_result:write(oprot)
  oprot:writeStructBegin('unregisterVirtualAccount_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end