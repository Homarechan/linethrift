--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'line_ttypes'

BotServiceClient = __TObject.new(__TClient, {
  __type = 'BotServiceClient'
})

function BotServiceClient:notifyLeaveGroup(groupMid)
  self:send_notifyLeaveGroup(groupMid)
  self:recv_notifyLeaveGroup(groupMid)
end

function BotServiceClient:send_notifyLeaveGroup(groupMid)
  self.oprot:writeMessageBegin('notifyLeaveGroup', TMessageType.CALL, self._seqid)
  local args = notifyLeaveGroup_args:new{}
  args.groupMid = groupMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BotServiceClient:recv_notifyLeaveGroup(groupMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = notifyLeaveGroup_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function BotServiceClient:notifyLeaveRoom(roomMid)
  self:send_notifyLeaveRoom(roomMid)
  self:recv_notifyLeaveRoom(roomMid)
end

function BotServiceClient:send_notifyLeaveRoom(roomMid)
  self.oprot:writeMessageBegin('notifyLeaveRoom', TMessageType.CALL, self._seqid)
  local args = notifyLeaveRoom_args:new{}
  args.roomMid = roomMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BotServiceClient:recv_notifyLeaveRoom(roomMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = notifyLeaveRoom_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function BotServiceClient:getBotUseInfo(botMid)
  self:send_getBotUseInfo(botMid)
  return self:recv_getBotUseInfo(botMid)
end

function BotServiceClient:send_getBotUseInfo(botMid)
  self.oprot:writeMessageBegin('getBotUseInfo', TMessageType.CALL, self._seqid)
  local args = getBotUseInfo_args:new{}
  args.botMid = botMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BotServiceClient:recv_getBotUseInfo(botMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getBotUseInfo_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BotServiceClient:sendChatCheckedByWatermark(seq, mid, watermark, sessionId)
  self:send_sendChatCheckedByWatermark(seq, mid, watermark, sessionId)
  self:recv_sendChatCheckedByWatermark(seq, mid, watermark, sessionId)
end

function BotServiceClient:send_sendChatCheckedByWatermark(seq, mid, watermark, sessionId)
  self.oprot:writeMessageBegin('sendChatCheckedByWatermark', TMessageType.CALL, self._seqid)
  local args = sendChatCheckedByWatermark_args:new{}
  args.seq = seq
  args.mid = mid
  args.watermark = watermark
  args.sessionId = sessionId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BotServiceClient:recv_sendChatCheckedByWatermark(seq, mid, watermark, sessionId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendChatCheckedByWatermark_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end
BotServiceIface = __TObject:new{
  __type = 'BotServiceIface'
}


BotServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'BotServiceProcessor'
})

function BotServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function BotServiceProcessor:process_notifyLeaveGroup(seqid, iprot, oprot, server_ctx)
  local args = notifyLeaveGroup_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = notifyLeaveGroup_result:new{}
  local status, res = pcall(self.handler.notifyLeaveGroup, self.handler, args.groupMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('notifyLeaveGroup', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BotServiceProcessor:process_notifyLeaveRoom(seqid, iprot, oprot, server_ctx)
  local args = notifyLeaveRoom_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = notifyLeaveRoom_result:new{}
  local status, res = pcall(self.handler.notifyLeaveRoom, self.handler, args.roomMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('notifyLeaveRoom', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BotServiceProcessor:process_getBotUseInfo(seqid, iprot, oprot, server_ctx)
  local args = getBotUseInfo_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getBotUseInfo_result:new{}
  local status, res = pcall(self.handler.getBotUseInfo, self.handler, args.botMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getBotUseInfo', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BotServiceProcessor:process_sendChatCheckedByWatermark(seqid, iprot, oprot, server_ctx)
  local args = sendChatCheckedByWatermark_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendChatCheckedByWatermark_result:new{}
  local status, res = pcall(self.handler.sendChatCheckedByWatermark, self.handler, args.seq, args.mid, args.watermark, args.sessionId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendChatCheckedByWatermark', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

notifyLeaveGroup_args = __TObject:new{
  groupMid
}

function notifyLeaveGroup_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.groupMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function notifyLeaveGroup_args:write(oprot)
  oprot:writeStructBegin('notifyLeaveGroup_args')
  if self.groupMid ~= nil then
    oprot:writeFieldBegin('groupMid', TType.STRING, 1)
    oprot:writeString(self.groupMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

notifyLeaveGroup_result = __TObject:new{
  e
}

function notifyLeaveGroup_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function notifyLeaveGroup_result:write(oprot)
  oprot:writeStructBegin('notifyLeaveGroup_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

notifyLeaveRoom_args = __TObject:new{
  roomMid
}

function notifyLeaveRoom_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.roomMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function notifyLeaveRoom_args:write(oprot)
  oprot:writeStructBegin('notifyLeaveRoom_args')
  if self.roomMid ~= nil then
    oprot:writeFieldBegin('roomMid', TType.STRING, 1)
    oprot:writeString(self.roomMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

notifyLeaveRoom_result = __TObject:new{
  e
}

function notifyLeaveRoom_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function notifyLeaveRoom_result:write(oprot)
  oprot:writeStructBegin('notifyLeaveRoom_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBotUseInfo_args = __TObject:new{
  botMid
}

function getBotUseInfo_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.botMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBotUseInfo_args:write(oprot)
  oprot:writeStructBegin('getBotUseInfo_args')
  if self.botMid ~= nil then
    oprot:writeFieldBegin('botMid', TType.STRING, 2)
    oprot:writeString(self.botMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBotUseInfo_result = __TObject:new{
  success,
  e
}

function getBotUseInfo_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = BotUseInfo:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBotUseInfo_result:write(oprot)
  oprot:writeStructBegin('getBotUseInfo_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendChatCheckedByWatermark_args = __TObject:new{
  seq,
  mid,
  watermark,
  sessionId
}

function sendChatCheckedByWatermark_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.seq = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.watermark = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.sessionId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendChatCheckedByWatermark_args:write(oprot)
  oprot:writeStructBegin('sendChatCheckedByWatermark_args')
  if self.seq ~= nil then
    oprot:writeFieldBegin('seq', TType.I32, 1)
    oprot:writeI32(self.seq)
    oprot:writeFieldEnd()
  end
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 2)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.watermark ~= nil then
    oprot:writeFieldBegin('watermark', TType.I64, 3)
    oprot:writeI64(self.watermark)
    oprot:writeFieldEnd()
  end
  if self.sessionId ~= nil then
    oprot:writeFieldBegin('sessionId', TType.I32, 4)
    oprot:writeI32(self.sessionId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendChatCheckedByWatermark_result = __TObject:new{
  e
}

function sendChatCheckedByWatermark_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendChatCheckedByWatermark_result:write(oprot)
  oprot:writeStructBegin('sendChatCheckedByWatermark_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end