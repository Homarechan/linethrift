--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'line_ttypes'

SnsAdaptorServiceClient = __TObject.new(__TClient, {
  __type = 'SnsAdaptorServiceClient'
})

function SnsAdaptorServiceClient:getSnsFriends(snsIdType, snsAccessToken, startIdx, limit)
  self:send_getSnsFriends(snsIdType, snsAccessToken, startIdx, limit)
  return self:recv_getSnsFriends(snsIdType, snsAccessToken, startIdx, limit)
end

function SnsAdaptorServiceClient:send_getSnsFriends(snsIdType, snsAccessToken, startIdx, limit)
  self.oprot:writeMessageBegin('getSnsFriends', TMessageType.CALL, self._seqid)
  local args = getSnsFriends_args:new{}
  args.snsIdType = snsIdType
  args.snsAccessToken = snsAccessToken
  args.startIdx = startIdx
  args.limit = limit
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SnsAdaptorServiceClient:recv_getSnsFriends(snsIdType, snsAccessToken, startIdx, limit)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSnsFriends_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SnsAdaptorServiceClient:getSnsMyProfile(snsIdType, snsAccessToken)
  self:send_getSnsMyProfile(snsIdType, snsAccessToken)
  return self:recv_getSnsMyProfile(snsIdType, snsAccessToken)
end

function SnsAdaptorServiceClient:send_getSnsMyProfile(snsIdType, snsAccessToken)
  self.oprot:writeMessageBegin('getSnsMyProfile', TMessageType.CALL, self._seqid)
  local args = getSnsMyProfile_args:new{}
  args.snsIdType = snsIdType
  args.snsAccessToken = snsAccessToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SnsAdaptorServiceClient:recv_getSnsMyProfile(snsIdType, snsAccessToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSnsMyProfile_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SnsAdaptorServiceClient:postSnsInvitationMessage(snsIdType, snsAccessToken, toSnsUserId)
  self:send_postSnsInvitationMessage(snsIdType, snsAccessToken, toSnsUserId)
  self:recv_postSnsInvitationMessage(snsIdType, snsAccessToken, toSnsUserId)
end

function SnsAdaptorServiceClient:send_postSnsInvitationMessage(snsIdType, snsAccessToken, toSnsUserId)
  self.oprot:writeMessageBegin('postSnsInvitationMessage', TMessageType.CALL, self._seqid)
  local args = postSnsInvitationMessage_args:new{}
  args.snsIdType = snsIdType
  args.snsAccessToken = snsAccessToken
  args.toSnsUserId = toSnsUserId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SnsAdaptorServiceClient:recv_postSnsInvitationMessage(snsIdType, snsAccessToken, toSnsUserId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = postSnsInvitationMessage_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end
SnsAdaptorServiceIface = __TObject:new{
  __type = 'SnsAdaptorServiceIface'
}


SnsAdaptorServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'SnsAdaptorServiceProcessor'
})

function SnsAdaptorServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function SnsAdaptorServiceProcessor:process_getSnsFriends(seqid, iprot, oprot, server_ctx)
  local args = getSnsFriends_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSnsFriends_result:new{}
  local status, res = pcall(self.handler.getSnsFriends, self.handler, args.snsIdType, args.snsAccessToken, args.startIdx, args.limit)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSnsFriends', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SnsAdaptorServiceProcessor:process_getSnsMyProfile(seqid, iprot, oprot, server_ctx)
  local args = getSnsMyProfile_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSnsMyProfile_result:new{}
  local status, res = pcall(self.handler.getSnsMyProfile, self.handler, args.snsIdType, args.snsAccessToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSnsMyProfile', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SnsAdaptorServiceProcessor:process_postSnsInvitationMessage(seqid, iprot, oprot, server_ctx)
  local args = postSnsInvitationMessage_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = postSnsInvitationMessage_result:new{}
  local status, res = pcall(self.handler.postSnsInvitationMessage, self.handler, args.snsIdType, args.snsAccessToken, args.toSnsUserId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('postSnsInvitationMessage', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

getSnsFriends_args = __TObject:new{
  snsIdType,
  snsAccessToken,
  startIdx,
  limit
}

function getSnsFriends_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.snsIdType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.snsAccessToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.startIdx = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.limit = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSnsFriends_args:write(oprot)
  oprot:writeStructBegin('getSnsFriends_args')
  if self.snsIdType ~= nil then
    oprot:writeFieldBegin('snsIdType', TType.I32, 2)
    oprot:writeI32(self.snsIdType)
    oprot:writeFieldEnd()
  end
  if self.snsAccessToken ~= nil then
    oprot:writeFieldBegin('snsAccessToken', TType.STRING, 3)
    oprot:writeString(self.snsAccessToken)
    oprot:writeFieldEnd()
  end
  if self.startIdx ~= nil then
    oprot:writeFieldBegin('startIdx', TType.I32, 4)
    oprot:writeI32(self.startIdx)
    oprot:writeFieldEnd()
  end
  if self.limit ~= nil then
    oprot:writeFieldBegin('limit', TType.I32, 5)
    oprot:writeI32(self.limit)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSnsFriends_result = __TObject:new{
  success,
  e
}

function getSnsFriends_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SnsFriends:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSnsFriends_result:write(oprot)
  oprot:writeStructBegin('getSnsFriends_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSnsMyProfile_args = __TObject:new{
  snsIdType,
  snsAccessToken
}

function getSnsMyProfile_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.snsIdType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.snsAccessToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSnsMyProfile_args:write(oprot)
  oprot:writeStructBegin('getSnsMyProfile_args')
  if self.snsIdType ~= nil then
    oprot:writeFieldBegin('snsIdType', TType.I32, 2)
    oprot:writeI32(self.snsIdType)
    oprot:writeFieldEnd()
  end
  if self.snsAccessToken ~= nil then
    oprot:writeFieldBegin('snsAccessToken', TType.STRING, 3)
    oprot:writeString(self.snsAccessToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSnsMyProfile_result = __TObject:new{
  success,
  e
}

function getSnsMyProfile_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SnsProfile:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSnsMyProfile_result:write(oprot)
  oprot:writeStructBegin('getSnsMyProfile_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

postSnsInvitationMessage_args = __TObject:new{
  snsIdType,
  snsAccessToken,
  toSnsUserId
}

function postSnsInvitationMessage_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.snsIdType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.snsAccessToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.toSnsUserId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function postSnsInvitationMessage_args:write(oprot)
  oprot:writeStructBegin('postSnsInvitationMessage_args')
  if self.snsIdType ~= nil then
    oprot:writeFieldBegin('snsIdType', TType.I32, 2)
    oprot:writeI32(self.snsIdType)
    oprot:writeFieldEnd()
  end
  if self.snsAccessToken ~= nil then
    oprot:writeFieldBegin('snsAccessToken', TType.STRING, 3)
    oprot:writeString(self.snsAccessToken)
    oprot:writeFieldEnd()
  end
  if self.toSnsUserId ~= nil then
    oprot:writeFieldBegin('toSnsUserId', TType.STRING, 4)
    oprot:writeString(self.toSnsUserId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

postSnsInvitationMessage_result = __TObject:new{
  e
}

function postSnsInvitationMessage_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function postSnsInvitationMessage_result:write(oprot)
  oprot:writeStructBegin('postSnsInvitationMessage_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end