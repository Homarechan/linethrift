--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'line_ttypes'

BuddyManagementServiceClient = __TObject.new(__TClient, {
  __type = 'BuddyManagementServiceClient'
})

function BuddyManagementServiceClient:addBuddyMember(requestId, userMid)
  self:send_addBuddyMember(requestId, userMid)
  self:recv_addBuddyMember(requestId, userMid)
end

function BuddyManagementServiceClient:send_addBuddyMember(requestId, userMid)
  self.oprot:writeMessageBegin('addBuddyMember', TMessageType.CALL, self._seqid)
  local args = addBuddyMember_args:new{}
  args.requestId = requestId
  args.userMid = userMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_addBuddyMember(requestId, userMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = addBuddyMember_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function BuddyManagementServiceClient:addBuddyMembers(requestId, userMids)
  self:send_addBuddyMembers(requestId, userMids)
  self:recv_addBuddyMembers(requestId, userMids)
end

function BuddyManagementServiceClient:send_addBuddyMembers(requestId, userMids)
  self.oprot:writeMessageBegin('addBuddyMembers', TMessageType.CALL, self._seqid)
  local args = addBuddyMembers_args:new{}
  args.requestId = requestId
  args.userMids = userMids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_addBuddyMembers(requestId, userMids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = addBuddyMembers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function BuddyManagementServiceClient:blockBuddyMember(requestId, mid)
  self:send_blockBuddyMember(requestId, mid)
  self:recv_blockBuddyMember(requestId, mid)
end

function BuddyManagementServiceClient:send_blockBuddyMember(requestId, mid)
  self.oprot:writeMessageBegin('blockBuddyMember', TMessageType.CALL, self._seqid)
  local args = blockBuddyMember_args:new{}
  args.requestId = requestId
  args.mid = mid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_blockBuddyMember(requestId, mid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = blockBuddyMember_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function BuddyManagementServiceClient:commitSendMessagesToAll(requestIdList)
  self:send_commitSendMessagesToAll(requestIdList)
  return self:recv_commitSendMessagesToAll(requestIdList)
end

function BuddyManagementServiceClient:send_commitSendMessagesToAll(requestIdList)
  self.oprot:writeMessageBegin('commitSendMessagesToAll', TMessageType.CALL, self._seqid)
  local args = commitSendMessagesToAll_args:new{}
  args.requestIdList = requestIdList
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_commitSendMessagesToAll(requestIdList)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = commitSendMessagesToAll_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:commitSendMessagesToMids(requestIdList, mids)
  self:send_commitSendMessagesToMids(requestIdList, mids)
  return self:recv_commitSendMessagesToMids(requestIdList, mids)
end

function BuddyManagementServiceClient:send_commitSendMessagesToMids(requestIdList, mids)
  self.oprot:writeMessageBegin('commitSendMessagesToMids', TMessageType.CALL, self._seqid)
  local args = commitSendMessagesToMids_args:new{}
  args.requestIdList = requestIdList
  args.mids = mids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_commitSendMessagesToMids(requestIdList, mids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = commitSendMessagesToMids_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:containsBuddyMember(requestId, userMid)
  self:send_containsBuddyMember(requestId, userMid)
  return self:recv_containsBuddyMember(requestId, userMid)
end

function BuddyManagementServiceClient:send_containsBuddyMember(requestId, userMid)
  self.oprot:writeMessageBegin('containsBuddyMember', TMessageType.CALL, self._seqid)
  local args = containsBuddyMember_args:new{}
  args.requestId = requestId
  args.userMid = userMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_containsBuddyMember(requestId, userMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = containsBuddyMember_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:downloadMessageContent(requestId, messageId)
  self:send_downloadMessageContent(requestId, messageId)
  return self:recv_downloadMessageContent(requestId, messageId)
end

function BuddyManagementServiceClient:send_downloadMessageContent(requestId, messageId)
  self.oprot:writeMessageBegin('downloadMessageContent', TMessageType.CALL, self._seqid)
  local args = downloadMessageContent_args:new{}
  args.requestId = requestId
  args.messageId = messageId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_downloadMessageContent(requestId, messageId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = downloadMessageContent_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:downloadMessageContentPreview(requestId, messageId)
  self:send_downloadMessageContentPreview(requestId, messageId)
  return self:recv_downloadMessageContentPreview(requestId, messageId)
end

function BuddyManagementServiceClient:send_downloadMessageContentPreview(requestId, messageId)
  self.oprot:writeMessageBegin('downloadMessageContentPreview', TMessageType.CALL, self._seqid)
  local args = downloadMessageContentPreview_args:new{}
  args.requestId = requestId
  args.messageId = messageId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_downloadMessageContentPreview(requestId, messageId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = downloadMessageContentPreview_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:downloadProfileImage(requestId)
  self:send_downloadProfileImage(requestId)
  return self:recv_downloadProfileImage(requestId)
end

function BuddyManagementServiceClient:send_downloadProfileImage(requestId)
  self.oprot:writeMessageBegin('downloadProfileImage', TMessageType.CALL, self._seqid)
  local args = downloadProfileImage_args:new{}
  args.requestId = requestId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_downloadProfileImage(requestId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = downloadProfileImage_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:downloadProfileImagePreview(requestId)
  self:send_downloadProfileImagePreview(requestId)
  return self:recv_downloadProfileImagePreview(requestId)
end

function BuddyManagementServiceClient:send_downloadProfileImagePreview(requestId)
  self.oprot:writeMessageBegin('downloadProfileImagePreview', TMessageType.CALL, self._seqid)
  local args = downloadProfileImagePreview_args:new{}
  args.requestId = requestId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_downloadProfileImagePreview(requestId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = downloadProfileImagePreview_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:getActiveMemberCountByBuddyMid(buddyMid)
  self:send_getActiveMemberCountByBuddyMid(buddyMid)
  return self:recv_getActiveMemberCountByBuddyMid(buddyMid)
end

function BuddyManagementServiceClient:send_getActiveMemberCountByBuddyMid(buddyMid)
  self.oprot:writeMessageBegin('getActiveMemberCountByBuddyMid', TMessageType.CALL, self._seqid)
  local args = getActiveMemberCountByBuddyMid_args:new{}
  args.buddyMid = buddyMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_getActiveMemberCountByBuddyMid(buddyMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getActiveMemberCountByBuddyMid_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:getActiveMemberMidsByBuddyMid(buddyMid)
  self:send_getActiveMemberMidsByBuddyMid(buddyMid)
  return self:recv_getActiveMemberMidsByBuddyMid(buddyMid)
end

function BuddyManagementServiceClient:send_getActiveMemberMidsByBuddyMid(buddyMid)
  self.oprot:writeMessageBegin('getActiveMemberMidsByBuddyMid', TMessageType.CALL, self._seqid)
  local args = getActiveMemberMidsByBuddyMid_args:new{}
  args.buddyMid = buddyMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_getActiveMemberMidsByBuddyMid(buddyMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getActiveMemberMidsByBuddyMid_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:getAllBuddyMembers()
  self:send_getAllBuddyMembers()
  return self:recv_getAllBuddyMembers()
end

function BuddyManagementServiceClient:send_getAllBuddyMembers()
  self.oprot:writeMessageBegin('getAllBuddyMembers', TMessageType.CALL, self._seqid)
  local args = getAllBuddyMembers_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_getAllBuddyMembers()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getAllBuddyMembers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:getBlockedBuddyMembers()
  self:send_getBlockedBuddyMembers()
  return self:recv_getBlockedBuddyMembers()
end

function BuddyManagementServiceClient:send_getBlockedBuddyMembers()
  self.oprot:writeMessageBegin('getBlockedBuddyMembers', TMessageType.CALL, self._seqid)
  local args = getBlockedBuddyMembers_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_getBlockedBuddyMembers()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getBlockedBuddyMembers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:getBlockerCountByBuddyMid(buddyMid)
  self:send_getBlockerCountByBuddyMid(buddyMid)
  return self:recv_getBlockerCountByBuddyMid(buddyMid)
end

function BuddyManagementServiceClient:send_getBlockerCountByBuddyMid(buddyMid)
  self.oprot:writeMessageBegin('getBlockerCountByBuddyMid', TMessageType.CALL, self._seqid)
  local args = getBlockerCountByBuddyMid_args:new{}
  args.buddyMid = buddyMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_getBlockerCountByBuddyMid(buddyMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getBlockerCountByBuddyMid_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:getBuddyDetailByMid(buddyMid)
  self:send_getBuddyDetailByMid(buddyMid)
  return self:recv_getBuddyDetailByMid(buddyMid)
end

function BuddyManagementServiceClient:send_getBuddyDetailByMid(buddyMid)
  self.oprot:writeMessageBegin('getBuddyDetailByMid', TMessageType.CALL, self._seqid)
  local args = getBuddyDetailByMid_args:new{}
  args.buddyMid = buddyMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_getBuddyDetailByMid(buddyMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getBuddyDetailByMid_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:getBuddyProfile()
  self:send_getBuddyProfile()
  return self:recv_getBuddyProfile()
end

function BuddyManagementServiceClient:send_getBuddyProfile()
  self.oprot:writeMessageBegin('getBuddyProfile', TMessageType.CALL, self._seqid)
  local args = getBuddyProfile_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_getBuddyProfile()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getBuddyProfile_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:getContactTicket()
  self:send_getContactTicket()
  return self:recv_getContactTicket()
end

function BuddyManagementServiceClient:send_getContactTicket()
  self.oprot:writeMessageBegin('getContactTicket', TMessageType.CALL, self._seqid)
  local args = getContactTicket_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_getContactTicket()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getContactTicket_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:getMemberCountByBuddyMid(buddyMid)
  self:send_getMemberCountByBuddyMid(buddyMid)
  return self:recv_getMemberCountByBuddyMid(buddyMid)
end

function BuddyManagementServiceClient:send_getMemberCountByBuddyMid(buddyMid)
  self.oprot:writeMessageBegin('getMemberCountByBuddyMid', TMessageType.CALL, self._seqid)
  local args = getMemberCountByBuddyMid_args:new{}
  args.buddyMid = buddyMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_getMemberCountByBuddyMid(buddyMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getMemberCountByBuddyMid_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:getSendBuddyMessageResult(sendBuddyMessageRequestId)
  self:send_getSendBuddyMessageResult(sendBuddyMessageRequestId)
  return self:recv_getSendBuddyMessageResult(sendBuddyMessageRequestId)
end

function BuddyManagementServiceClient:send_getSendBuddyMessageResult(sendBuddyMessageRequestId)
  self.oprot:writeMessageBegin('getSendBuddyMessageResult', TMessageType.CALL, self._seqid)
  local args = getSendBuddyMessageResult_args:new{}
  args.sendBuddyMessageRequestId = sendBuddyMessageRequestId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_getSendBuddyMessageResult(sendBuddyMessageRequestId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSendBuddyMessageResult_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:getSetBuddyOnAirResult(setBuddyOnAirRequestId)
  self:send_getSetBuddyOnAirResult(setBuddyOnAirRequestId)
  return self:recv_getSetBuddyOnAirResult(setBuddyOnAirRequestId)
end

function BuddyManagementServiceClient:send_getSetBuddyOnAirResult(setBuddyOnAirRequestId)
  self.oprot:writeMessageBegin('getSetBuddyOnAirResult', TMessageType.CALL, self._seqid)
  local args = getSetBuddyOnAirResult_args:new{}
  args.setBuddyOnAirRequestId = setBuddyOnAirRequestId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_getSetBuddyOnAirResult(setBuddyOnAirRequestId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSetBuddyOnAirResult_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:getUpdateBuddyProfileResult(updateBuddyProfileRequestId)
  self:send_getUpdateBuddyProfileResult(updateBuddyProfileRequestId)
  return self:recv_getUpdateBuddyProfileResult(updateBuddyProfileRequestId)
end

function BuddyManagementServiceClient:send_getUpdateBuddyProfileResult(updateBuddyProfileRequestId)
  self.oprot:writeMessageBegin('getUpdateBuddyProfileResult', TMessageType.CALL, self._seqid)
  local args = getUpdateBuddyProfileResult_args:new{}
  args.updateBuddyProfileRequestId = updateBuddyProfileRequestId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_getUpdateBuddyProfileResult(updateBuddyProfileRequestId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getUpdateBuddyProfileResult_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:isBuddyOnAirByMid(buddyMid)
  self:send_isBuddyOnAirByMid(buddyMid)
  return self:recv_isBuddyOnAirByMid(buddyMid)
end

function BuddyManagementServiceClient:send_isBuddyOnAirByMid(buddyMid)
  self.oprot:writeMessageBegin('isBuddyOnAirByMid', TMessageType.CALL, self._seqid)
  local args = isBuddyOnAirByMid_args:new{}
  args.buddyMid = buddyMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_isBuddyOnAirByMid(buddyMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = isBuddyOnAirByMid_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:linkAndSendBuddyContentMessageToAllAsync(requestId, msg, sourceContentId)
  self:send_linkAndSendBuddyContentMessageToAllAsync(requestId, msg, sourceContentId)
  return self:recv_linkAndSendBuddyContentMessageToAllAsync(requestId, msg, sourceContentId)
end

function BuddyManagementServiceClient:send_linkAndSendBuddyContentMessageToAllAsync(requestId, msg, sourceContentId)
  self.oprot:writeMessageBegin('linkAndSendBuddyContentMessageToAllAsync', TMessageType.CALL, self._seqid)
  local args = linkAndSendBuddyContentMessageToAllAsync_args:new{}
  args.requestId = requestId
  args.msg = msg
  args.sourceContentId = sourceContentId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_linkAndSendBuddyContentMessageToAllAsync(requestId, msg, sourceContentId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = linkAndSendBuddyContentMessageToAllAsync_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:linkAndSendBuddyContentMessageToMids(requestId, msg, sourceContentId, mids)
  self:send_linkAndSendBuddyContentMessageToMids(requestId, msg, sourceContentId, mids)
  return self:recv_linkAndSendBuddyContentMessageToMids(requestId, msg, sourceContentId, mids)
end

function BuddyManagementServiceClient:send_linkAndSendBuddyContentMessageToMids(requestId, msg, sourceContentId, mids)
  self.oprot:writeMessageBegin('linkAndSendBuddyContentMessageToMids', TMessageType.CALL, self._seqid)
  local args = linkAndSendBuddyContentMessageToMids_args:new{}
  args.requestId = requestId
  args.msg = msg
  args.sourceContentId = sourceContentId
  args.mids = mids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_linkAndSendBuddyContentMessageToMids(requestId, msg, sourceContentId, mids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = linkAndSendBuddyContentMessageToMids_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:notifyBuddyBlocked(buddyMid, blockerMid)
  self:send_notifyBuddyBlocked(buddyMid, blockerMid)
  self:recv_notifyBuddyBlocked(buddyMid, blockerMid)
end

function BuddyManagementServiceClient:send_notifyBuddyBlocked(buddyMid, blockerMid)
  self.oprot:writeMessageBegin('notifyBuddyBlocked', TMessageType.CALL, self._seqid)
  local args = notifyBuddyBlocked_args:new{}
  args.buddyMid = buddyMid
  args.blockerMid = blockerMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_notifyBuddyBlocked(buddyMid, blockerMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = notifyBuddyBlocked_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function BuddyManagementServiceClient:notifyBuddyUnblocked(buddyMid, blockerMid)
  self:send_notifyBuddyUnblocked(buddyMid, blockerMid)
  self:recv_notifyBuddyUnblocked(buddyMid, blockerMid)
end

function BuddyManagementServiceClient:send_notifyBuddyUnblocked(buddyMid, blockerMid)
  self.oprot:writeMessageBegin('notifyBuddyUnblocked', TMessageType.CALL, self._seqid)
  local args = notifyBuddyUnblocked_args:new{}
  args.buddyMid = buddyMid
  args.blockerMid = blockerMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_notifyBuddyUnblocked(buddyMid, blockerMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = notifyBuddyUnblocked_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function BuddyManagementServiceClient:registerBuddy(buddyId, searchId, displayName, statusMeessage, picture, settings)
  self:send_registerBuddy(buddyId, searchId, displayName, statusMeessage, picture, settings)
  return self:recv_registerBuddy(buddyId, searchId, displayName, statusMeessage, picture, settings)
end

function BuddyManagementServiceClient:send_registerBuddy(buddyId, searchId, displayName, statusMeessage, picture, settings)
  self.oprot:writeMessageBegin('registerBuddy', TMessageType.CALL, self._seqid)
  local args = registerBuddy_args:new{}
  args.buddyId = buddyId
  args.searchId = searchId
  args.displayName = displayName
  args.statusMeessage = statusMeessage
  args.picture = picture
  args.settings = settings
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_registerBuddy(buddyId, searchId, displayName, statusMeessage, picture, settings)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = registerBuddy_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:registerBuddyAdmin(buddyId, searchId, displayName, statusMessage, picture)
  self:send_registerBuddyAdmin(buddyId, searchId, displayName, statusMessage, picture)
  return self:recv_registerBuddyAdmin(buddyId, searchId, displayName, statusMessage, picture)
end

function BuddyManagementServiceClient:send_registerBuddyAdmin(buddyId, searchId, displayName, statusMessage, picture)
  self.oprot:writeMessageBegin('registerBuddyAdmin', TMessageType.CALL, self._seqid)
  local args = registerBuddyAdmin_args:new{}
  args.buddyId = buddyId
  args.searchId = searchId
  args.displayName = displayName
  args.statusMessage = statusMessage
  args.picture = picture
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_registerBuddyAdmin(buddyId, searchId, displayName, statusMessage, picture)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = registerBuddyAdmin_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:reissueContactTicket(expirationTime, maxUseCount)
  self:send_reissueContactTicket(expirationTime, maxUseCount)
  return self:recv_reissueContactTicket(expirationTime, maxUseCount)
end

function BuddyManagementServiceClient:send_reissueContactTicket(expirationTime, maxUseCount)
  self.oprot:writeMessageBegin('reissueContactTicket', TMessageType.CALL, self._seqid)
  local args = reissueContactTicket_args:new{}
  args.expirationTime = expirationTime
  args.maxUseCount = maxUseCount
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_reissueContactTicket(expirationTime, maxUseCount)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = reissueContactTicket_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:removeBuddyMember(requestId, userMid)
  self:send_removeBuddyMember(requestId, userMid)
  self:recv_removeBuddyMember(requestId, userMid)
end

function BuddyManagementServiceClient:send_removeBuddyMember(requestId, userMid)
  self.oprot:writeMessageBegin('removeBuddyMember', TMessageType.CALL, self._seqid)
  local args = removeBuddyMember_args:new{}
  args.requestId = requestId
  args.userMid = userMid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_removeBuddyMember(requestId, userMid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = removeBuddyMember_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function BuddyManagementServiceClient:removeBuddyMembers(requestId, userMids)
  self:send_removeBuddyMembers(requestId, userMids)
  self:recv_removeBuddyMembers(requestId, userMids)
end

function BuddyManagementServiceClient:send_removeBuddyMembers(requestId, userMids)
  self.oprot:writeMessageBegin('removeBuddyMembers', TMessageType.CALL, self._seqid)
  local args = removeBuddyMembers_args:new{}
  args.requestId = requestId
  args.userMids = userMids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_removeBuddyMembers(requestId, userMids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = removeBuddyMembers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function BuddyManagementServiceClient:sendBuddyContentMessageToAll(requestId, msg, content)
  self:send_sendBuddyContentMessageToAll(requestId, msg, content)
  return self:recv_sendBuddyContentMessageToAll(requestId, msg, content)
end

function BuddyManagementServiceClient:send_sendBuddyContentMessageToAll(requestId, msg, content)
  self.oprot:writeMessageBegin('sendBuddyContentMessageToAll', TMessageType.CALL, self._seqid)
  local args = sendBuddyContentMessageToAll_args:new{}
  args.requestId = requestId
  args.msg = msg
  args.content = content
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_sendBuddyContentMessageToAll(requestId, msg, content)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendBuddyContentMessageToAll_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:sendBuddyContentMessageToAllAsync(requestId, msg, content)
  self:send_sendBuddyContentMessageToAllAsync(requestId, msg, content)
  return self:recv_sendBuddyContentMessageToAllAsync(requestId, msg, content)
end

function BuddyManagementServiceClient:send_sendBuddyContentMessageToAllAsync(requestId, msg, content)
  self.oprot:writeMessageBegin('sendBuddyContentMessageToAllAsync', TMessageType.CALL, self._seqid)
  local args = sendBuddyContentMessageToAllAsync_args:new{}
  args.requestId = requestId
  args.msg = msg
  args.content = content
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_sendBuddyContentMessageToAllAsync(requestId, msg, content)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendBuddyContentMessageToAllAsync_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:sendBuddyContentMessageToMids(requestId, msg, content, mids)
  self:send_sendBuddyContentMessageToMids(requestId, msg, content, mids)
  return self:recv_sendBuddyContentMessageToMids(requestId, msg, content, mids)
end

function BuddyManagementServiceClient:send_sendBuddyContentMessageToMids(requestId, msg, content, mids)
  self.oprot:writeMessageBegin('sendBuddyContentMessageToMids', TMessageType.CALL, self._seqid)
  local args = sendBuddyContentMessageToMids_args:new{}
  args.requestId = requestId
  args.msg = msg
  args.content = content
  args.mids = mids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_sendBuddyContentMessageToMids(requestId, msg, content, mids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendBuddyContentMessageToMids_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:sendBuddyContentMessageToMidsAsync(requestId, msg, content, mids)
  self:send_sendBuddyContentMessageToMidsAsync(requestId, msg, content, mids)
  return self:recv_sendBuddyContentMessageToMidsAsync(requestId, msg, content, mids)
end

function BuddyManagementServiceClient:send_sendBuddyContentMessageToMidsAsync(requestId, msg, content, mids)
  self.oprot:writeMessageBegin('sendBuddyContentMessageToMidsAsync', TMessageType.CALL, self._seqid)
  local args = sendBuddyContentMessageToMidsAsync_args:new{}
  args.requestId = requestId
  args.msg = msg
  args.content = content
  args.mids = mids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_sendBuddyContentMessageToMidsAsync(requestId, msg, content, mids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendBuddyContentMessageToMidsAsync_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:sendBuddyMessageToAll(requestId, msg)
  self:send_sendBuddyMessageToAll(requestId, msg)
  return self:recv_sendBuddyMessageToAll(requestId, msg)
end

function BuddyManagementServiceClient:send_sendBuddyMessageToAll(requestId, msg)
  self.oprot:writeMessageBegin('sendBuddyMessageToAll', TMessageType.CALL, self._seqid)
  local args = sendBuddyMessageToAll_args:new{}
  args.requestId = requestId
  args.msg = msg
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_sendBuddyMessageToAll(requestId, msg)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendBuddyMessageToAll_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:sendBuddyMessageToAllAsync(requestId, msg)
  self:send_sendBuddyMessageToAllAsync(requestId, msg)
  return self:recv_sendBuddyMessageToAllAsync(requestId, msg)
end

function BuddyManagementServiceClient:send_sendBuddyMessageToAllAsync(requestId, msg)
  self.oprot:writeMessageBegin('sendBuddyMessageToAllAsync', TMessageType.CALL, self._seqid)
  local args = sendBuddyMessageToAllAsync_args:new{}
  args.requestId = requestId
  args.msg = msg
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_sendBuddyMessageToAllAsync(requestId, msg)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendBuddyMessageToAllAsync_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:sendBuddyMessageToMids(requestId, msg, mids)
  self:send_sendBuddyMessageToMids(requestId, msg, mids)
  return self:recv_sendBuddyMessageToMids(requestId, msg, mids)
end

function BuddyManagementServiceClient:send_sendBuddyMessageToMids(requestId, msg, mids)
  self.oprot:writeMessageBegin('sendBuddyMessageToMids', TMessageType.CALL, self._seqid)
  local args = sendBuddyMessageToMids_args:new{}
  args.requestId = requestId
  args.msg = msg
  args.mids = mids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_sendBuddyMessageToMids(requestId, msg, mids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendBuddyMessageToMids_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:sendBuddyMessageToMidsAsync(requestId, msg, mids)
  self:send_sendBuddyMessageToMidsAsync(requestId, msg, mids)
  return self:recv_sendBuddyMessageToMidsAsync(requestId, msg, mids)
end

function BuddyManagementServiceClient:send_sendBuddyMessageToMidsAsync(requestId, msg, mids)
  self.oprot:writeMessageBegin('sendBuddyMessageToMidsAsync', TMessageType.CALL, self._seqid)
  local args = sendBuddyMessageToMidsAsync_args:new{}
  args.requestId = requestId
  args.msg = msg
  args.mids = mids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_sendBuddyMessageToMidsAsync(requestId, msg, mids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendBuddyMessageToMidsAsync_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:sendIndividualEventToAllAsync(requestId, buddyMid, notificationStatus)
  self:send_sendIndividualEventToAllAsync(requestId, buddyMid, notificationStatus)
  self:recv_sendIndividualEventToAllAsync(requestId, buddyMid, notificationStatus)
end

function BuddyManagementServiceClient:send_sendIndividualEventToAllAsync(requestId, buddyMid, notificationStatus)
  self.oprot:writeMessageBegin('sendIndividualEventToAllAsync', TMessageType.CALL, self._seqid)
  local args = sendIndividualEventToAllAsync_args:new{}
  args.requestId = requestId
  args.buddyMid = buddyMid
  args.notificationStatus = notificationStatus
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_sendIndividualEventToAllAsync(requestId, buddyMid, notificationStatus)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendIndividualEventToAllAsync_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function BuddyManagementServiceClient:setBuddyOnAir(requestId, onAir)
  self:send_setBuddyOnAir(requestId, onAir)
  return self:recv_setBuddyOnAir(requestId, onAir)
end

function BuddyManagementServiceClient:send_setBuddyOnAir(requestId, onAir)
  self.oprot:writeMessageBegin('setBuddyOnAir', TMessageType.CALL, self._seqid)
  local args = setBuddyOnAir_args:new{}
  args.requestId = requestId
  args.onAir = onAir
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_setBuddyOnAir(requestId, onAir)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = setBuddyOnAir_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:setBuddyOnAirAsync(requestId, onAir)
  self:send_setBuddyOnAirAsync(requestId, onAir)
  return self:recv_setBuddyOnAirAsync(requestId, onAir)
end

function BuddyManagementServiceClient:send_setBuddyOnAirAsync(requestId, onAir)
  self.oprot:writeMessageBegin('setBuddyOnAirAsync', TMessageType.CALL, self._seqid)
  local args = setBuddyOnAirAsync_args:new{}
  args.requestId = requestId
  args.onAir = onAir
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_setBuddyOnAirAsync(requestId, onAir)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = setBuddyOnAirAsync_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:storeMessage(requestId, messageRequest)
  self:send_storeMessage(requestId, messageRequest)
  return self:recv_storeMessage(requestId, messageRequest)
end

function BuddyManagementServiceClient:send_storeMessage(requestId, messageRequest)
  self.oprot:writeMessageBegin('storeMessage', TMessageType.CALL, self._seqid)
  local args = storeMessage_args:new{}
  args.requestId = requestId
  args.messageRequest = messageRequest
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_storeMessage(requestId, messageRequest)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = storeMessage_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:unblockBuddyMember(requestId, mid)
  self:send_unblockBuddyMember(requestId, mid)
  self:recv_unblockBuddyMember(requestId, mid)
end

function BuddyManagementServiceClient:send_unblockBuddyMember(requestId, mid)
  self.oprot:writeMessageBegin('unblockBuddyMember', TMessageType.CALL, self._seqid)
  local args = unblockBuddyMember_args:new{}
  args.requestId = requestId
  args.mid = mid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_unblockBuddyMember(requestId, mid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = unblockBuddyMember_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function BuddyManagementServiceClient:unregisterBuddy(requestId)
  self:send_unregisterBuddy(requestId)
  self:recv_unregisterBuddy(requestId)
end

function BuddyManagementServiceClient:send_unregisterBuddy(requestId)
  self.oprot:writeMessageBegin('unregisterBuddy', TMessageType.CALL, self._seqid)
  local args = unregisterBuddy_args:new{}
  args.requestId = requestId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_unregisterBuddy(requestId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = unregisterBuddy_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function BuddyManagementServiceClient:unregisterBuddyAdmin(requestId)
  self:send_unregisterBuddyAdmin(requestId)
  self:recv_unregisterBuddyAdmin(requestId)
end

function BuddyManagementServiceClient:send_unregisterBuddyAdmin(requestId)
  self.oprot:writeMessageBegin('unregisterBuddyAdmin', TMessageType.CALL, self._seqid)
  local args = unregisterBuddyAdmin_args:new{}
  args.requestId = requestId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_unregisterBuddyAdmin(requestId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = unregisterBuddyAdmin_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function BuddyManagementServiceClient:updateBuddyAdminProfileAttribute(requestId, attributes)
  self:send_updateBuddyAdminProfileAttribute(requestId, attributes)
  self:recv_updateBuddyAdminProfileAttribute(requestId, attributes)
end

function BuddyManagementServiceClient:send_updateBuddyAdminProfileAttribute(requestId, attributes)
  self.oprot:writeMessageBegin('updateBuddyAdminProfileAttribute', TMessageType.CALL, self._seqid)
  local args = updateBuddyAdminProfileAttribute_args:new{}
  args.requestId = requestId
  args.attributes = attributes
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_updateBuddyAdminProfileAttribute(requestId, attributes)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateBuddyAdminProfileAttribute_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function BuddyManagementServiceClient:updateBuddyAdminProfileImage(requestId, picture)
  self:send_updateBuddyAdminProfileImage(requestId, picture)
  self:recv_updateBuddyAdminProfileImage(requestId, picture)
end

function BuddyManagementServiceClient:send_updateBuddyAdminProfileImage(requestId, picture)
  self.oprot:writeMessageBegin('updateBuddyAdminProfileImage', TMessageType.CALL, self._seqid)
  local args = updateBuddyAdminProfileImage_args:new{}
  args.requestId = requestId
  args.picture = picture
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_updateBuddyAdminProfileImage(requestId, picture)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateBuddyAdminProfileImage_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function BuddyManagementServiceClient:updateBuddyProfileAttributes(requestId, attributes)
  self:send_updateBuddyProfileAttributes(requestId, attributes)
  return self:recv_updateBuddyProfileAttributes(requestId, attributes)
end

function BuddyManagementServiceClient:send_updateBuddyProfileAttributes(requestId, attributes)
  self.oprot:writeMessageBegin('updateBuddyProfileAttributes', TMessageType.CALL, self._seqid)
  local args = updateBuddyProfileAttributes_args:new{}
  args.requestId = requestId
  args.attributes = attributes
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_updateBuddyProfileAttributes(requestId, attributes)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateBuddyProfileAttributes_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:updateBuddyProfileAttributesAsync(requestId, attributes)
  self:send_updateBuddyProfileAttributesAsync(requestId, attributes)
  return self:recv_updateBuddyProfileAttributesAsync(requestId, attributes)
end

function BuddyManagementServiceClient:send_updateBuddyProfileAttributesAsync(requestId, attributes)
  self.oprot:writeMessageBegin('updateBuddyProfileAttributesAsync', TMessageType.CALL, self._seqid)
  local args = updateBuddyProfileAttributesAsync_args:new{}
  args.requestId = requestId
  args.attributes = attributes
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_updateBuddyProfileAttributesAsync(requestId, attributes)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateBuddyProfileAttributesAsync_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:updateBuddyProfileImage(requestId, image)
  self:send_updateBuddyProfileImage(requestId, image)
  return self:recv_updateBuddyProfileImage(requestId, image)
end

function BuddyManagementServiceClient:send_updateBuddyProfileImage(requestId, image)
  self.oprot:writeMessageBegin('updateBuddyProfileImage', TMessageType.CALL, self._seqid)
  local args = updateBuddyProfileImage_args:new{}
  args.requestId = requestId
  args.image = image
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_updateBuddyProfileImage(requestId, image)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateBuddyProfileImage_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:updateBuddyProfileImageAsync(requestId, image)
  self:send_updateBuddyProfileImageAsync(requestId, image)
  return self:recv_updateBuddyProfileImageAsync(requestId, image)
end

function BuddyManagementServiceClient:send_updateBuddyProfileImageAsync(requestId, image)
  self.oprot:writeMessageBegin('updateBuddyProfileImageAsync', TMessageType.CALL, self._seqid)
  local args = updateBuddyProfileImageAsync_args:new{}
  args.requestId = requestId
  args.image = image
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_updateBuddyProfileImageAsync(requestId, image)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateBuddyProfileImageAsync_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BuddyManagementServiceClient:updateBuddySearchId(requestId, searchId)
  self:send_updateBuddySearchId(requestId, searchId)
  self:recv_updateBuddySearchId(requestId, searchId)
end

function BuddyManagementServiceClient:send_updateBuddySearchId(requestId, searchId)
  self.oprot:writeMessageBegin('updateBuddySearchId', TMessageType.CALL, self._seqid)
  local args = updateBuddySearchId_args:new{}
  args.requestId = requestId
  args.searchId = searchId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_updateBuddySearchId(requestId, searchId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateBuddySearchId_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function BuddyManagementServiceClient:updateBuddySettings(settings)
  self:send_updateBuddySettings(settings)
  self:recv_updateBuddySettings(settings)
end

function BuddyManagementServiceClient:send_updateBuddySettings(settings)
  self.oprot:writeMessageBegin('updateBuddySettings', TMessageType.CALL, self._seqid)
  local args = updateBuddySettings_args:new{}
  args.settings = settings
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_updateBuddySettings(settings)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateBuddySettings_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function BuddyManagementServiceClient:uploadBuddyContent(contentType, content)
  self:send_uploadBuddyContent(contentType, content)
  return self:recv_uploadBuddyContent(contentType, content)
end

function BuddyManagementServiceClient:send_uploadBuddyContent(contentType, content)
  self.oprot:writeMessageBegin('uploadBuddyContent', TMessageType.CALL, self._seqid)
  local args = uploadBuddyContent_args:new{}
  args.contentType = contentType
  args.content = content
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BuddyManagementServiceClient:recv_uploadBuddyContent(contentType, content)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = uploadBuddyContent_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
BuddyManagementServiceIface = __TObject:new{
  __type = 'BuddyManagementServiceIface'
}


BuddyManagementServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'BuddyManagementServiceProcessor'
})

function BuddyManagementServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function BuddyManagementServiceProcessor:process_addBuddyMember(seqid, iprot, oprot, server_ctx)
  local args = addBuddyMember_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = addBuddyMember_result:new{}
  local status, res = pcall(self.handler.addBuddyMember, self.handler, args.requestId, args.userMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('addBuddyMember', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_addBuddyMembers(seqid, iprot, oprot, server_ctx)
  local args = addBuddyMembers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = addBuddyMembers_result:new{}
  local status, res = pcall(self.handler.addBuddyMembers, self.handler, args.requestId, args.userMids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('addBuddyMembers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_blockBuddyMember(seqid, iprot, oprot, server_ctx)
  local args = blockBuddyMember_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = blockBuddyMember_result:new{}
  local status, res = pcall(self.handler.blockBuddyMember, self.handler, args.requestId, args.mid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('blockBuddyMember', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_commitSendMessagesToAll(seqid, iprot, oprot, server_ctx)
  local args = commitSendMessagesToAll_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = commitSendMessagesToAll_result:new{}
  local status, res = pcall(self.handler.commitSendMessagesToAll, self.handler, args.requestIdList)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('commitSendMessagesToAll', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_commitSendMessagesToMids(seqid, iprot, oprot, server_ctx)
  local args = commitSendMessagesToMids_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = commitSendMessagesToMids_result:new{}
  local status, res = pcall(self.handler.commitSendMessagesToMids, self.handler, args.requestIdList, args.mids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('commitSendMessagesToMids', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_containsBuddyMember(seqid, iprot, oprot, server_ctx)
  local args = containsBuddyMember_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = containsBuddyMember_result:new{}
  local status, res = pcall(self.handler.containsBuddyMember, self.handler, args.requestId, args.userMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('containsBuddyMember', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_downloadMessageContent(seqid, iprot, oprot, server_ctx)
  local args = downloadMessageContent_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = downloadMessageContent_result:new{}
  local status, res = pcall(self.handler.downloadMessageContent, self.handler, args.requestId, args.messageId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('downloadMessageContent', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_downloadMessageContentPreview(seqid, iprot, oprot, server_ctx)
  local args = downloadMessageContentPreview_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = downloadMessageContentPreview_result:new{}
  local status, res = pcall(self.handler.downloadMessageContentPreview, self.handler, args.requestId, args.messageId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('downloadMessageContentPreview', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_downloadProfileImage(seqid, iprot, oprot, server_ctx)
  local args = downloadProfileImage_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = downloadProfileImage_result:new{}
  local status, res = pcall(self.handler.downloadProfileImage, self.handler, args.requestId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('downloadProfileImage', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_downloadProfileImagePreview(seqid, iprot, oprot, server_ctx)
  local args = downloadProfileImagePreview_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = downloadProfileImagePreview_result:new{}
  local status, res = pcall(self.handler.downloadProfileImagePreview, self.handler, args.requestId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('downloadProfileImagePreview', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_getActiveMemberCountByBuddyMid(seqid, iprot, oprot, server_ctx)
  local args = getActiveMemberCountByBuddyMid_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getActiveMemberCountByBuddyMid_result:new{}
  local status, res = pcall(self.handler.getActiveMemberCountByBuddyMid, self.handler, args.buddyMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getActiveMemberCountByBuddyMid', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_getActiveMemberMidsByBuddyMid(seqid, iprot, oprot, server_ctx)
  local args = getActiveMemberMidsByBuddyMid_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getActiveMemberMidsByBuddyMid_result:new{}
  local status, res = pcall(self.handler.getActiveMemberMidsByBuddyMid, self.handler, args.buddyMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getActiveMemberMidsByBuddyMid', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_getAllBuddyMembers(seqid, iprot, oprot, server_ctx)
  local args = getAllBuddyMembers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getAllBuddyMembers_result:new{}
  local status, res = pcall(self.handler.getAllBuddyMembers, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getAllBuddyMembers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_getBlockedBuddyMembers(seqid, iprot, oprot, server_ctx)
  local args = getBlockedBuddyMembers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getBlockedBuddyMembers_result:new{}
  local status, res = pcall(self.handler.getBlockedBuddyMembers, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getBlockedBuddyMembers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_getBlockerCountByBuddyMid(seqid, iprot, oprot, server_ctx)
  local args = getBlockerCountByBuddyMid_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getBlockerCountByBuddyMid_result:new{}
  local status, res = pcall(self.handler.getBlockerCountByBuddyMid, self.handler, args.buddyMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getBlockerCountByBuddyMid', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_getBuddyDetailByMid(seqid, iprot, oprot, server_ctx)
  local args = getBuddyDetailByMid_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getBuddyDetailByMid_result:new{}
  local status, res = pcall(self.handler.getBuddyDetailByMid, self.handler, args.buddyMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getBuddyDetailByMid', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_getBuddyProfile(seqid, iprot, oprot, server_ctx)
  local args = getBuddyProfile_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getBuddyProfile_result:new{}
  local status, res = pcall(self.handler.getBuddyProfile, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getBuddyProfile', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_getContactTicket(seqid, iprot, oprot, server_ctx)
  local args = getContactTicket_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getContactTicket_result:new{}
  local status, res = pcall(self.handler.getContactTicket, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getContactTicket', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_getMemberCountByBuddyMid(seqid, iprot, oprot, server_ctx)
  local args = getMemberCountByBuddyMid_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getMemberCountByBuddyMid_result:new{}
  local status, res = pcall(self.handler.getMemberCountByBuddyMid, self.handler, args.buddyMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getMemberCountByBuddyMid', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_getSendBuddyMessageResult(seqid, iprot, oprot, server_ctx)
  local args = getSendBuddyMessageResult_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSendBuddyMessageResult_result:new{}
  local status, res = pcall(self.handler.getSendBuddyMessageResult, self.handler, args.sendBuddyMessageRequestId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSendBuddyMessageResult', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_getSetBuddyOnAirResult(seqid, iprot, oprot, server_ctx)
  local args = getSetBuddyOnAirResult_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSetBuddyOnAirResult_result:new{}
  local status, res = pcall(self.handler.getSetBuddyOnAirResult, self.handler, args.setBuddyOnAirRequestId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSetBuddyOnAirResult', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_getUpdateBuddyProfileResult(seqid, iprot, oprot, server_ctx)
  local args = getUpdateBuddyProfileResult_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getUpdateBuddyProfileResult_result:new{}
  local status, res = pcall(self.handler.getUpdateBuddyProfileResult, self.handler, args.updateBuddyProfileRequestId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getUpdateBuddyProfileResult', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_isBuddyOnAirByMid(seqid, iprot, oprot, server_ctx)
  local args = isBuddyOnAirByMid_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = isBuddyOnAirByMid_result:new{}
  local status, res = pcall(self.handler.isBuddyOnAirByMid, self.handler, args.buddyMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('isBuddyOnAirByMid', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_linkAndSendBuddyContentMessageToAllAsync(seqid, iprot, oprot, server_ctx)
  local args = linkAndSendBuddyContentMessageToAllAsync_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = linkAndSendBuddyContentMessageToAllAsync_result:new{}
  local status, res = pcall(self.handler.linkAndSendBuddyContentMessageToAllAsync, self.handler, args.requestId, args.msg, args.sourceContentId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('linkAndSendBuddyContentMessageToAllAsync', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_linkAndSendBuddyContentMessageToMids(seqid, iprot, oprot, server_ctx)
  local args = linkAndSendBuddyContentMessageToMids_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = linkAndSendBuddyContentMessageToMids_result:new{}
  local status, res = pcall(self.handler.linkAndSendBuddyContentMessageToMids, self.handler, args.requestId, args.msg, args.sourceContentId, args.mids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('linkAndSendBuddyContentMessageToMids', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_notifyBuddyBlocked(seqid, iprot, oprot, server_ctx)
  local args = notifyBuddyBlocked_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = notifyBuddyBlocked_result:new{}
  local status, res = pcall(self.handler.notifyBuddyBlocked, self.handler, args.buddyMid, args.blockerMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('notifyBuddyBlocked', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_notifyBuddyUnblocked(seqid, iprot, oprot, server_ctx)
  local args = notifyBuddyUnblocked_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = notifyBuddyUnblocked_result:new{}
  local status, res = pcall(self.handler.notifyBuddyUnblocked, self.handler, args.buddyMid, args.blockerMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('notifyBuddyUnblocked', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_registerBuddy(seqid, iprot, oprot, server_ctx)
  local args = registerBuddy_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = registerBuddy_result:new{}
  local status, res = pcall(self.handler.registerBuddy, self.handler, args.buddyId, args.searchId, args.displayName, args.statusMeessage, args.picture, args.settings)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('registerBuddy', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_registerBuddyAdmin(seqid, iprot, oprot, server_ctx)
  local args = registerBuddyAdmin_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = registerBuddyAdmin_result:new{}
  local status, res = pcall(self.handler.registerBuddyAdmin, self.handler, args.buddyId, args.searchId, args.displayName, args.statusMessage, args.picture)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('registerBuddyAdmin', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_reissueContactTicket(seqid, iprot, oprot, server_ctx)
  local args = reissueContactTicket_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = reissueContactTicket_result:new{}
  local status, res = pcall(self.handler.reissueContactTicket, self.handler, args.expirationTime, args.maxUseCount)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('reissueContactTicket', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_removeBuddyMember(seqid, iprot, oprot, server_ctx)
  local args = removeBuddyMember_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = removeBuddyMember_result:new{}
  local status, res = pcall(self.handler.removeBuddyMember, self.handler, args.requestId, args.userMid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('removeBuddyMember', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_removeBuddyMembers(seqid, iprot, oprot, server_ctx)
  local args = removeBuddyMembers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = removeBuddyMembers_result:new{}
  local status, res = pcall(self.handler.removeBuddyMembers, self.handler, args.requestId, args.userMids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('removeBuddyMembers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_sendBuddyContentMessageToAll(seqid, iprot, oprot, server_ctx)
  local args = sendBuddyContentMessageToAll_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendBuddyContentMessageToAll_result:new{}
  local status, res = pcall(self.handler.sendBuddyContentMessageToAll, self.handler, args.requestId, args.msg, args.content)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendBuddyContentMessageToAll', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_sendBuddyContentMessageToAllAsync(seqid, iprot, oprot, server_ctx)
  local args = sendBuddyContentMessageToAllAsync_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendBuddyContentMessageToAllAsync_result:new{}
  local status, res = pcall(self.handler.sendBuddyContentMessageToAllAsync, self.handler, args.requestId, args.msg, args.content)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendBuddyContentMessageToAllAsync', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_sendBuddyContentMessageToMids(seqid, iprot, oprot, server_ctx)
  local args = sendBuddyContentMessageToMids_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendBuddyContentMessageToMids_result:new{}
  local status, res = pcall(self.handler.sendBuddyContentMessageToMids, self.handler, args.requestId, args.msg, args.content, args.mids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendBuddyContentMessageToMids', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_sendBuddyContentMessageToMidsAsync(seqid, iprot, oprot, server_ctx)
  local args = sendBuddyContentMessageToMidsAsync_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendBuddyContentMessageToMidsAsync_result:new{}
  local status, res = pcall(self.handler.sendBuddyContentMessageToMidsAsync, self.handler, args.requestId, args.msg, args.content, args.mids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendBuddyContentMessageToMidsAsync', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_sendBuddyMessageToAll(seqid, iprot, oprot, server_ctx)
  local args = sendBuddyMessageToAll_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendBuddyMessageToAll_result:new{}
  local status, res = pcall(self.handler.sendBuddyMessageToAll, self.handler, args.requestId, args.msg)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendBuddyMessageToAll', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_sendBuddyMessageToAllAsync(seqid, iprot, oprot, server_ctx)
  local args = sendBuddyMessageToAllAsync_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendBuddyMessageToAllAsync_result:new{}
  local status, res = pcall(self.handler.sendBuddyMessageToAllAsync, self.handler, args.requestId, args.msg)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendBuddyMessageToAllAsync', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_sendBuddyMessageToMids(seqid, iprot, oprot, server_ctx)
  local args = sendBuddyMessageToMids_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendBuddyMessageToMids_result:new{}
  local status, res = pcall(self.handler.sendBuddyMessageToMids, self.handler, args.requestId, args.msg, args.mids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendBuddyMessageToMids', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_sendBuddyMessageToMidsAsync(seqid, iprot, oprot, server_ctx)
  local args = sendBuddyMessageToMidsAsync_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendBuddyMessageToMidsAsync_result:new{}
  local status, res = pcall(self.handler.sendBuddyMessageToMidsAsync, self.handler, args.requestId, args.msg, args.mids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendBuddyMessageToMidsAsync', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_sendIndividualEventToAllAsync(seqid, iprot, oprot, server_ctx)
  local args = sendIndividualEventToAllAsync_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendIndividualEventToAllAsync_result:new{}
  local status, res = pcall(self.handler.sendIndividualEventToAllAsync, self.handler, args.requestId, args.buddyMid, args.notificationStatus)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendIndividualEventToAllAsync', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_setBuddyOnAir(seqid, iprot, oprot, server_ctx)
  local args = setBuddyOnAir_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = setBuddyOnAir_result:new{}
  local status, res = pcall(self.handler.setBuddyOnAir, self.handler, args.requestId, args.onAir)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('setBuddyOnAir', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_setBuddyOnAirAsync(seqid, iprot, oprot, server_ctx)
  local args = setBuddyOnAirAsync_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = setBuddyOnAirAsync_result:new{}
  local status, res = pcall(self.handler.setBuddyOnAirAsync, self.handler, args.requestId, args.onAir)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('setBuddyOnAirAsync', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_storeMessage(seqid, iprot, oprot, server_ctx)
  local args = storeMessage_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = storeMessage_result:new{}
  local status, res = pcall(self.handler.storeMessage, self.handler, args.requestId, args.messageRequest)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('storeMessage', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_unblockBuddyMember(seqid, iprot, oprot, server_ctx)
  local args = unblockBuddyMember_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = unblockBuddyMember_result:new{}
  local status, res = pcall(self.handler.unblockBuddyMember, self.handler, args.requestId, args.mid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('unblockBuddyMember', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_unregisterBuddy(seqid, iprot, oprot, server_ctx)
  local args = unregisterBuddy_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = unregisterBuddy_result:new{}
  local status, res = pcall(self.handler.unregisterBuddy, self.handler, args.requestId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('unregisterBuddy', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_unregisterBuddyAdmin(seqid, iprot, oprot, server_ctx)
  local args = unregisterBuddyAdmin_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = unregisterBuddyAdmin_result:new{}
  local status, res = pcall(self.handler.unregisterBuddyAdmin, self.handler, args.requestId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('unregisterBuddyAdmin', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_updateBuddyAdminProfileAttribute(seqid, iprot, oprot, server_ctx)
  local args = updateBuddyAdminProfileAttribute_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateBuddyAdminProfileAttribute_result:new{}
  local status, res = pcall(self.handler.updateBuddyAdminProfileAttribute, self.handler, args.requestId, args.attributes)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateBuddyAdminProfileAttribute', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_updateBuddyAdminProfileImage(seqid, iprot, oprot, server_ctx)
  local args = updateBuddyAdminProfileImage_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateBuddyAdminProfileImage_result:new{}
  local status, res = pcall(self.handler.updateBuddyAdminProfileImage, self.handler, args.requestId, args.picture)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateBuddyAdminProfileImage', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_updateBuddyProfileAttributes(seqid, iprot, oprot, server_ctx)
  local args = updateBuddyProfileAttributes_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateBuddyProfileAttributes_result:new{}
  local status, res = pcall(self.handler.updateBuddyProfileAttributes, self.handler, args.requestId, args.attributes)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateBuddyProfileAttributes', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_updateBuddyProfileAttributesAsync(seqid, iprot, oprot, server_ctx)
  local args = updateBuddyProfileAttributesAsync_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateBuddyProfileAttributesAsync_result:new{}
  local status, res = pcall(self.handler.updateBuddyProfileAttributesAsync, self.handler, args.requestId, args.attributes)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateBuddyProfileAttributesAsync', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_updateBuddyProfileImage(seqid, iprot, oprot, server_ctx)
  local args = updateBuddyProfileImage_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateBuddyProfileImage_result:new{}
  local status, res = pcall(self.handler.updateBuddyProfileImage, self.handler, args.requestId, args.image)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateBuddyProfileImage', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_updateBuddyProfileImageAsync(seqid, iprot, oprot, server_ctx)
  local args = updateBuddyProfileImageAsync_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateBuddyProfileImageAsync_result:new{}
  local status, res = pcall(self.handler.updateBuddyProfileImageAsync, self.handler, args.requestId, args.image)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateBuddyProfileImageAsync', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_updateBuddySearchId(seqid, iprot, oprot, server_ctx)
  local args = updateBuddySearchId_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateBuddySearchId_result:new{}
  local status, res = pcall(self.handler.updateBuddySearchId, self.handler, args.requestId, args.searchId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateBuddySearchId', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_updateBuddySettings(seqid, iprot, oprot, server_ctx)
  local args = updateBuddySettings_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateBuddySettings_result:new{}
  local status, res = pcall(self.handler.updateBuddySettings, self.handler, args.settings)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateBuddySettings', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BuddyManagementServiceProcessor:process_uploadBuddyContent(seqid, iprot, oprot, server_ctx)
  local args = uploadBuddyContent_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = uploadBuddyContent_result:new{}
  local status, res = pcall(self.handler.uploadBuddyContent, self.handler, args.contentType, args.content)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('uploadBuddyContent', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

addBuddyMember_args = __TObject:new{
  requestId,
  userMid
}

function addBuddyMember_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.userMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function addBuddyMember_args:write(oprot)
  oprot:writeStructBegin('addBuddyMember_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.userMid ~= nil then
    oprot:writeFieldBegin('userMid', TType.STRING, 2)
    oprot:writeString(self.userMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

addBuddyMember_result = __TObject:new{
  e
}

function addBuddyMember_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function addBuddyMember_result:write(oprot)
  oprot:writeStructBegin('addBuddyMember_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

addBuddyMembers_args = __TObject:new{
  requestId,
  userMids
}

function addBuddyMembers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.userMids = {}
        local _etype979, _size976 = iprot:readListBegin()
        for _i=1,_size976 do
          local _elem980 = iprot:readString()
          table.insert(self.userMids, _elem980)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function addBuddyMembers_args:write(oprot)
  oprot:writeStructBegin('addBuddyMembers_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.userMids ~= nil then
    oprot:writeFieldBegin('userMids', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.userMids)
    for _,iter981 in ipairs(self.userMids) do
      oprot:writeString(iter981)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

addBuddyMembers_result = __TObject:new{
  e
}

function addBuddyMembers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function addBuddyMembers_result:write(oprot)
  oprot:writeStructBegin('addBuddyMembers_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

blockBuddyMember_args = __TObject:new{
  requestId,
  mid
}

function blockBuddyMember_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function blockBuddyMember_args:write(oprot)
  oprot:writeStructBegin('blockBuddyMember_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 2)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

blockBuddyMember_result = __TObject:new{
  e
}

function blockBuddyMember_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function blockBuddyMember_result:write(oprot)
  oprot:writeStructBegin('blockBuddyMember_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

commitSendMessagesToAll_args = __TObject:new{
  requestIdList
}

function commitSendMessagesToAll_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.requestIdList = {}
        local _etype985, _size982 = iprot:readListBegin()
        for _i=1,_size982 do
          local _elem986 = iprot:readString()
          table.insert(self.requestIdList, _elem986)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function commitSendMessagesToAll_args:write(oprot)
  oprot:writeStructBegin('commitSendMessagesToAll_args')
  if self.requestIdList ~= nil then
    oprot:writeFieldBegin('requestIdList', TType.LIST, 1)
    oprot:writeListBegin(TType.STRING, #self.requestIdList)
    for _,iter987 in ipairs(self.requestIdList) do
      oprot:writeString(iter987)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

commitSendMessagesToAll_result = __TObject:new{
  success,
  e
}

function commitSendMessagesToAll_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype991, _size988 = iprot:readListBegin()
        for _i=1,_size988 do
          local _elem992 = SendBuddyMessageResult:new{}
          _elem992:read(iprot)
          table.insert(self.success, _elem992)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function commitSendMessagesToAll_result:write(oprot)
  oprot:writeStructBegin('commitSendMessagesToAll_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter993 in ipairs(self.success) do
      iter993:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

commitSendMessagesToMids_args = __TObject:new{
  requestIdList,
  mids
}

function commitSendMessagesToMids_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.requestIdList = {}
        local _etype997, _size994 = iprot:readListBegin()
        for _i=1,_size994 do
          local _elem998 = iprot:readString()
          table.insert(self.requestIdList, _elem998)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.mids = {}
        local _etype1002, _size999 = iprot:readListBegin()
        for _i=1,_size999 do
          local _elem1003 = iprot:readString()
          table.insert(self.mids, _elem1003)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function commitSendMessagesToMids_args:write(oprot)
  oprot:writeStructBegin('commitSendMessagesToMids_args')
  if self.requestIdList ~= nil then
    oprot:writeFieldBegin('requestIdList', TType.LIST, 1)
    oprot:writeListBegin(TType.STRING, #self.requestIdList)
    for _,iter1004 in ipairs(self.requestIdList) do
      oprot:writeString(iter1004)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.mids ~= nil then
    oprot:writeFieldBegin('mids', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.mids)
    for _,iter1005 in ipairs(self.mids) do
      oprot:writeString(iter1005)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

commitSendMessagesToMids_result = __TObject:new{
  success,
  e
}

function commitSendMessagesToMids_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1009, _size1006 = iprot:readListBegin()
        for _i=1,_size1006 do
          local _elem1010 = SendBuddyMessageResult:new{}
          _elem1010:read(iprot)
          table.insert(self.success, _elem1010)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function commitSendMessagesToMids_result:write(oprot)
  oprot:writeStructBegin('commitSendMessagesToMids_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter1011 in ipairs(self.success) do
      iter1011:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

containsBuddyMember_args = __TObject:new{
  requestId,
  userMid
}

function containsBuddyMember_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.userMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function containsBuddyMember_args:write(oprot)
  oprot:writeStructBegin('containsBuddyMember_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.userMid ~= nil then
    oprot:writeFieldBegin('userMid', TType.STRING, 2)
    oprot:writeString(self.userMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

containsBuddyMember_result = __TObject:new{
  success,
  e
}

function containsBuddyMember_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function containsBuddyMember_result:write(oprot)
  oprot:writeStructBegin('containsBuddyMember_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

downloadMessageContent_args = __TObject:new{
  requestId,
  messageId
}

function downloadMessageContent_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.messageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function downloadMessageContent_args:write(oprot)
  oprot:writeStructBegin('downloadMessageContent_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.messageId ~= nil then
    oprot:writeFieldBegin('messageId', TType.STRING, 2)
    oprot:writeString(self.messageId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

downloadMessageContent_result = __TObject:new{
  success,
  e
}

function downloadMessageContent_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function downloadMessageContent_result:write(oprot)
  oprot:writeStructBegin('downloadMessageContent_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

downloadMessageContentPreview_args = __TObject:new{
  requestId,
  messageId
}

function downloadMessageContentPreview_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.messageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function downloadMessageContentPreview_args:write(oprot)
  oprot:writeStructBegin('downloadMessageContentPreview_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.messageId ~= nil then
    oprot:writeFieldBegin('messageId', TType.STRING, 2)
    oprot:writeString(self.messageId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

downloadMessageContentPreview_result = __TObject:new{
  success,
  e
}

function downloadMessageContentPreview_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function downloadMessageContentPreview_result:write(oprot)
  oprot:writeStructBegin('downloadMessageContentPreview_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

downloadProfileImage_args = __TObject:new{
  requestId
}

function downloadProfileImage_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function downloadProfileImage_args:write(oprot)
  oprot:writeStructBegin('downloadProfileImage_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

downloadProfileImage_result = __TObject:new{
  success,
  e
}

function downloadProfileImage_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function downloadProfileImage_result:write(oprot)
  oprot:writeStructBegin('downloadProfileImage_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

downloadProfileImagePreview_args = __TObject:new{
  requestId
}

function downloadProfileImagePreview_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function downloadProfileImagePreview_args:write(oprot)
  oprot:writeStructBegin('downloadProfileImagePreview_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

downloadProfileImagePreview_result = __TObject:new{
  success,
  e
}

function downloadProfileImagePreview_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function downloadProfileImagePreview_result:write(oprot)
  oprot:writeStructBegin('downloadProfileImagePreview_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getActiveMemberCountByBuddyMid_args = __TObject:new{
  buddyMid
}

function getActiveMemberCountByBuddyMid_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.buddyMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getActiveMemberCountByBuddyMid_args:write(oprot)
  oprot:writeStructBegin('getActiveMemberCountByBuddyMid_args')
  if self.buddyMid ~= nil then
    oprot:writeFieldBegin('buddyMid', TType.STRING, 2)
    oprot:writeString(self.buddyMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getActiveMemberCountByBuddyMid_result = __TObject:new{
  success,
  e
}

function getActiveMemberCountByBuddyMid_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I64 then
        self.success = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getActiveMemberCountByBuddyMid_result:write(oprot)
  oprot:writeStructBegin('getActiveMemberCountByBuddyMid_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.I64, 0)
    oprot:writeI64(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getActiveMemberMidsByBuddyMid_args = __TObject:new{
  buddyMid
}

function getActiveMemberMidsByBuddyMid_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.buddyMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getActiveMemberMidsByBuddyMid_args:write(oprot)
  oprot:writeStructBegin('getActiveMemberMidsByBuddyMid_args')
  if self.buddyMid ~= nil then
    oprot:writeFieldBegin('buddyMid', TType.STRING, 2)
    oprot:writeString(self.buddyMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getActiveMemberMidsByBuddyMid_result = __TObject:new{
  success,
  e
}

function getActiveMemberMidsByBuddyMid_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1015, _size1012 = iprot:readListBegin()
        for _i=1,_size1012 do
          local _elem1016 = iprot:readString()
          table.insert(self.success, _elem1016)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getActiveMemberMidsByBuddyMid_result:write(oprot)
  oprot:writeStructBegin('getActiveMemberMidsByBuddyMid_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter1017 in ipairs(self.success) do
      oprot:writeString(iter1017)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getAllBuddyMembers_args = __TObject:new{

}

function getAllBuddyMembers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getAllBuddyMembers_args:write(oprot)
  oprot:writeStructBegin('getAllBuddyMembers_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getAllBuddyMembers_result = __TObject:new{
  success,
  e
}

function getAllBuddyMembers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1021, _size1018 = iprot:readListBegin()
        for _i=1,_size1018 do
          local _elem1022 = iprot:readString()
          table.insert(self.success, _elem1022)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getAllBuddyMembers_result:write(oprot)
  oprot:writeStructBegin('getAllBuddyMembers_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter1023 in ipairs(self.success) do
      oprot:writeString(iter1023)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBlockedBuddyMembers_args = __TObject:new{

}

function getBlockedBuddyMembers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBlockedBuddyMembers_args:write(oprot)
  oprot:writeStructBegin('getBlockedBuddyMembers_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBlockedBuddyMembers_result = __TObject:new{
  success,
  e
}

function getBlockedBuddyMembers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1027, _size1024 = iprot:readListBegin()
        for _i=1,_size1024 do
          local _elem1028 = iprot:readString()
          table.insert(self.success, _elem1028)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBlockedBuddyMembers_result:write(oprot)
  oprot:writeStructBegin('getBlockedBuddyMembers_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter1029 in ipairs(self.success) do
      oprot:writeString(iter1029)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBlockerCountByBuddyMid_args = __TObject:new{
  buddyMid
}

function getBlockerCountByBuddyMid_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.buddyMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBlockerCountByBuddyMid_args:write(oprot)
  oprot:writeStructBegin('getBlockerCountByBuddyMid_args')
  if self.buddyMid ~= nil then
    oprot:writeFieldBegin('buddyMid', TType.STRING, 2)
    oprot:writeString(self.buddyMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBlockerCountByBuddyMid_result = __TObject:new{
  success,
  e
}

function getBlockerCountByBuddyMid_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I64 then
        self.success = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBlockerCountByBuddyMid_result:write(oprot)
  oprot:writeStructBegin('getBlockerCountByBuddyMid_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.I64, 0)
    oprot:writeI64(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBuddyDetailByMid_args = __TObject:new{
  buddyMid
}

function getBuddyDetailByMid_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.buddyMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBuddyDetailByMid_args:write(oprot)
  oprot:writeStructBegin('getBuddyDetailByMid_args')
  if self.buddyMid ~= nil then
    oprot:writeFieldBegin('buddyMid', TType.STRING, 2)
    oprot:writeString(self.buddyMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBuddyDetailByMid_result = __TObject:new{
  success,
  e
}

function getBuddyDetailByMid_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = BuddyDetail:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBuddyDetailByMid_result:write(oprot)
  oprot:writeStructBegin('getBuddyDetailByMid_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBuddyProfile_args = __TObject:new{

}

function getBuddyProfile_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBuddyProfile_args:write(oprot)
  oprot:writeStructBegin('getBuddyProfile_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBuddyProfile_result = __TObject:new{
  success,
  e
}

function getBuddyProfile_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = BuddyProfile:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBuddyProfile_result:write(oprot)
  oprot:writeStructBegin('getBuddyProfile_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getContactTicket_args = __TObject:new{

}

function getContactTicket_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getContactTicket_args:write(oprot)
  oprot:writeStructBegin('getContactTicket_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getContactTicket_result = __TObject:new{
  success,
  e
}

function getContactTicket_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Ticket:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getContactTicket_result:write(oprot)
  oprot:writeStructBegin('getContactTicket_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getMemberCountByBuddyMid_args = __TObject:new{
  buddyMid
}

function getMemberCountByBuddyMid_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.buddyMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getMemberCountByBuddyMid_args:write(oprot)
  oprot:writeStructBegin('getMemberCountByBuddyMid_args')
  if self.buddyMid ~= nil then
    oprot:writeFieldBegin('buddyMid', TType.STRING, 2)
    oprot:writeString(self.buddyMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getMemberCountByBuddyMid_result = __TObject:new{
  success,
  e
}

function getMemberCountByBuddyMid_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I64 then
        self.success = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getMemberCountByBuddyMid_result:write(oprot)
  oprot:writeStructBegin('getMemberCountByBuddyMid_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.I64, 0)
    oprot:writeI64(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSendBuddyMessageResult_args = __TObject:new{
  sendBuddyMessageRequestId
}

function getSendBuddyMessageResult_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.sendBuddyMessageRequestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSendBuddyMessageResult_args:write(oprot)
  oprot:writeStructBegin('getSendBuddyMessageResult_args')
  if self.sendBuddyMessageRequestId ~= nil then
    oprot:writeFieldBegin('sendBuddyMessageRequestId', TType.STRING, 1)
    oprot:writeString(self.sendBuddyMessageRequestId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSendBuddyMessageResult_result = __TObject:new{
  success,
  e
}

function getSendBuddyMessageResult_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SendBuddyMessageResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSendBuddyMessageResult_result:write(oprot)
  oprot:writeStructBegin('getSendBuddyMessageResult_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSetBuddyOnAirResult_args = __TObject:new{
  setBuddyOnAirRequestId
}

function getSetBuddyOnAirResult_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.setBuddyOnAirRequestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSetBuddyOnAirResult_args:write(oprot)
  oprot:writeStructBegin('getSetBuddyOnAirResult_args')
  if self.setBuddyOnAirRequestId ~= nil then
    oprot:writeFieldBegin('setBuddyOnAirRequestId', TType.STRING, 1)
    oprot:writeString(self.setBuddyOnAirRequestId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSetBuddyOnAirResult_result = __TObject:new{
  success,
  e
}

function getSetBuddyOnAirResult_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SetBuddyOnAirResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSetBuddyOnAirResult_result:write(oprot)
  oprot:writeStructBegin('getSetBuddyOnAirResult_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUpdateBuddyProfileResult_args = __TObject:new{
  updateBuddyProfileRequestId
}

function getUpdateBuddyProfileResult_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.updateBuddyProfileRequestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUpdateBuddyProfileResult_args:write(oprot)
  oprot:writeStructBegin('getUpdateBuddyProfileResult_args')
  if self.updateBuddyProfileRequestId ~= nil then
    oprot:writeFieldBegin('updateBuddyProfileRequestId', TType.STRING, 1)
    oprot:writeString(self.updateBuddyProfileRequestId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUpdateBuddyProfileResult_result = __TObject:new{
  success,
  e
}

function getUpdateBuddyProfileResult_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = UpdateBuddyProfileResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUpdateBuddyProfileResult_result:write(oprot)
  oprot:writeStructBegin('getUpdateBuddyProfileResult_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

isBuddyOnAirByMid_args = __TObject:new{
  buddyMid
}

function isBuddyOnAirByMid_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.buddyMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function isBuddyOnAirByMid_args:write(oprot)
  oprot:writeStructBegin('isBuddyOnAirByMid_args')
  if self.buddyMid ~= nil then
    oprot:writeFieldBegin('buddyMid', TType.STRING, 2)
    oprot:writeString(self.buddyMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

isBuddyOnAirByMid_result = __TObject:new{
  success,
  e
}

function isBuddyOnAirByMid_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function isBuddyOnAirByMid_result:write(oprot)
  oprot:writeStructBegin('isBuddyOnAirByMid_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

linkAndSendBuddyContentMessageToAllAsync_args = __TObject:new{
  requestId,
  msg,
  sourceContentId
}

function linkAndSendBuddyContentMessageToAllAsync_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.msg = Message:new{}
        self.msg:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.sourceContentId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function linkAndSendBuddyContentMessageToAllAsync_args:write(oprot)
  oprot:writeStructBegin('linkAndSendBuddyContentMessageToAllAsync_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.msg ~= nil then
    oprot:writeFieldBegin('msg', TType.STRUCT, 2)
    self.msg:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.sourceContentId ~= nil then
    oprot:writeFieldBegin('sourceContentId', TType.STRING, 3)
    oprot:writeString(self.sourceContentId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

linkAndSendBuddyContentMessageToAllAsync_result = __TObject:new{
  success,
  e
}

function linkAndSendBuddyContentMessageToAllAsync_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function linkAndSendBuddyContentMessageToAllAsync_result:write(oprot)
  oprot:writeStructBegin('linkAndSendBuddyContentMessageToAllAsync_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

linkAndSendBuddyContentMessageToMids_args = __TObject:new{
  requestId,
  msg,
  sourceContentId,
  mids
}

function linkAndSendBuddyContentMessageToMids_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.msg = Message:new{}
        self.msg:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.sourceContentId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.mids = {}
        local _etype1033, _size1030 = iprot:readListBegin()
        for _i=1,_size1030 do
          local _elem1034 = iprot:readString()
          table.insert(self.mids, _elem1034)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function linkAndSendBuddyContentMessageToMids_args:write(oprot)
  oprot:writeStructBegin('linkAndSendBuddyContentMessageToMids_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.msg ~= nil then
    oprot:writeFieldBegin('msg', TType.STRUCT, 2)
    self.msg:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.sourceContentId ~= nil then
    oprot:writeFieldBegin('sourceContentId', TType.STRING, 3)
    oprot:writeString(self.sourceContentId)
    oprot:writeFieldEnd()
  end
  if self.mids ~= nil then
    oprot:writeFieldBegin('mids', TType.LIST, 4)
    oprot:writeListBegin(TType.STRING, #self.mids)
    for _,iter1035 in ipairs(self.mids) do
      oprot:writeString(iter1035)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

linkAndSendBuddyContentMessageToMids_result = __TObject:new{
  success,
  e
}

function linkAndSendBuddyContentMessageToMids_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SendBuddyMessageResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function linkAndSendBuddyContentMessageToMids_result:write(oprot)
  oprot:writeStructBegin('linkAndSendBuddyContentMessageToMids_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

notifyBuddyBlocked_args = __TObject:new{
  buddyMid,
  blockerMid
}

function notifyBuddyBlocked_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.buddyMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.blockerMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function notifyBuddyBlocked_args:write(oprot)
  oprot:writeStructBegin('notifyBuddyBlocked_args')
  if self.buddyMid ~= nil then
    oprot:writeFieldBegin('buddyMid', TType.STRING, 1)
    oprot:writeString(self.buddyMid)
    oprot:writeFieldEnd()
  end
  if self.blockerMid ~= nil then
    oprot:writeFieldBegin('blockerMid', TType.STRING, 2)
    oprot:writeString(self.blockerMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

notifyBuddyBlocked_result = __TObject:new{
  e
}

function notifyBuddyBlocked_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function notifyBuddyBlocked_result:write(oprot)
  oprot:writeStructBegin('notifyBuddyBlocked_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

notifyBuddyUnblocked_args = __TObject:new{
  buddyMid,
  blockerMid
}

function notifyBuddyUnblocked_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.buddyMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.blockerMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function notifyBuddyUnblocked_args:write(oprot)
  oprot:writeStructBegin('notifyBuddyUnblocked_args')
  if self.buddyMid ~= nil then
    oprot:writeFieldBegin('buddyMid', TType.STRING, 1)
    oprot:writeString(self.buddyMid)
    oprot:writeFieldEnd()
  end
  if self.blockerMid ~= nil then
    oprot:writeFieldBegin('blockerMid', TType.STRING, 2)
    oprot:writeString(self.blockerMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

notifyBuddyUnblocked_result = __TObject:new{
  e
}

function notifyBuddyUnblocked_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function notifyBuddyUnblocked_result:write(oprot)
  oprot:writeStructBegin('notifyBuddyUnblocked_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

registerBuddy_args = __TObject:new{
  buddyId,
  searchId,
  displayName,
  statusMeessage,
  picture,
  settings
}

function registerBuddy_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.buddyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.searchId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.displayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.statusMeessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.picture = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.MAP then
        self.settings = {}
        local _ktype1037, _vtype1038, _size1036 = iprot:readMapBegin() 
        for _i=1,_size1036 do
          local _key1040 = iprot:readString()
          local _val1041 = iprot:readString()
          self.settings[_key1040] = _val1041
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function registerBuddy_args:write(oprot)
  oprot:writeStructBegin('registerBuddy_args')
  if self.buddyId ~= nil then
    oprot:writeFieldBegin('buddyId', TType.STRING, 2)
    oprot:writeString(self.buddyId)
    oprot:writeFieldEnd()
  end
  if self.searchId ~= nil then
    oprot:writeFieldBegin('searchId', TType.STRING, 3)
    oprot:writeString(self.searchId)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRING, 4)
    oprot:writeString(self.displayName)
    oprot:writeFieldEnd()
  end
  if self.statusMeessage ~= nil then
    oprot:writeFieldBegin('statusMeessage', TType.STRING, 5)
    oprot:writeString(self.statusMeessage)
    oprot:writeFieldEnd()
  end
  if self.picture ~= nil then
    oprot:writeFieldBegin('picture', TType.STRING, 6)
    oprot:writeString(self.picture)
    oprot:writeFieldEnd()
  end
  if self.settings ~= nil then
    oprot:writeFieldBegin('settings', TType.MAP, 7)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.settings))
    for kiter1042,viter1043 in pairs(self.settings) do
      oprot:writeString(kiter1042)
      oprot:writeString(viter1043)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

registerBuddy_result = __TObject:new{
  success,
  e
}

function registerBuddy_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function registerBuddy_result:write(oprot)
  oprot:writeStructBegin('registerBuddy_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

registerBuddyAdmin_args = __TObject:new{
  buddyId,
  searchId,
  displayName,
  statusMessage,
  picture
}

function registerBuddyAdmin_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.buddyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.searchId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.displayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.statusMessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.picture = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function registerBuddyAdmin_args:write(oprot)
  oprot:writeStructBegin('registerBuddyAdmin_args')
  if self.buddyId ~= nil then
    oprot:writeFieldBegin('buddyId', TType.STRING, 2)
    oprot:writeString(self.buddyId)
    oprot:writeFieldEnd()
  end
  if self.searchId ~= nil then
    oprot:writeFieldBegin('searchId', TType.STRING, 3)
    oprot:writeString(self.searchId)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRING, 4)
    oprot:writeString(self.displayName)
    oprot:writeFieldEnd()
  end
  if self.statusMessage ~= nil then
    oprot:writeFieldBegin('statusMessage', TType.STRING, 5)
    oprot:writeString(self.statusMessage)
    oprot:writeFieldEnd()
  end
  if self.picture ~= nil then
    oprot:writeFieldBegin('picture', TType.STRING, 6)
    oprot:writeString(self.picture)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

registerBuddyAdmin_result = __TObject:new{
  success,
  e
}

function registerBuddyAdmin_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function registerBuddyAdmin_result:write(oprot)
  oprot:writeStructBegin('registerBuddyAdmin_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

reissueContactTicket_args = __TObject:new{
  expirationTime,
  maxUseCount
}

function reissueContactTicket_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.expirationTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.maxUseCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function reissueContactTicket_args:write(oprot)
  oprot:writeStructBegin('reissueContactTicket_args')
  if self.expirationTime ~= nil then
    oprot:writeFieldBegin('expirationTime', TType.I64, 3)
    oprot:writeI64(self.expirationTime)
    oprot:writeFieldEnd()
  end
  if self.maxUseCount ~= nil then
    oprot:writeFieldBegin('maxUseCount', TType.I32, 4)
    oprot:writeI32(self.maxUseCount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

reissueContactTicket_result = __TObject:new{
  success,
  e
}

function reissueContactTicket_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function reissueContactTicket_result:write(oprot)
  oprot:writeStructBegin('reissueContactTicket_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

removeBuddyMember_args = __TObject:new{
  requestId,
  userMid
}

function removeBuddyMember_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.userMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function removeBuddyMember_args:write(oprot)
  oprot:writeStructBegin('removeBuddyMember_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.userMid ~= nil then
    oprot:writeFieldBegin('userMid', TType.STRING, 2)
    oprot:writeString(self.userMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

removeBuddyMember_result = __TObject:new{
  e
}

function removeBuddyMember_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function removeBuddyMember_result:write(oprot)
  oprot:writeStructBegin('removeBuddyMember_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

removeBuddyMembers_args = __TObject:new{
  requestId,
  userMids
}

function removeBuddyMembers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.userMids = {}
        local _etype1047, _size1044 = iprot:readListBegin()
        for _i=1,_size1044 do
          local _elem1048 = iprot:readString()
          table.insert(self.userMids, _elem1048)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function removeBuddyMembers_args:write(oprot)
  oprot:writeStructBegin('removeBuddyMembers_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.userMids ~= nil then
    oprot:writeFieldBegin('userMids', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.userMids)
    for _,iter1049 in ipairs(self.userMids) do
      oprot:writeString(iter1049)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

removeBuddyMembers_result = __TObject:new{
  e
}

function removeBuddyMembers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function removeBuddyMembers_result:write(oprot)
  oprot:writeStructBegin('removeBuddyMembers_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendBuddyContentMessageToAll_args = __TObject:new{
  requestId,
  msg,
  content
}

function sendBuddyContentMessageToAll_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.msg = Message:new{}
        self.msg:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.content = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendBuddyContentMessageToAll_args:write(oprot)
  oprot:writeStructBegin('sendBuddyContentMessageToAll_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.msg ~= nil then
    oprot:writeFieldBegin('msg', TType.STRUCT, 2)
    self.msg:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.content ~= nil then
    oprot:writeFieldBegin('content', TType.STRING, 3)
    oprot:writeString(self.content)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendBuddyContentMessageToAll_result = __TObject:new{
  success,
  e
}

function sendBuddyContentMessageToAll_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SendBuddyMessageResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendBuddyContentMessageToAll_result:write(oprot)
  oprot:writeStructBegin('sendBuddyContentMessageToAll_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendBuddyContentMessageToAllAsync_args = __TObject:new{
  requestId,
  msg,
  content
}

function sendBuddyContentMessageToAllAsync_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.msg = Message:new{}
        self.msg:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.content = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendBuddyContentMessageToAllAsync_args:write(oprot)
  oprot:writeStructBegin('sendBuddyContentMessageToAllAsync_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.msg ~= nil then
    oprot:writeFieldBegin('msg', TType.STRUCT, 2)
    self.msg:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.content ~= nil then
    oprot:writeFieldBegin('content', TType.STRING, 3)
    oprot:writeString(self.content)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendBuddyContentMessageToAllAsync_result = __TObject:new{
  success,
  e
}

function sendBuddyContentMessageToAllAsync_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendBuddyContentMessageToAllAsync_result:write(oprot)
  oprot:writeStructBegin('sendBuddyContentMessageToAllAsync_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendBuddyContentMessageToMids_args = __TObject:new{
  requestId,
  msg,
  content,
  mids
}

function sendBuddyContentMessageToMids_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.msg = Message:new{}
        self.msg:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.content = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.mids = {}
        local _etype1053, _size1050 = iprot:readListBegin()
        for _i=1,_size1050 do
          local _elem1054 = iprot:readString()
          table.insert(self.mids, _elem1054)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendBuddyContentMessageToMids_args:write(oprot)
  oprot:writeStructBegin('sendBuddyContentMessageToMids_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.msg ~= nil then
    oprot:writeFieldBegin('msg', TType.STRUCT, 2)
    self.msg:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.content ~= nil then
    oprot:writeFieldBegin('content', TType.STRING, 3)
    oprot:writeString(self.content)
    oprot:writeFieldEnd()
  end
  if self.mids ~= nil then
    oprot:writeFieldBegin('mids', TType.LIST, 4)
    oprot:writeListBegin(TType.STRING, #self.mids)
    for _,iter1055 in ipairs(self.mids) do
      oprot:writeString(iter1055)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendBuddyContentMessageToMids_result = __TObject:new{
  success,
  e
}

function sendBuddyContentMessageToMids_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SendBuddyMessageResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendBuddyContentMessageToMids_result:write(oprot)
  oprot:writeStructBegin('sendBuddyContentMessageToMids_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendBuddyContentMessageToMidsAsync_args = __TObject:new{
  requestId,
  msg,
  content,
  mids
}

function sendBuddyContentMessageToMidsAsync_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.msg = Message:new{}
        self.msg:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.content = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.mids = {}
        local _etype1059, _size1056 = iprot:readListBegin()
        for _i=1,_size1056 do
          local _elem1060 = iprot:readString()
          table.insert(self.mids, _elem1060)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendBuddyContentMessageToMidsAsync_args:write(oprot)
  oprot:writeStructBegin('sendBuddyContentMessageToMidsAsync_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.msg ~= nil then
    oprot:writeFieldBegin('msg', TType.STRUCT, 2)
    self.msg:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.content ~= nil then
    oprot:writeFieldBegin('content', TType.STRING, 3)
    oprot:writeString(self.content)
    oprot:writeFieldEnd()
  end
  if self.mids ~= nil then
    oprot:writeFieldBegin('mids', TType.LIST, 4)
    oprot:writeListBegin(TType.STRING, #self.mids)
    for _,iter1061 in ipairs(self.mids) do
      oprot:writeString(iter1061)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendBuddyContentMessageToMidsAsync_result = __TObject:new{
  success,
  e
}

function sendBuddyContentMessageToMidsAsync_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendBuddyContentMessageToMidsAsync_result:write(oprot)
  oprot:writeStructBegin('sendBuddyContentMessageToMidsAsync_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendBuddyMessageToAll_args = __TObject:new{
  requestId,
  msg
}

function sendBuddyMessageToAll_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.msg = Message:new{}
        self.msg:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendBuddyMessageToAll_args:write(oprot)
  oprot:writeStructBegin('sendBuddyMessageToAll_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.msg ~= nil then
    oprot:writeFieldBegin('msg', TType.STRUCT, 2)
    self.msg:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendBuddyMessageToAll_result = __TObject:new{
  success,
  e
}

function sendBuddyMessageToAll_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SendBuddyMessageResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendBuddyMessageToAll_result:write(oprot)
  oprot:writeStructBegin('sendBuddyMessageToAll_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendBuddyMessageToAllAsync_args = __TObject:new{
  requestId,
  msg
}

function sendBuddyMessageToAllAsync_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.msg = Message:new{}
        self.msg:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendBuddyMessageToAllAsync_args:write(oprot)
  oprot:writeStructBegin('sendBuddyMessageToAllAsync_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.msg ~= nil then
    oprot:writeFieldBegin('msg', TType.STRUCT, 2)
    self.msg:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendBuddyMessageToAllAsync_result = __TObject:new{
  success,
  e
}

function sendBuddyMessageToAllAsync_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendBuddyMessageToAllAsync_result:write(oprot)
  oprot:writeStructBegin('sendBuddyMessageToAllAsync_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendBuddyMessageToMids_args = __TObject:new{
  requestId,
  msg,
  mids
}

function sendBuddyMessageToMids_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.msg = Message:new{}
        self.msg:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.mids = {}
        local _etype1065, _size1062 = iprot:readListBegin()
        for _i=1,_size1062 do
          local _elem1066 = iprot:readString()
          table.insert(self.mids, _elem1066)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendBuddyMessageToMids_args:write(oprot)
  oprot:writeStructBegin('sendBuddyMessageToMids_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.msg ~= nil then
    oprot:writeFieldBegin('msg', TType.STRUCT, 2)
    self.msg:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.mids ~= nil then
    oprot:writeFieldBegin('mids', TType.LIST, 3)
    oprot:writeListBegin(TType.STRING, #self.mids)
    for _,iter1067 in ipairs(self.mids) do
      oprot:writeString(iter1067)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendBuddyMessageToMids_result = __TObject:new{
  success,
  e
}

function sendBuddyMessageToMids_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SendBuddyMessageResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendBuddyMessageToMids_result:write(oprot)
  oprot:writeStructBegin('sendBuddyMessageToMids_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendBuddyMessageToMidsAsync_args = __TObject:new{
  requestId,
  msg,
  mids
}

function sendBuddyMessageToMidsAsync_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.msg = Message:new{}
        self.msg:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.mids = {}
        local _etype1071, _size1068 = iprot:readListBegin()
        for _i=1,_size1068 do
          local _elem1072 = iprot:readString()
          table.insert(self.mids, _elem1072)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendBuddyMessageToMidsAsync_args:write(oprot)
  oprot:writeStructBegin('sendBuddyMessageToMidsAsync_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.msg ~= nil then
    oprot:writeFieldBegin('msg', TType.STRUCT, 2)
    self.msg:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.mids ~= nil then
    oprot:writeFieldBegin('mids', TType.LIST, 3)
    oprot:writeListBegin(TType.STRING, #self.mids)
    for _,iter1073 in ipairs(self.mids) do
      oprot:writeString(iter1073)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendBuddyMessageToMidsAsync_result = __TObject:new{
  success,
  e
}

function sendBuddyMessageToMidsAsync_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendBuddyMessageToMidsAsync_result:write(oprot)
  oprot:writeStructBegin('sendBuddyMessageToMidsAsync_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendIndividualEventToAllAsync_args = __TObject:new{
  requestId,
  buddyMid,
  notificationStatus
}

function sendIndividualEventToAllAsync_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.buddyMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.notificationStatus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendIndividualEventToAllAsync_args:write(oprot)
  oprot:writeStructBegin('sendIndividualEventToAllAsync_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.buddyMid ~= nil then
    oprot:writeFieldBegin('buddyMid', TType.STRING, 2)
    oprot:writeString(self.buddyMid)
    oprot:writeFieldEnd()
  end
  if self.notificationStatus ~= nil then
    oprot:writeFieldBegin('notificationStatus', TType.I32, 3)
    oprot:writeI32(self.notificationStatus)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendIndividualEventToAllAsync_result = __TObject:new{
  e
}

function sendIndividualEventToAllAsync_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendIndividualEventToAllAsync_result:write(oprot)
  oprot:writeStructBegin('sendIndividualEventToAllAsync_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

setBuddyOnAir_args = __TObject:new{
  requestId,
  onAir
}

function setBuddyOnAir_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.onAir = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function setBuddyOnAir_args:write(oprot)
  oprot:writeStructBegin('setBuddyOnAir_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.onAir ~= nil then
    oprot:writeFieldBegin('onAir', TType.BOOL, 2)
    oprot:writeBool(self.onAir)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

setBuddyOnAir_result = __TObject:new{
  success,
  e
}

function setBuddyOnAir_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SetBuddyOnAirResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function setBuddyOnAir_result:write(oprot)
  oprot:writeStructBegin('setBuddyOnAir_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

setBuddyOnAirAsync_args = __TObject:new{
  requestId,
  onAir
}

function setBuddyOnAirAsync_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.onAir = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function setBuddyOnAirAsync_args:write(oprot)
  oprot:writeStructBegin('setBuddyOnAirAsync_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.onAir ~= nil then
    oprot:writeFieldBegin('onAir', TType.BOOL, 2)
    oprot:writeBool(self.onAir)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

setBuddyOnAirAsync_result = __TObject:new{
  success,
  e
}

function setBuddyOnAirAsync_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function setBuddyOnAirAsync_result:write(oprot)
  oprot:writeStructBegin('setBuddyOnAirAsync_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

storeMessage_args = __TObject:new{
  requestId,
  messageRequest
}

function storeMessage_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.messageRequest = BuddyMessageRequest:new{}
        self.messageRequest:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function storeMessage_args:write(oprot)
  oprot:writeStructBegin('storeMessage_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.messageRequest ~= nil then
    oprot:writeFieldBegin('messageRequest', TType.STRUCT, 2)
    self.messageRequest:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

storeMessage_result = __TObject:new{
  success,
  e
}

function storeMessage_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SendBuddyMessageResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function storeMessage_result:write(oprot)
  oprot:writeStructBegin('storeMessage_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

unblockBuddyMember_args = __TObject:new{
  requestId,
  mid
}

function unblockBuddyMember_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function unblockBuddyMember_args:write(oprot)
  oprot:writeStructBegin('unblockBuddyMember_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 2)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

unblockBuddyMember_result = __TObject:new{
  e
}

function unblockBuddyMember_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function unblockBuddyMember_result:write(oprot)
  oprot:writeStructBegin('unblockBuddyMember_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

unregisterBuddy_args = __TObject:new{
  requestId
}

function unregisterBuddy_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function unregisterBuddy_args:write(oprot)
  oprot:writeStructBegin('unregisterBuddy_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

unregisterBuddy_result = __TObject:new{
  e
}

function unregisterBuddy_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function unregisterBuddy_result:write(oprot)
  oprot:writeStructBegin('unregisterBuddy_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

unregisterBuddyAdmin_args = __TObject:new{
  requestId
}

function unregisterBuddyAdmin_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function unregisterBuddyAdmin_args:write(oprot)
  oprot:writeStructBegin('unregisterBuddyAdmin_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

unregisterBuddyAdmin_result = __TObject:new{
  e
}

function unregisterBuddyAdmin_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function unregisterBuddyAdmin_result:write(oprot)
  oprot:writeStructBegin('unregisterBuddyAdmin_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateBuddyAdminProfileAttribute_args = __TObject:new{
  requestId,
  attributes
}

function updateBuddyAdminProfileAttribute_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.MAP then
        self.attributes = {}
        local _ktype1075, _vtype1076, _size1074 = iprot:readMapBegin() 
        for _i=1,_size1074 do
          local _key1078 = iprot:readString()
          local _val1079 = iprot:readString()
          self.attributes[_key1078] = _val1079
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateBuddyAdminProfileAttribute_args:write(oprot)
  oprot:writeStructBegin('updateBuddyAdminProfileAttribute_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.attributes ~= nil then
    oprot:writeFieldBegin('attributes', TType.MAP, 2)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.attributes))
    for kiter1080,viter1081 in pairs(self.attributes) do
      oprot:writeString(kiter1080)
      oprot:writeString(viter1081)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateBuddyAdminProfileAttribute_result = __TObject:new{
  e
}

function updateBuddyAdminProfileAttribute_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateBuddyAdminProfileAttribute_result:write(oprot)
  oprot:writeStructBegin('updateBuddyAdminProfileAttribute_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateBuddyAdminProfileImage_args = __TObject:new{
  requestId,
  picture
}

function updateBuddyAdminProfileImage_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.picture = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateBuddyAdminProfileImage_args:write(oprot)
  oprot:writeStructBegin('updateBuddyAdminProfileImage_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.picture ~= nil then
    oprot:writeFieldBegin('picture', TType.STRING, 2)
    oprot:writeString(self.picture)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateBuddyAdminProfileImage_result = __TObject:new{
  e
}

function updateBuddyAdminProfileImage_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateBuddyAdminProfileImage_result:write(oprot)
  oprot:writeStructBegin('updateBuddyAdminProfileImage_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateBuddyProfileAttributes_args = __TObject:new{
  requestId,
  attributes
}

function updateBuddyProfileAttributes_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.MAP then
        self.attributes = {}
        local _ktype1083, _vtype1084, _size1082 = iprot:readMapBegin() 
        for _i=1,_size1082 do
          local _key1086 = iprot:readString()
          local _val1087 = iprot:readString()
          self.attributes[_key1086] = _val1087
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateBuddyProfileAttributes_args:write(oprot)
  oprot:writeStructBegin('updateBuddyProfileAttributes_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.attributes ~= nil then
    oprot:writeFieldBegin('attributes', TType.MAP, 2)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.attributes))
    for kiter1088,viter1089 in pairs(self.attributes) do
      oprot:writeString(kiter1088)
      oprot:writeString(viter1089)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateBuddyProfileAttributes_result = __TObject:new{
  success,
  e
}

function updateBuddyProfileAttributes_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = UpdateBuddyProfileResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateBuddyProfileAttributes_result:write(oprot)
  oprot:writeStructBegin('updateBuddyProfileAttributes_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateBuddyProfileAttributesAsync_args = __TObject:new{
  requestId,
  attributes
}

function updateBuddyProfileAttributesAsync_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.MAP then
        self.attributes = {}
        local _ktype1091, _vtype1092, _size1090 = iprot:readMapBegin() 
        for _i=1,_size1090 do
          local _key1094 = iprot:readString()
          local _val1095 = iprot:readString()
          self.attributes[_key1094] = _val1095
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateBuddyProfileAttributesAsync_args:write(oprot)
  oprot:writeStructBegin('updateBuddyProfileAttributesAsync_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.attributes ~= nil then
    oprot:writeFieldBegin('attributes', TType.MAP, 2)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.attributes))
    for kiter1096,viter1097 in pairs(self.attributes) do
      oprot:writeString(kiter1096)
      oprot:writeString(viter1097)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateBuddyProfileAttributesAsync_result = __TObject:new{
  success,
  e
}

function updateBuddyProfileAttributesAsync_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateBuddyProfileAttributesAsync_result:write(oprot)
  oprot:writeStructBegin('updateBuddyProfileAttributesAsync_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateBuddyProfileImage_args = __TObject:new{
  requestId,
  image
}

function updateBuddyProfileImage_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.image = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateBuddyProfileImage_args:write(oprot)
  oprot:writeStructBegin('updateBuddyProfileImage_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.image ~= nil then
    oprot:writeFieldBegin('image', TType.STRING, 2)
    oprot:writeString(self.image)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateBuddyProfileImage_result = __TObject:new{
  success,
  e
}

function updateBuddyProfileImage_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = UpdateBuddyProfileResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateBuddyProfileImage_result:write(oprot)
  oprot:writeStructBegin('updateBuddyProfileImage_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateBuddyProfileImageAsync_args = __TObject:new{
  requestId,
  image
}

function updateBuddyProfileImageAsync_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.image = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateBuddyProfileImageAsync_args:write(oprot)
  oprot:writeStructBegin('updateBuddyProfileImageAsync_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.image ~= nil then
    oprot:writeFieldBegin('image', TType.STRING, 2)
    oprot:writeString(self.image)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateBuddyProfileImageAsync_result = __TObject:new{
  success,
  e
}

function updateBuddyProfileImageAsync_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateBuddyProfileImageAsync_result:write(oprot)
  oprot:writeStructBegin('updateBuddyProfileImageAsync_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateBuddySearchId_args = __TObject:new{
  requestId,
  searchId
}

function updateBuddySearchId_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.searchId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateBuddySearchId_args:write(oprot)
  oprot:writeStructBegin('updateBuddySearchId_args')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.searchId ~= nil then
    oprot:writeFieldBegin('searchId', TType.STRING, 2)
    oprot:writeString(self.searchId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateBuddySearchId_result = __TObject:new{
  e
}

function updateBuddySearchId_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateBuddySearchId_result:write(oprot)
  oprot:writeStructBegin('updateBuddySearchId_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateBuddySettings_args = __TObject:new{
  settings
}

function updateBuddySettings_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.MAP then
        self.settings = {}
        local _ktype1099, _vtype1100, _size1098 = iprot:readMapBegin() 
        for _i=1,_size1098 do
          local _key1102 = iprot:readString()
          local _val1103 = iprot:readString()
          self.settings[_key1102] = _val1103
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateBuddySettings_args:write(oprot)
  oprot:writeStructBegin('updateBuddySettings_args')
  if self.settings ~= nil then
    oprot:writeFieldBegin('settings', TType.MAP, 2)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.settings))
    for kiter1104,viter1105 in pairs(self.settings) do
      oprot:writeString(kiter1104)
      oprot:writeString(viter1105)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateBuddySettings_result = __TObject:new{
  e
}

function updateBuddySettings_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateBuddySettings_result:write(oprot)
  oprot:writeStructBegin('updateBuddySettings_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

uploadBuddyContent_args = __TObject:new{
  contentType,
  content
}

function uploadBuddyContent_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.contentType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.content = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function uploadBuddyContent_args:write(oprot)
  oprot:writeStructBegin('uploadBuddyContent_args')
  if self.contentType ~= nil then
    oprot:writeFieldBegin('contentType', TType.I32, 2)
    oprot:writeI32(self.contentType)
    oprot:writeFieldEnd()
  end
  if self.content ~= nil then
    oprot:writeFieldBegin('content', TType.STRING, 3)
    oprot:writeString(self.content)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

uploadBuddyContent_result = __TObject:new{
  success,
  e
}

function uploadBuddyContent_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function uploadBuddyContent_result:write(oprot)
  oprot:writeStructBegin('uploadBuddyContent_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end