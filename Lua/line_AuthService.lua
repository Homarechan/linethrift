--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'line_ttypes'

AuthServiceClient = __TObject.new(__TClient, {
  __type = 'AuthServiceClient'
})

function AuthServiceClient:normalizePhoneNumber(countryCode, phoneNumber, countryCodeHint)
  self:send_normalizePhoneNumber(countryCode, phoneNumber, countryCodeHint)
  return self:recv_normalizePhoneNumber(countryCode, phoneNumber, countryCodeHint)
end

function AuthServiceClient:send_normalizePhoneNumber(countryCode, phoneNumber, countryCodeHint)
  self.oprot:writeMessageBegin('normalizePhoneNumber', TMessageType.CALL, self._seqid)
  local args = normalizePhoneNumber_args:new{}
  args.countryCode = countryCode
  args.phoneNumber = phoneNumber
  args.countryCodeHint = countryCodeHint
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function AuthServiceClient:recv_normalizePhoneNumber(countryCode, phoneNumber, countryCodeHint)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = normalizePhoneNumber_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function AuthServiceClient:respondE2EELoginRequest(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode)
  self:send_respondE2EELoginRequest(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode)
  self:recv_respondE2EELoginRequest(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode)
end

function AuthServiceClient:send_respondE2EELoginRequest(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode)
  self.oprot:writeMessageBegin('respondE2EELoginRequest', TMessageType.CALL, self._seqid)
  local args = respondE2EELoginRequest_args:new{}
  args.verifier = verifier
  args.publicKey = publicKey
  args.encryptedKeyChain = encryptedKeyChain
  args.hashKeyChain = hashKeyChain
  args.errorCode = errorCode
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function AuthServiceClient:recv_respondE2EELoginRequest(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = respondE2EELoginRequest_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function AuthServiceClient:confirmE2EELogin(verifier, deviceSecret)
  self:send_confirmE2EELogin(verifier, deviceSecret)
  return self:recv_confirmE2EELogin(verifier, deviceSecret)
end

function AuthServiceClient:send_confirmE2EELogin(verifier, deviceSecret)
  self.oprot:writeMessageBegin('confirmE2EELogin', TMessageType.CALL, self._seqid)
  local args = confirmE2EELogin_args:new{}
  args.verifier = verifier
  args.deviceSecret = deviceSecret
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function AuthServiceClient:recv_confirmE2EELogin(verifier, deviceSecret)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = confirmE2EELogin_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function AuthServiceClient:logoutZ()
  self:send_logoutZ()
  self:recv_logoutZ()
end

function AuthServiceClient:send_logoutZ()
  self.oprot:writeMessageBegin('logoutZ', TMessageType.CALL, self._seqid)
  local args = logoutZ_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function AuthServiceClient:recv_logoutZ()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = logoutZ_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function AuthServiceClient:loginZ(loginRequest)
  self:send_loginZ(loginRequest)
  return self:recv_loginZ(loginRequest)
end

function AuthServiceClient:send_loginZ(loginRequest)
  self.oprot:writeMessageBegin('loginZ', TMessageType.CALL, self._seqid)
  local args = loginZ_args:new{}
  args.loginRequest = loginRequest
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function AuthServiceClient:recv_loginZ(loginRequest)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = loginZ_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function AuthServiceClient:issueTokenForAccountMigrationSettings(enforce)
  self:send_issueTokenForAccountMigrationSettings(enforce)
  return self:recv_issueTokenForAccountMigrationSettings(enforce)
end

function AuthServiceClient:send_issueTokenForAccountMigrationSettings(enforce)
  self.oprot:writeMessageBegin('issueTokenForAccountMigrationSettings', TMessageType.CALL, self._seqid)
  local args = issueTokenForAccountMigrationSettings_args:new{}
  args.enforce = enforce
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function AuthServiceClient:recv_issueTokenForAccountMigrationSettings(enforce)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = issueTokenForAccountMigrationSettings_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function AuthServiceClient:issueTokenForAccountMigration(migrationSessionId)
  self:send_issueTokenForAccountMigration(migrationSessionId)
  return self:recv_issueTokenForAccountMigration(migrationSessionId)
end

function AuthServiceClient:send_issueTokenForAccountMigration(migrationSessionId)
  self.oprot:writeMessageBegin('issueTokenForAccountMigration', TMessageType.CALL, self._seqid)
  local args = issueTokenForAccountMigration_args:new{}
  args.migrationSessionId = migrationSessionId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function AuthServiceClient:recv_issueTokenForAccountMigration(migrationSessionId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = issueTokenForAccountMigration_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function AuthServiceClient:verifyQrcodeWithE2EE(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain)
  self:send_verifyQrcodeWithE2EE(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain)
  return self:recv_verifyQrcodeWithE2EE(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain)
end

function AuthServiceClient:send_verifyQrcodeWithE2EE(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain)
  self.oprot:writeMessageBegin('verifyQrcodeWithE2EE', TMessageType.CALL, self._seqid)
  local args = verifyQrcodeWithE2EE_args:new{}
  args.verifier = verifier
  args.pinCode = pinCode
  args.errorCode = errorCode
  args.publicKey = publicKey
  args.encryptedKeyChain = encryptedKeyChain
  args.hashKeyChain = hashKeyChain
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function AuthServiceClient:recv_verifyQrcodeWithE2EE(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = verifyQrcodeWithE2EE_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
AuthServiceIface = __TObject:new{
  __type = 'AuthServiceIface'
}


AuthServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'AuthServiceProcessor'
})

function AuthServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function AuthServiceProcessor:process_normalizePhoneNumber(seqid, iprot, oprot, server_ctx)
  local args = normalizePhoneNumber_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = normalizePhoneNumber_result:new{}
  local status, res = pcall(self.handler.normalizePhoneNumber, self.handler, args.countryCode, args.phoneNumber, args.countryCodeHint)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('normalizePhoneNumber', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function AuthServiceProcessor:process_respondE2EELoginRequest(seqid, iprot, oprot, server_ctx)
  local args = respondE2EELoginRequest_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = respondE2EELoginRequest_result:new{}
  local status, res = pcall(self.handler.respondE2EELoginRequest, self.handler, args.verifier, args.publicKey, args.encryptedKeyChain, args.hashKeyChain, args.errorCode)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('respondE2EELoginRequest', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function AuthServiceProcessor:process_confirmE2EELogin(seqid, iprot, oprot, server_ctx)
  local args = confirmE2EELogin_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = confirmE2EELogin_result:new{}
  local status, res = pcall(self.handler.confirmE2EELogin, self.handler, args.verifier, args.deviceSecret)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('confirmE2EELogin', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function AuthServiceProcessor:process_logoutZ(seqid, iprot, oprot, server_ctx)
  local args = logoutZ_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = logoutZ_result:new{}
  local status, res = pcall(self.handler.logoutZ, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('logoutZ', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function AuthServiceProcessor:process_loginZ(seqid, iprot, oprot, server_ctx)
  local args = loginZ_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = loginZ_result:new{}
  local status, res = pcall(self.handler.loginZ, self.handler, args.loginRequest)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('loginZ', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function AuthServiceProcessor:process_issueTokenForAccountMigrationSettings(seqid, iprot, oprot, server_ctx)
  local args = issueTokenForAccountMigrationSettings_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = issueTokenForAccountMigrationSettings_result:new{}
  local status, res = pcall(self.handler.issueTokenForAccountMigrationSettings, self.handler, args.enforce)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('issueTokenForAccountMigrationSettings', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function AuthServiceProcessor:process_issueTokenForAccountMigration(seqid, iprot, oprot, server_ctx)
  local args = issueTokenForAccountMigration_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = issueTokenForAccountMigration_result:new{}
  local status, res = pcall(self.handler.issueTokenForAccountMigration, self.handler, args.migrationSessionId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('issueTokenForAccountMigration', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function AuthServiceProcessor:process_verifyQrcodeWithE2EE(seqid, iprot, oprot, server_ctx)
  local args = verifyQrcodeWithE2EE_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = verifyQrcodeWithE2EE_result:new{}
  local status, res = pcall(self.handler.verifyQrcodeWithE2EE, self.handler, args.verifier, args.pinCode, args.errorCode, args.publicKey, args.encryptedKeyChain, args.hashKeyChain)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('verifyQrcodeWithE2EE', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

normalizePhoneNumber_args = __TObject:new{
  countryCode,
  phoneNumber,
  countryCodeHint
}

function normalizePhoneNumber_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.countryCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.phoneNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.countryCodeHint = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function normalizePhoneNumber_args:write(oprot)
  oprot:writeStructBegin('normalizePhoneNumber_args')
  if self.countryCode ~= nil then
    oprot:writeFieldBegin('countryCode', TType.STRING, 2)
    oprot:writeString(self.countryCode)
    oprot:writeFieldEnd()
  end
  if self.phoneNumber ~= nil then
    oprot:writeFieldBegin('phoneNumber', TType.STRING, 3)
    oprot:writeString(self.phoneNumber)
    oprot:writeFieldEnd()
  end
  if self.countryCodeHint ~= nil then
    oprot:writeFieldBegin('countryCodeHint', TType.STRING, 4)
    oprot:writeString(self.countryCodeHint)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

normalizePhoneNumber_result = __TObject:new{
  success,
  e
}

function normalizePhoneNumber_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function normalizePhoneNumber_result:write(oprot)
  oprot:writeStructBegin('normalizePhoneNumber_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

respondE2EELoginRequest_args = __TObject:new{
  verifier,
  publicKey,
  encryptedKeyChain,
  hashKeyChain,
  errorCode
}

function respondE2EELoginRequest_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.verifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.publicKey = E2EEPublicKey:new{}
        self.publicKey:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.encryptedKeyChain = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.hashKeyChain = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.errorCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function respondE2EELoginRequest_args:write(oprot)
  oprot:writeStructBegin('respondE2EELoginRequest_args')
  if self.verifier ~= nil then
    oprot:writeFieldBegin('verifier', TType.STRING, 1)
    oprot:writeString(self.verifier)
    oprot:writeFieldEnd()
  end
  if self.publicKey ~= nil then
    oprot:writeFieldBegin('publicKey', TType.STRUCT, 2)
    self.publicKey:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.encryptedKeyChain ~= nil then
    oprot:writeFieldBegin('encryptedKeyChain', TType.STRING, 3)
    oprot:writeString(self.encryptedKeyChain)
    oprot:writeFieldEnd()
  end
  if self.hashKeyChain ~= nil then
    oprot:writeFieldBegin('hashKeyChain', TType.STRING, 4)
    oprot:writeString(self.hashKeyChain)
    oprot:writeFieldEnd()
  end
  if self.errorCode ~= nil then
    oprot:writeFieldBegin('errorCode', TType.I32, 5)
    oprot:writeI32(self.errorCode)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

respondE2EELoginRequest_result = __TObject:new{
  e
}

function respondE2EELoginRequest_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function respondE2EELoginRequest_result:write(oprot)
  oprot:writeStructBegin('respondE2EELoginRequest_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

confirmE2EELogin_args = __TObject:new{
  verifier,
  deviceSecret
}

function confirmE2EELogin_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.verifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.deviceSecret = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function confirmE2EELogin_args:write(oprot)
  oprot:writeStructBegin('confirmE2EELogin_args')
  if self.verifier ~= nil then
    oprot:writeFieldBegin('verifier', TType.STRING, 1)
    oprot:writeString(self.verifier)
    oprot:writeFieldEnd()
  end
  if self.deviceSecret ~= nil then
    oprot:writeFieldBegin('deviceSecret', TType.STRING, 2)
    oprot:writeString(self.deviceSecret)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

confirmE2EELogin_result = __TObject:new{
  success,
  e
}

function confirmE2EELogin_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function confirmE2EELogin_result:write(oprot)
  oprot:writeStructBegin('confirmE2EELogin_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

logoutZ_args = __TObject:new{

}

function logoutZ_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function logoutZ_args:write(oprot)
  oprot:writeStructBegin('logoutZ_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

logoutZ_result = __TObject:new{
  e
}

function logoutZ_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function logoutZ_result:write(oprot)
  oprot:writeStructBegin('logoutZ_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

loginZ_args = __TObject:new{
  loginRequest
}

function loginZ_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.loginRequest = LoginRequest:new{}
        self.loginRequest:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function loginZ_args:write(oprot)
  oprot:writeStructBegin('loginZ_args')
  if self.loginRequest ~= nil then
    oprot:writeFieldBegin('loginRequest', TType.STRUCT, 2)
    self.loginRequest:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

loginZ_result = __TObject:new{
  success,
  e
}

function loginZ_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = LoginResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function loginZ_result:write(oprot)
  oprot:writeStructBegin('loginZ_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

issueTokenForAccountMigrationSettings_args = __TObject:new{
  enforce
}

function issueTokenForAccountMigrationSettings_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.enforce = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function issueTokenForAccountMigrationSettings_args:write(oprot)
  oprot:writeStructBegin('issueTokenForAccountMigrationSettings_args')
  if self.enforce ~= nil then
    oprot:writeFieldBegin('enforce', TType.BOOL, 2)
    oprot:writeBool(self.enforce)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

issueTokenForAccountMigrationSettings_result = __TObject:new{
  success,
  e
}

function issueTokenForAccountMigrationSettings_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SecurityCenterResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function issueTokenForAccountMigrationSettings_result:write(oprot)
  oprot:writeStructBegin('issueTokenForAccountMigrationSettings_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

issueTokenForAccountMigration_args = __TObject:new{
  migrationSessionId
}

function issueTokenForAccountMigration_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.migrationSessionId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function issueTokenForAccountMigration_args:write(oprot)
  oprot:writeStructBegin('issueTokenForAccountMigration_args')
  if self.migrationSessionId ~= nil then
    oprot:writeFieldBegin('migrationSessionId', TType.STRING, 2)
    oprot:writeString(self.migrationSessionId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

issueTokenForAccountMigration_result = __TObject:new{
  success,
  e
}

function issueTokenForAccountMigration_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SecurityCenterResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function issueTokenForAccountMigration_result:write(oprot)
  oprot:writeStructBegin('issueTokenForAccountMigration_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

verifyQrcodeWithE2EE_args = __TObject:new{
  verifier,
  pinCode,
  errorCode,
  publicKey,
  encryptedKeyChain,
  hashKeyChain
}

function verifyQrcodeWithE2EE_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.verifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.pinCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.errorCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRUCT then
        self.publicKey = E2EEPublicKey:new{}
        self.publicKey:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.encryptedKeyChain = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.hashKeyChain = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function verifyQrcodeWithE2EE_args:write(oprot)
  oprot:writeStructBegin('verifyQrcodeWithE2EE_args')
  if self.verifier ~= nil then
    oprot:writeFieldBegin('verifier', TType.STRING, 2)
    oprot:writeString(self.verifier)
    oprot:writeFieldEnd()
  end
  if self.pinCode ~= nil then
    oprot:writeFieldBegin('pinCode', TType.STRING, 3)
    oprot:writeString(self.pinCode)
    oprot:writeFieldEnd()
  end
  if self.errorCode ~= nil then
    oprot:writeFieldBegin('errorCode', TType.I32, 4)
    oprot:writeI32(self.errorCode)
    oprot:writeFieldEnd()
  end
  if self.publicKey ~= nil then
    oprot:writeFieldBegin('publicKey', TType.STRUCT, 5)
    self.publicKey:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.encryptedKeyChain ~= nil then
    oprot:writeFieldBegin('encryptedKeyChain', TType.STRING, 6)
    oprot:writeString(self.encryptedKeyChain)
    oprot:writeFieldEnd()
  end
  if self.hashKeyChain ~= nil then
    oprot:writeFieldBegin('hashKeyChain', TType.STRING, 7)
    oprot:writeString(self.hashKeyChain)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

verifyQrcodeWithE2EE_result = __TObject:new{
  success,
  e
}

function verifyQrcodeWithE2EE_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function verifyQrcodeWithE2EE_result:write(oprot)
  oprot:writeStructBegin('verifyQrcodeWithE2EE_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end