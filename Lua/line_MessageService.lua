--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'line_ttypes'

MessageServiceClient = __TObject.new(__TClient, {
  __type = 'MessageServiceClient'
})

function MessageServiceClient:fetchMessageOperations(localRevision, lastOpTimestamp, count)
  self:send_fetchMessageOperations(localRevision, lastOpTimestamp, count)
  return self:recv_fetchMessageOperations(localRevision, lastOpTimestamp, count)
end

function MessageServiceClient:send_fetchMessageOperations(localRevision, lastOpTimestamp, count)
  self.oprot:writeMessageBegin('fetchMessageOperations', TMessageType.CALL, self._seqid)
  local args = fetchMessageOperations_args:new{}
  args.localRevision = localRevision
  args.lastOpTimestamp = lastOpTimestamp
  args.count = count
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function MessageServiceClient:recv_fetchMessageOperations(localRevision, lastOpTimestamp, count)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = fetchMessageOperations_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function MessageServiceClient:getLastReadMessageIds(chatId)
  self:send_getLastReadMessageIds(chatId)
  return self:recv_getLastReadMessageIds(chatId)
end

function MessageServiceClient:send_getLastReadMessageIds(chatId)
  self.oprot:writeMessageBegin('getLastReadMessageIds', TMessageType.CALL, self._seqid)
  local args = getLastReadMessageIds_args:new{}
  args.chatId = chatId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function MessageServiceClient:recv_getLastReadMessageIds(chatId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getLastReadMessageIds_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function MessageServiceClient:multiGetLastReadMessageIds(chatIds)
  self:send_multiGetLastReadMessageIds(chatIds)
  return self:recv_multiGetLastReadMessageIds(chatIds)
end

function MessageServiceClient:send_multiGetLastReadMessageIds(chatIds)
  self.oprot:writeMessageBegin('multiGetLastReadMessageIds', TMessageType.CALL, self._seqid)
  local args = multiGetLastReadMessageIds_args:new{}
  args.chatIds = chatIds
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function MessageServiceClient:recv_multiGetLastReadMessageIds(chatIds)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = multiGetLastReadMessageIds_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.e then
    error(result.e)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
MessageServiceIface = __TObject:new{
  __type = 'MessageServiceIface'
}


MessageServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'MessageServiceProcessor'
})

function MessageServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function MessageServiceProcessor:process_fetchMessageOperations(seqid, iprot, oprot, server_ctx)
  local args = fetchMessageOperations_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = fetchMessageOperations_result:new{}
  local status, res = pcall(self.handler.fetchMessageOperations, self.handler, args.localRevision, args.lastOpTimestamp, args.count)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('fetchMessageOperations', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function MessageServiceProcessor:process_getLastReadMessageIds(seqid, iprot, oprot, server_ctx)
  local args = getLastReadMessageIds_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getLastReadMessageIds_result:new{}
  local status, res = pcall(self.handler.getLastReadMessageIds, self.handler, args.chatId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getLastReadMessageIds', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function MessageServiceProcessor:process_multiGetLastReadMessageIds(seqid, iprot, oprot, server_ctx)
  local args = multiGetLastReadMessageIds_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = multiGetLastReadMessageIds_result:new{}
  local status, res = pcall(self.handler.multiGetLastReadMessageIds, self.handler, args.chatIds)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TalkException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('multiGetLastReadMessageIds', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

fetchMessageOperations_args = __TObject:new{
  localRevision,
  lastOpTimestamp,
  count
}

function fetchMessageOperations_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.localRevision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.lastOpTimestamp = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.count = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function fetchMessageOperations_args:write(oprot)
  oprot:writeStructBegin('fetchMessageOperations_args')
  if self.localRevision ~= nil then
    oprot:writeFieldBegin('localRevision', TType.I64, 2)
    oprot:writeI64(self.localRevision)
    oprot:writeFieldEnd()
  end
  if self.lastOpTimestamp ~= nil then
    oprot:writeFieldBegin('lastOpTimestamp', TType.I64, 3)
    oprot:writeI64(self.lastOpTimestamp)
    oprot:writeFieldEnd()
  end
  if self.count ~= nil then
    oprot:writeFieldBegin('count', TType.I32, 4)
    oprot:writeI32(self.count)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

fetchMessageOperations_result = __TObject:new{
  success,
  e
}

function fetchMessageOperations_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = MessageOperations:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function fetchMessageOperations_result:write(oprot)
  oprot:writeStructBegin('fetchMessageOperations_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getLastReadMessageIds_args = __TObject:new{
  chatId
}

function getLastReadMessageIds_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.chatId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getLastReadMessageIds_args:write(oprot)
  oprot:writeStructBegin('getLastReadMessageIds_args')
  if self.chatId ~= nil then
    oprot:writeFieldBegin('chatId', TType.STRING, 2)
    oprot:writeString(self.chatId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getLastReadMessageIds_result = __TObject:new{
  success,
  e
}

function getLastReadMessageIds_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = LastReadMessageIds:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getLastReadMessageIds_result:write(oprot)
  oprot:writeStructBegin('getLastReadMessageIds_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

multiGetLastReadMessageIds_args = __TObject:new{
  chatIds
}

function multiGetLastReadMessageIds_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.chatIds = {}
        local _etype1133, _size1130 = iprot:readListBegin()
        for _i=1,_size1130 do
          local _elem1134 = iprot:readString()
          table.insert(self.chatIds, _elem1134)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function multiGetLastReadMessageIds_args:write(oprot)
  oprot:writeStructBegin('multiGetLastReadMessageIds_args')
  if self.chatIds ~= nil then
    oprot:writeFieldBegin('chatIds', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.chatIds)
    for _,iter1135 in ipairs(self.chatIds) do
      oprot:writeString(iter1135)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

multiGetLastReadMessageIds_result = __TObject:new{
  success,
  e
}

function multiGetLastReadMessageIds_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype1139, _size1136 = iprot:readListBegin()
        for _i=1,_size1136 do
          local _elem1140 = LastReadMessageIds:new{}
          _elem1140:read(iprot)
          table.insert(self.success, _elem1140)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = TalkException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function multiGetLastReadMessageIds_result:write(oprot)
  oprot:writeStructBegin('multiGetLastReadMessageIds_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter1141 in ipairs(self.success) do
      iter1141:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end