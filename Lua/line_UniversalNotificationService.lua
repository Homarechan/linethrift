--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'line_ttypes'

UniversalNotificationServiceClient = __TObject.new(__TClient, {
  __type = 'UniversalNotificationServiceClient'
})

function UniversalNotificationServiceClient:notify(event)
  self:send_notify(event)
  self:recv_notify(event)
end

function UniversalNotificationServiceClient:send_notify(event)
  self.oprot:writeMessageBegin('notify', TMessageType.CALL, self._seqid)
  local args = notify_args:new{}
  args.event = event
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UniversalNotificationServiceClient:recv_notify(event)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = notify_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end
UniversalNotificationServiceIface = __TObject:new{
  __type = 'UniversalNotificationServiceIface'
}


UniversalNotificationServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'UniversalNotificationServiceProcessor'
})

function UniversalNotificationServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function UniversalNotificationServiceProcessor:process_notify(seqid, iprot, oprot, server_ctx)
  local args = notify_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = notify_result:new{}
  local status, res = pcall(self.handler.notify, self.handler, args.event)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'UniversalNotificationServiceException' then
    result.e = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('notify', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

notify_args = __TObject:new{
  event
}

function notify_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.event = GlobalEvent:new{}
        self.event:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function notify_args:write(oprot)
  oprot:writeStructBegin('notify_args')
  if self.event ~= nil then
    oprot:writeFieldBegin('event', TType.STRUCT, 2)
    self.event:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

notify_result = __TObject:new{
  e
}

function notify_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.e = UniversalNotificationServiceException:new{}
        self.e:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function notify_result:write(oprot)
  oprot:writeStructBegin('notify_result')
  if self.e ~= nil then
    oprot:writeFieldBegin('e', TType.STRUCT, 1)
    self.e:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end