/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class ProductList implements TBase {
  
  static var STRUCT_DESC = { new TStruct("ProductList"); };
  static var HAS_NEXT_FIELD_DESC = { new TField("hasNext", TType.BOOL, 1); };
  static var BANNER_SEQUENCE_FIELD_DESC = { new TField("bannerSequence", TType.I64, 4); };
  static var BANNER_TARGET_TYPE_FIELD_DESC = { new TField("bannerTargetType", TType.I32, 5); };
  static var BANNER_TARGET_PATH_FIELD_DESC = { new TField("bannerTargetPath", TType.STRING, 6); };
  static var PRODUCT_LIST_FIELD_DESC = { new TField("productList", TType.LIST, 7); };
  static var BANNER_LANG_FIELD_DESC = { new TField("bannerLang", TType.STRING, 8); };

  @:isVar
  public var hasNext(get,set) : Bool;
  @:isVar
  public var bannerSequence(get,set) : haxe.Int64;
  @:isVar
  public var bannerTargetType(get,set) : Int;
  @:isVar
  public var bannerTargetPath(get,set) : String;
  @:isVar
  public var productList(get,set) : List< Product>;
  @:isVar
  public var bannerLang(get,set) : String;

  inline static var HASNEXT_FIELD_ID : Int = 1;
  inline static var BANNERSEQUENCE_FIELD_ID : Int = 4;
  inline static var BANNERTARGETTYPE_FIELD_ID : Int = 5;
  inline static var BANNERTARGETPATH_FIELD_ID : Int = 6;
  inline static var PRODUCTLIST_FIELD_ID : Int = 7;
  inline static var BANNERLANG_FIELD_ID : Int = 8;

  private var __isset_hasNext : Bool = false;
  private var __isset_bannerSequence : Bool = false;
  private var __isset_bannerTargetType : Bool = false;

  public function new() {
  }

  public function get_hasNext() : Bool {
    return this.hasNext;
  }

  public function set_hasNext(hasNext:Bool) : Bool {
    this.hasNext = hasNext;
    this.__isset_hasNext = true;
    return this.hasNext;
  }

  public function unsetHasNext() : Void {
    this.__isset_hasNext = false;
  }

  // Returns true if field hasNext is set (has been assigned a value) and false otherwise
  public function isSetHasNext() : Bool {
    return this.__isset_hasNext;
  }

  public function get_bannerSequence() : haxe.Int64 {
    return this.bannerSequence;
  }

  public function set_bannerSequence(bannerSequence:haxe.Int64) : haxe.Int64 {
    this.bannerSequence = bannerSequence;
    this.__isset_bannerSequence = true;
    return this.bannerSequence;
  }

  public function unsetBannerSequence() : Void {
    this.__isset_bannerSequence = false;
  }

  // Returns true if field bannerSequence is set (has been assigned a value) and false otherwise
  public function isSetBannerSequence() : Bool {
    return this.__isset_bannerSequence;
  }

  public function get_bannerTargetType() : Int {
    return this.bannerTargetType;
  }

  public function set_bannerTargetType(bannerTargetType:Int) : Int {
    this.bannerTargetType = bannerTargetType;
    this.__isset_bannerTargetType = true;
    return this.bannerTargetType;
  }

  public function unsetBannerTargetType() : Void {
    this.__isset_bannerTargetType = false;
  }

  // Returns true if field bannerTargetType is set (has been assigned a value) and false otherwise
  public function isSetBannerTargetType() : Bool {
    return this.__isset_bannerTargetType;
  }

  public function get_bannerTargetPath() : String {
    return this.bannerTargetPath;
  }

  public function set_bannerTargetPath(bannerTargetPath:String) : String {
    this.bannerTargetPath = bannerTargetPath;
    return this.bannerTargetPath;
  }

  public function unsetBannerTargetPath() : Void {
    this.bannerTargetPath = null;
  }

  // Returns true if field bannerTargetPath is set (has been assigned a value) and false otherwise
  public function isSetBannerTargetPath() : Bool {
    return this.bannerTargetPath != null;
  }

  public function get_productList() : List< Product> {
    return this.productList;
  }

  public function set_productList(productList:List< Product>) : List< Product> {
    this.productList = productList;
    return this.productList;
  }

  public function unsetProductList() : Void {
    this.productList = null;
  }

  // Returns true if field productList is set (has been assigned a value) and false otherwise
  public function isSetProductList() : Bool {
    return this.productList != null;
  }

  public function get_bannerLang() : String {
    return this.bannerLang;
  }

  public function set_bannerLang(bannerLang:String) : String {
    this.bannerLang = bannerLang;
    return this.bannerLang;
  }

  public function unsetBannerLang() : Void {
    this.bannerLang = null;
  }

  // Returns true if field bannerLang is set (has been assigned a value) and false otherwise
  public function isSetBannerLang() : Bool {
    return this.bannerLang != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case HASNEXT_FIELD_ID:
      if (value == null) {
        unsetHasNext();
      } else {
        this.hasNext = value;
      }

    case BANNERSEQUENCE_FIELD_ID:
      if (value == null) {
        unsetBannerSequence();
      } else {
        this.bannerSequence = value;
      }

    case BANNERTARGETTYPE_FIELD_ID:
      if (value == null) {
        unsetBannerTargetType();
      } else {
        this.bannerTargetType = value;
      }

    case BANNERTARGETPATH_FIELD_ID:
      if (value == null) {
        unsetBannerTargetPath();
      } else {
        this.bannerTargetPath = value;
      }

    case PRODUCTLIST_FIELD_ID:
      if (value == null) {
        unsetProductList();
      } else {
        this.productList = value;
      }

    case BANNERLANG_FIELD_ID:
      if (value == null) {
        unsetBannerLang();
      } else {
        this.bannerLang = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case HASNEXT_FIELD_ID:
      return this.hasNext;
    case BANNERSEQUENCE_FIELD_ID:
      return this.bannerSequence;
    case BANNERTARGETTYPE_FIELD_ID:
      return this.bannerTargetType;
    case BANNERTARGETPATH_FIELD_ID:
      return this.bannerTargetPath;
    case PRODUCTLIST_FIELD_ID:
      return this.productList;
    case BANNERLANG_FIELD_ID:
      return this.bannerLang;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case HASNEXT_FIELD_ID:
      return isSetHasNext();
    case BANNERSEQUENCE_FIELD_ID:
      return isSetBannerSequence();
    case BANNERTARGETTYPE_FIELD_ID:
      return isSetBannerTargetType();
    case BANNERTARGETPATH_FIELD_ID:
      return isSetBannerTargetPath();
    case PRODUCTLIST_FIELD_ID:
      return isSetProductList();
    case BANNERLANG_FIELD_ID:
      return isSetBannerLang();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case HASNEXT_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.hasNext = iprot.readBool();
              this.__isset_hasNext = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case BANNERSEQUENCE_FIELD_ID:
            if (field.type == TType.I64) {
              this.bannerSequence = iprot.readI64();
              this.__isset_bannerSequence = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case BANNERTARGETTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.bannerTargetType = iprot.readI32();
              this.__isset_bannerTargetType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case BANNERTARGETPATH_FIELD_ID:
            if (field.type == TType.STRING) {
              this.bannerTargetPath = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PRODUCTLIST_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list215 = iprot.readListBegin();
                this.productList = new List< Product>();
                for( _i216 in 0 ... _list215.size)
                {
                  var _elem217 : Product;
                  _elem217 = new Product();
                  _elem217.read(iprot);
                  this.productList.add(_elem217);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case BANNERLANG_FIELD_ID:
            if (field.type == TType.STRING) {
              this.bannerLang = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(HAS_NEXT_FIELD_DESC);
      oprot.writeBool(this.hasNext);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BANNER_SEQUENCE_FIELD_DESC);
      oprot.writeI64(this.bannerSequence);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BANNER_TARGET_TYPE_FIELD_DESC);
      oprot.writeI32(this.bannerTargetType);
      oprot.writeFieldEnd();
      if (this.bannerTargetPath != null) {
        oprot.writeFieldBegin(BANNER_TARGET_PATH_FIELD_DESC);
        oprot.writeString(this.bannerTargetPath);
        oprot.writeFieldEnd();
      }
      if (this.productList != null) {
        oprot.writeFieldBegin(PRODUCT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.productList.length));
          for( elem218 in this.productList)
          {
            elem218.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.bannerLang != null) {
        oprot.writeFieldBegin(BANNER_LANG_FIELD_DESC);
        oprot.writeString(this.bannerLang);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "ProductList(";
    var first : Bool = true;

    ret += "hasNext:";
    ret += this.hasNext;
    first = false;
    if (!first) ret +=  ", ";
    ret += "bannerSequence:";
    ret += this.bannerSequence;
    first = false;
    if (!first) ret +=  ", ";
    ret += "bannerTargetType:";
    var bannerTargetType_name : String = .ProductBannerLinkType.VALUES_TO_NAMES[this.bannerTargetType];
    if (bannerTargetType_name != null) {
      ret += bannerTargetType_name;
      ret += " (";
    }
    ret += this.bannerTargetType;
    if (bannerTargetType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "bannerTargetPath:";
    if (this.bannerTargetPath == null) {
      ret += "null";
    } else {
      ret += this.bannerTargetPath;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "productList:";
    if (this.productList == null) {
      ret += "null";
    } else {
      ret += this.productList;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "bannerLang:";
    if (this.bannerLang == null) {
      ret += "null";
    } else {
      ret += this.bannerLang;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetBannerTargetType() && !.ProductBannerLinkType.VALID_VALUES.contains(bannerTargetType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'bannerTargetType' has been assigned the invalid value " + bannerTargetType);
    }
  }

}

