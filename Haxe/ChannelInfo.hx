/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class ChannelInfo implements TBase {
  
  static var STRUCT_DESC = { new TStruct("ChannelInfo"); };
  static var CHANNEL_ID_FIELD_DESC = { new TField("channelId", TType.STRING, 1); };
  static var NAME_FIELD_DESC = { new TField("name", TType.STRING, 3); };
  static var ENTRY_PAGE_URL_FIELD_DESC = { new TField("entryPageUrl", TType.STRING, 4); };
  static var DESCRIPTION_TEXT_FIELD_DESC = { new TField("descriptionText", TType.STRING, 5); };
  static var PROVIDER_FIELD_DESC = { new TField("provider", TType.STRUCT, 6); };
  static var PUBLIC_TYPE_FIELD_DESC = { new TField("publicType", TType.I32, 7); };
  static var ICON_IMAGE_FIELD_DESC = { new TField("iconImage", TType.STRING, 8); };
  static var PERMISSIONS_FIELD_DESC = { new TField("permissions", TType.LIST, 9); };
  static var ICON_THUMBNAIL_IMAGE_FIELD_DESC = { new TField("iconThumbnailImage", TType.STRING, 11); };
  static var CHANNEL_CONFIGURATIONS_FIELD_DESC = { new TField("channelConfigurations", TType.LIST, 12); };
  static var LCS_ALL_API_USABLE_FIELD_DESC = { new TField("lcsAllApiUsable", TType.BOOL, 13); };
  static var ALLOWED_PERMISSIONS_FIELD_DESC = { new TField("allowedPermissions", TType.SET, 14); };
  static var CHANNEL_DOMAINS_FIELD_DESC = { new TField("channelDomains", TType.LIST, 15); };
  static var UPDATED_TIMESTAMP_FIELD_DESC = { new TField("updatedTimestamp", TType.I64, 16); };

  @:isVar
  public var channelId(get,set) : String;
  @:isVar
  public var name(get,set) : String;
  @:isVar
  public var entryPageUrl(get,set) : String;
  @:isVar
  public var descriptionText(get,set) : String;
  @:isVar
  public var provider(get,set) : ChannelProvider;
  @:isVar
  public var publicType(get,set) : Int;
  @:isVar
  public var iconImage(get,set) : String;
  @:isVar
  public var permissions(get,set) : List< String>;
  @:isVar
  public var iconThumbnailImage(get,set) : String;
  @:isVar
  public var channelConfigurations(get,set) : List< Int>;
  @:isVar
  public var lcsAllApiUsable(get,set) : Bool;
  @:isVar
  public var allowedPermissions(get,set) : IntSet;
  @:isVar
  public var channelDomains(get,set) : List< ChannelDomain>;
  @:isVar
  public var updatedTimestamp(get,set) : haxe.Int64;

  inline static var CHANNELID_FIELD_ID : Int = 1;
  inline static var NAME_FIELD_ID : Int = 3;
  inline static var ENTRYPAGEURL_FIELD_ID : Int = 4;
  inline static var DESCRIPTIONTEXT_FIELD_ID : Int = 5;
  inline static var PROVIDER_FIELD_ID : Int = 6;
  inline static var PUBLICTYPE_FIELD_ID : Int = 7;
  inline static var ICONIMAGE_FIELD_ID : Int = 8;
  inline static var PERMISSIONS_FIELD_ID : Int = 9;
  inline static var ICONTHUMBNAILIMAGE_FIELD_ID : Int = 11;
  inline static var CHANNELCONFIGURATIONS_FIELD_ID : Int = 12;
  inline static var LCSALLAPIUSABLE_FIELD_ID : Int = 13;
  inline static var ALLOWEDPERMISSIONS_FIELD_ID : Int = 14;
  inline static var CHANNELDOMAINS_FIELD_ID : Int = 15;
  inline static var UPDATEDTIMESTAMP_FIELD_ID : Int = 16;

  private var __isset_publicType : Bool = false;
  private var __isset_lcsAllApiUsable : Bool = false;
  private var __isset_updatedTimestamp : Bool = false;

  public function new() {
  }

  public function get_channelId() : String {
    return this.channelId;
  }

  public function set_channelId(channelId:String) : String {
    this.channelId = channelId;
    return this.channelId;
  }

  public function unsetChannelId() : Void {
    this.channelId = null;
  }

  // Returns true if field channelId is set (has been assigned a value) and false otherwise
  public function isSetChannelId() : Bool {
    return this.channelId != null;
  }

  public function get_name() : String {
    return this.name;
  }

  public function set_name(name:String) : String {
    this.name = name;
    return this.name;
  }

  public function unsetName() : Void {
    this.name = null;
  }

  // Returns true if field name is set (has been assigned a value) and false otherwise
  public function isSetName() : Bool {
    return this.name != null;
  }

  public function get_entryPageUrl() : String {
    return this.entryPageUrl;
  }

  public function set_entryPageUrl(entryPageUrl:String) : String {
    this.entryPageUrl = entryPageUrl;
    return this.entryPageUrl;
  }

  public function unsetEntryPageUrl() : Void {
    this.entryPageUrl = null;
  }

  // Returns true if field entryPageUrl is set (has been assigned a value) and false otherwise
  public function isSetEntryPageUrl() : Bool {
    return this.entryPageUrl != null;
  }

  public function get_descriptionText() : String {
    return this.descriptionText;
  }

  public function set_descriptionText(descriptionText:String) : String {
    this.descriptionText = descriptionText;
    return this.descriptionText;
  }

  public function unsetDescriptionText() : Void {
    this.descriptionText = null;
  }

  // Returns true if field descriptionText is set (has been assigned a value) and false otherwise
  public function isSetDescriptionText() : Bool {
    return this.descriptionText != null;
  }

  public function get_provider() : ChannelProvider {
    return this.provider;
  }

  public function set_provider(provider:ChannelProvider) : ChannelProvider {
    this.provider = provider;
    return this.provider;
  }

  public function unsetProvider() : Void {
    this.provider = null;
  }

  // Returns true if field provider is set (has been assigned a value) and false otherwise
  public function isSetProvider() : Bool {
    return this.provider != null;
  }

  public function get_publicType() : Int {
    return this.publicType;
  }

  public function set_publicType(publicType:Int) : Int {
    this.publicType = publicType;
    this.__isset_publicType = true;
    return this.publicType;
  }

  public function unsetPublicType() : Void {
    this.__isset_publicType = false;
  }

  // Returns true if field publicType is set (has been assigned a value) and false otherwise
  public function isSetPublicType() : Bool {
    return this.__isset_publicType;
  }

  public function get_iconImage() : String {
    return this.iconImage;
  }

  public function set_iconImage(iconImage:String) : String {
    this.iconImage = iconImage;
    return this.iconImage;
  }

  public function unsetIconImage() : Void {
    this.iconImage = null;
  }

  // Returns true if field iconImage is set (has been assigned a value) and false otherwise
  public function isSetIconImage() : Bool {
    return this.iconImage != null;
  }

  public function get_permissions() : List< String> {
    return this.permissions;
  }

  public function set_permissions(permissions:List< String>) : List< String> {
    this.permissions = permissions;
    return this.permissions;
  }

  public function unsetPermissions() : Void {
    this.permissions = null;
  }

  // Returns true if field permissions is set (has been assigned a value) and false otherwise
  public function isSetPermissions() : Bool {
    return this.permissions != null;
  }

  public function get_iconThumbnailImage() : String {
    return this.iconThumbnailImage;
  }

  public function set_iconThumbnailImage(iconThumbnailImage:String) : String {
    this.iconThumbnailImage = iconThumbnailImage;
    return this.iconThumbnailImage;
  }

  public function unsetIconThumbnailImage() : Void {
    this.iconThumbnailImage = null;
  }

  // Returns true if field iconThumbnailImage is set (has been assigned a value) and false otherwise
  public function isSetIconThumbnailImage() : Bool {
    return this.iconThumbnailImage != null;
  }

  public function get_channelConfigurations() : List< Int> {
    return this.channelConfigurations;
  }

  public function set_channelConfigurations(channelConfigurations:List< Int>) : List< Int> {
    this.channelConfigurations = channelConfigurations;
    return this.channelConfigurations;
  }

  public function unsetChannelConfigurations() : Void {
    this.channelConfigurations = null;
  }

  // Returns true if field channelConfigurations is set (has been assigned a value) and false otherwise
  public function isSetChannelConfigurations() : Bool {
    return this.channelConfigurations != null;
  }

  public function get_lcsAllApiUsable() : Bool {
    return this.lcsAllApiUsable;
  }

  public function set_lcsAllApiUsable(lcsAllApiUsable:Bool) : Bool {
    this.lcsAllApiUsable = lcsAllApiUsable;
    this.__isset_lcsAllApiUsable = true;
    return this.lcsAllApiUsable;
  }

  public function unsetLcsAllApiUsable() : Void {
    this.__isset_lcsAllApiUsable = false;
  }

  // Returns true if field lcsAllApiUsable is set (has been assigned a value) and false otherwise
  public function isSetLcsAllApiUsable() : Bool {
    return this.__isset_lcsAllApiUsable;
  }

  public function get_allowedPermissions() : IntSet {
    return this.allowedPermissions;
  }

  public function set_allowedPermissions(allowedPermissions:IntSet) : IntSet {
    this.allowedPermissions = allowedPermissions;
    return this.allowedPermissions;
  }

  public function unsetAllowedPermissions() : Void {
    this.allowedPermissions = null;
  }

  // Returns true if field allowedPermissions is set (has been assigned a value) and false otherwise
  public function isSetAllowedPermissions() : Bool {
    return this.allowedPermissions != null;
  }

  public function get_channelDomains() : List< ChannelDomain> {
    return this.channelDomains;
  }

  public function set_channelDomains(channelDomains:List< ChannelDomain>) : List< ChannelDomain> {
    this.channelDomains = channelDomains;
    return this.channelDomains;
  }

  public function unsetChannelDomains() : Void {
    this.channelDomains = null;
  }

  // Returns true if field channelDomains is set (has been assigned a value) and false otherwise
  public function isSetChannelDomains() : Bool {
    return this.channelDomains != null;
  }

  public function get_updatedTimestamp() : haxe.Int64 {
    return this.updatedTimestamp;
  }

  public function set_updatedTimestamp(updatedTimestamp:haxe.Int64) : haxe.Int64 {
    this.updatedTimestamp = updatedTimestamp;
    this.__isset_updatedTimestamp = true;
    return this.updatedTimestamp;
  }

  public function unsetUpdatedTimestamp() : Void {
    this.__isset_updatedTimestamp = false;
  }

  // Returns true if field updatedTimestamp is set (has been assigned a value) and false otherwise
  public function isSetUpdatedTimestamp() : Bool {
    return this.__isset_updatedTimestamp;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case CHANNELID_FIELD_ID:
      if (value == null) {
        unsetChannelId();
      } else {
        this.channelId = value;
      }

    case NAME_FIELD_ID:
      if (value == null) {
        unsetName();
      } else {
        this.name = value;
      }

    case ENTRYPAGEURL_FIELD_ID:
      if (value == null) {
        unsetEntryPageUrl();
      } else {
        this.entryPageUrl = value;
      }

    case DESCRIPTIONTEXT_FIELD_ID:
      if (value == null) {
        unsetDescriptionText();
      } else {
        this.descriptionText = value;
      }

    case PROVIDER_FIELD_ID:
      if (value == null) {
        unsetProvider();
      } else {
        this.provider = value;
      }

    case PUBLICTYPE_FIELD_ID:
      if (value == null) {
        unsetPublicType();
      } else {
        this.publicType = value;
      }

    case ICONIMAGE_FIELD_ID:
      if (value == null) {
        unsetIconImage();
      } else {
        this.iconImage = value;
      }

    case PERMISSIONS_FIELD_ID:
      if (value == null) {
        unsetPermissions();
      } else {
        this.permissions = value;
      }

    case ICONTHUMBNAILIMAGE_FIELD_ID:
      if (value == null) {
        unsetIconThumbnailImage();
      } else {
        this.iconThumbnailImage = value;
      }

    case CHANNELCONFIGURATIONS_FIELD_ID:
      if (value == null) {
        unsetChannelConfigurations();
      } else {
        this.channelConfigurations = value;
      }

    case LCSALLAPIUSABLE_FIELD_ID:
      if (value == null) {
        unsetLcsAllApiUsable();
      } else {
        this.lcsAllApiUsable = value;
      }

    case ALLOWEDPERMISSIONS_FIELD_ID:
      if (value == null) {
        unsetAllowedPermissions();
      } else {
        this.allowedPermissions = value;
      }

    case CHANNELDOMAINS_FIELD_ID:
      if (value == null) {
        unsetChannelDomains();
      } else {
        this.channelDomains = value;
      }

    case UPDATEDTIMESTAMP_FIELD_ID:
      if (value == null) {
        unsetUpdatedTimestamp();
      } else {
        this.updatedTimestamp = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case CHANNELID_FIELD_ID:
      return this.channelId;
    case NAME_FIELD_ID:
      return this.name;
    case ENTRYPAGEURL_FIELD_ID:
      return this.entryPageUrl;
    case DESCRIPTIONTEXT_FIELD_ID:
      return this.descriptionText;
    case PROVIDER_FIELD_ID:
      return this.provider;
    case PUBLICTYPE_FIELD_ID:
      return this.publicType;
    case ICONIMAGE_FIELD_ID:
      return this.iconImage;
    case PERMISSIONS_FIELD_ID:
      return this.permissions;
    case ICONTHUMBNAILIMAGE_FIELD_ID:
      return this.iconThumbnailImage;
    case CHANNELCONFIGURATIONS_FIELD_ID:
      return this.channelConfigurations;
    case LCSALLAPIUSABLE_FIELD_ID:
      return this.lcsAllApiUsable;
    case ALLOWEDPERMISSIONS_FIELD_ID:
      return this.allowedPermissions;
    case CHANNELDOMAINS_FIELD_ID:
      return this.channelDomains;
    case UPDATEDTIMESTAMP_FIELD_ID:
      return this.updatedTimestamp;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case CHANNELID_FIELD_ID:
      return isSetChannelId();
    case NAME_FIELD_ID:
      return isSetName();
    case ENTRYPAGEURL_FIELD_ID:
      return isSetEntryPageUrl();
    case DESCRIPTIONTEXT_FIELD_ID:
      return isSetDescriptionText();
    case PROVIDER_FIELD_ID:
      return isSetProvider();
    case PUBLICTYPE_FIELD_ID:
      return isSetPublicType();
    case ICONIMAGE_FIELD_ID:
      return isSetIconImage();
    case PERMISSIONS_FIELD_ID:
      return isSetPermissions();
    case ICONTHUMBNAILIMAGE_FIELD_ID:
      return isSetIconThumbnailImage();
    case CHANNELCONFIGURATIONS_FIELD_ID:
      return isSetChannelConfigurations();
    case LCSALLAPIUSABLE_FIELD_ID:
      return isSetLcsAllApiUsable();
    case ALLOWEDPERMISSIONS_FIELD_ID:
      return isSetAllowedPermissions();
    case CHANNELDOMAINS_FIELD_ID:
      return isSetChannelDomains();
    case UPDATEDTIMESTAMP_FIELD_ID:
      return isSetUpdatedTimestamp();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case CHANNELID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ENTRYPAGEURL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.entryPageUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DESCRIPTIONTEXT_FIELD_ID:
            if (field.type == TType.STRING) {
              this.descriptionText = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PROVIDER_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.provider = new ChannelProvider();
              this.provider.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PUBLICTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.publicType = iprot.readI32();
              this.__isset_publicType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ICONIMAGE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.iconImage = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PERMISSIONS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list36 = iprot.readListBegin();
                this.permissions = new List< String>();
                for( _i37 in 0 ... _list36.size)
                {
                  var _elem38 : String;
                  _elem38 = iprot.readString();
                  this.permissions.add(_elem38);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ICONTHUMBNAILIMAGE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.iconThumbnailImage = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CHANNELCONFIGURATIONS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list39 = iprot.readListBegin();
                this.channelConfigurations = new List< Int>();
                for( _i40 in 0 ... _list39.size)
                {
                  var _elem41 : Int;
                  _elem41 = iprot.readI32();
                  this.channelConfigurations.add(_elem41);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case LCSALLAPIUSABLE_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.lcsAllApiUsable = iprot.readBool();
              this.__isset_lcsAllApiUsable = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ALLOWEDPERMISSIONS_FIELD_ID:
            if (field.type == TType.SET) {
              {
                var _set42 = iprot.readSetBegin();
                this.allowedPermissions = new IntSet();
                for( _i43 in 0 ... _set42.size)
                {
                  var _elem44 : Int;
                  _elem44 = iprot.readI32();
                  this.allowedPermissions.add(_elem44);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CHANNELDOMAINS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list45 = iprot.readListBegin();
                this.channelDomains = new List< ChannelDomain>();
                for( _i46 in 0 ... _list45.size)
                {
                  var _elem47 : ChannelDomain;
                  _elem47 = new ChannelDomain();
                  _elem47.read(iprot);
                  this.channelDomains.add(_elem47);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case UPDATEDTIMESTAMP_FIELD_ID:
            if (field.type == TType.I64) {
              this.updatedTimestamp = iprot.readI64();
              this.__isset_updatedTimestamp = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.entryPageUrl != null) {
        oprot.writeFieldBegin(ENTRY_PAGE_URL_FIELD_DESC);
        oprot.writeString(this.entryPageUrl);
        oprot.writeFieldEnd();
      }
      if (this.descriptionText != null) {
        oprot.writeFieldBegin(DESCRIPTION_TEXT_FIELD_DESC);
        oprot.writeString(this.descriptionText);
        oprot.writeFieldEnd();
      }
      if (this.provider != null) {
        oprot.writeFieldBegin(PROVIDER_FIELD_DESC);
        this.provider.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PUBLIC_TYPE_FIELD_DESC);
      oprot.writeI32(this.publicType);
      oprot.writeFieldEnd();
      if (this.iconImage != null) {
        oprot.writeFieldBegin(ICON_IMAGE_FIELD_DESC);
        oprot.writeString(this.iconImage);
        oprot.writeFieldEnd();
      }
      if (this.permissions != null) {
        oprot.writeFieldBegin(PERMISSIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.permissions.length));
          for( elem48 in this.permissions)
          {
            oprot.writeString(elem48);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.iconThumbnailImage != null) {
        oprot.writeFieldBegin(ICON_THUMBNAIL_IMAGE_FIELD_DESC);
        oprot.writeString(this.iconThumbnailImage);
        oprot.writeFieldEnd();
      }
      if (this.channelConfigurations != null) {
        oprot.writeFieldBegin(CHANNEL_CONFIGURATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.channelConfigurations.length));
          for( elem49 in this.channelConfigurations)
          {
            oprot.writeI32(elem49);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LCS_ALL_API_USABLE_FIELD_DESC);
      oprot.writeBool(this.lcsAllApiUsable);
      oprot.writeFieldEnd();
      if (this.allowedPermissions != null) {
        oprot.writeFieldBegin(ALLOWED_PERMISSIONS_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.I32, this.allowedPermissions.size));
          for( elem50 in this.allowedPermissions.toArray())
          {
            oprot.writeI32(elem50);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.channelDomains != null) {
        oprot.writeFieldBegin(CHANNEL_DOMAINS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.channelDomains.length));
          for( elem51 in this.channelDomains)
          {
            elem51.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATED_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(this.updatedTimestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "ChannelInfo(";
    var first : Bool = true;

    ret += "channelId:";
    if (this.channelId == null) {
      ret += "null";
    } else {
      ret += this.channelId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "name:";
    if (this.name == null) {
      ret += "null";
    } else {
      ret += this.name;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "entryPageUrl:";
    if (this.entryPageUrl == null) {
      ret += "null";
    } else {
      ret += this.entryPageUrl;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "descriptionText:";
    if (this.descriptionText == null) {
      ret += "null";
    } else {
      ret += this.descriptionText;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "provider:";
    if (this.provider == null) {
      ret += "null";
    } else {
      ret += this.provider;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "publicType:";
    var publicType_name : String = .PublicType.VALUES_TO_NAMES[this.publicType];
    if (publicType_name != null) {
      ret += publicType_name;
      ret += " (";
    }
    ret += this.publicType;
    if (publicType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "iconImage:";
    if (this.iconImage == null) {
      ret += "null";
    } else {
      ret += this.iconImage;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "permissions:";
    if (this.permissions == null) {
      ret += "null";
    } else {
      ret += this.permissions;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "iconThumbnailImage:";
    if (this.iconThumbnailImage == null) {
      ret += "null";
    } else {
      ret += this.iconThumbnailImage;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "channelConfigurations:";
    if (this.channelConfigurations == null) {
      ret += "null";
    } else {
      ret += this.channelConfigurations;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "lcsAllApiUsable:";
    ret += this.lcsAllApiUsable;
    first = false;
    if (!first) ret +=  ", ";
    ret += "allowedPermissions:";
    if (this.allowedPermissions == null) {
      ret += "null";
    } else {
      ret += this.allowedPermissions;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "channelDomains:";
    if (this.channelDomains == null) {
      ret += "null";
    } else {
      ret += this.channelDomains;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "updatedTimestamp:";
    ret += this.updatedTimestamp;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetPublicType() && !.PublicType.VALID_VALUES.contains(publicType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'publicType' has been assigned the invalid value " + publicType);
    }
  }

}

