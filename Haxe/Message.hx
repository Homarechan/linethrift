/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class Message implements TBase {
  
  static var STRUCT_DESC = { new TStruct("Message"); };
  static var _FROM_FIELD_DESC = { new TField("_from", TType.STRING, 1); };
  static var DISPLAY_NAME_FIELD_DESC = { new TField("displayName", TType.STRING, 99); };
  static var PICTURE_PATH_FIELD_DESC = { new TField("picturePath", TType.STRING, 98); };
  static var TYPE_FIELD_DESC = { new TField("type", TType.STRING, 97); };
  static var PERSON_FIELD_DESC = { new TField("person", TType.STRING, 96); };
  static var PERSON2_FIELD_DESC = { new TField("person2", TType.STRING, 95); };
  static var PERSON_NAME_FIELD_DESC = { new TField("personName", TType.STRING, 94); };
  static var PERSON_NAME2_FIELD_DESC = { new TField("personName2", TType.STRING, 93); };
  static var TO_FIELD_DESC = { new TField("to", TType.STRING, 2); };
  static var TO_TYPE_FIELD_DESC = { new TField("toType", TType.I32, 3); };
  static var ID_FIELD_DESC = { new TField("id", TType.STRING, 4); };
  static var CREATED_TIME_FIELD_DESC = { new TField("createdTime", TType.I64, 5); };
  static var DELIVERED_TIME_FIELD_DESC = { new TField("deliveredTime", TType.I64, 6); };
  static var TEXT_FIELD_DESC = { new TField("text", TType.STRING, 10); };
  static var LOCATION_FIELD_DESC = { new TField("location", TType.STRUCT, 11); };
  static var HAS_CONTENT_FIELD_DESC = { new TField("hasContent", TType.BOOL, 14); };
  static var CONTENT_TYPE_FIELD_DESC = { new TField("contentType", TType.I32, 15); };
  static var CONTENT_PREVIEW_FIELD_DESC = { new TField("contentPreview", TType.STRING, 17); };
  static var CONTENT_METADATA_FIELD_DESC = { new TField("contentMetadata", TType.MAP, 18); };
  static var SESSION_ID_FIELD_DESC = { new TField("sessionId", TType.BYTE, 19); };
  static var CHUNKS_FIELD_DESC = { new TField("chunks", TType.LIST, 20); };
  static var RELATED_MESSAGE_ID_FIELD_DESC = { new TField("relatedMessageId", TType.STRING, 21); };
  static var MESSAGE_RELATION_TYPE_FIELD_DESC = { new TField("messageRelationType", TType.I32, 22); };
  static var READ_COUNT_FIELD_DESC = { new TField("readCount", TType.I32, 23); };
  static var RELATED_MESSAGE_SERVICE_CODE_FIELD_DESC = { new TField("relatedMessageServiceCode", TType.I32, 24); };

  @:isVar
  public var _from(get,set) : String;
  @:isVar
  public var displayName(get,set) : String;
  @:isVar
  public var picturePath(get,set) : String;
  @:isVar
  public var type(get,set) : String;
  @:isVar
  public var person(get,set) : String;
  @:isVar
  public var person2(get,set) : String;
  @:isVar
  public var personName(get,set) : String;
  @:isVar
  public var personName2(get,set) : String;
  @:isVar
  public var to(get,set) : String;
  @:isVar
  public var toType(get,set) : Int;
  @:isVar
  public var id(get,set) : String;
  @:isVar
  public var createdTime(get,set) : haxe.Int64;
  @:isVar
  public var deliveredTime(get,set) : haxe.Int64;
  @:isVar
  public var text(get,set) : String;
  @:isVar
  public var location(get,set) : Location;
  @:isVar
  public var hasContent(get,set) : Bool;
  @:isVar
  public var contentType(get,set) : Int;
  @:isVar
  public var contentPreview(get,set) : haxe.io.Bytes;
  @:isVar
  public var contentMetadata(get,set) : StringMap< String>;
  @:isVar
  public var sessionId(get,set) : haxe.Int32;
  @:isVar
  public var chunks(get,set) : List< haxe.io.Bytes>;
  @:isVar
  public var relatedMessageId(get,set) : String;
  @:isVar
  public var messageRelationType(get,set) : Int;
  @:isVar
  public var readCount(get,set) : haxe.Int32;
  @:isVar
  public var relatedMessageServiceCode(get,set) : Int;

  inline static var _FROM_FIELD_ID : Int = 1;
  inline static var DISPLAYNAME_FIELD_ID : Int = 99;
  inline static var PICTUREPATH_FIELD_ID : Int = 98;
  inline static var TYPE_FIELD_ID : Int = 97;
  inline static var PERSON_FIELD_ID : Int = 96;
  inline static var PERSON2_FIELD_ID : Int = 95;
  inline static var PERSONNAME_FIELD_ID : Int = 94;
  inline static var PERSONNAME2_FIELD_ID : Int = 93;
  inline static var TO_FIELD_ID : Int = 2;
  inline static var TOTYPE_FIELD_ID : Int = 3;
  inline static var ID_FIELD_ID : Int = 4;
  inline static var CREATEDTIME_FIELD_ID : Int = 5;
  inline static var DELIVEREDTIME_FIELD_ID : Int = 6;
  inline static var TEXT_FIELD_ID : Int = 10;
  inline static var LOCATION_FIELD_ID : Int = 11;
  inline static var HASCONTENT_FIELD_ID : Int = 14;
  inline static var CONTENTTYPE_FIELD_ID : Int = 15;
  inline static var CONTENTPREVIEW_FIELD_ID : Int = 17;
  inline static var CONTENTMETADATA_FIELD_ID : Int = 18;
  inline static var SESSIONID_FIELD_ID : Int = 19;
  inline static var CHUNKS_FIELD_ID : Int = 20;
  inline static var RELATEDMESSAGEID_FIELD_ID : Int = 21;
  inline static var MESSAGERELATIONTYPE_FIELD_ID : Int = 22;
  inline static var READCOUNT_FIELD_ID : Int = 23;
  inline static var RELATEDMESSAGESERVICECODE_FIELD_ID : Int = 24;

  private var __isset_toType : Bool = false;
  private var __isset_createdTime : Bool = false;
  private var __isset_deliveredTime : Bool = false;
  private var __isset_hasContent : Bool = false;
  private var __isset_contentType : Bool = false;
  private var __isset_sessionId : Bool = false;
  private var __isset_messageRelationType : Bool = false;
  private var __isset_readCount : Bool = false;
  private var __isset_relatedMessageServiceCode : Bool = false;

  public function new() {
  }

  public function get__from() : String {
    return this._from;
  }

  public function set__from(_from:String) : String {
    this._from = _from;
    return this._from;
  }

  public function unset_from() : Void {
    this._from = null;
  }

  // Returns true if field _from is set (has been assigned a value) and false otherwise
  public function isSet_from() : Bool {
    return this._from != null;
  }

  public function get_displayName() : String {
    return this.displayName;
  }

  public function set_displayName(displayName:String) : String {
    this.displayName = displayName;
    return this.displayName;
  }

  public function unsetDisplayName() : Void {
    this.displayName = null;
  }

  // Returns true if field displayName is set (has been assigned a value) and false otherwise
  public function isSetDisplayName() : Bool {
    return this.displayName != null;
  }

  public function get_picturePath() : String {
    return this.picturePath;
  }

  public function set_picturePath(picturePath:String) : String {
    this.picturePath = picturePath;
    return this.picturePath;
  }

  public function unsetPicturePath() : Void {
    this.picturePath = null;
  }

  // Returns true if field picturePath is set (has been assigned a value) and false otherwise
  public function isSetPicturePath() : Bool {
    return this.picturePath != null;
  }

  public function get_type() : String {
    return this.type;
  }

  public function set_type(type:String) : String {
    this.type = type;
    return this.type;
  }

  public function unsetType() : Void {
    this.type = null;
  }

  // Returns true if field type is set (has been assigned a value) and false otherwise
  public function isSetType() : Bool {
    return this.type != null;
  }

  public function get_person() : String {
    return this.person;
  }

  public function set_person(person:String) : String {
    this.person = person;
    return this.person;
  }

  public function unsetPerson() : Void {
    this.person = null;
  }

  // Returns true if field person is set (has been assigned a value) and false otherwise
  public function isSetPerson() : Bool {
    return this.person != null;
  }

  public function get_person2() : String {
    return this.person2;
  }

  public function set_person2(person2:String) : String {
    this.person2 = person2;
    return this.person2;
  }

  public function unsetPerson2() : Void {
    this.person2 = null;
  }

  // Returns true if field person2 is set (has been assigned a value) and false otherwise
  public function isSetPerson2() : Bool {
    return this.person2 != null;
  }

  public function get_personName() : String {
    return this.personName;
  }

  public function set_personName(personName:String) : String {
    this.personName = personName;
    return this.personName;
  }

  public function unsetPersonName() : Void {
    this.personName = null;
  }

  // Returns true if field personName is set (has been assigned a value) and false otherwise
  public function isSetPersonName() : Bool {
    return this.personName != null;
  }

  public function get_personName2() : String {
    return this.personName2;
  }

  public function set_personName2(personName2:String) : String {
    this.personName2 = personName2;
    return this.personName2;
  }

  public function unsetPersonName2() : Void {
    this.personName2 = null;
  }

  // Returns true if field personName2 is set (has been assigned a value) and false otherwise
  public function isSetPersonName2() : Bool {
    return this.personName2 != null;
  }

  public function get_to() : String {
    return this.to;
  }

  public function set_to(to:String) : String {
    this.to = to;
    return this.to;
  }

  public function unsetTo() : Void {
    this.to = null;
  }

  // Returns true if field to is set (has been assigned a value) and false otherwise
  public function isSetTo() : Bool {
    return this.to != null;
  }

  public function get_toType() : Int {
    return this.toType;
  }

  public function set_toType(toType:Int) : Int {
    this.toType = toType;
    this.__isset_toType = true;
    return this.toType;
  }

  public function unsetToType() : Void {
    this.__isset_toType = false;
  }

  // Returns true if field toType is set (has been assigned a value) and false otherwise
  public function isSetToType() : Bool {
    return this.__isset_toType;
  }

  public function get_id() : String {
    return this.id;
  }

  public function set_id(id:String) : String {
    this.id = id;
    return this.id;
  }

  public function unsetId() : Void {
    this.id = null;
  }

  // Returns true if field id is set (has been assigned a value) and false otherwise
  public function isSetId() : Bool {
    return this.id != null;
  }

  public function get_createdTime() : haxe.Int64 {
    return this.createdTime;
  }

  public function set_createdTime(createdTime:haxe.Int64) : haxe.Int64 {
    this.createdTime = createdTime;
    this.__isset_createdTime = true;
    return this.createdTime;
  }

  public function unsetCreatedTime() : Void {
    this.__isset_createdTime = false;
  }

  // Returns true if field createdTime is set (has been assigned a value) and false otherwise
  public function isSetCreatedTime() : Bool {
    return this.__isset_createdTime;
  }

  public function get_deliveredTime() : haxe.Int64 {
    return this.deliveredTime;
  }

  public function set_deliveredTime(deliveredTime:haxe.Int64) : haxe.Int64 {
    this.deliveredTime = deliveredTime;
    this.__isset_deliveredTime = true;
    return this.deliveredTime;
  }

  public function unsetDeliveredTime() : Void {
    this.__isset_deliveredTime = false;
  }

  // Returns true if field deliveredTime is set (has been assigned a value) and false otherwise
  public function isSetDeliveredTime() : Bool {
    return this.__isset_deliveredTime;
  }

  public function get_text() : String {
    return this.text;
  }

  public function set_text(text:String) : String {
    this.text = text;
    return this.text;
  }

  public function unsetText() : Void {
    this.text = null;
  }

  // Returns true if field text is set (has been assigned a value) and false otherwise
  public function isSetText() : Bool {
    return this.text != null;
  }

  public function get_location() : Location {
    return this.location;
  }

  public function set_location(location:Location) : Location {
    this.location = location;
    return this.location;
  }

  public function unsetLocation() : Void {
    this.location = null;
  }

  // Returns true if field location is set (has been assigned a value) and false otherwise
  public function isSetLocation() : Bool {
    return this.location != null;
  }

  public function get_hasContent() : Bool {
    return this.hasContent;
  }

  public function set_hasContent(hasContent:Bool) : Bool {
    this.hasContent = hasContent;
    this.__isset_hasContent = true;
    return this.hasContent;
  }

  public function unsetHasContent() : Void {
    this.__isset_hasContent = false;
  }

  // Returns true if field hasContent is set (has been assigned a value) and false otherwise
  public function isSetHasContent() : Bool {
    return this.__isset_hasContent;
  }

  public function get_contentType() : Int {
    return this.contentType;
  }

  public function set_contentType(contentType:Int) : Int {
    this.contentType = contentType;
    this.__isset_contentType = true;
    return this.contentType;
  }

  public function unsetContentType() : Void {
    this.__isset_contentType = false;
  }

  // Returns true if field contentType is set (has been assigned a value) and false otherwise
  public function isSetContentType() : Bool {
    return this.__isset_contentType;
  }

  public function get_contentPreview() : haxe.io.Bytes {
    return this.contentPreview;
  }

  public function set_contentPreview(contentPreview:haxe.io.Bytes) : haxe.io.Bytes {
    this.contentPreview = contentPreview;
    return this.contentPreview;
  }

  public function unsetContentPreview() : Void {
    this.contentPreview = null;
  }

  // Returns true if field contentPreview is set (has been assigned a value) and false otherwise
  public function isSetContentPreview() : Bool {
    return this.contentPreview != null;
  }

  public function get_contentMetadata() : StringMap< String> {
    return this.contentMetadata;
  }

  public function set_contentMetadata(contentMetadata:StringMap< String>) : StringMap< String> {
    this.contentMetadata = contentMetadata;
    return this.contentMetadata;
  }

  public function unsetContentMetadata() : Void {
    this.contentMetadata = null;
  }

  // Returns true if field contentMetadata is set (has been assigned a value) and false otherwise
  public function isSetContentMetadata() : Bool {
    return this.contentMetadata != null;
  }

  public function get_sessionId() : haxe.Int32 {
    return this.sessionId;
  }

  public function set_sessionId(sessionId:haxe.Int32) : haxe.Int32 {
    this.sessionId = sessionId;
    this.__isset_sessionId = true;
    return this.sessionId;
  }

  public function unsetSessionId() : Void {
    this.__isset_sessionId = false;
  }

  // Returns true if field sessionId is set (has been assigned a value) and false otherwise
  public function isSetSessionId() : Bool {
    return this.__isset_sessionId;
  }

  public function get_chunks() : List< haxe.io.Bytes> {
    return this.chunks;
  }

  public function set_chunks(chunks:List< haxe.io.Bytes>) : List< haxe.io.Bytes> {
    this.chunks = chunks;
    return this.chunks;
  }

  public function unsetChunks() : Void {
    this.chunks = null;
  }

  // Returns true if field chunks is set (has been assigned a value) and false otherwise
  public function isSetChunks() : Bool {
    return this.chunks != null;
  }

  public function get_relatedMessageId() : String {
    return this.relatedMessageId;
  }

  public function set_relatedMessageId(relatedMessageId:String) : String {
    this.relatedMessageId = relatedMessageId;
    return this.relatedMessageId;
  }

  public function unsetRelatedMessageId() : Void {
    this.relatedMessageId = null;
  }

  // Returns true if field relatedMessageId is set (has been assigned a value) and false otherwise
  public function isSetRelatedMessageId() : Bool {
    return this.relatedMessageId != null;
  }

  public function get_messageRelationType() : Int {
    return this.messageRelationType;
  }

  public function set_messageRelationType(messageRelationType:Int) : Int {
    this.messageRelationType = messageRelationType;
    this.__isset_messageRelationType = true;
    return this.messageRelationType;
  }

  public function unsetMessageRelationType() : Void {
    this.__isset_messageRelationType = false;
  }

  // Returns true if field messageRelationType is set (has been assigned a value) and false otherwise
  public function isSetMessageRelationType() : Bool {
    return this.__isset_messageRelationType;
  }

  public function get_readCount() : haxe.Int32 {
    return this.readCount;
  }

  public function set_readCount(readCount:haxe.Int32) : haxe.Int32 {
    this.readCount = readCount;
    this.__isset_readCount = true;
    return this.readCount;
  }

  public function unsetReadCount() : Void {
    this.__isset_readCount = false;
  }

  // Returns true if field readCount is set (has been assigned a value) and false otherwise
  public function isSetReadCount() : Bool {
    return this.__isset_readCount;
  }

  public function get_relatedMessageServiceCode() : Int {
    return this.relatedMessageServiceCode;
  }

  public function set_relatedMessageServiceCode(relatedMessageServiceCode:Int) : Int {
    this.relatedMessageServiceCode = relatedMessageServiceCode;
    this.__isset_relatedMessageServiceCode = true;
    return this.relatedMessageServiceCode;
  }

  public function unsetRelatedMessageServiceCode() : Void {
    this.__isset_relatedMessageServiceCode = false;
  }

  // Returns true if field relatedMessageServiceCode is set (has been assigned a value) and false otherwise
  public function isSetRelatedMessageServiceCode() : Bool {
    return this.__isset_relatedMessageServiceCode;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case _FROM_FIELD_ID:
      if (value == null) {
        unset_from();
      } else {
        this._from = value;
      }

    case DISPLAYNAME_FIELD_ID:
      if (value == null) {
        unsetDisplayName();
      } else {
        this.displayName = value;
      }

    case PICTUREPATH_FIELD_ID:
      if (value == null) {
        unsetPicturePath();
      } else {
        this.picturePath = value;
      }

    case TYPE_FIELD_ID:
      if (value == null) {
        unsetType();
      } else {
        this.type = value;
      }

    case PERSON_FIELD_ID:
      if (value == null) {
        unsetPerson();
      } else {
        this.person = value;
      }

    case PERSON2_FIELD_ID:
      if (value == null) {
        unsetPerson2();
      } else {
        this.person2 = value;
      }

    case PERSONNAME_FIELD_ID:
      if (value == null) {
        unsetPersonName();
      } else {
        this.personName = value;
      }

    case PERSONNAME2_FIELD_ID:
      if (value == null) {
        unsetPersonName2();
      } else {
        this.personName2 = value;
      }

    case TO_FIELD_ID:
      if (value == null) {
        unsetTo();
      } else {
        this.to = value;
      }

    case TOTYPE_FIELD_ID:
      if (value == null) {
        unsetToType();
      } else {
        this.toType = value;
      }

    case ID_FIELD_ID:
      if (value == null) {
        unsetId();
      } else {
        this.id = value;
      }

    case CREATEDTIME_FIELD_ID:
      if (value == null) {
        unsetCreatedTime();
      } else {
        this.createdTime = value;
      }

    case DELIVEREDTIME_FIELD_ID:
      if (value == null) {
        unsetDeliveredTime();
      } else {
        this.deliveredTime = value;
      }

    case TEXT_FIELD_ID:
      if (value == null) {
        unsetText();
      } else {
        this.text = value;
      }

    case LOCATION_FIELD_ID:
      if (value == null) {
        unsetLocation();
      } else {
        this.location = value;
      }

    case HASCONTENT_FIELD_ID:
      if (value == null) {
        unsetHasContent();
      } else {
        this.hasContent = value;
      }

    case CONTENTTYPE_FIELD_ID:
      if (value == null) {
        unsetContentType();
      } else {
        this.contentType = value;
      }

    case CONTENTPREVIEW_FIELD_ID:
      if (value == null) {
        unsetContentPreview();
      } else {
        this.contentPreview = value;
      }

    case CONTENTMETADATA_FIELD_ID:
      if (value == null) {
        unsetContentMetadata();
      } else {
        this.contentMetadata = value;
      }

    case SESSIONID_FIELD_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        this.sessionId = value;
      }

    case CHUNKS_FIELD_ID:
      if (value == null) {
        unsetChunks();
      } else {
        this.chunks = value;
      }

    case RELATEDMESSAGEID_FIELD_ID:
      if (value == null) {
        unsetRelatedMessageId();
      } else {
        this.relatedMessageId = value;
      }

    case MESSAGERELATIONTYPE_FIELD_ID:
      if (value == null) {
        unsetMessageRelationType();
      } else {
        this.messageRelationType = value;
      }

    case READCOUNT_FIELD_ID:
      if (value == null) {
        unsetReadCount();
      } else {
        this.readCount = value;
      }

    case RELATEDMESSAGESERVICECODE_FIELD_ID:
      if (value == null) {
        unsetRelatedMessageServiceCode();
      } else {
        this.relatedMessageServiceCode = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case _FROM_FIELD_ID:
      return this._from;
    case DISPLAYNAME_FIELD_ID:
      return this.displayName;
    case PICTUREPATH_FIELD_ID:
      return this.picturePath;
    case TYPE_FIELD_ID:
      return this.type;
    case PERSON_FIELD_ID:
      return this.person;
    case PERSON2_FIELD_ID:
      return this.person2;
    case PERSONNAME_FIELD_ID:
      return this.personName;
    case PERSONNAME2_FIELD_ID:
      return this.personName2;
    case TO_FIELD_ID:
      return this.to;
    case TOTYPE_FIELD_ID:
      return this.toType;
    case ID_FIELD_ID:
      return this.id;
    case CREATEDTIME_FIELD_ID:
      return this.createdTime;
    case DELIVEREDTIME_FIELD_ID:
      return this.deliveredTime;
    case TEXT_FIELD_ID:
      return this.text;
    case LOCATION_FIELD_ID:
      return this.location;
    case HASCONTENT_FIELD_ID:
      return this.hasContent;
    case CONTENTTYPE_FIELD_ID:
      return this.contentType;
    case CONTENTPREVIEW_FIELD_ID:
      return this.contentPreview;
    case CONTENTMETADATA_FIELD_ID:
      return this.contentMetadata;
    case SESSIONID_FIELD_ID:
      return this.sessionId;
    case CHUNKS_FIELD_ID:
      return this.chunks;
    case RELATEDMESSAGEID_FIELD_ID:
      return this.relatedMessageId;
    case MESSAGERELATIONTYPE_FIELD_ID:
      return this.messageRelationType;
    case READCOUNT_FIELD_ID:
      return this.readCount;
    case RELATEDMESSAGESERVICECODE_FIELD_ID:
      return this.relatedMessageServiceCode;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case _FROM_FIELD_ID:
      return isSet_from();
    case DISPLAYNAME_FIELD_ID:
      return isSetDisplayName();
    case PICTUREPATH_FIELD_ID:
      return isSetPicturePath();
    case TYPE_FIELD_ID:
      return isSetType();
    case PERSON_FIELD_ID:
      return isSetPerson();
    case PERSON2_FIELD_ID:
      return isSetPerson2();
    case PERSONNAME_FIELD_ID:
      return isSetPersonName();
    case PERSONNAME2_FIELD_ID:
      return isSetPersonName2();
    case TO_FIELD_ID:
      return isSetTo();
    case TOTYPE_FIELD_ID:
      return isSetToType();
    case ID_FIELD_ID:
      return isSetId();
    case CREATEDTIME_FIELD_ID:
      return isSetCreatedTime();
    case DELIVEREDTIME_FIELD_ID:
      return isSetDeliveredTime();
    case TEXT_FIELD_ID:
      return isSetText();
    case LOCATION_FIELD_ID:
      return isSetLocation();
    case HASCONTENT_FIELD_ID:
      return isSetHasContent();
    case CONTENTTYPE_FIELD_ID:
      return isSetContentType();
    case CONTENTPREVIEW_FIELD_ID:
      return isSetContentPreview();
    case CONTENTMETADATA_FIELD_ID:
      return isSetContentMetadata();
    case SESSIONID_FIELD_ID:
      return isSetSessionId();
    case CHUNKS_FIELD_ID:
      return isSetChunks();
    case RELATEDMESSAGEID_FIELD_ID:
      return isSetRelatedMessageId();
    case MESSAGERELATIONTYPE_FIELD_ID:
      return isSetMessageRelationType();
    case READCOUNT_FIELD_ID:
      return isSetReadCount();
    case RELATEDMESSAGESERVICECODE_FIELD_ID:
      return isSetRelatedMessageServiceCode();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case _FROM_FIELD_ID:
            if (field.type == TType.STRING) {
              this._from = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DISPLAYNAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.displayName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PICTUREPATH_FIELD_ID:
            if (field.type == TType.STRING) {
              this.picturePath = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TYPE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.type = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PERSON_FIELD_ID:
            if (field.type == TType.STRING) {
              this.person = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PERSON2_FIELD_ID:
            if (field.type == TType.STRING) {
              this.person2 = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PERSONNAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.personName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PERSONNAME2_FIELD_ID:
            if (field.type == TType.STRING) {
              this.personName2 = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TO_FIELD_ID:
            if (field.type == TType.STRING) {
              this.to = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TOTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.toType = iprot.readI32();
              this.__isset_toType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.id = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CREATEDTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.createdTime = iprot.readI64();
              this.__isset_createdTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DELIVEREDTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.deliveredTime = iprot.readI64();
              this.__isset_deliveredTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TEXT_FIELD_ID:
            if (field.type == TType.STRING) {
              this.text = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case LOCATION_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.location = new Location();
              this.location.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case HASCONTENT_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.hasContent = iprot.readBool();
              this.__isset_hasContent = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CONTENTTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.contentType = iprot.readI32();
              this.__isset_contentType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CONTENTPREVIEW_FIELD_ID:
            if (field.type == TType.STRING) {
              this.contentPreview = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CONTENTMETADATA_FIELD_ID:
            if (field.type == TType.MAP) {
              {
                var _map271 = iprot.readMapBegin();
                this.contentMetadata = new StringMap< String>();
                for( _i272 in 0 ... _map271.size)
                {
                  var _key273 : String;
                  var _val274 : String;
                  _key273 = iprot.readString();
                  _val274 = iprot.readString();
                  this.contentMetadata.set( _key273, _val274);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SESSIONID_FIELD_ID:
            if (field.type == TType.BYTE) {
              this.sessionId = iprot.readByte();
              this.__isset_sessionId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CHUNKS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list275 = iprot.readListBegin();
                this.chunks = new List< haxe.io.Bytes>();
                for( _i276 in 0 ... _list275.size)
                {
                  var _elem277 : haxe.io.Bytes;
                  _elem277 = iprot.readBinary();
                  this.chunks.add(_elem277);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case RELATEDMESSAGEID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.relatedMessageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MESSAGERELATIONTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.messageRelationType = iprot.readI32();
              this.__isset_messageRelationType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case READCOUNT_FIELD_ID:
            if (field.type == TType.I32) {
              this.readCount = iprot.readI32();
              this.__isset_readCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case RELATEDMESSAGESERVICECODE_FIELD_ID:
            if (field.type == TType.I32) {
              this.relatedMessageServiceCode = iprot.readI32();
              this.__isset_relatedMessageServiceCode = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this._from != null) {
        oprot.writeFieldBegin(_FROM_FIELD_DESC);
        oprot.writeString(this._from);
        oprot.writeFieldEnd();
      }
      if (this.to != null) {
        oprot.writeFieldBegin(TO_FIELD_DESC);
        oprot.writeString(this.to);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TO_TYPE_FIELD_DESC);
      oprot.writeI32(this.toType);
      oprot.writeFieldEnd();
      if (this.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_TIME_FIELD_DESC);
      oprot.writeI64(this.createdTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELIVERED_TIME_FIELD_DESC);
      oprot.writeI64(this.deliveredTime);
      oprot.writeFieldEnd();
      if (this.text != null) {
        oprot.writeFieldBegin(TEXT_FIELD_DESC);
        oprot.writeString(this.text);
        oprot.writeFieldEnd();
      }
      if (this.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        this.location.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HAS_CONTENT_FIELD_DESC);
      oprot.writeBool(this.hasContent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
      oprot.writeI32(this.contentType);
      oprot.writeFieldEnd();
      if (this.contentPreview != null) {
        oprot.writeFieldBegin(CONTENT_PREVIEW_FIELD_DESC);
        oprot.writeBinary(this.contentPreview);
        oprot.writeFieldEnd();
      }
      if (this.contentMetadata != null) {
        oprot.writeFieldBegin(CONTENT_METADATA_FIELD_DESC);
        {
          var _sizeCounter279 : Int = 0;
          for( _key278 in this.contentMetadata) {
            _sizeCounter279++;
          }
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _sizeCounter279));
          for( elem280 in this.contentMetadata.keys())
          {
            oprot.writeString(elem280);
            oprot.writeString(this.contentMetadata.get(elem280));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeByte(this.sessionId);
      oprot.writeFieldEnd();
      if (this.chunks != null) {
        oprot.writeFieldBegin(CHUNKS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.chunks.length));
          for( elem281 in this.chunks)
          {
            oprot.writeBinary(elem281);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.relatedMessageId != null) {
        oprot.writeFieldBegin(RELATED_MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.relatedMessageId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MESSAGE_RELATION_TYPE_FIELD_DESC);
      oprot.writeI32(this.messageRelationType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(READ_COUNT_FIELD_DESC);
      oprot.writeI32(this.readCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RELATED_MESSAGE_SERVICE_CODE_FIELD_DESC);
      oprot.writeI32(this.relatedMessageServiceCode);
      oprot.writeFieldEnd();
      if (this.personName2 != null) {
        oprot.writeFieldBegin(PERSON_NAME2_FIELD_DESC);
        oprot.writeString(this.personName2);
        oprot.writeFieldEnd();
      }
      if (this.personName != null) {
        oprot.writeFieldBegin(PERSON_NAME_FIELD_DESC);
        oprot.writeString(this.personName);
        oprot.writeFieldEnd();
      }
      if (this.person2 != null) {
        oprot.writeFieldBegin(PERSON2_FIELD_DESC);
        oprot.writeString(this.person2);
        oprot.writeFieldEnd();
      }
      if (this.person != null) {
        oprot.writeFieldBegin(PERSON_FIELD_DESC);
        oprot.writeString(this.person);
        oprot.writeFieldEnd();
      }
      if (this.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(this.type);
        oprot.writeFieldEnd();
      }
      if (this.picturePath != null) {
        oprot.writeFieldBegin(PICTURE_PATH_FIELD_DESC);
        oprot.writeString(this.picturePath);
        oprot.writeFieldEnd();
      }
      if (this.displayName != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(this.displayName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "Message(";
    var first : Bool = true;

    ret += "_from:";
    if (this._from == null) {
      ret += "null";
    } else {
      ret += this._from;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "displayName:";
    if (this.displayName == null) {
      ret += "null";
    } else {
      ret += this.displayName;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "picturePath:";
    if (this.picturePath == null) {
      ret += "null";
    } else {
      ret += this.picturePath;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "type:";
    if (this.type == null) {
      ret += "null";
    } else {
      ret += this.type;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "person:";
    if (this.person == null) {
      ret += "null";
    } else {
      ret += this.person;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "person2:";
    if (this.person2 == null) {
      ret += "null";
    } else {
      ret += this.person2;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "personName:";
    if (this.personName == null) {
      ret += "null";
    } else {
      ret += this.personName;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "personName2:";
    if (this.personName2 == null) {
      ret += "null";
    } else {
      ret += this.personName2;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "to:";
    if (this.to == null) {
      ret += "null";
    } else {
      ret += this.to;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "toType:";
    var toType_name : String = .MIDType.VALUES_TO_NAMES[this.toType];
    if (toType_name != null) {
      ret += toType_name;
      ret += " (";
    }
    ret += this.toType;
    if (toType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "id:";
    if (this.id == null) {
      ret += "null";
    } else {
      ret += this.id;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "createdTime:";
    ret += this.createdTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "deliveredTime:";
    ret += this.deliveredTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "text:";
    if (this.text == null) {
      ret += "null";
    } else {
      ret += this.text;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "location:";
    if (this.location == null) {
      ret += "null";
    } else {
      ret += this.location;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "hasContent:";
    ret += this.hasContent;
    first = false;
    if (!first) ret +=  ", ";
    ret += "contentType:";
    var contentType_name : String = .ContentType.VALUES_TO_NAMES[this.contentType];
    if (contentType_name != null) {
      ret += contentType_name;
      ret += " (";
    }
    ret += this.contentType;
    if (contentType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "contentPreview:";
    if (this.contentPreview == null) {
      ret += "null";
    } else {
        ret += "BINARY";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "contentMetadata:";
    if (this.contentMetadata == null) {
      ret += "null";
    } else {
      ret += this.contentMetadata;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "sessionId:";
    ret += this.sessionId;
    first = false;
    if (!first) ret +=  ", ";
    ret += "chunks:";
    if (this.chunks == null) {
      ret += "null";
    } else {
      ret += this.chunks;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "relatedMessageId:";
    if (this.relatedMessageId == null) {
      ret += "null";
    } else {
      ret += this.relatedMessageId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "messageRelationType:";
    var messageRelationType_name : String = .MessageRelationType.VALUES_TO_NAMES[this.messageRelationType];
    if (messageRelationType_name != null) {
      ret += messageRelationType_name;
      ret += " (";
    }
    ret += this.messageRelationType;
    if (messageRelationType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "readCount:";
    ret += this.readCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "relatedMessageServiceCode:";
    var relatedMessageServiceCode_name : String = .ServiceCode.VALUES_TO_NAMES[this.relatedMessageServiceCode];
    if (relatedMessageServiceCode_name != null) {
      ret += relatedMessageServiceCode_name;
      ret += " (";
    }
    ret += this.relatedMessageServiceCode;
    if (relatedMessageServiceCode_name != null) {
      ret += ")";
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetToType() && !.MIDType.VALID_VALUES.contains(toType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'toType' has been assigned the invalid value " + toType);
    }
    if (isSetContentType() && !.ContentType.VALID_VALUES.contains(contentType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'contentType' has been assigned the invalid value " + contentType);
    }
    if (isSetMessageRelationType() && !.MessageRelationType.VALID_VALUES.contains(messageRelationType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'messageRelationType' has been assigned the invalid value " + messageRelationType);
    }
    if (isSetRelatedMessageServiceCode() && !.ServiceCode.VALID_VALUES.contains(relatedMessageServiceCode)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'relatedMessageServiceCode' has been assigned the invalid value " + relatedMessageServiceCode);
    }
  }

}

