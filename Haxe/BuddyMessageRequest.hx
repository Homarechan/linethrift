/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class BuddyMessageRequest implements TBase {
  
  static var STRUCT_DESC = { new TStruct("BuddyMessageRequest"); };
  static var CONTENT_TYPE_FIELD_DESC = { new TField("contentType", TType.I32, 1); };
  static var TEXT_FIELD_DESC = { new TField("text", TType.STRING, 2); };
  static var LOCATION_FIELD_DESC = { new TField("location", TType.STRUCT, 3); };
  static var CONTENT_FIELD_DESC = { new TField("content", TType.STRING, 4); };
  static var CONTENT_METADATA_FIELD_DESC = { new TField("contentMetadata", TType.MAP, 5); };

  @:isVar
  public var contentType(get,set) : Int;
  @:isVar
  public var text(get,set) : String;
  @:isVar
  public var location(get,set) : Location;
  @:isVar
  public var content(get,set) : haxe.io.Bytes;
  @:isVar
  public var contentMetadata(get,set) : StringMap< String>;

  inline static var CONTENTTYPE_FIELD_ID : Int = 1;
  inline static var TEXT_FIELD_ID : Int = 2;
  inline static var LOCATION_FIELD_ID : Int = 3;
  inline static var CONTENT_FIELD_ID : Int = 4;
  inline static var CONTENTMETADATA_FIELD_ID : Int = 5;

  private var __isset_contentType : Bool = false;

  public function new() {
  }

  public function get_contentType() : Int {
    return this.contentType;
  }

  public function set_contentType(contentType:Int) : Int {
    this.contentType = contentType;
    this.__isset_contentType = true;
    return this.contentType;
  }

  public function unsetContentType() : Void {
    this.__isset_contentType = false;
  }

  // Returns true if field contentType is set (has been assigned a value) and false otherwise
  public function isSetContentType() : Bool {
    return this.__isset_contentType;
  }

  public function get_text() : String {
    return this.text;
  }

  public function set_text(text:String) : String {
    this.text = text;
    return this.text;
  }

  public function unsetText() : Void {
    this.text = null;
  }

  // Returns true if field text is set (has been assigned a value) and false otherwise
  public function isSetText() : Bool {
    return this.text != null;
  }

  public function get_location() : Location {
    return this.location;
  }

  public function set_location(location:Location) : Location {
    this.location = location;
    return this.location;
  }

  public function unsetLocation() : Void {
    this.location = null;
  }

  // Returns true if field location is set (has been assigned a value) and false otherwise
  public function isSetLocation() : Bool {
    return this.location != null;
  }

  public function get_content() : haxe.io.Bytes {
    return this.content;
  }

  public function set_content(content:haxe.io.Bytes) : haxe.io.Bytes {
    this.content = content;
    return this.content;
  }

  public function unsetContent() : Void {
    this.content = null;
  }

  // Returns true if field content is set (has been assigned a value) and false otherwise
  public function isSetContent() : Bool {
    return this.content != null;
  }

  public function get_contentMetadata() : StringMap< String> {
    return this.contentMetadata;
  }

  public function set_contentMetadata(contentMetadata:StringMap< String>) : StringMap< String> {
    this.contentMetadata = contentMetadata;
    return this.contentMetadata;
  }

  public function unsetContentMetadata() : Void {
    this.contentMetadata = null;
  }

  // Returns true if field contentMetadata is set (has been assigned a value) and false otherwise
  public function isSetContentMetadata() : Bool {
    return this.contentMetadata != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case CONTENTTYPE_FIELD_ID:
      if (value == null) {
        unsetContentType();
      } else {
        this.contentType = value;
      }

    case TEXT_FIELD_ID:
      if (value == null) {
        unsetText();
      } else {
        this.text = value;
      }

    case LOCATION_FIELD_ID:
      if (value == null) {
        unsetLocation();
      } else {
        this.location = value;
      }

    case CONTENT_FIELD_ID:
      if (value == null) {
        unsetContent();
      } else {
        this.content = value;
      }

    case CONTENTMETADATA_FIELD_ID:
      if (value == null) {
        unsetContentMetadata();
      } else {
        this.contentMetadata = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case CONTENTTYPE_FIELD_ID:
      return this.contentType;
    case TEXT_FIELD_ID:
      return this.text;
    case LOCATION_FIELD_ID:
      return this.location;
    case CONTENT_FIELD_ID:
      return this.content;
    case CONTENTMETADATA_FIELD_ID:
      return this.contentMetadata;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case CONTENTTYPE_FIELD_ID:
      return isSetContentType();
    case TEXT_FIELD_ID:
      return isSetText();
    case LOCATION_FIELD_ID:
      return isSetLocation();
    case CONTENT_FIELD_ID:
      return isSetContent();
    case CONTENTMETADATA_FIELD_ID:
      return isSetContentMetadata();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case CONTENTTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.contentType = iprot.readI32();
              this.__isset_contentType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TEXT_FIELD_ID:
            if (field.type == TType.STRING) {
              this.text = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case LOCATION_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.location = new Location();
              this.location.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CONTENT_FIELD_ID:
            if (field.type == TType.STRING) {
              this.content = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CONTENTMETADATA_FIELD_ID:
            if (field.type == TType.MAP) {
              {
                var _map64 = iprot.readMapBegin();
                this.contentMetadata = new StringMap< String>();
                for( _i65 in 0 ... _map64.size)
                {
                  var _key66 : String;
                  var _val67 : String;
                  _key66 = iprot.readString();
                  _val67 = iprot.readString();
                  this.contentMetadata.set( _key66, _val67);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
      oprot.writeI32(this.contentType);
      oprot.writeFieldEnd();
      if (this.text != null) {
        oprot.writeFieldBegin(TEXT_FIELD_DESC);
        oprot.writeString(this.text);
        oprot.writeFieldEnd();
      }
      if (this.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        this.location.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeBinary(this.content);
        oprot.writeFieldEnd();
      }
      if (this.contentMetadata != null) {
        oprot.writeFieldBegin(CONTENT_METADATA_FIELD_DESC);
        {
          var _sizeCounter69 : Int = 0;
          for( _key68 in this.contentMetadata) {
            _sizeCounter69++;
          }
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _sizeCounter69));
          for( elem70 in this.contentMetadata.keys())
          {
            oprot.writeString(elem70);
            oprot.writeString(this.contentMetadata.get(elem70));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "BuddyMessageRequest(";
    var first : Bool = true;

    ret += "contentType:";
    var contentType_name : String = .ContentType.VALUES_TO_NAMES[this.contentType];
    if (contentType_name != null) {
      ret += contentType_name;
      ret += " (";
    }
    ret += this.contentType;
    if (contentType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "text:";
    if (this.text == null) {
      ret += "null";
    } else {
      ret += this.text;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "location:";
    if (this.location == null) {
      ret += "null";
    } else {
      ret += this.location;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "content:";
    if (this.content == null) {
      ret += "null";
    } else {
        ret += "BINARY";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "contentMetadata:";
    if (this.contentMetadata == null) {
      ret += "null";
    } else {
      ret += this.contentMetadata;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetContentType() && !.ContentType.VALID_VALUES.contains(contentType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'contentType' has been assigned the invalid value " + contentType);
    }
  }

}

