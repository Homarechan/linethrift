/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class LeaveSquareChatRequest implements TBase {
  
  static var STRUCT_DESC = { new TStruct("LeaveSquareChatRequest"); };
  static var SQUARE_CHAT_MID_FIELD_DESC = { new TField("squareChatMid", TType.STRING, 2); };
  static var SAY_GOODBYE_FIELD_DESC = { new TField("sayGoodbye", TType.BOOL, 3); };
  static var SQUARE_CHAT_MEMBER_REVISION_FIELD_DESC = { new TField("squareChatMemberRevision", TType.I64, 4); };

  @:isVar
  public var squareChatMid(get,set) : String;
  @:isVar
  public var sayGoodbye(get,set) : Bool;
  @:isVar
  public var squareChatMemberRevision(get,set) : haxe.Int64;

  inline static var SQUARECHATMID_FIELD_ID : Int = 2;
  inline static var SAYGOODBYE_FIELD_ID : Int = 3;
  inline static var SQUARECHATMEMBERREVISION_FIELD_ID : Int = 4;

  private var __isset_sayGoodbye : Bool = false;
  private var __isset_squareChatMemberRevision : Bool = false;

  public function new() {
  }

  public function get_squareChatMid() : String {
    return this.squareChatMid;
  }

  public function set_squareChatMid(squareChatMid:String) : String {
    this.squareChatMid = squareChatMid;
    return this.squareChatMid;
  }

  public function unsetSquareChatMid() : Void {
    this.squareChatMid = null;
  }

  // Returns true if field squareChatMid is set (has been assigned a value) and false otherwise
  public function isSetSquareChatMid() : Bool {
    return this.squareChatMid != null;
  }

  public function get_sayGoodbye() : Bool {
    return this.sayGoodbye;
  }

  public function set_sayGoodbye(sayGoodbye:Bool) : Bool {
    this.sayGoodbye = sayGoodbye;
    this.__isset_sayGoodbye = true;
    return this.sayGoodbye;
  }

  public function unsetSayGoodbye() : Void {
    this.__isset_sayGoodbye = false;
  }

  // Returns true if field sayGoodbye is set (has been assigned a value) and false otherwise
  public function isSetSayGoodbye() : Bool {
    return this.__isset_sayGoodbye;
  }

  public function get_squareChatMemberRevision() : haxe.Int64 {
    return this.squareChatMemberRevision;
  }

  public function set_squareChatMemberRevision(squareChatMemberRevision:haxe.Int64) : haxe.Int64 {
    this.squareChatMemberRevision = squareChatMemberRevision;
    this.__isset_squareChatMemberRevision = true;
    return this.squareChatMemberRevision;
  }

  public function unsetSquareChatMemberRevision() : Void {
    this.__isset_squareChatMemberRevision = false;
  }

  // Returns true if field squareChatMemberRevision is set (has been assigned a value) and false otherwise
  public function isSetSquareChatMemberRevision() : Bool {
    return this.__isset_squareChatMemberRevision;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case SQUARECHATMID_FIELD_ID:
      if (value == null) {
        unsetSquareChatMid();
      } else {
        this.squareChatMid = value;
      }

    case SAYGOODBYE_FIELD_ID:
      if (value == null) {
        unsetSayGoodbye();
      } else {
        this.sayGoodbye = value;
      }

    case SQUARECHATMEMBERREVISION_FIELD_ID:
      if (value == null) {
        unsetSquareChatMemberRevision();
      } else {
        this.squareChatMemberRevision = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case SQUARECHATMID_FIELD_ID:
      return this.squareChatMid;
    case SAYGOODBYE_FIELD_ID:
      return this.sayGoodbye;
    case SQUARECHATMEMBERREVISION_FIELD_ID:
      return this.squareChatMemberRevision;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case SQUARECHATMID_FIELD_ID:
      return isSetSquareChatMid();
    case SAYGOODBYE_FIELD_ID:
      return isSetSayGoodbye();
    case SQUARECHATMEMBERREVISION_FIELD_ID:
      return isSetSquareChatMemberRevision();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SQUARECHATMID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.squareChatMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SAYGOODBYE_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.sayGoodbye = iprot.readBool();
              this.__isset_sayGoodbye = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SQUARECHATMEMBERREVISION_FIELD_ID:
            if (field.type == TType.I64) {
              this.squareChatMemberRevision = iprot.readI64();
              this.__isset_squareChatMemberRevision = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.squareChatMid != null) {
        oprot.writeFieldBegin(SQUARE_CHAT_MID_FIELD_DESC);
        oprot.writeString(this.squareChatMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SAY_GOODBYE_FIELD_DESC);
      oprot.writeBool(this.sayGoodbye);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SQUARE_CHAT_MEMBER_REVISION_FIELD_DESC);
      oprot.writeI64(this.squareChatMemberRevision);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "LeaveSquareChatRequest(";
    var first : Bool = true;

    ret += "squareChatMid:";
    if (this.squareChatMid == null) {
      ret += "null";
    } else {
      ret += this.squareChatMid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "sayGoodbye:";
    ret += this.sayGoodbye;
    first = false;
    if (!first) ret +=  ", ";
    ret += "squareChatMemberRevision:";
    ret += this.squareChatMemberRevision;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

