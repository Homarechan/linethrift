/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class ConfirmE2EELogin_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("confirmE2EELogin_args"); };
  static var VERIFIER_FIELD_DESC = { new TField("verifier", TType.STRING, 1); };
  static var DEVICE_SECRET_FIELD_DESC = { new TField("deviceSecret", TType.STRING, 2); };

  @:isVar
  public var verifier(get,set) : String;
  @:isVar
  public var deviceSecret(get,set) : haxe.io.Bytes;

  inline static var VERIFIER_FIELD_ID : Int = 1;
  inline static var DEVICESECRET_FIELD_ID : Int = 2;


  public function new() {
  }

  public function get_verifier() : String {
    return this.verifier;
  }

  public function set_verifier(verifier:String) : String {
    this.verifier = verifier;
    return this.verifier;
  }

  public function unsetVerifier() : Void {
    this.verifier = null;
  }

  // Returns true if field verifier is set (has been assigned a value) and false otherwise
  public function isSetVerifier() : Bool {
    return this.verifier != null;
  }

  public function get_deviceSecret() : haxe.io.Bytes {
    return this.deviceSecret;
  }

  public function set_deviceSecret(deviceSecret:haxe.io.Bytes) : haxe.io.Bytes {
    this.deviceSecret = deviceSecret;
    return this.deviceSecret;
  }

  public function unsetDeviceSecret() : Void {
    this.deviceSecret = null;
  }

  // Returns true if field deviceSecret is set (has been assigned a value) and false otherwise
  public function isSetDeviceSecret() : Bool {
    return this.deviceSecret != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case VERIFIER_FIELD_ID:
      if (value == null) {
        unsetVerifier();
      } else {
        this.verifier = value;
      }

    case DEVICESECRET_FIELD_ID:
      if (value == null) {
        unsetDeviceSecret();
      } else {
        this.deviceSecret = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case VERIFIER_FIELD_ID:
      return this.verifier;
    case DEVICESECRET_FIELD_ID:
      return this.deviceSecret;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case VERIFIER_FIELD_ID:
      return isSetVerifier();
    case DEVICESECRET_FIELD_ID:
      return isSetDeviceSecret();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case VERIFIER_FIELD_ID:
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DEVICESECRET_FIELD_ID:
            if (field.type == TType.STRING) {
              this.deviceSecret = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      if (this.deviceSecret != null) {
        oprot.writeFieldBegin(DEVICE_SECRET_FIELD_DESC);
        oprot.writeBinary(this.deviceSecret);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "confirmE2EELogin_args(";
    var first : Bool = true;

    ret += "verifier:";
    if (this.verifier == null) {
      ret += "null";
    } else {
      ret += this.verifier;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "deviceSecret:";
    if (this.deviceSecret == null) {
      ret += "null";
    } else {
        ret += "BINARY";
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

