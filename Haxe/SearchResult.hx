/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SearchResult implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SearchResult"); };
  static var SID_FIELD_DESC = { new TField("sid", TType.STRING, 1); };
  static var COLLECTIONS_FIELD_DESC = { new TField("collections", TType.LIST, 2); };
  static var START_FIELD_DESC = { new TField("start", TType.I32, 3); };
  static var LENGTH_FIELD_DESC = { new TField("length", TType.I32, 4); };

  @:isVar
  public var sid(get,set) : String;
  @:isVar
  public var collections(get,set) : List< SearchResultCollection>;
  @:isVar
  public var start(get,set) : haxe.Int32;
  @:isVar
  public var length(get,set) : haxe.Int32;

  inline static var SID_FIELD_ID : Int = 1;
  inline static var COLLECTIONS_FIELD_ID : Int = 2;
  inline static var START_FIELD_ID : Int = 3;
  inline static var LENGTH_FIELD_ID : Int = 4;

  private var __isset_start : Bool = false;
  private var __isset_length : Bool = false;

  public function new() {
  }

  public function get_sid() : String {
    return this.sid;
  }

  public function set_sid(sid:String) : String {
    this.sid = sid;
    return this.sid;
  }

  public function unsetSid() : Void {
    this.sid = null;
  }

  // Returns true if field sid is set (has been assigned a value) and false otherwise
  public function isSetSid() : Bool {
    return this.sid != null;
  }

  public function get_collections() : List< SearchResultCollection> {
    return this.collections;
  }

  public function set_collections(collections:List< SearchResultCollection>) : List< SearchResultCollection> {
    this.collections = collections;
    return this.collections;
  }

  public function unsetCollections() : Void {
    this.collections = null;
  }

  // Returns true if field collections is set (has been assigned a value) and false otherwise
  public function isSetCollections() : Bool {
    return this.collections != null;
  }

  public function get_start() : haxe.Int32 {
    return this.start;
  }

  public function set_start(start:haxe.Int32) : haxe.Int32 {
    this.start = start;
    this.__isset_start = true;
    return this.start;
  }

  public function unsetStart() : Void {
    this.__isset_start = false;
  }

  // Returns true if field start is set (has been assigned a value) and false otherwise
  public function isSetStart() : Bool {
    return this.__isset_start;
  }

  public function get_length() : haxe.Int32 {
    return this.length;
  }

  public function set_length(length:haxe.Int32) : haxe.Int32 {
    this.length = length;
    this.__isset_length = true;
    return this.length;
  }

  public function unsetLength() : Void {
    this.__isset_length = false;
  }

  // Returns true if field length is set (has been assigned a value) and false otherwise
  public function isSetLength() : Bool {
    return this.__isset_length;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case SID_FIELD_ID:
      if (value == null) {
        unsetSid();
      } else {
        this.sid = value;
      }

    case COLLECTIONS_FIELD_ID:
      if (value == null) {
        unsetCollections();
      } else {
        this.collections = value;
      }

    case START_FIELD_ID:
      if (value == null) {
        unsetStart();
      } else {
        this.start = value;
      }

    case LENGTH_FIELD_ID:
      if (value == null) {
        unsetLength();
      } else {
        this.length = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case SID_FIELD_ID:
      return this.sid;
    case COLLECTIONS_FIELD_ID:
      return this.collections;
    case START_FIELD_ID:
      return this.start;
    case LENGTH_FIELD_ID:
      return this.length;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case SID_FIELD_ID:
      return isSetSid();
    case COLLECTIONS_FIELD_ID:
      return isSetCollections();
    case START_FIELD_ID:
      return isSetStart();
    case LENGTH_FIELD_ID:
      return isSetLength();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.sid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case COLLECTIONS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list85 = iprot.readListBegin();
                this.collections = new List< SearchResultCollection>();
                for( _i86 in 0 ... _list85.size)
                {
                  var _elem87 : SearchResultCollection;
                  _elem87 = new SearchResultCollection();
                  _elem87.read(iprot);
                  this.collections.add(_elem87);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case START_FIELD_ID:
            if (field.type == TType.I32) {
              this.start = iprot.readI32();
              this.__isset_start = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case LENGTH_FIELD_ID:
            if (field.type == TType.I32) {
              this.length = iprot.readI32();
              this.__isset_length = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sid != null) {
        oprot.writeFieldBegin(SID_FIELD_DESC);
        oprot.writeString(this.sid);
        oprot.writeFieldEnd();
      }
      if (this.collections != null) {
        oprot.writeFieldBegin(COLLECTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.collections.length));
          for( elem88 in this.collections)
          {
            elem88.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI32(this.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI32(this.length);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SearchResult(";
    var first : Bool = true;

    ret += "sid:";
    if (this.sid == null) {
      ret += "null";
    } else {
      ret += this.sid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "collections:";
    if (this.collections == null) {
      ret += "null";
    } else {
      ret += this.collections;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "start:";
    ret += this.start;
    first = false;
    if (!first) ret +=  ", ";
    ret += "length:";
    ret += this.length;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

