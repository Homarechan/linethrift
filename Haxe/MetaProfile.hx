/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class MetaProfile implements TBase {
  
  static var STRUCT_DESC = { new TStruct("MetaProfile"); };
  static var CREATE_TIME_FIELD_DESC = { new TField("createTime", TType.I64, 1); };
  static var REGION_CODE_FIELD_DESC = { new TField("regionCode", TType.STRING, 2); };
  static var IDENTITIES_FIELD_DESC = { new TField("identities", TType.MAP, 3); };

  @:isVar
  public var createTime(get,set) : haxe.Int64;
  @:isVar
  public var regionCode(get,set) : String;
  @:isVar
  public var identities(get,set) : IntMap< String>;

  inline static var CREATETIME_FIELD_ID : Int = 1;
  inline static var REGIONCODE_FIELD_ID : Int = 2;
  inline static var IDENTITIES_FIELD_ID : Int = 3;

  private var __isset_createTime : Bool = false;

  public function new() {
  }

  public function get_createTime() : haxe.Int64 {
    return this.createTime;
  }

  public function set_createTime(createTime:haxe.Int64) : haxe.Int64 {
    this.createTime = createTime;
    this.__isset_createTime = true;
    return this.createTime;
  }

  public function unsetCreateTime() : Void {
    this.__isset_createTime = false;
  }

  // Returns true if field createTime is set (has been assigned a value) and false otherwise
  public function isSetCreateTime() : Bool {
    return this.__isset_createTime;
  }

  public function get_regionCode() : String {
    return this.regionCode;
  }

  public function set_regionCode(regionCode:String) : String {
    this.regionCode = regionCode;
    return this.regionCode;
  }

  public function unsetRegionCode() : Void {
    this.regionCode = null;
  }

  // Returns true if field regionCode is set (has been assigned a value) and false otherwise
  public function isSetRegionCode() : Bool {
    return this.regionCode != null;
  }

  public function get_identities() : IntMap< String> {
    return this.identities;
  }

  public function set_identities(identities:IntMap< String>) : IntMap< String> {
    this.identities = identities;
    return this.identities;
  }

  public function unsetIdentities() : Void {
    this.identities = null;
  }

  // Returns true if field identities is set (has been assigned a value) and false otherwise
  public function isSetIdentities() : Bool {
    return this.identities != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case CREATETIME_FIELD_ID:
      if (value == null) {
        unsetCreateTime();
      } else {
        this.createTime = value;
      }

    case REGIONCODE_FIELD_ID:
      if (value == null) {
        unsetRegionCode();
      } else {
        this.regionCode = value;
      }

    case IDENTITIES_FIELD_ID:
      if (value == null) {
        unsetIdentities();
      } else {
        this.identities = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case CREATETIME_FIELD_ID:
      return this.createTime;
    case REGIONCODE_FIELD_ID:
      return this.regionCode;
    case IDENTITIES_FIELD_ID:
      return this.identities;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case CREATETIME_FIELD_ID:
      return isSetCreateTime();
    case REGIONCODE_FIELD_ID:
      return isSetRegionCode();
    case IDENTITIES_FIELD_ID:
      return isSetIdentities();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case CREATETIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.createTime = iprot.readI64();
              this.__isset_createTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case REGIONCODE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.regionCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case IDENTITIES_FIELD_ID:
            if (field.type == TType.MAP) {
              {
                var _map186 = iprot.readMapBegin();
                this.identities = new IntMap< String>();
                for( _i187 in 0 ... _map186.size)
                {
                  var _key188 : Int;
                  var _val189 : String;
                  _key188 = iprot.readI32();
                  _val189 = iprot.readString();
                  this.identities.set( _key188, _val189);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(this.createTime);
      oprot.writeFieldEnd();
      if (this.regionCode != null) {
        oprot.writeFieldBegin(REGION_CODE_FIELD_DESC);
        oprot.writeString(this.regionCode);
        oprot.writeFieldEnd();
      }
      if (this.identities != null) {
        oprot.writeFieldBegin(IDENTITIES_FIELD_DESC);
        {
          var _sizeCounter191 : Int = 0;
          for( _key190 in this.identities) {
            _sizeCounter191++;
          }
          oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, _sizeCounter191));
          for( elem192 in this.identities.keys())
          {
            oprot.writeI32(elem192);
            oprot.writeString(this.identities.get(elem192));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "MetaProfile(";
    var first : Bool = true;

    ret += "createTime:";
    ret += this.createTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "regionCode:";
    if (this.regionCode == null) {
      ret += "null";
    } else {
      ret += this.regionCode;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "identities:";
    if (this.identities == null) {
      ret += "null";
    } else {
      ret += this.identities;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

