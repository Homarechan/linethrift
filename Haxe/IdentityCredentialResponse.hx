/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class IdentityCredentialResponse implements TBase {
  
  static var STRUCT_DESC = { new TStruct("IdentityCredentialResponse"); };
  static var META_DATA_FIELD_DESC = { new TField("metaData", TType.MAP, 1); };
  static var RESPONSE_TYPE_FIELD_DESC = { new TField("responseType", TType.I32, 2); };
  static var CONFIRMATION_VERIFIER_FIELD_DESC = { new TField("confirmationVerifier", TType.STRING, 3); };
  static var TIMEOUT_IN_SECONDS_FIELD_DESC = { new TField("timeoutInSeconds", TType.I64, 4); };

  @:isVar
  public var metaData(get,set) : StringMap< String>;
  @:isVar
  public var responseType(get,set) : Int;
  @:isVar
  public var confirmationVerifier(get,set) : String;
  @:isVar
  public var timeoutInSeconds(get,set) : haxe.Int64;

  inline static var METADATA_FIELD_ID : Int = 1;
  inline static var RESPONSETYPE_FIELD_ID : Int = 2;
  inline static var CONFIRMATIONVERIFIER_FIELD_ID : Int = 3;
  inline static var TIMEOUTINSECONDS_FIELD_ID : Int = 4;

  private var __isset_responseType : Bool = false;
  private var __isset_timeoutInSeconds : Bool = false;

  public function new() {
  }

  public function get_metaData() : StringMap< String> {
    return this.metaData;
  }

  public function set_metaData(metaData:StringMap< String>) : StringMap< String> {
    this.metaData = metaData;
    return this.metaData;
  }

  public function unsetMetaData() : Void {
    this.metaData = null;
  }

  // Returns true if field metaData is set (has been assigned a value) and false otherwise
  public function isSetMetaData() : Bool {
    return this.metaData != null;
  }

  public function get_responseType() : Int {
    return this.responseType;
  }

  public function set_responseType(responseType:Int) : Int {
    this.responseType = responseType;
    this.__isset_responseType = true;
    return this.responseType;
  }

  public function unsetResponseType() : Void {
    this.__isset_responseType = false;
  }

  // Returns true if field responseType is set (has been assigned a value) and false otherwise
  public function isSetResponseType() : Bool {
    return this.__isset_responseType;
  }

  public function get_confirmationVerifier() : String {
    return this.confirmationVerifier;
  }

  public function set_confirmationVerifier(confirmationVerifier:String) : String {
    this.confirmationVerifier = confirmationVerifier;
    return this.confirmationVerifier;
  }

  public function unsetConfirmationVerifier() : Void {
    this.confirmationVerifier = null;
  }

  // Returns true if field confirmationVerifier is set (has been assigned a value) and false otherwise
  public function isSetConfirmationVerifier() : Bool {
    return this.confirmationVerifier != null;
  }

  public function get_timeoutInSeconds() : haxe.Int64 {
    return this.timeoutInSeconds;
  }

  public function set_timeoutInSeconds(timeoutInSeconds:haxe.Int64) : haxe.Int64 {
    this.timeoutInSeconds = timeoutInSeconds;
    this.__isset_timeoutInSeconds = true;
    return this.timeoutInSeconds;
  }

  public function unsetTimeoutInSeconds() : Void {
    this.__isset_timeoutInSeconds = false;
  }

  // Returns true if field timeoutInSeconds is set (has been assigned a value) and false otherwise
  public function isSetTimeoutInSeconds() : Bool {
    return this.__isset_timeoutInSeconds;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case METADATA_FIELD_ID:
      if (value == null) {
        unsetMetaData();
      } else {
        this.metaData = value;
      }

    case RESPONSETYPE_FIELD_ID:
      if (value == null) {
        unsetResponseType();
      } else {
        this.responseType = value;
      }

    case CONFIRMATIONVERIFIER_FIELD_ID:
      if (value == null) {
        unsetConfirmationVerifier();
      } else {
        this.confirmationVerifier = value;
      }

    case TIMEOUTINSECONDS_FIELD_ID:
      if (value == null) {
        unsetTimeoutInSeconds();
      } else {
        this.timeoutInSeconds = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case METADATA_FIELD_ID:
      return this.metaData;
    case RESPONSETYPE_FIELD_ID:
      return this.responseType;
    case CONFIRMATIONVERIFIER_FIELD_ID:
      return this.confirmationVerifier;
    case TIMEOUTINSECONDS_FIELD_ID:
      return this.timeoutInSeconds;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case METADATA_FIELD_ID:
      return isSetMetaData();
    case RESPONSETYPE_FIELD_ID:
      return isSetResponseType();
    case CONFIRMATIONVERIFIER_FIELD_ID:
      return isSetConfirmationVerifier();
    case TIMEOUTINSECONDS_FIELD_ID:
      return isSetTimeoutInSeconds();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case METADATA_FIELD_ID:
            if (field.type == TType.MAP) {
              {
                var _map22 = iprot.readMapBegin();
                this.metaData = new StringMap< String>();
                for( _i23 in 0 ... _map22.size)
                {
                  var _key24 : String;
                  var _val25 : String;
                  _key24 = iprot.readString();
                  _val25 = iprot.readString();
                  this.metaData.set( _key24, _val25);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case RESPONSETYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.responseType = iprot.readI32();
              this.__isset_responseType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CONFIRMATIONVERIFIER_FIELD_ID:
            if (field.type == TType.STRING) {
              this.confirmationVerifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TIMEOUTINSECONDS_FIELD_ID:
            if (field.type == TType.I64) {
              this.timeoutInSeconds = iprot.readI64();
              this.__isset_timeoutInSeconds = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.metaData != null) {
        oprot.writeFieldBegin(META_DATA_FIELD_DESC);
        {
          var _sizeCounter27 : Int = 0;
          for( _key26 in this.metaData) {
            _sizeCounter27++;
          }
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _sizeCounter27));
          for( elem28 in this.metaData.keys())
          {
            oprot.writeString(elem28);
            oprot.writeString(this.metaData.get(elem28));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESPONSE_TYPE_FIELD_DESC);
      oprot.writeI32(this.responseType);
      oprot.writeFieldEnd();
      if (this.confirmationVerifier != null) {
        oprot.writeFieldBegin(CONFIRMATION_VERIFIER_FIELD_DESC);
        oprot.writeString(this.confirmationVerifier);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMEOUT_IN_SECONDS_FIELD_DESC);
      oprot.writeI64(this.timeoutInSeconds);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "IdentityCredentialResponse(";
    var first : Bool = true;

    ret += "metaData:";
    if (this.metaData == null) {
      ret += "null";
    } else {
      ret += this.metaData;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "responseType:";
    var responseType_name : String = .IdentityResponseType.VALUES_TO_NAMES[this.responseType];
    if (responseType_name != null) {
      ret += responseType_name;
      ret += " (";
    }
    ret += this.responseType;
    if (responseType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "confirmationVerifier:";
    if (this.confirmationVerifier == null) {
      ret += "null";
    } else {
      ret += this.confirmationVerifier;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "timeoutInSeconds:";
    ret += this.timeoutInSeconds;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetResponseType() && !.IdentityResponseType.VALID_VALUES.contains(responseType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'responseType' has been assigned the invalid value " + responseType);
    }
  }

}

