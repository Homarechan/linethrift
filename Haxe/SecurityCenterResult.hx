/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SecurityCenterResult implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SecurityCenterResult"); };
  static var URI_FIELD_DESC = { new TField("uri", TType.STRING, 1); };
  static var TOKEN_FIELD_DESC = { new TField("token", TType.STRING, 2); };
  static var COOKIE_PATH_FIELD_DESC = { new TField("cookiePath", TType.STRING, 3); };
  static var SKIP_FIELD_DESC = { new TField("skip", TType.BOOL, 4); };

  @:isVar
  public var uri(get,set) : String;
  @:isVar
  public var token(get,set) : String;
  @:isVar
  public var cookiePath(get,set) : String;
  @:isVar
  public var skip(get,set) : Bool;

  inline static var URI_FIELD_ID : Int = 1;
  inline static var TOKEN_FIELD_ID : Int = 2;
  inline static var COOKIEPATH_FIELD_ID : Int = 3;
  inline static var SKIP_FIELD_ID : Int = 4;

  private var __isset_skip : Bool = false;

  public function new() {
  }

  public function get_uri() : String {
    return this.uri;
  }

  public function set_uri(uri:String) : String {
    this.uri = uri;
    return this.uri;
  }

  public function unsetUri() : Void {
    this.uri = null;
  }

  // Returns true if field uri is set (has been assigned a value) and false otherwise
  public function isSetUri() : Bool {
    return this.uri != null;
  }

  public function get_token() : String {
    return this.token;
  }

  public function set_token(token:String) : String {
    this.token = token;
    return this.token;
  }

  public function unsetToken() : Void {
    this.token = null;
  }

  // Returns true if field token is set (has been assigned a value) and false otherwise
  public function isSetToken() : Bool {
    return this.token != null;
  }

  public function get_cookiePath() : String {
    return this.cookiePath;
  }

  public function set_cookiePath(cookiePath:String) : String {
    this.cookiePath = cookiePath;
    return this.cookiePath;
  }

  public function unsetCookiePath() : Void {
    this.cookiePath = null;
  }

  // Returns true if field cookiePath is set (has been assigned a value) and false otherwise
  public function isSetCookiePath() : Bool {
    return this.cookiePath != null;
  }

  public function get_skip() : Bool {
    return this.skip;
  }

  public function set_skip(skip:Bool) : Bool {
    this.skip = skip;
    this.__isset_skip = true;
    return this.skip;
  }

  public function unsetSkip() : Void {
    this.__isset_skip = false;
  }

  // Returns true if field skip is set (has been assigned a value) and false otherwise
  public function isSetSkip() : Bool {
    return this.__isset_skip;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case URI_FIELD_ID:
      if (value == null) {
        unsetUri();
      } else {
        this.uri = value;
      }

    case TOKEN_FIELD_ID:
      if (value == null) {
        unsetToken();
      } else {
        this.token = value;
      }

    case COOKIEPATH_FIELD_ID:
      if (value == null) {
        unsetCookiePath();
      } else {
        this.cookiePath = value;
      }

    case SKIP_FIELD_ID:
      if (value == null) {
        unsetSkip();
      } else {
        this.skip = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case URI_FIELD_ID:
      return this.uri;
    case TOKEN_FIELD_ID:
      return this.token;
    case COOKIEPATH_FIELD_ID:
      return this.cookiePath;
    case SKIP_FIELD_ID:
      return this.skip;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case URI_FIELD_ID:
      return isSetUri();
    case TOKEN_FIELD_ID:
      return isSetToken();
    case COOKIEPATH_FIELD_ID:
      return isSetCookiePath();
    case SKIP_FIELD_ID:
      return isSetSkip();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case URI_FIELD_ID:
            if (field.type == TType.STRING) {
              this.uri = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TOKEN_FIELD_ID:
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case COOKIEPATH_FIELD_ID:
            if (field.type == TType.STRING) {
              this.cookiePath = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SKIP_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.skip = iprot.readBool();
              this.__isset_skip = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.uri != null) {
        oprot.writeFieldBegin(URI_FIELD_DESC);
        oprot.writeString(this.uri);
        oprot.writeFieldEnd();
      }
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.cookiePath != null) {
        oprot.writeFieldBegin(COOKIE_PATH_FIELD_DESC);
        oprot.writeString(this.cookiePath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SKIP_FIELD_DESC);
      oprot.writeBool(this.skip);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SecurityCenterResult(";
    var first : Bool = true;

    ret += "uri:";
    if (this.uri == null) {
      ret += "null";
    } else {
      ret += this.uri;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "token:";
    if (this.token == null) {
      ret += "null";
    } else {
      ret += this.token;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "cookiePath:";
    if (this.cookiePath == null) {
      ret += "null";
    } else {
      ret += this.cookiePath;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "skip:";
    ret += this.skip;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

