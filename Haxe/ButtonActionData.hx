/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class ButtonActionData implements TBase {
  
  static var STRUCT_DESC = { new TStruct("ButtonActionData"); };
  static var ADD_FRIEND_DATA_FIELD_DESC = { new TField("addFriendData", TType.STRUCT, 1); };
  static var INSTALL_APP_DATA_FIELD_DESC = { new TField("installAppData", TType.STRUCT, 2); };
  static var JUMP_URL_DATA_FIELD_DESC = { new TField("jumpUrlData", TType.STRUCT, 3); };

  @:isVar
  public var addFriendData(get,set) : AddFriendData;
  @:isVar
  public var installAppData(get,set) : InstallAppData;
  @:isVar
  public var jumpUrlData(get,set) : JumpUrlData;

  inline static var ADDFRIENDDATA_FIELD_ID : Int = 1;
  inline static var INSTALLAPPDATA_FIELD_ID : Int = 2;
  inline static var JUMPURLDATA_FIELD_ID : Int = 3;


  public function new() {
  }

  public function get_addFriendData() : AddFriendData {
    return this.addFriendData;
  }

  public function set_addFriendData(addFriendData:AddFriendData) : AddFriendData {
    this.addFriendData = addFriendData;
    return this.addFriendData;
  }

  public function unsetAddFriendData() : Void {
    this.addFriendData = null;
  }

  // Returns true if field addFriendData is set (has been assigned a value) and false otherwise
  public function isSetAddFriendData() : Bool {
    return this.addFriendData != null;
  }

  public function get_installAppData() : InstallAppData {
    return this.installAppData;
  }

  public function set_installAppData(installAppData:InstallAppData) : InstallAppData {
    this.installAppData = installAppData;
    return this.installAppData;
  }

  public function unsetInstallAppData() : Void {
    this.installAppData = null;
  }

  // Returns true if field installAppData is set (has been assigned a value) and false otherwise
  public function isSetInstallAppData() : Bool {
    return this.installAppData != null;
  }

  public function get_jumpUrlData() : JumpUrlData {
    return this.jumpUrlData;
  }

  public function set_jumpUrlData(jumpUrlData:JumpUrlData) : JumpUrlData {
    this.jumpUrlData = jumpUrlData;
    return this.jumpUrlData;
  }

  public function unsetJumpUrlData() : Void {
    this.jumpUrlData = null;
  }

  // Returns true if field jumpUrlData is set (has been assigned a value) and false otherwise
  public function isSetJumpUrlData() : Bool {
    return this.jumpUrlData != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case ADDFRIENDDATA_FIELD_ID:
      if (value == null) {
        unsetAddFriendData();
      } else {
        this.addFriendData = value;
      }

    case INSTALLAPPDATA_FIELD_ID:
      if (value == null) {
        unsetInstallAppData();
      } else {
        this.installAppData = value;
      }

    case JUMPURLDATA_FIELD_ID:
      if (value == null) {
        unsetJumpUrlData();
      } else {
        this.jumpUrlData = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case ADDFRIENDDATA_FIELD_ID:
      return this.addFriendData;
    case INSTALLAPPDATA_FIELD_ID:
      return this.installAppData;
    case JUMPURLDATA_FIELD_ID:
      return this.jumpUrlData;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case ADDFRIENDDATA_FIELD_ID:
      return isSetAddFriendData();
    case INSTALLAPPDATA_FIELD_ID:
      return isSetInstallAppData();
    case JUMPURLDATA_FIELD_ID:
      return isSetJumpUrlData();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ADDFRIENDDATA_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.addFriendData = new AddFriendData();
              this.addFriendData.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case INSTALLAPPDATA_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.installAppData = new InstallAppData();
              this.installAppData.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case JUMPURLDATA_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.jumpUrlData = new JumpUrlData();
              this.jumpUrlData.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.addFriendData != null) {
        oprot.writeFieldBegin(ADD_FRIEND_DATA_FIELD_DESC);
        this.addFriendData.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.installAppData != null) {
        oprot.writeFieldBegin(INSTALL_APP_DATA_FIELD_DESC);
        this.installAppData.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.jumpUrlData != null) {
        oprot.writeFieldBegin(JUMP_URL_DATA_FIELD_DESC);
        this.jumpUrlData.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "ButtonActionData(";
    var first : Bool = true;

    ret += "addFriendData:";
    if (this.addFriendData == null) {
      ret += "null";
    } else {
      ret += this.addFriendData;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "installAppData:";
    if (this.installAppData == null) {
      ret += "null";
    } else {
      ret += this.installAppData;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "jumpUrlData:";
    if (this.jumpUrlData == null) {
      ret += "null";
    } else {
      ret += this.jumpUrlData;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

