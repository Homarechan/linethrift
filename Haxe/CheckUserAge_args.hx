/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class CheckUserAge_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("checkUserAge_args"); };
  static var CARRIER_FIELD_DESC = { new TField("carrier", TType.I32, 2); };
  static var SESSION_ID_FIELD_DESC = { new TField("sessionId", TType.STRING, 3); };
  static var VERIFIER_FIELD_DESC = { new TField("verifier", TType.STRING, 4); };
  static var STANDARD_AGE_FIELD_DESC = { new TField("standardAge", TType.I32, 5); };

  @:isVar
  public var carrier(get,set) : Int;
  @:isVar
  public var sessionId(get,set) : String;
  @:isVar
  public var verifier(get,set) : String;
  @:isVar
  public var standardAge(get,set) : haxe.Int32;

  inline static var CARRIER_FIELD_ID : Int = 2;
  inline static var SESSIONID_FIELD_ID : Int = 3;
  inline static var VERIFIER_FIELD_ID : Int = 4;
  inline static var STANDARDAGE_FIELD_ID : Int = 5;

  private var __isset_carrier : Bool = false;
  private var __isset_standardAge : Bool = false;

  public function new() {
  }

  public function get_carrier() : Int {
    return this.carrier;
  }

  public function set_carrier(carrier:Int) : Int {
    this.carrier = carrier;
    this.__isset_carrier = true;
    return this.carrier;
  }

  public function unsetCarrier() : Void {
    this.__isset_carrier = false;
  }

  // Returns true if field carrier is set (has been assigned a value) and false otherwise
  public function isSetCarrier() : Bool {
    return this.__isset_carrier;
  }

  public function get_sessionId() : String {
    return this.sessionId;
  }

  public function set_sessionId(sessionId:String) : String {
    this.sessionId = sessionId;
    return this.sessionId;
  }

  public function unsetSessionId() : Void {
    this.sessionId = null;
  }

  // Returns true if field sessionId is set (has been assigned a value) and false otherwise
  public function isSetSessionId() : Bool {
    return this.sessionId != null;
  }

  public function get_verifier() : String {
    return this.verifier;
  }

  public function set_verifier(verifier:String) : String {
    this.verifier = verifier;
    return this.verifier;
  }

  public function unsetVerifier() : Void {
    this.verifier = null;
  }

  // Returns true if field verifier is set (has been assigned a value) and false otherwise
  public function isSetVerifier() : Bool {
    return this.verifier != null;
  }

  public function get_standardAge() : haxe.Int32 {
    return this.standardAge;
  }

  public function set_standardAge(standardAge:haxe.Int32) : haxe.Int32 {
    this.standardAge = standardAge;
    this.__isset_standardAge = true;
    return this.standardAge;
  }

  public function unsetStandardAge() : Void {
    this.__isset_standardAge = false;
  }

  // Returns true if field standardAge is set (has been assigned a value) and false otherwise
  public function isSetStandardAge() : Bool {
    return this.__isset_standardAge;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case CARRIER_FIELD_ID:
      if (value == null) {
        unsetCarrier();
      } else {
        this.carrier = value;
      }

    case SESSIONID_FIELD_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        this.sessionId = value;
      }

    case VERIFIER_FIELD_ID:
      if (value == null) {
        unsetVerifier();
      } else {
        this.verifier = value;
      }

    case STANDARDAGE_FIELD_ID:
      if (value == null) {
        unsetStandardAge();
      } else {
        this.standardAge = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case CARRIER_FIELD_ID:
      return this.carrier;
    case SESSIONID_FIELD_ID:
      return this.sessionId;
    case VERIFIER_FIELD_ID:
      return this.verifier;
    case STANDARDAGE_FIELD_ID:
      return this.standardAge;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case CARRIER_FIELD_ID:
      return isSetCarrier();
    case SESSIONID_FIELD_ID:
      return isSetSessionId();
    case VERIFIER_FIELD_ID:
      return isSetVerifier();
    case STANDARDAGE_FIELD_ID:
      return isSetStandardAge();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case CARRIER_FIELD_ID:
            if (field.type == TType.I32) {
              this.carrier = iprot.readI32();
              this.__isset_carrier = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SESSIONID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case VERIFIER_FIELD_ID:
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case STANDARDAGE_FIELD_ID:
            if (field.type == TType.I32) {
              this.standardAge = iprot.readI32();
              this.__isset_standardAge = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CARRIER_FIELD_DESC);
      oprot.writeI32(this.carrier);
      oprot.writeFieldEnd();
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STANDARD_AGE_FIELD_DESC);
      oprot.writeI32(this.standardAge);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "checkUserAge_args(";
    var first : Bool = true;

    ret += "carrier:";
    var carrier_name : String = .CarrierCode.VALUES_TO_NAMES[this.carrier];
    if (carrier_name != null) {
      ret += carrier_name;
      ret += " (";
    }
    ret += this.carrier;
    if (carrier_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "sessionId:";
    if (this.sessionId == null) {
      ret += "null";
    } else {
      ret += this.sessionId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "verifier:";
    if (this.verifier == null) {
      ret += "null";
    } else {
      ret += this.verifier;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "standardAge:";
    ret += this.standardAge;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetCarrier() && !.CarrierCode.VALID_VALUES.contains(carrier)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'carrier' has been assigned the invalid value " + carrier);
    }
  }

}

