/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class AddOperationForChannel_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("addOperationForChannel_args"); };
  static var OP_TYPE_FIELD_DESC = { new TField("opType", TType.I32, 1); };
  static var PARAM1_FIELD_DESC = { new TField("param1", TType.STRING, 2); };
  static var PARAM2_FIELD_DESC = { new TField("param2", TType.STRING, 3); };
  static var PARAM3_FIELD_DESC = { new TField("param3", TType.STRING, 4); };

  @:isVar
  public var opType(get,set) : Int;
  @:isVar
  public var param1(get,set) : String;
  @:isVar
  public var param2(get,set) : String;
  @:isVar
  public var param3(get,set) : String;

  inline static var OPTYPE_FIELD_ID : Int = 1;
  inline static var PARAM1_FIELD_ID : Int = 2;
  inline static var PARAM2_FIELD_ID : Int = 3;
  inline static var PARAM3_FIELD_ID : Int = 4;

  private var __isset_opType : Bool = false;

  public function new() {
  }

  public function get_opType() : Int {
    return this.opType;
  }

  public function set_opType(opType:Int) : Int {
    this.opType = opType;
    this.__isset_opType = true;
    return this.opType;
  }

  public function unsetOpType() : Void {
    this.__isset_opType = false;
  }

  // Returns true if field opType is set (has been assigned a value) and false otherwise
  public function isSetOpType() : Bool {
    return this.__isset_opType;
  }

  public function get_param1() : String {
    return this.param1;
  }

  public function set_param1(param1:String) : String {
    this.param1 = param1;
    return this.param1;
  }

  public function unsetParam1() : Void {
    this.param1 = null;
  }

  // Returns true if field param1 is set (has been assigned a value) and false otherwise
  public function isSetParam1() : Bool {
    return this.param1 != null;
  }

  public function get_param2() : String {
    return this.param2;
  }

  public function set_param2(param2:String) : String {
    this.param2 = param2;
    return this.param2;
  }

  public function unsetParam2() : Void {
    this.param2 = null;
  }

  // Returns true if field param2 is set (has been assigned a value) and false otherwise
  public function isSetParam2() : Bool {
    return this.param2 != null;
  }

  public function get_param3() : String {
    return this.param3;
  }

  public function set_param3(param3:String) : String {
    this.param3 = param3;
    return this.param3;
  }

  public function unsetParam3() : Void {
    this.param3 = null;
  }

  // Returns true if field param3 is set (has been assigned a value) and false otherwise
  public function isSetParam3() : Bool {
    return this.param3 != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case OPTYPE_FIELD_ID:
      if (value == null) {
        unsetOpType();
      } else {
        this.opType = value;
      }

    case PARAM1_FIELD_ID:
      if (value == null) {
        unsetParam1();
      } else {
        this.param1 = value;
      }

    case PARAM2_FIELD_ID:
      if (value == null) {
        unsetParam2();
      } else {
        this.param2 = value;
      }

    case PARAM3_FIELD_ID:
      if (value == null) {
        unsetParam3();
      } else {
        this.param3 = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case OPTYPE_FIELD_ID:
      return this.opType;
    case PARAM1_FIELD_ID:
      return this.param1;
    case PARAM2_FIELD_ID:
      return this.param2;
    case PARAM3_FIELD_ID:
      return this.param3;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case OPTYPE_FIELD_ID:
      return isSetOpType();
    case PARAM1_FIELD_ID:
      return isSetParam1();
    case PARAM2_FIELD_ID:
      return isSetParam2();
    case PARAM3_FIELD_ID:
      return isSetParam3();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case OPTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.opType = iprot.readI32();
              this.__isset_opType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PARAM1_FIELD_ID:
            if (field.type == TType.STRING) {
              this.param1 = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PARAM2_FIELD_ID:
            if (field.type == TType.STRING) {
              this.param2 = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PARAM3_FIELD_ID:
            if (field.type == TType.STRING) {
              this.param3 = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OP_TYPE_FIELD_DESC);
      oprot.writeI32(this.opType);
      oprot.writeFieldEnd();
      if (this.param1 != null) {
        oprot.writeFieldBegin(PARAM1_FIELD_DESC);
        oprot.writeString(this.param1);
        oprot.writeFieldEnd();
      }
      if (this.param2 != null) {
        oprot.writeFieldBegin(PARAM2_FIELD_DESC);
        oprot.writeString(this.param2);
        oprot.writeFieldEnd();
      }
      if (this.param3 != null) {
        oprot.writeFieldBegin(PARAM3_FIELD_DESC);
        oprot.writeString(this.param3);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "addOperationForChannel_args(";
    var first : Bool = true;

    ret += "opType:";
    var opType_name : String = .OpType.VALUES_TO_NAMES[this.opType];
    if (opType_name != null) {
      ret += opType_name;
      ret += " (";
    }
    ret += this.opType;
    if (opType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "param1:";
    if (this.param1 == null) {
      ret += "null";
    } else {
      ret += this.param1;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "param2:";
    if (this.param2 == null) {
      ret += "null";
    } else {
      ret += this.param2;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "param3:";
    if (this.param3 == null) {
      ret += "null";
    } else {
      ret += this.param3;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetOpType() && !.OpType.VALID_VALUES.contains(opType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'opType' has been assigned the invalid value " + opType);
    }
  }

}

