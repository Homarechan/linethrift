/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class AgeCheckDocomoResult implements TBase {
  
  static var STRUCT_DESC = { new TStruct("AgeCheckDocomoResult"); };
  static var AUTH_URL_FIELD_DESC = { new TField("authUrl", TType.STRING, 1); };
  static var USER_AGE_TYPE_FIELD_DESC = { new TField("userAgeType", TType.I32, 2); };

  @:isVar
  public var authUrl(get,set) : String;
  @:isVar
  public var userAgeType(get,set) : Int;

  inline static var AUTHURL_FIELD_ID : Int = 1;
  inline static var USERAGETYPE_FIELD_ID : Int = 2;

  private var __isset_userAgeType : Bool = false;

  public function new() {
  }

  public function get_authUrl() : String {
    return this.authUrl;
  }

  public function set_authUrl(authUrl:String) : String {
    this.authUrl = authUrl;
    return this.authUrl;
  }

  public function unsetAuthUrl() : Void {
    this.authUrl = null;
  }

  // Returns true if field authUrl is set (has been assigned a value) and false otherwise
  public function isSetAuthUrl() : Bool {
    return this.authUrl != null;
  }

  public function get_userAgeType() : Int {
    return this.userAgeType;
  }

  public function set_userAgeType(userAgeType:Int) : Int {
    this.userAgeType = userAgeType;
    this.__isset_userAgeType = true;
    return this.userAgeType;
  }

  public function unsetUserAgeType() : Void {
    this.__isset_userAgeType = false;
  }

  // Returns true if field userAgeType is set (has been assigned a value) and false otherwise
  public function isSetUserAgeType() : Bool {
    return this.__isset_userAgeType;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case AUTHURL_FIELD_ID:
      if (value == null) {
        unsetAuthUrl();
      } else {
        this.authUrl = value;
      }

    case USERAGETYPE_FIELD_ID:
      if (value == null) {
        unsetUserAgeType();
      } else {
        this.userAgeType = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case AUTHURL_FIELD_ID:
      return this.authUrl;
    case USERAGETYPE_FIELD_ID:
      return this.userAgeType;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case AUTHURL_FIELD_ID:
      return isSetAuthUrl();
    case USERAGETYPE_FIELD_ID:
      return isSetUserAgeType();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case AUTHURL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.authUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case USERAGETYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.userAgeType = iprot.readI32();
              this.__isset_userAgeType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authUrl != null) {
        oprot.writeFieldBegin(AUTH_URL_FIELD_DESC);
        oprot.writeString(this.authUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_AGE_TYPE_FIELD_DESC);
      oprot.writeI32(this.userAgeType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "AgeCheckDocomoResult(";
    var first : Bool = true;

    ret += "authUrl:";
    if (this.authUrl == null) {
      ret += "null";
    } else {
      ret += this.authUrl;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "userAgeType:";
    var userAgeType_name : String = .UserAgeType.VALUES_TO_NAMES[this.userAgeType];
    if (userAgeType_name != null) {
      ret += userAgeType_name;
      ret += " (";
    }
    ret += this.userAgeType;
    if (userAgeType_name != null) {
      ret += ")";
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetUserAgeType() && !.UserAgeType.VALID_VALUES.contains(userAgeType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'userAgeType' has been assigned the invalid value " + userAgeType);
    }
  }

}

