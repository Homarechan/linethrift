/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class Chatapp implements TBase {
  
  static var STRUCT_DESC = { new TStruct("Chatapp"); };
  static var CHATAPP_ID_FIELD_DESC = { new TField("chatappId", TType.STRING, 1); };
  static var NAME_FIELD_DESC = { new TField("name", TType.STRING, 2); };
  static var ICON_FIELD_DESC = { new TField("icon", TType.STRING, 3); };
  static var URL_FIELD_DESC = { new TField("url", TType.STRING, 4); };
  static var AVAILABLE_CHAT_TYPES_FIELD_DESC = { new TField("availableChatTypes", TType.LIST, 5); };

  @:isVar
  public var chatappId(get,set) : String;
  @:isVar
  public var name(get,set) : String;
  @:isVar
  public var icon(get,set) : String;
  @:isVar
  public var url(get,set) : String;
  @:isVar
  public var availableChatTypes(get,set) : List< Int>;

  inline static var CHATAPPID_FIELD_ID : Int = 1;
  inline static var NAME_FIELD_ID : Int = 2;
  inline static var ICON_FIELD_ID : Int = 3;
  inline static var URL_FIELD_ID : Int = 4;
  inline static var AVAILABLECHATTYPES_FIELD_ID : Int = 5;


  public function new() {
  }

  public function get_chatappId() : String {
    return this.chatappId;
  }

  public function set_chatappId(chatappId:String) : String {
    this.chatappId = chatappId;
    return this.chatappId;
  }

  public function unsetChatappId() : Void {
    this.chatappId = null;
  }

  // Returns true if field chatappId is set (has been assigned a value) and false otherwise
  public function isSetChatappId() : Bool {
    return this.chatappId != null;
  }

  public function get_name() : String {
    return this.name;
  }

  public function set_name(name:String) : String {
    this.name = name;
    return this.name;
  }

  public function unsetName() : Void {
    this.name = null;
  }

  // Returns true if field name is set (has been assigned a value) and false otherwise
  public function isSetName() : Bool {
    return this.name != null;
  }

  public function get_icon() : String {
    return this.icon;
  }

  public function set_icon(icon:String) : String {
    this.icon = icon;
    return this.icon;
  }

  public function unsetIcon() : Void {
    this.icon = null;
  }

  // Returns true if field icon is set (has been assigned a value) and false otherwise
  public function isSetIcon() : Bool {
    return this.icon != null;
  }

  public function get_url() : String {
    return this.url;
  }

  public function set_url(url:String) : String {
    this.url = url;
    return this.url;
  }

  public function unsetUrl() : Void {
    this.url = null;
  }

  // Returns true if field url is set (has been assigned a value) and false otherwise
  public function isSetUrl() : Bool {
    return this.url != null;
  }

  public function get_availableChatTypes() : List< Int> {
    return this.availableChatTypes;
  }

  public function set_availableChatTypes(availableChatTypes:List< Int>) : List< Int> {
    this.availableChatTypes = availableChatTypes;
    return this.availableChatTypes;
  }

  public function unsetAvailableChatTypes() : Void {
    this.availableChatTypes = null;
  }

  // Returns true if field availableChatTypes is set (has been assigned a value) and false otherwise
  public function isSetAvailableChatTypes() : Bool {
    return this.availableChatTypes != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case CHATAPPID_FIELD_ID:
      if (value == null) {
        unsetChatappId();
      } else {
        this.chatappId = value;
      }

    case NAME_FIELD_ID:
      if (value == null) {
        unsetName();
      } else {
        this.name = value;
      }

    case ICON_FIELD_ID:
      if (value == null) {
        unsetIcon();
      } else {
        this.icon = value;
      }

    case URL_FIELD_ID:
      if (value == null) {
        unsetUrl();
      } else {
        this.url = value;
      }

    case AVAILABLECHATTYPES_FIELD_ID:
      if (value == null) {
        unsetAvailableChatTypes();
      } else {
        this.availableChatTypes = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case CHATAPPID_FIELD_ID:
      return this.chatappId;
    case NAME_FIELD_ID:
      return this.name;
    case ICON_FIELD_ID:
      return this.icon;
    case URL_FIELD_ID:
      return this.url;
    case AVAILABLECHATTYPES_FIELD_ID:
      return this.availableChatTypes;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case CHATAPPID_FIELD_ID:
      return isSetChatappId();
    case NAME_FIELD_ID:
      return isSetName();
    case ICON_FIELD_ID:
      return isSetIcon();
    case URL_FIELD_ID:
      return isSetUrl();
    case AVAILABLECHATTYPES_FIELD_ID:
      return isSetAvailableChatTypes();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case CHATAPPID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.chatappId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ICON_FIELD_ID:
            if (field.type == TType.STRING) {
              this.icon = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case URL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.url = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case AVAILABLECHATTYPES_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list0 = iprot.readListBegin();
                this.availableChatTypes = new List< Int>();
                for( _i1 in 0 ... _list0.size)
                {
                  var _elem2 : Int;
                  _elem2 = iprot.readI32();
                  this.availableChatTypes.add(_elem2);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.chatappId != null) {
        oprot.writeFieldBegin(CHATAPP_ID_FIELD_DESC);
        oprot.writeString(this.chatappId);
        oprot.writeFieldEnd();
      }
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.icon != null) {
        oprot.writeFieldBegin(ICON_FIELD_DESC);
        oprot.writeString(this.icon);
        oprot.writeFieldEnd();
      }
      if (this.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(this.url);
        oprot.writeFieldEnd();
      }
      if (this.availableChatTypes != null) {
        oprot.writeFieldBegin(AVAILABLE_CHAT_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.availableChatTypes.length));
          for( elem3 in this.availableChatTypes)
          {
            oprot.writeI32(elem3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "Chatapp(";
    var first : Bool = true;

    ret += "chatappId:";
    if (this.chatappId == null) {
      ret += "null";
    } else {
      ret += this.chatappId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "name:";
    if (this.name == null) {
      ret += "null";
    } else {
      ret += this.name;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "icon:";
    if (this.icon == null) {
      ret += "null";
    } else {
      ret += this.icon;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "url:";
    if (this.url == null) {
      ret += "null";
    } else {
      ret += this.url;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "availableChatTypes:";
    if (this.availableChatTypes == null) {
      ret += "null";
    } else {
      ret += this.availableChatTypes;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

