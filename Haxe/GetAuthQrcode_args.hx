/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class GetAuthQrcode_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("getAuthQrcode_args"); };
  static var KEEP_LOGGED_IN_FIELD_DESC = { new TField("keepLoggedIn", TType.BOOL, 2); };
  static var SYSTEM_NAME_FIELD_DESC = { new TField("systemName", TType.STRING, 3); };

  @:isVar
  public var keepLoggedIn(get,set) : Bool;
  @:isVar
  public var systemName(get,set) : String;

  inline static var KEEPLOGGEDIN_FIELD_ID : Int = 2;
  inline static var SYSTEMNAME_FIELD_ID : Int = 3;

  private var __isset_keepLoggedIn : Bool = false;

  public function new() {
  }

  public function get_keepLoggedIn() : Bool {
    return this.keepLoggedIn;
  }

  public function set_keepLoggedIn(keepLoggedIn:Bool) : Bool {
    this.keepLoggedIn = keepLoggedIn;
    this.__isset_keepLoggedIn = true;
    return this.keepLoggedIn;
  }

  public function unsetKeepLoggedIn() : Void {
    this.__isset_keepLoggedIn = false;
  }

  // Returns true if field keepLoggedIn is set (has been assigned a value) and false otherwise
  public function isSetKeepLoggedIn() : Bool {
    return this.__isset_keepLoggedIn;
  }

  public function get_systemName() : String {
    return this.systemName;
  }

  public function set_systemName(systemName:String) : String {
    this.systemName = systemName;
    return this.systemName;
  }

  public function unsetSystemName() : Void {
    this.systemName = null;
  }

  // Returns true if field systemName is set (has been assigned a value) and false otherwise
  public function isSetSystemName() : Bool {
    return this.systemName != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case KEEPLOGGEDIN_FIELD_ID:
      if (value == null) {
        unsetKeepLoggedIn();
      } else {
        this.keepLoggedIn = value;
      }

    case SYSTEMNAME_FIELD_ID:
      if (value == null) {
        unsetSystemName();
      } else {
        this.systemName = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case KEEPLOGGEDIN_FIELD_ID:
      return this.keepLoggedIn;
    case SYSTEMNAME_FIELD_ID:
      return this.systemName;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case KEEPLOGGEDIN_FIELD_ID:
      return isSetKeepLoggedIn();
    case SYSTEMNAME_FIELD_ID:
      return isSetSystemName();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case KEEPLOGGEDIN_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.keepLoggedIn = iprot.readBool();
              this.__isset_keepLoggedIn = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SYSTEMNAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.systemName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(KEEP_LOGGED_IN_FIELD_DESC);
      oprot.writeBool(this.keepLoggedIn);
      oprot.writeFieldEnd();
      if (this.systemName != null) {
        oprot.writeFieldBegin(SYSTEM_NAME_FIELD_DESC);
        oprot.writeString(this.systemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "getAuthQrcode_args(";
    var first : Bool = true;

    ret += "keepLoggedIn:";
    ret += this.keepLoggedIn;
    first = false;
    if (!first) ret +=  ", ";
    ret += "systemName:";
    if (this.systemName == null) {
      ret += "null";
    } else {
      ret += this.systemName;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

