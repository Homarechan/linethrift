/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class StickerProperty implements TBase {
  
  static var STRUCT_DESC = { new TStruct("StickerProperty"); };
  static var HAS_ANIMATION_FIELD_DESC = { new TField("hasAnimation", TType.BOOL, 1); };
  static var HAS_SOUND_FIELD_DESC = { new TField("hasSound", TType.BOOL, 2); };
  static var HAS_POPUP_FIELD_DESC = { new TField("hasPopup", TType.BOOL, 3); };
  static var STICKER_RESOURCE_TYPE_FIELD_DESC = { new TField("stickerResourceType", TType.I32, 4); };
  static var STICKER_OPTIONS_FIELD_DESC = { new TField("stickerOptions", TType.STRING, 5); };
  static var COMPACT_STICKER_OPTIONS_FIELD_DESC = { new TField("compactStickerOptions", TType.I32, 6); };
  static var STICKER_HASH_FIELD_DESC = { new TField("stickerHash", TType.STRING, 7); };
  static var STICKER_IDS_FIELD_DESC = { new TField("stickerIds", TType.SET, 8); };

  @:isVar
  public var hasAnimation(get,set) : Bool;
  @:isVar
  public var hasSound(get,set) : Bool;
  @:isVar
  public var hasPopup(get,set) : Bool;
  @:isVar
  public var stickerResourceType(get,set) : Int;
  @:isVar
  public var stickerOptions(get,set) : String;
  @:isVar
  public var compactStickerOptions(get,set) : haxe.Int32;
  @:isVar
  public var stickerHash(get,set) : String;
  @:isVar
  public var stickerIds(get,set) : StringSet;

  inline static var HASANIMATION_FIELD_ID : Int = 1;
  inline static var HASSOUND_FIELD_ID : Int = 2;
  inline static var HASPOPUP_FIELD_ID : Int = 3;
  inline static var STICKERRESOURCETYPE_FIELD_ID : Int = 4;
  inline static var STICKEROPTIONS_FIELD_ID : Int = 5;
  inline static var COMPACTSTICKEROPTIONS_FIELD_ID : Int = 6;
  inline static var STICKERHASH_FIELD_ID : Int = 7;
  inline static var STICKERIDS_FIELD_ID : Int = 8;

  private var __isset_hasAnimation : Bool = false;
  private var __isset_hasSound : Bool = false;
  private var __isset_hasPopup : Bool = false;
  private var __isset_stickerResourceType : Bool = false;
  private var __isset_compactStickerOptions : Bool = false;

  public function new() {
  }

  public function get_hasAnimation() : Bool {
    return this.hasAnimation;
  }

  public function set_hasAnimation(hasAnimation:Bool) : Bool {
    this.hasAnimation = hasAnimation;
    this.__isset_hasAnimation = true;
    return this.hasAnimation;
  }

  public function unsetHasAnimation() : Void {
    this.__isset_hasAnimation = false;
  }

  // Returns true if field hasAnimation is set (has been assigned a value) and false otherwise
  public function isSetHasAnimation() : Bool {
    return this.__isset_hasAnimation;
  }

  public function get_hasSound() : Bool {
    return this.hasSound;
  }

  public function set_hasSound(hasSound:Bool) : Bool {
    this.hasSound = hasSound;
    this.__isset_hasSound = true;
    return this.hasSound;
  }

  public function unsetHasSound() : Void {
    this.__isset_hasSound = false;
  }

  // Returns true if field hasSound is set (has been assigned a value) and false otherwise
  public function isSetHasSound() : Bool {
    return this.__isset_hasSound;
  }

  public function get_hasPopup() : Bool {
    return this.hasPopup;
  }

  public function set_hasPopup(hasPopup:Bool) : Bool {
    this.hasPopup = hasPopup;
    this.__isset_hasPopup = true;
    return this.hasPopup;
  }

  public function unsetHasPopup() : Void {
    this.__isset_hasPopup = false;
  }

  // Returns true if field hasPopup is set (has been assigned a value) and false otherwise
  public function isSetHasPopup() : Bool {
    return this.__isset_hasPopup;
  }

  public function get_stickerResourceType() : Int {
    return this.stickerResourceType;
  }

  public function set_stickerResourceType(stickerResourceType:Int) : Int {
    this.stickerResourceType = stickerResourceType;
    this.__isset_stickerResourceType = true;
    return this.stickerResourceType;
  }

  public function unsetStickerResourceType() : Void {
    this.__isset_stickerResourceType = false;
  }

  // Returns true if field stickerResourceType is set (has been assigned a value) and false otherwise
  public function isSetStickerResourceType() : Bool {
    return this.__isset_stickerResourceType;
  }

  public function get_stickerOptions() : String {
    return this.stickerOptions;
  }

  public function set_stickerOptions(stickerOptions:String) : String {
    this.stickerOptions = stickerOptions;
    return this.stickerOptions;
  }

  public function unsetStickerOptions() : Void {
    this.stickerOptions = null;
  }

  // Returns true if field stickerOptions is set (has been assigned a value) and false otherwise
  public function isSetStickerOptions() : Bool {
    return this.stickerOptions != null;
  }

  public function get_compactStickerOptions() : haxe.Int32 {
    return this.compactStickerOptions;
  }

  public function set_compactStickerOptions(compactStickerOptions:haxe.Int32) : haxe.Int32 {
    this.compactStickerOptions = compactStickerOptions;
    this.__isset_compactStickerOptions = true;
    return this.compactStickerOptions;
  }

  public function unsetCompactStickerOptions() : Void {
    this.__isset_compactStickerOptions = false;
  }

  // Returns true if field compactStickerOptions is set (has been assigned a value) and false otherwise
  public function isSetCompactStickerOptions() : Bool {
    return this.__isset_compactStickerOptions;
  }

  public function get_stickerHash() : String {
    return this.stickerHash;
  }

  public function set_stickerHash(stickerHash:String) : String {
    this.stickerHash = stickerHash;
    return this.stickerHash;
  }

  public function unsetStickerHash() : Void {
    this.stickerHash = null;
  }

  // Returns true if field stickerHash is set (has been assigned a value) and false otherwise
  public function isSetStickerHash() : Bool {
    return this.stickerHash != null;
  }

  public function get_stickerIds() : StringSet {
    return this.stickerIds;
  }

  public function set_stickerIds(stickerIds:StringSet) : StringSet {
    this.stickerIds = stickerIds;
    return this.stickerIds;
  }

  public function unsetStickerIds() : Void {
    this.stickerIds = null;
  }

  // Returns true if field stickerIds is set (has been assigned a value) and false otherwise
  public function isSetStickerIds() : Bool {
    return this.stickerIds != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case HASANIMATION_FIELD_ID:
      if (value == null) {
        unsetHasAnimation();
      } else {
        this.hasAnimation = value;
      }

    case HASSOUND_FIELD_ID:
      if (value == null) {
        unsetHasSound();
      } else {
        this.hasSound = value;
      }

    case HASPOPUP_FIELD_ID:
      if (value == null) {
        unsetHasPopup();
      } else {
        this.hasPopup = value;
      }

    case STICKERRESOURCETYPE_FIELD_ID:
      if (value == null) {
        unsetStickerResourceType();
      } else {
        this.stickerResourceType = value;
      }

    case STICKEROPTIONS_FIELD_ID:
      if (value == null) {
        unsetStickerOptions();
      } else {
        this.stickerOptions = value;
      }

    case COMPACTSTICKEROPTIONS_FIELD_ID:
      if (value == null) {
        unsetCompactStickerOptions();
      } else {
        this.compactStickerOptions = value;
      }

    case STICKERHASH_FIELD_ID:
      if (value == null) {
        unsetStickerHash();
      } else {
        this.stickerHash = value;
      }

    case STICKERIDS_FIELD_ID:
      if (value == null) {
        unsetStickerIds();
      } else {
        this.stickerIds = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case HASANIMATION_FIELD_ID:
      return this.hasAnimation;
    case HASSOUND_FIELD_ID:
      return this.hasSound;
    case HASPOPUP_FIELD_ID:
      return this.hasPopup;
    case STICKERRESOURCETYPE_FIELD_ID:
      return this.stickerResourceType;
    case STICKEROPTIONS_FIELD_ID:
      return this.stickerOptions;
    case COMPACTSTICKEROPTIONS_FIELD_ID:
      return this.compactStickerOptions;
    case STICKERHASH_FIELD_ID:
      return this.stickerHash;
    case STICKERIDS_FIELD_ID:
      return this.stickerIds;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case HASANIMATION_FIELD_ID:
      return isSetHasAnimation();
    case HASSOUND_FIELD_ID:
      return isSetHasSound();
    case HASPOPUP_FIELD_ID:
      return isSetHasPopup();
    case STICKERRESOURCETYPE_FIELD_ID:
      return isSetStickerResourceType();
    case STICKEROPTIONS_FIELD_ID:
      return isSetStickerOptions();
    case COMPACTSTICKEROPTIONS_FIELD_ID:
      return isSetCompactStickerOptions();
    case STICKERHASH_FIELD_ID:
      return isSetStickerHash();
    case STICKERIDS_FIELD_ID:
      return isSetStickerIds();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case HASANIMATION_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.hasAnimation = iprot.readBool();
              this.__isset_hasAnimation = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case HASSOUND_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.hasSound = iprot.readBool();
              this.__isset_hasSound = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case HASPOPUP_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.hasPopup = iprot.readBool();
              this.__isset_hasPopup = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case STICKERRESOURCETYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.stickerResourceType = iprot.readI32();
              this.__isset_stickerResourceType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case STICKEROPTIONS_FIELD_ID:
            if (field.type == TType.STRING) {
              this.stickerOptions = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case COMPACTSTICKEROPTIONS_FIELD_ID:
            if (field.type == TType.I32) {
              this.compactStickerOptions = iprot.readI32();
              this.__isset_compactStickerOptions = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case STICKERHASH_FIELD_ID:
            if (field.type == TType.STRING) {
              this.stickerHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case STICKERIDS_FIELD_ID:
            if (field.type == TType.SET) {
              {
                var _set50 = iprot.readSetBegin();
                this.stickerIds = new StringSet();
                for( _i51 in 0 ... _set50.size)
                {
                  var _elem52 : String;
                  _elem52 = iprot.readString();
                  this.stickerIds.add(_elem52);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(HAS_ANIMATION_FIELD_DESC);
      oprot.writeBool(this.hasAnimation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_SOUND_FIELD_DESC);
      oprot.writeBool(this.hasSound);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_POPUP_FIELD_DESC);
      oprot.writeBool(this.hasPopup);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STICKER_RESOURCE_TYPE_FIELD_DESC);
      oprot.writeI32(this.stickerResourceType);
      oprot.writeFieldEnd();
      if (this.stickerOptions != null) {
        oprot.writeFieldBegin(STICKER_OPTIONS_FIELD_DESC);
        oprot.writeString(this.stickerOptions);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMPACT_STICKER_OPTIONS_FIELD_DESC);
      oprot.writeI32(this.compactStickerOptions);
      oprot.writeFieldEnd();
      if (this.stickerHash != null) {
        oprot.writeFieldBegin(STICKER_HASH_FIELD_DESC);
        oprot.writeString(this.stickerHash);
        oprot.writeFieldEnd();
      }
      if (this.stickerIds != null) {
        oprot.writeFieldBegin(STICKER_IDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.STRING, this.stickerIds.size));
          for( elem53 in this.stickerIds.toArray())
          {
            oprot.writeString(elem53);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "StickerProperty(";
    var first : Bool = true;

    ret += "hasAnimation:";
    ret += this.hasAnimation;
    first = false;
    if (!first) ret +=  ", ";
    ret += "hasSound:";
    ret += this.hasSound;
    first = false;
    if (!first) ret +=  ", ";
    ret += "hasPopup:";
    ret += this.hasPopup;
    first = false;
    if (!first) ret +=  ", ";
    ret += "stickerResourceType:";
    var stickerResourceType_name : String = .SRType.VALUES_TO_NAMES[this.stickerResourceType];
    if (stickerResourceType_name != null) {
      ret += stickerResourceType_name;
      ret += " (";
    }
    ret += this.stickerResourceType;
    if (stickerResourceType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "stickerOptions:";
    if (this.stickerOptions == null) {
      ret += "null";
    } else {
      ret += this.stickerOptions;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "compactStickerOptions:";
    ret += this.compactStickerOptions;
    first = false;
    if (!first) ret +=  ", ";
    ret += "stickerHash:";
    if (this.stickerHash == null) {
      ret += "null";
    } else {
      ret += this.stickerHash;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "stickerIds:";
    if (this.stickerIds == null) {
      ret += "null";
    } else {
      ret += this.stickerIds;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetStickerResourceType() && !.SRType.VALID_VALUES.contains(stickerResourceType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'stickerResourceType' has been assigned the invalid value " + stickerResourceType);
    }
  }

}

