/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class ContactReport implements TBase {
  
  static var STRUCT_DESC = { new TStruct("ContactReport"); };
  static var MID_FIELD_DESC = { new TField("mid", TType.STRING, 1); };
  static var EXISTS_FIELD_DESC = { new TField("exists", TType.BOOL, 2); };
  static var CONTACT_FIELD_DESC = { new TField("contact", TType.STRUCT, 3); };

  @:isVar
  public var mid(get,set) : String;
  @:isVar
  public var exists(get,set) : Bool;
  @:isVar
  public var contact(get,set) : Contact;

  inline static var MID_FIELD_ID : Int = 1;
  inline static var EXISTS_FIELD_ID : Int = 2;
  inline static var CONTACT_FIELD_ID : Int = 3;

  private var __isset_exists : Bool = false;

  public function new() {
  }

  public function get_mid() : String {
    return this.mid;
  }

  public function set_mid(mid:String) : String {
    this.mid = mid;
    return this.mid;
  }

  public function unsetMid() : Void {
    this.mid = null;
  }

  // Returns true if field mid is set (has been assigned a value) and false otherwise
  public function isSetMid() : Bool {
    return this.mid != null;
  }

  public function get_exists() : Bool {
    return this.exists;
  }

  public function set_exists(exists:Bool) : Bool {
    this.exists = exists;
    this.__isset_exists = true;
    return this.exists;
  }

  public function unsetExists() : Void {
    this.__isset_exists = false;
  }

  // Returns true if field exists is set (has been assigned a value) and false otherwise
  public function isSetExists() : Bool {
    return this.__isset_exists;
  }

  public function get_contact() : Contact {
    return this.contact;
  }

  public function set_contact(contact:Contact) : Contact {
    this.contact = contact;
    return this.contact;
  }

  public function unsetContact() : Void {
    this.contact = null;
  }

  // Returns true if field contact is set (has been assigned a value) and false otherwise
  public function isSetContact() : Bool {
    return this.contact != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case MID_FIELD_ID:
      if (value == null) {
        unsetMid();
      } else {
        this.mid = value;
      }

    case EXISTS_FIELD_ID:
      if (value == null) {
        unsetExists();
      } else {
        this.exists = value;
      }

    case CONTACT_FIELD_ID:
      if (value == null) {
        unsetContact();
      } else {
        this.contact = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case MID_FIELD_ID:
      return this.mid;
    case EXISTS_FIELD_ID:
      return this.exists;
    case CONTACT_FIELD_ID:
      return this.contact;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case MID_FIELD_ID:
      return isSetMid();
    case EXISTS_FIELD_ID:
      return isSetExists();
    case CONTACT_FIELD_ID:
      return isSetContact();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case EXISTS_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.exists = iprot.readBool();
              this.__isset_exists = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CONTACT_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.contact = new Contact();
              this.contact.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXISTS_FIELD_DESC);
      oprot.writeBool(this.exists);
      oprot.writeFieldEnd();
      if (this.contact != null) {
        oprot.writeFieldBegin(CONTACT_FIELD_DESC);
        this.contact.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "ContactReport(";
    var first : Bool = true;

    ret += "mid:";
    if (this.mid == null) {
      ret += "null";
    } else {
      ret += this.mid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "exists:";
    ret += this.exists;
    first = false;
    if (!first) ret +=  ", ";
    ret += "contact:";
    if (this.contact == null) {
      ret += "null";
    } else {
      ret += this.contact;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

