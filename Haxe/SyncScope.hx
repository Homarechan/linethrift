/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SyncScope implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SyncScope"); };
  static var SYNC_PROFILE_FIELD_DESC = { new TField("syncProfile", TType.BOOL, 1); };
  static var SYNC_SETTINGS_FIELD_DESC = { new TField("syncSettings", TType.BOOL, 2); };
  static var SYNC_STICKER_FIELD_DESC = { new TField("syncSticker", TType.BOOL, 3); };
  static var SYNC_THEME_SHOP_FIELD_DESC = { new TField("syncThemeShop", TType.BOOL, 4); };
  static var CONTACT_FIELD_DESC = { new TField("contact", TType.STRUCT, 10); };
  static var GROUP_FIELD_DESC = { new TField("group", TType.STRUCT, 11); };
  static var ROOM_FIELD_DESC = { new TField("room", TType.STRUCT, 12); };
  static var CHAT_FIELD_DESC = { new TField("chat", TType.STRUCT, 13); };

  @:isVar
  public var syncProfile(get,set) : Bool;
  @:isVar
  public var syncSettings(get,set) : Bool;
  @:isVar
  public var syncSticker(get,set) : Bool;
  @:isVar
  public var syncThemeShop(get,set) : Bool;
  @:isVar
  public var contact(get,set) : SyncRelations;
  @:isVar
  public var group(get,set) : SyncRelations;
  @:isVar
  public var room(get,set) : SyncRelations;
  @:isVar
  public var chat(get,set) : SyncRelations;

  inline static var SYNCPROFILE_FIELD_ID : Int = 1;
  inline static var SYNCSETTINGS_FIELD_ID : Int = 2;
  inline static var SYNCSTICKER_FIELD_ID : Int = 3;
  inline static var SYNCTHEMESHOP_FIELD_ID : Int = 4;
  inline static var CONTACT_FIELD_ID : Int = 10;
  inline static var GROUP_FIELD_ID : Int = 11;
  inline static var ROOM_FIELD_ID : Int = 12;
  inline static var CHAT_FIELD_ID : Int = 13;

  private var __isset_syncProfile : Bool = false;
  private var __isset_syncSettings : Bool = false;
  private var __isset_syncSticker : Bool = false;
  private var __isset_syncThemeShop : Bool = false;

  public function new() {
  }

  public function get_syncProfile() : Bool {
    return this.syncProfile;
  }

  public function set_syncProfile(syncProfile:Bool) : Bool {
    this.syncProfile = syncProfile;
    this.__isset_syncProfile = true;
    return this.syncProfile;
  }

  public function unsetSyncProfile() : Void {
    this.__isset_syncProfile = false;
  }

  // Returns true if field syncProfile is set (has been assigned a value) and false otherwise
  public function isSetSyncProfile() : Bool {
    return this.__isset_syncProfile;
  }

  public function get_syncSettings() : Bool {
    return this.syncSettings;
  }

  public function set_syncSettings(syncSettings:Bool) : Bool {
    this.syncSettings = syncSettings;
    this.__isset_syncSettings = true;
    return this.syncSettings;
  }

  public function unsetSyncSettings() : Void {
    this.__isset_syncSettings = false;
  }

  // Returns true if field syncSettings is set (has been assigned a value) and false otherwise
  public function isSetSyncSettings() : Bool {
    return this.__isset_syncSettings;
  }

  public function get_syncSticker() : Bool {
    return this.syncSticker;
  }

  public function set_syncSticker(syncSticker:Bool) : Bool {
    this.syncSticker = syncSticker;
    this.__isset_syncSticker = true;
    return this.syncSticker;
  }

  public function unsetSyncSticker() : Void {
    this.__isset_syncSticker = false;
  }

  // Returns true if field syncSticker is set (has been assigned a value) and false otherwise
  public function isSetSyncSticker() : Bool {
    return this.__isset_syncSticker;
  }

  public function get_syncThemeShop() : Bool {
    return this.syncThemeShop;
  }

  public function set_syncThemeShop(syncThemeShop:Bool) : Bool {
    this.syncThemeShop = syncThemeShop;
    this.__isset_syncThemeShop = true;
    return this.syncThemeShop;
  }

  public function unsetSyncThemeShop() : Void {
    this.__isset_syncThemeShop = false;
  }

  // Returns true if field syncThemeShop is set (has been assigned a value) and false otherwise
  public function isSetSyncThemeShop() : Bool {
    return this.__isset_syncThemeShop;
  }

  public function get_contact() : SyncRelations {
    return this.contact;
  }

  public function set_contact(contact:SyncRelations) : SyncRelations {
    this.contact = contact;
    return this.contact;
  }

  public function unsetContact() : Void {
    this.contact = null;
  }

  // Returns true if field contact is set (has been assigned a value) and false otherwise
  public function isSetContact() : Bool {
    return this.contact != null;
  }

  public function get_group() : SyncRelations {
    return this.group;
  }

  public function set_group(group:SyncRelations) : SyncRelations {
    this.group = group;
    return this.group;
  }

  public function unsetGroup() : Void {
    this.group = null;
  }

  // Returns true if field group is set (has been assigned a value) and false otherwise
  public function isSetGroup() : Bool {
    return this.group != null;
  }

  public function get_room() : SyncRelations {
    return this.room;
  }

  public function set_room(room:SyncRelations) : SyncRelations {
    this.room = room;
    return this.room;
  }

  public function unsetRoom() : Void {
    this.room = null;
  }

  // Returns true if field room is set (has been assigned a value) and false otherwise
  public function isSetRoom() : Bool {
    return this.room != null;
  }

  public function get_chat() : SyncRelations {
    return this.chat;
  }

  public function set_chat(chat:SyncRelations) : SyncRelations {
    this.chat = chat;
    return this.chat;
  }

  public function unsetChat() : Void {
    this.chat = null;
  }

  // Returns true if field chat is set (has been assigned a value) and false otherwise
  public function isSetChat() : Bool {
    return this.chat != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case SYNCPROFILE_FIELD_ID:
      if (value == null) {
        unsetSyncProfile();
      } else {
        this.syncProfile = value;
      }

    case SYNCSETTINGS_FIELD_ID:
      if (value == null) {
        unsetSyncSettings();
      } else {
        this.syncSettings = value;
      }

    case SYNCSTICKER_FIELD_ID:
      if (value == null) {
        unsetSyncSticker();
      } else {
        this.syncSticker = value;
      }

    case SYNCTHEMESHOP_FIELD_ID:
      if (value == null) {
        unsetSyncThemeShop();
      } else {
        this.syncThemeShop = value;
      }

    case CONTACT_FIELD_ID:
      if (value == null) {
        unsetContact();
      } else {
        this.contact = value;
      }

    case GROUP_FIELD_ID:
      if (value == null) {
        unsetGroup();
      } else {
        this.group = value;
      }

    case ROOM_FIELD_ID:
      if (value == null) {
        unsetRoom();
      } else {
        this.room = value;
      }

    case CHAT_FIELD_ID:
      if (value == null) {
        unsetChat();
      } else {
        this.chat = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case SYNCPROFILE_FIELD_ID:
      return this.syncProfile;
    case SYNCSETTINGS_FIELD_ID:
      return this.syncSettings;
    case SYNCSTICKER_FIELD_ID:
      return this.syncSticker;
    case SYNCTHEMESHOP_FIELD_ID:
      return this.syncThemeShop;
    case CONTACT_FIELD_ID:
      return this.contact;
    case GROUP_FIELD_ID:
      return this.group;
    case ROOM_FIELD_ID:
      return this.room;
    case CHAT_FIELD_ID:
      return this.chat;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case SYNCPROFILE_FIELD_ID:
      return isSetSyncProfile();
    case SYNCSETTINGS_FIELD_ID:
      return isSetSyncSettings();
    case SYNCSTICKER_FIELD_ID:
      return isSetSyncSticker();
    case SYNCTHEMESHOP_FIELD_ID:
      return isSetSyncThemeShop();
    case CONTACT_FIELD_ID:
      return isSetContact();
    case GROUP_FIELD_ID:
      return isSetGroup();
    case ROOM_FIELD_ID:
      return isSetRoom();
    case CHAT_FIELD_ID:
      return isSetChat();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SYNCPROFILE_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.syncProfile = iprot.readBool();
              this.__isset_syncProfile = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SYNCSETTINGS_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.syncSettings = iprot.readBool();
              this.__isset_syncSettings = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SYNCSTICKER_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.syncSticker = iprot.readBool();
              this.__isset_syncSticker = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SYNCTHEMESHOP_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.syncThemeShop = iprot.readBool();
              this.__isset_syncThemeShop = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CONTACT_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.contact = new SyncRelations();
              this.contact.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case GROUP_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.group = new SyncRelations();
              this.group.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ROOM_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.room = new SyncRelations();
              this.room.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CHAT_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.chat = new SyncRelations();
              this.chat.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SYNC_PROFILE_FIELD_DESC);
      oprot.writeBool(this.syncProfile);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SYNC_SETTINGS_FIELD_DESC);
      oprot.writeBool(this.syncSettings);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SYNC_STICKER_FIELD_DESC);
      oprot.writeBool(this.syncSticker);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SYNC_THEME_SHOP_FIELD_DESC);
      oprot.writeBool(this.syncThemeShop);
      oprot.writeFieldEnd();
      if (this.contact != null) {
        oprot.writeFieldBegin(CONTACT_FIELD_DESC);
        this.contact.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.group != null) {
        oprot.writeFieldBegin(GROUP_FIELD_DESC);
        this.group.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.room != null) {
        oprot.writeFieldBegin(ROOM_FIELD_DESC);
        this.room.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.chat != null) {
        oprot.writeFieldBegin(CHAT_FIELD_DESC);
        this.chat.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SyncScope(";
    var first : Bool = true;

    ret += "syncProfile:";
    ret += this.syncProfile;
    first = false;
    if (!first) ret +=  ", ";
    ret += "syncSettings:";
    ret += this.syncSettings;
    first = false;
    if (!first) ret +=  ", ";
    ret += "syncSticker:";
    ret += this.syncSticker;
    first = false;
    if (!first) ret +=  ", ";
    ret += "syncThemeShop:";
    ret += this.syncThemeShop;
    first = false;
    if (!first) ret +=  ", ";
    ret += "contact:";
    if (this.contact == null) {
      ret += "null";
    } else {
      ret += this.contact;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "group:";
    if (this.group == null) {
      ret += "null";
    } else {
      ret += this.group;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "room:";
    if (this.room == null) {
      ret += "null";
    } else {
      ret += this.room;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "chat:";
    if (this.chat == null) {
      ret += "null";
    } else {
      ret += this.chat;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

