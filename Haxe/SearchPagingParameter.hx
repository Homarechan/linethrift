/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SearchPagingParameter implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SearchPagingParameter"); };
  static var COLLECTION_FIELD_DESC = { new TField("collection", TType.I32, 1); };
  static var START_FIELD_DESC = { new TField("start", TType.I32, 2); };
  static var LENGTH_FIELD_DESC = { new TField("length", TType.I32, 3); };
  static var COMMON_PARAM_FIELD_DESC = { new TField("commonParam", TType.STRUCT, 4); };

  @:isVar
  public var collection(get,set) : haxe.Int32;
  @:isVar
  public var start(get,set) : haxe.Int32;
  @:isVar
  public var length(get,set) : haxe.Int32;
  @:isVar
  public var commonParam(get,set) : SearchCommonParameter;

  inline static var COLLECTION_FIELD_ID : Int = 1;
  inline static var START_FIELD_ID : Int = 2;
  inline static var LENGTH_FIELD_ID : Int = 3;
  inline static var COMMONPARAM_FIELD_ID : Int = 4;

  private var __isset_collection : Bool = false;
  private var __isset_start : Bool = false;
  private var __isset_length : Bool = false;

  public function new() {
  }

  public function get_collection() : haxe.Int32 {
    return this.collection;
  }

  public function set_collection(collection:haxe.Int32) : haxe.Int32 {
    this.collection = collection;
    this.__isset_collection = true;
    return this.collection;
  }

  public function unsetCollection() : Void {
    this.__isset_collection = false;
  }

  // Returns true if field collection is set (has been assigned a value) and false otherwise
  public function isSetCollection() : Bool {
    return this.__isset_collection;
  }

  public function get_start() : haxe.Int32 {
    return this.start;
  }

  public function set_start(start:haxe.Int32) : haxe.Int32 {
    this.start = start;
    this.__isset_start = true;
    return this.start;
  }

  public function unsetStart() : Void {
    this.__isset_start = false;
  }

  // Returns true if field start is set (has been assigned a value) and false otherwise
  public function isSetStart() : Bool {
    return this.__isset_start;
  }

  public function get_length() : haxe.Int32 {
    return this.length;
  }

  public function set_length(length:haxe.Int32) : haxe.Int32 {
    this.length = length;
    this.__isset_length = true;
    return this.length;
  }

  public function unsetLength() : Void {
    this.__isset_length = false;
  }

  // Returns true if field length is set (has been assigned a value) and false otherwise
  public function isSetLength() : Bool {
    return this.__isset_length;
  }

  public function get_commonParam() : SearchCommonParameter {
    return this.commonParam;
  }

  public function set_commonParam(commonParam:SearchCommonParameter) : SearchCommonParameter {
    this.commonParam = commonParam;
    return this.commonParam;
  }

  public function unsetCommonParam() : Void {
    this.commonParam = null;
  }

  // Returns true if field commonParam is set (has been assigned a value) and false otherwise
  public function isSetCommonParam() : Bool {
    return this.commonParam != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case COLLECTION_FIELD_ID:
      if (value == null) {
        unsetCollection();
      } else {
        this.collection = value;
      }

    case START_FIELD_ID:
      if (value == null) {
        unsetStart();
      } else {
        this.start = value;
      }

    case LENGTH_FIELD_ID:
      if (value == null) {
        unsetLength();
      } else {
        this.length = value;
      }

    case COMMONPARAM_FIELD_ID:
      if (value == null) {
        unsetCommonParam();
      } else {
        this.commonParam = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case COLLECTION_FIELD_ID:
      return this.collection;
    case START_FIELD_ID:
      return this.start;
    case LENGTH_FIELD_ID:
      return this.length;
    case COMMONPARAM_FIELD_ID:
      return this.commonParam;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case COLLECTION_FIELD_ID:
      return isSetCollection();
    case START_FIELD_ID:
      return isSetStart();
    case LENGTH_FIELD_ID:
      return isSetLength();
    case COMMONPARAM_FIELD_ID:
      return isSetCommonParam();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case COLLECTION_FIELD_ID:
            if (field.type == TType.I32) {
              this.collection = iprot.readI32();
              this.__isset_collection = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case START_FIELD_ID:
            if (field.type == TType.I32) {
              this.start = iprot.readI32();
              this.__isset_start = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case LENGTH_FIELD_ID:
            if (field.type == TType.I32) {
              this.length = iprot.readI32();
              this.__isset_length = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case COMMONPARAM_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.commonParam = new SearchCommonParameter();
              this.commonParam.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
      oprot.writeI32(this.collection);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI32(this.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI32(this.length);
      oprot.writeFieldEnd();
      if (this.commonParam != null) {
        oprot.writeFieldBegin(COMMON_PARAM_FIELD_DESC);
        this.commonParam.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SearchPagingParameter(";
    var first : Bool = true;

    ret += "collection:";
    ret += this.collection;
    first = false;
    if (!first) ret +=  ", ";
    ret += "start:";
    ret += this.start;
    first = false;
    if (!first) ret +=  ", ";
    ret += "length:";
    ret += this.length;
    first = false;
    if (!first) ret +=  ", ";
    ret += "commonParam:";
    if (this.commonParam == null) {
      ret += "null";
    } else {
      ret += this.commonParam;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

