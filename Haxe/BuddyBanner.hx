/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class BuddyBanner implements TBase {
  
  static var STRUCT_DESC = { new TStruct("BuddyBanner"); };
  static var BUDDY_BANNER_LINK_TYPE_FIELD_DESC = { new TField("buddyBannerLinkType", TType.I32, 1); };
  static var BUDDY_BANNER_LINK_FIELD_DESC = { new TField("buddyBannerLink", TType.STRING, 2); };
  static var BUDDY_BANNER_IMAGE_URL_FIELD_DESC = { new TField("buddyBannerImageUrl", TType.STRING, 3); };

  @:isVar
  public var buddyBannerLinkType(get,set) : Int;
  @:isVar
  public var buddyBannerLink(get,set) : String;
  @:isVar
  public var buddyBannerImageUrl(get,set) : String;

  inline static var BUDDYBANNERLINKTYPE_FIELD_ID : Int = 1;
  inline static var BUDDYBANNERLINK_FIELD_ID : Int = 2;
  inline static var BUDDYBANNERIMAGEURL_FIELD_ID : Int = 3;

  private var __isset_buddyBannerLinkType : Bool = false;

  public function new() {
  }

  public function get_buddyBannerLinkType() : Int {
    return this.buddyBannerLinkType;
  }

  public function set_buddyBannerLinkType(buddyBannerLinkType:Int) : Int {
    this.buddyBannerLinkType = buddyBannerLinkType;
    this.__isset_buddyBannerLinkType = true;
    return this.buddyBannerLinkType;
  }

  public function unsetBuddyBannerLinkType() : Void {
    this.__isset_buddyBannerLinkType = false;
  }

  // Returns true if field buddyBannerLinkType is set (has been assigned a value) and false otherwise
  public function isSetBuddyBannerLinkType() : Bool {
    return this.__isset_buddyBannerLinkType;
  }

  public function get_buddyBannerLink() : String {
    return this.buddyBannerLink;
  }

  public function set_buddyBannerLink(buddyBannerLink:String) : String {
    this.buddyBannerLink = buddyBannerLink;
    return this.buddyBannerLink;
  }

  public function unsetBuddyBannerLink() : Void {
    this.buddyBannerLink = null;
  }

  // Returns true if field buddyBannerLink is set (has been assigned a value) and false otherwise
  public function isSetBuddyBannerLink() : Bool {
    return this.buddyBannerLink != null;
  }

  public function get_buddyBannerImageUrl() : String {
    return this.buddyBannerImageUrl;
  }

  public function set_buddyBannerImageUrl(buddyBannerImageUrl:String) : String {
    this.buddyBannerImageUrl = buddyBannerImageUrl;
    return this.buddyBannerImageUrl;
  }

  public function unsetBuddyBannerImageUrl() : Void {
    this.buddyBannerImageUrl = null;
  }

  // Returns true if field buddyBannerImageUrl is set (has been assigned a value) and false otherwise
  public function isSetBuddyBannerImageUrl() : Bool {
    return this.buddyBannerImageUrl != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case BUDDYBANNERLINKTYPE_FIELD_ID:
      if (value == null) {
        unsetBuddyBannerLinkType();
      } else {
        this.buddyBannerLinkType = value;
      }

    case BUDDYBANNERLINK_FIELD_ID:
      if (value == null) {
        unsetBuddyBannerLink();
      } else {
        this.buddyBannerLink = value;
      }

    case BUDDYBANNERIMAGEURL_FIELD_ID:
      if (value == null) {
        unsetBuddyBannerImageUrl();
      } else {
        this.buddyBannerImageUrl = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case BUDDYBANNERLINKTYPE_FIELD_ID:
      return this.buddyBannerLinkType;
    case BUDDYBANNERLINK_FIELD_ID:
      return this.buddyBannerLink;
    case BUDDYBANNERIMAGEURL_FIELD_ID:
      return this.buddyBannerImageUrl;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case BUDDYBANNERLINKTYPE_FIELD_ID:
      return isSetBuddyBannerLinkType();
    case BUDDYBANNERLINK_FIELD_ID:
      return isSetBuddyBannerLink();
    case BUDDYBANNERIMAGEURL_FIELD_ID:
      return isSetBuddyBannerImageUrl();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BUDDYBANNERLINKTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.buddyBannerLinkType = iprot.readI32();
              this.__isset_buddyBannerLinkType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case BUDDYBANNERLINK_FIELD_ID:
            if (field.type == TType.STRING) {
              this.buddyBannerLink = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case BUDDYBANNERIMAGEURL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.buddyBannerImageUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BUDDY_BANNER_LINK_TYPE_FIELD_DESC);
      oprot.writeI32(this.buddyBannerLinkType);
      oprot.writeFieldEnd();
      if (this.buddyBannerLink != null) {
        oprot.writeFieldBegin(BUDDY_BANNER_LINK_FIELD_DESC);
        oprot.writeString(this.buddyBannerLink);
        oprot.writeFieldEnd();
      }
      if (this.buddyBannerImageUrl != null) {
        oprot.writeFieldBegin(BUDDY_BANNER_IMAGE_URL_FIELD_DESC);
        oprot.writeString(this.buddyBannerImageUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "BuddyBanner(";
    var first : Bool = true;

    ret += "buddyBannerLinkType:";
    var buddyBannerLinkType_name : String = .BuddyBannerLinkType.VALUES_TO_NAMES[this.buddyBannerLinkType];
    if (buddyBannerLinkType_name != null) {
      ret += buddyBannerLinkType_name;
      ret += " (";
    }
    ret += this.buddyBannerLinkType;
    if (buddyBannerLinkType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "buddyBannerLink:";
    if (this.buddyBannerLink == null) {
      ret += "null";
    } else {
      ret += this.buddyBannerLink;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "buddyBannerImageUrl:";
    if (this.buddyBannerImageUrl == null) {
      ret += "null";
    } else {
      ret += this.buddyBannerImageUrl;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetBuddyBannerLinkType() && !.BuddyBannerLinkType.VALID_VALUES.contains(buddyBannerLinkType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'buddyBannerLinkType' has been assigned the invalid value " + buddyBannerLinkType);
    }
  }

}

