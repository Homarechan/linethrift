/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class PromotionInfo implements TBase {
  
  static var STRUCT_DESC = { new TStruct("PromotionInfo"); };
  static var PROMOTION_TYPE_FIELD_DESC = { new TField("promotionType", TType.I32, 1); };
  static var BUDDY_INFO_FIELD_DESC = { new TField("buddyInfo", TType.STRUCT, 51); };
  static var PROMOTION_DETAIL_FIELD_DESC = { new TField("promotionDetail", TType.STRUCT, 2); };

  @:isVar
  public var promotionType(get,set) : Int;
  @:isVar
  public var buddyInfo(get,set) : PromotionBuddyInfo;
  @:isVar
  public var promotionDetail(get,set) : PromotionDetail;

  inline static var PROMOTIONTYPE_FIELD_ID : Int = 1;
  inline static var BUDDYINFO_FIELD_ID : Int = 51;
  inline static var PROMOTIONDETAIL_FIELD_ID : Int = 2;

  private var __isset_promotionType : Bool = false;

  public function new() {
  }

  public function get_promotionType() : Int {
    return this.promotionType;
  }

  public function set_promotionType(promotionType:Int) : Int {
    this.promotionType = promotionType;
    this.__isset_promotionType = true;
    return this.promotionType;
  }

  public function unsetPromotionType() : Void {
    this.__isset_promotionType = false;
  }

  // Returns true if field promotionType is set (has been assigned a value) and false otherwise
  public function isSetPromotionType() : Bool {
    return this.__isset_promotionType;
  }

  public function get_buddyInfo() : PromotionBuddyInfo {
    return this.buddyInfo;
  }

  public function set_buddyInfo(buddyInfo:PromotionBuddyInfo) : PromotionBuddyInfo {
    this.buddyInfo = buddyInfo;
    return this.buddyInfo;
  }

  public function unsetBuddyInfo() : Void {
    this.buddyInfo = null;
  }

  // Returns true if field buddyInfo is set (has been assigned a value) and false otherwise
  public function isSetBuddyInfo() : Bool {
    return this.buddyInfo != null;
  }

  public function get_promotionDetail() : PromotionDetail {
    return this.promotionDetail;
  }

  public function set_promotionDetail(promotionDetail:PromotionDetail) : PromotionDetail {
    this.promotionDetail = promotionDetail;
    return this.promotionDetail;
  }

  public function unsetPromotionDetail() : Void {
    this.promotionDetail = null;
  }

  // Returns true if field promotionDetail is set (has been assigned a value) and false otherwise
  public function isSetPromotionDetail() : Bool {
    return this.promotionDetail != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case PROMOTIONTYPE_FIELD_ID:
      if (value == null) {
        unsetPromotionType();
      } else {
        this.promotionType = value;
      }

    case BUDDYINFO_FIELD_ID:
      if (value == null) {
        unsetBuddyInfo();
      } else {
        this.buddyInfo = value;
      }

    case PROMOTIONDETAIL_FIELD_ID:
      if (value == null) {
        unsetPromotionDetail();
      } else {
        this.promotionDetail = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case PROMOTIONTYPE_FIELD_ID:
      return this.promotionType;
    case BUDDYINFO_FIELD_ID:
      return this.buddyInfo;
    case PROMOTIONDETAIL_FIELD_ID:
      return this.promotionDetail;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case PROMOTIONTYPE_FIELD_ID:
      return isSetPromotionType();
    case BUDDYINFO_FIELD_ID:
      return isSetBuddyInfo();
    case PROMOTIONDETAIL_FIELD_ID:
      return isSetPromotionDetail();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case PROMOTIONTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.promotionType = iprot.readI32();
              this.__isset_promotionType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case BUDDYINFO_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.buddyInfo = new PromotionBuddyInfo();
              this.buddyInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PROMOTIONDETAIL_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.promotionDetail = new PromotionDetail();
              this.promotionDetail.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROMOTION_TYPE_FIELD_DESC);
      oprot.writeI32(this.promotionType);
      oprot.writeFieldEnd();
      if (this.promotionDetail != null) {
        oprot.writeFieldBegin(PROMOTION_DETAIL_FIELD_DESC);
        this.promotionDetail.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.buddyInfo != null) {
        oprot.writeFieldBegin(BUDDY_INFO_FIELD_DESC);
        this.buddyInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "PromotionInfo(";
    var first : Bool = true;

    ret += "promotionType:";
    var promotionType_name : String = .PromotionType.VALUES_TO_NAMES[this.promotionType];
    if (promotionType_name != null) {
      ret += promotionType_name;
      ret += " (";
    }
    ret += this.promotionType;
    if (promotionType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "buddyInfo:";
    if (this.buddyInfo == null) {
      ret += "null";
    } else {
      ret += this.buddyInfo;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "promotionDetail:";
    if (this.promotionDetail == null) {
      ret += "null";
    } else {
      ret += this.promotionDetail;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetPromotionType() && !.PromotionType.VALID_VALUES.contains(promotionType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'promotionType' has been assigned the invalid value " + promotionType);
    }
  }

}

