/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class PaidCallCurrencyExchangeRate implements TBase {
  
  static var STRUCT_DESC = { new TStruct("PaidCallCurrencyExchangeRate"); };
  static var CURRENCY_CODE_FIELD_DESC = { new TField("currencyCode", TType.STRING, 1); };
  static var CURRENCY_NAME_FIELD_DESC = { new TField("currencyName", TType.STRING, 2); };
  static var CURRENCY_SIGN_FIELD_DESC = { new TField("currencySign", TType.STRING, 3); };
  static var PREFERRED_FIELD_DESC = { new TField("preferred", TType.BOOL, 4); };
  static var COIN_RATE_FIELD_DESC = { new TField("coinRate", TType.STRING, 5); };
  static var CREDIT_RATE_FIELD_DESC = { new TField("creditRate", TType.STRING, 6); };

  @:isVar
  public var currencyCode(get,set) : String;
  @:isVar
  public var currencyName(get,set) : String;
  @:isVar
  public var currencySign(get,set) : String;
  @:isVar
  public var preferred(get,set) : Bool;
  @:isVar
  public var coinRate(get,set) : String;
  @:isVar
  public var creditRate(get,set) : String;

  inline static var CURRENCYCODE_FIELD_ID : Int = 1;
  inline static var CURRENCYNAME_FIELD_ID : Int = 2;
  inline static var CURRENCYSIGN_FIELD_ID : Int = 3;
  inline static var PREFERRED_FIELD_ID : Int = 4;
  inline static var COINRATE_FIELD_ID : Int = 5;
  inline static var CREDITRATE_FIELD_ID : Int = 6;

  private var __isset_preferred : Bool = false;

  public function new() {
  }

  public function get_currencyCode() : String {
    return this.currencyCode;
  }

  public function set_currencyCode(currencyCode:String) : String {
    this.currencyCode = currencyCode;
    return this.currencyCode;
  }

  public function unsetCurrencyCode() : Void {
    this.currencyCode = null;
  }

  // Returns true if field currencyCode is set (has been assigned a value) and false otherwise
  public function isSetCurrencyCode() : Bool {
    return this.currencyCode != null;
  }

  public function get_currencyName() : String {
    return this.currencyName;
  }

  public function set_currencyName(currencyName:String) : String {
    this.currencyName = currencyName;
    return this.currencyName;
  }

  public function unsetCurrencyName() : Void {
    this.currencyName = null;
  }

  // Returns true if field currencyName is set (has been assigned a value) and false otherwise
  public function isSetCurrencyName() : Bool {
    return this.currencyName != null;
  }

  public function get_currencySign() : String {
    return this.currencySign;
  }

  public function set_currencySign(currencySign:String) : String {
    this.currencySign = currencySign;
    return this.currencySign;
  }

  public function unsetCurrencySign() : Void {
    this.currencySign = null;
  }

  // Returns true if field currencySign is set (has been assigned a value) and false otherwise
  public function isSetCurrencySign() : Bool {
    return this.currencySign != null;
  }

  public function get_preferred() : Bool {
    return this.preferred;
  }

  public function set_preferred(preferred:Bool) : Bool {
    this.preferred = preferred;
    this.__isset_preferred = true;
    return this.preferred;
  }

  public function unsetPreferred() : Void {
    this.__isset_preferred = false;
  }

  // Returns true if field preferred is set (has been assigned a value) and false otherwise
  public function isSetPreferred() : Bool {
    return this.__isset_preferred;
  }

  public function get_coinRate() : String {
    return this.coinRate;
  }

  public function set_coinRate(coinRate:String) : String {
    this.coinRate = coinRate;
    return this.coinRate;
  }

  public function unsetCoinRate() : Void {
    this.coinRate = null;
  }

  // Returns true if field coinRate is set (has been assigned a value) and false otherwise
  public function isSetCoinRate() : Bool {
    return this.coinRate != null;
  }

  public function get_creditRate() : String {
    return this.creditRate;
  }

  public function set_creditRate(creditRate:String) : String {
    this.creditRate = creditRate;
    return this.creditRate;
  }

  public function unsetCreditRate() : Void {
    this.creditRate = null;
  }

  // Returns true if field creditRate is set (has been assigned a value) and false otherwise
  public function isSetCreditRate() : Bool {
    return this.creditRate != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case CURRENCYCODE_FIELD_ID:
      if (value == null) {
        unsetCurrencyCode();
      } else {
        this.currencyCode = value;
      }

    case CURRENCYNAME_FIELD_ID:
      if (value == null) {
        unsetCurrencyName();
      } else {
        this.currencyName = value;
      }

    case CURRENCYSIGN_FIELD_ID:
      if (value == null) {
        unsetCurrencySign();
      } else {
        this.currencySign = value;
      }

    case PREFERRED_FIELD_ID:
      if (value == null) {
        unsetPreferred();
      } else {
        this.preferred = value;
      }

    case COINRATE_FIELD_ID:
      if (value == null) {
        unsetCoinRate();
      } else {
        this.coinRate = value;
      }

    case CREDITRATE_FIELD_ID:
      if (value == null) {
        unsetCreditRate();
      } else {
        this.creditRate = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case CURRENCYCODE_FIELD_ID:
      return this.currencyCode;
    case CURRENCYNAME_FIELD_ID:
      return this.currencyName;
    case CURRENCYSIGN_FIELD_ID:
      return this.currencySign;
    case PREFERRED_FIELD_ID:
      return this.preferred;
    case COINRATE_FIELD_ID:
      return this.coinRate;
    case CREDITRATE_FIELD_ID:
      return this.creditRate;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case CURRENCYCODE_FIELD_ID:
      return isSetCurrencyCode();
    case CURRENCYNAME_FIELD_ID:
      return isSetCurrencyName();
    case CURRENCYSIGN_FIELD_ID:
      return isSetCurrencySign();
    case PREFERRED_FIELD_ID:
      return isSetPreferred();
    case COINRATE_FIELD_ID:
      return isSetCoinRate();
    case CREDITRATE_FIELD_ID:
      return isSetCreditRate();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case CURRENCYCODE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.currencyCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CURRENCYNAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.currencyName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CURRENCYSIGN_FIELD_ID:
            if (field.type == TType.STRING) {
              this.currencySign = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PREFERRED_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.preferred = iprot.readBool();
              this.__isset_preferred = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case COINRATE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.coinRate = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CREDITRATE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.creditRate = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.currencyCode != null) {
        oprot.writeFieldBegin(CURRENCY_CODE_FIELD_DESC);
        oprot.writeString(this.currencyCode);
        oprot.writeFieldEnd();
      }
      if (this.currencyName != null) {
        oprot.writeFieldBegin(CURRENCY_NAME_FIELD_DESC);
        oprot.writeString(this.currencyName);
        oprot.writeFieldEnd();
      }
      if (this.currencySign != null) {
        oprot.writeFieldBegin(CURRENCY_SIGN_FIELD_DESC);
        oprot.writeString(this.currencySign);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PREFERRED_FIELD_DESC);
      oprot.writeBool(this.preferred);
      oprot.writeFieldEnd();
      if (this.coinRate != null) {
        oprot.writeFieldBegin(COIN_RATE_FIELD_DESC);
        oprot.writeString(this.coinRate);
        oprot.writeFieldEnd();
      }
      if (this.creditRate != null) {
        oprot.writeFieldBegin(CREDIT_RATE_FIELD_DESC);
        oprot.writeString(this.creditRate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "PaidCallCurrencyExchangeRate(";
    var first : Bool = true;

    ret += "currencyCode:";
    if (this.currencyCode == null) {
      ret += "null";
    } else {
      ret += this.currencyCode;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "currencyName:";
    if (this.currencyName == null) {
      ret += "null";
    } else {
      ret += this.currencyName;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "currencySign:";
    if (this.currencySign == null) {
      ret += "null";
    } else {
      ret += this.currencySign;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "preferred:";
    ret += this.preferred;
    first = false;
    if (!first) ret +=  ", ";
    ret += "coinRate:";
    if (this.coinRate == null) {
      ret += "null";
    } else {
      ret += this.coinRate;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "creditRate:";
    if (this.creditRate == null) {
      ret += "null";
    } else {
      ret += this.creditRate;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

