/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class GetMessageBoxListByStatus_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("getMessageBoxListByStatus_args"); };
  static var CHANNEL_ID_FIELD_DESC = { new TField("channelId", TType.STRING, 2); };
  static var LAST_MESSAGES_COUNT_FIELD_DESC = { new TField("lastMessagesCount", TType.I32, 3); };
  static var STATUS_FIELD_DESC = { new TField("status", TType.I32, 4); };

  @:isVar
  public var channelId(get,set) : String;
  @:isVar
  public var lastMessagesCount(get,set) : haxe.Int32;
  @:isVar
  public var status(get,set) : haxe.Int32;

  inline static var CHANNELID_FIELD_ID : Int = 2;
  inline static var LASTMESSAGESCOUNT_FIELD_ID : Int = 3;
  inline static var STATUS_FIELD_ID : Int = 4;

  private var __isset_lastMessagesCount : Bool = false;
  private var __isset_status : Bool = false;

  public function new() {
  }

  public function get_channelId() : String {
    return this.channelId;
  }

  public function set_channelId(channelId:String) : String {
    this.channelId = channelId;
    return this.channelId;
  }

  public function unsetChannelId() : Void {
    this.channelId = null;
  }

  // Returns true if field channelId is set (has been assigned a value) and false otherwise
  public function isSetChannelId() : Bool {
    return this.channelId != null;
  }

  public function get_lastMessagesCount() : haxe.Int32 {
    return this.lastMessagesCount;
  }

  public function set_lastMessagesCount(lastMessagesCount:haxe.Int32) : haxe.Int32 {
    this.lastMessagesCount = lastMessagesCount;
    this.__isset_lastMessagesCount = true;
    return this.lastMessagesCount;
  }

  public function unsetLastMessagesCount() : Void {
    this.__isset_lastMessagesCount = false;
  }

  // Returns true if field lastMessagesCount is set (has been assigned a value) and false otherwise
  public function isSetLastMessagesCount() : Bool {
    return this.__isset_lastMessagesCount;
  }

  public function get_status() : haxe.Int32 {
    return this.status;
  }

  public function set_status(status:haxe.Int32) : haxe.Int32 {
    this.status = status;
    this.__isset_status = true;
    return this.status;
  }

  public function unsetStatus() : Void {
    this.__isset_status = false;
  }

  // Returns true if field status is set (has been assigned a value) and false otherwise
  public function isSetStatus() : Bool {
    return this.__isset_status;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case CHANNELID_FIELD_ID:
      if (value == null) {
        unsetChannelId();
      } else {
        this.channelId = value;
      }

    case LASTMESSAGESCOUNT_FIELD_ID:
      if (value == null) {
        unsetLastMessagesCount();
      } else {
        this.lastMessagesCount = value;
      }

    case STATUS_FIELD_ID:
      if (value == null) {
        unsetStatus();
      } else {
        this.status = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case CHANNELID_FIELD_ID:
      return this.channelId;
    case LASTMESSAGESCOUNT_FIELD_ID:
      return this.lastMessagesCount;
    case STATUS_FIELD_ID:
      return this.status;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case CHANNELID_FIELD_ID:
      return isSetChannelId();
    case LASTMESSAGESCOUNT_FIELD_ID:
      return isSetLastMessagesCount();
    case STATUS_FIELD_ID:
      return isSetStatus();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case CHANNELID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case LASTMESSAGESCOUNT_FIELD_ID:
            if (field.type == TType.I32) {
              this.lastMessagesCount = iprot.readI32();
              this.__isset_lastMessagesCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case STATUS_FIELD_ID:
            if (field.type == TType.I32) {
              this.status = iprot.readI32();
              this.__isset_status = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_MESSAGES_COUNT_FIELD_DESC);
      oprot.writeI32(this.lastMessagesCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(this.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "getMessageBoxListByStatus_args(";
    var first : Bool = true;

    ret += "channelId:";
    if (this.channelId == null) {
      ret += "null";
    } else {
      ret += this.channelId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "lastMessagesCount:";
    ret += this.lastMessagesCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "status:";
    ret += this.status;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

