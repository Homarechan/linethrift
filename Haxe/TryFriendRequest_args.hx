/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class TryFriendRequest_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("tryFriendRequest_args"); };
  static var MID_OR_EMID_FIELD_DESC = { new TField("midOrEMid", TType.STRING, 1); };
  static var METHOD_FIELD_DESC = { new TField("method", TType.I32, 2); };
  static var FRIEND_REQUEST_PARAMS_FIELD_DESC = { new TField("friendRequestParams", TType.STRING, 3); };

  @:isVar
  public var midOrEMid(get,set) : String;
  @:isVar
  public var method(get,set) : Int;
  @:isVar
  public var friendRequestParams(get,set) : String;

  inline static var MIDOREMID_FIELD_ID : Int = 1;
  inline static var METHOD_FIELD_ID : Int = 2;
  inline static var FRIENDREQUESTPARAMS_FIELD_ID : Int = 3;

  private var __isset_method : Bool = false;

  public function new() {
  }

  public function get_midOrEMid() : String {
    return this.midOrEMid;
  }

  public function set_midOrEMid(midOrEMid:String) : String {
    this.midOrEMid = midOrEMid;
    return this.midOrEMid;
  }

  public function unsetMidOrEMid() : Void {
    this.midOrEMid = null;
  }

  // Returns true if field midOrEMid is set (has been assigned a value) and false otherwise
  public function isSetMidOrEMid() : Bool {
    return this.midOrEMid != null;
  }

  public function get_method() : Int {
    return this.method;
  }

  public function set_method(method:Int) : Int {
    this.method = method;
    this.__isset_method = true;
    return this.method;
  }

  public function unsetMethod() : Void {
    this.__isset_method = false;
  }

  // Returns true if field method is set (has been assigned a value) and false otherwise
  public function isSetMethod() : Bool {
    return this.__isset_method;
  }

  public function get_friendRequestParams() : String {
    return this.friendRequestParams;
  }

  public function set_friendRequestParams(friendRequestParams:String) : String {
    this.friendRequestParams = friendRequestParams;
    return this.friendRequestParams;
  }

  public function unsetFriendRequestParams() : Void {
    this.friendRequestParams = null;
  }

  // Returns true if field friendRequestParams is set (has been assigned a value) and false otherwise
  public function isSetFriendRequestParams() : Bool {
    return this.friendRequestParams != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case MIDOREMID_FIELD_ID:
      if (value == null) {
        unsetMidOrEMid();
      } else {
        this.midOrEMid = value;
      }

    case METHOD_FIELD_ID:
      if (value == null) {
        unsetMethod();
      } else {
        this.method = value;
      }

    case FRIENDREQUESTPARAMS_FIELD_ID:
      if (value == null) {
        unsetFriendRequestParams();
      } else {
        this.friendRequestParams = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case MIDOREMID_FIELD_ID:
      return this.midOrEMid;
    case METHOD_FIELD_ID:
      return this.method;
    case FRIENDREQUESTPARAMS_FIELD_ID:
      return this.friendRequestParams;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case MIDOREMID_FIELD_ID:
      return isSetMidOrEMid();
    case METHOD_FIELD_ID:
      return isSetMethod();
    case FRIENDREQUESTPARAMS_FIELD_ID:
      return isSetFriendRequestParams();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MIDOREMID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.midOrEMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case METHOD_FIELD_ID:
            if (field.type == TType.I32) {
              this.method = iprot.readI32();
              this.__isset_method = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case FRIENDREQUESTPARAMS_FIELD_ID:
            if (field.type == TType.STRING) {
              this.friendRequestParams = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.midOrEMid != null) {
        oprot.writeFieldBegin(MID_OR_EMID_FIELD_DESC);
        oprot.writeString(this.midOrEMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(METHOD_FIELD_DESC);
      oprot.writeI32(this.method);
      oprot.writeFieldEnd();
      if (this.friendRequestParams != null) {
        oprot.writeFieldBegin(FRIEND_REQUEST_PARAMS_FIELD_DESC);
        oprot.writeString(this.friendRequestParams);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "tryFriendRequest_args(";
    var first : Bool = true;

    ret += "midOrEMid:";
    if (this.midOrEMid == null) {
      ret += "null";
    } else {
      ret += this.midOrEMid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "method:";
    var method_name : String = .FriendRequestMethod.VALUES_TO_NAMES[this.method];
    if (method_name != null) {
      ret += method_name;
      ret += " (";
    }
    ret += this.method;
    if (method_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "friendRequestParams:";
    if (this.friendRequestParams == null) {
      ret += "null";
    } else {
      ret += this.friendRequestParams;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetMethod() && !.FriendRequestMethod.VALID_VALUES.contains(method)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'method' has been assigned the invalid value " + method);
    }
  }

}

