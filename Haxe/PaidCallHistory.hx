/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class PaidCallHistory implements TBase {
  
  static var STRUCT_DESC = { new TStruct("PaidCallHistory"); };
  static var SEQ_FIELD_DESC = { new TField("seq", TType.I64, 1); };
  static var TYPE_FIELD_DESC = { new TField("type", TType.I32, 2); };
  static var DIALED_NUMBER_FIELD_DESC = { new TField("dialedNumber", TType.STRING, 3); };
  static var CALLED_NUMBER_FIELD_DESC = { new TField("calledNumber", TType.STRING, 4); };
  static var TO_MID_FIELD_DESC = { new TField("toMid", TType.STRING, 5); };
  static var TO_NAME_FIELD_DESC = { new TField("toName", TType.STRING, 6); };
  static var SETUP_TIME_FIELD_DESC = { new TField("setupTime", TType.I64, 7); };
  static var START_TIME_FIELD_DESC = { new TField("startTime", TType.I64, 8); };
  static var END_TIME_FIELD_DESC = { new TField("endTime", TType.I64, 9); };
  static var DURATION_FIELD_DESC = { new TField("duration", TType.I64, 10); };
  static var TERMINATE_FIELD_DESC = { new TField("terminate", TType.I32, 11); };
  static var PRODUCT_TYPE_FIELD_DESC = { new TField("productType", TType.I32, 12); };
  static var CHARGE_FIELD_DESC = { new TField("charge", TType.I32, 13); };
  static var UNIT_FIELD_DESC = { new TField("unit", TType.STRING, 14); };
  static var RESULT_FIELD_DESC = { new TField("result", TType.STRING, 15); };

  @:isVar
  public var seq(get,set) : haxe.Int64;
  @:isVar
  public var type(get,set) : Int;
  @:isVar
  public var dialedNumber(get,set) : String;
  @:isVar
  public var calledNumber(get,set) : String;
  @:isVar
  public var toMid(get,set) : String;
  @:isVar
  public var toName(get,set) : String;
  @:isVar
  public var setupTime(get,set) : haxe.Int64;
  @:isVar
  public var startTime(get,set) : haxe.Int64;
  @:isVar
  public var endTime(get,set) : haxe.Int64;
  @:isVar
  public var duration(get,set) : haxe.Int64;
  @:isVar
  public var terminate(get,set) : haxe.Int32;
  @:isVar
  public var productType(get,set) : Int;
  @:isVar
  public var charge(get,set) : haxe.Int32;
  @:isVar
  public var unit(get,set) : String;
  @:isVar
  public var result(get,set) : String;

  inline static var SEQ_FIELD_ID : Int = 1;
  inline static var TYPE_FIELD_ID : Int = 2;
  inline static var DIALEDNUMBER_FIELD_ID : Int = 3;
  inline static var CALLEDNUMBER_FIELD_ID : Int = 4;
  inline static var TOMID_FIELD_ID : Int = 5;
  inline static var TONAME_FIELD_ID : Int = 6;
  inline static var SETUPTIME_FIELD_ID : Int = 7;
  inline static var STARTTIME_FIELD_ID : Int = 8;
  inline static var ENDTIME_FIELD_ID : Int = 9;
  inline static var DURATION_FIELD_ID : Int = 10;
  inline static var TERMINATE_FIELD_ID : Int = 11;
  inline static var PRODUCTTYPE_FIELD_ID : Int = 12;
  inline static var CHARGE_FIELD_ID : Int = 13;
  inline static var UNIT_FIELD_ID : Int = 14;
  inline static var RESULT_FIELD_ID : Int = 15;

  private var __isset_seq : Bool = false;
  private var __isset_type : Bool = false;
  private var __isset_setupTime : Bool = false;
  private var __isset_startTime : Bool = false;
  private var __isset_endTime : Bool = false;
  private var __isset_duration : Bool = false;
  private var __isset_terminate : Bool = false;
  private var __isset_productType : Bool = false;
  private var __isset_charge : Bool = false;

  public function new() {
  }

  public function get_seq() : haxe.Int64 {
    return this.seq;
  }

  public function set_seq(seq:haxe.Int64) : haxe.Int64 {
    this.seq = seq;
    this.__isset_seq = true;
    return this.seq;
  }

  public function unsetSeq() : Void {
    this.__isset_seq = false;
  }

  // Returns true if field seq is set (has been assigned a value) and false otherwise
  public function isSetSeq() : Bool {
    return this.__isset_seq;
  }

  public function get_type() : Int {
    return this.type;
  }

  public function set_type(type:Int) : Int {
    this.type = type;
    this.__isset_type = true;
    return this.type;
  }

  public function unsetType() : Void {
    this.__isset_type = false;
  }

  // Returns true if field type is set (has been assigned a value) and false otherwise
  public function isSetType() : Bool {
    return this.__isset_type;
  }

  public function get_dialedNumber() : String {
    return this.dialedNumber;
  }

  public function set_dialedNumber(dialedNumber:String) : String {
    this.dialedNumber = dialedNumber;
    return this.dialedNumber;
  }

  public function unsetDialedNumber() : Void {
    this.dialedNumber = null;
  }

  // Returns true if field dialedNumber is set (has been assigned a value) and false otherwise
  public function isSetDialedNumber() : Bool {
    return this.dialedNumber != null;
  }

  public function get_calledNumber() : String {
    return this.calledNumber;
  }

  public function set_calledNumber(calledNumber:String) : String {
    this.calledNumber = calledNumber;
    return this.calledNumber;
  }

  public function unsetCalledNumber() : Void {
    this.calledNumber = null;
  }

  // Returns true if field calledNumber is set (has been assigned a value) and false otherwise
  public function isSetCalledNumber() : Bool {
    return this.calledNumber != null;
  }

  public function get_toMid() : String {
    return this.toMid;
  }

  public function set_toMid(toMid:String) : String {
    this.toMid = toMid;
    return this.toMid;
  }

  public function unsetToMid() : Void {
    this.toMid = null;
  }

  // Returns true if field toMid is set (has been assigned a value) and false otherwise
  public function isSetToMid() : Bool {
    return this.toMid != null;
  }

  public function get_toName() : String {
    return this.toName;
  }

  public function set_toName(toName:String) : String {
    this.toName = toName;
    return this.toName;
  }

  public function unsetToName() : Void {
    this.toName = null;
  }

  // Returns true if field toName is set (has been assigned a value) and false otherwise
  public function isSetToName() : Bool {
    return this.toName != null;
  }

  public function get_setupTime() : haxe.Int64 {
    return this.setupTime;
  }

  public function set_setupTime(setupTime:haxe.Int64) : haxe.Int64 {
    this.setupTime = setupTime;
    this.__isset_setupTime = true;
    return this.setupTime;
  }

  public function unsetSetupTime() : Void {
    this.__isset_setupTime = false;
  }

  // Returns true if field setupTime is set (has been assigned a value) and false otherwise
  public function isSetSetupTime() : Bool {
    return this.__isset_setupTime;
  }

  public function get_startTime() : haxe.Int64 {
    return this.startTime;
  }

  public function set_startTime(startTime:haxe.Int64) : haxe.Int64 {
    this.startTime = startTime;
    this.__isset_startTime = true;
    return this.startTime;
  }

  public function unsetStartTime() : Void {
    this.__isset_startTime = false;
  }

  // Returns true if field startTime is set (has been assigned a value) and false otherwise
  public function isSetStartTime() : Bool {
    return this.__isset_startTime;
  }

  public function get_endTime() : haxe.Int64 {
    return this.endTime;
  }

  public function set_endTime(endTime:haxe.Int64) : haxe.Int64 {
    this.endTime = endTime;
    this.__isset_endTime = true;
    return this.endTime;
  }

  public function unsetEndTime() : Void {
    this.__isset_endTime = false;
  }

  // Returns true if field endTime is set (has been assigned a value) and false otherwise
  public function isSetEndTime() : Bool {
    return this.__isset_endTime;
  }

  public function get_duration() : haxe.Int64 {
    return this.duration;
  }

  public function set_duration(duration:haxe.Int64) : haxe.Int64 {
    this.duration = duration;
    this.__isset_duration = true;
    return this.duration;
  }

  public function unsetDuration() : Void {
    this.__isset_duration = false;
  }

  // Returns true if field duration is set (has been assigned a value) and false otherwise
  public function isSetDuration() : Bool {
    return this.__isset_duration;
  }

  public function get_terminate() : haxe.Int32 {
    return this.terminate;
  }

  public function set_terminate(terminate:haxe.Int32) : haxe.Int32 {
    this.terminate = terminate;
    this.__isset_terminate = true;
    return this.terminate;
  }

  public function unsetTerminate() : Void {
    this.__isset_terminate = false;
  }

  // Returns true if field terminate is set (has been assigned a value) and false otherwise
  public function isSetTerminate() : Bool {
    return this.__isset_terminate;
  }

  public function get_productType() : Int {
    return this.productType;
  }

  public function set_productType(productType:Int) : Int {
    this.productType = productType;
    this.__isset_productType = true;
    return this.productType;
  }

  public function unsetProductType() : Void {
    this.__isset_productType = false;
  }

  // Returns true if field productType is set (has been assigned a value) and false otherwise
  public function isSetProductType() : Bool {
    return this.__isset_productType;
  }

  public function get_charge() : haxe.Int32 {
    return this.charge;
  }

  public function set_charge(charge:haxe.Int32) : haxe.Int32 {
    this.charge = charge;
    this.__isset_charge = true;
    return this.charge;
  }

  public function unsetCharge() : Void {
    this.__isset_charge = false;
  }

  // Returns true if field charge is set (has been assigned a value) and false otherwise
  public function isSetCharge() : Bool {
    return this.__isset_charge;
  }

  public function get_unit() : String {
    return this.unit;
  }

  public function set_unit(unit:String) : String {
    this.unit = unit;
    return this.unit;
  }

  public function unsetUnit() : Void {
    this.unit = null;
  }

  // Returns true if field unit is set (has been assigned a value) and false otherwise
  public function isSetUnit() : Bool {
    return this.unit != null;
  }

  public function get_result() : String {
    return this.result;
  }

  public function set_result(result:String) : String {
    this.result = result;
    return this.result;
  }

  public function unsetResult() : Void {
    this.result = null;
  }

  // Returns true if field result is set (has been assigned a value) and false otherwise
  public function isSetResult() : Bool {
    return this.result != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case SEQ_FIELD_ID:
      if (value == null) {
        unsetSeq();
      } else {
        this.seq = value;
      }

    case TYPE_FIELD_ID:
      if (value == null) {
        unsetType();
      } else {
        this.type = value;
      }

    case DIALEDNUMBER_FIELD_ID:
      if (value == null) {
        unsetDialedNumber();
      } else {
        this.dialedNumber = value;
      }

    case CALLEDNUMBER_FIELD_ID:
      if (value == null) {
        unsetCalledNumber();
      } else {
        this.calledNumber = value;
      }

    case TOMID_FIELD_ID:
      if (value == null) {
        unsetToMid();
      } else {
        this.toMid = value;
      }

    case TONAME_FIELD_ID:
      if (value == null) {
        unsetToName();
      } else {
        this.toName = value;
      }

    case SETUPTIME_FIELD_ID:
      if (value == null) {
        unsetSetupTime();
      } else {
        this.setupTime = value;
      }

    case STARTTIME_FIELD_ID:
      if (value == null) {
        unsetStartTime();
      } else {
        this.startTime = value;
      }

    case ENDTIME_FIELD_ID:
      if (value == null) {
        unsetEndTime();
      } else {
        this.endTime = value;
      }

    case DURATION_FIELD_ID:
      if (value == null) {
        unsetDuration();
      } else {
        this.duration = value;
      }

    case TERMINATE_FIELD_ID:
      if (value == null) {
        unsetTerminate();
      } else {
        this.terminate = value;
      }

    case PRODUCTTYPE_FIELD_ID:
      if (value == null) {
        unsetProductType();
      } else {
        this.productType = value;
      }

    case CHARGE_FIELD_ID:
      if (value == null) {
        unsetCharge();
      } else {
        this.charge = value;
      }

    case UNIT_FIELD_ID:
      if (value == null) {
        unsetUnit();
      } else {
        this.unit = value;
      }

    case RESULT_FIELD_ID:
      if (value == null) {
        unsetResult();
      } else {
        this.result = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case SEQ_FIELD_ID:
      return this.seq;
    case TYPE_FIELD_ID:
      return this.type;
    case DIALEDNUMBER_FIELD_ID:
      return this.dialedNumber;
    case CALLEDNUMBER_FIELD_ID:
      return this.calledNumber;
    case TOMID_FIELD_ID:
      return this.toMid;
    case TONAME_FIELD_ID:
      return this.toName;
    case SETUPTIME_FIELD_ID:
      return this.setupTime;
    case STARTTIME_FIELD_ID:
      return this.startTime;
    case ENDTIME_FIELD_ID:
      return this.endTime;
    case DURATION_FIELD_ID:
      return this.duration;
    case TERMINATE_FIELD_ID:
      return this.terminate;
    case PRODUCTTYPE_FIELD_ID:
      return this.productType;
    case CHARGE_FIELD_ID:
      return this.charge;
    case UNIT_FIELD_ID:
      return this.unit;
    case RESULT_FIELD_ID:
      return this.result;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case SEQ_FIELD_ID:
      return isSetSeq();
    case TYPE_FIELD_ID:
      return isSetType();
    case DIALEDNUMBER_FIELD_ID:
      return isSetDialedNumber();
    case CALLEDNUMBER_FIELD_ID:
      return isSetCalledNumber();
    case TOMID_FIELD_ID:
      return isSetToMid();
    case TONAME_FIELD_ID:
      return isSetToName();
    case SETUPTIME_FIELD_ID:
      return isSetSetupTime();
    case STARTTIME_FIELD_ID:
      return isSetStartTime();
    case ENDTIME_FIELD_ID:
      return isSetEndTime();
    case DURATION_FIELD_ID:
      return isSetDuration();
    case TERMINATE_FIELD_ID:
      return isSetTerminate();
    case PRODUCTTYPE_FIELD_ID:
      return isSetProductType();
    case CHARGE_FIELD_ID:
      return isSetCharge();
    case UNIT_FIELD_ID:
      return isSetUnit();
    case RESULT_FIELD_ID:
      return isSetResult();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SEQ_FIELD_ID:
            if (field.type == TType.I64) {
              this.seq = iprot.readI64();
              this.__isset_seq = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.type = iprot.readI32();
              this.__isset_type = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DIALEDNUMBER_FIELD_ID:
            if (field.type == TType.STRING) {
              this.dialedNumber = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CALLEDNUMBER_FIELD_ID:
            if (field.type == TType.STRING) {
              this.calledNumber = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TOMID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.toMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TONAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.toName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SETUPTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.setupTime = iprot.readI64();
              this.__isset_setupTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case STARTTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.startTime = iprot.readI64();
              this.__isset_startTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ENDTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.endTime = iprot.readI64();
              this.__isset_endTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DURATION_FIELD_ID:
            if (field.type == TType.I64) {
              this.duration = iprot.readI64();
              this.__isset_duration = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TERMINATE_FIELD_ID:
            if (field.type == TType.I32) {
              this.terminate = iprot.readI32();
              this.__isset_terminate = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PRODUCTTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.productType = iprot.readI32();
              this.__isset_productType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CHARGE_FIELD_ID:
            if (field.type == TType.I32) {
              this.charge = iprot.readI32();
              this.__isset_charge = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case UNIT_FIELD_ID:
            if (field.type == TType.STRING) {
              this.unit = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case RESULT_FIELD_ID:
            if (field.type == TType.STRING) {
              this.result = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI64(this.seq);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type);
      oprot.writeFieldEnd();
      if (this.dialedNumber != null) {
        oprot.writeFieldBegin(DIALED_NUMBER_FIELD_DESC);
        oprot.writeString(this.dialedNumber);
        oprot.writeFieldEnd();
      }
      if (this.calledNumber != null) {
        oprot.writeFieldBegin(CALLED_NUMBER_FIELD_DESC);
        oprot.writeString(this.calledNumber);
        oprot.writeFieldEnd();
      }
      if (this.toMid != null) {
        oprot.writeFieldBegin(TO_MID_FIELD_DESC);
        oprot.writeString(this.toMid);
        oprot.writeFieldEnd();
      }
      if (this.toName != null) {
        oprot.writeFieldBegin(TO_NAME_FIELD_DESC);
        oprot.writeString(this.toName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SETUP_TIME_FIELD_DESC);
      oprot.writeI64(this.setupTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(this.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(this.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DURATION_FIELD_DESC);
      oprot.writeI64(this.duration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TERMINATE_FIELD_DESC);
      oprot.writeI32(this.terminate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_TYPE_FIELD_DESC);
      oprot.writeI32(this.productType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHARGE_FIELD_DESC);
      oprot.writeI32(this.charge);
      oprot.writeFieldEnd();
      if (this.unit != null) {
        oprot.writeFieldBegin(UNIT_FIELD_DESC);
        oprot.writeString(this.unit);
        oprot.writeFieldEnd();
      }
      if (this.result != null) {
        oprot.writeFieldBegin(RESULT_FIELD_DESC);
        oprot.writeString(this.result);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "PaidCallHistory(";
    var first : Bool = true;

    ret += "seq:";
    ret += this.seq;
    first = false;
    if (!first) ret +=  ", ";
    ret += "type:";
    var type_name : String = .PaidCallType.VALUES_TO_NAMES[this.type];
    if (type_name != null) {
      ret += type_name;
      ret += " (";
    }
    ret += this.type;
    if (type_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "dialedNumber:";
    if (this.dialedNumber == null) {
      ret += "null";
    } else {
      ret += this.dialedNumber;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "calledNumber:";
    if (this.calledNumber == null) {
      ret += "null";
    } else {
      ret += this.calledNumber;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "toMid:";
    if (this.toMid == null) {
      ret += "null";
    } else {
      ret += this.toMid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "toName:";
    if (this.toName == null) {
      ret += "null";
    } else {
      ret += this.toName;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "setupTime:";
    ret += this.setupTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "startTime:";
    ret += this.startTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "endTime:";
    ret += this.endTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "duration:";
    ret += this.duration;
    first = false;
    if (!first) ret +=  ", ";
    ret += "terminate:";
    ret += this.terminate;
    first = false;
    if (!first) ret +=  ", ";
    ret += "productType:";
    var productType_name : String = .PaidCallProductType.VALUES_TO_NAMES[this.productType];
    if (productType_name != null) {
      ret += productType_name;
      ret += " (";
    }
    ret += this.productType;
    if (productType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "charge:";
    ret += this.charge;
    first = false;
    if (!first) ret +=  ", ";
    ret += "unit:";
    if (this.unit == null) {
      ret += "null";
    } else {
      ret += this.unit;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "result:";
    if (this.result == null) {
      ret += "null";
    } else {
      ret += this.result;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !.PaidCallType.VALID_VALUES.contains(type)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'type' has been assigned the invalid value " + type);
    }
    if (isSetProductType() && !.PaidCallProductType.VALID_VALUES.contains(productType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'productType' has been assigned the invalid value " + productType);
    }
  }

}

