/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class ChannelToken implements TBase {
  
  static var STRUCT_DESC = { new TStruct("ChannelToken"); };
  static var TOKEN_FIELD_DESC = { new TField("token", TType.STRING, 1); };
  static var OBS_TOKEN_FIELD_DESC = { new TField("obsToken", TType.STRING, 2); };
  static var EXPIRATION_FIELD_DESC = { new TField("expiration", TType.I64, 3); };
  static var REFRESH_TOKEN_FIELD_DESC = { new TField("refreshToken", TType.STRING, 4); };
  static var CHANNEL_ACCESS_TOKEN_FIELD_DESC = { new TField("channelAccessToken", TType.STRING, 5); };

  @:isVar
  public var token(get,set) : String;
  @:isVar
  public var obsToken(get,set) : String;
  @:isVar
  public var expiration(get,set) : haxe.Int64;
  @:isVar
  public var refreshToken(get,set) : String;
  @:isVar
  public var channelAccessToken(get,set) : String;

  inline static var TOKEN_FIELD_ID : Int = 1;
  inline static var OBSTOKEN_FIELD_ID : Int = 2;
  inline static var EXPIRATION_FIELD_ID : Int = 3;
  inline static var REFRESHTOKEN_FIELD_ID : Int = 4;
  inline static var CHANNELACCESSTOKEN_FIELD_ID : Int = 5;

  private var __isset_expiration : Bool = false;

  public function new() {
  }

  public function get_token() : String {
    return this.token;
  }

  public function set_token(token:String) : String {
    this.token = token;
    return this.token;
  }

  public function unsetToken() : Void {
    this.token = null;
  }

  // Returns true if field token is set (has been assigned a value) and false otherwise
  public function isSetToken() : Bool {
    return this.token != null;
  }

  public function get_obsToken() : String {
    return this.obsToken;
  }

  public function set_obsToken(obsToken:String) : String {
    this.obsToken = obsToken;
    return this.obsToken;
  }

  public function unsetObsToken() : Void {
    this.obsToken = null;
  }

  // Returns true if field obsToken is set (has been assigned a value) and false otherwise
  public function isSetObsToken() : Bool {
    return this.obsToken != null;
  }

  public function get_expiration() : haxe.Int64 {
    return this.expiration;
  }

  public function set_expiration(expiration:haxe.Int64) : haxe.Int64 {
    this.expiration = expiration;
    this.__isset_expiration = true;
    return this.expiration;
  }

  public function unsetExpiration() : Void {
    this.__isset_expiration = false;
  }

  // Returns true if field expiration is set (has been assigned a value) and false otherwise
  public function isSetExpiration() : Bool {
    return this.__isset_expiration;
  }

  public function get_refreshToken() : String {
    return this.refreshToken;
  }

  public function set_refreshToken(refreshToken:String) : String {
    this.refreshToken = refreshToken;
    return this.refreshToken;
  }

  public function unsetRefreshToken() : Void {
    this.refreshToken = null;
  }

  // Returns true if field refreshToken is set (has been assigned a value) and false otherwise
  public function isSetRefreshToken() : Bool {
    return this.refreshToken != null;
  }

  public function get_channelAccessToken() : String {
    return this.channelAccessToken;
  }

  public function set_channelAccessToken(channelAccessToken:String) : String {
    this.channelAccessToken = channelAccessToken;
    return this.channelAccessToken;
  }

  public function unsetChannelAccessToken() : Void {
    this.channelAccessToken = null;
  }

  // Returns true if field channelAccessToken is set (has been assigned a value) and false otherwise
  public function isSetChannelAccessToken() : Bool {
    return this.channelAccessToken != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case TOKEN_FIELD_ID:
      if (value == null) {
        unsetToken();
      } else {
        this.token = value;
      }

    case OBSTOKEN_FIELD_ID:
      if (value == null) {
        unsetObsToken();
      } else {
        this.obsToken = value;
      }

    case EXPIRATION_FIELD_ID:
      if (value == null) {
        unsetExpiration();
      } else {
        this.expiration = value;
      }

    case REFRESHTOKEN_FIELD_ID:
      if (value == null) {
        unsetRefreshToken();
      } else {
        this.refreshToken = value;
      }

    case CHANNELACCESSTOKEN_FIELD_ID:
      if (value == null) {
        unsetChannelAccessToken();
      } else {
        this.channelAccessToken = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case TOKEN_FIELD_ID:
      return this.token;
    case OBSTOKEN_FIELD_ID:
      return this.obsToken;
    case EXPIRATION_FIELD_ID:
      return this.expiration;
    case REFRESHTOKEN_FIELD_ID:
      return this.refreshToken;
    case CHANNELACCESSTOKEN_FIELD_ID:
      return this.channelAccessToken;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case TOKEN_FIELD_ID:
      return isSetToken();
    case OBSTOKEN_FIELD_ID:
      return isSetObsToken();
    case EXPIRATION_FIELD_ID:
      return isSetExpiration();
    case REFRESHTOKEN_FIELD_ID:
      return isSetRefreshToken();
    case CHANNELACCESSTOKEN_FIELD_ID:
      return isSetChannelAccessToken();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case TOKEN_FIELD_ID:
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case OBSTOKEN_FIELD_ID:
            if (field.type == TType.STRING) {
              this.obsToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case EXPIRATION_FIELD_ID:
            if (field.type == TType.I64) {
              this.expiration = iprot.readI64();
              this.__isset_expiration = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case REFRESHTOKEN_FIELD_ID:
            if (field.type == TType.STRING) {
              this.refreshToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CHANNELACCESSTOKEN_FIELD_ID:
            if (field.type == TType.STRING) {
              this.channelAccessToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.obsToken != null) {
        oprot.writeFieldBegin(OBS_TOKEN_FIELD_DESC);
        oprot.writeString(this.obsToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPIRATION_FIELD_DESC);
      oprot.writeI64(this.expiration);
      oprot.writeFieldEnd();
      if (this.refreshToken != null) {
        oprot.writeFieldBegin(REFRESH_TOKEN_FIELD_DESC);
        oprot.writeString(this.refreshToken);
        oprot.writeFieldEnd();
      }
      if (this.channelAccessToken != null) {
        oprot.writeFieldBegin(CHANNEL_ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(this.channelAccessToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "ChannelToken(";
    var first : Bool = true;

    ret += "token:";
    if (this.token == null) {
      ret += "null";
    } else {
      ret += this.token;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "obsToken:";
    if (this.obsToken == null) {
      ret += "null";
    } else {
      ret += this.obsToken;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "expiration:";
    ret += this.expiration;
    first = false;
    if (!first) ret +=  ", ";
    ret += "refreshToken:";
    if (this.refreshToken == null) {
      ret += "null";
    } else {
      ret += this.refreshToken;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "channelAccessToken:";
    if (this.channelAccessToken == null) {
      ret += "null";
    } else {
      ret += this.channelAccessToken;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

