/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class CreateSquareChatRequest implements TBase {
  
  static var STRUCT_DESC = { new TStruct("CreateSquareChatRequest"); };
  static var REQ_SEQ_FIELD_DESC = { new TField("reqSeq", TType.I32, 1); };
  static var SQUARE_CHAT_FIELD_DESC = { new TField("squareChat", TType.STRUCT, 2); };
  static var SQUARE_MEMBER_MIDS_FIELD_DESC = { new TField("squareMemberMids", TType.LIST, 3); };

  @:isVar
  public var reqSeq(get,set) : haxe.Int32;
  @:isVar
  public var squareChat(get,set) : SquareChat;
  @:isVar
  public var squareMemberMids(get,set) : List< String>;

  inline static var REQSEQ_FIELD_ID : Int = 1;
  inline static var SQUARECHAT_FIELD_ID : Int = 2;
  inline static var SQUAREMEMBERMIDS_FIELD_ID : Int = 3;

  private var __isset_reqSeq : Bool = false;

  public function new() {
  }

  public function get_reqSeq() : haxe.Int32 {
    return this.reqSeq;
  }

  public function set_reqSeq(reqSeq:haxe.Int32) : haxe.Int32 {
    this.reqSeq = reqSeq;
    this.__isset_reqSeq = true;
    return this.reqSeq;
  }

  public function unsetReqSeq() : Void {
    this.__isset_reqSeq = false;
  }

  // Returns true if field reqSeq is set (has been assigned a value) and false otherwise
  public function isSetReqSeq() : Bool {
    return this.__isset_reqSeq;
  }

  public function get_squareChat() : SquareChat {
    return this.squareChat;
  }

  public function set_squareChat(squareChat:SquareChat) : SquareChat {
    this.squareChat = squareChat;
    return this.squareChat;
  }

  public function unsetSquareChat() : Void {
    this.squareChat = null;
  }

  // Returns true if field squareChat is set (has been assigned a value) and false otherwise
  public function isSetSquareChat() : Bool {
    return this.squareChat != null;
  }

  public function get_squareMemberMids() : List< String> {
    return this.squareMemberMids;
  }

  public function set_squareMemberMids(squareMemberMids:List< String>) : List< String> {
    this.squareMemberMids = squareMemberMids;
    return this.squareMemberMids;
  }

  public function unsetSquareMemberMids() : Void {
    this.squareMemberMids = null;
  }

  // Returns true if field squareMemberMids is set (has been assigned a value) and false otherwise
  public function isSetSquareMemberMids() : Bool {
    return this.squareMemberMids != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case REQSEQ_FIELD_ID:
      if (value == null) {
        unsetReqSeq();
      } else {
        this.reqSeq = value;
      }

    case SQUARECHAT_FIELD_ID:
      if (value == null) {
        unsetSquareChat();
      } else {
        this.squareChat = value;
      }

    case SQUAREMEMBERMIDS_FIELD_ID:
      if (value == null) {
        unsetSquareMemberMids();
      } else {
        this.squareMemberMids = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case REQSEQ_FIELD_ID:
      return this.reqSeq;
    case SQUARECHAT_FIELD_ID:
      return this.squareChat;
    case SQUAREMEMBERMIDS_FIELD_ID:
      return this.squareMemberMids;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case REQSEQ_FIELD_ID:
      return isSetReqSeq();
    case SQUARECHAT_FIELD_ID:
      return isSetSquareChat();
    case SQUAREMEMBERMIDS_FIELD_ID:
      return isSetSquareMemberMids();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case REQSEQ_FIELD_ID:
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              this.__isset_reqSeq = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SQUARECHAT_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.squareChat = new SquareChat();
              this.squareChat.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SQUAREMEMBERMIDS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list316 = iprot.readListBegin();
                this.squareMemberMids = new List< String>();
                for( _i317 in 0 ... _list316.size)
                {
                  var _elem318 : String;
                  _elem318 = iprot.readString();
                  this.squareMemberMids.add(_elem318);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.squareChat != null) {
        oprot.writeFieldBegin(SQUARE_CHAT_FIELD_DESC);
        this.squareChat.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.squareMemberMids != null) {
        oprot.writeFieldBegin(SQUARE_MEMBER_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.squareMemberMids.length));
          for( elem319 in this.squareMemberMids)
          {
            oprot.writeString(elem319);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "CreateSquareChatRequest(";
    var first : Bool = true;

    ret += "reqSeq:";
    ret += this.reqSeq;
    first = false;
    if (!first) ret +=  ", ";
    ret += "squareChat:";
    if (this.squareChat == null) {
      ret += "null";
    } else {
      ret += this.squareChat;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "squareMemberMids:";
    if (this.squareMemberMids == null) {
      ret += "null";
    } else {
      ret += this.squareMemberMids;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

