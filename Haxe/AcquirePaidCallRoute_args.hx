/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class AcquirePaidCallRoute_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("acquirePaidCallRoute_args"); };
  static var PAID_CALL_TYPE_FIELD_DESC = { new TField("paidCallType", TType.I32, 2); };
  static var DIALED_NUMBER_FIELD_DESC = { new TField("dialedNumber", TType.STRING, 3); };
  static var LANGUAGE_FIELD_DESC = { new TField("language", TType.STRING, 4); };
  static var NETWORK_CODE_FIELD_DESC = { new TField("networkCode", TType.STRING, 5); };
  static var DISABLE_CALLER_ID_FIELD_DESC = { new TField("disableCallerId", TType.BOOL, 6); };
  static var REFERER_FIELD_DESC = { new TField("referer", TType.STRING, 7); };
  static var AD_SESSION_ID_FIELD_DESC = { new TField("adSessionId", TType.STRING, 8); };

  @:isVar
  public var paidCallType(get,set) : Int;
  @:isVar
  public var dialedNumber(get,set) : String;
  @:isVar
  public var language(get,set) : String;
  @:isVar
  public var networkCode(get,set) : String;
  @:isVar
  public var disableCallerId(get,set) : Bool;
  @:isVar
  public var referer(get,set) : String;
  @:isVar
  public var adSessionId(get,set) : String;

  inline static var PAIDCALLTYPE_FIELD_ID : Int = 2;
  inline static var DIALEDNUMBER_FIELD_ID : Int = 3;
  inline static var LANGUAGE_FIELD_ID : Int = 4;
  inline static var NETWORKCODE_FIELD_ID : Int = 5;
  inline static var DISABLECALLERID_FIELD_ID : Int = 6;
  inline static var REFERER_FIELD_ID : Int = 7;
  inline static var ADSESSIONID_FIELD_ID : Int = 8;

  private var __isset_paidCallType : Bool = false;
  private var __isset_disableCallerId : Bool = false;

  public function new() {
  }

  public function get_paidCallType() : Int {
    return this.paidCallType;
  }

  public function set_paidCallType(paidCallType:Int) : Int {
    this.paidCallType = paidCallType;
    this.__isset_paidCallType = true;
    return this.paidCallType;
  }

  public function unsetPaidCallType() : Void {
    this.__isset_paidCallType = false;
  }

  // Returns true if field paidCallType is set (has been assigned a value) and false otherwise
  public function isSetPaidCallType() : Bool {
    return this.__isset_paidCallType;
  }

  public function get_dialedNumber() : String {
    return this.dialedNumber;
  }

  public function set_dialedNumber(dialedNumber:String) : String {
    this.dialedNumber = dialedNumber;
    return this.dialedNumber;
  }

  public function unsetDialedNumber() : Void {
    this.dialedNumber = null;
  }

  // Returns true if field dialedNumber is set (has been assigned a value) and false otherwise
  public function isSetDialedNumber() : Bool {
    return this.dialedNumber != null;
  }

  public function get_language() : String {
    return this.language;
  }

  public function set_language(language:String) : String {
    this.language = language;
    return this.language;
  }

  public function unsetLanguage() : Void {
    this.language = null;
  }

  // Returns true if field language is set (has been assigned a value) and false otherwise
  public function isSetLanguage() : Bool {
    return this.language != null;
  }

  public function get_networkCode() : String {
    return this.networkCode;
  }

  public function set_networkCode(networkCode:String) : String {
    this.networkCode = networkCode;
    return this.networkCode;
  }

  public function unsetNetworkCode() : Void {
    this.networkCode = null;
  }

  // Returns true if field networkCode is set (has been assigned a value) and false otherwise
  public function isSetNetworkCode() : Bool {
    return this.networkCode != null;
  }

  public function get_disableCallerId() : Bool {
    return this.disableCallerId;
  }

  public function set_disableCallerId(disableCallerId:Bool) : Bool {
    this.disableCallerId = disableCallerId;
    this.__isset_disableCallerId = true;
    return this.disableCallerId;
  }

  public function unsetDisableCallerId() : Void {
    this.__isset_disableCallerId = false;
  }

  // Returns true if field disableCallerId is set (has been assigned a value) and false otherwise
  public function isSetDisableCallerId() : Bool {
    return this.__isset_disableCallerId;
  }

  public function get_referer() : String {
    return this.referer;
  }

  public function set_referer(referer:String) : String {
    this.referer = referer;
    return this.referer;
  }

  public function unsetReferer() : Void {
    this.referer = null;
  }

  // Returns true if field referer is set (has been assigned a value) and false otherwise
  public function isSetReferer() : Bool {
    return this.referer != null;
  }

  public function get_adSessionId() : String {
    return this.adSessionId;
  }

  public function set_adSessionId(adSessionId:String) : String {
    this.adSessionId = adSessionId;
    return this.adSessionId;
  }

  public function unsetAdSessionId() : Void {
    this.adSessionId = null;
  }

  // Returns true if field adSessionId is set (has been assigned a value) and false otherwise
  public function isSetAdSessionId() : Bool {
    return this.adSessionId != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case PAIDCALLTYPE_FIELD_ID:
      if (value == null) {
        unsetPaidCallType();
      } else {
        this.paidCallType = value;
      }

    case DIALEDNUMBER_FIELD_ID:
      if (value == null) {
        unsetDialedNumber();
      } else {
        this.dialedNumber = value;
      }

    case LANGUAGE_FIELD_ID:
      if (value == null) {
        unsetLanguage();
      } else {
        this.language = value;
      }

    case NETWORKCODE_FIELD_ID:
      if (value == null) {
        unsetNetworkCode();
      } else {
        this.networkCode = value;
      }

    case DISABLECALLERID_FIELD_ID:
      if (value == null) {
        unsetDisableCallerId();
      } else {
        this.disableCallerId = value;
      }

    case REFERER_FIELD_ID:
      if (value == null) {
        unsetReferer();
      } else {
        this.referer = value;
      }

    case ADSESSIONID_FIELD_ID:
      if (value == null) {
        unsetAdSessionId();
      } else {
        this.adSessionId = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case PAIDCALLTYPE_FIELD_ID:
      return this.paidCallType;
    case DIALEDNUMBER_FIELD_ID:
      return this.dialedNumber;
    case LANGUAGE_FIELD_ID:
      return this.language;
    case NETWORKCODE_FIELD_ID:
      return this.networkCode;
    case DISABLECALLERID_FIELD_ID:
      return this.disableCallerId;
    case REFERER_FIELD_ID:
      return this.referer;
    case ADSESSIONID_FIELD_ID:
      return this.adSessionId;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case PAIDCALLTYPE_FIELD_ID:
      return isSetPaidCallType();
    case DIALEDNUMBER_FIELD_ID:
      return isSetDialedNumber();
    case LANGUAGE_FIELD_ID:
      return isSetLanguage();
    case NETWORKCODE_FIELD_ID:
      return isSetNetworkCode();
    case DISABLECALLERID_FIELD_ID:
      return isSetDisableCallerId();
    case REFERER_FIELD_ID:
      return isSetReferer();
    case ADSESSIONID_FIELD_ID:
      return isSetAdSessionId();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case PAIDCALLTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.paidCallType = iprot.readI32();
              this.__isset_paidCallType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DIALEDNUMBER_FIELD_ID:
            if (field.type == TType.STRING) {
              this.dialedNumber = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case LANGUAGE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NETWORKCODE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.networkCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DISABLECALLERID_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.disableCallerId = iprot.readBool();
              this.__isset_disableCallerId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case REFERER_FIELD_ID:
            if (field.type == TType.STRING) {
              this.referer = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ADSESSIONID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.adSessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAID_CALL_TYPE_FIELD_DESC);
      oprot.writeI32(this.paidCallType);
      oprot.writeFieldEnd();
      if (this.dialedNumber != null) {
        oprot.writeFieldBegin(DIALED_NUMBER_FIELD_DESC);
        oprot.writeString(this.dialedNumber);
        oprot.writeFieldEnd();
      }
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.networkCode != null) {
        oprot.writeFieldBegin(NETWORK_CODE_FIELD_DESC);
        oprot.writeString(this.networkCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DISABLE_CALLER_ID_FIELD_DESC);
      oprot.writeBool(this.disableCallerId);
      oprot.writeFieldEnd();
      if (this.referer != null) {
        oprot.writeFieldBegin(REFERER_FIELD_DESC);
        oprot.writeString(this.referer);
        oprot.writeFieldEnd();
      }
      if (this.adSessionId != null) {
        oprot.writeFieldBegin(AD_SESSION_ID_FIELD_DESC);
        oprot.writeString(this.adSessionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "acquirePaidCallRoute_args(";
    var first : Bool = true;

    ret += "paidCallType:";
    var paidCallType_name : String = .PaidCallType.VALUES_TO_NAMES[this.paidCallType];
    if (paidCallType_name != null) {
      ret += paidCallType_name;
      ret += " (";
    }
    ret += this.paidCallType;
    if (paidCallType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "dialedNumber:";
    if (this.dialedNumber == null) {
      ret += "null";
    } else {
      ret += this.dialedNumber;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "language:";
    if (this.language == null) {
      ret += "null";
    } else {
      ret += this.language;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "networkCode:";
    if (this.networkCode == null) {
      ret += "null";
    } else {
      ret += this.networkCode;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "disableCallerId:";
    ret += this.disableCallerId;
    first = false;
    if (!first) ret +=  ", ";
    ret += "referer:";
    if (this.referer == null) {
      ret += "null";
    } else {
      ret += this.referer;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "adSessionId:";
    if (this.adSessionId == null) {
      ret += "null";
    } else {
      ret += this.adSessionId;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetPaidCallType() && !.PaidCallType.VALID_VALUES.contains(paidCallType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'paidCallType' has been assigned the invalid value " + paidCallType);
    }
  }

}

