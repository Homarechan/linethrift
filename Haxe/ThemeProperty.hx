/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class ThemeProperty implements TBase {
  
  static var STRUCT_DESC = { new TStruct("ThemeProperty"); };
  static var THUMBNAIL_URL_FIELD_DESC = { new TField("thumbnailUrl", TType.STRING, 1); };
  static var THEME_RESOURCE_TYPE_FIELD_DESC = { new TField("themeResourceType", TType.I32, 2); };

  @:isVar
  public var thumbnailUrl(get,set) : String;
  @:isVar
  public var themeResourceType(get,set) : Int;

  inline static var THUMBNAILURL_FIELD_ID : Int = 1;
  inline static var THEMERESOURCETYPE_FIELD_ID : Int = 2;

  private var __isset_themeResourceType : Bool = false;

  public function new() {
  }

  public function get_thumbnailUrl() : String {
    return this.thumbnailUrl;
  }

  public function set_thumbnailUrl(thumbnailUrl:String) : String {
    this.thumbnailUrl = thumbnailUrl;
    return this.thumbnailUrl;
  }

  public function unsetThumbnailUrl() : Void {
    this.thumbnailUrl = null;
  }

  // Returns true if field thumbnailUrl is set (has been assigned a value) and false otherwise
  public function isSetThumbnailUrl() : Bool {
    return this.thumbnailUrl != null;
  }

  public function get_themeResourceType() : Int {
    return this.themeResourceType;
  }

  public function set_themeResourceType(themeResourceType:Int) : Int {
    this.themeResourceType = themeResourceType;
    this.__isset_themeResourceType = true;
    return this.themeResourceType;
  }

  public function unsetThemeResourceType() : Void {
    this.__isset_themeResourceType = false;
  }

  // Returns true if field themeResourceType is set (has been assigned a value) and false otherwise
  public function isSetThemeResourceType() : Bool {
    return this.__isset_themeResourceType;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case THUMBNAILURL_FIELD_ID:
      if (value == null) {
        unsetThumbnailUrl();
      } else {
        this.thumbnailUrl = value;
      }

    case THEMERESOURCETYPE_FIELD_ID:
      if (value == null) {
        unsetThemeResourceType();
      } else {
        this.themeResourceType = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case THUMBNAILURL_FIELD_ID:
      return this.thumbnailUrl;
    case THEMERESOURCETYPE_FIELD_ID:
      return this.themeResourceType;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case THUMBNAILURL_FIELD_ID:
      return isSetThumbnailUrl();
    case THEMERESOURCETYPE_FIELD_ID:
      return isSetThemeResourceType();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case THUMBNAILURL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.thumbnailUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case THEMERESOURCETYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.themeResourceType = iprot.readI32();
              this.__isset_themeResourceType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.thumbnailUrl != null) {
        oprot.writeFieldBegin(THUMBNAIL_URL_FIELD_DESC);
        oprot.writeString(this.thumbnailUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(THEME_RESOURCE_TYPE_FIELD_DESC);
      oprot.writeI32(this.themeResourceType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "ThemeProperty(";
    var first : Bool = true;

    ret += "thumbnailUrl:";
    if (this.thumbnailUrl == null) {
      ret += "null";
    } else {
      ret += this.thumbnailUrl;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "themeResourceType:";
    var themeResourceType_name : String = .TRType.VALUES_TO_NAMES[this.themeResourceType];
    if (themeResourceType_name != null) {
      ret += themeResourceType_name;
      ret += " (";
    }
    ret += this.themeResourceType;
    if (themeResourceType_name != null) {
      ret += ")";
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetThemeResourceType() && !.TRType.VALID_VALUES.contains(themeResourceType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'themeResourceType' has been assigned the invalid value " + themeResourceType);
    }
  }

}

