/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class Settings implements TBase {
  
  static var STRUCT_DESC = { new TStruct("Settings"); };
  static var NOTIFICATION_ENABLE_FIELD_DESC = { new TField("notificationEnable", TType.BOOL, 10); };
  static var NOTIFICATION_MUTE_EXPIRATION_FIELD_DESC = { new TField("notificationMuteExpiration", TType.I64, 11); };
  static var NOTIFICATION_NEW_MESSAGE_FIELD_DESC = { new TField("notificationNewMessage", TType.BOOL, 12); };
  static var NOTIFICATION_GROUP_INVITATION_FIELD_DESC = { new TField("notificationGroupInvitation", TType.BOOL, 13); };
  static var NOTIFICATION_SHOW_MESSAGE_FIELD_DESC = { new TField("notificationShowMessage", TType.BOOL, 14); };
  static var NOTIFICATION_INCOMING_CALL_FIELD_DESC = { new TField("notificationIncomingCall", TType.BOOL, 15); };
  static var NOTIFICATION_SOUND_MESSAGE_FIELD_DESC = { new TField("notificationSoundMessage", TType.STRING, 16); };
  static var NOTIFICATION_SOUND_GROUP_FIELD_DESC = { new TField("notificationSoundGroup", TType.STRING, 17); };
  static var NOTIFICATION_DISABLED_WITH_SUB_FIELD_DESC = { new TField("notificationDisabledWithSub", TType.BOOL, 18); };
  static var PRIVACY_SYNC_CONTACTS_FIELD_DESC = { new TField("privacySyncContacts", TType.BOOL, 20); };
  static var PRIVACY_SEARCH_BY_PHONE_NUMBER_FIELD_DESC = { new TField("privacySearchByPhoneNumber", TType.BOOL, 21); };
  static var PRIVACY_SEARCH_BY_USERID_FIELD_DESC = { new TField("privacySearchByUserid", TType.BOOL, 22); };
  static var PRIVACY_SEARCH_BY_EMAIL_FIELD_DESC = { new TField("privacySearchByEmail", TType.BOOL, 23); };
  static var PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN_FIELD_DESC = { new TField("privacyAllowSecondaryDeviceLogin", TType.BOOL, 24); };
  static var PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME_FIELD_DESC = { new TField("privacyProfileImagePostToMyhome", TType.BOOL, 25); };
  static var PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND_FIELD_DESC = { new TField("privacyReceiveMessagesFromNotFriend", TType.BOOL, 26); };
  static var CONTACT_MY_TICKET_FIELD_DESC = { new TField("contactMyTicket", TType.STRING, 30); };
  static var IDENTITY_PROVIDER_FIELD_DESC = { new TField("identityProvider", TType.I32, 40); };
  static var IDENTITY_IDENTIFIER_FIELD_DESC = { new TField("identityIdentifier", TType.STRING, 41); };
  static var SNS_ACCOUNTS_FIELD_DESC = { new TField("snsAccounts", TType.MAP, 42); };
  static var PHONE_REGISTRATION_FIELD_DESC = { new TField("phoneRegistration", TType.BOOL, 43); };
  static var EMAIL_CONFIRMATION_STATUS_FIELD_DESC = { new TField("emailConfirmationStatus", TType.I32, 44); };
  static var PREFERENCE_LOCALE_FIELD_DESC = { new TField("preferenceLocale", TType.STRING, 50); };
  static var CUSTOM_MODES_FIELD_DESC = { new TField("customModes", TType.MAP, 60); };
  static var E2EE_ENABLE_FIELD_DESC = { new TField("e2eeEnable", TType.BOOL, 61); };
  static var HITOKOTO_BACKUP_REQUESTED_FIELD_DESC = { new TField("hitokotoBackupRequested", TType.BOOL, 62); };
  static var PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME_FIELD_DESC = { new TField("privacyProfileMusicPostToMyhome", TType.BOOL, 63); };
  static var PRIVACY_ALLOW_NEARBY_FIELD_DESC = { new TField("privacyAllowNearby", TType.BOOL, 65); };
  static var AGREEMENT_NEARBY_TIME_FIELD_DESC = { new TField("agreementNearbyTime", TType.I64, 66); };
  static var AGREEMENT_SQUARE_TIME_FIELD_DESC = { new TField("agreementSquareTime", TType.I64, 67); };
  static var NOTIFICATION_MENTION_FIELD_DESC = { new TField("notificationMention", TType.BOOL, 68); };
  static var BOT_USE_AGREEMENT_ACCEPTED_AT_FIELD_DESC = { new TField("botUseAgreementAcceptedAt", TType.I64, 69); };

  @:isVar
  public var notificationEnable(get,set) : Bool;
  @:isVar
  public var notificationMuteExpiration(get,set) : haxe.Int64;
  @:isVar
  public var notificationNewMessage(get,set) : Bool;
  @:isVar
  public var notificationGroupInvitation(get,set) : Bool;
  @:isVar
  public var notificationShowMessage(get,set) : Bool;
  @:isVar
  public var notificationIncomingCall(get,set) : Bool;
  @:isVar
  public var notificationSoundMessage(get,set) : String;
  @:isVar
  public var notificationSoundGroup(get,set) : String;
  @:isVar
  public var notificationDisabledWithSub(get,set) : Bool;
  @:isVar
  public var privacySyncContacts(get,set) : Bool;
  @:isVar
  public var privacySearchByPhoneNumber(get,set) : Bool;
  @:isVar
  public var privacySearchByUserid(get,set) : Bool;
  @:isVar
  public var privacySearchByEmail(get,set) : Bool;
  @:isVar
  public var privacyAllowSecondaryDeviceLogin(get,set) : Bool;
  @:isVar
  public var privacyProfileImagePostToMyhome(get,set) : Bool;
  @:isVar
  public var privacyReceiveMessagesFromNotFriend(get,set) : Bool;
  @:isVar
  public var contactMyTicket(get,set) : String;
  @:isVar
  public var identityProvider(get,set) : Int;
  @:isVar
  public var identityIdentifier(get,set) : String;
  @:isVar
  public var snsAccounts(get,set) : IntMap< String>;
  @:isVar
  public var phoneRegistration(get,set) : Bool;
  @:isVar
  public var emailConfirmationStatus(get,set) : Int;
  @:isVar
  public var preferenceLocale(get,set) : String;
  @:isVar
  public var customModes(get,set) : IntMap< String>;
  @:isVar
  public var e2eeEnable(get,set) : Bool;
  @:isVar
  public var hitokotoBackupRequested(get,set) : Bool;
  @:isVar
  public var privacyProfileMusicPostToMyhome(get,set) : Bool;
  @:isVar
  public var privacyAllowNearby(get,set) : Bool;
  @:isVar
  public var agreementNearbyTime(get,set) : haxe.Int64;
  @:isVar
  public var agreementSquareTime(get,set) : haxe.Int64;
  @:isVar
  public var notificationMention(get,set) : Bool;
  @:isVar
  public var botUseAgreementAcceptedAt(get,set) : haxe.Int64;

  inline static var NOTIFICATIONENABLE_FIELD_ID : Int = 10;
  inline static var NOTIFICATIONMUTEEXPIRATION_FIELD_ID : Int = 11;
  inline static var NOTIFICATIONNEWMESSAGE_FIELD_ID : Int = 12;
  inline static var NOTIFICATIONGROUPINVITATION_FIELD_ID : Int = 13;
  inline static var NOTIFICATIONSHOWMESSAGE_FIELD_ID : Int = 14;
  inline static var NOTIFICATIONINCOMINGCALL_FIELD_ID : Int = 15;
  inline static var NOTIFICATIONSOUNDMESSAGE_FIELD_ID : Int = 16;
  inline static var NOTIFICATIONSOUNDGROUP_FIELD_ID : Int = 17;
  inline static var NOTIFICATIONDISABLEDWITHSUB_FIELD_ID : Int = 18;
  inline static var PRIVACYSYNCCONTACTS_FIELD_ID : Int = 20;
  inline static var PRIVACYSEARCHBYPHONENUMBER_FIELD_ID : Int = 21;
  inline static var PRIVACYSEARCHBYUSERID_FIELD_ID : Int = 22;
  inline static var PRIVACYSEARCHBYEMAIL_FIELD_ID : Int = 23;
  inline static var PRIVACYALLOWSECONDARYDEVICELOGIN_FIELD_ID : Int = 24;
  inline static var PRIVACYPROFILEIMAGEPOSTTOMYHOME_FIELD_ID : Int = 25;
  inline static var PRIVACYRECEIVEMESSAGESFROMNOTFRIEND_FIELD_ID : Int = 26;
  inline static var CONTACTMYTICKET_FIELD_ID : Int = 30;
  inline static var IDENTITYPROVIDER_FIELD_ID : Int = 40;
  inline static var IDENTITYIDENTIFIER_FIELD_ID : Int = 41;
  inline static var SNSACCOUNTS_FIELD_ID : Int = 42;
  inline static var PHONEREGISTRATION_FIELD_ID : Int = 43;
  inline static var EMAILCONFIRMATIONSTATUS_FIELD_ID : Int = 44;
  inline static var PREFERENCELOCALE_FIELD_ID : Int = 50;
  inline static var CUSTOMMODES_FIELD_ID : Int = 60;
  inline static var E2EEENABLE_FIELD_ID : Int = 61;
  inline static var HITOKOTOBACKUPREQUESTED_FIELD_ID : Int = 62;
  inline static var PRIVACYPROFILEMUSICPOSTTOMYHOME_FIELD_ID : Int = 63;
  inline static var PRIVACYALLOWNEARBY_FIELD_ID : Int = 65;
  inline static var AGREEMENTNEARBYTIME_FIELD_ID : Int = 66;
  inline static var AGREEMENTSQUARETIME_FIELD_ID : Int = 67;
  inline static var NOTIFICATIONMENTION_FIELD_ID : Int = 68;
  inline static var BOTUSEAGREEMENTACCEPTEDAT_FIELD_ID : Int = 69;

  private var __isset_notificationEnable : Bool = false;
  private var __isset_notificationMuteExpiration : Bool = false;
  private var __isset_notificationNewMessage : Bool = false;
  private var __isset_notificationGroupInvitation : Bool = false;
  private var __isset_notificationShowMessage : Bool = false;
  private var __isset_notificationIncomingCall : Bool = false;
  private var __isset_notificationDisabledWithSub : Bool = false;
  private var __isset_privacySyncContacts : Bool = false;
  private var __isset_privacySearchByPhoneNumber : Bool = false;
  private var __isset_privacySearchByUserid : Bool = false;
  private var __isset_privacySearchByEmail : Bool = false;
  private var __isset_privacyAllowSecondaryDeviceLogin : Bool = false;
  private var __isset_privacyProfileImagePostToMyhome : Bool = false;
  private var __isset_privacyReceiveMessagesFromNotFriend : Bool = false;
  private var __isset_identityProvider : Bool = false;
  private var __isset_phoneRegistration : Bool = false;
  private var __isset_emailConfirmationStatus : Bool = false;
  private var __isset_e2eeEnable : Bool = false;
  private var __isset_hitokotoBackupRequested : Bool = false;
  private var __isset_privacyProfileMusicPostToMyhome : Bool = false;
  private var __isset_privacyAllowNearby : Bool = false;
  private var __isset_agreementNearbyTime : Bool = false;
  private var __isset_agreementSquareTime : Bool = false;
  private var __isset_notificationMention : Bool = false;
  private var __isset_botUseAgreementAcceptedAt : Bool = false;

  public function new() {
  }

  public function get_notificationEnable() : Bool {
    return this.notificationEnable;
  }

  public function set_notificationEnable(notificationEnable:Bool) : Bool {
    this.notificationEnable = notificationEnable;
    this.__isset_notificationEnable = true;
    return this.notificationEnable;
  }

  public function unsetNotificationEnable() : Void {
    this.__isset_notificationEnable = false;
  }

  // Returns true if field notificationEnable is set (has been assigned a value) and false otherwise
  public function isSetNotificationEnable() : Bool {
    return this.__isset_notificationEnable;
  }

  public function get_notificationMuteExpiration() : haxe.Int64 {
    return this.notificationMuteExpiration;
  }

  public function set_notificationMuteExpiration(notificationMuteExpiration:haxe.Int64) : haxe.Int64 {
    this.notificationMuteExpiration = notificationMuteExpiration;
    this.__isset_notificationMuteExpiration = true;
    return this.notificationMuteExpiration;
  }

  public function unsetNotificationMuteExpiration() : Void {
    this.__isset_notificationMuteExpiration = false;
  }

  // Returns true if field notificationMuteExpiration is set (has been assigned a value) and false otherwise
  public function isSetNotificationMuteExpiration() : Bool {
    return this.__isset_notificationMuteExpiration;
  }

  public function get_notificationNewMessage() : Bool {
    return this.notificationNewMessage;
  }

  public function set_notificationNewMessage(notificationNewMessage:Bool) : Bool {
    this.notificationNewMessage = notificationNewMessage;
    this.__isset_notificationNewMessage = true;
    return this.notificationNewMessage;
  }

  public function unsetNotificationNewMessage() : Void {
    this.__isset_notificationNewMessage = false;
  }

  // Returns true if field notificationNewMessage is set (has been assigned a value) and false otherwise
  public function isSetNotificationNewMessage() : Bool {
    return this.__isset_notificationNewMessage;
  }

  public function get_notificationGroupInvitation() : Bool {
    return this.notificationGroupInvitation;
  }

  public function set_notificationGroupInvitation(notificationGroupInvitation:Bool) : Bool {
    this.notificationGroupInvitation = notificationGroupInvitation;
    this.__isset_notificationGroupInvitation = true;
    return this.notificationGroupInvitation;
  }

  public function unsetNotificationGroupInvitation() : Void {
    this.__isset_notificationGroupInvitation = false;
  }

  // Returns true if field notificationGroupInvitation is set (has been assigned a value) and false otherwise
  public function isSetNotificationGroupInvitation() : Bool {
    return this.__isset_notificationGroupInvitation;
  }

  public function get_notificationShowMessage() : Bool {
    return this.notificationShowMessage;
  }

  public function set_notificationShowMessage(notificationShowMessage:Bool) : Bool {
    this.notificationShowMessage = notificationShowMessage;
    this.__isset_notificationShowMessage = true;
    return this.notificationShowMessage;
  }

  public function unsetNotificationShowMessage() : Void {
    this.__isset_notificationShowMessage = false;
  }

  // Returns true if field notificationShowMessage is set (has been assigned a value) and false otherwise
  public function isSetNotificationShowMessage() : Bool {
    return this.__isset_notificationShowMessage;
  }

  public function get_notificationIncomingCall() : Bool {
    return this.notificationIncomingCall;
  }

  public function set_notificationIncomingCall(notificationIncomingCall:Bool) : Bool {
    this.notificationIncomingCall = notificationIncomingCall;
    this.__isset_notificationIncomingCall = true;
    return this.notificationIncomingCall;
  }

  public function unsetNotificationIncomingCall() : Void {
    this.__isset_notificationIncomingCall = false;
  }

  // Returns true if field notificationIncomingCall is set (has been assigned a value) and false otherwise
  public function isSetNotificationIncomingCall() : Bool {
    return this.__isset_notificationIncomingCall;
  }

  public function get_notificationSoundMessage() : String {
    return this.notificationSoundMessage;
  }

  public function set_notificationSoundMessage(notificationSoundMessage:String) : String {
    this.notificationSoundMessage = notificationSoundMessage;
    return this.notificationSoundMessage;
  }

  public function unsetNotificationSoundMessage() : Void {
    this.notificationSoundMessage = null;
  }

  // Returns true if field notificationSoundMessage is set (has been assigned a value) and false otherwise
  public function isSetNotificationSoundMessage() : Bool {
    return this.notificationSoundMessage != null;
  }

  public function get_notificationSoundGroup() : String {
    return this.notificationSoundGroup;
  }

  public function set_notificationSoundGroup(notificationSoundGroup:String) : String {
    this.notificationSoundGroup = notificationSoundGroup;
    return this.notificationSoundGroup;
  }

  public function unsetNotificationSoundGroup() : Void {
    this.notificationSoundGroup = null;
  }

  // Returns true if field notificationSoundGroup is set (has been assigned a value) and false otherwise
  public function isSetNotificationSoundGroup() : Bool {
    return this.notificationSoundGroup != null;
  }

  public function get_notificationDisabledWithSub() : Bool {
    return this.notificationDisabledWithSub;
  }

  public function set_notificationDisabledWithSub(notificationDisabledWithSub:Bool) : Bool {
    this.notificationDisabledWithSub = notificationDisabledWithSub;
    this.__isset_notificationDisabledWithSub = true;
    return this.notificationDisabledWithSub;
  }

  public function unsetNotificationDisabledWithSub() : Void {
    this.__isset_notificationDisabledWithSub = false;
  }

  // Returns true if field notificationDisabledWithSub is set (has been assigned a value) and false otherwise
  public function isSetNotificationDisabledWithSub() : Bool {
    return this.__isset_notificationDisabledWithSub;
  }

  public function get_privacySyncContacts() : Bool {
    return this.privacySyncContacts;
  }

  public function set_privacySyncContacts(privacySyncContacts:Bool) : Bool {
    this.privacySyncContacts = privacySyncContacts;
    this.__isset_privacySyncContacts = true;
    return this.privacySyncContacts;
  }

  public function unsetPrivacySyncContacts() : Void {
    this.__isset_privacySyncContacts = false;
  }

  // Returns true if field privacySyncContacts is set (has been assigned a value) and false otherwise
  public function isSetPrivacySyncContacts() : Bool {
    return this.__isset_privacySyncContacts;
  }

  public function get_privacySearchByPhoneNumber() : Bool {
    return this.privacySearchByPhoneNumber;
  }

  public function set_privacySearchByPhoneNumber(privacySearchByPhoneNumber:Bool) : Bool {
    this.privacySearchByPhoneNumber = privacySearchByPhoneNumber;
    this.__isset_privacySearchByPhoneNumber = true;
    return this.privacySearchByPhoneNumber;
  }

  public function unsetPrivacySearchByPhoneNumber() : Void {
    this.__isset_privacySearchByPhoneNumber = false;
  }

  // Returns true if field privacySearchByPhoneNumber is set (has been assigned a value) and false otherwise
  public function isSetPrivacySearchByPhoneNumber() : Bool {
    return this.__isset_privacySearchByPhoneNumber;
  }

  public function get_privacySearchByUserid() : Bool {
    return this.privacySearchByUserid;
  }

  public function set_privacySearchByUserid(privacySearchByUserid:Bool) : Bool {
    this.privacySearchByUserid = privacySearchByUserid;
    this.__isset_privacySearchByUserid = true;
    return this.privacySearchByUserid;
  }

  public function unsetPrivacySearchByUserid() : Void {
    this.__isset_privacySearchByUserid = false;
  }

  // Returns true if field privacySearchByUserid is set (has been assigned a value) and false otherwise
  public function isSetPrivacySearchByUserid() : Bool {
    return this.__isset_privacySearchByUserid;
  }

  public function get_privacySearchByEmail() : Bool {
    return this.privacySearchByEmail;
  }

  public function set_privacySearchByEmail(privacySearchByEmail:Bool) : Bool {
    this.privacySearchByEmail = privacySearchByEmail;
    this.__isset_privacySearchByEmail = true;
    return this.privacySearchByEmail;
  }

  public function unsetPrivacySearchByEmail() : Void {
    this.__isset_privacySearchByEmail = false;
  }

  // Returns true if field privacySearchByEmail is set (has been assigned a value) and false otherwise
  public function isSetPrivacySearchByEmail() : Bool {
    return this.__isset_privacySearchByEmail;
  }

  public function get_privacyAllowSecondaryDeviceLogin() : Bool {
    return this.privacyAllowSecondaryDeviceLogin;
  }

  public function set_privacyAllowSecondaryDeviceLogin(privacyAllowSecondaryDeviceLogin:Bool) : Bool {
    this.privacyAllowSecondaryDeviceLogin = privacyAllowSecondaryDeviceLogin;
    this.__isset_privacyAllowSecondaryDeviceLogin = true;
    return this.privacyAllowSecondaryDeviceLogin;
  }

  public function unsetPrivacyAllowSecondaryDeviceLogin() : Void {
    this.__isset_privacyAllowSecondaryDeviceLogin = false;
  }

  // Returns true if field privacyAllowSecondaryDeviceLogin is set (has been assigned a value) and false otherwise
  public function isSetPrivacyAllowSecondaryDeviceLogin() : Bool {
    return this.__isset_privacyAllowSecondaryDeviceLogin;
  }

  public function get_privacyProfileImagePostToMyhome() : Bool {
    return this.privacyProfileImagePostToMyhome;
  }

  public function set_privacyProfileImagePostToMyhome(privacyProfileImagePostToMyhome:Bool) : Bool {
    this.privacyProfileImagePostToMyhome = privacyProfileImagePostToMyhome;
    this.__isset_privacyProfileImagePostToMyhome = true;
    return this.privacyProfileImagePostToMyhome;
  }

  public function unsetPrivacyProfileImagePostToMyhome() : Void {
    this.__isset_privacyProfileImagePostToMyhome = false;
  }

  // Returns true if field privacyProfileImagePostToMyhome is set (has been assigned a value) and false otherwise
  public function isSetPrivacyProfileImagePostToMyhome() : Bool {
    return this.__isset_privacyProfileImagePostToMyhome;
  }

  public function get_privacyReceiveMessagesFromNotFriend() : Bool {
    return this.privacyReceiveMessagesFromNotFriend;
  }

  public function set_privacyReceiveMessagesFromNotFriend(privacyReceiveMessagesFromNotFriend:Bool) : Bool {
    this.privacyReceiveMessagesFromNotFriend = privacyReceiveMessagesFromNotFriend;
    this.__isset_privacyReceiveMessagesFromNotFriend = true;
    return this.privacyReceiveMessagesFromNotFriend;
  }

  public function unsetPrivacyReceiveMessagesFromNotFriend() : Void {
    this.__isset_privacyReceiveMessagesFromNotFriend = false;
  }

  // Returns true if field privacyReceiveMessagesFromNotFriend is set (has been assigned a value) and false otherwise
  public function isSetPrivacyReceiveMessagesFromNotFriend() : Bool {
    return this.__isset_privacyReceiveMessagesFromNotFriend;
  }

  public function get_contactMyTicket() : String {
    return this.contactMyTicket;
  }

  public function set_contactMyTicket(contactMyTicket:String) : String {
    this.contactMyTicket = contactMyTicket;
    return this.contactMyTicket;
  }

  public function unsetContactMyTicket() : Void {
    this.contactMyTicket = null;
  }

  // Returns true if field contactMyTicket is set (has been assigned a value) and false otherwise
  public function isSetContactMyTicket() : Bool {
    return this.contactMyTicket != null;
  }

  public function get_identityProvider() : Int {
    return this.identityProvider;
  }

  public function set_identityProvider(identityProvider:Int) : Int {
    this.identityProvider = identityProvider;
    this.__isset_identityProvider = true;
    return this.identityProvider;
  }

  public function unsetIdentityProvider() : Void {
    this.__isset_identityProvider = false;
  }

  // Returns true if field identityProvider is set (has been assigned a value) and false otherwise
  public function isSetIdentityProvider() : Bool {
    return this.__isset_identityProvider;
  }

  public function get_identityIdentifier() : String {
    return this.identityIdentifier;
  }

  public function set_identityIdentifier(identityIdentifier:String) : String {
    this.identityIdentifier = identityIdentifier;
    return this.identityIdentifier;
  }

  public function unsetIdentityIdentifier() : Void {
    this.identityIdentifier = null;
  }

  // Returns true if field identityIdentifier is set (has been assigned a value) and false otherwise
  public function isSetIdentityIdentifier() : Bool {
    return this.identityIdentifier != null;
  }

  public function get_snsAccounts() : IntMap< String> {
    return this.snsAccounts;
  }

  public function set_snsAccounts(snsAccounts:IntMap< String>) : IntMap< String> {
    this.snsAccounts = snsAccounts;
    return this.snsAccounts;
  }

  public function unsetSnsAccounts() : Void {
    this.snsAccounts = null;
  }

  // Returns true if field snsAccounts is set (has been assigned a value) and false otherwise
  public function isSetSnsAccounts() : Bool {
    return this.snsAccounts != null;
  }

  public function get_phoneRegistration() : Bool {
    return this.phoneRegistration;
  }

  public function set_phoneRegistration(phoneRegistration:Bool) : Bool {
    this.phoneRegistration = phoneRegistration;
    this.__isset_phoneRegistration = true;
    return this.phoneRegistration;
  }

  public function unsetPhoneRegistration() : Void {
    this.__isset_phoneRegistration = false;
  }

  // Returns true if field phoneRegistration is set (has been assigned a value) and false otherwise
  public function isSetPhoneRegistration() : Bool {
    return this.__isset_phoneRegistration;
  }

  public function get_emailConfirmationStatus() : Int {
    return this.emailConfirmationStatus;
  }

  public function set_emailConfirmationStatus(emailConfirmationStatus:Int) : Int {
    this.emailConfirmationStatus = emailConfirmationStatus;
    this.__isset_emailConfirmationStatus = true;
    return this.emailConfirmationStatus;
  }

  public function unsetEmailConfirmationStatus() : Void {
    this.__isset_emailConfirmationStatus = false;
  }

  // Returns true if field emailConfirmationStatus is set (has been assigned a value) and false otherwise
  public function isSetEmailConfirmationStatus() : Bool {
    return this.__isset_emailConfirmationStatus;
  }

  public function get_preferenceLocale() : String {
    return this.preferenceLocale;
  }

  public function set_preferenceLocale(preferenceLocale:String) : String {
    this.preferenceLocale = preferenceLocale;
    return this.preferenceLocale;
  }

  public function unsetPreferenceLocale() : Void {
    this.preferenceLocale = null;
  }

  // Returns true if field preferenceLocale is set (has been assigned a value) and false otherwise
  public function isSetPreferenceLocale() : Bool {
    return this.preferenceLocale != null;
  }

  public function get_customModes() : IntMap< String> {
    return this.customModes;
  }

  public function set_customModes(customModes:IntMap< String>) : IntMap< String> {
    this.customModes = customModes;
    return this.customModes;
  }

  public function unsetCustomModes() : Void {
    this.customModes = null;
  }

  // Returns true if field customModes is set (has been assigned a value) and false otherwise
  public function isSetCustomModes() : Bool {
    return this.customModes != null;
  }

  public function get_e2eeEnable() : Bool {
    return this.e2eeEnable;
  }

  public function set_e2eeEnable(e2eeEnable:Bool) : Bool {
    this.e2eeEnable = e2eeEnable;
    this.__isset_e2eeEnable = true;
    return this.e2eeEnable;
  }

  public function unsetE2eeEnable() : Void {
    this.__isset_e2eeEnable = false;
  }

  // Returns true if field e2eeEnable is set (has been assigned a value) and false otherwise
  public function isSetE2eeEnable() : Bool {
    return this.__isset_e2eeEnable;
  }

  public function get_hitokotoBackupRequested() : Bool {
    return this.hitokotoBackupRequested;
  }

  public function set_hitokotoBackupRequested(hitokotoBackupRequested:Bool) : Bool {
    this.hitokotoBackupRequested = hitokotoBackupRequested;
    this.__isset_hitokotoBackupRequested = true;
    return this.hitokotoBackupRequested;
  }

  public function unsetHitokotoBackupRequested() : Void {
    this.__isset_hitokotoBackupRequested = false;
  }

  // Returns true if field hitokotoBackupRequested is set (has been assigned a value) and false otherwise
  public function isSetHitokotoBackupRequested() : Bool {
    return this.__isset_hitokotoBackupRequested;
  }

  public function get_privacyProfileMusicPostToMyhome() : Bool {
    return this.privacyProfileMusicPostToMyhome;
  }

  public function set_privacyProfileMusicPostToMyhome(privacyProfileMusicPostToMyhome:Bool) : Bool {
    this.privacyProfileMusicPostToMyhome = privacyProfileMusicPostToMyhome;
    this.__isset_privacyProfileMusicPostToMyhome = true;
    return this.privacyProfileMusicPostToMyhome;
  }

  public function unsetPrivacyProfileMusicPostToMyhome() : Void {
    this.__isset_privacyProfileMusicPostToMyhome = false;
  }

  // Returns true if field privacyProfileMusicPostToMyhome is set (has been assigned a value) and false otherwise
  public function isSetPrivacyProfileMusicPostToMyhome() : Bool {
    return this.__isset_privacyProfileMusicPostToMyhome;
  }

  public function get_privacyAllowNearby() : Bool {
    return this.privacyAllowNearby;
  }

  public function set_privacyAllowNearby(privacyAllowNearby:Bool) : Bool {
    this.privacyAllowNearby = privacyAllowNearby;
    this.__isset_privacyAllowNearby = true;
    return this.privacyAllowNearby;
  }

  public function unsetPrivacyAllowNearby() : Void {
    this.__isset_privacyAllowNearby = false;
  }

  // Returns true if field privacyAllowNearby is set (has been assigned a value) and false otherwise
  public function isSetPrivacyAllowNearby() : Bool {
    return this.__isset_privacyAllowNearby;
  }

  public function get_agreementNearbyTime() : haxe.Int64 {
    return this.agreementNearbyTime;
  }

  public function set_agreementNearbyTime(agreementNearbyTime:haxe.Int64) : haxe.Int64 {
    this.agreementNearbyTime = agreementNearbyTime;
    this.__isset_agreementNearbyTime = true;
    return this.agreementNearbyTime;
  }

  public function unsetAgreementNearbyTime() : Void {
    this.__isset_agreementNearbyTime = false;
  }

  // Returns true if field agreementNearbyTime is set (has been assigned a value) and false otherwise
  public function isSetAgreementNearbyTime() : Bool {
    return this.__isset_agreementNearbyTime;
  }

  public function get_agreementSquareTime() : haxe.Int64 {
    return this.agreementSquareTime;
  }

  public function set_agreementSquareTime(agreementSquareTime:haxe.Int64) : haxe.Int64 {
    this.agreementSquareTime = agreementSquareTime;
    this.__isset_agreementSquareTime = true;
    return this.agreementSquareTime;
  }

  public function unsetAgreementSquareTime() : Void {
    this.__isset_agreementSquareTime = false;
  }

  // Returns true if field agreementSquareTime is set (has been assigned a value) and false otherwise
  public function isSetAgreementSquareTime() : Bool {
    return this.__isset_agreementSquareTime;
  }

  public function get_notificationMention() : Bool {
    return this.notificationMention;
  }

  public function set_notificationMention(notificationMention:Bool) : Bool {
    this.notificationMention = notificationMention;
    this.__isset_notificationMention = true;
    return this.notificationMention;
  }

  public function unsetNotificationMention() : Void {
    this.__isset_notificationMention = false;
  }

  // Returns true if field notificationMention is set (has been assigned a value) and false otherwise
  public function isSetNotificationMention() : Bool {
    return this.__isset_notificationMention;
  }

  public function get_botUseAgreementAcceptedAt() : haxe.Int64 {
    return this.botUseAgreementAcceptedAt;
  }

  public function set_botUseAgreementAcceptedAt(botUseAgreementAcceptedAt:haxe.Int64) : haxe.Int64 {
    this.botUseAgreementAcceptedAt = botUseAgreementAcceptedAt;
    this.__isset_botUseAgreementAcceptedAt = true;
    return this.botUseAgreementAcceptedAt;
  }

  public function unsetBotUseAgreementAcceptedAt() : Void {
    this.__isset_botUseAgreementAcceptedAt = false;
  }

  // Returns true if field botUseAgreementAcceptedAt is set (has been assigned a value) and false otherwise
  public function isSetBotUseAgreementAcceptedAt() : Bool {
    return this.__isset_botUseAgreementAcceptedAt;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case NOTIFICATIONENABLE_FIELD_ID:
      if (value == null) {
        unsetNotificationEnable();
      } else {
        this.notificationEnable = value;
      }

    case NOTIFICATIONMUTEEXPIRATION_FIELD_ID:
      if (value == null) {
        unsetNotificationMuteExpiration();
      } else {
        this.notificationMuteExpiration = value;
      }

    case NOTIFICATIONNEWMESSAGE_FIELD_ID:
      if (value == null) {
        unsetNotificationNewMessage();
      } else {
        this.notificationNewMessage = value;
      }

    case NOTIFICATIONGROUPINVITATION_FIELD_ID:
      if (value == null) {
        unsetNotificationGroupInvitation();
      } else {
        this.notificationGroupInvitation = value;
      }

    case NOTIFICATIONSHOWMESSAGE_FIELD_ID:
      if (value == null) {
        unsetNotificationShowMessage();
      } else {
        this.notificationShowMessage = value;
      }

    case NOTIFICATIONINCOMINGCALL_FIELD_ID:
      if (value == null) {
        unsetNotificationIncomingCall();
      } else {
        this.notificationIncomingCall = value;
      }

    case NOTIFICATIONSOUNDMESSAGE_FIELD_ID:
      if (value == null) {
        unsetNotificationSoundMessage();
      } else {
        this.notificationSoundMessage = value;
      }

    case NOTIFICATIONSOUNDGROUP_FIELD_ID:
      if (value == null) {
        unsetNotificationSoundGroup();
      } else {
        this.notificationSoundGroup = value;
      }

    case NOTIFICATIONDISABLEDWITHSUB_FIELD_ID:
      if (value == null) {
        unsetNotificationDisabledWithSub();
      } else {
        this.notificationDisabledWithSub = value;
      }

    case PRIVACYSYNCCONTACTS_FIELD_ID:
      if (value == null) {
        unsetPrivacySyncContacts();
      } else {
        this.privacySyncContacts = value;
      }

    case PRIVACYSEARCHBYPHONENUMBER_FIELD_ID:
      if (value == null) {
        unsetPrivacySearchByPhoneNumber();
      } else {
        this.privacySearchByPhoneNumber = value;
      }

    case PRIVACYSEARCHBYUSERID_FIELD_ID:
      if (value == null) {
        unsetPrivacySearchByUserid();
      } else {
        this.privacySearchByUserid = value;
      }

    case PRIVACYSEARCHBYEMAIL_FIELD_ID:
      if (value == null) {
        unsetPrivacySearchByEmail();
      } else {
        this.privacySearchByEmail = value;
      }

    case PRIVACYALLOWSECONDARYDEVICELOGIN_FIELD_ID:
      if (value == null) {
        unsetPrivacyAllowSecondaryDeviceLogin();
      } else {
        this.privacyAllowSecondaryDeviceLogin = value;
      }

    case PRIVACYPROFILEIMAGEPOSTTOMYHOME_FIELD_ID:
      if (value == null) {
        unsetPrivacyProfileImagePostToMyhome();
      } else {
        this.privacyProfileImagePostToMyhome = value;
      }

    case PRIVACYRECEIVEMESSAGESFROMNOTFRIEND_FIELD_ID:
      if (value == null) {
        unsetPrivacyReceiveMessagesFromNotFriend();
      } else {
        this.privacyReceiveMessagesFromNotFriend = value;
      }

    case CONTACTMYTICKET_FIELD_ID:
      if (value == null) {
        unsetContactMyTicket();
      } else {
        this.contactMyTicket = value;
      }

    case IDENTITYPROVIDER_FIELD_ID:
      if (value == null) {
        unsetIdentityProvider();
      } else {
        this.identityProvider = value;
      }

    case IDENTITYIDENTIFIER_FIELD_ID:
      if (value == null) {
        unsetIdentityIdentifier();
      } else {
        this.identityIdentifier = value;
      }

    case SNSACCOUNTS_FIELD_ID:
      if (value == null) {
        unsetSnsAccounts();
      } else {
        this.snsAccounts = value;
      }

    case PHONEREGISTRATION_FIELD_ID:
      if (value == null) {
        unsetPhoneRegistration();
      } else {
        this.phoneRegistration = value;
      }

    case EMAILCONFIRMATIONSTATUS_FIELD_ID:
      if (value == null) {
        unsetEmailConfirmationStatus();
      } else {
        this.emailConfirmationStatus = value;
      }

    case PREFERENCELOCALE_FIELD_ID:
      if (value == null) {
        unsetPreferenceLocale();
      } else {
        this.preferenceLocale = value;
      }

    case CUSTOMMODES_FIELD_ID:
      if (value == null) {
        unsetCustomModes();
      } else {
        this.customModes = value;
      }

    case E2EEENABLE_FIELD_ID:
      if (value == null) {
        unsetE2eeEnable();
      } else {
        this.e2eeEnable = value;
      }

    case HITOKOTOBACKUPREQUESTED_FIELD_ID:
      if (value == null) {
        unsetHitokotoBackupRequested();
      } else {
        this.hitokotoBackupRequested = value;
      }

    case PRIVACYPROFILEMUSICPOSTTOMYHOME_FIELD_ID:
      if (value == null) {
        unsetPrivacyProfileMusicPostToMyhome();
      } else {
        this.privacyProfileMusicPostToMyhome = value;
      }

    case PRIVACYALLOWNEARBY_FIELD_ID:
      if (value == null) {
        unsetPrivacyAllowNearby();
      } else {
        this.privacyAllowNearby = value;
      }

    case AGREEMENTNEARBYTIME_FIELD_ID:
      if (value == null) {
        unsetAgreementNearbyTime();
      } else {
        this.agreementNearbyTime = value;
      }

    case AGREEMENTSQUARETIME_FIELD_ID:
      if (value == null) {
        unsetAgreementSquareTime();
      } else {
        this.agreementSquareTime = value;
      }

    case NOTIFICATIONMENTION_FIELD_ID:
      if (value == null) {
        unsetNotificationMention();
      } else {
        this.notificationMention = value;
      }

    case BOTUSEAGREEMENTACCEPTEDAT_FIELD_ID:
      if (value == null) {
        unsetBotUseAgreementAcceptedAt();
      } else {
        this.botUseAgreementAcceptedAt = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case NOTIFICATIONENABLE_FIELD_ID:
      return this.notificationEnable;
    case NOTIFICATIONMUTEEXPIRATION_FIELD_ID:
      return this.notificationMuteExpiration;
    case NOTIFICATIONNEWMESSAGE_FIELD_ID:
      return this.notificationNewMessage;
    case NOTIFICATIONGROUPINVITATION_FIELD_ID:
      return this.notificationGroupInvitation;
    case NOTIFICATIONSHOWMESSAGE_FIELD_ID:
      return this.notificationShowMessage;
    case NOTIFICATIONINCOMINGCALL_FIELD_ID:
      return this.notificationIncomingCall;
    case NOTIFICATIONSOUNDMESSAGE_FIELD_ID:
      return this.notificationSoundMessage;
    case NOTIFICATIONSOUNDGROUP_FIELD_ID:
      return this.notificationSoundGroup;
    case NOTIFICATIONDISABLEDWITHSUB_FIELD_ID:
      return this.notificationDisabledWithSub;
    case PRIVACYSYNCCONTACTS_FIELD_ID:
      return this.privacySyncContacts;
    case PRIVACYSEARCHBYPHONENUMBER_FIELD_ID:
      return this.privacySearchByPhoneNumber;
    case PRIVACYSEARCHBYUSERID_FIELD_ID:
      return this.privacySearchByUserid;
    case PRIVACYSEARCHBYEMAIL_FIELD_ID:
      return this.privacySearchByEmail;
    case PRIVACYALLOWSECONDARYDEVICELOGIN_FIELD_ID:
      return this.privacyAllowSecondaryDeviceLogin;
    case PRIVACYPROFILEIMAGEPOSTTOMYHOME_FIELD_ID:
      return this.privacyProfileImagePostToMyhome;
    case PRIVACYRECEIVEMESSAGESFROMNOTFRIEND_FIELD_ID:
      return this.privacyReceiveMessagesFromNotFriend;
    case CONTACTMYTICKET_FIELD_ID:
      return this.contactMyTicket;
    case IDENTITYPROVIDER_FIELD_ID:
      return this.identityProvider;
    case IDENTITYIDENTIFIER_FIELD_ID:
      return this.identityIdentifier;
    case SNSACCOUNTS_FIELD_ID:
      return this.snsAccounts;
    case PHONEREGISTRATION_FIELD_ID:
      return this.phoneRegistration;
    case EMAILCONFIRMATIONSTATUS_FIELD_ID:
      return this.emailConfirmationStatus;
    case PREFERENCELOCALE_FIELD_ID:
      return this.preferenceLocale;
    case CUSTOMMODES_FIELD_ID:
      return this.customModes;
    case E2EEENABLE_FIELD_ID:
      return this.e2eeEnable;
    case HITOKOTOBACKUPREQUESTED_FIELD_ID:
      return this.hitokotoBackupRequested;
    case PRIVACYPROFILEMUSICPOSTTOMYHOME_FIELD_ID:
      return this.privacyProfileMusicPostToMyhome;
    case PRIVACYALLOWNEARBY_FIELD_ID:
      return this.privacyAllowNearby;
    case AGREEMENTNEARBYTIME_FIELD_ID:
      return this.agreementNearbyTime;
    case AGREEMENTSQUARETIME_FIELD_ID:
      return this.agreementSquareTime;
    case NOTIFICATIONMENTION_FIELD_ID:
      return this.notificationMention;
    case BOTUSEAGREEMENTACCEPTEDAT_FIELD_ID:
      return this.botUseAgreementAcceptedAt;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case NOTIFICATIONENABLE_FIELD_ID:
      return isSetNotificationEnable();
    case NOTIFICATIONMUTEEXPIRATION_FIELD_ID:
      return isSetNotificationMuteExpiration();
    case NOTIFICATIONNEWMESSAGE_FIELD_ID:
      return isSetNotificationNewMessage();
    case NOTIFICATIONGROUPINVITATION_FIELD_ID:
      return isSetNotificationGroupInvitation();
    case NOTIFICATIONSHOWMESSAGE_FIELD_ID:
      return isSetNotificationShowMessage();
    case NOTIFICATIONINCOMINGCALL_FIELD_ID:
      return isSetNotificationIncomingCall();
    case NOTIFICATIONSOUNDMESSAGE_FIELD_ID:
      return isSetNotificationSoundMessage();
    case NOTIFICATIONSOUNDGROUP_FIELD_ID:
      return isSetNotificationSoundGroup();
    case NOTIFICATIONDISABLEDWITHSUB_FIELD_ID:
      return isSetNotificationDisabledWithSub();
    case PRIVACYSYNCCONTACTS_FIELD_ID:
      return isSetPrivacySyncContacts();
    case PRIVACYSEARCHBYPHONENUMBER_FIELD_ID:
      return isSetPrivacySearchByPhoneNumber();
    case PRIVACYSEARCHBYUSERID_FIELD_ID:
      return isSetPrivacySearchByUserid();
    case PRIVACYSEARCHBYEMAIL_FIELD_ID:
      return isSetPrivacySearchByEmail();
    case PRIVACYALLOWSECONDARYDEVICELOGIN_FIELD_ID:
      return isSetPrivacyAllowSecondaryDeviceLogin();
    case PRIVACYPROFILEIMAGEPOSTTOMYHOME_FIELD_ID:
      return isSetPrivacyProfileImagePostToMyhome();
    case PRIVACYRECEIVEMESSAGESFROMNOTFRIEND_FIELD_ID:
      return isSetPrivacyReceiveMessagesFromNotFriend();
    case CONTACTMYTICKET_FIELD_ID:
      return isSetContactMyTicket();
    case IDENTITYPROVIDER_FIELD_ID:
      return isSetIdentityProvider();
    case IDENTITYIDENTIFIER_FIELD_ID:
      return isSetIdentityIdentifier();
    case SNSACCOUNTS_FIELD_ID:
      return isSetSnsAccounts();
    case PHONEREGISTRATION_FIELD_ID:
      return isSetPhoneRegistration();
    case EMAILCONFIRMATIONSTATUS_FIELD_ID:
      return isSetEmailConfirmationStatus();
    case PREFERENCELOCALE_FIELD_ID:
      return isSetPreferenceLocale();
    case CUSTOMMODES_FIELD_ID:
      return isSetCustomModes();
    case E2EEENABLE_FIELD_ID:
      return isSetE2eeEnable();
    case HITOKOTOBACKUPREQUESTED_FIELD_ID:
      return isSetHitokotoBackupRequested();
    case PRIVACYPROFILEMUSICPOSTTOMYHOME_FIELD_ID:
      return isSetPrivacyProfileMusicPostToMyhome();
    case PRIVACYALLOWNEARBY_FIELD_ID:
      return isSetPrivacyAllowNearby();
    case AGREEMENTNEARBYTIME_FIELD_ID:
      return isSetAgreementNearbyTime();
    case AGREEMENTSQUARETIME_FIELD_ID:
      return isSetAgreementSquareTime();
    case NOTIFICATIONMENTION_FIELD_ID:
      return isSetNotificationMention();
    case BOTUSEAGREEMENTACCEPTEDAT_FIELD_ID:
      return isSetBotUseAgreementAcceptedAt();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NOTIFICATIONENABLE_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.notificationEnable = iprot.readBool();
              this.__isset_notificationEnable = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NOTIFICATIONMUTEEXPIRATION_FIELD_ID:
            if (field.type == TType.I64) {
              this.notificationMuteExpiration = iprot.readI64();
              this.__isset_notificationMuteExpiration = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NOTIFICATIONNEWMESSAGE_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.notificationNewMessage = iprot.readBool();
              this.__isset_notificationNewMessage = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NOTIFICATIONGROUPINVITATION_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.notificationGroupInvitation = iprot.readBool();
              this.__isset_notificationGroupInvitation = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NOTIFICATIONSHOWMESSAGE_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.notificationShowMessage = iprot.readBool();
              this.__isset_notificationShowMessage = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NOTIFICATIONINCOMINGCALL_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.notificationIncomingCall = iprot.readBool();
              this.__isset_notificationIncomingCall = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NOTIFICATIONSOUNDMESSAGE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.notificationSoundMessage = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NOTIFICATIONSOUNDGROUP_FIELD_ID:
            if (field.type == TType.STRING) {
              this.notificationSoundGroup = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NOTIFICATIONDISABLEDWITHSUB_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.notificationDisabledWithSub = iprot.readBool();
              this.__isset_notificationDisabledWithSub = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PRIVACYSYNCCONTACTS_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.privacySyncContacts = iprot.readBool();
              this.__isset_privacySyncContacts = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PRIVACYSEARCHBYPHONENUMBER_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.privacySearchByPhoneNumber = iprot.readBool();
              this.__isset_privacySearchByPhoneNumber = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PRIVACYSEARCHBYUSERID_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.privacySearchByUserid = iprot.readBool();
              this.__isset_privacySearchByUserid = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PRIVACYSEARCHBYEMAIL_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.privacySearchByEmail = iprot.readBool();
              this.__isset_privacySearchByEmail = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PRIVACYALLOWSECONDARYDEVICELOGIN_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.privacyAllowSecondaryDeviceLogin = iprot.readBool();
              this.__isset_privacyAllowSecondaryDeviceLogin = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PRIVACYPROFILEIMAGEPOSTTOMYHOME_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.privacyProfileImagePostToMyhome = iprot.readBool();
              this.__isset_privacyProfileImagePostToMyhome = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PRIVACYRECEIVEMESSAGESFROMNOTFRIEND_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.privacyReceiveMessagesFromNotFriend = iprot.readBool();
              this.__isset_privacyReceiveMessagesFromNotFriend = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CONTACTMYTICKET_FIELD_ID:
            if (field.type == TType.STRING) {
              this.contactMyTicket = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case IDENTITYPROVIDER_FIELD_ID:
            if (field.type == TType.I32) {
              this.identityProvider = iprot.readI32();
              this.__isset_identityProvider = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case IDENTITYIDENTIFIER_FIELD_ID:
            if (field.type == TType.STRING) {
              this.identityIdentifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SNSACCOUNTS_FIELD_ID:
            if (field.type == TType.MAP) {
              {
                var _map259 = iprot.readMapBegin();
                this.snsAccounts = new IntMap< String>();
                for( _i260 in 0 ... _map259.size)
                {
                  var _key261 : Int;
                  var _val262 : String;
                  _key261 = iprot.readI32();
                  _val262 = iprot.readString();
                  this.snsAccounts.set( _key261, _val262);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PHONEREGISTRATION_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.phoneRegistration = iprot.readBool();
              this.__isset_phoneRegistration = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case EMAILCONFIRMATIONSTATUS_FIELD_ID:
            if (field.type == TType.I32) {
              this.emailConfirmationStatus = iprot.readI32();
              this.__isset_emailConfirmationStatus = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PREFERENCELOCALE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.preferenceLocale = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CUSTOMMODES_FIELD_ID:
            if (field.type == TType.MAP) {
              {
                var _map263 = iprot.readMapBegin();
                this.customModes = new IntMap< String>();
                for( _i264 in 0 ... _map263.size)
                {
                  var _key265 : Int;
                  var _val266 : String;
                  _key265 = iprot.readI32();
                  _val266 = iprot.readString();
                  this.customModes.set( _key265, _val266);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case E2EEENABLE_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.e2eeEnable = iprot.readBool();
              this.__isset_e2eeEnable = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case HITOKOTOBACKUPREQUESTED_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.hitokotoBackupRequested = iprot.readBool();
              this.__isset_hitokotoBackupRequested = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PRIVACYPROFILEMUSICPOSTTOMYHOME_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.privacyProfileMusicPostToMyhome = iprot.readBool();
              this.__isset_privacyProfileMusicPostToMyhome = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PRIVACYALLOWNEARBY_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.privacyAllowNearby = iprot.readBool();
              this.__isset_privacyAllowNearby = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case AGREEMENTNEARBYTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.agreementNearbyTime = iprot.readI64();
              this.__isset_agreementNearbyTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case AGREEMENTSQUARETIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.agreementSquareTime = iprot.readI64();
              this.__isset_agreementSquareTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NOTIFICATIONMENTION_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.notificationMention = iprot.readBool();
              this.__isset_notificationMention = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case BOTUSEAGREEMENTACCEPTEDAT_FIELD_ID:
            if (field.type == TType.I64) {
              this.botUseAgreementAcceptedAt = iprot.readI64();
              this.__isset_botUseAgreementAcceptedAt = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NOTIFICATION_ENABLE_FIELD_DESC);
      oprot.writeBool(this.notificationEnable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_MUTE_EXPIRATION_FIELD_DESC);
      oprot.writeI64(this.notificationMuteExpiration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_NEW_MESSAGE_FIELD_DESC);
      oprot.writeBool(this.notificationNewMessage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_GROUP_INVITATION_FIELD_DESC);
      oprot.writeBool(this.notificationGroupInvitation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_SHOW_MESSAGE_FIELD_DESC);
      oprot.writeBool(this.notificationShowMessage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_INCOMING_CALL_FIELD_DESC);
      oprot.writeBool(this.notificationIncomingCall);
      oprot.writeFieldEnd();
      if (this.notificationSoundMessage != null) {
        oprot.writeFieldBegin(NOTIFICATION_SOUND_MESSAGE_FIELD_DESC);
        oprot.writeString(this.notificationSoundMessage);
        oprot.writeFieldEnd();
      }
      if (this.notificationSoundGroup != null) {
        oprot.writeFieldBegin(NOTIFICATION_SOUND_GROUP_FIELD_DESC);
        oprot.writeString(this.notificationSoundGroup);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NOTIFICATION_DISABLED_WITH_SUB_FIELD_DESC);
      oprot.writeBool(this.notificationDisabledWithSub);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_SYNC_CONTACTS_FIELD_DESC);
      oprot.writeBool(this.privacySyncContacts);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_SEARCH_BY_PHONE_NUMBER_FIELD_DESC);
      oprot.writeBool(this.privacySearchByPhoneNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_SEARCH_BY_USERID_FIELD_DESC);
      oprot.writeBool(this.privacySearchByUserid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_SEARCH_BY_EMAIL_FIELD_DESC);
      oprot.writeBool(this.privacySearchByEmail);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN_FIELD_DESC);
      oprot.writeBool(this.privacyAllowSecondaryDeviceLogin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME_FIELD_DESC);
      oprot.writeBool(this.privacyProfileImagePostToMyhome);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND_FIELD_DESC);
      oprot.writeBool(this.privacyReceiveMessagesFromNotFriend);
      oprot.writeFieldEnd();
      if (this.contactMyTicket != null) {
        oprot.writeFieldBegin(CONTACT_MY_TICKET_FIELD_DESC);
        oprot.writeString(this.contactMyTicket);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IDENTITY_PROVIDER_FIELD_DESC);
      oprot.writeI32(this.identityProvider);
      oprot.writeFieldEnd();
      if (this.identityIdentifier != null) {
        oprot.writeFieldBegin(IDENTITY_IDENTIFIER_FIELD_DESC);
        oprot.writeString(this.identityIdentifier);
        oprot.writeFieldEnd();
      }
      if (this.snsAccounts != null) {
        oprot.writeFieldBegin(SNS_ACCOUNTS_FIELD_DESC);
        {
          var _sizeCounter268 : Int = 0;
          for( _key267 in this.snsAccounts) {
            _sizeCounter268++;
          }
          oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, _sizeCounter268));
          for( elem269 in this.snsAccounts.keys())
          {
            oprot.writeI32(elem269);
            oprot.writeString(this.snsAccounts.get(elem269));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PHONE_REGISTRATION_FIELD_DESC);
      oprot.writeBool(this.phoneRegistration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EMAIL_CONFIRMATION_STATUS_FIELD_DESC);
      oprot.writeI32(this.emailConfirmationStatus);
      oprot.writeFieldEnd();
      if (this.preferenceLocale != null) {
        oprot.writeFieldBegin(PREFERENCE_LOCALE_FIELD_DESC);
        oprot.writeString(this.preferenceLocale);
        oprot.writeFieldEnd();
      }
      if (this.customModes != null) {
        oprot.writeFieldBegin(CUSTOM_MODES_FIELD_DESC);
        {
          var _sizeCounter271 : Int = 0;
          for( _key270 in this.customModes) {
            _sizeCounter271++;
          }
          oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, _sizeCounter271));
          for( elem272 in this.customModes.keys())
          {
            oprot.writeI32(elem272);
            oprot.writeString(this.customModes.get(elem272));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(E2EE_ENABLE_FIELD_DESC);
      oprot.writeBool(this.e2eeEnable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HITOKOTO_BACKUP_REQUESTED_FIELD_DESC);
      oprot.writeBool(this.hitokotoBackupRequested);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME_FIELD_DESC);
      oprot.writeBool(this.privacyProfileMusicPostToMyhome);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_ALLOW_NEARBY_FIELD_DESC);
      oprot.writeBool(this.privacyAllowNearby);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AGREEMENT_NEARBY_TIME_FIELD_DESC);
      oprot.writeI64(this.agreementNearbyTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AGREEMENT_SQUARE_TIME_FIELD_DESC);
      oprot.writeI64(this.agreementSquareTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_MENTION_FIELD_DESC);
      oprot.writeBool(this.notificationMention);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOT_USE_AGREEMENT_ACCEPTED_AT_FIELD_DESC);
      oprot.writeI64(this.botUseAgreementAcceptedAt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "Settings(";
    var first : Bool = true;

    ret += "notificationEnable:";
    ret += this.notificationEnable;
    first = false;
    if (!first) ret +=  ", ";
    ret += "notificationMuteExpiration:";
    ret += this.notificationMuteExpiration;
    first = false;
    if (!first) ret +=  ", ";
    ret += "notificationNewMessage:";
    ret += this.notificationNewMessage;
    first = false;
    if (!first) ret +=  ", ";
    ret += "notificationGroupInvitation:";
    ret += this.notificationGroupInvitation;
    first = false;
    if (!first) ret +=  ", ";
    ret += "notificationShowMessage:";
    ret += this.notificationShowMessage;
    first = false;
    if (!first) ret +=  ", ";
    ret += "notificationIncomingCall:";
    ret += this.notificationIncomingCall;
    first = false;
    if (!first) ret +=  ", ";
    ret += "notificationSoundMessage:";
    if (this.notificationSoundMessage == null) {
      ret += "null";
    } else {
      ret += this.notificationSoundMessage;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "notificationSoundGroup:";
    if (this.notificationSoundGroup == null) {
      ret += "null";
    } else {
      ret += this.notificationSoundGroup;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "notificationDisabledWithSub:";
    ret += this.notificationDisabledWithSub;
    first = false;
    if (!first) ret +=  ", ";
    ret += "privacySyncContacts:";
    ret += this.privacySyncContacts;
    first = false;
    if (!first) ret +=  ", ";
    ret += "privacySearchByPhoneNumber:";
    ret += this.privacySearchByPhoneNumber;
    first = false;
    if (!first) ret +=  ", ";
    ret += "privacySearchByUserid:";
    ret += this.privacySearchByUserid;
    first = false;
    if (!first) ret +=  ", ";
    ret += "privacySearchByEmail:";
    ret += this.privacySearchByEmail;
    first = false;
    if (!first) ret +=  ", ";
    ret += "privacyAllowSecondaryDeviceLogin:";
    ret += this.privacyAllowSecondaryDeviceLogin;
    first = false;
    if (!first) ret +=  ", ";
    ret += "privacyProfileImagePostToMyhome:";
    ret += this.privacyProfileImagePostToMyhome;
    first = false;
    if (!first) ret +=  ", ";
    ret += "privacyReceiveMessagesFromNotFriend:";
    ret += this.privacyReceiveMessagesFromNotFriend;
    first = false;
    if (!first) ret +=  ", ";
    ret += "contactMyTicket:";
    if (this.contactMyTicket == null) {
      ret += "null";
    } else {
      ret += this.contactMyTicket;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "identityProvider:";
    var identityProvider_name : String = .IdentityProvider.VALUES_TO_NAMES[this.identityProvider];
    if (identityProvider_name != null) {
      ret += identityProvider_name;
      ret += " (";
    }
    ret += this.identityProvider;
    if (identityProvider_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "identityIdentifier:";
    if (this.identityIdentifier == null) {
      ret += "null";
    } else {
      ret += this.identityIdentifier;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "snsAccounts:";
    if (this.snsAccounts == null) {
      ret += "null";
    } else {
      ret += this.snsAccounts;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "phoneRegistration:";
    ret += this.phoneRegistration;
    first = false;
    if (!first) ret +=  ", ";
    ret += "emailConfirmationStatus:";
    var emailConfirmationStatus_name : String = .EmailConfirmationStatus.VALUES_TO_NAMES[this.emailConfirmationStatus];
    if (emailConfirmationStatus_name != null) {
      ret += emailConfirmationStatus_name;
      ret += " (";
    }
    ret += this.emailConfirmationStatus;
    if (emailConfirmationStatus_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "preferenceLocale:";
    if (this.preferenceLocale == null) {
      ret += "null";
    } else {
      ret += this.preferenceLocale;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "customModes:";
    if (this.customModes == null) {
      ret += "null";
    } else {
      ret += this.customModes;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "e2eeEnable:";
    ret += this.e2eeEnable;
    first = false;
    if (!first) ret +=  ", ";
    ret += "hitokotoBackupRequested:";
    ret += this.hitokotoBackupRequested;
    first = false;
    if (!first) ret +=  ", ";
    ret += "privacyProfileMusicPostToMyhome:";
    ret += this.privacyProfileMusicPostToMyhome;
    first = false;
    if (!first) ret +=  ", ";
    ret += "privacyAllowNearby:";
    ret += this.privacyAllowNearby;
    first = false;
    if (!first) ret +=  ", ";
    ret += "agreementNearbyTime:";
    ret += this.agreementNearbyTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "agreementSquareTime:";
    ret += this.agreementSquareTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "notificationMention:";
    ret += this.notificationMention;
    first = false;
    if (!first) ret +=  ", ";
    ret += "botUseAgreementAcceptedAt:";
    ret += this.botUseAgreementAcceptedAt;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetIdentityProvider() && !.IdentityProvider.VALID_VALUES.contains(identityProvider)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'identityProvider' has been assigned the invalid value " + identityProvider);
    }
    if (isSetEmailConfirmationStatus() && !.EmailConfirmationStatus.VALID_VALUES.contains(emailConfirmationStatus)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'emailConfirmationStatus' has been assigned the invalid value " + emailConfirmationStatus);
    }
  }

}

