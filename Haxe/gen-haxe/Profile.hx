/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class Profile implements TBase {
  
  static var STRUCT_DESC = { new TStruct("Profile"); };
  static var MID_FIELD_DESC = { new TField("mid", TType.STRING, 1); };
  static var USERID_FIELD_DESC = { new TField("userid", TType.STRING, 3); };
  static var PHONE_FIELD_DESC = { new TField("phone", TType.STRING, 10); };
  static var EMAIL_FIELD_DESC = { new TField("email", TType.STRING, 11); };
  static var REGION_CODE_FIELD_DESC = { new TField("regionCode", TType.STRING, 12); };
  static var DISPLAY_NAME_FIELD_DESC = { new TField("displayName", TType.STRING, 20); };
  static var PHONETIC_NAME_FIELD_DESC = { new TField("phoneticName", TType.STRING, 21); };
  static var PICTURE_STATUS_FIELD_DESC = { new TField("pictureStatus", TType.STRING, 22); };
  static var THUMBNAIL_URL_FIELD_DESC = { new TField("thumbnailUrl", TType.STRING, 23); };
  static var STATUS_MESSAGE_FIELD_DESC = { new TField("statusMessage", TType.STRING, 24); };
  static var ALLOW_SEARCH_BY_USERID_FIELD_DESC = { new TField("allowSearchByUserid", TType.BOOL, 31); };
  static var ALLOW_SEARCH_BY_EMAIL_FIELD_DESC = { new TField("allowSearchByEmail", TType.BOOL, 32); };
  static var PICTURE_PATH_FIELD_DESC = { new TField("picturePath", TType.STRING, 33); };
  static var MUSIC_PROFILE_FIELD_DESC = { new TField("musicProfile", TType.STRING, 34); };
  static var VIDEO_PROFILE_FIELD_DESC = { new TField("videoProfile", TType.STRING, 35); };

  @:isVar
  public var mid(get,set) : String;
  @:isVar
  public var userid(get,set) : String;
  @:isVar
  public var phone(get,set) : String;
  @:isVar
  public var email(get,set) : String;
  @:isVar
  public var regionCode(get,set) : String;
  @:isVar
  public var displayName(get,set) : String;
  @:isVar
  public var phoneticName(get,set) : String;
  @:isVar
  public var pictureStatus(get,set) : String;
  @:isVar
  public var thumbnailUrl(get,set) : String;
  @:isVar
  public var statusMessage(get,set) : String;
  @:isVar
  public var allowSearchByUserid(get,set) : Bool;
  @:isVar
  public var allowSearchByEmail(get,set) : Bool;
  @:isVar
  public var picturePath(get,set) : String;
  @:isVar
  public var musicProfile(get,set) : String;
  @:isVar
  public var videoProfile(get,set) : String;

  inline static var MID_FIELD_ID : Int = 1;
  inline static var USERID_FIELD_ID : Int = 3;
  inline static var PHONE_FIELD_ID : Int = 10;
  inline static var EMAIL_FIELD_ID : Int = 11;
  inline static var REGIONCODE_FIELD_ID : Int = 12;
  inline static var DISPLAYNAME_FIELD_ID : Int = 20;
  inline static var PHONETICNAME_FIELD_ID : Int = 21;
  inline static var PICTURESTATUS_FIELD_ID : Int = 22;
  inline static var THUMBNAILURL_FIELD_ID : Int = 23;
  inline static var STATUSMESSAGE_FIELD_ID : Int = 24;
  inline static var ALLOWSEARCHBYUSERID_FIELD_ID : Int = 31;
  inline static var ALLOWSEARCHBYEMAIL_FIELD_ID : Int = 32;
  inline static var PICTUREPATH_FIELD_ID : Int = 33;
  inline static var MUSICPROFILE_FIELD_ID : Int = 34;
  inline static var VIDEOPROFILE_FIELD_ID : Int = 35;

  private var __isset_allowSearchByUserid : Bool = false;
  private var __isset_allowSearchByEmail : Bool = false;

  public function new() {
  }

  public function get_mid() : String {
    return this.mid;
  }

  public function set_mid(mid:String) : String {
    this.mid = mid;
    return this.mid;
  }

  public function unsetMid() : Void {
    this.mid = null;
  }

  // Returns true if field mid is set (has been assigned a value) and false otherwise
  public function isSetMid() : Bool {
    return this.mid != null;
  }

  public function get_userid() : String {
    return this.userid;
  }

  public function set_userid(userid:String) : String {
    this.userid = userid;
    return this.userid;
  }

  public function unsetUserid() : Void {
    this.userid = null;
  }

  // Returns true if field userid is set (has been assigned a value) and false otherwise
  public function isSetUserid() : Bool {
    return this.userid != null;
  }

  public function get_phone() : String {
    return this.phone;
  }

  public function set_phone(phone:String) : String {
    this.phone = phone;
    return this.phone;
  }

  public function unsetPhone() : Void {
    this.phone = null;
  }

  // Returns true if field phone is set (has been assigned a value) and false otherwise
  public function isSetPhone() : Bool {
    return this.phone != null;
  }

  public function get_email() : String {
    return this.email;
  }

  public function set_email(email:String) : String {
    this.email = email;
    return this.email;
  }

  public function unsetEmail() : Void {
    this.email = null;
  }

  // Returns true if field email is set (has been assigned a value) and false otherwise
  public function isSetEmail() : Bool {
    return this.email != null;
  }

  public function get_regionCode() : String {
    return this.regionCode;
  }

  public function set_regionCode(regionCode:String) : String {
    this.regionCode = regionCode;
    return this.regionCode;
  }

  public function unsetRegionCode() : Void {
    this.regionCode = null;
  }

  // Returns true if field regionCode is set (has been assigned a value) and false otherwise
  public function isSetRegionCode() : Bool {
    return this.regionCode != null;
  }

  public function get_displayName() : String {
    return this.displayName;
  }

  public function set_displayName(displayName:String) : String {
    this.displayName = displayName;
    return this.displayName;
  }

  public function unsetDisplayName() : Void {
    this.displayName = null;
  }

  // Returns true if field displayName is set (has been assigned a value) and false otherwise
  public function isSetDisplayName() : Bool {
    return this.displayName != null;
  }

  public function get_phoneticName() : String {
    return this.phoneticName;
  }

  public function set_phoneticName(phoneticName:String) : String {
    this.phoneticName = phoneticName;
    return this.phoneticName;
  }

  public function unsetPhoneticName() : Void {
    this.phoneticName = null;
  }

  // Returns true if field phoneticName is set (has been assigned a value) and false otherwise
  public function isSetPhoneticName() : Bool {
    return this.phoneticName != null;
  }

  public function get_pictureStatus() : String {
    return this.pictureStatus;
  }

  public function set_pictureStatus(pictureStatus:String) : String {
    this.pictureStatus = pictureStatus;
    return this.pictureStatus;
  }

  public function unsetPictureStatus() : Void {
    this.pictureStatus = null;
  }

  // Returns true if field pictureStatus is set (has been assigned a value) and false otherwise
  public function isSetPictureStatus() : Bool {
    return this.pictureStatus != null;
  }

  public function get_thumbnailUrl() : String {
    return this.thumbnailUrl;
  }

  public function set_thumbnailUrl(thumbnailUrl:String) : String {
    this.thumbnailUrl = thumbnailUrl;
    return this.thumbnailUrl;
  }

  public function unsetThumbnailUrl() : Void {
    this.thumbnailUrl = null;
  }

  // Returns true if field thumbnailUrl is set (has been assigned a value) and false otherwise
  public function isSetThumbnailUrl() : Bool {
    return this.thumbnailUrl != null;
  }

  public function get_statusMessage() : String {
    return this.statusMessage;
  }

  public function set_statusMessage(statusMessage:String) : String {
    this.statusMessage = statusMessage;
    return this.statusMessage;
  }

  public function unsetStatusMessage() : Void {
    this.statusMessage = null;
  }

  // Returns true if field statusMessage is set (has been assigned a value) and false otherwise
  public function isSetStatusMessage() : Bool {
    return this.statusMessage != null;
  }

  public function get_allowSearchByUserid() : Bool {
    return this.allowSearchByUserid;
  }

  public function set_allowSearchByUserid(allowSearchByUserid:Bool) : Bool {
    this.allowSearchByUserid = allowSearchByUserid;
    this.__isset_allowSearchByUserid = true;
    return this.allowSearchByUserid;
  }

  public function unsetAllowSearchByUserid() : Void {
    this.__isset_allowSearchByUserid = false;
  }

  // Returns true if field allowSearchByUserid is set (has been assigned a value) and false otherwise
  public function isSetAllowSearchByUserid() : Bool {
    return this.__isset_allowSearchByUserid;
  }

  public function get_allowSearchByEmail() : Bool {
    return this.allowSearchByEmail;
  }

  public function set_allowSearchByEmail(allowSearchByEmail:Bool) : Bool {
    this.allowSearchByEmail = allowSearchByEmail;
    this.__isset_allowSearchByEmail = true;
    return this.allowSearchByEmail;
  }

  public function unsetAllowSearchByEmail() : Void {
    this.__isset_allowSearchByEmail = false;
  }

  // Returns true if field allowSearchByEmail is set (has been assigned a value) and false otherwise
  public function isSetAllowSearchByEmail() : Bool {
    return this.__isset_allowSearchByEmail;
  }

  public function get_picturePath() : String {
    return this.picturePath;
  }

  public function set_picturePath(picturePath:String) : String {
    this.picturePath = picturePath;
    return this.picturePath;
  }

  public function unsetPicturePath() : Void {
    this.picturePath = null;
  }

  // Returns true if field picturePath is set (has been assigned a value) and false otherwise
  public function isSetPicturePath() : Bool {
    return this.picturePath != null;
  }

  public function get_musicProfile() : String {
    return this.musicProfile;
  }

  public function set_musicProfile(musicProfile:String) : String {
    this.musicProfile = musicProfile;
    return this.musicProfile;
  }

  public function unsetMusicProfile() : Void {
    this.musicProfile = null;
  }

  // Returns true if field musicProfile is set (has been assigned a value) and false otherwise
  public function isSetMusicProfile() : Bool {
    return this.musicProfile != null;
  }

  public function get_videoProfile() : String {
    return this.videoProfile;
  }

  public function set_videoProfile(videoProfile:String) : String {
    this.videoProfile = videoProfile;
    return this.videoProfile;
  }

  public function unsetVideoProfile() : Void {
    this.videoProfile = null;
  }

  // Returns true if field videoProfile is set (has been assigned a value) and false otherwise
  public function isSetVideoProfile() : Bool {
    return this.videoProfile != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case MID_FIELD_ID:
      if (value == null) {
        unsetMid();
      } else {
        this.mid = value;
      }

    case USERID_FIELD_ID:
      if (value == null) {
        unsetUserid();
      } else {
        this.userid = value;
      }

    case PHONE_FIELD_ID:
      if (value == null) {
        unsetPhone();
      } else {
        this.phone = value;
      }

    case EMAIL_FIELD_ID:
      if (value == null) {
        unsetEmail();
      } else {
        this.email = value;
      }

    case REGIONCODE_FIELD_ID:
      if (value == null) {
        unsetRegionCode();
      } else {
        this.regionCode = value;
      }

    case DISPLAYNAME_FIELD_ID:
      if (value == null) {
        unsetDisplayName();
      } else {
        this.displayName = value;
      }

    case PHONETICNAME_FIELD_ID:
      if (value == null) {
        unsetPhoneticName();
      } else {
        this.phoneticName = value;
      }

    case PICTURESTATUS_FIELD_ID:
      if (value == null) {
        unsetPictureStatus();
      } else {
        this.pictureStatus = value;
      }

    case THUMBNAILURL_FIELD_ID:
      if (value == null) {
        unsetThumbnailUrl();
      } else {
        this.thumbnailUrl = value;
      }

    case STATUSMESSAGE_FIELD_ID:
      if (value == null) {
        unsetStatusMessage();
      } else {
        this.statusMessage = value;
      }

    case ALLOWSEARCHBYUSERID_FIELD_ID:
      if (value == null) {
        unsetAllowSearchByUserid();
      } else {
        this.allowSearchByUserid = value;
      }

    case ALLOWSEARCHBYEMAIL_FIELD_ID:
      if (value == null) {
        unsetAllowSearchByEmail();
      } else {
        this.allowSearchByEmail = value;
      }

    case PICTUREPATH_FIELD_ID:
      if (value == null) {
        unsetPicturePath();
      } else {
        this.picturePath = value;
      }

    case MUSICPROFILE_FIELD_ID:
      if (value == null) {
        unsetMusicProfile();
      } else {
        this.musicProfile = value;
      }

    case VIDEOPROFILE_FIELD_ID:
      if (value == null) {
        unsetVideoProfile();
      } else {
        this.videoProfile = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case MID_FIELD_ID:
      return this.mid;
    case USERID_FIELD_ID:
      return this.userid;
    case PHONE_FIELD_ID:
      return this.phone;
    case EMAIL_FIELD_ID:
      return this.email;
    case REGIONCODE_FIELD_ID:
      return this.regionCode;
    case DISPLAYNAME_FIELD_ID:
      return this.displayName;
    case PHONETICNAME_FIELD_ID:
      return this.phoneticName;
    case PICTURESTATUS_FIELD_ID:
      return this.pictureStatus;
    case THUMBNAILURL_FIELD_ID:
      return this.thumbnailUrl;
    case STATUSMESSAGE_FIELD_ID:
      return this.statusMessage;
    case ALLOWSEARCHBYUSERID_FIELD_ID:
      return this.allowSearchByUserid;
    case ALLOWSEARCHBYEMAIL_FIELD_ID:
      return this.allowSearchByEmail;
    case PICTUREPATH_FIELD_ID:
      return this.picturePath;
    case MUSICPROFILE_FIELD_ID:
      return this.musicProfile;
    case VIDEOPROFILE_FIELD_ID:
      return this.videoProfile;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case MID_FIELD_ID:
      return isSetMid();
    case USERID_FIELD_ID:
      return isSetUserid();
    case PHONE_FIELD_ID:
      return isSetPhone();
    case EMAIL_FIELD_ID:
      return isSetEmail();
    case REGIONCODE_FIELD_ID:
      return isSetRegionCode();
    case DISPLAYNAME_FIELD_ID:
      return isSetDisplayName();
    case PHONETICNAME_FIELD_ID:
      return isSetPhoneticName();
    case PICTURESTATUS_FIELD_ID:
      return isSetPictureStatus();
    case THUMBNAILURL_FIELD_ID:
      return isSetThumbnailUrl();
    case STATUSMESSAGE_FIELD_ID:
      return isSetStatusMessage();
    case ALLOWSEARCHBYUSERID_FIELD_ID:
      return isSetAllowSearchByUserid();
    case ALLOWSEARCHBYEMAIL_FIELD_ID:
      return isSetAllowSearchByEmail();
    case PICTUREPATH_FIELD_ID:
      return isSetPicturePath();
    case MUSICPROFILE_FIELD_ID:
      return isSetMusicProfile();
    case VIDEOPROFILE_FIELD_ID:
      return isSetVideoProfile();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case USERID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.userid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PHONE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.phone = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case EMAIL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.email = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case REGIONCODE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.regionCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DISPLAYNAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.displayName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PHONETICNAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.phoneticName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PICTURESTATUS_FIELD_ID:
            if (field.type == TType.STRING) {
              this.pictureStatus = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case THUMBNAILURL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.thumbnailUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case STATUSMESSAGE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.statusMessage = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ALLOWSEARCHBYUSERID_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.allowSearchByUserid = iprot.readBool();
              this.__isset_allowSearchByUserid = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ALLOWSEARCHBYEMAIL_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.allowSearchByEmail = iprot.readBool();
              this.__isset_allowSearchByEmail = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PICTUREPATH_FIELD_ID:
            if (field.type == TType.STRING) {
              this.picturePath = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MUSICPROFILE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.musicProfile = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case VIDEOPROFILE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.videoProfile = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      if (this.userid != null) {
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeString(this.userid);
        oprot.writeFieldEnd();
      }
      if (this.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(this.phone);
        oprot.writeFieldEnd();
      }
      if (this.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(this.email);
        oprot.writeFieldEnd();
      }
      if (this.regionCode != null) {
        oprot.writeFieldBegin(REGION_CODE_FIELD_DESC);
        oprot.writeString(this.regionCode);
        oprot.writeFieldEnd();
      }
      if (this.displayName != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(this.displayName);
        oprot.writeFieldEnd();
      }
      if (this.phoneticName != null) {
        oprot.writeFieldBegin(PHONETIC_NAME_FIELD_DESC);
        oprot.writeString(this.phoneticName);
        oprot.writeFieldEnd();
      }
      if (this.pictureStatus != null) {
        oprot.writeFieldBegin(PICTURE_STATUS_FIELD_DESC);
        oprot.writeString(this.pictureStatus);
        oprot.writeFieldEnd();
      }
      if (this.thumbnailUrl != null) {
        oprot.writeFieldBegin(THUMBNAIL_URL_FIELD_DESC);
        oprot.writeString(this.thumbnailUrl);
        oprot.writeFieldEnd();
      }
      if (this.statusMessage != null) {
        oprot.writeFieldBegin(STATUS_MESSAGE_FIELD_DESC);
        oprot.writeString(this.statusMessage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ALLOW_SEARCH_BY_USERID_FIELD_DESC);
      oprot.writeBool(this.allowSearchByUserid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALLOW_SEARCH_BY_EMAIL_FIELD_DESC);
      oprot.writeBool(this.allowSearchByEmail);
      oprot.writeFieldEnd();
      if (this.picturePath != null) {
        oprot.writeFieldBegin(PICTURE_PATH_FIELD_DESC);
        oprot.writeString(this.picturePath);
        oprot.writeFieldEnd();
      }
      if (this.musicProfile != null) {
        oprot.writeFieldBegin(MUSIC_PROFILE_FIELD_DESC);
        oprot.writeString(this.musicProfile);
        oprot.writeFieldEnd();
      }
      if (this.videoProfile != null) {
        oprot.writeFieldBegin(VIDEO_PROFILE_FIELD_DESC);
        oprot.writeString(this.videoProfile);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "Profile(";
    var first : Bool = true;

    ret += "mid:";
    if (this.mid == null) {
      ret += "null";
    } else {
      ret += this.mid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "userid:";
    if (this.userid == null) {
      ret += "null";
    } else {
      ret += this.userid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "phone:";
    if (this.phone == null) {
      ret += "null";
    } else {
      ret += this.phone;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "email:";
    if (this.email == null) {
      ret += "null";
    } else {
      ret += this.email;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "regionCode:";
    if (this.regionCode == null) {
      ret += "null";
    } else {
      ret += this.regionCode;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "displayName:";
    if (this.displayName == null) {
      ret += "null";
    } else {
      ret += this.displayName;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "phoneticName:";
    if (this.phoneticName == null) {
      ret += "null";
    } else {
      ret += this.phoneticName;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "pictureStatus:";
    if (this.pictureStatus == null) {
      ret += "null";
    } else {
      ret += this.pictureStatus;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "thumbnailUrl:";
    if (this.thumbnailUrl == null) {
      ret += "null";
    } else {
      ret += this.thumbnailUrl;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "statusMessage:";
    if (this.statusMessage == null) {
      ret += "null";
    } else {
      ret += this.statusMessage;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "allowSearchByUserid:";
    ret += this.allowSearchByUserid;
    first = false;
    if (!first) ret +=  ", ";
    ret += "allowSearchByEmail:";
    ret += this.allowSearchByEmail;
    first = false;
    if (!first) ret +=  ", ";
    ret += "picturePath:";
    if (this.picturePath == null) {
      ret += "null";
    } else {
      ret += this.picturePath;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "musicProfile:";
    if (this.musicProfile == null) {
      ret += "null";
    } else {
      ret += this.musicProfile;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "videoProfile:";
    if (this.videoProfile == null) {
      ret += "null";
    } else {
      ret += this.videoProfile;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

