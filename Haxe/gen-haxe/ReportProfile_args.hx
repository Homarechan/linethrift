/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class ReportProfile_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("reportProfile_args"); };
  static var SYNC_OP_REVISION_FIELD_DESC = { new TField("syncOpRevision", TType.I64, 2); };
  static var PROFILE_FIELD_DESC = { new TField("profile", TType.STRUCT, 3); };

  @:isVar
  public var syncOpRevision(get,set) : haxe.Int64;
  @:isVar
  public var profile(get,set) : Profile;

  inline static var SYNCOPREVISION_FIELD_ID : Int = 2;
  inline static var PROFILE_FIELD_ID : Int = 3;

  private var __isset_syncOpRevision : Bool = false;

  public function new() {
  }

  public function get_syncOpRevision() : haxe.Int64 {
    return this.syncOpRevision;
  }

  public function set_syncOpRevision(syncOpRevision:haxe.Int64) : haxe.Int64 {
    this.syncOpRevision = syncOpRevision;
    this.__isset_syncOpRevision = true;
    return this.syncOpRevision;
  }

  public function unsetSyncOpRevision() : Void {
    this.__isset_syncOpRevision = false;
  }

  // Returns true if field syncOpRevision is set (has been assigned a value) and false otherwise
  public function isSetSyncOpRevision() : Bool {
    return this.__isset_syncOpRevision;
  }

  public function get_profile() : Profile {
    return this.profile;
  }

  public function set_profile(profile:Profile) : Profile {
    this.profile = profile;
    return this.profile;
  }

  public function unsetProfile() : Void {
    this.profile = null;
  }

  // Returns true if field profile is set (has been assigned a value) and false otherwise
  public function isSetProfile() : Bool {
    return this.profile != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case SYNCOPREVISION_FIELD_ID:
      if (value == null) {
        unsetSyncOpRevision();
      } else {
        this.syncOpRevision = value;
      }

    case PROFILE_FIELD_ID:
      if (value == null) {
        unsetProfile();
      } else {
        this.profile = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case SYNCOPREVISION_FIELD_ID:
      return this.syncOpRevision;
    case PROFILE_FIELD_ID:
      return this.profile;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case SYNCOPREVISION_FIELD_ID:
      return isSetSyncOpRevision();
    case PROFILE_FIELD_ID:
      return isSetProfile();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SYNCOPREVISION_FIELD_ID:
            if (field.type == TType.I64) {
              this.syncOpRevision = iprot.readI64();
              this.__isset_syncOpRevision = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PROFILE_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.profile = new Profile();
              this.profile.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SYNC_OP_REVISION_FIELD_DESC);
      oprot.writeI64(this.syncOpRevision);
      oprot.writeFieldEnd();
      if (this.profile != null) {
        oprot.writeFieldBegin(PROFILE_FIELD_DESC);
        this.profile.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "reportProfile_args(";
    var first : Bool = true;

    ret += "syncOpRevision:";
    ret += this.syncOpRevision;
    first = false;
    if (!first) ret +=  ", ";
    ret += "profile:";
    if (this.profile == null) {
      ret += "null";
    } else {
      ret += this.profile;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

