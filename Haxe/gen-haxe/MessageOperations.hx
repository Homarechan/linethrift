/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class MessageOperations implements TBase {
  
  static var STRUCT_DESC = { new TStruct("MessageOperations"); };
  static var OPERATIONS_FIELD_DESC = { new TField("operations", TType.LIST, 1); };
  static var END_FLAG_FIELD_DESC = { new TField("endFlag", TType.BOOL, 2); };

  @:isVar
  public var operations(get,set) : List< MessageOperation>;
  @:isVar
  public var endFlag(get,set) : Bool;

  inline static var OPERATIONS_FIELD_ID : Int = 1;
  inline static var ENDFLAG_FIELD_ID : Int = 2;

  private var __isset_endFlag : Bool = false;

  public function new() {
  }

  public function get_operations() : List< MessageOperation> {
    return this.operations;
  }

  public function set_operations(operations:List< MessageOperation>) : List< MessageOperation> {
    this.operations = operations;
    return this.operations;
  }

  public function unsetOperations() : Void {
    this.operations = null;
  }

  // Returns true if field operations is set (has been assigned a value) and false otherwise
  public function isSetOperations() : Bool {
    return this.operations != null;
  }

  public function get_endFlag() : Bool {
    return this.endFlag;
  }

  public function set_endFlag(endFlag:Bool) : Bool {
    this.endFlag = endFlag;
    this.__isset_endFlag = true;
    return this.endFlag;
  }

  public function unsetEndFlag() : Void {
    this.__isset_endFlag = false;
  }

  // Returns true if field endFlag is set (has been assigned a value) and false otherwise
  public function isSetEndFlag() : Bool {
    return this.__isset_endFlag;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case OPERATIONS_FIELD_ID:
      if (value == null) {
        unsetOperations();
      } else {
        this.operations = value;
      }

    case ENDFLAG_FIELD_ID:
      if (value == null) {
        unsetEndFlag();
      } else {
        this.endFlag = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case OPERATIONS_FIELD_ID:
      return this.operations;
    case ENDFLAG_FIELD_ID:
      return this.endFlag;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case OPERATIONS_FIELD_ID:
      return isSetOperations();
    case ENDFLAG_FIELD_ID:
      return isSetEndFlag();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case OPERATIONS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list178 = iprot.readListBegin();
                this.operations = new List< MessageOperation>();
                for( _i179 in 0 ... _list178.size)
                {
                  var _elem180 : MessageOperation;
                  _elem180 = new MessageOperation();
                  _elem180.read(iprot);
                  this.operations.add(_elem180);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ENDFLAG_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.endFlag = iprot.readBool();
              this.__isset_endFlag = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.operations != null) {
        oprot.writeFieldBegin(OPERATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.operations.length));
          for( elem181 in this.operations)
          {
            elem181.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(END_FLAG_FIELD_DESC);
      oprot.writeBool(this.endFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "MessageOperations(";
    var first : Bool = true;

    ret += "operations:";
    if (this.operations == null) {
      ret += "null";
    } else {
      ret += this.operations;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "endFlag:";
    ret += this.endFlag;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

