/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class RefreshSubscriptionsResponse implements TBase {
  
  static var STRUCT_DESC = { new TStruct("RefreshSubscriptionsResponse"); };
  static var TTL_MILLIS_FIELD_DESC = { new TField("ttlMillis", TType.I64, 1); };
  static var SUBSCRIPTION_STATES_FIELD_DESC = { new TField("subscriptionStates", TType.MAP, 2); };

  @:isVar
  public var ttlMillis(get,set) : haxe.Int64;
  @:isVar
  public var subscriptionStates(get,set) : Int64Map< SubscriptionState>;

  inline static var TTLMILLIS_FIELD_ID : Int = 1;
  inline static var SUBSCRIPTIONSTATES_FIELD_ID : Int = 2;

  private var __isset_ttlMillis : Bool = false;

  public function new() {
  }

  public function get_ttlMillis() : haxe.Int64 {
    return this.ttlMillis;
  }

  public function set_ttlMillis(ttlMillis:haxe.Int64) : haxe.Int64 {
    this.ttlMillis = ttlMillis;
    this.__isset_ttlMillis = true;
    return this.ttlMillis;
  }

  public function unsetTtlMillis() : Void {
    this.__isset_ttlMillis = false;
  }

  // Returns true if field ttlMillis is set (has been assigned a value) and false otherwise
  public function isSetTtlMillis() : Bool {
    return this.__isset_ttlMillis;
  }

  public function get_subscriptionStates() : Int64Map< SubscriptionState> {
    return this.subscriptionStates;
  }

  public function set_subscriptionStates(subscriptionStates:Int64Map< SubscriptionState>) : Int64Map< SubscriptionState> {
    this.subscriptionStates = subscriptionStates;
    return this.subscriptionStates;
  }

  public function unsetSubscriptionStates() : Void {
    this.subscriptionStates = null;
  }

  // Returns true if field subscriptionStates is set (has been assigned a value) and false otherwise
  public function isSetSubscriptionStates() : Bool {
    return this.subscriptionStates != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case TTLMILLIS_FIELD_ID:
      if (value == null) {
        unsetTtlMillis();
      } else {
        this.ttlMillis = value;
      }

    case SUBSCRIPTIONSTATES_FIELD_ID:
      if (value == null) {
        unsetSubscriptionStates();
      } else {
        this.subscriptionStates = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case TTLMILLIS_FIELD_ID:
      return this.ttlMillis;
    case SUBSCRIPTIONSTATES_FIELD_ID:
      return this.subscriptionStates;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case TTLMILLIS_FIELD_ID:
      return isSetTtlMillis();
    case SUBSCRIPTIONSTATES_FIELD_ID:
      return isSetSubscriptionStates();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case TTLMILLIS_FIELD_ID:
            if (field.type == TType.I64) {
              this.ttlMillis = iprot.readI64();
              this.__isset_ttlMillis = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SUBSCRIPTIONSTATES_FIELD_ID:
            if (field.type == TType.MAP) {
              {
                var _map510 = iprot.readMapBegin();
                this.subscriptionStates = new Int64Map< SubscriptionState>();
                for( _i511 in 0 ... _map510.size)
                {
                  var _key512 : haxe.Int64;
                  var _val513 : SubscriptionState;
                  _key512 = iprot.readI64();
                  _val513 = new SubscriptionState();
                  _val513.read(iprot);
                  this.subscriptionStates.set( _key512, _val513);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TTL_MILLIS_FIELD_DESC);
      oprot.writeI64(this.ttlMillis);
      oprot.writeFieldEnd();
      if (this.subscriptionStates != null) {
        oprot.writeFieldBegin(SUBSCRIPTION_STATES_FIELD_DESC);
        {
          var _sizeCounter515 : Int = 0;
          for( _key514 in this.subscriptionStates) {
            _sizeCounter515++;
          }
          oprot.writeMapBegin(new TMap(TType.I64, TType.STRUCT, _sizeCounter515));
          for( elem516 in this.subscriptionStates.keys())
          {
            oprot.writeI64(elem516);
            this.subscriptionStates.get(elem516).write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "RefreshSubscriptionsResponse(";
    var first : Bool = true;

    ret += "ttlMillis:";
    ret += this.ttlMillis;
    first = false;
    if (!first) ret +=  ", ";
    ret += "subscriptionStates:";
    if (this.subscriptionStates == null) {
      ret += "null";
    } else {
      ret += this.subscriptionStates;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

