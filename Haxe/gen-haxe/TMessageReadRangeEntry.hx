/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class TMessageReadRangeEntry implements TBase {
  
  static var STRUCT_DESC = { new TStruct("TMessageReadRangeEntry"); };
  static var START_MESSAGE_ID_FIELD_DESC = { new TField("startMessageId", TType.I64, 1); };
  static var END_MESSAGE_ID_FIELD_DESC = { new TField("endMessageId", TType.I64, 2); };
  static var START_TIME_FIELD_DESC = { new TField("startTime", TType.I64, 3); };
  static var END_TIME_FIELD_DESC = { new TField("endTime", TType.I64, 4); };

  @:isVar
  public var startMessageId(get,set) : haxe.Int64;
  @:isVar
  public var endMessageId(get,set) : haxe.Int64;
  @:isVar
  public var startTime(get,set) : haxe.Int64;
  @:isVar
  public var endTime(get,set) : haxe.Int64;

  inline static var STARTMESSAGEID_FIELD_ID : Int = 1;
  inline static var ENDMESSAGEID_FIELD_ID : Int = 2;
  inline static var STARTTIME_FIELD_ID : Int = 3;
  inline static var ENDTIME_FIELD_ID : Int = 4;

  private var __isset_startMessageId : Bool = false;
  private var __isset_endMessageId : Bool = false;
  private var __isset_startTime : Bool = false;
  private var __isset_endTime : Bool = false;

  public function new() {
  }

  public function get_startMessageId() : haxe.Int64 {
    return this.startMessageId;
  }

  public function set_startMessageId(startMessageId:haxe.Int64) : haxe.Int64 {
    this.startMessageId = startMessageId;
    this.__isset_startMessageId = true;
    return this.startMessageId;
  }

  public function unsetStartMessageId() : Void {
    this.__isset_startMessageId = false;
  }

  // Returns true if field startMessageId is set (has been assigned a value) and false otherwise
  public function isSetStartMessageId() : Bool {
    return this.__isset_startMessageId;
  }

  public function get_endMessageId() : haxe.Int64 {
    return this.endMessageId;
  }

  public function set_endMessageId(endMessageId:haxe.Int64) : haxe.Int64 {
    this.endMessageId = endMessageId;
    this.__isset_endMessageId = true;
    return this.endMessageId;
  }

  public function unsetEndMessageId() : Void {
    this.__isset_endMessageId = false;
  }

  // Returns true if field endMessageId is set (has been assigned a value) and false otherwise
  public function isSetEndMessageId() : Bool {
    return this.__isset_endMessageId;
  }

  public function get_startTime() : haxe.Int64 {
    return this.startTime;
  }

  public function set_startTime(startTime:haxe.Int64) : haxe.Int64 {
    this.startTime = startTime;
    this.__isset_startTime = true;
    return this.startTime;
  }

  public function unsetStartTime() : Void {
    this.__isset_startTime = false;
  }

  // Returns true if field startTime is set (has been assigned a value) and false otherwise
  public function isSetStartTime() : Bool {
    return this.__isset_startTime;
  }

  public function get_endTime() : haxe.Int64 {
    return this.endTime;
  }

  public function set_endTime(endTime:haxe.Int64) : haxe.Int64 {
    this.endTime = endTime;
    this.__isset_endTime = true;
    return this.endTime;
  }

  public function unsetEndTime() : Void {
    this.__isset_endTime = false;
  }

  // Returns true if field endTime is set (has been assigned a value) and false otherwise
  public function isSetEndTime() : Bool {
    return this.__isset_endTime;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case STARTMESSAGEID_FIELD_ID:
      if (value == null) {
        unsetStartMessageId();
      } else {
        this.startMessageId = value;
      }

    case ENDMESSAGEID_FIELD_ID:
      if (value == null) {
        unsetEndMessageId();
      } else {
        this.endMessageId = value;
      }

    case STARTTIME_FIELD_ID:
      if (value == null) {
        unsetStartTime();
      } else {
        this.startTime = value;
      }

    case ENDTIME_FIELD_ID:
      if (value == null) {
        unsetEndTime();
      } else {
        this.endTime = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case STARTMESSAGEID_FIELD_ID:
      return this.startMessageId;
    case ENDMESSAGEID_FIELD_ID:
      return this.endMessageId;
    case STARTTIME_FIELD_ID:
      return this.startTime;
    case ENDTIME_FIELD_ID:
      return this.endTime;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case STARTMESSAGEID_FIELD_ID:
      return isSetStartMessageId();
    case ENDMESSAGEID_FIELD_ID:
      return isSetEndMessageId();
    case STARTTIME_FIELD_ID:
      return isSetStartTime();
    case ENDTIME_FIELD_ID:
      return isSetEndTime();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case STARTMESSAGEID_FIELD_ID:
            if (field.type == TType.I64) {
              this.startMessageId = iprot.readI64();
              this.__isset_startMessageId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ENDMESSAGEID_FIELD_ID:
            if (field.type == TType.I64) {
              this.endMessageId = iprot.readI64();
              this.__isset_endMessageId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case STARTTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.startTime = iprot.readI64();
              this.__isset_startTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ENDTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.endTime = iprot.readI64();
              this.__isset_endTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_MESSAGE_ID_FIELD_DESC);
      oprot.writeI64(this.startMessageId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_MESSAGE_ID_FIELD_DESC);
      oprot.writeI64(this.endMessageId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(this.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(this.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "TMessageReadRangeEntry(";
    var first : Bool = true;

    ret += "startMessageId:";
    ret += this.startMessageId;
    first = false;
    if (!first) ret +=  ", ";
    ret += "endMessageId:";
    ret += this.endMessageId;
    first = false;
    if (!first) ret +=  ", ";
    ret += "startTime:";
    ret += this.startTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "endTime:";
    ret += this.endTime;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

