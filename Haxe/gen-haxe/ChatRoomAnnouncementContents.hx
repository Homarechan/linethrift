/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class ChatRoomAnnouncementContents implements TBase {
  
  static var STRUCT_DESC = { new TStruct("ChatRoomAnnouncementContents"); };
  static var DISPLAY_FIELDS_FIELD_DESC = { new TField("displayFields", TType.I32, 1); };
  static var TEXT_FIELD_DESC = { new TField("text", TType.STRING, 2); };
  static var LINK_FIELD_DESC = { new TField("link", TType.STRING, 3); };
  static var THUMBNAIL_FIELD_DESC = { new TField("thumbnail", TType.STRING, 4); };

  @:isVar
  public var displayFields(get,set) : haxe.Int32;
  @:isVar
  public var text(get,set) : String;
  @:isVar
  public var link(get,set) : String;
  @:isVar
  public var thumbnail(get,set) : String;

  inline static var DISPLAYFIELDS_FIELD_ID : Int = 1;
  inline static var TEXT_FIELD_ID : Int = 2;
  inline static var LINK_FIELD_ID : Int = 3;
  inline static var THUMBNAIL_FIELD_ID : Int = 4;

  private var __isset_displayFields : Bool = false;

  public function new() {
  }

  public function get_displayFields() : haxe.Int32 {
    return this.displayFields;
  }

  public function set_displayFields(displayFields:haxe.Int32) : haxe.Int32 {
    this.displayFields = displayFields;
    this.__isset_displayFields = true;
    return this.displayFields;
  }

  public function unsetDisplayFields() : Void {
    this.__isset_displayFields = false;
  }

  // Returns true if field displayFields is set (has been assigned a value) and false otherwise
  public function isSetDisplayFields() : Bool {
    return this.__isset_displayFields;
  }

  public function get_text() : String {
    return this.text;
  }

  public function set_text(text:String) : String {
    this.text = text;
    return this.text;
  }

  public function unsetText() : Void {
    this.text = null;
  }

  // Returns true if field text is set (has been assigned a value) and false otherwise
  public function isSetText() : Bool {
    return this.text != null;
  }

  public function get_link() : String {
    return this.link;
  }

  public function set_link(link:String) : String {
    this.link = link;
    return this.link;
  }

  public function unsetLink() : Void {
    this.link = null;
  }

  // Returns true if field link is set (has been assigned a value) and false otherwise
  public function isSetLink() : Bool {
    return this.link != null;
  }

  public function get_thumbnail() : String {
    return this.thumbnail;
  }

  public function set_thumbnail(thumbnail:String) : String {
    this.thumbnail = thumbnail;
    return this.thumbnail;
  }

  public function unsetThumbnail() : Void {
    this.thumbnail = null;
  }

  // Returns true if field thumbnail is set (has been assigned a value) and false otherwise
  public function isSetThumbnail() : Bool {
    return this.thumbnail != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case DISPLAYFIELDS_FIELD_ID:
      if (value == null) {
        unsetDisplayFields();
      } else {
        this.displayFields = value;
      }

    case TEXT_FIELD_ID:
      if (value == null) {
        unsetText();
      } else {
        this.text = value;
      }

    case LINK_FIELD_ID:
      if (value == null) {
        unsetLink();
      } else {
        this.link = value;
      }

    case THUMBNAIL_FIELD_ID:
      if (value == null) {
        unsetThumbnail();
      } else {
        this.thumbnail = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case DISPLAYFIELDS_FIELD_ID:
      return this.displayFields;
    case TEXT_FIELD_ID:
      return this.text;
    case LINK_FIELD_ID:
      return this.link;
    case THUMBNAIL_FIELD_ID:
      return this.thumbnail;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case DISPLAYFIELDS_FIELD_ID:
      return isSetDisplayFields();
    case TEXT_FIELD_ID:
      return isSetText();
    case LINK_FIELD_ID:
      return isSetLink();
    case THUMBNAIL_FIELD_ID:
      return isSetThumbnail();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DISPLAYFIELDS_FIELD_ID:
            if (field.type == TType.I32) {
              this.displayFields = iprot.readI32();
              this.__isset_displayFields = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TEXT_FIELD_ID:
            if (field.type == TType.STRING) {
              this.text = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case LINK_FIELD_ID:
            if (field.type == TType.STRING) {
              this.link = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case THUMBNAIL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.thumbnail = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DISPLAY_FIELDS_FIELD_DESC);
      oprot.writeI32(this.displayFields);
      oprot.writeFieldEnd();
      if (this.text != null) {
        oprot.writeFieldBegin(TEXT_FIELD_DESC);
        oprot.writeString(this.text);
        oprot.writeFieldEnd();
      }
      if (this.link != null) {
        oprot.writeFieldBegin(LINK_FIELD_DESC);
        oprot.writeString(this.link);
        oprot.writeFieldEnd();
      }
      if (this.thumbnail != null) {
        oprot.writeFieldBegin(THUMBNAIL_FIELD_DESC);
        oprot.writeString(this.thumbnail);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "ChatRoomAnnouncementContents(";
    var first : Bool = true;

    ret += "displayFields:";
    ret += this.displayFields;
    first = false;
    if (!first) ret +=  ", ";
    ret += "text:";
    if (this.text == null) {
      ret += "null";
    } else {
      ret += this.text;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "link:";
    if (this.link == null) {
      ret += "null";
    } else {
      ret += this.link;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "thumbnail:";
    if (this.thumbnail == null) {
      ret += "null";
    } else {
      ret += this.thumbnail;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

