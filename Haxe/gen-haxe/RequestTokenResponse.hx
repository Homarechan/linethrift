/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class RequestTokenResponse implements TBase {
  
  static var STRUCT_DESC = { new TStruct("RequestTokenResponse"); };
  static var REQUEST_TOKEN_FIELD_DESC = { new TField("requestToken", TType.STRING, 1); };
  static var RETURN_URL_FIELD_DESC = { new TField("returnUrl", TType.STRING, 2); };

  @:isVar
  public var requestToken(get,set) : String;
  @:isVar
  public var returnUrl(get,set) : String;

  inline static var REQUESTTOKEN_FIELD_ID : Int = 1;
  inline static var RETURNURL_FIELD_ID : Int = 2;


  public function new() {
  }

  public function get_requestToken() : String {
    return this.requestToken;
  }

  public function set_requestToken(requestToken:String) : String {
    this.requestToken = requestToken;
    return this.requestToken;
  }

  public function unsetRequestToken() : Void {
    this.requestToken = null;
  }

  // Returns true if field requestToken is set (has been assigned a value) and false otherwise
  public function isSetRequestToken() : Bool {
    return this.requestToken != null;
  }

  public function get_returnUrl() : String {
    return this.returnUrl;
  }

  public function set_returnUrl(returnUrl:String) : String {
    this.returnUrl = returnUrl;
    return this.returnUrl;
  }

  public function unsetReturnUrl() : Void {
    this.returnUrl = null;
  }

  // Returns true if field returnUrl is set (has been assigned a value) and false otherwise
  public function isSetReturnUrl() : Bool {
    return this.returnUrl != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case REQUESTTOKEN_FIELD_ID:
      if (value == null) {
        unsetRequestToken();
      } else {
        this.requestToken = value;
      }

    case RETURNURL_FIELD_ID:
      if (value == null) {
        unsetReturnUrl();
      } else {
        this.returnUrl = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case REQUESTTOKEN_FIELD_ID:
      return this.requestToken;
    case RETURNURL_FIELD_ID:
      return this.returnUrl;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case REQUESTTOKEN_FIELD_ID:
      return isSetRequestToken();
    case RETURNURL_FIELD_ID:
      return isSetReturnUrl();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case REQUESTTOKEN_FIELD_ID:
            if (field.type == TType.STRING) {
              this.requestToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case RETURNURL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.returnUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestToken != null) {
        oprot.writeFieldBegin(REQUEST_TOKEN_FIELD_DESC);
        oprot.writeString(this.requestToken);
        oprot.writeFieldEnd();
      }
      if (this.returnUrl != null) {
        oprot.writeFieldBegin(RETURN_URL_FIELD_DESC);
        oprot.writeString(this.returnUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "RequestTokenResponse(";
    var first : Bool = true;

    ret += "requestToken:";
    if (this.requestToken == null) {
      ret += "null";
    } else {
      ret += this.requestToken;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "returnUrl:";
    if (this.returnUrl == null) {
      ret += "null";
    } else {
      ret += this.returnUrl;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

