/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class ChannelNotificationSetting implements TBase {
  
  static var STRUCT_DESC = { new TStruct("ChannelNotificationSetting"); };
  static var CHANNEL_ID_FIELD_DESC = { new TField("channelId", TType.STRING, 1); };
  static var NAME_FIELD_DESC = { new TField("name", TType.STRING, 2); };
  static var NOTIFICATION_RECEIVABLE_FIELD_DESC = { new TField("notificationReceivable", TType.BOOL, 3); };
  static var MESSAGE_RECEIVABLE_FIELD_DESC = { new TField("messageReceivable", TType.BOOL, 4); };
  static var SHOW_DEFAULT_FIELD_DESC = { new TField("showDefault", TType.BOOL, 5); };

  @:isVar
  public var channelId(get,set) : String;
  @:isVar
  public var name(get,set) : String;
  @:isVar
  public var notificationReceivable(get,set) : Bool;
  @:isVar
  public var messageReceivable(get,set) : Bool;
  @:isVar
  public var showDefault(get,set) : Bool;

  inline static var CHANNELID_FIELD_ID : Int = 1;
  inline static var NAME_FIELD_ID : Int = 2;
  inline static var NOTIFICATIONRECEIVABLE_FIELD_ID : Int = 3;
  inline static var MESSAGERECEIVABLE_FIELD_ID : Int = 4;
  inline static var SHOWDEFAULT_FIELD_ID : Int = 5;

  private var __isset_notificationReceivable : Bool = false;
  private var __isset_messageReceivable : Bool = false;
  private var __isset_showDefault : Bool = false;

  public function new() {
  }

  public function get_channelId() : String {
    return this.channelId;
  }

  public function set_channelId(channelId:String) : String {
    this.channelId = channelId;
    return this.channelId;
  }

  public function unsetChannelId() : Void {
    this.channelId = null;
  }

  // Returns true if field channelId is set (has been assigned a value) and false otherwise
  public function isSetChannelId() : Bool {
    return this.channelId != null;
  }

  public function get_name() : String {
    return this.name;
  }

  public function set_name(name:String) : String {
    this.name = name;
    return this.name;
  }

  public function unsetName() : Void {
    this.name = null;
  }

  // Returns true if field name is set (has been assigned a value) and false otherwise
  public function isSetName() : Bool {
    return this.name != null;
  }

  public function get_notificationReceivable() : Bool {
    return this.notificationReceivable;
  }

  public function set_notificationReceivable(notificationReceivable:Bool) : Bool {
    this.notificationReceivable = notificationReceivable;
    this.__isset_notificationReceivable = true;
    return this.notificationReceivable;
  }

  public function unsetNotificationReceivable() : Void {
    this.__isset_notificationReceivable = false;
  }

  // Returns true if field notificationReceivable is set (has been assigned a value) and false otherwise
  public function isSetNotificationReceivable() : Bool {
    return this.__isset_notificationReceivable;
  }

  public function get_messageReceivable() : Bool {
    return this.messageReceivable;
  }

  public function set_messageReceivable(messageReceivable:Bool) : Bool {
    this.messageReceivable = messageReceivable;
    this.__isset_messageReceivable = true;
    return this.messageReceivable;
  }

  public function unsetMessageReceivable() : Void {
    this.__isset_messageReceivable = false;
  }

  // Returns true if field messageReceivable is set (has been assigned a value) and false otherwise
  public function isSetMessageReceivable() : Bool {
    return this.__isset_messageReceivable;
  }

  public function get_showDefault() : Bool {
    return this.showDefault;
  }

  public function set_showDefault(showDefault:Bool) : Bool {
    this.showDefault = showDefault;
    this.__isset_showDefault = true;
    return this.showDefault;
  }

  public function unsetShowDefault() : Void {
    this.__isset_showDefault = false;
  }

  // Returns true if field showDefault is set (has been assigned a value) and false otherwise
  public function isSetShowDefault() : Bool {
    return this.__isset_showDefault;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case CHANNELID_FIELD_ID:
      if (value == null) {
        unsetChannelId();
      } else {
        this.channelId = value;
      }

    case NAME_FIELD_ID:
      if (value == null) {
        unsetName();
      } else {
        this.name = value;
      }

    case NOTIFICATIONRECEIVABLE_FIELD_ID:
      if (value == null) {
        unsetNotificationReceivable();
      } else {
        this.notificationReceivable = value;
      }

    case MESSAGERECEIVABLE_FIELD_ID:
      if (value == null) {
        unsetMessageReceivable();
      } else {
        this.messageReceivable = value;
      }

    case SHOWDEFAULT_FIELD_ID:
      if (value == null) {
        unsetShowDefault();
      } else {
        this.showDefault = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case CHANNELID_FIELD_ID:
      return this.channelId;
    case NAME_FIELD_ID:
      return this.name;
    case NOTIFICATIONRECEIVABLE_FIELD_ID:
      return this.notificationReceivable;
    case MESSAGERECEIVABLE_FIELD_ID:
      return this.messageReceivable;
    case SHOWDEFAULT_FIELD_ID:
      return this.showDefault;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case CHANNELID_FIELD_ID:
      return isSetChannelId();
    case NAME_FIELD_ID:
      return isSetName();
    case NOTIFICATIONRECEIVABLE_FIELD_ID:
      return isSetNotificationReceivable();
    case MESSAGERECEIVABLE_FIELD_ID:
      return isSetMessageReceivable();
    case SHOWDEFAULT_FIELD_ID:
      return isSetShowDefault();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case CHANNELID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NOTIFICATIONRECEIVABLE_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.notificationReceivable = iprot.readBool();
              this.__isset_notificationReceivable = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MESSAGERECEIVABLE_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.messageReceivable = iprot.readBool();
              this.__isset_messageReceivable = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SHOWDEFAULT_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.showDefault = iprot.readBool();
              this.__isset_showDefault = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NOTIFICATION_RECEIVABLE_FIELD_DESC);
      oprot.writeBool(this.notificationReceivable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGE_RECEIVABLE_FIELD_DESC);
      oprot.writeBool(this.messageReceivable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOW_DEFAULT_FIELD_DESC);
      oprot.writeBool(this.showDefault);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "ChannelNotificationSetting(";
    var first : Bool = true;

    ret += "channelId:";
    if (this.channelId == null) {
      ret += "null";
    } else {
      ret += this.channelId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "name:";
    if (this.name == null) {
      ret += "null";
    } else {
      ret += this.name;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "notificationReceivable:";
    ret += this.notificationReceivable;
    first = false;
    if (!first) ret +=  ", ";
    ret += "messageReceivable:";
    ret += this.messageReceivable;
    first = false;
    if (!first) ret +=  ", ";
    ret += "showDefault:";
    ret += this.showDefault;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

