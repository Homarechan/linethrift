/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class E2EENegotiationResult implements TBase {
  
  static var STRUCT_DESC = { new TStruct("E2EENegotiationResult"); };
  static var ALLOWED_TYPES_FIELD_DESC = { new TField("allowedTypes", TType.SET, 1); };
  static var PUBLIC_KEY_FIELD_DESC = { new TField("publicKey", TType.STRUCT, 2); };

  @:isVar
  public var allowedTypes(get,set) : IntSet;
  @:isVar
  public var publicKey(get,set) : E2EEPublicKey;

  inline static var ALLOWEDTYPES_FIELD_ID : Int = 1;
  inline static var PUBLICKEY_FIELD_ID : Int = 2;


  public function new() {
  }

  public function get_allowedTypes() : IntSet {
    return this.allowedTypes;
  }

  public function set_allowedTypes(allowedTypes:IntSet) : IntSet {
    this.allowedTypes = allowedTypes;
    return this.allowedTypes;
  }

  public function unsetAllowedTypes() : Void {
    this.allowedTypes = null;
  }

  // Returns true if field allowedTypes is set (has been assigned a value) and false otherwise
  public function isSetAllowedTypes() : Bool {
    return this.allowedTypes != null;
  }

  public function get_publicKey() : E2EEPublicKey {
    return this.publicKey;
  }

  public function set_publicKey(publicKey:E2EEPublicKey) : E2EEPublicKey {
    this.publicKey = publicKey;
    return this.publicKey;
  }

  public function unsetPublicKey() : Void {
    this.publicKey = null;
  }

  // Returns true if field publicKey is set (has been assigned a value) and false otherwise
  public function isSetPublicKey() : Bool {
    return this.publicKey != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case ALLOWEDTYPES_FIELD_ID:
      if (value == null) {
        unsetAllowedTypes();
      } else {
        this.allowedTypes = value;
      }

    case PUBLICKEY_FIELD_ID:
      if (value == null) {
        unsetPublicKey();
      } else {
        this.publicKey = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case ALLOWEDTYPES_FIELD_ID:
      return this.allowedTypes;
    case PUBLICKEY_FIELD_ID:
      return this.publicKey;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case ALLOWEDTYPES_FIELD_ID:
      return isSetAllowedTypes();
    case PUBLICKEY_FIELD_ID:
      return isSetPublicKey();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ALLOWEDTYPES_FIELD_ID:
            if (field.type == TType.SET) {
              {
                var _set4 = iprot.readSetBegin();
                this.allowedTypes = new IntSet();
                for( _i5 in 0 ... _set4.size)
                {
                  var _elem6 : Int;
                  _elem6 = iprot.readI32();
                  this.allowedTypes.add(_elem6);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PUBLICKEY_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.publicKey = new E2EEPublicKey();
              this.publicKey.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.allowedTypes != null) {
        oprot.writeFieldBegin(ALLOWED_TYPES_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.I32, this.allowedTypes.size));
          for( elem7 in this.allowedTypes.toArray())
          {
            oprot.writeI32(elem7);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.publicKey != null) {
        oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
        this.publicKey.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "E2EENegotiationResult(";
    var first : Bool = true;

    ret += "allowedTypes:";
    if (this.allowedTypes == null) {
      ret += "null";
    } else {
      ret += this.allowedTypes;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "publicKey:";
    if (this.publicKey == null) {
      ret += "null";
    } else {
      ret += this.publicKey;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

