/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class RegisterBuddy_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("registerBuddy_args"); };
  static var BUDDY_ID_FIELD_DESC = { new TField("buddyId", TType.STRING, 2); };
  static var SEARCH_ID_FIELD_DESC = { new TField("searchId", TType.STRING, 3); };
  static var DISPLAY_NAME_FIELD_DESC = { new TField("displayName", TType.STRING, 4); };
  static var STATUS_MEESSAGE_FIELD_DESC = { new TField("statusMeessage", TType.STRING, 5); };
  static var PICTURE_FIELD_DESC = { new TField("picture", TType.STRING, 6); };
  static var SETTINGS_FIELD_DESC = { new TField("settings", TType.MAP, 7); };

  @:isVar
  public var buddyId(get,set) : String;
  @:isVar
  public var searchId(get,set) : String;
  @:isVar
  public var displayName(get,set) : String;
  @:isVar
  public var statusMeessage(get,set) : String;
  @:isVar
  public var picture(get,set) : haxe.io.Bytes;
  @:isVar
  public var settings(get,set) : StringMap< String>;

  inline static var BUDDYID_FIELD_ID : Int = 2;
  inline static var SEARCHID_FIELD_ID : Int = 3;
  inline static var DISPLAYNAME_FIELD_ID : Int = 4;
  inline static var STATUSMEESSAGE_FIELD_ID : Int = 5;
  inline static var PICTURE_FIELD_ID : Int = 6;
  inline static var SETTINGS_FIELD_ID : Int = 7;


  public function new() {
  }

  public function get_buddyId() : String {
    return this.buddyId;
  }

  public function set_buddyId(buddyId:String) : String {
    this.buddyId = buddyId;
    return this.buddyId;
  }

  public function unsetBuddyId() : Void {
    this.buddyId = null;
  }

  // Returns true if field buddyId is set (has been assigned a value) and false otherwise
  public function isSetBuddyId() : Bool {
    return this.buddyId != null;
  }

  public function get_searchId() : String {
    return this.searchId;
  }

  public function set_searchId(searchId:String) : String {
    this.searchId = searchId;
    return this.searchId;
  }

  public function unsetSearchId() : Void {
    this.searchId = null;
  }

  // Returns true if field searchId is set (has been assigned a value) and false otherwise
  public function isSetSearchId() : Bool {
    return this.searchId != null;
  }

  public function get_displayName() : String {
    return this.displayName;
  }

  public function set_displayName(displayName:String) : String {
    this.displayName = displayName;
    return this.displayName;
  }

  public function unsetDisplayName() : Void {
    this.displayName = null;
  }

  // Returns true if field displayName is set (has been assigned a value) and false otherwise
  public function isSetDisplayName() : Bool {
    return this.displayName != null;
  }

  public function get_statusMeessage() : String {
    return this.statusMeessage;
  }

  public function set_statusMeessage(statusMeessage:String) : String {
    this.statusMeessage = statusMeessage;
    return this.statusMeessage;
  }

  public function unsetStatusMeessage() : Void {
    this.statusMeessage = null;
  }

  // Returns true if field statusMeessage is set (has been assigned a value) and false otherwise
  public function isSetStatusMeessage() : Bool {
    return this.statusMeessage != null;
  }

  public function get_picture() : haxe.io.Bytes {
    return this.picture;
  }

  public function set_picture(picture:haxe.io.Bytes) : haxe.io.Bytes {
    this.picture = picture;
    return this.picture;
  }

  public function unsetPicture() : Void {
    this.picture = null;
  }

  // Returns true if field picture is set (has been assigned a value) and false otherwise
  public function isSetPicture() : Bool {
    return this.picture != null;
  }

  public function get_settings() : StringMap< String> {
    return this.settings;
  }

  public function set_settings(settings:StringMap< String>) : StringMap< String> {
    this.settings = settings;
    return this.settings;
  }

  public function unsetSettings() : Void {
    this.settings = null;
  }

  // Returns true if field settings is set (has been assigned a value) and false otherwise
  public function isSetSettings() : Bool {
    return this.settings != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case BUDDYID_FIELD_ID:
      if (value == null) {
        unsetBuddyId();
      } else {
        this.buddyId = value;
      }

    case SEARCHID_FIELD_ID:
      if (value == null) {
        unsetSearchId();
      } else {
        this.searchId = value;
      }

    case DISPLAYNAME_FIELD_ID:
      if (value == null) {
        unsetDisplayName();
      } else {
        this.displayName = value;
      }

    case STATUSMEESSAGE_FIELD_ID:
      if (value == null) {
        unsetStatusMeessage();
      } else {
        this.statusMeessage = value;
      }

    case PICTURE_FIELD_ID:
      if (value == null) {
        unsetPicture();
      } else {
        this.picture = value;
      }

    case SETTINGS_FIELD_ID:
      if (value == null) {
        unsetSettings();
      } else {
        this.settings = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case BUDDYID_FIELD_ID:
      return this.buddyId;
    case SEARCHID_FIELD_ID:
      return this.searchId;
    case DISPLAYNAME_FIELD_ID:
      return this.displayName;
    case STATUSMEESSAGE_FIELD_ID:
      return this.statusMeessage;
    case PICTURE_FIELD_ID:
      return this.picture;
    case SETTINGS_FIELD_ID:
      return this.settings;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case BUDDYID_FIELD_ID:
      return isSetBuddyId();
    case SEARCHID_FIELD_ID:
      return isSetSearchId();
    case DISPLAYNAME_FIELD_ID:
      return isSetDisplayName();
    case STATUSMEESSAGE_FIELD_ID:
      return isSetStatusMeessage();
    case PICTURE_FIELD_ID:
      return isSetPicture();
    case SETTINGS_FIELD_ID:
      return isSetSettings();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BUDDYID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.buddyId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SEARCHID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.searchId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DISPLAYNAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.displayName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case STATUSMEESSAGE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.statusMeessage = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PICTURE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.picture = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SETTINGS_FIELD_ID:
            if (field.type == TType.MAP) {
              {
                var _map650 = iprot.readMapBegin();
                this.settings = new StringMap< String>();
                for( _i651 in 0 ... _map650.size)
                {
                  var _key652 : String;
                  var _val653 : String;
                  _key652 = iprot.readString();
                  _val653 = iprot.readString();
                  this.settings.set( _key652, _val653);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.buddyId != null) {
        oprot.writeFieldBegin(BUDDY_ID_FIELD_DESC);
        oprot.writeString(this.buddyId);
        oprot.writeFieldEnd();
      }
      if (this.searchId != null) {
        oprot.writeFieldBegin(SEARCH_ID_FIELD_DESC);
        oprot.writeString(this.searchId);
        oprot.writeFieldEnd();
      }
      if (this.displayName != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(this.displayName);
        oprot.writeFieldEnd();
      }
      if (this.statusMeessage != null) {
        oprot.writeFieldBegin(STATUS_MEESSAGE_FIELD_DESC);
        oprot.writeString(this.statusMeessage);
        oprot.writeFieldEnd();
      }
      if (this.picture != null) {
        oprot.writeFieldBegin(PICTURE_FIELD_DESC);
        oprot.writeBinary(this.picture);
        oprot.writeFieldEnd();
      }
      if (this.settings != null) {
        oprot.writeFieldBegin(SETTINGS_FIELD_DESC);
        {
          var _sizeCounter655 : Int = 0;
          for( _key654 in this.settings) {
            _sizeCounter655++;
          }
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _sizeCounter655));
          for( elem656 in this.settings.keys())
          {
            oprot.writeString(elem656);
            oprot.writeString(this.settings.get(elem656));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "registerBuddy_args(";
    var first : Bool = true;

    ret += "buddyId:";
    if (this.buddyId == null) {
      ret += "null";
    } else {
      ret += this.buddyId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "searchId:";
    if (this.searchId == null) {
      ret += "null";
    } else {
      ret += this.searchId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "displayName:";
    if (this.displayName == null) {
      ret += "null";
    } else {
      ret += this.displayName;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "statusMeessage:";
    if (this.statusMeessage == null) {
      ret += "null";
    } else {
      ret += this.statusMeessage;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "picture:";
    if (this.picture == null) {
      ret += "null";
    } else {
        ret += "BINARY";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "settings:";
    if (this.settings == null) {
      ret += "null";
    } else {
      ret += this.settings;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

