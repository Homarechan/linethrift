/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;



class AuthServiceImpl implements AuthService {

  public function new( iprot : TProtocol, oprot : TProtocol = null)
  {
    iprot_ = iprot;
    if (oprot == null) {
      oprot_ = iprot;
    } else {
      oprot_ = oprot;
    }
  }

  private var iprot_ : TProtocol;
  private var oprot_ : TProtocol;
  private var seqid_ : Int;

  public function getInputProtocol() : TProtocol
  {
    return this.iprot_;
  }

  public function getOutputProtocol() : TProtocol
  {
    return this.oprot_;
  }

  public function normalizePhoneNumber(countryCode : String, phoneNumber : String, countryCodeHint : String) : String {
    oprot_.writeMessageBegin(new TMessage("normalizePhoneNumber", TMessageType.CALL, seqid_));
    var args : NormalizePhoneNumber_args = new NormalizePhoneNumber_args();
    args.countryCode = countryCode;
    args.phoneNumber = phoneNumber;
    args.countryCodeHint = countryCodeHint;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : NormalizePhoneNumber_result = new NormalizePhoneNumber_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "normalizePhoneNumber failed: unknown result");
    });
    return retval;
  }

  public function respondE2EELoginRequest(verifier : String, publicKey : E2EEPublicKey, encryptedKeyChain : haxe.io.Bytes, hashKeyChain : haxe.io.Bytes, errorCode : Int) : Void {
    oprot_.writeMessageBegin(new TMessage("respondE2EELoginRequest", TMessageType.CALL, seqid_));
    var args : RespondE2EELoginRequest_args = new RespondE2EELoginRequest_args();
    args.verifier = verifier;
    args.publicKey = publicKey;
    args.encryptedKeyChain = encryptedKeyChain;
    args.hashKeyChain = hashKeyChain;
    args.errorCode = errorCode;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RespondE2EELoginRequest_result = new RespondE2EELoginRequest_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function confirmE2EELogin(verifier : String, deviceSecret : haxe.io.Bytes) : String {
    oprot_.writeMessageBegin(new TMessage("confirmE2EELogin", TMessageType.CALL, seqid_));
    var args : ConfirmE2EELogin_args = new ConfirmE2EELogin_args();
    args.verifier = verifier;
    args.deviceSecret = deviceSecret;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ConfirmE2EELogin_result = new ConfirmE2EELogin_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "confirmE2EELogin failed: unknown result");
    });
    return retval;
  }

  public function logoutZ() : Void {
    oprot_.writeMessageBegin(new TMessage("logoutZ", TMessageType.CALL, seqid_));
    var args : LogoutZ_args = new LogoutZ_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : LogoutZ_result = new LogoutZ_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function loginZ(loginRequest : LoginRequest) : LoginResult {
    oprot_.writeMessageBegin(new TMessage("loginZ", TMessageType.CALL, seqid_));
    var args : LoginZ_args = new LoginZ_args();
    args.loginRequest = loginRequest;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : LoginResult;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : LoginZ_result = new LoginZ_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "loginZ failed: unknown result");
    });
    return retval;
  }

  public function issueTokenForAccountMigrationSettings(enforce : Bool) : SecurityCenterResult {
    oprot_.writeMessageBegin(new TMessage("issueTokenForAccountMigrationSettings", TMessageType.CALL, seqid_));
    var args : IssueTokenForAccountMigrationSettings_args = new IssueTokenForAccountMigrationSettings_args();
    args.enforce = enforce;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : SecurityCenterResult;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : IssueTokenForAccountMigrationSettings_result = new IssueTokenForAccountMigrationSettings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "issueTokenForAccountMigrationSettings failed: unknown result");
    });
    return retval;
  }

  public function issueTokenForAccountMigration(migrationSessionId : String) : SecurityCenterResult {
    oprot_.writeMessageBegin(new TMessage("issueTokenForAccountMigration", TMessageType.CALL, seqid_));
    var args : IssueTokenForAccountMigration_args = new IssueTokenForAccountMigration_args();
    args.migrationSessionId = migrationSessionId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : SecurityCenterResult;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : IssueTokenForAccountMigration_result = new IssueTokenForAccountMigration_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "issueTokenForAccountMigration failed: unknown result");
    });
    return retval;
  }

  public function verifyQrcodeWithE2EE(verifier : String, pinCode : String, errorCode : Int, publicKey : E2EEPublicKey, encryptedKeyChain : haxe.io.Bytes, hashKeyChain : haxe.io.Bytes) : String {
    oprot_.writeMessageBegin(new TMessage("verifyQrcodeWithE2EE", TMessageType.CALL, seqid_));
    var args : VerifyQrcodeWithE2EE_args = new VerifyQrcodeWithE2EE_args();
    args.verifier = verifier;
    args.pinCode = pinCode;
    args.errorCode = errorCode;
    args.publicKey = publicKey;
    args.encryptedKeyChain = encryptedKeyChain;
    args.hashKeyChain = hashKeyChain;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : VerifyQrcodeWithE2EE_result = new VerifyQrcodeWithE2EE_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "verifyQrcodeWithE2EE failed: unknown result");
    });
    return retval;
  }

}
