/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SearchResultCollection implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SearchResultCollection"); };
  static var COLLECTION_FIELD_DESC = { new TField("collection", TType.I32, 1); };
  static var TITLE_FIELD_DESC = { new TField("title", TType.STRING, 2); };
  static var RANK_FIELD_DESC = { new TField("rank", TType.I32, 3); };
  static var HITS_FIELD_DESC = { new TField("hits", TType.I32, 4); };
  static var ITEMS_FIELD_DESC = { new TField("items", TType.LIST, 5); };
  static var HAS_NEXT_FIELD_DESC = { new TField("hasNext", TType.BOOL, 6); };
  static var CAT_FIELD_DESC = { new TField("cat", TType.LIST, 7); };
  static var ERROR_FIELD_DESC = { new TField("error", TType.STRING, 8); };
  static var TAB_TITLE_FIELD_DESC = { new TField("tabTitle", TType.STRING, 9); };
  static var START_FIELD_DESC = { new TField("start", TType.I32, 10); };
  static var LENGTH_FIELD_DESC = { new TField("length", TType.I32, 11); };
  static var SQUARE_CATEGORY_ID_FIELD_DESC = { new TField("squareCategoryId", TType.I32, 12); };

  @:isVar
  public var collection(get,set) : haxe.Int32;
  @:isVar
  public var title(get,set) : String;
  @:isVar
  public var rank(get,set) : haxe.Int32;
  @:isVar
  public var hits(get,set) : haxe.Int32;
  @:isVar
  public var items(get,set) : List< SearchResultItem>;
  @:isVar
  public var hasNext(get,set) : Bool;
  @:isVar
  public var cat(get,set) : List< haxe.Int32>;
  @:isVar
  public var error(get,set) : String;
  @:isVar
  public var tabTitle(get,set) : String;
  @:isVar
  public var start(get,set) : haxe.Int32;
  @:isVar
  public var length(get,set) : haxe.Int32;
  @:isVar
  public var squareCategoryId(get,set) : haxe.Int32;

  inline static var COLLECTION_FIELD_ID : Int = 1;
  inline static var TITLE_FIELD_ID : Int = 2;
  inline static var RANK_FIELD_ID : Int = 3;
  inline static var HITS_FIELD_ID : Int = 4;
  inline static var ITEMS_FIELD_ID : Int = 5;
  inline static var HASNEXT_FIELD_ID : Int = 6;
  inline static var CAT_FIELD_ID : Int = 7;
  inline static var ERROR_FIELD_ID : Int = 8;
  inline static var TABTITLE_FIELD_ID : Int = 9;
  inline static var START_FIELD_ID : Int = 10;
  inline static var LENGTH_FIELD_ID : Int = 11;
  inline static var SQUARECATEGORYID_FIELD_ID : Int = 12;

  private var __isset_collection : Bool = false;
  private var __isset_rank : Bool = false;
  private var __isset_hits : Bool = false;
  private var __isset_hasNext : Bool = false;
  private var __isset_start : Bool = false;
  private var __isset_length : Bool = false;
  private var __isset_squareCategoryId : Bool = false;

  public function new() {
  }

  public function get_collection() : haxe.Int32 {
    return this.collection;
  }

  public function set_collection(collection:haxe.Int32) : haxe.Int32 {
    this.collection = collection;
    this.__isset_collection = true;
    return this.collection;
  }

  public function unsetCollection() : Void {
    this.__isset_collection = false;
  }

  // Returns true if field collection is set (has been assigned a value) and false otherwise
  public function isSetCollection() : Bool {
    return this.__isset_collection;
  }

  public function get_title() : String {
    return this.title;
  }

  public function set_title(title:String) : String {
    this.title = title;
    return this.title;
  }

  public function unsetTitle() : Void {
    this.title = null;
  }

  // Returns true if field title is set (has been assigned a value) and false otherwise
  public function isSetTitle() : Bool {
    return this.title != null;
  }

  public function get_rank() : haxe.Int32 {
    return this.rank;
  }

  public function set_rank(rank:haxe.Int32) : haxe.Int32 {
    this.rank = rank;
    this.__isset_rank = true;
    return this.rank;
  }

  public function unsetRank() : Void {
    this.__isset_rank = false;
  }

  // Returns true if field rank is set (has been assigned a value) and false otherwise
  public function isSetRank() : Bool {
    return this.__isset_rank;
  }

  public function get_hits() : haxe.Int32 {
    return this.hits;
  }

  public function set_hits(hits:haxe.Int32) : haxe.Int32 {
    this.hits = hits;
    this.__isset_hits = true;
    return this.hits;
  }

  public function unsetHits() : Void {
    this.__isset_hits = false;
  }

  // Returns true if field hits is set (has been assigned a value) and false otherwise
  public function isSetHits() : Bool {
    return this.__isset_hits;
  }

  public function get_items() : List< SearchResultItem> {
    return this.items;
  }

  public function set_items(items:List< SearchResultItem>) : List< SearchResultItem> {
    this.items = items;
    return this.items;
  }

  public function unsetItems() : Void {
    this.items = null;
  }

  // Returns true if field items is set (has been assigned a value) and false otherwise
  public function isSetItems() : Bool {
    return this.items != null;
  }

  public function get_hasNext() : Bool {
    return this.hasNext;
  }

  public function set_hasNext(hasNext:Bool) : Bool {
    this.hasNext = hasNext;
    this.__isset_hasNext = true;
    return this.hasNext;
  }

  public function unsetHasNext() : Void {
    this.__isset_hasNext = false;
  }

  // Returns true if field hasNext is set (has been assigned a value) and false otherwise
  public function isSetHasNext() : Bool {
    return this.__isset_hasNext;
  }

  public function get_cat() : List< haxe.Int32> {
    return this.cat;
  }

  public function set_cat(cat:List< haxe.Int32>) : List< haxe.Int32> {
    this.cat = cat;
    return this.cat;
  }

  public function unsetCat() : Void {
    this.cat = null;
  }

  // Returns true if field cat is set (has been assigned a value) and false otherwise
  public function isSetCat() : Bool {
    return this.cat != null;
  }

  public function get_error() : String {
    return this.error;
  }

  public function set_error(error:String) : String {
    this.error = error;
    return this.error;
  }

  public function unsetError() : Void {
    this.error = null;
  }

  // Returns true if field error is set (has been assigned a value) and false otherwise
  public function isSetError() : Bool {
    return this.error != null;
  }

  public function get_tabTitle() : String {
    return this.tabTitle;
  }

  public function set_tabTitle(tabTitle:String) : String {
    this.tabTitle = tabTitle;
    return this.tabTitle;
  }

  public function unsetTabTitle() : Void {
    this.tabTitle = null;
  }

  // Returns true if field tabTitle is set (has been assigned a value) and false otherwise
  public function isSetTabTitle() : Bool {
    return this.tabTitle != null;
  }

  public function get_start() : haxe.Int32 {
    return this.start;
  }

  public function set_start(start:haxe.Int32) : haxe.Int32 {
    this.start = start;
    this.__isset_start = true;
    return this.start;
  }

  public function unsetStart() : Void {
    this.__isset_start = false;
  }

  // Returns true if field start is set (has been assigned a value) and false otherwise
  public function isSetStart() : Bool {
    return this.__isset_start;
  }

  public function get_length() : haxe.Int32 {
    return this.length;
  }

  public function set_length(length:haxe.Int32) : haxe.Int32 {
    this.length = length;
    this.__isset_length = true;
    return this.length;
  }

  public function unsetLength() : Void {
    this.__isset_length = false;
  }

  // Returns true if field length is set (has been assigned a value) and false otherwise
  public function isSetLength() : Bool {
    return this.__isset_length;
  }

  public function get_squareCategoryId() : haxe.Int32 {
    return this.squareCategoryId;
  }

  public function set_squareCategoryId(squareCategoryId:haxe.Int32) : haxe.Int32 {
    this.squareCategoryId = squareCategoryId;
    this.__isset_squareCategoryId = true;
    return this.squareCategoryId;
  }

  public function unsetSquareCategoryId() : Void {
    this.__isset_squareCategoryId = false;
  }

  // Returns true if field squareCategoryId is set (has been assigned a value) and false otherwise
  public function isSetSquareCategoryId() : Bool {
    return this.__isset_squareCategoryId;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case COLLECTION_FIELD_ID:
      if (value == null) {
        unsetCollection();
      } else {
        this.collection = value;
      }

    case TITLE_FIELD_ID:
      if (value == null) {
        unsetTitle();
      } else {
        this.title = value;
      }

    case RANK_FIELD_ID:
      if (value == null) {
        unsetRank();
      } else {
        this.rank = value;
      }

    case HITS_FIELD_ID:
      if (value == null) {
        unsetHits();
      } else {
        this.hits = value;
      }

    case ITEMS_FIELD_ID:
      if (value == null) {
        unsetItems();
      } else {
        this.items = value;
      }

    case HASNEXT_FIELD_ID:
      if (value == null) {
        unsetHasNext();
      } else {
        this.hasNext = value;
      }

    case CAT_FIELD_ID:
      if (value == null) {
        unsetCat();
      } else {
        this.cat = value;
      }

    case ERROR_FIELD_ID:
      if (value == null) {
        unsetError();
      } else {
        this.error = value;
      }

    case TABTITLE_FIELD_ID:
      if (value == null) {
        unsetTabTitle();
      } else {
        this.tabTitle = value;
      }

    case START_FIELD_ID:
      if (value == null) {
        unsetStart();
      } else {
        this.start = value;
      }

    case LENGTH_FIELD_ID:
      if (value == null) {
        unsetLength();
      } else {
        this.length = value;
      }

    case SQUARECATEGORYID_FIELD_ID:
      if (value == null) {
        unsetSquareCategoryId();
      } else {
        this.squareCategoryId = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case COLLECTION_FIELD_ID:
      return this.collection;
    case TITLE_FIELD_ID:
      return this.title;
    case RANK_FIELD_ID:
      return this.rank;
    case HITS_FIELD_ID:
      return this.hits;
    case ITEMS_FIELD_ID:
      return this.items;
    case HASNEXT_FIELD_ID:
      return this.hasNext;
    case CAT_FIELD_ID:
      return this.cat;
    case ERROR_FIELD_ID:
      return this.error;
    case TABTITLE_FIELD_ID:
      return this.tabTitle;
    case START_FIELD_ID:
      return this.start;
    case LENGTH_FIELD_ID:
      return this.length;
    case SQUARECATEGORYID_FIELD_ID:
      return this.squareCategoryId;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case COLLECTION_FIELD_ID:
      return isSetCollection();
    case TITLE_FIELD_ID:
      return isSetTitle();
    case RANK_FIELD_ID:
      return isSetRank();
    case HITS_FIELD_ID:
      return isSetHits();
    case ITEMS_FIELD_ID:
      return isSetItems();
    case HASNEXT_FIELD_ID:
      return isSetHasNext();
    case CAT_FIELD_ID:
      return isSetCat();
    case ERROR_FIELD_ID:
      return isSetError();
    case TABTITLE_FIELD_ID:
      return isSetTabTitle();
    case START_FIELD_ID:
      return isSetStart();
    case LENGTH_FIELD_ID:
      return isSetLength();
    case SQUARECATEGORYID_FIELD_ID:
      return isSetSquareCategoryId();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case COLLECTION_FIELD_ID:
            if (field.type == TType.I32) {
              this.collection = iprot.readI32();
              this.__isset_collection = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TITLE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.title = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case RANK_FIELD_ID:
            if (field.type == TType.I32) {
              this.rank = iprot.readI32();
              this.__isset_rank = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case HITS_FIELD_ID:
            if (field.type == TType.I32) {
              this.hits = iprot.readI32();
              this.__isset_hits = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ITEMS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list77 = iprot.readListBegin();
                this.items = new List< SearchResultItem>();
                for( _i78 in 0 ... _list77.size)
                {
                  var _elem79 : SearchResultItem;
                  _elem79 = new SearchResultItem();
                  _elem79.read(iprot);
                  this.items.add(_elem79);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case HASNEXT_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.hasNext = iprot.readBool();
              this.__isset_hasNext = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CAT_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list80 = iprot.readListBegin();
                this.cat = new List< haxe.Int32>();
                for( _i81 in 0 ... _list80.size)
                {
                  var _elem82 : haxe.Int32;
                  _elem82 = iprot.readI32();
                  this.cat.add(_elem82);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ERROR_FIELD_ID:
            if (field.type == TType.STRING) {
              this.error = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TABTITLE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.tabTitle = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case START_FIELD_ID:
            if (field.type == TType.I32) {
              this.start = iprot.readI32();
              this.__isset_start = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case LENGTH_FIELD_ID:
            if (field.type == TType.I32) {
              this.length = iprot.readI32();
              this.__isset_length = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SQUARECATEGORYID_FIELD_ID:
            if (field.type == TType.I32) {
              this.squareCategoryId = iprot.readI32();
              this.__isset_squareCategoryId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
      oprot.writeI32(this.collection);
      oprot.writeFieldEnd();
      if (this.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(this.title);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RANK_FIELD_DESC);
      oprot.writeI32(this.rank);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HITS_FIELD_DESC);
      oprot.writeI32(this.hits);
      oprot.writeFieldEnd();
      if (this.items != null) {
        oprot.writeFieldBegin(ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.items.length));
          for( elem83 in this.items)
          {
            elem83.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HAS_NEXT_FIELD_DESC);
      oprot.writeBool(this.hasNext);
      oprot.writeFieldEnd();
      if (this.cat != null) {
        oprot.writeFieldBegin(CAT_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.cat.length));
          for( elem84 in this.cat)
          {
            oprot.writeI32(elem84);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.error != null) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        oprot.writeString(this.error);
        oprot.writeFieldEnd();
      }
      if (this.tabTitle != null) {
        oprot.writeFieldBegin(TAB_TITLE_FIELD_DESC);
        oprot.writeString(this.tabTitle);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI32(this.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI32(this.length);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SQUARE_CATEGORY_ID_FIELD_DESC);
      oprot.writeI32(this.squareCategoryId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SearchResultCollection(";
    var first : Bool = true;

    ret += "collection:";
    ret += this.collection;
    first = false;
    if (!first) ret +=  ", ";
    ret += "title:";
    if (this.title == null) {
      ret += "null";
    } else {
      ret += this.title;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "rank:";
    ret += this.rank;
    first = false;
    if (!first) ret +=  ", ";
    ret += "hits:";
    ret += this.hits;
    first = false;
    if (!first) ret +=  ", ";
    ret += "items:";
    if (this.items == null) {
      ret += "null";
    } else {
      ret += this.items;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "hasNext:";
    ret += this.hasNext;
    first = false;
    if (!first) ret +=  ", ";
    ret += "cat:";
    if (this.cat == null) {
      ret += "null";
    } else {
      ret += this.cat;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "error:";
    if (this.error == null) {
      ret += "null";
    } else {
      ret += this.error;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "tabTitle:";
    if (this.tabTitle == null) {
      ret += "null";
    } else {
      ret += this.tabTitle;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "start:";
    ret += this.start;
    first = false;
    if (!first) ret +=  ", ";
    ret += "length:";
    ret += this.length;
    first = false;
    if (!first) ret +=  ", ";
    ret += "squareCategoryId:";
    ret += this.squareCategoryId;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

