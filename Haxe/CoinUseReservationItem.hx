/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class CoinUseReservationItem implements TBase {
  
  static var STRUCT_DESC = { new TStruct("CoinUseReservationItem"); };
  static var ITEM_ID_FIELD_DESC = { new TField("itemId", TType.STRING, 1); };
  static var ITEM_NAME_FIELD_DESC = { new TField("itemName", TType.STRING, 2); };
  static var AMOUNT_FIELD_DESC = { new TField("amount", TType.I32, 3); };

  @:isVar
  public var itemId(get,set) : String;
  @:isVar
  public var itemName(get,set) : String;
  @:isVar
  public var amount(get,set) : haxe.Int32;

  inline static var ITEMID_FIELD_ID : Int = 1;
  inline static var ITEMNAME_FIELD_ID : Int = 2;
  inline static var AMOUNT_FIELD_ID : Int = 3;

  private var __isset_amount : Bool = false;

  public function new() {
  }

  public function get_itemId() : String {
    return this.itemId;
  }

  public function set_itemId(itemId:String) : String {
    this.itemId = itemId;
    return this.itemId;
  }

  public function unsetItemId() : Void {
    this.itemId = null;
  }

  // Returns true if field itemId is set (has been assigned a value) and false otherwise
  public function isSetItemId() : Bool {
    return this.itemId != null;
  }

  public function get_itemName() : String {
    return this.itemName;
  }

  public function set_itemName(itemName:String) : String {
    this.itemName = itemName;
    return this.itemName;
  }

  public function unsetItemName() : Void {
    this.itemName = null;
  }

  // Returns true if field itemName is set (has been assigned a value) and false otherwise
  public function isSetItemName() : Bool {
    return this.itemName != null;
  }

  public function get_amount() : haxe.Int32 {
    return this.amount;
  }

  public function set_amount(amount:haxe.Int32) : haxe.Int32 {
    this.amount = amount;
    this.__isset_amount = true;
    return this.amount;
  }

  public function unsetAmount() : Void {
    this.__isset_amount = false;
  }

  // Returns true if field amount is set (has been assigned a value) and false otherwise
  public function isSetAmount() : Bool {
    return this.__isset_amount;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case ITEMID_FIELD_ID:
      if (value == null) {
        unsetItemId();
      } else {
        this.itemId = value;
      }

    case ITEMNAME_FIELD_ID:
      if (value == null) {
        unsetItemName();
      } else {
        this.itemName = value;
      }

    case AMOUNT_FIELD_ID:
      if (value == null) {
        unsetAmount();
      } else {
        this.amount = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case ITEMID_FIELD_ID:
      return this.itemId;
    case ITEMNAME_FIELD_ID:
      return this.itemName;
    case AMOUNT_FIELD_ID:
      return this.amount;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case ITEMID_FIELD_ID:
      return isSetItemId();
    case ITEMNAME_FIELD_ID:
      return isSetItemName();
    case AMOUNT_FIELD_ID:
      return isSetAmount();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ITEMID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.itemId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ITEMNAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.itemName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case AMOUNT_FIELD_ID:
            if (field.type == TType.I32) {
              this.amount = iprot.readI32();
              this.__isset_amount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.itemId != null) {
        oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
        oprot.writeString(this.itemId);
        oprot.writeFieldEnd();
      }
      if (this.itemName != null) {
        oprot.writeFieldBegin(ITEM_NAME_FIELD_DESC);
        oprot.writeString(this.itemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
      oprot.writeI32(this.amount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "CoinUseReservationItem(";
    var first : Bool = true;

    ret += "itemId:";
    if (this.itemId == null) {
      ret += "null";
    } else {
      ret += this.itemId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "itemName:";
    if (this.itemName == null) {
      ret += "null";
    } else {
      ret += this.itemName;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "amount:";
    ret += this.amount;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

