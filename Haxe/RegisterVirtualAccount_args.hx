/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class RegisterVirtualAccount_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("registerVirtualAccount_args"); };
  static var LOCALE_FIELD_DESC = { new TField("locale", TType.STRING, 2); };
  static var ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC = { new TField("encryptedVirtualUserId", TType.STRING, 3); };
  static var ENCRYPTED_PASSWORD_FIELD_DESC = { new TField("encryptedPassword", TType.STRING, 4); };

  @:isVar
  public var locale(get,set) : String;
  @:isVar
  public var encryptedVirtualUserId(get,set) : String;
  @:isVar
  public var encryptedPassword(get,set) : String;

  inline static var LOCALE_FIELD_ID : Int = 2;
  inline static var ENCRYPTEDVIRTUALUSERID_FIELD_ID : Int = 3;
  inline static var ENCRYPTEDPASSWORD_FIELD_ID : Int = 4;


  public function new() {
  }

  public function get_locale() : String {
    return this.locale;
  }

  public function set_locale(locale:String) : String {
    this.locale = locale;
    return this.locale;
  }

  public function unsetLocale() : Void {
    this.locale = null;
  }

  // Returns true if field locale is set (has been assigned a value) and false otherwise
  public function isSetLocale() : Bool {
    return this.locale != null;
  }

  public function get_encryptedVirtualUserId() : String {
    return this.encryptedVirtualUserId;
  }

  public function set_encryptedVirtualUserId(encryptedVirtualUserId:String) : String {
    this.encryptedVirtualUserId = encryptedVirtualUserId;
    return this.encryptedVirtualUserId;
  }

  public function unsetEncryptedVirtualUserId() : Void {
    this.encryptedVirtualUserId = null;
  }

  // Returns true if field encryptedVirtualUserId is set (has been assigned a value) and false otherwise
  public function isSetEncryptedVirtualUserId() : Bool {
    return this.encryptedVirtualUserId != null;
  }

  public function get_encryptedPassword() : String {
    return this.encryptedPassword;
  }

  public function set_encryptedPassword(encryptedPassword:String) : String {
    this.encryptedPassword = encryptedPassword;
    return this.encryptedPassword;
  }

  public function unsetEncryptedPassword() : Void {
    this.encryptedPassword = null;
  }

  // Returns true if field encryptedPassword is set (has been assigned a value) and false otherwise
  public function isSetEncryptedPassword() : Bool {
    return this.encryptedPassword != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case LOCALE_FIELD_ID:
      if (value == null) {
        unsetLocale();
      } else {
        this.locale = value;
      }

    case ENCRYPTEDVIRTUALUSERID_FIELD_ID:
      if (value == null) {
        unsetEncryptedVirtualUserId();
      } else {
        this.encryptedVirtualUserId = value;
      }

    case ENCRYPTEDPASSWORD_FIELD_ID:
      if (value == null) {
        unsetEncryptedPassword();
      } else {
        this.encryptedPassword = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case LOCALE_FIELD_ID:
      return this.locale;
    case ENCRYPTEDVIRTUALUSERID_FIELD_ID:
      return this.encryptedVirtualUserId;
    case ENCRYPTEDPASSWORD_FIELD_ID:
      return this.encryptedPassword;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case LOCALE_FIELD_ID:
      return isSetLocale();
    case ENCRYPTEDVIRTUALUSERID_FIELD_ID:
      return isSetEncryptedVirtualUserId();
    case ENCRYPTEDPASSWORD_FIELD_ID:
      return isSetEncryptedPassword();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case LOCALE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.locale = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ENCRYPTEDVIRTUALUSERID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.encryptedVirtualUserId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ENCRYPTEDPASSWORD_FIELD_ID:
            if (field.type == TType.STRING) {
              this.encryptedPassword = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(this.locale);
        oprot.writeFieldEnd();
      }
      if (this.encryptedVirtualUserId != null) {
        oprot.writeFieldBegin(ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC);
        oprot.writeString(this.encryptedVirtualUserId);
        oprot.writeFieldEnd();
      }
      if (this.encryptedPassword != null) {
        oprot.writeFieldBegin(ENCRYPTED_PASSWORD_FIELD_DESC);
        oprot.writeString(this.encryptedPassword);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "registerVirtualAccount_args(";
    var first : Bool = true;

    ret += "locale:";
    if (this.locale == null) {
      ret += "null";
    } else {
      ret += this.locale;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "encryptedVirtualUserId:";
    if (this.encryptedVirtualUserId == null) {
      ret += "null";
    } else {
      ret += this.encryptedVirtualUserId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "encryptedPassword:";
    if (this.encryptedPassword == null) {
      ret += "null";
    } else {
      ret += this.encryptedPassword;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

