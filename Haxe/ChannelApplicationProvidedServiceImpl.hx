/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;



class ChannelApplicationProvidedServiceImpl implements ChannelApplicationProvidedService {

  public function new( iprot : TProtocol, oprot : TProtocol = null)
  {
    iprot_ = iprot;
    if (oprot == null) {
      oprot_ = iprot;
    } else {
      oprot_ = oprot;
    }
  }

  private var iprot_ : TProtocol;
  private var oprot_ : TProtocol;
  private var seqid_ : Int;

  public function getInputProtocol() : TProtocol
  {
    return this.iprot_;
  }

  public function getOutputProtocol() : TProtocol
  {
    return this.oprot_;
  }

  public function activeBuddySubscriberCount() : haxe.Int64 {
    oprot_.writeMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.CALL, seqid_));
    var args : ActiveBuddySubscriberCount_args = new ActiveBuddySubscriberCount_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : haxe.Int64;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ActiveBuddySubscriberCount_result = new ActiveBuddySubscriberCount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "activeBuddySubscriberCount failed: unknown result");
    });
    return retval;
  }

  public function addOperationForChannel(opType : Int, param1 : String, param2 : String, param3 : String) : Void {
    oprot_.writeMessageBegin(new TMessage("addOperationForChannel", TMessageType.CALL, seqid_));
    var args : AddOperationForChannel_args = new AddOperationForChannel_args();
    args.opType = opType;
    args.param1 = param1;
    args.param2 = param2;
    args.param3 = param3;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : AddOperationForChannel_result = new AddOperationForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function displayBuddySubscriberCount() : haxe.Int64 {
    oprot_.writeMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.CALL, seqid_));
    var args : DisplayBuddySubscriberCount_args = new DisplayBuddySubscriberCount_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : haxe.Int64;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : DisplayBuddySubscriberCount_result = new DisplayBuddySubscriberCount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "displayBuddySubscriberCount failed: unknown result");
    });
    return retval;
  }

  public function findContactByUseridWithoutAbuseBlockForChannel(userid : String) : Contact {
    oprot_.writeMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.CALL, seqid_));
    var args : FindContactByUseridWithoutAbuseBlockForChannel_args = new FindContactByUseridWithoutAbuseBlockForChannel_args();
    args.userid = userid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Contact;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FindContactByUseridWithoutAbuseBlockForChannel_result = new FindContactByUseridWithoutAbuseBlockForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "findContactByUseridWithoutAbuseBlockForChannel failed: unknown result");
    });
    return retval;
  }

  public function getAllContactIdsForChannel() : List< String> {
    oprot_.writeMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.CALL, seqid_));
    var args : GetAllContactIdsForChannel_args = new GetAllContactIdsForChannel_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetAllContactIdsForChannel_result = new GetAllContactIdsForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getAllContactIdsForChannel failed: unknown result");
    });
    return retval;
  }

  public function getCompactContacts(lastModifiedTimestamp : haxe.Int64) : List< CompactContact> {
    oprot_.writeMessageBegin(new TMessage("getCompactContacts", TMessageType.CALL, seqid_));
    var args : GetCompactContacts_args = new GetCompactContacts_args();
    args.lastModifiedTimestamp = lastModifiedTimestamp;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< CompactContact>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetCompactContacts_result = new GetCompactContacts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getCompactContacts failed: unknown result");
    });
    return retval;
  }

  public function getContactsForChannel(ids : List< String>) : List< Contact> {
    oprot_.writeMessageBegin(new TMessage("getContactsForChannel", TMessageType.CALL, seqid_));
    var args : GetContactsForChannel_args = new GetContactsForChannel_args();
    args.ids = ids;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Contact>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetContactsForChannel_result = new GetContactsForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getContactsForChannel failed: unknown result");
    });
    return retval;
  }

  public function getDisplayName(mid : String) : String {
    oprot_.writeMessageBegin(new TMessage("getDisplayName", TMessageType.CALL, seqid_));
    var args : GetDisplayName_args = new GetDisplayName_args();
    args.mid = mid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetDisplayName_result = new GetDisplayName_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getDisplayName failed: unknown result");
    });
    return retval;
  }

  public function getFavoriteMidsForChannel() : List< String> {
    oprot_.writeMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.CALL, seqid_));
    var args : GetFavoriteMidsForChannel_args = new GetFavoriteMidsForChannel_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetFavoriteMidsForChannel_result = new GetFavoriteMidsForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getFavoriteMidsForChannel failed: unknown result");
    });
    return retval;
  }

  public function getFriendMids() : List< String> {
    oprot_.writeMessageBegin(new TMessage("getFriendMids", TMessageType.CALL, seqid_));
    var args : GetFriendMids_args = new GetFriendMids_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetFriendMids_result = new GetFriendMids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getFriendMids failed: unknown result");
    });
    return retval;
  }

  public function getGroupMemberMids(groupId : String) : List< String> {
    oprot_.writeMessageBegin(new TMessage("getGroupMemberMids", TMessageType.CALL, seqid_));
    var args : GetGroupMemberMids_args = new GetGroupMemberMids_args();
    args.groupId = groupId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetGroupMemberMids_result = new GetGroupMemberMids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getGroupMemberMids failed: unknown result");
    });
    return retval;
  }

  public function getGroupsForChannel(groupIds : List< String>) : List< Group> {
    oprot_.writeMessageBegin(new TMessage("getGroupsForChannel", TMessageType.CALL, seqid_));
    var args : GetGroupsForChannel_args = new GetGroupsForChannel_args();
    args.groupIds = groupIds;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Group>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetGroupsForChannel_result = new GetGroupsForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getGroupsForChannel failed: unknown result");
    });
    return retval;
  }

  public function getIdentityCredential() : IdentityCredential {
    oprot_.writeMessageBegin(new TMessage("getIdentityCredential", TMessageType.CALL, seqid_));
    var args : GetIdentityCredential_args = new GetIdentityCredential_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : IdentityCredential;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetIdentityCredential_result = new GetIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getIdentityCredential failed: unknown result");
    });
    return retval;
  }

  public function getJoinedGroupIdsForChannel() : List< String> {
    oprot_.writeMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.CALL, seqid_));
    var args : GetJoinedGroupIdsForChannel_args = new GetJoinedGroupIdsForChannel_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetJoinedGroupIdsForChannel_result = new GetJoinedGroupIdsForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getJoinedGroupIdsForChannel failed: unknown result");
    });
    return retval;
  }

  public function getMetaProfile() : MetaProfile {
    oprot_.writeMessageBegin(new TMessage("getMetaProfile", TMessageType.CALL, seqid_));
    var args : GetMetaProfile_args = new GetMetaProfile_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : MetaProfile;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetMetaProfile_result = new GetMetaProfile_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getMetaProfile failed: unknown result");
    });
    return retval;
  }

  public function getMid() : String {
    oprot_.writeMessageBegin(new TMessage("getMid", TMessageType.CALL, seqid_));
    var args : GetMid_args = new GetMid_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetMid_result = new GetMid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getMid failed: unknown result");
    });
    return retval;
  }

  public function getPrimaryClientForChannel() : SimpleChannelClient {
    oprot_.writeMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.CALL, seqid_));
    var args : GetPrimaryClientForChannel_args = new GetPrimaryClientForChannel_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : SimpleChannelClient;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetPrimaryClientForChannel_result = new GetPrimaryClientForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getPrimaryClientForChannel failed: unknown result");
    });
    return retval;
  }

  public function getProfileForChannel() : Profile {
    oprot_.writeMessageBegin(new TMessage("getProfileForChannel", TMessageType.CALL, seqid_));
    var args : GetProfileForChannel_args = new GetProfileForChannel_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Profile;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetProfileForChannel_result = new GetProfileForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getProfileForChannel failed: unknown result");
    });
    return retval;
  }

  public function getSimpleChannelContacts(ids : List< String>) : List< SimpleChannelContact> {
    oprot_.writeMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.CALL, seqid_));
    var args : GetSimpleChannelContacts_args = new GetSimpleChannelContacts_args();
    args.ids = ids;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< SimpleChannelContact>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetSimpleChannelContacts_result = new GetSimpleChannelContacts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getSimpleChannelContacts failed: unknown result");
    });
    return retval;
  }

  public function getUserCountryForBilling(country : String, remoteIp : String) : String {
    oprot_.writeMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.CALL, seqid_));
    var args : GetUserCountryForBilling_args = new GetUserCountryForBilling_args();
    args.country = country;
    args.remoteIp = remoteIp;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetUserCountryForBilling_result = new GetUserCountryForBilling_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getUserCountryForBilling failed: unknown result");
    });
    return retval;
  }

  public function getUserCreateTime() : haxe.Int64 {
    oprot_.writeMessageBegin(new TMessage("getUserCreateTime", TMessageType.CALL, seqid_));
    var args : GetUserCreateTime_args = new GetUserCreateTime_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : haxe.Int64;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetUserCreateTime_result = new GetUserCreateTime_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getUserCreateTime failed: unknown result");
    });
    return retval;
  }

  public function getUserIdentities() : IntMap< String> {
    oprot_.writeMessageBegin(new TMessage("getUserIdentities", TMessageType.CALL, seqid_));
    var args : GetUserIdentities_args = new GetUserIdentities_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : IntMap< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetUserIdentities_result = new GetUserIdentities_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getUserIdentities failed: unknown result");
    });
    return retval;
  }

  public function getUserLanguage() : String {
    oprot_.writeMessageBegin(new TMessage("getUserLanguage", TMessageType.CALL, seqid_));
    var args : GetUserLanguage_args = new GetUserLanguage_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetUserLanguage_result = new GetUserLanguage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getUserLanguage failed: unknown result");
    });
    return retval;
  }

  public function getUserMidsWhoAddedMe() : List< String> {
    oprot_.writeMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.CALL, seqid_));
    var args : GetUserMidsWhoAddedMe_args = new GetUserMidsWhoAddedMe_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetUserMidsWhoAddedMe_result = new GetUserMidsWhoAddedMe_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getUserMidsWhoAddedMe failed: unknown result");
    });
    return retval;
  }

  public function isGroupMember(groupId : String) : Bool {
    oprot_.writeMessageBegin(new TMessage("isGroupMember", TMessageType.CALL, seqid_));
    var args : IsGroupMember_args = new IsGroupMember_args();
    args.groupId = groupId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Bool;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : IsGroupMember_result = new IsGroupMember_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "isGroupMember failed: unknown result");
    });
    return retval;
  }

  public function isInContact(mid : String) : Bool {
    oprot_.writeMessageBegin(new TMessage("isInContact", TMessageType.CALL, seqid_));
    var args : IsInContact_args = new IsInContact_args();
    args.mid = mid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Bool;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : IsInContact_result = new IsInContact_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "isInContact failed: unknown result");
    });
    return retval;
  }

  public function registerChannelCP(cpId : String, registerPassword : String) : String {
    oprot_.writeMessageBegin(new TMessage("registerChannelCP", TMessageType.CALL, seqid_));
    var args : RegisterChannelCP_args = new RegisterChannelCP_args();
    args.cpId = cpId;
    args.registerPassword = registerPassword;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RegisterChannelCP_result = new RegisterChannelCP_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "registerChannelCP failed: unknown result");
    });
    return retval;
  }

  public function removeNotificationStatus(notificationStatus : Int) : Void {
    oprot_.writeMessageBegin(new TMessage("removeNotificationStatus", TMessageType.CALL, seqid_));
    var args : RemoveNotificationStatus_args = new RemoveNotificationStatus_args();
    args.notificationStatus = notificationStatus;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RemoveNotificationStatus_result = new RemoveNotificationStatus_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function sendMessageForChannel(message : Message) : Message {
    oprot_.writeMessageBegin(new TMessage("sendMessageForChannel", TMessageType.CALL, seqid_));
    var args : SendMessageForChannel_args = new SendMessageForChannel_args();
    args.message = message;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Message;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SendMessageForChannel_result = new SendMessageForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "sendMessageForChannel failed: unknown result");
    });
    return retval;
  }

  public function sendPinCodeOperation(verifier : String) : Void {
    oprot_.writeMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.CALL, seqid_));
    var args : SendPinCodeOperation_args = new SendPinCodeOperation_args();
    args.verifier = verifier;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SendPinCodeOperation_result = new SendPinCodeOperation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function updateProfileAttributeForChannel(profileAttribute : Int, value : String) : Void {
    oprot_.writeMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.CALL, seqid_));
    var args : UpdateProfileAttributeForChannel_args = new UpdateProfileAttributeForChannel_args();
    args.profileAttribute = profileAttribute;
    args.value = value;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateProfileAttributeForChannel_result = new UpdateProfileAttributeForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

}
