/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class EmailConfirmation implements TBase {
  
  static var STRUCT_DESC = { new TStruct("EmailConfirmation"); };
  static var USE_PASSWORD_SET_FIELD_DESC = { new TField("usePasswordSet", TType.BOOL, 1); };
  static var EMAIL_FIELD_DESC = { new TField("email", TType.STRING, 2); };
  static var PASSWORD_FIELD_DESC = { new TField("password", TType.STRING, 3); };
  static var IGNORE_DUPLICATION_FIELD_DESC = { new TField("ignoreDuplication", TType.BOOL, 4); };

  @:isVar
  public var usePasswordSet(get,set) : Bool;
  @:isVar
  public var email(get,set) : String;
  @:isVar
  public var password(get,set) : String;
  @:isVar
  public var ignoreDuplication(get,set) : Bool;

  inline static var USEPASSWORDSET_FIELD_ID : Int = 1;
  inline static var EMAIL_FIELD_ID : Int = 2;
  inline static var PASSWORD_FIELD_ID : Int = 3;
  inline static var IGNOREDUPLICATION_FIELD_ID : Int = 4;

  private var __isset_usePasswordSet : Bool = false;
  private var __isset_ignoreDuplication : Bool = false;

  public function new() {
  }

  public function get_usePasswordSet() : Bool {
    return this.usePasswordSet;
  }

  public function set_usePasswordSet(usePasswordSet:Bool) : Bool {
    this.usePasswordSet = usePasswordSet;
    this.__isset_usePasswordSet = true;
    return this.usePasswordSet;
  }

  public function unsetUsePasswordSet() : Void {
    this.__isset_usePasswordSet = false;
  }

  // Returns true if field usePasswordSet is set (has been assigned a value) and false otherwise
  public function isSetUsePasswordSet() : Bool {
    return this.__isset_usePasswordSet;
  }

  public function get_email() : String {
    return this.email;
  }

  public function set_email(email:String) : String {
    this.email = email;
    return this.email;
  }

  public function unsetEmail() : Void {
    this.email = null;
  }

  // Returns true if field email is set (has been assigned a value) and false otherwise
  public function isSetEmail() : Bool {
    return this.email != null;
  }

  public function get_password() : String {
    return this.password;
  }

  public function set_password(password:String) : String {
    this.password = password;
    return this.password;
  }

  public function unsetPassword() : Void {
    this.password = null;
  }

  // Returns true if field password is set (has been assigned a value) and false otherwise
  public function isSetPassword() : Bool {
    return this.password != null;
  }

  public function get_ignoreDuplication() : Bool {
    return this.ignoreDuplication;
  }

  public function set_ignoreDuplication(ignoreDuplication:Bool) : Bool {
    this.ignoreDuplication = ignoreDuplication;
    this.__isset_ignoreDuplication = true;
    return this.ignoreDuplication;
  }

  public function unsetIgnoreDuplication() : Void {
    this.__isset_ignoreDuplication = false;
  }

  // Returns true if field ignoreDuplication is set (has been assigned a value) and false otherwise
  public function isSetIgnoreDuplication() : Bool {
    return this.__isset_ignoreDuplication;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case USEPASSWORDSET_FIELD_ID:
      if (value == null) {
        unsetUsePasswordSet();
      } else {
        this.usePasswordSet = value;
      }

    case EMAIL_FIELD_ID:
      if (value == null) {
        unsetEmail();
      } else {
        this.email = value;
      }

    case PASSWORD_FIELD_ID:
      if (value == null) {
        unsetPassword();
      } else {
        this.password = value;
      }

    case IGNOREDUPLICATION_FIELD_ID:
      if (value == null) {
        unsetIgnoreDuplication();
      } else {
        this.ignoreDuplication = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case USEPASSWORDSET_FIELD_ID:
      return this.usePasswordSet;
    case EMAIL_FIELD_ID:
      return this.email;
    case PASSWORD_FIELD_ID:
      return this.password;
    case IGNOREDUPLICATION_FIELD_ID:
      return this.ignoreDuplication;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case USEPASSWORDSET_FIELD_ID:
      return isSetUsePasswordSet();
    case EMAIL_FIELD_ID:
      return isSetEmail();
    case PASSWORD_FIELD_ID:
      return isSetPassword();
    case IGNOREDUPLICATION_FIELD_ID:
      return isSetIgnoreDuplication();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case USEPASSWORDSET_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.usePasswordSet = iprot.readBool();
              this.__isset_usePasswordSet = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case EMAIL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.email = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PASSWORD_FIELD_ID:
            if (field.type == TType.STRING) {
              this.password = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case IGNOREDUPLICATION_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.ignoreDuplication = iprot.readBool();
              this.__isset_ignoreDuplication = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USE_PASSWORD_SET_FIELD_DESC);
      oprot.writeBool(this.usePasswordSet);
      oprot.writeFieldEnd();
      if (this.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(this.email);
        oprot.writeFieldEnd();
      }
      if (this.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(this.password);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IGNORE_DUPLICATION_FIELD_DESC);
      oprot.writeBool(this.ignoreDuplication);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "EmailConfirmation(";
    var first : Bool = true;

    ret += "usePasswordSet:";
    ret += this.usePasswordSet;
    first = false;
    if (!first) ret +=  ", ";
    ret += "email:";
    if (this.email == null) {
      ret += "null";
    } else {
      ret += this.email;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "password:";
    if (this.password == null) {
      ret += "null";
    } else {
      ret += this.password;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "ignoreDuplication:";
    ret += this.ignoreDuplication;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

