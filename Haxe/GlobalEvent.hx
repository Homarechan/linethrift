/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class GlobalEvent implements TBase {
  
  static var STRUCT_DESC = { new TStruct("GlobalEvent"); };
  static var KEY_FIELD_DESC = { new TField("key", TType.STRING, 1); };
  static var TARGETS_FIELD_DESC = { new TField("targets", TType.LIST, 2); };
  static var CREATED_TIME_FIELD_DESC = { new TField("createdTime", TType.I64, 3); };
  static var DATA_FIELD_DESC = { new TField("data", TType.I64, 4); };
  static var MAX_DELAY_FIELD_DESC = { new TField("maxDelay", TType.I32, 5); };

  @:isVar
  public var key(get,set) : String;
  @:isVar
  public var targets(get,set) : List< NotificationTarget>;
  @:isVar
  public var createdTime(get,set) : haxe.Int64;
  @:isVar
  public var data(get,set) : haxe.Int64;
  @:isVar
  public var maxDelay(get,set) : haxe.Int32;

  inline static var KEY_FIELD_ID : Int = 1;
  inline static var TARGETS_FIELD_ID : Int = 2;
  inline static var CREATEDTIME_FIELD_ID : Int = 3;
  inline static var DATA_FIELD_ID : Int = 4;
  inline static var MAXDELAY_FIELD_ID : Int = 5;

  private var __isset_createdTime : Bool = false;
  private var __isset_data : Bool = false;
  private var __isset_maxDelay : Bool = false;

  public function new() {
  }

  public function get_key() : String {
    return this.key;
  }

  public function set_key(key:String) : String {
    this.key = key;
    return this.key;
  }

  public function unsetKey() : Void {
    this.key = null;
  }

  // Returns true if field key is set (has been assigned a value) and false otherwise
  public function isSetKey() : Bool {
    return this.key != null;
  }

  public function get_targets() : List< NotificationTarget> {
    return this.targets;
  }

  public function set_targets(targets:List< NotificationTarget>) : List< NotificationTarget> {
    this.targets = targets;
    return this.targets;
  }

  public function unsetTargets() : Void {
    this.targets = null;
  }

  // Returns true if field targets is set (has been assigned a value) and false otherwise
  public function isSetTargets() : Bool {
    return this.targets != null;
  }

  public function get_createdTime() : haxe.Int64 {
    return this.createdTime;
  }

  public function set_createdTime(createdTime:haxe.Int64) : haxe.Int64 {
    this.createdTime = createdTime;
    this.__isset_createdTime = true;
    return this.createdTime;
  }

  public function unsetCreatedTime() : Void {
    this.__isset_createdTime = false;
  }

  // Returns true if field createdTime is set (has been assigned a value) and false otherwise
  public function isSetCreatedTime() : Bool {
    return this.__isset_createdTime;
  }

  public function get_data() : haxe.Int64 {
    return this.data;
  }

  public function set_data(data:haxe.Int64) : haxe.Int64 {
    this.data = data;
    this.__isset_data = true;
    return this.data;
  }

  public function unsetData() : Void {
    this.__isset_data = false;
  }

  // Returns true if field data is set (has been assigned a value) and false otherwise
  public function isSetData() : Bool {
    return this.__isset_data;
  }

  public function get_maxDelay() : haxe.Int32 {
    return this.maxDelay;
  }

  public function set_maxDelay(maxDelay:haxe.Int32) : haxe.Int32 {
    this.maxDelay = maxDelay;
    this.__isset_maxDelay = true;
    return this.maxDelay;
  }

  public function unsetMaxDelay() : Void {
    this.__isset_maxDelay = false;
  }

  // Returns true if field maxDelay is set (has been assigned a value) and false otherwise
  public function isSetMaxDelay() : Bool {
    return this.__isset_maxDelay;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case KEY_FIELD_ID:
      if (value == null) {
        unsetKey();
      } else {
        this.key = value;
      }

    case TARGETS_FIELD_ID:
      if (value == null) {
        unsetTargets();
      } else {
        this.targets = value;
      }

    case CREATEDTIME_FIELD_ID:
      if (value == null) {
        unsetCreatedTime();
      } else {
        this.createdTime = value;
      }

    case DATA_FIELD_ID:
      if (value == null) {
        unsetData();
      } else {
        this.data = value;
      }

    case MAXDELAY_FIELD_ID:
      if (value == null) {
        unsetMaxDelay();
      } else {
        this.maxDelay = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case KEY_FIELD_ID:
      return this.key;
    case TARGETS_FIELD_ID:
      return this.targets;
    case CREATEDTIME_FIELD_ID:
      return this.createdTime;
    case DATA_FIELD_ID:
      return this.data;
    case MAXDELAY_FIELD_ID:
      return this.maxDelay;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case KEY_FIELD_ID:
      return isSetKey();
    case TARGETS_FIELD_ID:
      return isSetTargets();
    case CREATEDTIME_FIELD_ID:
      return isSetCreatedTime();
    case DATA_FIELD_ID:
      return isSetData();
    case MAXDELAY_FIELD_ID:
      return isSetMaxDelay();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case KEY_FIELD_ID:
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TARGETS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list147 = iprot.readListBegin();
                this.targets = new List< NotificationTarget>();
                for( _i148 in 0 ... _list147.size)
                {
                  var _elem149 : NotificationTarget;
                  _elem149 = new NotificationTarget();
                  _elem149.read(iprot);
                  this.targets.add(_elem149);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CREATEDTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.createdTime = iprot.readI64();
              this.__isset_createdTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DATA_FIELD_ID:
            if (field.type == TType.I64) {
              this.data = iprot.readI64();
              this.__isset_data = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MAXDELAY_FIELD_ID:
            if (field.type == TType.I32) {
              this.maxDelay = iprot.readI32();
              this.__isset_maxDelay = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.targets != null) {
        oprot.writeFieldBegin(TARGETS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.targets.length));
          for( elem150 in this.targets)
          {
            elem150.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_TIME_FIELD_DESC);
      oprot.writeI64(this.createdTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATA_FIELD_DESC);
      oprot.writeI64(this.data);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_DELAY_FIELD_DESC);
      oprot.writeI32(this.maxDelay);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "GlobalEvent(";
    var first : Bool = true;

    ret += "key:";
    if (this.key == null) {
      ret += "null";
    } else {
      ret += this.key;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "targets:";
    if (this.targets == null) {
      ret += "null";
    } else {
      ret += this.targets;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "createdTime:";
    ret += this.createdTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "data:";
    ret += this.data;
    first = false;
    if (!first) ret +=  ", ";
    ret += "maxDelay:";
    ret += this.maxDelay;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

