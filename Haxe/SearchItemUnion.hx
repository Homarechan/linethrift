/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SearchItemUnion implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SearchItemUnion"); };
  static var CATEGORY_ITEM_FIELD_DESC = { new TField("categoryItem", TType.STRUCT, 1); };
  static var SPOT_ITEM_FIELD_DESC = { new TField("spotItem", TType.STRUCT, 2); };
  static var PRODUCT_ITEM_FIELD_DESC = { new TField("productItem", TType.STRUCT, 3); };
  static var SERVICE_ITEM_FIELD_DESC = { new TField("serviceItem", TType.STRUCT, 4); };
  static var YELLOWPAGE_ITEM_FIELD_DESC = { new TField("yellowpageItem", TType.STRUCT, 5); };
  static var OA_ITEM_FIELD_DESC = { new TField("oaItem", TType.STRUCT, 6); };
  static var GEO_ADDRESS_ITEM_FIELD_DESC = { new TField("geoAddressItem", TType.STRUCT, 7); };
  static var SHORTCUT_ITEM_FIELD_DESC = { new TField("shortcutItem", TType.STRUCT, 8); };
  static var SQUARE_ITEM_FIELD_DESC = { new TField("squareItem", TType.STRUCT, 9); };
  static var SQUARE_CATEGORY_ITEM_FIELD_DESC = { new TField("squareCategoryItem", TType.STRUCT, 10); };

  @:isVar
  public var categoryItem(get,set) : CategoryItem;
  @:isVar
  public var spotItem(get,set) : SpotItem;
  @:isVar
  public var productItem(get,set) : ProductSearchSummary;
  @:isVar
  public var serviceItem(get,set) : ServiceItem;
  @:isVar
  public var yellowpageItem(get,set) : YellowpageItem;
  @:isVar
  public var oaItem(get,set) : BuddySearchResult;
  @:isVar
  public var geoAddressItem(get,set) : GeoAddressItem;
  @:isVar
  public var shortcutItem(get,set) : ShortcutItem;
  @:isVar
  public var squareItem(get,set) : SquareInfo;
  @:isVar
  public var squareCategoryItem(get,set) : SQCat;

  inline static var CATEGORYITEM_FIELD_ID : Int = 1;
  inline static var SPOTITEM_FIELD_ID : Int = 2;
  inline static var PRODUCTITEM_FIELD_ID : Int = 3;
  inline static var SERVICEITEM_FIELD_ID : Int = 4;
  inline static var YELLOWPAGEITEM_FIELD_ID : Int = 5;
  inline static var OAITEM_FIELD_ID : Int = 6;
  inline static var GEOADDRESSITEM_FIELD_ID : Int = 7;
  inline static var SHORTCUTITEM_FIELD_ID : Int = 8;
  inline static var SQUAREITEM_FIELD_ID : Int = 9;
  inline static var SQUARECATEGORYITEM_FIELD_ID : Int = 10;


  public function new() {
  }

  public function get_categoryItem() : CategoryItem {
    return this.categoryItem;
  }

  public function set_categoryItem(categoryItem:CategoryItem) : CategoryItem {
    this.categoryItem = categoryItem;
    return this.categoryItem;
  }

  public function unsetCategoryItem() : Void {
    this.categoryItem = null;
  }

  // Returns true if field categoryItem is set (has been assigned a value) and false otherwise
  public function isSetCategoryItem() : Bool {
    return this.categoryItem != null;
  }

  public function get_spotItem() : SpotItem {
    return this.spotItem;
  }

  public function set_spotItem(spotItem:SpotItem) : SpotItem {
    this.spotItem = spotItem;
    return this.spotItem;
  }

  public function unsetSpotItem() : Void {
    this.spotItem = null;
  }

  // Returns true if field spotItem is set (has been assigned a value) and false otherwise
  public function isSetSpotItem() : Bool {
    return this.spotItem != null;
  }

  public function get_productItem() : ProductSearchSummary {
    return this.productItem;
  }

  public function set_productItem(productItem:ProductSearchSummary) : ProductSearchSummary {
    this.productItem = productItem;
    return this.productItem;
  }

  public function unsetProductItem() : Void {
    this.productItem = null;
  }

  // Returns true if field productItem is set (has been assigned a value) and false otherwise
  public function isSetProductItem() : Bool {
    return this.productItem != null;
  }

  public function get_serviceItem() : ServiceItem {
    return this.serviceItem;
  }

  public function set_serviceItem(serviceItem:ServiceItem) : ServiceItem {
    this.serviceItem = serviceItem;
    return this.serviceItem;
  }

  public function unsetServiceItem() : Void {
    this.serviceItem = null;
  }

  // Returns true if field serviceItem is set (has been assigned a value) and false otherwise
  public function isSetServiceItem() : Bool {
    return this.serviceItem != null;
  }

  public function get_yellowpageItem() : YellowpageItem {
    return this.yellowpageItem;
  }

  public function set_yellowpageItem(yellowpageItem:YellowpageItem) : YellowpageItem {
    this.yellowpageItem = yellowpageItem;
    return this.yellowpageItem;
  }

  public function unsetYellowpageItem() : Void {
    this.yellowpageItem = null;
  }

  // Returns true if field yellowpageItem is set (has been assigned a value) and false otherwise
  public function isSetYellowpageItem() : Bool {
    return this.yellowpageItem != null;
  }

  public function get_oaItem() : BuddySearchResult {
    return this.oaItem;
  }

  public function set_oaItem(oaItem:BuddySearchResult) : BuddySearchResult {
    this.oaItem = oaItem;
    return this.oaItem;
  }

  public function unsetOaItem() : Void {
    this.oaItem = null;
  }

  // Returns true if field oaItem is set (has been assigned a value) and false otherwise
  public function isSetOaItem() : Bool {
    return this.oaItem != null;
  }

  public function get_geoAddressItem() : GeoAddressItem {
    return this.geoAddressItem;
  }

  public function set_geoAddressItem(geoAddressItem:GeoAddressItem) : GeoAddressItem {
    this.geoAddressItem = geoAddressItem;
    return this.geoAddressItem;
  }

  public function unsetGeoAddressItem() : Void {
    this.geoAddressItem = null;
  }

  // Returns true if field geoAddressItem is set (has been assigned a value) and false otherwise
  public function isSetGeoAddressItem() : Bool {
    return this.geoAddressItem != null;
  }

  public function get_shortcutItem() : ShortcutItem {
    return this.shortcutItem;
  }

  public function set_shortcutItem(shortcutItem:ShortcutItem) : ShortcutItem {
    this.shortcutItem = shortcutItem;
    return this.shortcutItem;
  }

  public function unsetShortcutItem() : Void {
    this.shortcutItem = null;
  }

  // Returns true if field shortcutItem is set (has been assigned a value) and false otherwise
  public function isSetShortcutItem() : Bool {
    return this.shortcutItem != null;
  }

  public function get_squareItem() : SquareInfo {
    return this.squareItem;
  }

  public function set_squareItem(squareItem:SquareInfo) : SquareInfo {
    this.squareItem = squareItem;
    return this.squareItem;
  }

  public function unsetSquareItem() : Void {
    this.squareItem = null;
  }

  // Returns true if field squareItem is set (has been assigned a value) and false otherwise
  public function isSetSquareItem() : Bool {
    return this.squareItem != null;
  }

  public function get_squareCategoryItem() : SQCat {
    return this.squareCategoryItem;
  }

  public function set_squareCategoryItem(squareCategoryItem:SQCat) : SQCat {
    this.squareCategoryItem = squareCategoryItem;
    return this.squareCategoryItem;
  }

  public function unsetSquareCategoryItem() : Void {
    this.squareCategoryItem = null;
  }

  // Returns true if field squareCategoryItem is set (has been assigned a value) and false otherwise
  public function isSetSquareCategoryItem() : Bool {
    return this.squareCategoryItem != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case CATEGORYITEM_FIELD_ID:
      if (value == null) {
        unsetCategoryItem();
      } else {
        this.categoryItem = value;
      }

    case SPOTITEM_FIELD_ID:
      if (value == null) {
        unsetSpotItem();
      } else {
        this.spotItem = value;
      }

    case PRODUCTITEM_FIELD_ID:
      if (value == null) {
        unsetProductItem();
      } else {
        this.productItem = value;
      }

    case SERVICEITEM_FIELD_ID:
      if (value == null) {
        unsetServiceItem();
      } else {
        this.serviceItem = value;
      }

    case YELLOWPAGEITEM_FIELD_ID:
      if (value == null) {
        unsetYellowpageItem();
      } else {
        this.yellowpageItem = value;
      }

    case OAITEM_FIELD_ID:
      if (value == null) {
        unsetOaItem();
      } else {
        this.oaItem = value;
      }

    case GEOADDRESSITEM_FIELD_ID:
      if (value == null) {
        unsetGeoAddressItem();
      } else {
        this.geoAddressItem = value;
      }

    case SHORTCUTITEM_FIELD_ID:
      if (value == null) {
        unsetShortcutItem();
      } else {
        this.shortcutItem = value;
      }

    case SQUAREITEM_FIELD_ID:
      if (value == null) {
        unsetSquareItem();
      } else {
        this.squareItem = value;
      }

    case SQUARECATEGORYITEM_FIELD_ID:
      if (value == null) {
        unsetSquareCategoryItem();
      } else {
        this.squareCategoryItem = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case CATEGORYITEM_FIELD_ID:
      return this.categoryItem;
    case SPOTITEM_FIELD_ID:
      return this.spotItem;
    case PRODUCTITEM_FIELD_ID:
      return this.productItem;
    case SERVICEITEM_FIELD_ID:
      return this.serviceItem;
    case YELLOWPAGEITEM_FIELD_ID:
      return this.yellowpageItem;
    case OAITEM_FIELD_ID:
      return this.oaItem;
    case GEOADDRESSITEM_FIELD_ID:
      return this.geoAddressItem;
    case SHORTCUTITEM_FIELD_ID:
      return this.shortcutItem;
    case SQUAREITEM_FIELD_ID:
      return this.squareItem;
    case SQUARECATEGORYITEM_FIELD_ID:
      return this.squareCategoryItem;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case CATEGORYITEM_FIELD_ID:
      return isSetCategoryItem();
    case SPOTITEM_FIELD_ID:
      return isSetSpotItem();
    case PRODUCTITEM_FIELD_ID:
      return isSetProductItem();
    case SERVICEITEM_FIELD_ID:
      return isSetServiceItem();
    case YELLOWPAGEITEM_FIELD_ID:
      return isSetYellowpageItem();
    case OAITEM_FIELD_ID:
      return isSetOaItem();
    case GEOADDRESSITEM_FIELD_ID:
      return isSetGeoAddressItem();
    case SHORTCUTITEM_FIELD_ID:
      return isSetShortcutItem();
    case SQUAREITEM_FIELD_ID:
      return isSetSquareItem();
    case SQUARECATEGORYITEM_FIELD_ID:
      return isSetSquareCategoryItem();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case CATEGORYITEM_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.categoryItem = new CategoryItem();
              this.categoryItem.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SPOTITEM_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.spotItem = new SpotItem();
              this.spotItem.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PRODUCTITEM_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.productItem = new ProductSearchSummary();
              this.productItem.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SERVICEITEM_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.serviceItem = new ServiceItem();
              this.serviceItem.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case YELLOWPAGEITEM_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.yellowpageItem = new YellowpageItem();
              this.yellowpageItem.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case OAITEM_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.oaItem = new BuddySearchResult();
              this.oaItem.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case GEOADDRESSITEM_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.geoAddressItem = new GeoAddressItem();
              this.geoAddressItem.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SHORTCUTITEM_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.shortcutItem = new ShortcutItem();
              this.shortcutItem.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SQUAREITEM_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.squareItem = new SquareInfo();
              this.squareItem.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SQUARECATEGORYITEM_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.squareCategoryItem = new SQCat();
              this.squareCategoryItem.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.categoryItem != null) {
        oprot.writeFieldBegin(CATEGORY_ITEM_FIELD_DESC);
        this.categoryItem.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.spotItem != null) {
        oprot.writeFieldBegin(SPOT_ITEM_FIELD_DESC);
        this.spotItem.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.productItem != null) {
        oprot.writeFieldBegin(PRODUCT_ITEM_FIELD_DESC);
        this.productItem.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.serviceItem != null) {
        oprot.writeFieldBegin(SERVICE_ITEM_FIELD_DESC);
        this.serviceItem.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.yellowpageItem != null) {
        oprot.writeFieldBegin(YELLOWPAGE_ITEM_FIELD_DESC);
        this.yellowpageItem.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.oaItem != null) {
        oprot.writeFieldBegin(OA_ITEM_FIELD_DESC);
        this.oaItem.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.geoAddressItem != null) {
        oprot.writeFieldBegin(GEO_ADDRESS_ITEM_FIELD_DESC);
        this.geoAddressItem.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.shortcutItem != null) {
        oprot.writeFieldBegin(SHORTCUT_ITEM_FIELD_DESC);
        this.shortcutItem.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.squareItem != null) {
        oprot.writeFieldBegin(SQUARE_ITEM_FIELD_DESC);
        this.squareItem.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.squareCategoryItem != null) {
        oprot.writeFieldBegin(SQUARE_CATEGORY_ITEM_FIELD_DESC);
        this.squareCategoryItem.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SearchItemUnion(";
    var first : Bool = true;

    ret += "categoryItem:";
    if (this.categoryItem == null) {
      ret += "null";
    } else {
      ret += this.categoryItem;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "spotItem:";
    if (this.spotItem == null) {
      ret += "null";
    } else {
      ret += this.spotItem;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "productItem:";
    if (this.productItem == null) {
      ret += "null";
    } else {
      ret += this.productItem;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "serviceItem:";
    if (this.serviceItem == null) {
      ret += "null";
    } else {
      ret += this.serviceItem;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "yellowpageItem:";
    if (this.yellowpageItem == null) {
      ret += "null";
    } else {
      ret += this.yellowpageItem;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "oaItem:";
    if (this.oaItem == null) {
      ret += "null";
    } else {
      ret += this.oaItem;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "geoAddressItem:";
    if (this.geoAddressItem == null) {
      ret += "null";
    } else {
      ret += this.geoAddressItem;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "shortcutItem:";
    if (this.shortcutItem == null) {
      ret += "null";
    } else {
      ret += this.shortcutItem;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "squareItem:";
    if (this.squareItem == null) {
      ret += "null";
    } else {
      ret += this.squareItem;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "squareCategoryItem:";
    if (this.squareCategoryItem == null) {
      ret += "null";
    } else {
      ret += this.squareCategoryItem;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

