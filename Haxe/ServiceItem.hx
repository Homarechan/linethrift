/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class ServiceItem implements TBase {
  
  static var STRUCT_DESC = { new TStruct("ServiceItem"); };
  static var ID_FIELD_DESC = { new TField("id", TType.STRING, 1); };
  static var TITLE_FIELD_DESC = { new TField("title", TType.STRING, 2); };
  static var G_FIELD_DESC = { new TField("g", TType.I32, 3); };
  static var SUB_TYPE_FIELD_DESC = { new TField("subType", TType.I32, 4); };
  static var APP_ID_FIELD_DESC = { new TField("appId", TType.STRING, 5); };
  static var CHANNEL_ID_FIELD_DESC = { new TField("channelId", TType.STRING, 6); };
  static var BADGE_FIELD_DESC = { new TField("badge", TType.STRING, 7); };
  static var ICON_URL_FIELD_DESC = { new TField("iconUrl", TType.STRING, 8); };
  static var DOWNLOAD_URL_FIELD_DESC = { new TField("downloadUrl", TType.STRING, 9); };
  static var LAUNCH_SCHEME_FIELD_DESC = { new TField("launchScheme", TType.STRING, 10); };
  static var ICON_TINT_FIELD_DESC = { new TField("iconTint", TType.BOOL, 11); };

  @:isVar
  public var id(get,set) : String;
  @:isVar
  public var title(get,set) : String;
  @:isVar
  public var g(get,set) : haxe.Int32;
  @:isVar
  public var subType(get,set) : Int;
  @:isVar
  public var appId(get,set) : String;
  @:isVar
  public var channelId(get,set) : String;
  @:isVar
  public var badge(get,set) : String;
  @:isVar
  public var iconUrl(get,set) : String;
  @:isVar
  public var downloadUrl(get,set) : String;
  @:isVar
  public var launchScheme(get,set) : String;
  @:isVar
  public var iconTint(get,set) : Bool;

  inline static var ID_FIELD_ID : Int = 1;
  inline static var TITLE_FIELD_ID : Int = 2;
  inline static var G_FIELD_ID : Int = 3;
  inline static var SUBTYPE_FIELD_ID : Int = 4;
  inline static var APPID_FIELD_ID : Int = 5;
  inline static var CHANNELID_FIELD_ID : Int = 6;
  inline static var BADGE_FIELD_ID : Int = 7;
  inline static var ICONURL_FIELD_ID : Int = 8;
  inline static var DOWNLOADURL_FIELD_ID : Int = 9;
  inline static var LAUNCHSCHEME_FIELD_ID : Int = 10;
  inline static var ICONTINT_FIELD_ID : Int = 11;

  private var __isset_g : Bool = false;
  private var __isset_subType : Bool = false;
  private var __isset_iconTint : Bool = false;

  public function new() {
  }

  public function get_id() : String {
    return this.id;
  }

  public function set_id(id:String) : String {
    this.id = id;
    return this.id;
  }

  public function unsetId() : Void {
    this.id = null;
  }

  // Returns true if field id is set (has been assigned a value) and false otherwise
  public function isSetId() : Bool {
    return this.id != null;
  }

  public function get_title() : String {
    return this.title;
  }

  public function set_title(title:String) : String {
    this.title = title;
    return this.title;
  }

  public function unsetTitle() : Void {
    this.title = null;
  }

  // Returns true if field title is set (has been assigned a value) and false otherwise
  public function isSetTitle() : Bool {
    return this.title != null;
  }

  public function get_g() : haxe.Int32 {
    return this.g;
  }

  public function set_g(g:haxe.Int32) : haxe.Int32 {
    this.g = g;
    this.__isset_g = true;
    return this.g;
  }

  public function unsetG() : Void {
    this.__isset_g = false;
  }

  // Returns true if field g is set (has been assigned a value) and false otherwise
  public function isSetG() : Bool {
    return this.__isset_g;
  }

  public function get_subType() : Int {
    return this.subType;
  }

  public function set_subType(subType:Int) : Int {
    this.subType = subType;
    this.__isset_subType = true;
    return this.subType;
  }

  public function unsetSubType() : Void {
    this.__isset_subType = false;
  }

  // Returns true if field subType is set (has been assigned a value) and false otherwise
  public function isSetSubType() : Bool {
    return this.__isset_subType;
  }

  public function get_appId() : String {
    return this.appId;
  }

  public function set_appId(appId:String) : String {
    this.appId = appId;
    return this.appId;
  }

  public function unsetAppId() : Void {
    this.appId = null;
  }

  // Returns true if field appId is set (has been assigned a value) and false otherwise
  public function isSetAppId() : Bool {
    return this.appId != null;
  }

  public function get_channelId() : String {
    return this.channelId;
  }

  public function set_channelId(channelId:String) : String {
    this.channelId = channelId;
    return this.channelId;
  }

  public function unsetChannelId() : Void {
    this.channelId = null;
  }

  // Returns true if field channelId is set (has been assigned a value) and false otherwise
  public function isSetChannelId() : Bool {
    return this.channelId != null;
  }

  public function get_badge() : String {
    return this.badge;
  }

  public function set_badge(badge:String) : String {
    this.badge = badge;
    return this.badge;
  }

  public function unsetBadge() : Void {
    this.badge = null;
  }

  // Returns true if field badge is set (has been assigned a value) and false otherwise
  public function isSetBadge() : Bool {
    return this.badge != null;
  }

  public function get_iconUrl() : String {
    return this.iconUrl;
  }

  public function set_iconUrl(iconUrl:String) : String {
    this.iconUrl = iconUrl;
    return this.iconUrl;
  }

  public function unsetIconUrl() : Void {
    this.iconUrl = null;
  }

  // Returns true if field iconUrl is set (has been assigned a value) and false otherwise
  public function isSetIconUrl() : Bool {
    return this.iconUrl != null;
  }

  public function get_downloadUrl() : String {
    return this.downloadUrl;
  }

  public function set_downloadUrl(downloadUrl:String) : String {
    this.downloadUrl = downloadUrl;
    return this.downloadUrl;
  }

  public function unsetDownloadUrl() : Void {
    this.downloadUrl = null;
  }

  // Returns true if field downloadUrl is set (has been assigned a value) and false otherwise
  public function isSetDownloadUrl() : Bool {
    return this.downloadUrl != null;
  }

  public function get_launchScheme() : String {
    return this.launchScheme;
  }

  public function set_launchScheme(launchScheme:String) : String {
    this.launchScheme = launchScheme;
    return this.launchScheme;
  }

  public function unsetLaunchScheme() : Void {
    this.launchScheme = null;
  }

  // Returns true if field launchScheme is set (has been assigned a value) and false otherwise
  public function isSetLaunchScheme() : Bool {
    return this.launchScheme != null;
  }

  public function get_iconTint() : Bool {
    return this.iconTint;
  }

  public function set_iconTint(iconTint:Bool) : Bool {
    this.iconTint = iconTint;
    this.__isset_iconTint = true;
    return this.iconTint;
  }

  public function unsetIconTint() : Void {
    this.__isset_iconTint = false;
  }

  // Returns true if field iconTint is set (has been assigned a value) and false otherwise
  public function isSetIconTint() : Bool {
    return this.__isset_iconTint;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case ID_FIELD_ID:
      if (value == null) {
        unsetId();
      } else {
        this.id = value;
      }

    case TITLE_FIELD_ID:
      if (value == null) {
        unsetTitle();
      } else {
        this.title = value;
      }

    case G_FIELD_ID:
      if (value == null) {
        unsetG();
      } else {
        this.g = value;
      }

    case SUBTYPE_FIELD_ID:
      if (value == null) {
        unsetSubType();
      } else {
        this.subType = value;
      }

    case APPID_FIELD_ID:
      if (value == null) {
        unsetAppId();
      } else {
        this.appId = value;
      }

    case CHANNELID_FIELD_ID:
      if (value == null) {
        unsetChannelId();
      } else {
        this.channelId = value;
      }

    case BADGE_FIELD_ID:
      if (value == null) {
        unsetBadge();
      } else {
        this.badge = value;
      }

    case ICONURL_FIELD_ID:
      if (value == null) {
        unsetIconUrl();
      } else {
        this.iconUrl = value;
      }

    case DOWNLOADURL_FIELD_ID:
      if (value == null) {
        unsetDownloadUrl();
      } else {
        this.downloadUrl = value;
      }

    case LAUNCHSCHEME_FIELD_ID:
      if (value == null) {
        unsetLaunchScheme();
      } else {
        this.launchScheme = value;
      }

    case ICONTINT_FIELD_ID:
      if (value == null) {
        unsetIconTint();
      } else {
        this.iconTint = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case ID_FIELD_ID:
      return this.id;
    case TITLE_FIELD_ID:
      return this.title;
    case G_FIELD_ID:
      return this.g;
    case SUBTYPE_FIELD_ID:
      return this.subType;
    case APPID_FIELD_ID:
      return this.appId;
    case CHANNELID_FIELD_ID:
      return this.channelId;
    case BADGE_FIELD_ID:
      return this.badge;
    case ICONURL_FIELD_ID:
      return this.iconUrl;
    case DOWNLOADURL_FIELD_ID:
      return this.downloadUrl;
    case LAUNCHSCHEME_FIELD_ID:
      return this.launchScheme;
    case ICONTINT_FIELD_ID:
      return this.iconTint;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case ID_FIELD_ID:
      return isSetId();
    case TITLE_FIELD_ID:
      return isSetTitle();
    case G_FIELD_ID:
      return isSetG();
    case SUBTYPE_FIELD_ID:
      return isSetSubType();
    case APPID_FIELD_ID:
      return isSetAppId();
    case CHANNELID_FIELD_ID:
      return isSetChannelId();
    case BADGE_FIELD_ID:
      return isSetBadge();
    case ICONURL_FIELD_ID:
      return isSetIconUrl();
    case DOWNLOADURL_FIELD_ID:
      return isSetDownloadUrl();
    case LAUNCHSCHEME_FIELD_ID:
      return isSetLaunchScheme();
    case ICONTINT_FIELD_ID:
      return isSetIconTint();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.id = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TITLE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.title = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case G_FIELD_ID:
            if (field.type == TType.I32) {
              this.g = iprot.readI32();
              this.__isset_g = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SUBTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.subType = iprot.readI32();
              this.__isset_subType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case APPID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.appId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CHANNELID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case BADGE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.badge = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ICONURL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.iconUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DOWNLOADURL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.downloadUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case LAUNCHSCHEME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.launchScheme = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ICONTINT_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.iconTint = iprot.readBool();
              this.__isset_iconTint = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
      if (this.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(this.title);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(G_FIELD_DESC);
      oprot.writeI32(this.g);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUB_TYPE_FIELD_DESC);
      oprot.writeI32(this.subType);
      oprot.writeFieldEnd();
      if (this.appId != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(this.appId);
        oprot.writeFieldEnd();
      }
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      if (this.badge != null) {
        oprot.writeFieldBegin(BADGE_FIELD_DESC);
        oprot.writeString(this.badge);
        oprot.writeFieldEnd();
      }
      if (this.iconUrl != null) {
        oprot.writeFieldBegin(ICON_URL_FIELD_DESC);
        oprot.writeString(this.iconUrl);
        oprot.writeFieldEnd();
      }
      if (this.downloadUrl != null) {
        oprot.writeFieldBegin(DOWNLOAD_URL_FIELD_DESC);
        oprot.writeString(this.downloadUrl);
        oprot.writeFieldEnd();
      }
      if (this.launchScheme != null) {
        oprot.writeFieldBegin(LAUNCH_SCHEME_FIELD_DESC);
        oprot.writeString(this.launchScheme);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ICON_TINT_FIELD_DESC);
      oprot.writeBool(this.iconTint);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "ServiceItem(";
    var first : Bool = true;

    ret += "id:";
    if (this.id == null) {
      ret += "null";
    } else {
      ret += this.id;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "title:";
    if (this.title == null) {
      ret += "null";
    } else {
      ret += this.title;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "g:";
    ret += this.g;
    first = false;
    if (!first) ret +=  ", ";
    ret += "subType:";
    var subType_name : String = .SubType.VALUES_TO_NAMES[this.subType];
    if (subType_name != null) {
      ret += subType_name;
      ret += " (";
    }
    ret += this.subType;
    if (subType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "appId:";
    if (this.appId == null) {
      ret += "null";
    } else {
      ret += this.appId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "channelId:";
    if (this.channelId == null) {
      ret += "null";
    } else {
      ret += this.channelId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "badge:";
    if (this.badge == null) {
      ret += "null";
    } else {
      ret += this.badge;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "iconUrl:";
    if (this.iconUrl == null) {
      ret += "null";
    } else {
      ret += this.iconUrl;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "downloadUrl:";
    if (this.downloadUrl == null) {
      ret += "null";
    } else {
      ret += this.downloadUrl;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "launchScheme:";
    if (this.launchScheme == null) {
      ret += "null";
    } else {
      ret += this.launchScheme;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "iconTint:";
    ret += this.iconTint;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetSubType() && !.SubType.VALID_VALUES.contains(subType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'subType' has been assigned the invalid value " + subType);
    }
  }

}

