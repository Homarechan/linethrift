/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class CoinProductItem implements TBase {
  
  static var STRUCT_DESC = { new TStruct("CoinProductItem"); };
  static var ITEM_ID_FIELD_DESC = { new TField("itemId", TType.STRING, 1); };
  static var COIN_FIELD_DESC = { new TField("coin", TType.I32, 2); };
  static var FREE_COIN_FIELD_DESC = { new TField("freeCoin", TType.I32, 3); };
  static var CURRENCY_FIELD_DESC = { new TField("currency", TType.STRING, 5); };
  static var PRICE_FIELD_DESC = { new TField("price", TType.STRING, 6); };
  static var DISPLAY_PRICE_FIELD_DESC = { new TField("displayPrice", TType.STRING, 7); };
  static var NAME_FIELD_DESC = { new TField("name", TType.STRING, 8); };
  static var DESC_FIELD_DESC = { new TField("desc", TType.STRING, 9); };

  @:isVar
  public var itemId(get,set) : String;
  @:isVar
  public var coin(get,set) : haxe.Int32;
  @:isVar
  public var freeCoin(get,set) : haxe.Int32;
  @:isVar
  public var currency(get,set) : String;
  @:isVar
  public var price(get,set) : String;
  @:isVar
  public var displayPrice(get,set) : String;
  @:isVar
  public var name(get,set) : String;
  @:isVar
  public var desc(get,set) : String;

  inline static var ITEMID_FIELD_ID : Int = 1;
  inline static var COIN_FIELD_ID : Int = 2;
  inline static var FREECOIN_FIELD_ID : Int = 3;
  inline static var CURRENCY_FIELD_ID : Int = 5;
  inline static var PRICE_FIELD_ID : Int = 6;
  inline static var DISPLAYPRICE_FIELD_ID : Int = 7;
  inline static var NAME_FIELD_ID : Int = 8;
  inline static var DESC_FIELD_ID : Int = 9;

  private var __isset_coin : Bool = false;
  private var __isset_freeCoin : Bool = false;

  public function new() {
  }

  public function get_itemId() : String {
    return this.itemId;
  }

  public function set_itemId(itemId:String) : String {
    this.itemId = itemId;
    return this.itemId;
  }

  public function unsetItemId() : Void {
    this.itemId = null;
  }

  // Returns true if field itemId is set (has been assigned a value) and false otherwise
  public function isSetItemId() : Bool {
    return this.itemId != null;
  }

  public function get_coin() : haxe.Int32 {
    return this.coin;
  }

  public function set_coin(coin:haxe.Int32) : haxe.Int32 {
    this.coin = coin;
    this.__isset_coin = true;
    return this.coin;
  }

  public function unsetCoin() : Void {
    this.__isset_coin = false;
  }

  // Returns true if field coin is set (has been assigned a value) and false otherwise
  public function isSetCoin() : Bool {
    return this.__isset_coin;
  }

  public function get_freeCoin() : haxe.Int32 {
    return this.freeCoin;
  }

  public function set_freeCoin(freeCoin:haxe.Int32) : haxe.Int32 {
    this.freeCoin = freeCoin;
    this.__isset_freeCoin = true;
    return this.freeCoin;
  }

  public function unsetFreeCoin() : Void {
    this.__isset_freeCoin = false;
  }

  // Returns true if field freeCoin is set (has been assigned a value) and false otherwise
  public function isSetFreeCoin() : Bool {
    return this.__isset_freeCoin;
  }

  public function get_currency() : String {
    return this.currency;
  }

  public function set_currency(currency:String) : String {
    this.currency = currency;
    return this.currency;
  }

  public function unsetCurrency() : Void {
    this.currency = null;
  }

  // Returns true if field currency is set (has been assigned a value) and false otherwise
  public function isSetCurrency() : Bool {
    return this.currency != null;
  }

  public function get_price() : String {
    return this.price;
  }

  public function set_price(price:String) : String {
    this.price = price;
    return this.price;
  }

  public function unsetPrice() : Void {
    this.price = null;
  }

  // Returns true if field price is set (has been assigned a value) and false otherwise
  public function isSetPrice() : Bool {
    return this.price != null;
  }

  public function get_displayPrice() : String {
    return this.displayPrice;
  }

  public function set_displayPrice(displayPrice:String) : String {
    this.displayPrice = displayPrice;
    return this.displayPrice;
  }

  public function unsetDisplayPrice() : Void {
    this.displayPrice = null;
  }

  // Returns true if field displayPrice is set (has been assigned a value) and false otherwise
  public function isSetDisplayPrice() : Bool {
    return this.displayPrice != null;
  }

  public function get_name() : String {
    return this.name;
  }

  public function set_name(name:String) : String {
    this.name = name;
    return this.name;
  }

  public function unsetName() : Void {
    this.name = null;
  }

  // Returns true if field name is set (has been assigned a value) and false otherwise
  public function isSetName() : Bool {
    return this.name != null;
  }

  public function get_desc() : String {
    return this.desc;
  }

  public function set_desc(desc:String) : String {
    this.desc = desc;
    return this.desc;
  }

  public function unsetDesc() : Void {
    this.desc = null;
  }

  // Returns true if field desc is set (has been assigned a value) and false otherwise
  public function isSetDesc() : Bool {
    return this.desc != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case ITEMID_FIELD_ID:
      if (value == null) {
        unsetItemId();
      } else {
        this.itemId = value;
      }

    case COIN_FIELD_ID:
      if (value == null) {
        unsetCoin();
      } else {
        this.coin = value;
      }

    case FREECOIN_FIELD_ID:
      if (value == null) {
        unsetFreeCoin();
      } else {
        this.freeCoin = value;
      }

    case CURRENCY_FIELD_ID:
      if (value == null) {
        unsetCurrency();
      } else {
        this.currency = value;
      }

    case PRICE_FIELD_ID:
      if (value == null) {
        unsetPrice();
      } else {
        this.price = value;
      }

    case DISPLAYPRICE_FIELD_ID:
      if (value == null) {
        unsetDisplayPrice();
      } else {
        this.displayPrice = value;
      }

    case NAME_FIELD_ID:
      if (value == null) {
        unsetName();
      } else {
        this.name = value;
      }

    case DESC_FIELD_ID:
      if (value == null) {
        unsetDesc();
      } else {
        this.desc = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case ITEMID_FIELD_ID:
      return this.itemId;
    case COIN_FIELD_ID:
      return this.coin;
    case FREECOIN_FIELD_ID:
      return this.freeCoin;
    case CURRENCY_FIELD_ID:
      return this.currency;
    case PRICE_FIELD_ID:
      return this.price;
    case DISPLAYPRICE_FIELD_ID:
      return this.displayPrice;
    case NAME_FIELD_ID:
      return this.name;
    case DESC_FIELD_ID:
      return this.desc;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case ITEMID_FIELD_ID:
      return isSetItemId();
    case COIN_FIELD_ID:
      return isSetCoin();
    case FREECOIN_FIELD_ID:
      return isSetFreeCoin();
    case CURRENCY_FIELD_ID:
      return isSetCurrency();
    case PRICE_FIELD_ID:
      return isSetPrice();
    case DISPLAYPRICE_FIELD_ID:
      return isSetDisplayPrice();
    case NAME_FIELD_ID:
      return isSetName();
    case DESC_FIELD_ID:
      return isSetDesc();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ITEMID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.itemId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case COIN_FIELD_ID:
            if (field.type == TType.I32) {
              this.coin = iprot.readI32();
              this.__isset_coin = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case FREECOIN_FIELD_ID:
            if (field.type == TType.I32) {
              this.freeCoin = iprot.readI32();
              this.__isset_freeCoin = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CURRENCY_FIELD_ID:
            if (field.type == TType.STRING) {
              this.currency = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PRICE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.price = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DISPLAYPRICE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.displayPrice = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DESC_FIELD_ID:
            if (field.type == TType.STRING) {
              this.desc = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.itemId != null) {
        oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
        oprot.writeString(this.itemId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COIN_FIELD_DESC);
      oprot.writeI32(this.coin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREE_COIN_FIELD_DESC);
      oprot.writeI32(this.freeCoin);
      oprot.writeFieldEnd();
      if (this.currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(this.currency);
        oprot.writeFieldEnd();
      }
      if (this.price != null) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeString(this.price);
        oprot.writeFieldEnd();
      }
      if (this.displayPrice != null) {
        oprot.writeFieldBegin(DISPLAY_PRICE_FIELD_DESC);
        oprot.writeString(this.displayPrice);
        oprot.writeFieldEnd();
      }
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(this.desc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "CoinProductItem(";
    var first : Bool = true;

    ret += "itemId:";
    if (this.itemId == null) {
      ret += "null";
    } else {
      ret += this.itemId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "coin:";
    ret += this.coin;
    first = false;
    if (!first) ret +=  ", ";
    ret += "freeCoin:";
    ret += this.freeCoin;
    first = false;
    if (!first) ret +=  ", ";
    ret += "currency:";
    if (this.currency == null) {
      ret += "null";
    } else {
      ret += this.currency;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "price:";
    if (this.price == null) {
      ret += "null";
    } else {
      ret += this.price;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "displayPrice:";
    if (this.displayPrice == null) {
      ret += "null";
    } else {
      ret += this.displayPrice;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "name:";
    if (this.name == null) {
      ret += "null";
    } else {
      ret += this.name;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "desc:";
    if (this.desc == null) {
      ret += "null";
    } else {
      ret += this.desc;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

