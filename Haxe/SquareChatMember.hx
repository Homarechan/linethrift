/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SquareChatMember implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SquareChatMember"); };
  static var SQUARE_MEMBER_MID_FIELD_DESC = { new TField("squareMemberMid", TType.STRING, 1); };
  static var SQUARE_CHAT_MID_FIELD_DESC = { new TField("squareChatMid", TType.STRING, 2); };
  static var REVISION_FIELD_DESC = { new TField("revision", TType.I64, 3); };
  static var MEMBERSHIP_STATE_FIELD_DESC = { new TField("membershipState", TType.I32, 4); };
  static var NOTIFICATION_FOR_MESSAGE_FIELD_DESC = { new TField("notificationForMessage", TType.BOOL, 5); };

  @:isVar
  public var squareMemberMid(get,set) : String;
  @:isVar
  public var squareChatMid(get,set) : String;
  @:isVar
  public var revision(get,set) : haxe.Int64;
  @:isVar
  public var membershipState(get,set) : Int;
  @:isVar
  public var notificationForMessage(get,set) : Bool;

  inline static var SQUAREMEMBERMID_FIELD_ID : Int = 1;
  inline static var SQUARECHATMID_FIELD_ID : Int = 2;
  inline static var REVISION_FIELD_ID : Int = 3;
  inline static var MEMBERSHIPSTATE_FIELD_ID : Int = 4;
  inline static var NOTIFICATIONFORMESSAGE_FIELD_ID : Int = 5;

  private var __isset_revision : Bool = false;
  private var __isset_membershipState : Bool = false;
  private var __isset_notificationForMessage : Bool = false;

  public function new() {
  }

  public function get_squareMemberMid() : String {
    return this.squareMemberMid;
  }

  public function set_squareMemberMid(squareMemberMid:String) : String {
    this.squareMemberMid = squareMemberMid;
    return this.squareMemberMid;
  }

  public function unsetSquareMemberMid() : Void {
    this.squareMemberMid = null;
  }

  // Returns true if field squareMemberMid is set (has been assigned a value) and false otherwise
  public function isSetSquareMemberMid() : Bool {
    return this.squareMemberMid != null;
  }

  public function get_squareChatMid() : String {
    return this.squareChatMid;
  }

  public function set_squareChatMid(squareChatMid:String) : String {
    this.squareChatMid = squareChatMid;
    return this.squareChatMid;
  }

  public function unsetSquareChatMid() : Void {
    this.squareChatMid = null;
  }

  // Returns true if field squareChatMid is set (has been assigned a value) and false otherwise
  public function isSetSquareChatMid() : Bool {
    return this.squareChatMid != null;
  }

  public function get_revision() : haxe.Int64 {
    return this.revision;
  }

  public function set_revision(revision:haxe.Int64) : haxe.Int64 {
    this.revision = revision;
    this.__isset_revision = true;
    return this.revision;
  }

  public function unsetRevision() : Void {
    this.__isset_revision = false;
  }

  // Returns true if field revision is set (has been assigned a value) and false otherwise
  public function isSetRevision() : Bool {
    return this.__isset_revision;
  }

  public function get_membershipState() : Int {
    return this.membershipState;
  }

  public function set_membershipState(membershipState:Int) : Int {
    this.membershipState = membershipState;
    this.__isset_membershipState = true;
    return this.membershipState;
  }

  public function unsetMembershipState() : Void {
    this.__isset_membershipState = false;
  }

  // Returns true if field membershipState is set (has been assigned a value) and false otherwise
  public function isSetMembershipState() : Bool {
    return this.__isset_membershipState;
  }

  public function get_notificationForMessage() : Bool {
    return this.notificationForMessage;
  }

  public function set_notificationForMessage(notificationForMessage:Bool) : Bool {
    this.notificationForMessage = notificationForMessage;
    this.__isset_notificationForMessage = true;
    return this.notificationForMessage;
  }

  public function unsetNotificationForMessage() : Void {
    this.__isset_notificationForMessage = false;
  }

  // Returns true if field notificationForMessage is set (has been assigned a value) and false otherwise
  public function isSetNotificationForMessage() : Bool {
    return this.__isset_notificationForMessage;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case SQUAREMEMBERMID_FIELD_ID:
      if (value == null) {
        unsetSquareMemberMid();
      } else {
        this.squareMemberMid = value;
      }

    case SQUARECHATMID_FIELD_ID:
      if (value == null) {
        unsetSquareChatMid();
      } else {
        this.squareChatMid = value;
      }

    case REVISION_FIELD_ID:
      if (value == null) {
        unsetRevision();
      } else {
        this.revision = value;
      }

    case MEMBERSHIPSTATE_FIELD_ID:
      if (value == null) {
        unsetMembershipState();
      } else {
        this.membershipState = value;
      }

    case NOTIFICATIONFORMESSAGE_FIELD_ID:
      if (value == null) {
        unsetNotificationForMessage();
      } else {
        this.notificationForMessage = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case SQUAREMEMBERMID_FIELD_ID:
      return this.squareMemberMid;
    case SQUARECHATMID_FIELD_ID:
      return this.squareChatMid;
    case REVISION_FIELD_ID:
      return this.revision;
    case MEMBERSHIPSTATE_FIELD_ID:
      return this.membershipState;
    case NOTIFICATIONFORMESSAGE_FIELD_ID:
      return this.notificationForMessage;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case SQUAREMEMBERMID_FIELD_ID:
      return isSetSquareMemberMid();
    case SQUARECHATMID_FIELD_ID:
      return isSetSquareChatMid();
    case REVISION_FIELD_ID:
      return isSetRevision();
    case MEMBERSHIPSTATE_FIELD_ID:
      return isSetMembershipState();
    case NOTIFICATIONFORMESSAGE_FIELD_ID:
      return isSetNotificationForMessage();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SQUAREMEMBERMID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.squareMemberMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SQUARECHATMID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.squareChatMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case REVISION_FIELD_ID:
            if (field.type == TType.I64) {
              this.revision = iprot.readI64();
              this.__isset_revision = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MEMBERSHIPSTATE_FIELD_ID:
            if (field.type == TType.I32) {
              this.membershipState = iprot.readI32();
              this.__isset_membershipState = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NOTIFICATIONFORMESSAGE_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.notificationForMessage = iprot.readBool();
              this.__isset_notificationForMessage = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.squareMemberMid != null) {
        oprot.writeFieldBegin(SQUARE_MEMBER_MID_FIELD_DESC);
        oprot.writeString(this.squareMemberMid);
        oprot.writeFieldEnd();
      }
      if (this.squareChatMid != null) {
        oprot.writeFieldBegin(SQUARE_CHAT_MID_FIELD_DESC);
        oprot.writeString(this.squareChatMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REVISION_FIELD_DESC);
      oprot.writeI64(this.revision);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMBERSHIP_STATE_FIELD_DESC);
      oprot.writeI32(this.membershipState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_FOR_MESSAGE_FIELD_DESC);
      oprot.writeBool(this.notificationForMessage);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SquareChatMember(";
    var first : Bool = true;

    ret += "squareMemberMid:";
    if (this.squareMemberMid == null) {
      ret += "null";
    } else {
      ret += this.squareMemberMid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "squareChatMid:";
    if (this.squareChatMid == null) {
      ret += "null";
    } else {
      ret += this.squareChatMid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "revision:";
    ret += this.revision;
    first = false;
    if (!first) ret +=  ", ";
    ret += "membershipState:";
    var membershipState_name : String = .SquareChatMembershipState.VALUES_TO_NAMES[this.membershipState];
    if (membershipState_name != null) {
      ret += membershipState_name;
      ret += " (";
    }
    ret += this.membershipState;
    if (membershipState_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "notificationForMessage:";
    ret += this.notificationForMessage;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetMembershipState() && !.SquareChatMembershipState.VALID_VALUES.contains(membershipState)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'membershipState' has been assigned the invalid value " + membershipState);
    }
  }

}

