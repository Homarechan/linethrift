/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SquareChatStatus implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SquareChatStatus"); };
  static var LAST_MESSAGE_FIELD_DESC = { new TField("lastMessage", TType.STRUCT, 3); };
  static var SENDER_DISPLAY_NAME_FIELD_DESC = { new TField("senderDisplayName", TType.STRING, 4); };
  static var OTHER_STATUS_FIELD_DESC = { new TField("otherStatus", TType.STRUCT, 5); };

  @:isVar
  public var lastMessage(get,set) : SquareMessage;
  @:isVar
  public var senderDisplayName(get,set) : String;
  @:isVar
  public var otherStatus(get,set) : SquareChatStatusWithoutMessage;

  inline static var LASTMESSAGE_FIELD_ID : Int = 3;
  inline static var SENDERDISPLAYNAME_FIELD_ID : Int = 4;
  inline static var OTHERSTATUS_FIELD_ID : Int = 5;


  public function new() {
  }

  public function get_lastMessage() : SquareMessage {
    return this.lastMessage;
  }

  public function set_lastMessage(lastMessage:SquareMessage) : SquareMessage {
    this.lastMessage = lastMessage;
    return this.lastMessage;
  }

  public function unsetLastMessage() : Void {
    this.lastMessage = null;
  }

  // Returns true if field lastMessage is set (has been assigned a value) and false otherwise
  public function isSetLastMessage() : Bool {
    return this.lastMessage != null;
  }

  public function get_senderDisplayName() : String {
    return this.senderDisplayName;
  }

  public function set_senderDisplayName(senderDisplayName:String) : String {
    this.senderDisplayName = senderDisplayName;
    return this.senderDisplayName;
  }

  public function unsetSenderDisplayName() : Void {
    this.senderDisplayName = null;
  }

  // Returns true if field senderDisplayName is set (has been assigned a value) and false otherwise
  public function isSetSenderDisplayName() : Bool {
    return this.senderDisplayName != null;
  }

  public function get_otherStatus() : SquareChatStatusWithoutMessage {
    return this.otherStatus;
  }

  public function set_otherStatus(otherStatus:SquareChatStatusWithoutMessage) : SquareChatStatusWithoutMessage {
    this.otherStatus = otherStatus;
    return this.otherStatus;
  }

  public function unsetOtherStatus() : Void {
    this.otherStatus = null;
  }

  // Returns true if field otherStatus is set (has been assigned a value) and false otherwise
  public function isSetOtherStatus() : Bool {
    return this.otherStatus != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case LASTMESSAGE_FIELD_ID:
      if (value == null) {
        unsetLastMessage();
      } else {
        this.lastMessage = value;
      }

    case SENDERDISPLAYNAME_FIELD_ID:
      if (value == null) {
        unsetSenderDisplayName();
      } else {
        this.senderDisplayName = value;
      }

    case OTHERSTATUS_FIELD_ID:
      if (value == null) {
        unsetOtherStatus();
      } else {
        this.otherStatus = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case LASTMESSAGE_FIELD_ID:
      return this.lastMessage;
    case SENDERDISPLAYNAME_FIELD_ID:
      return this.senderDisplayName;
    case OTHERSTATUS_FIELD_ID:
      return this.otherStatus;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case LASTMESSAGE_FIELD_ID:
      return isSetLastMessage();
    case SENDERDISPLAYNAME_FIELD_ID:
      return isSetSenderDisplayName();
    case OTHERSTATUS_FIELD_ID:
      return isSetOtherStatus();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case LASTMESSAGE_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.lastMessage = new SquareMessage();
              this.lastMessage.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SENDERDISPLAYNAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.senderDisplayName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case OTHERSTATUS_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.otherStatus = new SquareChatStatusWithoutMessage();
              this.otherStatus.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.lastMessage != null) {
        oprot.writeFieldBegin(LAST_MESSAGE_FIELD_DESC);
        this.lastMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.senderDisplayName != null) {
        oprot.writeFieldBegin(SENDER_DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(this.senderDisplayName);
        oprot.writeFieldEnd();
      }
      if (this.otherStatus != null) {
        oprot.writeFieldBegin(OTHER_STATUS_FIELD_DESC);
        this.otherStatus.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SquareChatStatus(";
    var first : Bool = true;

    ret += "lastMessage:";
    if (this.lastMessage == null) {
      ret += "null";
    } else {
      ret += this.lastMessage;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "senderDisplayName:";
    if (this.senderDisplayName == null) {
      ret += "null";
    } else {
      ret += this.senderDisplayName;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "otherStatus:";
    if (this.otherStatus == null) {
      ret += "null";
    } else {
      ret += this.otherStatus;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

