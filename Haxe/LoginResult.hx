/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class LoginResult implements TBase {
  
  static var STRUCT_DESC = { new TStruct("LoginResult"); };
  static var AUTH_TOKEN_FIELD_DESC = { new TField("authToken", TType.STRING, 1); };
  static var CERTIFICATE_FIELD_DESC = { new TField("certificate", TType.STRING, 2); };
  static var VERIFIER_FIELD_DESC = { new TField("verifier", TType.STRING, 3); };
  static var PIN_CODE_FIELD_DESC = { new TField("pinCode", TType.STRING, 4); };
  static var TYPE_FIELD_DESC = { new TField("type", TType.I32, 5); };
  static var LAST_PRIMARY_BIND_TIME_FIELD_DESC = { new TField("lastPrimaryBindTime", TType.I64, 6); };
  static var DISPLAY_MESSAGE_FIELD_DESC = { new TField("displayMessage", TType.STRING, 7); };
  static var SESSION_FOR_SMSCONFIRM_FIELD_DESC = { new TField("sessionForSMSConfirm", TType.STRUCT, 8); };

  @:isVar
  public var authToken(get,set) : String;
  @:isVar
  public var certificate(get,set) : String;
  @:isVar
  public var verifier(get,set) : String;
  @:isVar
  public var pinCode(get,set) : String;
  @:isVar
  public var type(get,set) : Int;
  @:isVar
  public var lastPrimaryBindTime(get,set) : haxe.Int64;
  @:isVar
  public var displayMessage(get,set) : String;
  @:isVar
  public var sessionForSMSConfirm(get,set) : VerificationSessionData;

  inline static var AUTHTOKEN_FIELD_ID : Int = 1;
  inline static var CERTIFICATE_FIELD_ID : Int = 2;
  inline static var VERIFIER_FIELD_ID : Int = 3;
  inline static var PINCODE_FIELD_ID : Int = 4;
  inline static var TYPE_FIELD_ID : Int = 5;
  inline static var LASTPRIMARYBINDTIME_FIELD_ID : Int = 6;
  inline static var DISPLAYMESSAGE_FIELD_ID : Int = 7;
  inline static var SESSIONFORSMSCONFIRM_FIELD_ID : Int = 8;

  private var __isset_type : Bool = false;
  private var __isset_lastPrimaryBindTime : Bool = false;

  public function new() {
  }

  public function get_authToken() : String {
    return this.authToken;
  }

  public function set_authToken(authToken:String) : String {
    this.authToken = authToken;
    return this.authToken;
  }

  public function unsetAuthToken() : Void {
    this.authToken = null;
  }

  // Returns true if field authToken is set (has been assigned a value) and false otherwise
  public function isSetAuthToken() : Bool {
    return this.authToken != null;
  }

  public function get_certificate() : String {
    return this.certificate;
  }

  public function set_certificate(certificate:String) : String {
    this.certificate = certificate;
    return this.certificate;
  }

  public function unsetCertificate() : Void {
    this.certificate = null;
  }

  // Returns true if field certificate is set (has been assigned a value) and false otherwise
  public function isSetCertificate() : Bool {
    return this.certificate != null;
  }

  public function get_verifier() : String {
    return this.verifier;
  }

  public function set_verifier(verifier:String) : String {
    this.verifier = verifier;
    return this.verifier;
  }

  public function unsetVerifier() : Void {
    this.verifier = null;
  }

  // Returns true if field verifier is set (has been assigned a value) and false otherwise
  public function isSetVerifier() : Bool {
    return this.verifier != null;
  }

  public function get_pinCode() : String {
    return this.pinCode;
  }

  public function set_pinCode(pinCode:String) : String {
    this.pinCode = pinCode;
    return this.pinCode;
  }

  public function unsetPinCode() : Void {
    this.pinCode = null;
  }

  // Returns true if field pinCode is set (has been assigned a value) and false otherwise
  public function isSetPinCode() : Bool {
    return this.pinCode != null;
  }

  public function get_type() : Int {
    return this.type;
  }

  public function set_type(type:Int) : Int {
    this.type = type;
    this.__isset_type = true;
    return this.type;
  }

  public function unsetType() : Void {
    this.__isset_type = false;
  }

  // Returns true if field type is set (has been assigned a value) and false otherwise
  public function isSetType() : Bool {
    return this.__isset_type;
  }

  public function get_lastPrimaryBindTime() : haxe.Int64 {
    return this.lastPrimaryBindTime;
  }

  public function set_lastPrimaryBindTime(lastPrimaryBindTime:haxe.Int64) : haxe.Int64 {
    this.lastPrimaryBindTime = lastPrimaryBindTime;
    this.__isset_lastPrimaryBindTime = true;
    return this.lastPrimaryBindTime;
  }

  public function unsetLastPrimaryBindTime() : Void {
    this.__isset_lastPrimaryBindTime = false;
  }

  // Returns true if field lastPrimaryBindTime is set (has been assigned a value) and false otherwise
  public function isSetLastPrimaryBindTime() : Bool {
    return this.__isset_lastPrimaryBindTime;
  }

  public function get_displayMessage() : String {
    return this.displayMessage;
  }

  public function set_displayMessage(displayMessage:String) : String {
    this.displayMessage = displayMessage;
    return this.displayMessage;
  }

  public function unsetDisplayMessage() : Void {
    this.displayMessage = null;
  }

  // Returns true if field displayMessage is set (has been assigned a value) and false otherwise
  public function isSetDisplayMessage() : Bool {
    return this.displayMessage != null;
  }

  public function get_sessionForSMSConfirm() : VerificationSessionData {
    return this.sessionForSMSConfirm;
  }

  public function set_sessionForSMSConfirm(sessionForSMSConfirm:VerificationSessionData) : VerificationSessionData {
    this.sessionForSMSConfirm = sessionForSMSConfirm;
    return this.sessionForSMSConfirm;
  }

  public function unsetSessionForSMSConfirm() : Void {
    this.sessionForSMSConfirm = null;
  }

  // Returns true if field sessionForSMSConfirm is set (has been assigned a value) and false otherwise
  public function isSetSessionForSMSConfirm() : Bool {
    return this.sessionForSMSConfirm != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case AUTHTOKEN_FIELD_ID:
      if (value == null) {
        unsetAuthToken();
      } else {
        this.authToken = value;
      }

    case CERTIFICATE_FIELD_ID:
      if (value == null) {
        unsetCertificate();
      } else {
        this.certificate = value;
      }

    case VERIFIER_FIELD_ID:
      if (value == null) {
        unsetVerifier();
      } else {
        this.verifier = value;
      }

    case PINCODE_FIELD_ID:
      if (value == null) {
        unsetPinCode();
      } else {
        this.pinCode = value;
      }

    case TYPE_FIELD_ID:
      if (value == null) {
        unsetType();
      } else {
        this.type = value;
      }

    case LASTPRIMARYBINDTIME_FIELD_ID:
      if (value == null) {
        unsetLastPrimaryBindTime();
      } else {
        this.lastPrimaryBindTime = value;
      }

    case DISPLAYMESSAGE_FIELD_ID:
      if (value == null) {
        unsetDisplayMessage();
      } else {
        this.displayMessage = value;
      }

    case SESSIONFORSMSCONFIRM_FIELD_ID:
      if (value == null) {
        unsetSessionForSMSConfirm();
      } else {
        this.sessionForSMSConfirm = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case AUTHTOKEN_FIELD_ID:
      return this.authToken;
    case CERTIFICATE_FIELD_ID:
      return this.certificate;
    case VERIFIER_FIELD_ID:
      return this.verifier;
    case PINCODE_FIELD_ID:
      return this.pinCode;
    case TYPE_FIELD_ID:
      return this.type;
    case LASTPRIMARYBINDTIME_FIELD_ID:
      return this.lastPrimaryBindTime;
    case DISPLAYMESSAGE_FIELD_ID:
      return this.displayMessage;
    case SESSIONFORSMSCONFIRM_FIELD_ID:
      return this.sessionForSMSConfirm;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case AUTHTOKEN_FIELD_ID:
      return isSetAuthToken();
    case CERTIFICATE_FIELD_ID:
      return isSetCertificate();
    case VERIFIER_FIELD_ID:
      return isSetVerifier();
    case PINCODE_FIELD_ID:
      return isSetPinCode();
    case TYPE_FIELD_ID:
      return isSetType();
    case LASTPRIMARYBINDTIME_FIELD_ID:
      return isSetLastPrimaryBindTime();
    case DISPLAYMESSAGE_FIELD_ID:
      return isSetDisplayMessage();
    case SESSIONFORSMSCONFIRM_FIELD_ID:
      return isSetSessionForSMSConfirm();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case AUTHTOKEN_FIELD_ID:
            if (field.type == TType.STRING) {
              this.authToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CERTIFICATE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.certificate = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case VERIFIER_FIELD_ID:
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PINCODE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.pinCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.type = iprot.readI32();
              this.__isset_type = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case LASTPRIMARYBINDTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.lastPrimaryBindTime = iprot.readI64();
              this.__isset_lastPrimaryBindTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DISPLAYMESSAGE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.displayMessage = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SESSIONFORSMSCONFIRM_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.sessionForSMSConfirm = new VerificationSessionData();
              this.sessionForSMSConfirm.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authToken != null) {
        oprot.writeFieldBegin(AUTH_TOKEN_FIELD_DESC);
        oprot.writeString(this.authToken);
        oprot.writeFieldEnd();
      }
      if (this.certificate != null) {
        oprot.writeFieldBegin(CERTIFICATE_FIELD_DESC);
        oprot.writeString(this.certificate);
        oprot.writeFieldEnd();
      }
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      if (this.pinCode != null) {
        oprot.writeFieldBegin(PIN_CODE_FIELD_DESC);
        oprot.writeString(this.pinCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_PRIMARY_BIND_TIME_FIELD_DESC);
      oprot.writeI64(this.lastPrimaryBindTime);
      oprot.writeFieldEnd();
      if (this.displayMessage != null) {
        oprot.writeFieldBegin(DISPLAY_MESSAGE_FIELD_DESC);
        oprot.writeString(this.displayMessage);
        oprot.writeFieldEnd();
      }
      if (this.sessionForSMSConfirm != null) {
        oprot.writeFieldBegin(SESSION_FOR_SMSCONFIRM_FIELD_DESC);
        this.sessionForSMSConfirm.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "LoginResult(";
    var first : Bool = true;

    ret += "authToken:";
    if (this.authToken == null) {
      ret += "null";
    } else {
      ret += this.authToken;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "certificate:";
    if (this.certificate == null) {
      ret += "null";
    } else {
      ret += this.certificate;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "verifier:";
    if (this.verifier == null) {
      ret += "null";
    } else {
      ret += this.verifier;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "pinCode:";
    if (this.pinCode == null) {
      ret += "null";
    } else {
      ret += this.pinCode;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "type:";
    var type_name : String = .LoginResultType.VALUES_TO_NAMES[this.type];
    if (type_name != null) {
      ret += type_name;
      ret += " (";
    }
    ret += this.type;
    if (type_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "lastPrimaryBindTime:";
    ret += this.lastPrimaryBindTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "displayMessage:";
    if (this.displayMessage == null) {
      ret += "null";
    } else {
      ret += this.displayMessage;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "sessionForSMSConfirm:";
    if (this.sessionForSMSConfirm == null) {
      ret += "null";
    } else {
      ret += this.sessionForSMSConfirm;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !.LoginResultType.VALID_VALUES.contains(type)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'type' has been assigned the invalid value " + type);
    }
  }

}

