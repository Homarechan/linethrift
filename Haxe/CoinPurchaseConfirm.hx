/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class CoinPurchaseConfirm implements TBase {
  
  static var STRUCT_DESC = { new TStruct("CoinPurchaseConfirm"); };
  static var ORDER_ID_FIELD_DESC = { new TField("orderId", TType.STRING, 1); };
  static var APP_STORE_CODE_FIELD_DESC = { new TField("appStoreCode", TType.I32, 2); };
  static var RECEIPT_FIELD_DESC = { new TField("receipt", TType.STRING, 3); };
  static var SIGNATURE_FIELD_DESC = { new TField("signature", TType.STRING, 4); };
  static var SELLER_FIELD_DESC = { new TField("seller", TType.STRING, 5); };
  static var REQUEST_TYPE_FIELD_DESC = { new TField("requestType", TType.STRING, 6); };
  static var IGNORE_RECEIPT_FIELD_DESC = { new TField("ignoreReceipt", TType.BOOL, 7); };

  @:isVar
  public var orderId(get,set) : String;
  @:isVar
  public var appStoreCode(get,set) : Int;
  @:isVar
  public var receipt(get,set) : String;
  @:isVar
  public var signature(get,set) : String;
  @:isVar
  public var seller(get,set) : String;
  @:isVar
  public var requestType(get,set) : String;
  @:isVar
  public var ignoreReceipt(get,set) : Bool;

  inline static var ORDERID_FIELD_ID : Int = 1;
  inline static var APPSTORECODE_FIELD_ID : Int = 2;
  inline static var RECEIPT_FIELD_ID : Int = 3;
  inline static var SIGNATURE_FIELD_ID : Int = 4;
  inline static var SELLER_FIELD_ID : Int = 5;
  inline static var REQUESTTYPE_FIELD_ID : Int = 6;
  inline static var IGNORERECEIPT_FIELD_ID : Int = 7;

  private var __isset_appStoreCode : Bool = false;
  private var __isset_ignoreReceipt : Bool = false;

  public function new() {
  }

  public function get_orderId() : String {
    return this.orderId;
  }

  public function set_orderId(orderId:String) : String {
    this.orderId = orderId;
    return this.orderId;
  }

  public function unsetOrderId() : Void {
    this.orderId = null;
  }

  // Returns true if field orderId is set (has been assigned a value) and false otherwise
  public function isSetOrderId() : Bool {
    return this.orderId != null;
  }

  public function get_appStoreCode() : Int {
    return this.appStoreCode;
  }

  public function set_appStoreCode(appStoreCode:Int) : Int {
    this.appStoreCode = appStoreCode;
    this.__isset_appStoreCode = true;
    return this.appStoreCode;
  }

  public function unsetAppStoreCode() : Void {
    this.__isset_appStoreCode = false;
  }

  // Returns true if field appStoreCode is set (has been assigned a value) and false otherwise
  public function isSetAppStoreCode() : Bool {
    return this.__isset_appStoreCode;
  }

  public function get_receipt() : String {
    return this.receipt;
  }

  public function set_receipt(receipt:String) : String {
    this.receipt = receipt;
    return this.receipt;
  }

  public function unsetReceipt() : Void {
    this.receipt = null;
  }

  // Returns true if field receipt is set (has been assigned a value) and false otherwise
  public function isSetReceipt() : Bool {
    return this.receipt != null;
  }

  public function get_signature() : String {
    return this.signature;
  }

  public function set_signature(signature:String) : String {
    this.signature = signature;
    return this.signature;
  }

  public function unsetSignature() : Void {
    this.signature = null;
  }

  // Returns true if field signature is set (has been assigned a value) and false otherwise
  public function isSetSignature() : Bool {
    return this.signature != null;
  }

  public function get_seller() : String {
    return this.seller;
  }

  public function set_seller(seller:String) : String {
    this.seller = seller;
    return this.seller;
  }

  public function unsetSeller() : Void {
    this.seller = null;
  }

  // Returns true if field seller is set (has been assigned a value) and false otherwise
  public function isSetSeller() : Bool {
    return this.seller != null;
  }

  public function get_requestType() : String {
    return this.requestType;
  }

  public function set_requestType(requestType:String) : String {
    this.requestType = requestType;
    return this.requestType;
  }

  public function unsetRequestType() : Void {
    this.requestType = null;
  }

  // Returns true if field requestType is set (has been assigned a value) and false otherwise
  public function isSetRequestType() : Bool {
    return this.requestType != null;
  }

  public function get_ignoreReceipt() : Bool {
    return this.ignoreReceipt;
  }

  public function set_ignoreReceipt(ignoreReceipt:Bool) : Bool {
    this.ignoreReceipt = ignoreReceipt;
    this.__isset_ignoreReceipt = true;
    return this.ignoreReceipt;
  }

  public function unsetIgnoreReceipt() : Void {
    this.__isset_ignoreReceipt = false;
  }

  // Returns true if field ignoreReceipt is set (has been assigned a value) and false otherwise
  public function isSetIgnoreReceipt() : Bool {
    return this.__isset_ignoreReceipt;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case ORDERID_FIELD_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        this.orderId = value;
      }

    case APPSTORECODE_FIELD_ID:
      if (value == null) {
        unsetAppStoreCode();
      } else {
        this.appStoreCode = value;
      }

    case RECEIPT_FIELD_ID:
      if (value == null) {
        unsetReceipt();
      } else {
        this.receipt = value;
      }

    case SIGNATURE_FIELD_ID:
      if (value == null) {
        unsetSignature();
      } else {
        this.signature = value;
      }

    case SELLER_FIELD_ID:
      if (value == null) {
        unsetSeller();
      } else {
        this.seller = value;
      }

    case REQUESTTYPE_FIELD_ID:
      if (value == null) {
        unsetRequestType();
      } else {
        this.requestType = value;
      }

    case IGNORERECEIPT_FIELD_ID:
      if (value == null) {
        unsetIgnoreReceipt();
      } else {
        this.ignoreReceipt = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case ORDERID_FIELD_ID:
      return this.orderId;
    case APPSTORECODE_FIELD_ID:
      return this.appStoreCode;
    case RECEIPT_FIELD_ID:
      return this.receipt;
    case SIGNATURE_FIELD_ID:
      return this.signature;
    case SELLER_FIELD_ID:
      return this.seller;
    case REQUESTTYPE_FIELD_ID:
      return this.requestType;
    case IGNORERECEIPT_FIELD_ID:
      return this.ignoreReceipt;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case ORDERID_FIELD_ID:
      return isSetOrderId();
    case APPSTORECODE_FIELD_ID:
      return isSetAppStoreCode();
    case RECEIPT_FIELD_ID:
      return isSetReceipt();
    case SIGNATURE_FIELD_ID:
      return isSetSignature();
    case SELLER_FIELD_ID:
      return isSetSeller();
    case REQUESTTYPE_FIELD_ID:
      return isSetRequestType();
    case IGNORERECEIPT_FIELD_ID:
      return isSetIgnoreReceipt();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ORDERID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.orderId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case APPSTORECODE_FIELD_ID:
            if (field.type == TType.I32) {
              this.appStoreCode = iprot.readI32();
              this.__isset_appStoreCode = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case RECEIPT_FIELD_ID:
            if (field.type == TType.STRING) {
              this.receipt = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SIGNATURE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.signature = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SELLER_FIELD_ID:
            if (field.type == TType.STRING) {
              this.seller = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case REQUESTTYPE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.requestType = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case IGNORERECEIPT_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.ignoreReceipt = iprot.readBool();
              this.__isset_ignoreReceipt = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(this.orderId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APP_STORE_CODE_FIELD_DESC);
      oprot.writeI32(this.appStoreCode);
      oprot.writeFieldEnd();
      if (this.receipt != null) {
        oprot.writeFieldBegin(RECEIPT_FIELD_DESC);
        oprot.writeString(this.receipt);
        oprot.writeFieldEnd();
      }
      if (this.signature != null) {
        oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
        oprot.writeString(this.signature);
        oprot.writeFieldEnd();
      }
      if (this.seller != null) {
        oprot.writeFieldBegin(SELLER_FIELD_DESC);
        oprot.writeString(this.seller);
        oprot.writeFieldEnd();
      }
      if (this.requestType != null) {
        oprot.writeFieldBegin(REQUEST_TYPE_FIELD_DESC);
        oprot.writeString(this.requestType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IGNORE_RECEIPT_FIELD_DESC);
      oprot.writeBool(this.ignoreReceipt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "CoinPurchaseConfirm(";
    var first : Bool = true;

    ret += "orderId:";
    if (this.orderId == null) {
      ret += "null";
    } else {
      ret += this.orderId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "appStoreCode:";
    var appStoreCode_name : String = .PaymentType.VALUES_TO_NAMES[this.appStoreCode];
    if (appStoreCode_name != null) {
      ret += appStoreCode_name;
      ret += " (";
    }
    ret += this.appStoreCode;
    if (appStoreCode_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "receipt:";
    if (this.receipt == null) {
      ret += "null";
    } else {
      ret += this.receipt;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "signature:";
    if (this.signature == null) {
      ret += "null";
    } else {
      ret += this.signature;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "seller:";
    if (this.seller == null) {
      ret += "null";
    } else {
      ret += this.seller;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "requestType:";
    if (this.requestType == null) {
      ret += "null";
    } else {
      ret += this.requestType;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "ignoreReceipt:";
    ret += this.ignoreReceipt;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetAppStoreCode() && !.PaymentType.VALID_VALUES.contains(appStoreCode)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'appStoreCode' has been assigned the invalid value " + appStoreCode);
    }
  }

}

