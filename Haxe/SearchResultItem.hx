/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SearchResultItem implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SearchResultItem"); };
  static var ID_FIELD_DESC = { new TField("id", TType.STRING, 1); };
  static var ITEM_TYPE_FIELD_DESC = { new TField("ItemType", TType.I32, 2); };
  static var ITEM_FIELD_DESC = { new TField("item", TType.STRUCT, 3); };
  static var TITLE_FIELD_DESC = { new TField("title", TType.STRING, 4); };
  static var SUB1_FIELD_DESC = { new TField("sub1", TType.STRING, 5); };
  static var SUB2_FIELD_DESC = { new TField("sub2", TType.STRING, 6); };
  static var ICON_URL_FIELD_DESC = { new TField("iconUrl", TType.STRING, 7); };
  static var TITLE_LINK_FIELD_DESC = { new TField("titleLink", TType.STRING, 8); };
  static var ICON_LINK_FIELD_DESC = { new TField("iconLink", TType.STRING, 9); };
  static var DISPLAY_TEMPLATE_FIELD_DESC = { new TField("displayTemplate", TType.STRING, 10); };
  static var ADDITIONAL_INFO_FIELD_DESC = { new TField("additionalInfo", TType.LIST, 11); };

  @:isVar
  public var id(get,set) : String;
  @:isVar
  public var ItemType(get,set) : haxe.Int32;
  @:isVar
  public var item(get,set) : SearchItemUnion;
  @:isVar
  public var title(get,set) : String;
  @:isVar
  public var sub1(get,set) : String;
  @:isVar
  public var sub2(get,set) : String;
  @:isVar
  public var iconUrl(get,set) : String;
  @:isVar
  public var titleLink(get,set) : String;
  @:isVar
  public var iconLink(get,set) : String;
  @:isVar
  public var displayTemplate(get,set) : String;
  @:isVar
  public var additionalInfo(get,set) : List< AdditionalInfoItem>;

  inline static var ID_FIELD_ID : Int = 1;
  inline static var ITEMTYPE_FIELD_ID : Int = 2;
  inline static var ITEM_FIELD_ID : Int = 3;
  inline static var TITLE_FIELD_ID : Int = 4;
  inline static var SUB1_FIELD_ID : Int = 5;
  inline static var SUB2_FIELD_ID : Int = 6;
  inline static var ICONURL_FIELD_ID : Int = 7;
  inline static var TITLELINK_FIELD_ID : Int = 8;
  inline static var ICONLINK_FIELD_ID : Int = 9;
  inline static var DISPLAYTEMPLATE_FIELD_ID : Int = 10;
  inline static var ADDITIONALINFO_FIELD_ID : Int = 11;

  private var __isset_ItemType : Bool = false;

  public function new() {
  }

  public function get_id() : String {
    return this.id;
  }

  public function set_id(id:String) : String {
    this.id = id;
    return this.id;
  }

  public function unsetId() : Void {
    this.id = null;
  }

  // Returns true if field id is set (has been assigned a value) and false otherwise
  public function isSetId() : Bool {
    return this.id != null;
  }

  public function get_ItemType() : haxe.Int32 {
    return this.ItemType;
  }

  public function set_ItemType(ItemType:haxe.Int32) : haxe.Int32 {
    this.ItemType = ItemType;
    this.__isset_ItemType = true;
    return this.ItemType;
  }

  public function unsetItemType() : Void {
    this.__isset_ItemType = false;
  }

  // Returns true if field ItemType is set (has been assigned a value) and false otherwise
  public function isSetItemType() : Bool {
    return this.__isset_ItemType;
  }

  public function get_item() : SearchItemUnion {
    return this.item;
  }

  public function set_item(item:SearchItemUnion) : SearchItemUnion {
    this.item = item;
    return this.item;
  }

  public function unsetItem() : Void {
    this.item = null;
  }

  // Returns true if field item is set (has been assigned a value) and false otherwise
  public function isSetItem() : Bool {
    return this.item != null;
  }

  public function get_title() : String {
    return this.title;
  }

  public function set_title(title:String) : String {
    this.title = title;
    return this.title;
  }

  public function unsetTitle() : Void {
    this.title = null;
  }

  // Returns true if field title is set (has been assigned a value) and false otherwise
  public function isSetTitle() : Bool {
    return this.title != null;
  }

  public function get_sub1() : String {
    return this.sub1;
  }

  public function set_sub1(sub1:String) : String {
    this.sub1 = sub1;
    return this.sub1;
  }

  public function unsetSub1() : Void {
    this.sub1 = null;
  }

  // Returns true if field sub1 is set (has been assigned a value) and false otherwise
  public function isSetSub1() : Bool {
    return this.sub1 != null;
  }

  public function get_sub2() : String {
    return this.sub2;
  }

  public function set_sub2(sub2:String) : String {
    this.sub2 = sub2;
    return this.sub2;
  }

  public function unsetSub2() : Void {
    this.sub2 = null;
  }

  // Returns true if field sub2 is set (has been assigned a value) and false otherwise
  public function isSetSub2() : Bool {
    return this.sub2 != null;
  }

  public function get_iconUrl() : String {
    return this.iconUrl;
  }

  public function set_iconUrl(iconUrl:String) : String {
    this.iconUrl = iconUrl;
    return this.iconUrl;
  }

  public function unsetIconUrl() : Void {
    this.iconUrl = null;
  }

  // Returns true if field iconUrl is set (has been assigned a value) and false otherwise
  public function isSetIconUrl() : Bool {
    return this.iconUrl != null;
  }

  public function get_titleLink() : String {
    return this.titleLink;
  }

  public function set_titleLink(titleLink:String) : String {
    this.titleLink = titleLink;
    return this.titleLink;
  }

  public function unsetTitleLink() : Void {
    this.titleLink = null;
  }

  // Returns true if field titleLink is set (has been assigned a value) and false otherwise
  public function isSetTitleLink() : Bool {
    return this.titleLink != null;
  }

  public function get_iconLink() : String {
    return this.iconLink;
  }

  public function set_iconLink(iconLink:String) : String {
    this.iconLink = iconLink;
    return this.iconLink;
  }

  public function unsetIconLink() : Void {
    this.iconLink = null;
  }

  // Returns true if field iconLink is set (has been assigned a value) and false otherwise
  public function isSetIconLink() : Bool {
    return this.iconLink != null;
  }

  public function get_displayTemplate() : String {
    return this.displayTemplate;
  }

  public function set_displayTemplate(displayTemplate:String) : String {
    this.displayTemplate = displayTemplate;
    return this.displayTemplate;
  }

  public function unsetDisplayTemplate() : Void {
    this.displayTemplate = null;
  }

  // Returns true if field displayTemplate is set (has been assigned a value) and false otherwise
  public function isSetDisplayTemplate() : Bool {
    return this.displayTemplate != null;
  }

  public function get_additionalInfo() : List< AdditionalInfoItem> {
    return this.additionalInfo;
  }

  public function set_additionalInfo(additionalInfo:List< AdditionalInfoItem>) : List< AdditionalInfoItem> {
    this.additionalInfo = additionalInfo;
    return this.additionalInfo;
  }

  public function unsetAdditionalInfo() : Void {
    this.additionalInfo = null;
  }

  // Returns true if field additionalInfo is set (has been assigned a value) and false otherwise
  public function isSetAdditionalInfo() : Bool {
    return this.additionalInfo != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case ID_FIELD_ID:
      if (value == null) {
        unsetId();
      } else {
        this.id = value;
      }

    case ITEMTYPE_FIELD_ID:
      if (value == null) {
        unsetItemType();
      } else {
        this.ItemType = value;
      }

    case ITEM_FIELD_ID:
      if (value == null) {
        unsetItem();
      } else {
        this.item = value;
      }

    case TITLE_FIELD_ID:
      if (value == null) {
        unsetTitle();
      } else {
        this.title = value;
      }

    case SUB1_FIELD_ID:
      if (value == null) {
        unsetSub1();
      } else {
        this.sub1 = value;
      }

    case SUB2_FIELD_ID:
      if (value == null) {
        unsetSub2();
      } else {
        this.sub2 = value;
      }

    case ICONURL_FIELD_ID:
      if (value == null) {
        unsetIconUrl();
      } else {
        this.iconUrl = value;
      }

    case TITLELINK_FIELD_ID:
      if (value == null) {
        unsetTitleLink();
      } else {
        this.titleLink = value;
      }

    case ICONLINK_FIELD_ID:
      if (value == null) {
        unsetIconLink();
      } else {
        this.iconLink = value;
      }

    case DISPLAYTEMPLATE_FIELD_ID:
      if (value == null) {
        unsetDisplayTemplate();
      } else {
        this.displayTemplate = value;
      }

    case ADDITIONALINFO_FIELD_ID:
      if (value == null) {
        unsetAdditionalInfo();
      } else {
        this.additionalInfo = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case ID_FIELD_ID:
      return this.id;
    case ITEMTYPE_FIELD_ID:
      return this.ItemType;
    case ITEM_FIELD_ID:
      return this.item;
    case TITLE_FIELD_ID:
      return this.title;
    case SUB1_FIELD_ID:
      return this.sub1;
    case SUB2_FIELD_ID:
      return this.sub2;
    case ICONURL_FIELD_ID:
      return this.iconUrl;
    case TITLELINK_FIELD_ID:
      return this.titleLink;
    case ICONLINK_FIELD_ID:
      return this.iconLink;
    case DISPLAYTEMPLATE_FIELD_ID:
      return this.displayTemplate;
    case ADDITIONALINFO_FIELD_ID:
      return this.additionalInfo;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case ID_FIELD_ID:
      return isSetId();
    case ITEMTYPE_FIELD_ID:
      return isSetItemType();
    case ITEM_FIELD_ID:
      return isSetItem();
    case TITLE_FIELD_ID:
      return isSetTitle();
    case SUB1_FIELD_ID:
      return isSetSub1();
    case SUB2_FIELD_ID:
      return isSetSub2();
    case ICONURL_FIELD_ID:
      return isSetIconUrl();
    case TITLELINK_FIELD_ID:
      return isSetTitleLink();
    case ICONLINK_FIELD_ID:
      return isSetIconLink();
    case DISPLAYTEMPLATE_FIELD_ID:
      return isSetDisplayTemplate();
    case ADDITIONALINFO_FIELD_ID:
      return isSetAdditionalInfo();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.id = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ITEMTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.ItemType = iprot.readI32();
              this.__isset_ItemType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ITEM_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.item = new SearchItemUnion();
              this.item.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TITLE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.title = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SUB1_FIELD_ID:
            if (field.type == TType.STRING) {
              this.sub1 = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SUB2_FIELD_ID:
            if (field.type == TType.STRING) {
              this.sub2 = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ICONURL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.iconUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TITLELINK_FIELD_ID:
            if (field.type == TType.STRING) {
              this.titleLink = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ICONLINK_FIELD_ID:
            if (field.type == TType.STRING) {
              this.iconLink = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DISPLAYTEMPLATE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.displayTemplate = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ADDITIONALINFO_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list73 = iprot.readListBegin();
                this.additionalInfo = new List< AdditionalInfoItem>();
                for( _i74 in 0 ... _list73.size)
                {
                  var _elem75 : AdditionalInfoItem;
                  _elem75 = new AdditionalInfoItem();
                  _elem75.read(iprot);
                  this.additionalInfo.add(_elem75);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
      oprot.writeI32(this.ItemType);
      oprot.writeFieldEnd();
      if (this.item != null) {
        oprot.writeFieldBegin(ITEM_FIELD_DESC);
        this.item.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(this.title);
        oprot.writeFieldEnd();
      }
      if (this.sub1 != null) {
        oprot.writeFieldBegin(SUB1_FIELD_DESC);
        oprot.writeString(this.sub1);
        oprot.writeFieldEnd();
      }
      if (this.sub2 != null) {
        oprot.writeFieldBegin(SUB2_FIELD_DESC);
        oprot.writeString(this.sub2);
        oprot.writeFieldEnd();
      }
      if (this.iconUrl != null) {
        oprot.writeFieldBegin(ICON_URL_FIELD_DESC);
        oprot.writeString(this.iconUrl);
        oprot.writeFieldEnd();
      }
      if (this.titleLink != null) {
        oprot.writeFieldBegin(TITLE_LINK_FIELD_DESC);
        oprot.writeString(this.titleLink);
        oprot.writeFieldEnd();
      }
      if (this.iconLink != null) {
        oprot.writeFieldBegin(ICON_LINK_FIELD_DESC);
        oprot.writeString(this.iconLink);
        oprot.writeFieldEnd();
      }
      if (this.displayTemplate != null) {
        oprot.writeFieldBegin(DISPLAY_TEMPLATE_FIELD_DESC);
        oprot.writeString(this.displayTemplate);
        oprot.writeFieldEnd();
      }
      if (this.additionalInfo != null) {
        oprot.writeFieldBegin(ADDITIONAL_INFO_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.additionalInfo.length));
          for( elem76 in this.additionalInfo)
          {
            elem76.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SearchResultItem(";
    var first : Bool = true;

    ret += "id:";
    if (this.id == null) {
      ret += "null";
    } else {
      ret += this.id;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "ItemType:";
    ret += this.ItemType;
    first = false;
    if (!first) ret +=  ", ";
    ret += "item:";
    if (this.item == null) {
      ret += "null";
    } else {
      ret += this.item;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "title:";
    if (this.title == null) {
      ret += "null";
    } else {
      ret += this.title;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "sub1:";
    if (this.sub1 == null) {
      ret += "null";
    } else {
      ret += this.sub1;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "sub2:";
    if (this.sub2 == null) {
      ret += "null";
    } else {
      ret += this.sub2;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "iconUrl:";
    if (this.iconUrl == null) {
      ret += "null";
    } else {
      ret += this.iconUrl;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "titleLink:";
    if (this.titleLink == null) {
      ret += "null";
    } else {
      ret += this.titleLink;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "iconLink:";
    if (this.iconLink == null) {
      ret += "null";
    } else {
      ret += this.iconLink;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "displayTemplate:";
    if (this.displayTemplate == null) {
      ret += "null";
    } else {
      ret += this.displayTemplate;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "additionalInfo:";
    if (this.additionalInfo == null) {
      ret += "null";
    } else {
      ret += this.additionalInfo;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

