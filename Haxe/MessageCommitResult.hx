/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class MessageCommitResult implements TBase {
  
  static var STRUCT_DESC = { new TStruct("MessageCommitResult"); };
  static var REQUEST_ID_FIELD_DESC = { new TField("requestId", TType.STRING, 1); };
  static var STATE_FIELD_DESC = { new TField("state", TType.I32, 2); };
  static var MESSAGE_STORE_REQUEST_ID_FIELD_DESC = { new TField("messageStoreRequestId", TType.STRING, 3); };
  static var MESSAGE_IDS_FIELD_DESC = { new TField("messageIds", TType.LIST, 4); };
  static var RECEIVER_COUNT_FIELD_DESC = { new TField("receiverCount", TType.I64, 11); };
  static var SUCCESS_COUNT_FIELD_DESC = { new TField("successCount", TType.I64, 12); };
  static var FAIL_COUNT_FIELD_DESC = { new TField("failCount", TType.I64, 13); };
  static var BLOCK_COUNT_FIELD_DESC = { new TField("blockCount", TType.I64, 14); };
  static var UNREGISTERED_COUNT_FIELD_DESC = { new TField("unregisteredCount", TType.I64, 15); };
  static var UNRELATED_COUNT_FIELD_DESC = { new TField("unrelatedCount", TType.I64, 16); };
  static var ERROR_DESCRIPTION_FIELD_DESC = { new TField("errorDescription", TType.STRING, 21); };

  @:isVar
  public var requestId(get,set) : String;
  @:isVar
  public var state(get,set) : Int;
  @:isVar
  public var messageStoreRequestId(get,set) : String;
  @:isVar
  public var messageIds(get,set) : List< String>;
  @:isVar
  public var receiverCount(get,set) : haxe.Int64;
  @:isVar
  public var successCount(get,set) : haxe.Int64;
  @:isVar
  public var failCount(get,set) : haxe.Int64;
  @:isVar
  public var blockCount(get,set) : haxe.Int64;
  @:isVar
  public var unregisteredCount(get,set) : haxe.Int64;
  @:isVar
  public var unrelatedCount(get,set) : haxe.Int64;
  @:isVar
  public var errorDescription(get,set) : String;

  inline static var REQUESTID_FIELD_ID : Int = 1;
  inline static var STATE_FIELD_ID : Int = 2;
  inline static var MESSAGESTOREREQUESTID_FIELD_ID : Int = 3;
  inline static var MESSAGEIDS_FIELD_ID : Int = 4;
  inline static var RECEIVERCOUNT_FIELD_ID : Int = 11;
  inline static var SUCCESSCOUNT_FIELD_ID : Int = 12;
  inline static var FAILCOUNT_FIELD_ID : Int = 13;
  inline static var BLOCKCOUNT_FIELD_ID : Int = 14;
  inline static var UNREGISTEREDCOUNT_FIELD_ID : Int = 15;
  inline static var UNRELATEDCOUNT_FIELD_ID : Int = 16;
  inline static var ERRORDESCRIPTION_FIELD_ID : Int = 21;

  private var __isset_state : Bool = false;
  private var __isset_receiverCount : Bool = false;
  private var __isset_successCount : Bool = false;
  private var __isset_failCount : Bool = false;
  private var __isset_blockCount : Bool = false;
  private var __isset_unregisteredCount : Bool = false;
  private var __isset_unrelatedCount : Bool = false;

  public function new() {
  }

  public function get_requestId() : String {
    return this.requestId;
  }

  public function set_requestId(requestId:String) : String {
    this.requestId = requestId;
    return this.requestId;
  }

  public function unsetRequestId() : Void {
    this.requestId = null;
  }

  // Returns true if field requestId is set (has been assigned a value) and false otherwise
  public function isSetRequestId() : Bool {
    return this.requestId != null;
  }

  public function get_state() : Int {
    return this.state;
  }

  public function set_state(state:Int) : Int {
    this.state = state;
    this.__isset_state = true;
    return this.state;
  }

  public function unsetState() : Void {
    this.__isset_state = false;
  }

  // Returns true if field state is set (has been assigned a value) and false otherwise
  public function isSetState() : Bool {
    return this.__isset_state;
  }

  public function get_messageStoreRequestId() : String {
    return this.messageStoreRequestId;
  }

  public function set_messageStoreRequestId(messageStoreRequestId:String) : String {
    this.messageStoreRequestId = messageStoreRequestId;
    return this.messageStoreRequestId;
  }

  public function unsetMessageStoreRequestId() : Void {
    this.messageStoreRequestId = null;
  }

  // Returns true if field messageStoreRequestId is set (has been assigned a value) and false otherwise
  public function isSetMessageStoreRequestId() : Bool {
    return this.messageStoreRequestId != null;
  }

  public function get_messageIds() : List< String> {
    return this.messageIds;
  }

  public function set_messageIds(messageIds:List< String>) : List< String> {
    this.messageIds = messageIds;
    return this.messageIds;
  }

  public function unsetMessageIds() : Void {
    this.messageIds = null;
  }

  // Returns true if field messageIds is set (has been assigned a value) and false otherwise
  public function isSetMessageIds() : Bool {
    return this.messageIds != null;
  }

  public function get_receiverCount() : haxe.Int64 {
    return this.receiverCount;
  }

  public function set_receiverCount(receiverCount:haxe.Int64) : haxe.Int64 {
    this.receiverCount = receiverCount;
    this.__isset_receiverCount = true;
    return this.receiverCount;
  }

  public function unsetReceiverCount() : Void {
    this.__isset_receiverCount = false;
  }

  // Returns true if field receiverCount is set (has been assigned a value) and false otherwise
  public function isSetReceiverCount() : Bool {
    return this.__isset_receiverCount;
  }

  public function get_successCount() : haxe.Int64 {
    return this.successCount;
  }

  public function set_successCount(successCount:haxe.Int64) : haxe.Int64 {
    this.successCount = successCount;
    this.__isset_successCount = true;
    return this.successCount;
  }

  public function unsetSuccessCount() : Void {
    this.__isset_successCount = false;
  }

  // Returns true if field successCount is set (has been assigned a value) and false otherwise
  public function isSetSuccessCount() : Bool {
    return this.__isset_successCount;
  }

  public function get_failCount() : haxe.Int64 {
    return this.failCount;
  }

  public function set_failCount(failCount:haxe.Int64) : haxe.Int64 {
    this.failCount = failCount;
    this.__isset_failCount = true;
    return this.failCount;
  }

  public function unsetFailCount() : Void {
    this.__isset_failCount = false;
  }

  // Returns true if field failCount is set (has been assigned a value) and false otherwise
  public function isSetFailCount() : Bool {
    return this.__isset_failCount;
  }

  public function get_blockCount() : haxe.Int64 {
    return this.blockCount;
  }

  public function set_blockCount(blockCount:haxe.Int64) : haxe.Int64 {
    this.blockCount = blockCount;
    this.__isset_blockCount = true;
    return this.blockCount;
  }

  public function unsetBlockCount() : Void {
    this.__isset_blockCount = false;
  }

  // Returns true if field blockCount is set (has been assigned a value) and false otherwise
  public function isSetBlockCount() : Bool {
    return this.__isset_blockCount;
  }

  public function get_unregisteredCount() : haxe.Int64 {
    return this.unregisteredCount;
  }

  public function set_unregisteredCount(unregisteredCount:haxe.Int64) : haxe.Int64 {
    this.unregisteredCount = unregisteredCount;
    this.__isset_unregisteredCount = true;
    return this.unregisteredCount;
  }

  public function unsetUnregisteredCount() : Void {
    this.__isset_unregisteredCount = false;
  }

  // Returns true if field unregisteredCount is set (has been assigned a value) and false otherwise
  public function isSetUnregisteredCount() : Bool {
    return this.__isset_unregisteredCount;
  }

  public function get_unrelatedCount() : haxe.Int64 {
    return this.unrelatedCount;
  }

  public function set_unrelatedCount(unrelatedCount:haxe.Int64) : haxe.Int64 {
    this.unrelatedCount = unrelatedCount;
    this.__isset_unrelatedCount = true;
    return this.unrelatedCount;
  }

  public function unsetUnrelatedCount() : Void {
    this.__isset_unrelatedCount = false;
  }

  // Returns true if field unrelatedCount is set (has been assigned a value) and false otherwise
  public function isSetUnrelatedCount() : Bool {
    return this.__isset_unrelatedCount;
  }

  public function get_errorDescription() : String {
    return this.errorDescription;
  }

  public function set_errorDescription(errorDescription:String) : String {
    this.errorDescription = errorDescription;
    return this.errorDescription;
  }

  public function unsetErrorDescription() : Void {
    this.errorDescription = null;
  }

  // Returns true if field errorDescription is set (has been assigned a value) and false otherwise
  public function isSetErrorDescription() : Bool {
    return this.errorDescription != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case REQUESTID_FIELD_ID:
      if (value == null) {
        unsetRequestId();
      } else {
        this.requestId = value;
      }

    case STATE_FIELD_ID:
      if (value == null) {
        unsetState();
      } else {
        this.state = value;
      }

    case MESSAGESTOREREQUESTID_FIELD_ID:
      if (value == null) {
        unsetMessageStoreRequestId();
      } else {
        this.messageStoreRequestId = value;
      }

    case MESSAGEIDS_FIELD_ID:
      if (value == null) {
        unsetMessageIds();
      } else {
        this.messageIds = value;
      }

    case RECEIVERCOUNT_FIELD_ID:
      if (value == null) {
        unsetReceiverCount();
      } else {
        this.receiverCount = value;
      }

    case SUCCESSCOUNT_FIELD_ID:
      if (value == null) {
        unsetSuccessCount();
      } else {
        this.successCount = value;
      }

    case FAILCOUNT_FIELD_ID:
      if (value == null) {
        unsetFailCount();
      } else {
        this.failCount = value;
      }

    case BLOCKCOUNT_FIELD_ID:
      if (value == null) {
        unsetBlockCount();
      } else {
        this.blockCount = value;
      }

    case UNREGISTEREDCOUNT_FIELD_ID:
      if (value == null) {
        unsetUnregisteredCount();
      } else {
        this.unregisteredCount = value;
      }

    case UNRELATEDCOUNT_FIELD_ID:
      if (value == null) {
        unsetUnrelatedCount();
      } else {
        this.unrelatedCount = value;
      }

    case ERRORDESCRIPTION_FIELD_ID:
      if (value == null) {
        unsetErrorDescription();
      } else {
        this.errorDescription = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case REQUESTID_FIELD_ID:
      return this.requestId;
    case STATE_FIELD_ID:
      return this.state;
    case MESSAGESTOREREQUESTID_FIELD_ID:
      return this.messageStoreRequestId;
    case MESSAGEIDS_FIELD_ID:
      return this.messageIds;
    case RECEIVERCOUNT_FIELD_ID:
      return this.receiverCount;
    case SUCCESSCOUNT_FIELD_ID:
      return this.successCount;
    case FAILCOUNT_FIELD_ID:
      return this.failCount;
    case BLOCKCOUNT_FIELD_ID:
      return this.blockCount;
    case UNREGISTEREDCOUNT_FIELD_ID:
      return this.unregisteredCount;
    case UNRELATEDCOUNT_FIELD_ID:
      return this.unrelatedCount;
    case ERRORDESCRIPTION_FIELD_ID:
      return this.errorDescription;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case REQUESTID_FIELD_ID:
      return isSetRequestId();
    case STATE_FIELD_ID:
      return isSetState();
    case MESSAGESTOREREQUESTID_FIELD_ID:
      return isSetMessageStoreRequestId();
    case MESSAGEIDS_FIELD_ID:
      return isSetMessageIds();
    case RECEIVERCOUNT_FIELD_ID:
      return isSetReceiverCount();
    case SUCCESSCOUNT_FIELD_ID:
      return isSetSuccessCount();
    case FAILCOUNT_FIELD_ID:
      return isSetFailCount();
    case BLOCKCOUNT_FIELD_ID:
      return isSetBlockCount();
    case UNREGISTEREDCOUNT_FIELD_ID:
      return isSetUnregisteredCount();
    case UNRELATEDCOUNT_FIELD_ID:
      return isSetUnrelatedCount();
    case ERRORDESCRIPTION_FIELD_ID:
      return isSetErrorDescription();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case REQUESTID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case STATE_FIELD_ID:
            if (field.type == TType.I32) {
              this.state = iprot.readI32();
              this.__isset_state = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MESSAGESTOREREQUESTID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.messageStoreRequestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MESSAGEIDS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list0 = iprot.readListBegin();
                this.messageIds = new List< String>();
                for( _i1 in 0 ... _list0.size)
                {
                  var _elem2 : String;
                  _elem2 = iprot.readString();
                  this.messageIds.add(_elem2);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case RECEIVERCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.receiverCount = iprot.readI64();
              this.__isset_receiverCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SUCCESSCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.successCount = iprot.readI64();
              this.__isset_successCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case FAILCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.failCount = iprot.readI64();
              this.__isset_failCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case BLOCKCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.blockCount = iprot.readI64();
              this.__isset_blockCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case UNREGISTEREDCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.unregisteredCount = iprot.readI64();
              this.__isset_unregisteredCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case UNRELATEDCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.unrelatedCount = iprot.readI64();
              this.__isset_unrelatedCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ERRORDESCRIPTION_FIELD_ID:
            if (field.type == TType.STRING) {
              this.errorDescription = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(this.state);
      oprot.writeFieldEnd();
      if (this.messageStoreRequestId != null) {
        oprot.writeFieldBegin(MESSAGE_STORE_REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.messageStoreRequestId);
        oprot.writeFieldEnd();
      }
      if (this.messageIds != null) {
        oprot.writeFieldBegin(MESSAGE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.messageIds.length));
          for( elem3 in this.messageIds)
          {
            oprot.writeString(elem3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECEIVER_COUNT_FIELD_DESC);
      oprot.writeI64(this.receiverCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUCCESS_COUNT_FIELD_DESC);
      oprot.writeI64(this.successCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAIL_COUNT_FIELD_DESC);
      oprot.writeI64(this.failCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCK_COUNT_FIELD_DESC);
      oprot.writeI64(this.blockCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNREGISTERED_COUNT_FIELD_DESC);
      oprot.writeI64(this.unregisteredCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNRELATED_COUNT_FIELD_DESC);
      oprot.writeI64(this.unrelatedCount);
      oprot.writeFieldEnd();
      if (this.errorDescription != null) {
        oprot.writeFieldBegin(ERROR_DESCRIPTION_FIELD_DESC);
        oprot.writeString(this.errorDescription);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "MessageCommitResult(";
    var first : Bool = true;

    ret += "requestId:";
    if (this.requestId == null) {
      ret += "null";
    } else {
      ret += this.requestId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "state:";
    var state_name : String = .BuddyResultState.VALUES_TO_NAMES[this.state];
    if (state_name != null) {
      ret += state_name;
      ret += " (";
    }
    ret += this.state;
    if (state_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "messageStoreRequestId:";
    if (this.messageStoreRequestId == null) {
      ret += "null";
    } else {
      ret += this.messageStoreRequestId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "messageIds:";
    if (this.messageIds == null) {
      ret += "null";
    } else {
      ret += this.messageIds;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "receiverCount:";
    ret += this.receiverCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "successCount:";
    ret += this.successCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "failCount:";
    ret += this.failCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "blockCount:";
    ret += this.blockCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "unregisteredCount:";
    ret += this.unregisteredCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "unrelatedCount:";
    ret += this.unrelatedCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "errorDescription:";
    if (this.errorDescription == null) {
      ret += "null";
    } else {
      ret += this.errorDescription;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetState() && !.BuddyResultState.VALID_VALUES.contains(state)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'state' has been assigned the invalid value " + state);
    }
  }

}

