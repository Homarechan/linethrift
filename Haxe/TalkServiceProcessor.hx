/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class TalkServiceProcessor implements TProcessor {

  private var TalkService_iface_ : TalkService;
  private var PROCESS_MAP = new StringMap< Int->TProtocol->TProtocol->Void >();

  public function new( iface : TalkService)
  {
    TalkService_iface_ = iface;
    PROCESS_MAP.set("getChatRoomAnnouncementsBulk", getChatRoomAnnouncementsBulk());
    PROCESS_MAP.set("getChatRoomAnnouncements", getChatRoomAnnouncements());
    PROCESS_MAP.set("createChatRoomAnnouncement", createChatRoomAnnouncement());
    PROCESS_MAP.set("removeChatRoomAnnouncement", removeChatRoomAnnouncement());
    PROCESS_MAP.set("unsendMessage", unsendMessage());
    PROCESS_MAP.set("getGroupWithoutMembers", getGroupWithoutMembers());
    PROCESS_MAP.set("requestResendMessage", requestResendMessage());
    PROCESS_MAP.set("respondResendMessage", respondResendMessage());
    PROCESS_MAP.set("acceptGroupInvitation", acceptGroupInvitation());
    PROCESS_MAP.set("acceptGroupInvitationByTicket", acceptGroupInvitationByTicket());
    PROCESS_MAP.set("acceptProximityMatches", acceptProximityMatches());
    PROCESS_MAP.set("acquireCallRoute", acquireCallRoute());
    PROCESS_MAP.set("acquireCallTicket", acquireCallTicket());
    PROCESS_MAP.set("acquireEncryptedAccessToken", acquireEncryptedAccessToken());
    PROCESS_MAP.set("addSnsId", addSnsId());
    PROCESS_MAP.set("blockContact", blockContact());
    PROCESS_MAP.set("blockRecommendation", blockRecommendation());
    PROCESS_MAP.set("cancelGroupInvitation", cancelGroupInvitation());
    PROCESS_MAP.set("changeVerificationMethod", changeVerificationMethod());
    PROCESS_MAP.set("clearIdentityCredential", clearIdentityCredential());
    PROCESS_MAP.set("clearMessageBox", clearMessageBox());
    PROCESS_MAP.set("closeProximityMatch", closeProximityMatch());
    PROCESS_MAP.set("commitSendMessage", commitSendMessage());
    PROCESS_MAP.set("commitSendMessages", commitSendMessages());
    PROCESS_MAP.set("commitUpdateProfile", commitUpdateProfile());
    PROCESS_MAP.set("confirmEmail", confirmEmail());
    PROCESS_MAP.set("createGroup", createGroup());
    PROCESS_MAP.set("createQrcodeBase64Image", createQrcodeBase64Image());
    PROCESS_MAP.set("createRoom", createRoom());
    PROCESS_MAP.set("createSession", createSession());
    PROCESS_MAP.set("fetchAnnouncements", fetchAnnouncements());
    PROCESS_MAP.set("fetchMessages", fetchMessages());
    PROCESS_MAP.set("fetchOperations", fetchOperations());
    PROCESS_MAP.set("fetchOps", fetchOps());
    PROCESS_MAP.set("findAndAddContactsByEmail", findAndAddContactsByEmail());
    PROCESS_MAP.set("findAndAddContactsByMid", findAndAddContactsByMid());
    PROCESS_MAP.set("findGroupByTicketV2", findGroupByTicketV2());
    PROCESS_MAP.set("findAndAddContactsByPhone", findAndAddContactsByPhone());
    PROCESS_MAP.set("getFriendRequests", getFriendRequests());
    PROCESS_MAP.set("removeFriendRequest", removeFriendRequest());
    PROCESS_MAP.set("findAndAddContactsByUserid", findAndAddContactsByUserid());
    PROCESS_MAP.set("findContactByUserid", findContactByUserid());
    PROCESS_MAP.set("findContactByUserTicket", findContactByUserTicket());
    PROCESS_MAP.set("findContactsByEmail", findContactsByEmail());
    PROCESS_MAP.set("findContactsByPhone", findContactsByPhone());
    PROCESS_MAP.set("findSnsIdUserStatus", findSnsIdUserStatus());
    PROCESS_MAP.set("finishUpdateVerification", finishUpdateVerification());
    PROCESS_MAP.set("generateUserTicket", generateUserTicket());
    PROCESS_MAP.set("destroyMessage", destroyMessage());
    PROCESS_MAP.set("getAcceptedProximityMatches", getAcceptedProximityMatches());
    PROCESS_MAP.set("getActiveBuddySubscriberIds", getActiveBuddySubscriberIds());
    PROCESS_MAP.set("getAllContactIds", getAllContactIds());
    PROCESS_MAP.set("getAuthQrcode", getAuthQrcode());
    PROCESS_MAP.set("getBlockedContactIds", getBlockedContactIds());
    PROCESS_MAP.set("registerWithPhoneNumber", registerWithPhoneNumber());
    PROCESS_MAP.set("registerWithPhoneNumberAndPassword", registerWithPhoneNumberAndPassword());
    PROCESS_MAP.set("getAnalyticsInfo", getAnalyticsInfo());
    PROCESS_MAP.set("reportClientStatistics", reportClientStatistics());
    PROCESS_MAP.set("verifyPhoneNumberForLogin", verifyPhoneNumberForLogin());
    PROCESS_MAP.set("verifyPhoneNumber", verifyPhoneNumber());
    PROCESS_MAP.set("getBlockedContactIdsByRange", getBlockedContactIdsByRange());
    PROCESS_MAP.set("getBlockedRecommendationIds", getBlockedRecommendationIds());
    PROCESS_MAP.set("getBuddyBlockerIds", getBuddyBlockerIds());
    PROCESS_MAP.set("getBuddyLocation", getBuddyLocation());
    PROCESS_MAP.set("getCompactContactsModifiedSince", getCompactContactsModifiedSince());
    PROCESS_MAP.set("getCompactGroup", getCompactGroup());
    PROCESS_MAP.set("getCompactRoom", getCompactRoom());
    PROCESS_MAP.set("getContact", getContact());
    PROCESS_MAP.set("getContacts", getContacts());
    PROCESS_MAP.set("getContactWithFriendRequestStatus", getContactWithFriendRequestStatus());
    PROCESS_MAP.set("getCountryWithRequestIp", getCountryWithRequestIp());
    PROCESS_MAP.set("getFavoriteMids", getFavoriteMids());
    PROCESS_MAP.set("getGroup", getGroup());
    PROCESS_MAP.set("getGroupIdsInvited", getGroupIdsInvited());
    PROCESS_MAP.set("getGroupIdsJoined", getGroupIdsJoined());
    PROCESS_MAP.set("getGroups", getGroups());
    PROCESS_MAP.set("getHiddenContactMids", getHiddenContactMids());
    PROCESS_MAP.set("getIdentityIdentifier", getIdentityIdentifier());
    PROCESS_MAP.set("getLastAnnouncementIndex", getLastAnnouncementIndex());
    PROCESS_MAP.set("getLastOpRevision", getLastOpRevision());
    PROCESS_MAP.set("getSuggestRevisions", getSuggestRevisions());
    PROCESS_MAP.set("getPreviousMessagesV2WithReadCount", getPreviousMessagesV2WithReadCount());
    PROCESS_MAP.set("getMessageBox", getMessageBox());
    PROCESS_MAP.set("getMessageBoxCompactWrapUp", getMessageBoxCompactWrapUp());
    PROCESS_MAP.set("getMessageBoxCompactWrapUpList", getMessageBoxCompactWrapUpList());
    PROCESS_MAP.set("getMessageBoxList", getMessageBoxList());
    PROCESS_MAP.set("getMessageBoxListByStatus", getMessageBoxListByStatus());
    PROCESS_MAP.set("getMessageBoxWrapUp", getMessageBoxWrapUp());
    PROCESS_MAP.set("getMessageBoxWrapUpList", getMessageBoxWrapUpList());
    PROCESS_MAP.set("getMessagesBySequenceNumber", getMessagesBySequenceNumber());
    PROCESS_MAP.set("getNextMessages", getNextMessages());
    PROCESS_MAP.set("getNotificationPolicy", getNotificationPolicy());
    PROCESS_MAP.set("getPreviousMessages", getPreviousMessages());
    PROCESS_MAP.set("getProfile", getProfile());
    PROCESS_MAP.set("getProximityMatchCandidateList", getProximityMatchCandidateList());
    PROCESS_MAP.set("getProximityMatchCandidates", getProximityMatchCandidates());
    PROCESS_MAP.set("getRecentMessages", getRecentMessages());
    PROCESS_MAP.set("getRecommendationIds", getRecommendationIds());
    PROCESS_MAP.set("getRoom", getRoom());
    PROCESS_MAP.set("getRSAKeyInfo", getRSAKeyInfo());
    PROCESS_MAP.set("getServerTime", getServerTime());
    PROCESS_MAP.set("getSessions", getSessions());
    PROCESS_MAP.set("getSettings", getSettings());
    PROCESS_MAP.set("getGroupsV2", getGroupsV2());
    PROCESS_MAP.set("getSettingsAttributes", getSettingsAttributes());
    PROCESS_MAP.set("getSystemConfiguration", getSystemConfiguration());
    PROCESS_MAP.set("getUserTicket", getUserTicket());
    PROCESS_MAP.set("getWapInvitation", getWapInvitation());
    PROCESS_MAP.set("invalidateUserTicket", invalidateUserTicket());
    PROCESS_MAP.set("inviteFriendsBySms", inviteFriendsBySms());
    PROCESS_MAP.set("inviteIntoGroup", inviteIntoGroup());
    PROCESS_MAP.set("inviteIntoRoom", inviteIntoRoom());
    PROCESS_MAP.set("inviteViaEmail", inviteViaEmail());
    PROCESS_MAP.set("isIdentityIdentifierAvailable", isIdentityIdentifierAvailable());
    PROCESS_MAP.set("isUseridAvailable", isUseridAvailable());
    PROCESS_MAP.set("kickoutFromGroup", kickoutFromGroup());
    PROCESS_MAP.set("reissueGroupTicket", reissueGroupTicket());
    PROCESS_MAP.set("findGroupByTicket", findGroupByTicket());
    PROCESS_MAP.set("leaveGroup", leaveGroup());
    PROCESS_MAP.set("leaveRoom", leaveRoom());
    PROCESS_MAP.set("loginWithIdentityCredential", loginWithIdentityCredential());
    PROCESS_MAP.set("loginWithIdentityCredentialForCertificate", loginWithIdentityCredentialForCertificate());
    PROCESS_MAP.set("loginWithVerifier", loginWithVerifier());
    PROCESS_MAP.set("loginWithVerifierForCerificate", loginWithVerifierForCerificate());
    PROCESS_MAP.set("loginWithVerifierForCertificate", loginWithVerifierForCertificate());
    PROCESS_MAP.set("logout", logout());
    PROCESS_MAP.set("logoutSession", logoutSession());
    PROCESS_MAP.set("noop", noop());
    PROCESS_MAP.set("notifiedRedirect", notifiedRedirect());
    PROCESS_MAP.set("notifyBuddyOnAir", notifyBuddyOnAir());
    PROCESS_MAP.set("notifyIndividualEvent", notifyIndividualEvent());
    PROCESS_MAP.set("notifyInstalled", notifyInstalled());
    PROCESS_MAP.set("notifyRegistrationComplete", notifyRegistrationComplete());
    PROCESS_MAP.set("notifySleep", notifySleep());
    PROCESS_MAP.set("notifyUpdated", notifyUpdated());
    PROCESS_MAP.set("openProximityMatch", openProximityMatch());
    PROCESS_MAP.set("registerBuddyUser", registerBuddyUser());
    PROCESS_MAP.set("registerBuddyUserid", registerBuddyUserid());
    PROCESS_MAP.set("registerDevice", registerDevice());
    PROCESS_MAP.set("registerDeviceWithIdentityCredential", registerDeviceWithIdentityCredential());
    PROCESS_MAP.set("registerDeviceWithoutPhoneNumber", registerDeviceWithoutPhoneNumber());
    PROCESS_MAP.set("registerDeviceWithoutPhoneNumberWithIdentityCredential", registerDeviceWithoutPhoneNumberWithIdentityCredential());
    PROCESS_MAP.set("registerUserid", registerUserid());
    PROCESS_MAP.set("registerWapDevice", registerWapDevice());
    PROCESS_MAP.set("registerWithExistingSnsIdAndIdentityCredential", registerWithExistingSnsIdAndIdentityCredential());
    PROCESS_MAP.set("registerWithSnsId", registerWithSnsId());
    PROCESS_MAP.set("registerWithSnsIdAndIdentityCredential", registerWithSnsIdAndIdentityCredential());
    PROCESS_MAP.set("reissueDeviceCredential", reissueDeviceCredential());
    PROCESS_MAP.set("reissueUserTicket", reissueUserTicket());
    PROCESS_MAP.set("getMessageReadRange", getMessageReadRange());
    PROCESS_MAP.set("rejectGroupInvitation", rejectGroupInvitation());
    PROCESS_MAP.set("releaseSession", releaseSession());
    PROCESS_MAP.set("removeAllMessages", removeAllMessages());
    PROCESS_MAP.set("removeBuddyLocation", removeBuddyLocation());
    PROCESS_MAP.set("removeMessage", removeMessage());
    PROCESS_MAP.set("makeUserAddMyselfAsContact", makeUserAddMyselfAsContact());
    PROCESS_MAP.set("removeMessageFromMyHome", removeMessageFromMyHome());
    PROCESS_MAP.set("removeSnsId", removeSnsId());
    PROCESS_MAP.set("report", report());
    PROCESS_MAP.set("reportContacts", reportContacts());
    PROCESS_MAP.set("reportGroups", reportGroups());
    PROCESS_MAP.set("reportProfile", reportProfile());
    PROCESS_MAP.set("reportRooms", reportRooms());
    PROCESS_MAP.set("findAndAddContactByMetaTag", findAndAddContactByMetaTag());
    PROCESS_MAP.set("reportSettings", reportSettings());
    PROCESS_MAP.set("reportSpam", reportSpam());
    PROCESS_MAP.set("reportSpammer", reportSpammer());
    PROCESS_MAP.set("requestAccountPasswordReset", requestAccountPasswordReset());
    PROCESS_MAP.set("requestEmailConfirmation", requestEmailConfirmation());
    PROCESS_MAP.set("requestIdentityUnbind", requestIdentityUnbind());
    PROCESS_MAP.set("resendEmailConfirmation", resendEmailConfirmation());
    PROCESS_MAP.set("resendPinCode", resendPinCode());
    PROCESS_MAP.set("resendPinCodeBySMS", resendPinCodeBySMS());
    PROCESS_MAP.set("sendChatChecked", sendChatChecked());
    PROCESS_MAP.set("sendMessageAwaitCommit", sendMessageAwaitCommit());
    PROCESS_MAP.set("sendChatRemoved", sendChatRemoved());
    PROCESS_MAP.set("sendContentPreviewUpdated", sendContentPreviewUpdated());
    PROCESS_MAP.set("sendContentReceipt", sendContentReceipt());
    PROCESS_MAP.set("sendDummyPush", sendDummyPush());
    PROCESS_MAP.set("removeE2EEPublicKey", removeE2EEPublicKey());
    PROCESS_MAP.set("negotiateE2EEPublicKey", negotiateE2EEPublicKey());
    PROCESS_MAP.set("getE2EEPublicKey", getE2EEPublicKey());
    PROCESS_MAP.set("requestE2EEKeyExchange", requestE2EEKeyExchange());
    PROCESS_MAP.set("getLastE2EEPublicKeys", getLastE2EEPublicKeys());
    PROCESS_MAP.set("registerE2EEPublicKey", registerE2EEPublicKey());
    PROCESS_MAP.set("getE2EEPublicKeys", getE2EEPublicKeys());
    PROCESS_MAP.set("getE2EEPublicKeysEx", getE2EEPublicKeysEx());
    PROCESS_MAP.set("getReadMessageOpsInBulk", getReadMessageOpsInBulk());
    PROCESS_MAP.set("sendEvent", sendEvent());
    PROCESS_MAP.set("sendMessage", sendMessage());
    PROCESS_MAP.set("sendMessageIgnored", sendMessageIgnored());
    PROCESS_MAP.set("sendMessageReceipt", sendMessageReceipt());
    PROCESS_MAP.set("findContactByMetaTag", findContactByMetaTag());
    PROCESS_MAP.set("sendMessageToMyHome", sendMessageToMyHome());
    PROCESS_MAP.set("setBuddyLocation", setBuddyLocation());
    PROCESS_MAP.set("setIdentityCredential", setIdentityCredential());
    PROCESS_MAP.set("setNotificationsEnabled", setNotificationsEnabled());
    PROCESS_MAP.set("startUpdateVerification", startUpdateVerification());
    PROCESS_MAP.set("startVerification", startVerification());
    PROCESS_MAP.set("updateGroupPreferenceAttribute", updateGroupPreferenceAttribute());
    PROCESS_MAP.set("createRoomV2", createRoomV2());
    PROCESS_MAP.set("storeUpdateProfileAttribute", storeUpdateProfileAttribute());
    PROCESS_MAP.set("syncContactBySnsIds", syncContactBySnsIds());
    PROCESS_MAP.set("syncContacts", syncContacts());
    PROCESS_MAP.set("trySendMessage", trySendMessage());
    PROCESS_MAP.set("getNextMessagesV2", getNextMessagesV2());
    PROCESS_MAP.set("getMessageBoxCompactWrapUpV2", getMessageBoxCompactWrapUpV2());
    PROCESS_MAP.set("getRecentMessagesV2", getRecentMessagesV2());
    PROCESS_MAP.set("validateContactsOnBot", validateContactsOnBot());
    PROCESS_MAP.set("tryFriendRequest", tryFriendRequest());
    PROCESS_MAP.set("unblockContact", unblockContact());
    PROCESS_MAP.set("unblockRecommendation", unblockRecommendation());
    PROCESS_MAP.set("unregisterUserAndDevice", unregisterUserAndDevice());
    PROCESS_MAP.set("updateApnsDeviceToken", updateApnsDeviceToken());
    PROCESS_MAP.set("updateBuddySetting", updateBuddySetting());
    PROCESS_MAP.set("updateC2DMRegistrationId", updateC2DMRegistrationId());
    PROCESS_MAP.set("updateContactSetting", updateContactSetting());
    PROCESS_MAP.set("updateCustomModeSettings", updateCustomModeSettings());
    PROCESS_MAP.set("updateDeviceInfo", updateDeviceInfo());
    PROCESS_MAP.set("updateGroup", updateGroup());
    PROCESS_MAP.set("updateNotificationToken", updateNotificationToken());
    PROCESS_MAP.set("updateNotificationTokenWithBytes", updateNotificationTokenWithBytes());
    PROCESS_MAP.set("updateProfile", updateProfile());
    PROCESS_MAP.set("updateProfileAttribute", updateProfileAttribute());
    PROCESS_MAP.set("updateRegion", updateRegion());
    PROCESS_MAP.set("updateSettings", updateSettings());
    PROCESS_MAP.set("updateSettings2", updateSettings2());
    PROCESS_MAP.set("updateSettingsAttribute", updateSettingsAttribute());
    PROCESS_MAP.set("updateSettingsAttributes", updateSettingsAttributes());
    PROCESS_MAP.set("verifyIdentityCredential", verifyIdentityCredential());
    PROCESS_MAP.set("verifyIdentityCredentialWithResult", verifyIdentityCredentialWithResult());
    PROCESS_MAP.set("verifyPhone", verifyPhone());
    PROCESS_MAP.set("verifyQrcode", verifyQrcode());
  }

  public function process( iprot : TProtocol, oprot : TProtocol) : Bool
  {
    var msg : TMessage = iprot.readMessageBegin();
    var fn  = PROCESS_MAP.get(msg.name);
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      var x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
      return true;
    }
    fn( msg.seqid, iprot, oprot);
    return true;
  }

  private function getChatRoomAnnouncementsBulk() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetChatRoomAnnouncementsBulk_args = new GetChatRoomAnnouncementsBulk_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetChatRoomAnnouncementsBulk_result = new GetChatRoomAnnouncementsBulk_result();
      try {
        result.success = TalkService_iface_.getChatRoomAnnouncementsBulk(args.chatRoomMids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getChatRoomAnnouncementsBulk", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getChatRoomAnnouncementsBulk");
        oprot.writeMessageBegin(new TMessage("getChatRoomAnnouncementsBulk", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getChatRoomAnnouncementsBulk", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getChatRoomAnnouncements() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetChatRoomAnnouncements_args = new GetChatRoomAnnouncements_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetChatRoomAnnouncements_result = new GetChatRoomAnnouncements_result();
      try {
        result.success = TalkService_iface_.getChatRoomAnnouncements(args.chatRoomMid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getChatRoomAnnouncements", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getChatRoomAnnouncements");
        oprot.writeMessageBegin(new TMessage("getChatRoomAnnouncements", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getChatRoomAnnouncements", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function createChatRoomAnnouncement() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : CreateChatRoomAnnouncement_args = new CreateChatRoomAnnouncement_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : CreateChatRoomAnnouncement_result = new CreateChatRoomAnnouncement_result();
      try {
        result.success = TalkService_iface_.createChatRoomAnnouncement(args.reqSeq, args.chatRoomMid, args.type, args.contents);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing createChatRoomAnnouncement", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createChatRoomAnnouncement");
        oprot.writeMessageBegin(new TMessage("createChatRoomAnnouncement", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("createChatRoomAnnouncement", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function removeChatRoomAnnouncement() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RemoveChatRoomAnnouncement_args = new RemoveChatRoomAnnouncement_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RemoveChatRoomAnnouncement_result = new RemoveChatRoomAnnouncement_result();
      try {
        TalkService_iface_.removeChatRoomAnnouncement(args.reqSeq, args.chatRoomMid, args.announcementSeq);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing removeChatRoomAnnouncement", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeChatRoomAnnouncement");
        oprot.writeMessageBegin(new TMessage("removeChatRoomAnnouncement", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("removeChatRoomAnnouncement", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function unsendMessage() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UnsendMessage_args = new UnsendMessage_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UnsendMessage_result = new UnsendMessage_result();
      try {
        TalkService_iface_.unsendMessage(args.seq, args.messageId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing unsendMessage", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing unsendMessage");
        oprot.writeMessageBegin(new TMessage("unsendMessage", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("unsendMessage", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getGroupWithoutMembers() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetGroupWithoutMembers_args = new GetGroupWithoutMembers_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetGroupWithoutMembers_result = new GetGroupWithoutMembers_result();
      try {
        result.success = TalkService_iface_.getGroupWithoutMembers(args.groupId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getGroupWithoutMembers", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupWithoutMembers");
        oprot.writeMessageBegin(new TMessage("getGroupWithoutMembers", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getGroupWithoutMembers", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function requestResendMessage() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RequestResendMessage_args = new RequestResendMessage_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RequestResendMessage_result = new RequestResendMessage_result();
      try {
        TalkService_iface_.requestResendMessage(args.reqSeq, args.senderMid, args.messageId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing requestResendMessage", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing requestResendMessage");
        oprot.writeMessageBegin(new TMessage("requestResendMessage", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("requestResendMessage", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function respondResendMessage() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RespondResendMessage_args = new RespondResendMessage_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RespondResendMessage_result = new RespondResendMessage_result();
      try {
        TalkService_iface_.respondResendMessage(args.reqSeq, args.receiverMid, args.originalMessageId, args.resendMessage, args.errorCode);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing respondResendMessage", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing respondResendMessage");
        oprot.writeMessageBegin(new TMessage("respondResendMessage", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("respondResendMessage", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function acceptGroupInvitation() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : AcceptGroupInvitation_args = new AcceptGroupInvitation_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : AcceptGroupInvitation_result = new AcceptGroupInvitation_result();
      try {
        TalkService_iface_.acceptGroupInvitation(args.reqSeq, args.groupId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing acceptGroupInvitation", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acceptGroupInvitation");
        oprot.writeMessageBegin(new TMessage("acceptGroupInvitation", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("acceptGroupInvitation", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function acceptGroupInvitationByTicket() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : AcceptGroupInvitationByTicket_args = new AcceptGroupInvitationByTicket_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : AcceptGroupInvitationByTicket_result = new AcceptGroupInvitationByTicket_result();
      try {
        TalkService_iface_.acceptGroupInvitationByTicket(args.reqSeq, args.GroupMid, args.ticketId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing acceptGroupInvitationByTicket", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acceptGroupInvitationByTicket");
        oprot.writeMessageBegin(new TMessage("acceptGroupInvitationByTicket", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("acceptGroupInvitationByTicket", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function acceptProximityMatches() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : AcceptProximityMatches_args = new AcceptProximityMatches_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : AcceptProximityMatches_result = new AcceptProximityMatches_result();
      try {
        TalkService_iface_.acceptProximityMatches(args.sessionId, args.ids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing acceptProximityMatches", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acceptProximityMatches");
        oprot.writeMessageBegin(new TMessage("acceptProximityMatches", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("acceptProximityMatches", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function acquireCallRoute() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : AcquireCallRoute_args = new AcquireCallRoute_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : AcquireCallRoute_result = new AcquireCallRoute_result();
      try {
        result.success = TalkService_iface_.acquireCallRoute(args.to);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing acquireCallRoute", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acquireCallRoute");
        oprot.writeMessageBegin(new TMessage("acquireCallRoute", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("acquireCallRoute", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function acquireCallTicket() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : AcquireCallTicket_args = new AcquireCallTicket_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : AcquireCallTicket_result = new AcquireCallTicket_result();
      try {
        result.success = TalkService_iface_.acquireCallTicket(args.to);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing acquireCallTicket", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acquireCallTicket");
        oprot.writeMessageBegin(new TMessage("acquireCallTicket", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("acquireCallTicket", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function acquireEncryptedAccessToken() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : AcquireEncryptedAccessToken_args = new AcquireEncryptedAccessToken_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : AcquireEncryptedAccessToken_result = new AcquireEncryptedAccessToken_result();
      try {
        result.success = TalkService_iface_.acquireEncryptedAccessToken(args.featureType);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing acquireEncryptedAccessToken", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acquireEncryptedAccessToken");
        oprot.writeMessageBegin(new TMessage("acquireEncryptedAccessToken", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("acquireEncryptedAccessToken", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function addSnsId() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : AddSnsId_args = new AddSnsId_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : AddSnsId_result = new AddSnsId_result();
      try {
        result.success = TalkService_iface_.addSnsId(args.snsIdType, args.snsAccessToken);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing addSnsId", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing addSnsId");
        oprot.writeMessageBegin(new TMessage("addSnsId", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("addSnsId", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function blockContact() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : BlockContact_args = new BlockContact_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : BlockContact_result = new BlockContact_result();
      try {
        TalkService_iface_.blockContact(args.reqSeq, args.id);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing blockContact", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing blockContact");
        oprot.writeMessageBegin(new TMessage("blockContact", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("blockContact", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function blockRecommendation() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : BlockRecommendation_args = new BlockRecommendation_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : BlockRecommendation_result = new BlockRecommendation_result();
      try {
        TalkService_iface_.blockRecommendation(args.reqSeq, args.id);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing blockRecommendation", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing blockRecommendation");
        oprot.writeMessageBegin(new TMessage("blockRecommendation", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("blockRecommendation", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function cancelGroupInvitation() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : CancelGroupInvitation_args = new CancelGroupInvitation_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : CancelGroupInvitation_result = new CancelGroupInvitation_result();
      try {
        TalkService_iface_.cancelGroupInvitation(args.reqSeq, args.groupId, args.contactIds);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing cancelGroupInvitation", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing cancelGroupInvitation");
        oprot.writeMessageBegin(new TMessage("cancelGroupInvitation", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("cancelGroupInvitation", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function changeVerificationMethod() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ChangeVerificationMethod_args = new ChangeVerificationMethod_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ChangeVerificationMethod_result = new ChangeVerificationMethod_result();
      try {
        result.success = TalkService_iface_.changeVerificationMethod(args.sessionId, args.method);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing changeVerificationMethod", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing changeVerificationMethod");
        oprot.writeMessageBegin(new TMessage("changeVerificationMethod", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("changeVerificationMethod", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function clearIdentityCredential() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ClearIdentityCredential_args = new ClearIdentityCredential_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ClearIdentityCredential_result = new ClearIdentityCredential_result();
      try {
        TalkService_iface_.clearIdentityCredential();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing clearIdentityCredential", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing clearIdentityCredential");
        oprot.writeMessageBegin(new TMessage("clearIdentityCredential", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("clearIdentityCredential", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function clearMessageBox() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ClearMessageBox_args = new ClearMessageBox_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ClearMessageBox_result = new ClearMessageBox_result();
      try {
        TalkService_iface_.clearMessageBox(args.channelId, args.messageBoxId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing clearMessageBox", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing clearMessageBox");
        oprot.writeMessageBegin(new TMessage("clearMessageBox", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("clearMessageBox", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function closeProximityMatch() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : CloseProximityMatch_args = new CloseProximityMatch_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : CloseProximityMatch_result = new CloseProximityMatch_result();
      try {
        TalkService_iface_.closeProximityMatch(args.sessionId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing closeProximityMatch", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing closeProximityMatch");
        oprot.writeMessageBegin(new TMessage("closeProximityMatch", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("closeProximityMatch", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function commitSendMessage() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : CommitSendMessage_args = new CommitSendMessage_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : CommitSendMessage_result = new CommitSendMessage_result();
      try {
        result.success = TalkService_iface_.commitSendMessage(args.seq, args.messageId, args.receiverMids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing commitSendMessage", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing commitSendMessage");
        oprot.writeMessageBegin(new TMessage("commitSendMessage", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("commitSendMessage", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function commitSendMessages() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : CommitSendMessages_args = new CommitSendMessages_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : CommitSendMessages_result = new CommitSendMessages_result();
      try {
        result.success = TalkService_iface_.commitSendMessages(args.seq, args.messageIds, args.receiverMids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing commitSendMessages", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing commitSendMessages");
        oprot.writeMessageBegin(new TMessage("commitSendMessages", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("commitSendMessages", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function commitUpdateProfile() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : CommitUpdateProfile_args = new CommitUpdateProfile_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : CommitUpdateProfile_result = new CommitUpdateProfile_result();
      try {
        result.success = TalkService_iface_.commitUpdateProfile(args.seq, args.attrs, args.receiverMids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing commitUpdateProfile", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing commitUpdateProfile");
        oprot.writeMessageBegin(new TMessage("commitUpdateProfile", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("commitUpdateProfile", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function confirmEmail() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ConfirmEmail_args = new ConfirmEmail_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ConfirmEmail_result = new ConfirmEmail_result();
      try {
        TalkService_iface_.confirmEmail(args.verifier, args.pinCode);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing confirmEmail", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing confirmEmail");
        oprot.writeMessageBegin(new TMessage("confirmEmail", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("confirmEmail", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function createGroup() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : CreateGroup_args = new CreateGroup_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : CreateGroup_result = new CreateGroup_result();
      try {
        result.success = TalkService_iface_.createGroup(args.seq, args.name, args.contactIds);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing createGroup", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createGroup");
        oprot.writeMessageBegin(new TMessage("createGroup", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("createGroup", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function createQrcodeBase64Image() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : CreateQrcodeBase64Image_args = new CreateQrcodeBase64Image_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : CreateQrcodeBase64Image_result = new CreateQrcodeBase64Image_result();
      try {
        result.success = TalkService_iface_.createQrcodeBase64Image(args.url, args.characterSet, args.imageSize, args.x, args.y, args.width, args.height);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing createQrcodeBase64Image", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createQrcodeBase64Image");
        oprot.writeMessageBegin(new TMessage("createQrcodeBase64Image", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("createQrcodeBase64Image", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function createRoom() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : CreateRoom_args = new CreateRoom_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : CreateRoom_result = new CreateRoom_result();
      try {
        result.success = TalkService_iface_.createRoom(args.reqSeq, args.contactIds);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing createRoom", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createRoom");
        oprot.writeMessageBegin(new TMessage("createRoom", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("createRoom", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function createSession() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : CreateSession_args = new CreateSession_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : CreateSession_result = new CreateSession_result();
      try {
        result.success = TalkService_iface_.createSession();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing createSession", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createSession");
        oprot.writeMessageBegin(new TMessage("createSession", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("createSession", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function fetchAnnouncements() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FetchAnnouncements_args = new FetchAnnouncements_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FetchAnnouncements_result = new FetchAnnouncements_result();
      try {
        result.success = TalkService_iface_.fetchAnnouncements(args.lastFetchedIndex);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing fetchAnnouncements", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing fetchAnnouncements");
        oprot.writeMessageBegin(new TMessage("fetchAnnouncements", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("fetchAnnouncements", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function fetchMessages() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FetchMessages_args = new FetchMessages_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FetchMessages_result = new FetchMessages_result();
      try {
        result.success = TalkService_iface_.fetchMessages(args.localTs, args.count);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing fetchMessages", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing fetchMessages");
        oprot.writeMessageBegin(new TMessage("fetchMessages", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("fetchMessages", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function fetchOperations() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FetchOperations_args = new FetchOperations_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FetchOperations_result = new FetchOperations_result();
      try {
        result.success = TalkService_iface_.fetchOperations(args.localRev, args.count);
      } catch (e:ShouldSyncException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing fetchOperations", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing fetchOperations");
        oprot.writeMessageBegin(new TMessage("fetchOperations", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("fetchOperations", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function fetchOps() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FetchOps_args = new FetchOps_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FetchOps_result = new FetchOps_result();
      try {
        result.success = TalkService_iface_.fetchOps(args.localRev, args.count, args.globalRev, args.individualRev);
      } catch (e:ShouldSyncException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing fetchOps", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing fetchOps");
        oprot.writeMessageBegin(new TMessage("fetchOps", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("fetchOps", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function findAndAddContactsByEmail() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FindAndAddContactsByEmail_args = new FindAndAddContactsByEmail_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FindAndAddContactsByEmail_result = new FindAndAddContactsByEmail_result();
      try {
        result.success = TalkService_iface_.findAndAddContactsByEmail(args.reqSeq, args.emails);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing findAndAddContactsByEmail", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findAndAddContactsByEmail");
        oprot.writeMessageBegin(new TMessage("findAndAddContactsByEmail", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("findAndAddContactsByEmail", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function findAndAddContactsByMid() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FindAndAddContactsByMid_args = new FindAndAddContactsByMid_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FindAndAddContactsByMid_result = new FindAndAddContactsByMid_result();
      try {
        result.success = TalkService_iface_.findAndAddContactsByMid(args.reqSeq, args.mid, args.type, args.reference);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing findAndAddContactsByMid", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findAndAddContactsByMid");
        oprot.writeMessageBegin(new TMessage("findAndAddContactsByMid", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("findAndAddContactsByMid", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function findGroupByTicketV2() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FindGroupByTicketV2_args = new FindGroupByTicketV2_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FindGroupByTicketV2_result = new FindGroupByTicketV2_result();
      try {
        result.success = TalkService_iface_.findGroupByTicketV2(args.ticketId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing findGroupByTicketV2", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findGroupByTicketV2");
        oprot.writeMessageBegin(new TMessage("findGroupByTicketV2", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("findGroupByTicketV2", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function findAndAddContactsByPhone() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FindAndAddContactsByPhone_args = new FindAndAddContactsByPhone_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FindAndAddContactsByPhone_result = new FindAndAddContactsByPhone_result();
      try {
        result.success = TalkService_iface_.findAndAddContactsByPhone(args.reqSeq, args.phones);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing findAndAddContactsByPhone", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findAndAddContactsByPhone");
        oprot.writeMessageBegin(new TMessage("findAndAddContactsByPhone", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("findAndAddContactsByPhone", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getFriendRequests() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetFriendRequests_args = new GetFriendRequests_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetFriendRequests_result = new GetFriendRequests_result();
      try {
        result.success = TalkService_iface_.getFriendRequests(args.direction, args.lastSeenSeqId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getFriendRequests", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getFriendRequests");
        oprot.writeMessageBegin(new TMessage("getFriendRequests", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getFriendRequests", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function removeFriendRequest() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RemoveFriendRequest_args = new RemoveFriendRequest_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RemoveFriendRequest_result = new RemoveFriendRequest_result();
      try {
        TalkService_iface_.removeFriendRequest(args.direction, args.midOrEMid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing removeFriendRequest", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeFriendRequest");
        oprot.writeMessageBegin(new TMessage("removeFriendRequest", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("removeFriendRequest", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function findAndAddContactsByUserid() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FindAndAddContactsByUserid_args = new FindAndAddContactsByUserid_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FindAndAddContactsByUserid_result = new FindAndAddContactsByUserid_result();
      try {
        result.success = TalkService_iface_.findAndAddContactsByUserid(args.reqSeq, args.userid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing findAndAddContactsByUserid", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findAndAddContactsByUserid");
        oprot.writeMessageBegin(new TMessage("findAndAddContactsByUserid", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("findAndAddContactsByUserid", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function findContactByUserid() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FindContactByUserid_args = new FindContactByUserid_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FindContactByUserid_result = new FindContactByUserid_result();
      try {
        result.success = TalkService_iface_.findContactByUserid(args.userid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing findContactByUserid", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findContactByUserid");
        oprot.writeMessageBegin(new TMessage("findContactByUserid", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("findContactByUserid", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function findContactByUserTicket() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FindContactByUserTicket_args = new FindContactByUserTicket_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FindContactByUserTicket_result = new FindContactByUserTicket_result();
      try {
        result.success = TalkService_iface_.findContactByUserTicket(args.ticketIdWithTag);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing findContactByUserTicket", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findContactByUserTicket");
        oprot.writeMessageBegin(new TMessage("findContactByUserTicket", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("findContactByUserTicket", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function findContactsByEmail() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FindContactsByEmail_args = new FindContactsByEmail_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FindContactsByEmail_result = new FindContactsByEmail_result();
      try {
        result.success = TalkService_iface_.findContactsByEmail(args.emails);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing findContactsByEmail", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findContactsByEmail");
        oprot.writeMessageBegin(new TMessage("findContactsByEmail", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("findContactsByEmail", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function findContactsByPhone() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FindContactsByPhone_args = new FindContactsByPhone_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FindContactsByPhone_result = new FindContactsByPhone_result();
      try {
        result.success = TalkService_iface_.findContactsByPhone(args.phones);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing findContactsByPhone", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findContactsByPhone");
        oprot.writeMessageBegin(new TMessage("findContactsByPhone", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("findContactsByPhone", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function findSnsIdUserStatus() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FindSnsIdUserStatus_args = new FindSnsIdUserStatus_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FindSnsIdUserStatus_result = new FindSnsIdUserStatus_result();
      try {
        result.success = TalkService_iface_.findSnsIdUserStatus(args.snsIdType, args.snsAccessToken, args.udidHash);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing findSnsIdUserStatus", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findSnsIdUserStatus");
        oprot.writeMessageBegin(new TMessage("findSnsIdUserStatus", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("findSnsIdUserStatus", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function finishUpdateVerification() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FinishUpdateVerification_args = new FinishUpdateVerification_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FinishUpdateVerification_result = new FinishUpdateVerification_result();
      try {
        TalkService_iface_.finishUpdateVerification(args.sessionId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing finishUpdateVerification", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing finishUpdateVerification");
        oprot.writeMessageBegin(new TMessage("finishUpdateVerification", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("finishUpdateVerification", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function generateUserTicket() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GenerateUserTicket_args = new GenerateUserTicket_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GenerateUserTicket_result = new GenerateUserTicket_result();
      try {
        result.success = TalkService_iface_.generateUserTicket(args.expirationTime, args.maxUseCount);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing generateUserTicket", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing generateUserTicket");
        oprot.writeMessageBegin(new TMessage("generateUserTicket", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("generateUserTicket", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function destroyMessage() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : DestroyMessage_args = new DestroyMessage_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : DestroyMessage_result = new DestroyMessage_result();
      try {
        TalkService_iface_.destroyMessage(args.seq, args.chatId, args.messageId, args.sessionId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing destroyMessage", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing destroyMessage");
        oprot.writeMessageBegin(new TMessage("destroyMessage", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("destroyMessage", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getAcceptedProximityMatches() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetAcceptedProximityMatches_args = new GetAcceptedProximityMatches_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetAcceptedProximityMatches_result = new GetAcceptedProximityMatches_result();
      try {
        result.success = TalkService_iface_.getAcceptedProximityMatches(args.sessionId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getAcceptedProximityMatches", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAcceptedProximityMatches");
        oprot.writeMessageBegin(new TMessage("getAcceptedProximityMatches", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getAcceptedProximityMatches", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getActiveBuddySubscriberIds() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetActiveBuddySubscriberIds_args = new GetActiveBuddySubscriberIds_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetActiveBuddySubscriberIds_result = new GetActiveBuddySubscriberIds_result();
      try {
        result.success = TalkService_iface_.getActiveBuddySubscriberIds();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getActiveBuddySubscriberIds", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getActiveBuddySubscriberIds");
        oprot.writeMessageBegin(new TMessage("getActiveBuddySubscriberIds", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getActiveBuddySubscriberIds", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getAllContactIds() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetAllContactIds_args = new GetAllContactIds_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetAllContactIds_result = new GetAllContactIds_result();
      try {
        result.success = TalkService_iface_.getAllContactIds();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getAllContactIds", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAllContactIds");
        oprot.writeMessageBegin(new TMessage("getAllContactIds", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getAllContactIds", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getAuthQrcode() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetAuthQrcode_args = new GetAuthQrcode_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetAuthQrcode_result = new GetAuthQrcode_result();
      try {
        result.success = TalkService_iface_.getAuthQrcode(args.keepLoggedIn, args.systemName);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getAuthQrcode", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAuthQrcode");
        oprot.writeMessageBegin(new TMessage("getAuthQrcode", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getAuthQrcode", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getBlockedContactIds() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetBlockedContactIds_args = new GetBlockedContactIds_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetBlockedContactIds_result = new GetBlockedContactIds_result();
      try {
        result.success = TalkService_iface_.getBlockedContactIds();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getBlockedContactIds", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getBlockedContactIds");
        oprot.writeMessageBegin(new TMessage("getBlockedContactIds", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getBlockedContactIds", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function registerWithPhoneNumber() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RegisterWithPhoneNumber_args = new RegisterWithPhoneNumber_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RegisterWithPhoneNumber_result = new RegisterWithPhoneNumber_result();
      try {
        result.success = TalkService_iface_.registerWithPhoneNumber(args.sessionId, args.migrationPincodeSessionId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing registerWithPhoneNumber", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerWithPhoneNumber");
        oprot.writeMessageBegin(new TMessage("registerWithPhoneNumber", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("registerWithPhoneNumber", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function registerWithPhoneNumberAndPassword() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RegisterWithPhoneNumberAndPassword_args = new RegisterWithPhoneNumberAndPassword_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RegisterWithPhoneNumberAndPassword_result = new RegisterWithPhoneNumberAndPassword_result();
      try {
        result.success = TalkService_iface_.registerWithPhoneNumberAndPassword(args.sessionId, args.keynm, args.encrypted);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing registerWithPhoneNumberAndPassword", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerWithPhoneNumberAndPassword");
        oprot.writeMessageBegin(new TMessage("registerWithPhoneNumberAndPassword", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("registerWithPhoneNumberAndPassword", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getAnalyticsInfo() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetAnalyticsInfo_args = new GetAnalyticsInfo_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetAnalyticsInfo_result = new GetAnalyticsInfo_result();
      try {
        result.success = TalkService_iface_.getAnalyticsInfo();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getAnalyticsInfo", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAnalyticsInfo");
        oprot.writeMessageBegin(new TMessage("getAnalyticsInfo", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getAnalyticsInfo", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function reportClientStatistics() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ReportClientStatistics_args = new ReportClientStatistics_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ReportClientStatistics_result = new ReportClientStatistics_result();
      try {
        TalkService_iface_.reportClientStatistics(args.reqSeq, args.category, args.count);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing reportClientStatistics", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reportClientStatistics");
        oprot.writeMessageBegin(new TMessage("reportClientStatistics", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("reportClientStatistics", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function verifyPhoneNumberForLogin() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : VerifyPhoneNumberForLogin_args = new VerifyPhoneNumberForLogin_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : VerifyPhoneNumberForLogin_result = new VerifyPhoneNumberForLogin_result();
      try {
        result.success = TalkService_iface_.verifyPhoneNumberForLogin(args.verifierFromPhone, args.pinCodeForPhone, args.verifierFromLogin);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing verifyPhoneNumberForLogin", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing verifyPhoneNumberForLogin");
        oprot.writeMessageBegin(new TMessage("verifyPhoneNumberForLogin", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("verifyPhoneNumberForLogin", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function verifyPhoneNumber() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : VerifyPhoneNumber_args = new VerifyPhoneNumber_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : VerifyPhoneNumber_result = new VerifyPhoneNumber_result();
      try {
        result.success = TalkService_iface_.verifyPhoneNumber(args.sessionId, args.pinCode, args.udidHash, args.migrationPincodeSessionId, args.oldUdidHash);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing verifyPhoneNumber", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing verifyPhoneNumber");
        oprot.writeMessageBegin(new TMessage("verifyPhoneNumber", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("verifyPhoneNumber", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getBlockedContactIdsByRange() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetBlockedContactIdsByRange_args = new GetBlockedContactIdsByRange_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetBlockedContactIdsByRange_result = new GetBlockedContactIdsByRange_result();
      try {
        result.success = TalkService_iface_.getBlockedContactIdsByRange(args.start, args.count);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getBlockedContactIdsByRange", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getBlockedContactIdsByRange");
        oprot.writeMessageBegin(new TMessage("getBlockedContactIdsByRange", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getBlockedContactIdsByRange", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getBlockedRecommendationIds() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetBlockedRecommendationIds_args = new GetBlockedRecommendationIds_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetBlockedRecommendationIds_result = new GetBlockedRecommendationIds_result();
      try {
        result.success = TalkService_iface_.getBlockedRecommendationIds();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getBlockedRecommendationIds", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getBlockedRecommendationIds");
        oprot.writeMessageBegin(new TMessage("getBlockedRecommendationIds", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getBlockedRecommendationIds", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getBuddyBlockerIds() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetBuddyBlockerIds_args = new GetBuddyBlockerIds_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetBuddyBlockerIds_result = new GetBuddyBlockerIds_result();
      try {
        result.success = TalkService_iface_.getBuddyBlockerIds();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getBuddyBlockerIds", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getBuddyBlockerIds");
        oprot.writeMessageBegin(new TMessage("getBuddyBlockerIds", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getBuddyBlockerIds", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getBuddyLocation() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetBuddyLocation_args = new GetBuddyLocation_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetBuddyLocation_result = new GetBuddyLocation_result();
      try {
        result.success = TalkService_iface_.getBuddyLocation(args.mid, args.index);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getBuddyLocation", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getBuddyLocation");
        oprot.writeMessageBegin(new TMessage("getBuddyLocation", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getBuddyLocation", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getCompactContactsModifiedSince() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetCompactContactsModifiedSince_args = new GetCompactContactsModifiedSince_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetCompactContactsModifiedSince_result = new GetCompactContactsModifiedSince_result();
      try {
        result.success = TalkService_iface_.getCompactContactsModifiedSince(args.timestamp);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getCompactContactsModifiedSince", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCompactContactsModifiedSince");
        oprot.writeMessageBegin(new TMessage("getCompactContactsModifiedSince", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getCompactContactsModifiedSince", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getCompactGroup() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetCompactGroup_args = new GetCompactGroup_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetCompactGroup_result = new GetCompactGroup_result();
      try {
        result.success = TalkService_iface_.getCompactGroup(args.groupId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getCompactGroup", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCompactGroup");
        oprot.writeMessageBegin(new TMessage("getCompactGroup", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getCompactGroup", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getCompactRoom() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetCompactRoom_args = new GetCompactRoom_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetCompactRoom_result = new GetCompactRoom_result();
      try {
        result.success = TalkService_iface_.getCompactRoom(args.roomId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getCompactRoom", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCompactRoom");
        oprot.writeMessageBegin(new TMessage("getCompactRoom", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getCompactRoom", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getContact() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetContact_args = new GetContact_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetContact_result = new GetContact_result();
      try {
        result.success = TalkService_iface_.getContact(args.id);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getContact", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getContact");
        oprot.writeMessageBegin(new TMessage("getContact", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getContact", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getContacts() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetContacts_args = new GetContacts_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetContacts_result = new GetContacts_result();
      try {
        result.success = TalkService_iface_.getContacts(args.ids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getContacts", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getContacts");
        oprot.writeMessageBegin(new TMessage("getContacts", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getContacts", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getContactWithFriendRequestStatus() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetContactWithFriendRequestStatus_args = new GetContactWithFriendRequestStatus_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetContactWithFriendRequestStatus_result = new GetContactWithFriendRequestStatus_result();
      try {
        result.success = TalkService_iface_.getContactWithFriendRequestStatus(args.id);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getContactWithFriendRequestStatus", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getContactWithFriendRequestStatus");
        oprot.writeMessageBegin(new TMessage("getContactWithFriendRequestStatus", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getContactWithFriendRequestStatus", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getCountryWithRequestIp() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetCountryWithRequestIp_args = new GetCountryWithRequestIp_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetCountryWithRequestIp_result = new GetCountryWithRequestIp_result();
      try {
        result.success = TalkService_iface_.getCountryWithRequestIp();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getCountryWithRequestIp", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCountryWithRequestIp");
        oprot.writeMessageBegin(new TMessage("getCountryWithRequestIp", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getCountryWithRequestIp", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getFavoriteMids() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetFavoriteMids_args = new GetFavoriteMids_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetFavoriteMids_result = new GetFavoriteMids_result();
      try {
        result.success = TalkService_iface_.getFavoriteMids();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getFavoriteMids", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getFavoriteMids");
        oprot.writeMessageBegin(new TMessage("getFavoriteMids", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getFavoriteMids", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getGroup() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetGroup_args = new GetGroup_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetGroup_result = new GetGroup_result();
      try {
        result.success = TalkService_iface_.getGroup(args.groupId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getGroup", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroup");
        oprot.writeMessageBegin(new TMessage("getGroup", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getGroup", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getGroupIdsInvited() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetGroupIdsInvited_args = new GetGroupIdsInvited_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetGroupIdsInvited_result = new GetGroupIdsInvited_result();
      try {
        result.success = TalkService_iface_.getGroupIdsInvited();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getGroupIdsInvited", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupIdsInvited");
        oprot.writeMessageBegin(new TMessage("getGroupIdsInvited", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getGroupIdsInvited", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getGroupIdsJoined() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetGroupIdsJoined_args = new GetGroupIdsJoined_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetGroupIdsJoined_result = new GetGroupIdsJoined_result();
      try {
        result.success = TalkService_iface_.getGroupIdsJoined();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getGroupIdsJoined", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupIdsJoined");
        oprot.writeMessageBegin(new TMessage("getGroupIdsJoined", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getGroupIdsJoined", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getGroups() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetGroups_args = new GetGroups_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetGroups_result = new GetGroups_result();
      try {
        result.success = TalkService_iface_.getGroups(args.groupIds);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getGroups", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroups");
        oprot.writeMessageBegin(new TMessage("getGroups", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getGroups", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getHiddenContactMids() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetHiddenContactMids_args = new GetHiddenContactMids_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetHiddenContactMids_result = new GetHiddenContactMids_result();
      try {
        result.success = TalkService_iface_.getHiddenContactMids();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getHiddenContactMids", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getHiddenContactMids");
        oprot.writeMessageBegin(new TMessage("getHiddenContactMids", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getHiddenContactMids", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getIdentityIdentifier() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetIdentityIdentifier_args = new GetIdentityIdentifier_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetIdentityIdentifier_result = new GetIdentityIdentifier_result();
      try {
        result.success = TalkService_iface_.getIdentityIdentifier();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getIdentityIdentifier", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getIdentityIdentifier");
        oprot.writeMessageBegin(new TMessage("getIdentityIdentifier", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getIdentityIdentifier", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getLastAnnouncementIndex() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetLastAnnouncementIndex_args = new GetLastAnnouncementIndex_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetLastAnnouncementIndex_result = new GetLastAnnouncementIndex_result();
      try {
        result.success = TalkService_iface_.getLastAnnouncementIndex();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getLastAnnouncementIndex", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getLastAnnouncementIndex");
        oprot.writeMessageBegin(new TMessage("getLastAnnouncementIndex", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getLastAnnouncementIndex", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getLastOpRevision() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetLastOpRevision_args = new GetLastOpRevision_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetLastOpRevision_result = new GetLastOpRevision_result();
      try {
        result.success = TalkService_iface_.getLastOpRevision();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getLastOpRevision", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getLastOpRevision");
        oprot.writeMessageBegin(new TMessage("getLastOpRevision", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getLastOpRevision", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getSuggestRevisions() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetSuggestRevisions_args = new GetSuggestRevisions_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetSuggestRevisions_result = new GetSuggestRevisions_result();
      try {
        result.success = TalkService_iface_.getSuggestRevisions();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getSuggestRevisions", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSuggestRevisions");
        oprot.writeMessageBegin(new TMessage("getSuggestRevisions", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getSuggestRevisions", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getPreviousMessagesV2WithReadCount() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetPreviousMessagesV2WithReadCount_args = new GetPreviousMessagesV2WithReadCount_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetPreviousMessagesV2WithReadCount_result = new GetPreviousMessagesV2WithReadCount_result();
      try {
        result.success = TalkService_iface_.getPreviousMessagesV2WithReadCount(args.messageBoxId, args.endMessageId, args.messagesCount);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getPreviousMessagesV2WithReadCount", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPreviousMessagesV2WithReadCount");
        oprot.writeMessageBegin(new TMessage("getPreviousMessagesV2WithReadCount", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getPreviousMessagesV2WithReadCount", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getMessageBox() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetMessageBox_args = new GetMessageBox_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetMessageBox_result = new GetMessageBox_result();
      try {
        result.success = TalkService_iface_.getMessageBox(args.channelId, args.messageBoxId, args.lastMessagesCount);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getMessageBox", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageBox");
        oprot.writeMessageBegin(new TMessage("getMessageBox", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getMessageBox", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getMessageBoxCompactWrapUp() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetMessageBoxCompactWrapUp_args = new GetMessageBoxCompactWrapUp_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetMessageBoxCompactWrapUp_result = new GetMessageBoxCompactWrapUp_result();
      try {
        result.success = TalkService_iface_.getMessageBoxCompactWrapUp(args.mid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getMessageBoxCompactWrapUp", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageBoxCompactWrapUp");
        oprot.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUp", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUp", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getMessageBoxCompactWrapUpList() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetMessageBoxCompactWrapUpList_args = new GetMessageBoxCompactWrapUpList_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetMessageBoxCompactWrapUpList_result = new GetMessageBoxCompactWrapUpList_result();
      try {
        result.success = TalkService_iface_.getMessageBoxCompactWrapUpList(args.start, args.messageBoxCount);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getMessageBoxCompactWrapUpList", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageBoxCompactWrapUpList");
        oprot.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUpList", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUpList", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getMessageBoxList() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetMessageBoxList_args = new GetMessageBoxList_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetMessageBoxList_result = new GetMessageBoxList_result();
      try {
        result.success = TalkService_iface_.getMessageBoxList(args.channelId, args.lastMessagesCount);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getMessageBoxList", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageBoxList");
        oprot.writeMessageBegin(new TMessage("getMessageBoxList", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getMessageBoxList", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getMessageBoxListByStatus() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetMessageBoxListByStatus_args = new GetMessageBoxListByStatus_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetMessageBoxListByStatus_result = new GetMessageBoxListByStatus_result();
      try {
        result.success = TalkService_iface_.getMessageBoxListByStatus(args.channelId, args.lastMessagesCount, args.status);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getMessageBoxListByStatus", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageBoxListByStatus");
        oprot.writeMessageBegin(new TMessage("getMessageBoxListByStatus", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getMessageBoxListByStatus", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getMessageBoxWrapUp() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetMessageBoxWrapUp_args = new GetMessageBoxWrapUp_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetMessageBoxWrapUp_result = new GetMessageBoxWrapUp_result();
      try {
        result.success = TalkService_iface_.getMessageBoxWrapUp(args.mid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getMessageBoxWrapUp", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageBoxWrapUp");
        oprot.writeMessageBegin(new TMessage("getMessageBoxWrapUp", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getMessageBoxWrapUp", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getMessageBoxWrapUpList() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetMessageBoxWrapUpList_args = new GetMessageBoxWrapUpList_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetMessageBoxWrapUpList_result = new GetMessageBoxWrapUpList_result();
      try {
        result.success = TalkService_iface_.getMessageBoxWrapUpList(args.start, args.messageBoxCount);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getMessageBoxWrapUpList", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageBoxWrapUpList");
        oprot.writeMessageBegin(new TMessage("getMessageBoxWrapUpList", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getMessageBoxWrapUpList", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getMessagesBySequenceNumber() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetMessagesBySequenceNumber_args = new GetMessagesBySequenceNumber_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetMessagesBySequenceNumber_result = new GetMessagesBySequenceNumber_result();
      try {
        result.success = TalkService_iface_.getMessagesBySequenceNumber(args.channelId, args.messageBoxId, args.startSeq, args.endSeq);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getMessagesBySequenceNumber", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessagesBySequenceNumber");
        oprot.writeMessageBegin(new TMessage("getMessagesBySequenceNumber", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getMessagesBySequenceNumber", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getNextMessages() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetNextMessages_args = new GetNextMessages_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetNextMessages_result = new GetNextMessages_result();
      try {
        result.success = TalkService_iface_.getNextMessages(args.messageBoxId, args.startSeq, args.messagesCount);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getNextMessages", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNextMessages");
        oprot.writeMessageBegin(new TMessage("getNextMessages", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getNextMessages", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getNotificationPolicy() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetNotificationPolicy_args = new GetNotificationPolicy_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetNotificationPolicy_result = new GetNotificationPolicy_result();
      try {
        result.success = TalkService_iface_.getNotificationPolicy(args.carrier);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getNotificationPolicy", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNotificationPolicy");
        oprot.writeMessageBegin(new TMessage("getNotificationPolicy", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getNotificationPolicy", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getPreviousMessages() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetPreviousMessages_args = new GetPreviousMessages_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetPreviousMessages_result = new GetPreviousMessages_result();
      try {
        result.success = TalkService_iface_.getPreviousMessages(args.messageBoxId, args.endSeq, args.messagesCount);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getPreviousMessages", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPreviousMessages");
        oprot.writeMessageBegin(new TMessage("getPreviousMessages", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getPreviousMessages", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getProfile() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetProfile_args = new GetProfile_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetProfile_result = new GetProfile_result();
      try {
        result.success = TalkService_iface_.getProfile();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getProfile", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getProfile");
        oprot.writeMessageBegin(new TMessage("getProfile", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getProfile", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getProximityMatchCandidateList() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetProximityMatchCandidateList_args = new GetProximityMatchCandidateList_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetProximityMatchCandidateList_result = new GetProximityMatchCandidateList_result();
      try {
        result.success = TalkService_iface_.getProximityMatchCandidateList(args.sessionId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getProximityMatchCandidateList", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getProximityMatchCandidateList");
        oprot.writeMessageBegin(new TMessage("getProximityMatchCandidateList", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getProximityMatchCandidateList", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getProximityMatchCandidates() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetProximityMatchCandidates_args = new GetProximityMatchCandidates_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetProximityMatchCandidates_result = new GetProximityMatchCandidates_result();
      try {
        result.success = TalkService_iface_.getProximityMatchCandidates(args.sessionId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getProximityMatchCandidates", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getProximityMatchCandidates");
        oprot.writeMessageBegin(new TMessage("getProximityMatchCandidates", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getProximityMatchCandidates", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getRecentMessages() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetRecentMessages_args = new GetRecentMessages_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetRecentMessages_result = new GetRecentMessages_result();
      try {
        result.success = TalkService_iface_.getRecentMessages(args.messageBoxId, args.messagesCount);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getRecentMessages", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRecentMessages");
        oprot.writeMessageBegin(new TMessage("getRecentMessages", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getRecentMessages", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getRecommendationIds() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetRecommendationIds_args = new GetRecommendationIds_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetRecommendationIds_result = new GetRecommendationIds_result();
      try {
        result.success = TalkService_iface_.getRecommendationIds();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getRecommendationIds", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRecommendationIds");
        oprot.writeMessageBegin(new TMessage("getRecommendationIds", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getRecommendationIds", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getRoom() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetRoom_args = new GetRoom_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetRoom_result = new GetRoom_result();
      try {
        result.success = TalkService_iface_.getRoom(args.roomId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getRoom", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRoom");
        oprot.writeMessageBegin(new TMessage("getRoom", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getRoom", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getRSAKeyInfo() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetRSAKeyInfo_args = new GetRSAKeyInfo_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetRSAKeyInfo_result = new GetRSAKeyInfo_result();
      try {
        result.success = TalkService_iface_.getRSAKeyInfo(args.provider);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getRSAKeyInfo", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRSAKeyInfo");
        oprot.writeMessageBegin(new TMessage("getRSAKeyInfo", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getRSAKeyInfo", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getServerTime() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetServerTime_args = new GetServerTime_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetServerTime_result = new GetServerTime_result();
      try {
        result.success = TalkService_iface_.getServerTime();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getServerTime", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getServerTime");
        oprot.writeMessageBegin(new TMessage("getServerTime", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getServerTime", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getSessions() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetSessions_args = new GetSessions_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetSessions_result = new GetSessions_result();
      try {
        result.success = TalkService_iface_.getSessions();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getSessions", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSessions");
        oprot.writeMessageBegin(new TMessage("getSessions", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getSessions", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getSettings() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetSettings_args = new GetSettings_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetSettings_result = new GetSettings_result();
      try {
        result.success = TalkService_iface_.getSettings();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getSettings", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSettings");
        oprot.writeMessageBegin(new TMessage("getSettings", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getSettings", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getGroupsV2() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetGroupsV2_args = new GetGroupsV2_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetGroupsV2_result = new GetGroupsV2_result();
      try {
        result.success = TalkService_iface_.getGroupsV2(args.groupIds);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getGroupsV2", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupsV2");
        oprot.writeMessageBegin(new TMessage("getGroupsV2", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getGroupsV2", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getSettingsAttributes() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetSettingsAttributes_args = new GetSettingsAttributes_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetSettingsAttributes_result = new GetSettingsAttributes_result();
      try {
        result.success = TalkService_iface_.getSettingsAttributes(args.attrBitset);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getSettingsAttributes", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSettingsAttributes");
        oprot.writeMessageBegin(new TMessage("getSettingsAttributes", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getSettingsAttributes", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getSystemConfiguration() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetSystemConfiguration_args = new GetSystemConfiguration_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetSystemConfiguration_result = new GetSystemConfiguration_result();
      try {
        result.success = TalkService_iface_.getSystemConfiguration();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getSystemConfiguration", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSystemConfiguration");
        oprot.writeMessageBegin(new TMessage("getSystemConfiguration", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getSystemConfiguration", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getUserTicket() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetUserTicket_args = new GetUserTicket_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetUserTicket_result = new GetUserTicket_result();
      try {
        result.success = TalkService_iface_.getUserTicket();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getUserTicket", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserTicket");
        oprot.writeMessageBegin(new TMessage("getUserTicket", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getUserTicket", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getWapInvitation() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetWapInvitation_args = new GetWapInvitation_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetWapInvitation_result = new GetWapInvitation_result();
      try {
        result.success = TalkService_iface_.getWapInvitation(args.invitationHash);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getWapInvitation", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getWapInvitation");
        oprot.writeMessageBegin(new TMessage("getWapInvitation", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getWapInvitation", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function invalidateUserTicket() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : InvalidateUserTicket_args = new InvalidateUserTicket_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : InvalidateUserTicket_result = new InvalidateUserTicket_result();
      try {
        TalkService_iface_.invalidateUserTicket();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing invalidateUserTicket", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing invalidateUserTicket");
        oprot.writeMessageBegin(new TMessage("invalidateUserTicket", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("invalidateUserTicket", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function inviteFriendsBySms() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : InviteFriendsBySms_args = new InviteFriendsBySms_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : InviteFriendsBySms_result = new InviteFriendsBySms_result();
      try {
        TalkService_iface_.inviteFriendsBySms(args.phoneNumberList);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing inviteFriendsBySms", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing inviteFriendsBySms");
        oprot.writeMessageBegin(new TMessage("inviteFriendsBySms", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("inviteFriendsBySms", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function inviteIntoGroup() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : InviteIntoGroup_args = new InviteIntoGroup_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : InviteIntoGroup_result = new InviteIntoGroup_result();
      try {
        TalkService_iface_.inviteIntoGroup(args.reqSeq, args.groupId, args.contactIds);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing inviteIntoGroup", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing inviteIntoGroup");
        oprot.writeMessageBegin(new TMessage("inviteIntoGroup", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("inviteIntoGroup", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function inviteIntoRoom() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : InviteIntoRoom_args = new InviteIntoRoom_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : InviteIntoRoom_result = new InviteIntoRoom_result();
      try {
        TalkService_iface_.inviteIntoRoom(args.reqSeq, args.roomId, args.contactIds);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing inviteIntoRoom", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing inviteIntoRoom");
        oprot.writeMessageBegin(new TMessage("inviteIntoRoom", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("inviteIntoRoom", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function inviteViaEmail() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : InviteViaEmail_args = new InviteViaEmail_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : InviteViaEmail_result = new InviteViaEmail_result();
      try {
        TalkService_iface_.inviteViaEmail(args.reqSeq, args.email, args.name);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing inviteViaEmail", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing inviteViaEmail");
        oprot.writeMessageBegin(new TMessage("inviteViaEmail", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("inviteViaEmail", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function isIdentityIdentifierAvailable() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : IsIdentityIdentifierAvailable_args = new IsIdentityIdentifierAvailable_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : IsIdentityIdentifierAvailable_result = new IsIdentityIdentifierAvailable_result();
      try {
        result.success = TalkService_iface_.isIdentityIdentifierAvailable(args.provider, args.identifier);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing isIdentityIdentifierAvailable", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing isIdentityIdentifierAvailable");
        oprot.writeMessageBegin(new TMessage("isIdentityIdentifierAvailable", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("isIdentityIdentifierAvailable", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function isUseridAvailable() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : IsUseridAvailable_args = new IsUseridAvailable_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : IsUseridAvailable_result = new IsUseridAvailable_result();
      try {
        result.success = TalkService_iface_.isUseridAvailable(args.userid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing isUseridAvailable", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing isUseridAvailable");
        oprot.writeMessageBegin(new TMessage("isUseridAvailable", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("isUseridAvailable", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function kickoutFromGroup() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : KickoutFromGroup_args = new KickoutFromGroup_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : KickoutFromGroup_result = new KickoutFromGroup_result();
      try {
        TalkService_iface_.kickoutFromGroup(args.reqSeq, args.groupId, args.contactIds);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing kickoutFromGroup", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing kickoutFromGroup");
        oprot.writeMessageBegin(new TMessage("kickoutFromGroup", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("kickoutFromGroup", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function reissueGroupTicket() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ReissueGroupTicket_args = new ReissueGroupTicket_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ReissueGroupTicket_result = new ReissueGroupTicket_result();
      try {
        result.success = TalkService_iface_.reissueGroupTicket(args.groupMid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing reissueGroupTicket", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reissueGroupTicket");
        oprot.writeMessageBegin(new TMessage("reissueGroupTicket", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("reissueGroupTicket", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function findGroupByTicket() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FindGroupByTicket_args = new FindGroupByTicket_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FindGroupByTicket_result = new FindGroupByTicket_result();
      try {
        result.success = TalkService_iface_.findGroupByTicket(args.ticketId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing findGroupByTicket", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findGroupByTicket");
        oprot.writeMessageBegin(new TMessage("findGroupByTicket", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("findGroupByTicket", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function leaveGroup() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : LeaveGroup_args = new LeaveGroup_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : LeaveGroup_result = new LeaveGroup_result();
      try {
        TalkService_iface_.leaveGroup(args.reqSeq, args.groupId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing leaveGroup", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing leaveGroup");
        oprot.writeMessageBegin(new TMessage("leaveGroup", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("leaveGroup", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function leaveRoom() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : LeaveRoom_args = new LeaveRoom_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : LeaveRoom_result = new LeaveRoom_result();
      try {
        TalkService_iface_.leaveRoom(args.reqSeq, args.roomId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing leaveRoom", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing leaveRoom");
        oprot.writeMessageBegin(new TMessage("leaveRoom", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("leaveRoom", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function loginWithIdentityCredential() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : LoginWithIdentityCredential_args = new LoginWithIdentityCredential_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : LoginWithIdentityCredential_result = new LoginWithIdentityCredential_result();
      try {
        result.success = TalkService_iface_.loginWithIdentityCredential(args.identityProvider, args.identifier, args.password, args.keepLoggedIn, args.accessLocation, args.systemName, args.certificate);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing loginWithIdentityCredential", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing loginWithIdentityCredential");
        oprot.writeMessageBegin(new TMessage("loginWithIdentityCredential", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("loginWithIdentityCredential", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function loginWithIdentityCredentialForCertificate() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : LoginWithIdentityCredentialForCertificate_args = new LoginWithIdentityCredentialForCertificate_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : LoginWithIdentityCredentialForCertificate_result = new LoginWithIdentityCredentialForCertificate_result();
      try {
        result.success = TalkService_iface_.loginWithIdentityCredentialForCertificate(args.identityProvider, args.identifier, args.password, args.keepLoggedIn, args.accessLocation, args.systemName, args.certificate);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing loginWithIdentityCredentialForCertificate", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing loginWithIdentityCredentialForCertificate");
        oprot.writeMessageBegin(new TMessage("loginWithIdentityCredentialForCertificate", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("loginWithIdentityCredentialForCertificate", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function loginWithVerifier() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : LoginWithVerifier_args = new LoginWithVerifier_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : LoginWithVerifier_result = new LoginWithVerifier_result();
      try {
        result.success = TalkService_iface_.loginWithVerifier(args.verifier);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing loginWithVerifier", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing loginWithVerifier");
        oprot.writeMessageBegin(new TMessage("loginWithVerifier", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("loginWithVerifier", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function loginWithVerifierForCerificate() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : LoginWithVerifierForCerificate_args = new LoginWithVerifierForCerificate_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : LoginWithVerifierForCerificate_result = new LoginWithVerifierForCerificate_result();
      try {
        result.success = TalkService_iface_.loginWithVerifierForCerificate(args.verifier);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing loginWithVerifierForCerificate", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing loginWithVerifierForCerificate");
        oprot.writeMessageBegin(new TMessage("loginWithVerifierForCerificate", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("loginWithVerifierForCerificate", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function loginWithVerifierForCertificate() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : LoginWithVerifierForCertificate_args = new LoginWithVerifierForCertificate_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : LoginWithVerifierForCertificate_result = new LoginWithVerifierForCertificate_result();
      try {
        result.success = TalkService_iface_.loginWithVerifierForCertificate(args.verifier);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing loginWithVerifierForCertificate", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing loginWithVerifierForCertificate");
        oprot.writeMessageBegin(new TMessage("loginWithVerifierForCertificate", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("loginWithVerifierForCertificate", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function logout() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : Logout_args = new Logout_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : Logout_result = new Logout_result();
      try {
        TalkService_iface_.logout();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing logout", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing logout");
        oprot.writeMessageBegin(new TMessage("logout", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("logout", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function logoutSession() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : LogoutSession_args = new LogoutSession_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : LogoutSession_result = new LogoutSession_result();
      try {
        TalkService_iface_.logoutSession(args.tokenKey);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing logoutSession", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing logoutSession");
        oprot.writeMessageBegin(new TMessage("logoutSession", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("logoutSession", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function noop() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : Noop_args = new Noop_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : Noop_result = new Noop_result();
      try {
        TalkService_iface_.noop();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing noop", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing noop");
        oprot.writeMessageBegin(new TMessage("noop", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("noop", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function notifiedRedirect() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : NotifiedRedirect_args = new NotifiedRedirect_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : NotifiedRedirect_result = new NotifiedRedirect_result();
      try {
        TalkService_iface_.notifiedRedirect(args.paramMap);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing notifiedRedirect", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifiedRedirect");
        oprot.writeMessageBegin(new TMessage("notifiedRedirect", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("notifiedRedirect", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function notifyBuddyOnAir() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : NotifyBuddyOnAir_args = new NotifyBuddyOnAir_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : NotifyBuddyOnAir_result = new NotifyBuddyOnAir_result();
      try {
        result.success = TalkService_iface_.notifyBuddyOnAir(args.seq, args.receiverMids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing notifyBuddyOnAir", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyBuddyOnAir");
        oprot.writeMessageBegin(new TMessage("notifyBuddyOnAir", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("notifyBuddyOnAir", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function notifyIndividualEvent() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : NotifyIndividualEvent_args = new NotifyIndividualEvent_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : NotifyIndividualEvent_result = new NotifyIndividualEvent_result();
      try {
        TalkService_iface_.notifyIndividualEvent(args.notificationStatus, args.receiverMids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing notifyIndividualEvent", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyIndividualEvent");
        oprot.writeMessageBegin(new TMessage("notifyIndividualEvent", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("notifyIndividualEvent", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function notifyInstalled() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : NotifyInstalled_args = new NotifyInstalled_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : NotifyInstalled_result = new NotifyInstalled_result();
      try {
        TalkService_iface_.notifyInstalled(args.udidHash, args.applicationTypeWithExtensions);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing notifyInstalled", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyInstalled");
        oprot.writeMessageBegin(new TMessage("notifyInstalled", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("notifyInstalled", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function notifyRegistrationComplete() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : NotifyRegistrationComplete_args = new NotifyRegistrationComplete_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : NotifyRegistrationComplete_result = new NotifyRegistrationComplete_result();
      try {
        TalkService_iface_.notifyRegistrationComplete(args.udidHash, args.applicationTypeWithExtensions);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing notifyRegistrationComplete", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyRegistrationComplete");
        oprot.writeMessageBegin(new TMessage("notifyRegistrationComplete", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("notifyRegistrationComplete", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function notifySleep() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : NotifySleep_args = new NotifySleep_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : NotifySleep_result = new NotifySleep_result();
      try {
        TalkService_iface_.notifySleep(args.lastRev, args.badge);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing notifySleep", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifySleep");
        oprot.writeMessageBegin(new TMessage("notifySleep", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("notifySleep", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function notifyUpdated() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : NotifyUpdated_args = new NotifyUpdated_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : NotifyUpdated_result = new NotifyUpdated_result();
      try {
        TalkService_iface_.notifyUpdated(args.lastRev, args.deviceInfo);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing notifyUpdated", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyUpdated");
        oprot.writeMessageBegin(new TMessage("notifyUpdated", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("notifyUpdated", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function openProximityMatch() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : OpenProximityMatch_args = new OpenProximityMatch_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : OpenProximityMatch_result = new OpenProximityMatch_result();
      try {
        result.success = TalkService_iface_.openProximityMatch(args.location);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing openProximityMatch", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing openProximityMatch");
        oprot.writeMessageBegin(new TMessage("openProximityMatch", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("openProximityMatch", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function registerBuddyUser() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RegisterBuddyUser_args = new RegisterBuddyUser_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RegisterBuddyUser_result = new RegisterBuddyUser_result();
      try {
        result.success = TalkService_iface_.registerBuddyUser(args.buddyId, args.registrarPassword);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing registerBuddyUser", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerBuddyUser");
        oprot.writeMessageBegin(new TMessage("registerBuddyUser", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("registerBuddyUser", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function registerBuddyUserid() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RegisterBuddyUserid_args = new RegisterBuddyUserid_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RegisterBuddyUserid_result = new RegisterBuddyUserid_result();
      try {
        TalkService_iface_.registerBuddyUserid(args.seq, args.userid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing registerBuddyUserid", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerBuddyUserid");
        oprot.writeMessageBegin(new TMessage("registerBuddyUserid", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("registerBuddyUserid", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function registerDevice() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RegisterDevice_args = new RegisterDevice_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RegisterDevice_result = new RegisterDevice_result();
      try {
        result.success = TalkService_iface_.registerDevice(args.sessionId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing registerDevice", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerDevice");
        oprot.writeMessageBegin(new TMessage("registerDevice", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("registerDevice", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function registerDeviceWithIdentityCredential() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RegisterDeviceWithIdentityCredential_args = new RegisterDeviceWithIdentityCredential_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RegisterDeviceWithIdentityCredential_result = new RegisterDeviceWithIdentityCredential_result();
      try {
        result.success = TalkService_iface_.registerDeviceWithIdentityCredential(args.sessionId, args.provider, args.identifier, args.verifier);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing registerDeviceWithIdentityCredential", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerDeviceWithIdentityCredential");
        oprot.writeMessageBegin(new TMessage("registerDeviceWithIdentityCredential", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("registerDeviceWithIdentityCredential", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function registerDeviceWithoutPhoneNumber() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RegisterDeviceWithoutPhoneNumber_args = new RegisterDeviceWithoutPhoneNumber_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RegisterDeviceWithoutPhoneNumber_result = new RegisterDeviceWithoutPhoneNumber_result();
      try {
        result.success = TalkService_iface_.registerDeviceWithoutPhoneNumber(args.region, args.udidHash, args.deviceInfo);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing registerDeviceWithoutPhoneNumber", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerDeviceWithoutPhoneNumber");
        oprot.writeMessageBegin(new TMessage("registerDeviceWithoutPhoneNumber", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("registerDeviceWithoutPhoneNumber", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function registerDeviceWithoutPhoneNumberWithIdentityCredential() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RegisterDeviceWithoutPhoneNumberWithIdentityCredential_args = new RegisterDeviceWithoutPhoneNumberWithIdentityCredential_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RegisterDeviceWithoutPhoneNumberWithIdentityCredential_result = new RegisterDeviceWithoutPhoneNumberWithIdentityCredential_result();
      try {
        result.success = TalkService_iface_.registerDeviceWithoutPhoneNumberWithIdentityCredential(args.region, args.udidHash, args.deviceInfo, args.provider, args.identifier, args.verifier, args.mid, args.migrationPincodeSessionId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing registerDeviceWithoutPhoneNumberWithIdentityCredential", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerDeviceWithoutPhoneNumberWithIdentityCredential");
        oprot.writeMessageBegin(new TMessage("registerDeviceWithoutPhoneNumberWithIdentityCredential", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("registerDeviceWithoutPhoneNumberWithIdentityCredential", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function registerUserid() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RegisterUserid_args = new RegisterUserid_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RegisterUserid_result = new RegisterUserid_result();
      try {
        result.success = TalkService_iface_.registerUserid(args.reqSeq, args.userid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing registerUserid", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerUserid");
        oprot.writeMessageBegin(new TMessage("registerUserid", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("registerUserid", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function registerWapDevice() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RegisterWapDevice_args = new RegisterWapDevice_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RegisterWapDevice_result = new RegisterWapDevice_result();
      try {
        result.success = TalkService_iface_.registerWapDevice(args.invitationHash, args.guidHash, args.email, args.deviceInfo);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing registerWapDevice", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerWapDevice");
        oprot.writeMessageBegin(new TMessage("registerWapDevice", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("registerWapDevice", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function registerWithExistingSnsIdAndIdentityCredential() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RegisterWithExistingSnsIdAndIdentityCredential_args = new RegisterWithExistingSnsIdAndIdentityCredential_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RegisterWithExistingSnsIdAndIdentityCredential_result = new RegisterWithExistingSnsIdAndIdentityCredential_result();
      try {
        result.success = TalkService_iface_.registerWithExistingSnsIdAndIdentityCredential(args.identityCredential, args.region, args.udidHash, args.deviceInfo);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing registerWithExistingSnsIdAndIdentityCredential", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerWithExistingSnsIdAndIdentityCredential");
        oprot.writeMessageBegin(new TMessage("registerWithExistingSnsIdAndIdentityCredential", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("registerWithExistingSnsIdAndIdentityCredential", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function registerWithSnsId() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RegisterWithSnsId_args = new RegisterWithSnsId_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RegisterWithSnsId_result = new RegisterWithSnsId_result();
      try {
        result.success = TalkService_iface_.registerWithSnsId(args.snsIdType, args.snsAccessToken, args.region, args.udidHash, args.deviceInfo, args.mid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing registerWithSnsId", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerWithSnsId");
        oprot.writeMessageBegin(new TMessage("registerWithSnsId", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("registerWithSnsId", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function registerWithSnsIdAndIdentityCredential() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RegisterWithSnsIdAndIdentityCredential_args = new RegisterWithSnsIdAndIdentityCredential_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RegisterWithSnsIdAndIdentityCredential_result = new RegisterWithSnsIdAndIdentityCredential_result();
      try {
        result.success = TalkService_iface_.registerWithSnsIdAndIdentityCredential(args.snsIdType, args.snsAccessToken, args.identityCredential, args.region, args.udidHash, args.deviceInfo);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing registerWithSnsIdAndIdentityCredential", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerWithSnsIdAndIdentityCredential");
        oprot.writeMessageBegin(new TMessage("registerWithSnsIdAndIdentityCredential", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("registerWithSnsIdAndIdentityCredential", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function reissueDeviceCredential() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ReissueDeviceCredential_args = new ReissueDeviceCredential_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ReissueDeviceCredential_result = new ReissueDeviceCredential_result();
      try {
        result.success = TalkService_iface_.reissueDeviceCredential();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing reissueDeviceCredential", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reissueDeviceCredential");
        oprot.writeMessageBegin(new TMessage("reissueDeviceCredential", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("reissueDeviceCredential", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function reissueUserTicket() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ReissueUserTicket_args = new ReissueUserTicket_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ReissueUserTicket_result = new ReissueUserTicket_result();
      try {
        result.success = TalkService_iface_.reissueUserTicket(args.expirationTime, args.maxUseCount);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing reissueUserTicket", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reissueUserTicket");
        oprot.writeMessageBegin(new TMessage("reissueUserTicket", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("reissueUserTicket", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getMessageReadRange() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetMessageReadRange_args = new GetMessageReadRange_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetMessageReadRange_result = new GetMessageReadRange_result();
      try {
        result.success = TalkService_iface_.getMessageReadRange(args.chatIds);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getMessageReadRange", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageReadRange");
        oprot.writeMessageBegin(new TMessage("getMessageReadRange", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getMessageReadRange", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function rejectGroupInvitation() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RejectGroupInvitation_args = new RejectGroupInvitation_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RejectGroupInvitation_result = new RejectGroupInvitation_result();
      try {
        TalkService_iface_.rejectGroupInvitation(args.reqSeq, args.groupId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing rejectGroupInvitation", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing rejectGroupInvitation");
        oprot.writeMessageBegin(new TMessage("rejectGroupInvitation", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("rejectGroupInvitation", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function releaseSession() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ReleaseSession_args = new ReleaseSession_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ReleaseSession_result = new ReleaseSession_result();
      try {
        TalkService_iface_.releaseSession();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing releaseSession", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing releaseSession");
        oprot.writeMessageBegin(new TMessage("releaseSession", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("releaseSession", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function removeAllMessages() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RemoveAllMessages_args = new RemoveAllMessages_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RemoveAllMessages_result = new RemoveAllMessages_result();
      try {
        TalkService_iface_.removeAllMessages(args.seq, args.lastMessageId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing removeAllMessages", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeAllMessages");
        oprot.writeMessageBegin(new TMessage("removeAllMessages", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("removeAllMessages", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function removeBuddyLocation() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RemoveBuddyLocation_args = new RemoveBuddyLocation_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RemoveBuddyLocation_result = new RemoveBuddyLocation_result();
      try {
        TalkService_iface_.removeBuddyLocation(args.mid, args.index);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing removeBuddyLocation", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeBuddyLocation");
        oprot.writeMessageBegin(new TMessage("removeBuddyLocation", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("removeBuddyLocation", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function removeMessage() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RemoveMessage_args = new RemoveMessage_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RemoveMessage_result = new RemoveMessage_result();
      try {
        result.success = TalkService_iface_.removeMessage(args.messageId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing removeMessage", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeMessage");
        oprot.writeMessageBegin(new TMessage("removeMessage", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("removeMessage", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function makeUserAddMyselfAsContact() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : MakeUserAddMyselfAsContact_args = new MakeUserAddMyselfAsContact_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : MakeUserAddMyselfAsContact_result = new MakeUserAddMyselfAsContact_result();
      try {
        result.success = TalkService_iface_.makeUserAddMyselfAsContact(args.contactOwnerMid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing makeUserAddMyselfAsContact", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing makeUserAddMyselfAsContact");
        oprot.writeMessageBegin(new TMessage("makeUserAddMyselfAsContact", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("makeUserAddMyselfAsContact", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function removeMessageFromMyHome() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RemoveMessageFromMyHome_args = new RemoveMessageFromMyHome_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RemoveMessageFromMyHome_result = new RemoveMessageFromMyHome_result();
      try {
        result.success = TalkService_iface_.removeMessageFromMyHome(args.messageId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing removeMessageFromMyHome", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeMessageFromMyHome");
        oprot.writeMessageBegin(new TMessage("removeMessageFromMyHome", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("removeMessageFromMyHome", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function removeSnsId() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RemoveSnsId_args = new RemoveSnsId_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RemoveSnsId_result = new RemoveSnsId_result();
      try {
        result.success = TalkService_iface_.removeSnsId(args.snsIdType);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing removeSnsId", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeSnsId");
        oprot.writeMessageBegin(new TMessage("removeSnsId", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("removeSnsId", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function report() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : Report_args = new Report_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : Report_result = new Report_result();
      try {
        TalkService_iface_.report(args.syncOpRevision, args.category, args.report);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing report", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing report");
        oprot.writeMessageBegin(new TMessage("report", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("report", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function reportContacts() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ReportContacts_args = new ReportContacts_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ReportContacts_result = new ReportContacts_result();
      try {
        result.success = TalkService_iface_.reportContacts(args.syncOpRevision, args.category, args.contactReports, args.actionType);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing reportContacts", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reportContacts");
        oprot.writeMessageBegin(new TMessage("reportContacts", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("reportContacts", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function reportGroups() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ReportGroups_args = new ReportGroups_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ReportGroups_result = new ReportGroups_result();
      try {
        TalkService_iface_.reportGroups(args.syncOpRevision, args.groups);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing reportGroups", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reportGroups");
        oprot.writeMessageBegin(new TMessage("reportGroups", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("reportGroups", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function reportProfile() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ReportProfile_args = new ReportProfile_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ReportProfile_result = new ReportProfile_result();
      try {
        TalkService_iface_.reportProfile(args.syncOpRevision, args.profile);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing reportProfile", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reportProfile");
        oprot.writeMessageBegin(new TMessage("reportProfile", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("reportProfile", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function reportRooms() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ReportRooms_args = new ReportRooms_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ReportRooms_result = new ReportRooms_result();
      try {
        TalkService_iface_.reportRooms(args.syncOpRevision, args.rooms);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing reportRooms", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reportRooms");
        oprot.writeMessageBegin(new TMessage("reportRooms", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("reportRooms", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function findAndAddContactByMetaTag() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FindAndAddContactByMetaTag_args = new FindAndAddContactByMetaTag_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FindAndAddContactByMetaTag_result = new FindAndAddContactByMetaTag_result();
      try {
        result.success = TalkService_iface_.findAndAddContactByMetaTag(args.reqSeq, args.userid, args.reference);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing findAndAddContactByMetaTag", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findAndAddContactByMetaTag");
        oprot.writeMessageBegin(new TMessage("findAndAddContactByMetaTag", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("findAndAddContactByMetaTag", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function reportSettings() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ReportSettings_args = new ReportSettings_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ReportSettings_result = new ReportSettings_result();
      try {
        TalkService_iface_.reportSettings(args.syncOpRevision, args.settings);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing reportSettings", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reportSettings");
        oprot.writeMessageBegin(new TMessage("reportSettings", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("reportSettings", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function reportSpam() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ReportSpam_args = new ReportSpam_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ReportSpam_result = new ReportSpam_result();
      try {
        TalkService_iface_.reportSpam(args.chatMid, args.memberMids, args.spammerReasons, args.senderMids, args.spamMessageIds, args.spamMessages);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing reportSpam", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reportSpam");
        oprot.writeMessageBegin(new TMessage("reportSpam", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("reportSpam", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function reportSpammer() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ReportSpammer_args = new ReportSpammer_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ReportSpammer_result = new ReportSpammer_result();
      try {
        TalkService_iface_.reportSpammer(args.spammerMid, args.spammerReasons, args.spamMessageIds);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing reportSpammer", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reportSpammer");
        oprot.writeMessageBegin(new TMessage("reportSpammer", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("reportSpammer", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function requestAccountPasswordReset() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RequestAccountPasswordReset_args = new RequestAccountPasswordReset_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RequestAccountPasswordReset_result = new RequestAccountPasswordReset_result();
      try {
        TalkService_iface_.requestAccountPasswordReset(args.provider, args.identifier, args.locale);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing requestAccountPasswordReset", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing requestAccountPasswordReset");
        oprot.writeMessageBegin(new TMessage("requestAccountPasswordReset", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("requestAccountPasswordReset", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function requestEmailConfirmation() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RequestEmailConfirmation_args = new RequestEmailConfirmation_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RequestEmailConfirmation_result = new RequestEmailConfirmation_result();
      try {
        result.success = TalkService_iface_.requestEmailConfirmation(args.emailConfirmation);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing requestEmailConfirmation", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing requestEmailConfirmation");
        oprot.writeMessageBegin(new TMessage("requestEmailConfirmation", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("requestEmailConfirmation", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function requestIdentityUnbind() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RequestIdentityUnbind_args = new RequestIdentityUnbind_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RequestIdentityUnbind_result = new RequestIdentityUnbind_result();
      try {
        TalkService_iface_.requestIdentityUnbind(args.provider, args.identifier);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing requestIdentityUnbind", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing requestIdentityUnbind");
        oprot.writeMessageBegin(new TMessage("requestIdentityUnbind", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("requestIdentityUnbind", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function resendEmailConfirmation() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ResendEmailConfirmation_args = new ResendEmailConfirmation_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ResendEmailConfirmation_result = new ResendEmailConfirmation_result();
      try {
        result.success = TalkService_iface_.resendEmailConfirmation(args.verifier);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing resendEmailConfirmation", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing resendEmailConfirmation");
        oprot.writeMessageBegin(new TMessage("resendEmailConfirmation", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("resendEmailConfirmation", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function resendPinCode() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ResendPinCode_args = new ResendPinCode_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ResendPinCode_result = new ResendPinCode_result();
      try {
        TalkService_iface_.resendPinCode(args.sessionId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing resendPinCode", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing resendPinCode");
        oprot.writeMessageBegin(new TMessage("resendPinCode", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("resendPinCode", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function resendPinCodeBySMS() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ResendPinCodeBySMS_args = new ResendPinCodeBySMS_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ResendPinCodeBySMS_result = new ResendPinCodeBySMS_result();
      try {
        TalkService_iface_.resendPinCodeBySMS(args.sessionId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing resendPinCodeBySMS", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing resendPinCodeBySMS");
        oprot.writeMessageBegin(new TMessage("resendPinCodeBySMS", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("resendPinCodeBySMS", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function sendChatChecked() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SendChatChecked_args = new SendChatChecked_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SendChatChecked_result = new SendChatChecked_result();
      try {
        TalkService_iface_.sendChatChecked(args.seq, args.consumer, args.lastMessageId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing sendChatChecked", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendChatChecked");
        oprot.writeMessageBegin(new TMessage("sendChatChecked", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("sendChatChecked", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function sendMessageAwaitCommit() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SendMessageAwaitCommit_args = new SendMessageAwaitCommit_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SendMessageAwaitCommit_result = new SendMessageAwaitCommit_result();
      try {
        result.success = TalkService_iface_.sendMessageAwaitCommit(args.seq, args.message);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing sendMessageAwaitCommit", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendMessageAwaitCommit");
        oprot.writeMessageBegin(new TMessage("sendMessageAwaitCommit", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("sendMessageAwaitCommit", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function sendChatRemoved() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SendChatRemoved_args = new SendChatRemoved_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SendChatRemoved_result = new SendChatRemoved_result();
      try {
        TalkService_iface_.sendChatRemoved(args.seq, args.consumer, args.lastMessageId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing sendChatRemoved", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendChatRemoved");
        oprot.writeMessageBegin(new TMessage("sendChatRemoved", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("sendChatRemoved", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function sendContentPreviewUpdated() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SendContentPreviewUpdated_args = new SendContentPreviewUpdated_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SendContentPreviewUpdated_result = new SendContentPreviewUpdated_result();
      try {
        result.success = TalkService_iface_.sendContentPreviewUpdated(args.esq, args.messageId, args.receiverMids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing sendContentPreviewUpdated", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendContentPreviewUpdated");
        oprot.writeMessageBegin(new TMessage("sendContentPreviewUpdated", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("sendContentPreviewUpdated", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function sendContentReceipt() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SendContentReceipt_args = new SendContentReceipt_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SendContentReceipt_result = new SendContentReceipt_result();
      try {
        TalkService_iface_.sendContentReceipt(args.seq, args.consumer, args.messageId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing sendContentReceipt", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendContentReceipt");
        oprot.writeMessageBegin(new TMessage("sendContentReceipt", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("sendContentReceipt", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function sendDummyPush() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SendDummyPush_args = new SendDummyPush_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SendDummyPush_result = new SendDummyPush_result();
      try {
        TalkService_iface_.sendDummyPush();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing sendDummyPush", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendDummyPush");
        oprot.writeMessageBegin(new TMessage("sendDummyPush", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("sendDummyPush", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function removeE2EEPublicKey() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RemoveE2EEPublicKey_args = new RemoveE2EEPublicKey_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RemoveE2EEPublicKey_result = new RemoveE2EEPublicKey_result();
      try {
        TalkService_iface_.removeE2EEPublicKey(args.publicKey);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing removeE2EEPublicKey", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeE2EEPublicKey");
        oprot.writeMessageBegin(new TMessage("removeE2EEPublicKey", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("removeE2EEPublicKey", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function negotiateE2EEPublicKey() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : NegotiateE2EEPublicKey_args = new NegotiateE2EEPublicKey_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : NegotiateE2EEPublicKey_result = new NegotiateE2EEPublicKey_result();
      try {
        result.success = TalkService_iface_.negotiateE2EEPublicKey(args.mid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing negotiateE2EEPublicKey", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing negotiateE2EEPublicKey");
        oprot.writeMessageBegin(new TMessage("negotiateE2EEPublicKey", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("negotiateE2EEPublicKey", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getE2EEPublicKey() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetE2EEPublicKey_args = new GetE2EEPublicKey_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetE2EEPublicKey_result = new GetE2EEPublicKey_result();
      try {
        result.success = TalkService_iface_.getE2EEPublicKey(args.mid, args.version, args.keyId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getE2EEPublicKey", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getE2EEPublicKey");
        oprot.writeMessageBegin(new TMessage("getE2EEPublicKey", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getE2EEPublicKey", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function requestE2EEKeyExchange() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RequestE2EEKeyExchange_args = new RequestE2EEKeyExchange_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RequestE2EEKeyExchange_result = new RequestE2EEKeyExchange_result();
      try {
        TalkService_iface_.requestE2EEKeyExchange(args.reqSeq, args.temporalPublicKey, args.publicKey, args.verifier);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing requestE2EEKeyExchange", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing requestE2EEKeyExchange");
        oprot.writeMessageBegin(new TMessage("requestE2EEKeyExchange", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("requestE2EEKeyExchange", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getLastE2EEPublicKeys() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetLastE2EEPublicKeys_args = new GetLastE2EEPublicKeys_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetLastE2EEPublicKeys_result = new GetLastE2EEPublicKeys_result();
      try {
        result.success = TalkService_iface_.getLastE2EEPublicKeys(args.chatMid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getLastE2EEPublicKeys", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getLastE2EEPublicKeys");
        oprot.writeMessageBegin(new TMessage("getLastE2EEPublicKeys", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getLastE2EEPublicKeys", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function registerE2EEPublicKey() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RegisterE2EEPublicKey_args = new RegisterE2EEPublicKey_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RegisterE2EEPublicKey_result = new RegisterE2EEPublicKey_result();
      try {
        result.success = TalkService_iface_.registerE2EEPublicKey(args.reqSeq, args.publicKey);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing registerE2EEPublicKey", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerE2EEPublicKey");
        oprot.writeMessageBegin(new TMessage("registerE2EEPublicKey", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("registerE2EEPublicKey", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getE2EEPublicKeys() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetE2EEPublicKeys_args = new GetE2EEPublicKeys_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetE2EEPublicKeys_result = new GetE2EEPublicKeys_result();
      try {
        result.success = TalkService_iface_.getE2EEPublicKeys();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getE2EEPublicKeys", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getE2EEPublicKeys");
        oprot.writeMessageBegin(new TMessage("getE2EEPublicKeys", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getE2EEPublicKeys", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getE2EEPublicKeysEx() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetE2EEPublicKeysEx_args = new GetE2EEPublicKeysEx_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetE2EEPublicKeysEx_result = new GetE2EEPublicKeysEx_result();
      try {
        result.success = TalkService_iface_.getE2EEPublicKeysEx(args.ignoreE2EEStatus);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getE2EEPublicKeysEx", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getE2EEPublicKeysEx");
        oprot.writeMessageBegin(new TMessage("getE2EEPublicKeysEx", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getE2EEPublicKeysEx", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getReadMessageOpsInBulk() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetReadMessageOpsInBulk_args = new GetReadMessageOpsInBulk_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetReadMessageOpsInBulk_result = new GetReadMessageOpsInBulk_result();
      try {
        result.success = TalkService_iface_.getReadMessageOpsInBulk(args.chatIds);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getReadMessageOpsInBulk", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getReadMessageOpsInBulk");
        oprot.writeMessageBegin(new TMessage("getReadMessageOpsInBulk", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getReadMessageOpsInBulk", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function sendEvent() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SendEvent_args = new SendEvent_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SendEvent_result = new SendEvent_result();
      try {
        result.success = TalkService_iface_.sendEvent(args.seq, args.message);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing sendEvent", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendEvent");
        oprot.writeMessageBegin(new TMessage("sendEvent", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("sendEvent", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function sendMessage() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SendMessage_args = new SendMessage_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SendMessage_result = new SendMessage_result();
      try {
        result.success = TalkService_iface_.sendMessage(args.seq, args.message);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing sendMessage", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendMessage");
        oprot.writeMessageBegin(new TMessage("sendMessage", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("sendMessage", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function sendMessageIgnored() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SendMessageIgnored_args = new SendMessageIgnored_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SendMessageIgnored_result = new SendMessageIgnored_result();
      try {
        TalkService_iface_.sendMessageIgnored(args.seq, args.consumer, args.messageIds);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing sendMessageIgnored", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendMessageIgnored");
        oprot.writeMessageBegin(new TMessage("sendMessageIgnored", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("sendMessageIgnored", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function sendMessageReceipt() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SendMessageReceipt_args = new SendMessageReceipt_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SendMessageReceipt_result = new SendMessageReceipt_result();
      try {
        TalkService_iface_.sendMessageReceipt(args.seq, args.consumer, args.messageIds);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing sendMessageReceipt", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendMessageReceipt");
        oprot.writeMessageBegin(new TMessage("sendMessageReceipt", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("sendMessageReceipt", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function findContactByMetaTag() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FindContactByMetaTag_args = new FindContactByMetaTag_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FindContactByMetaTag_result = new FindContactByMetaTag_result();
      try {
        result.success = TalkService_iface_.findContactByMetaTag(args.userid, args.reference);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing findContactByMetaTag", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findContactByMetaTag");
        oprot.writeMessageBegin(new TMessage("findContactByMetaTag", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("findContactByMetaTag", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function sendMessageToMyHome() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SendMessageToMyHome_args = new SendMessageToMyHome_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SendMessageToMyHome_result = new SendMessageToMyHome_result();
      try {
        result.success = TalkService_iface_.sendMessageToMyHome(args.seq, args.message);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing sendMessageToMyHome", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendMessageToMyHome");
        oprot.writeMessageBegin(new TMessage("sendMessageToMyHome", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("sendMessageToMyHome", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function setBuddyLocation() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SetBuddyLocation_args = new SetBuddyLocation_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SetBuddyLocation_result = new SetBuddyLocation_result();
      try {
        TalkService_iface_.setBuddyLocation(args.mid, args.index, args.location);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing setBuddyLocation", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing setBuddyLocation");
        oprot.writeMessageBegin(new TMessage("setBuddyLocation", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("setBuddyLocation", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function setIdentityCredential() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SetIdentityCredential_args = new SetIdentityCredential_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SetIdentityCredential_result = new SetIdentityCredential_result();
      try {
        TalkService_iface_.setIdentityCredential(args.identifier, args.verifier, args.provider);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing setIdentityCredential", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing setIdentityCredential");
        oprot.writeMessageBegin(new TMessage("setIdentityCredential", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("setIdentityCredential", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function setNotificationsEnabled() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SetNotificationsEnabled_args = new SetNotificationsEnabled_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SetNotificationsEnabled_result = new SetNotificationsEnabled_result();
      try {
        TalkService_iface_.setNotificationsEnabled(args.reqSeq, args.type, args.target, args.enablement);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing setNotificationsEnabled", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing setNotificationsEnabled");
        oprot.writeMessageBegin(new TMessage("setNotificationsEnabled", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("setNotificationsEnabled", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function startUpdateVerification() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : StartUpdateVerification_args = new StartUpdateVerification_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : StartUpdateVerification_result = new StartUpdateVerification_result();
      try {
        result.success = TalkService_iface_.startUpdateVerification(args.region, args.carrier, args.phone, args.udidHash, args.deviceInfo, args.networkCode, args.locale);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing startUpdateVerification", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing startUpdateVerification");
        oprot.writeMessageBegin(new TMessage("startUpdateVerification", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("startUpdateVerification", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function startVerification() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : StartVerification_args = new StartVerification_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : StartVerification_result = new StartVerification_result();
      try {
        result.success = TalkService_iface_.startVerification(args.region, args.carrier, args.phone, args.udidHash, args.deviceInfo, args.networkCode, args.mid, args.locale, args.simInfo, args.oldUdidHash);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing startVerification", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing startVerification");
        oprot.writeMessageBegin(new TMessage("startVerification", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("startVerification", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateGroupPreferenceAttribute() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateGroupPreferenceAttribute_args = new UpdateGroupPreferenceAttribute_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateGroupPreferenceAttribute_result = new UpdateGroupPreferenceAttribute_result();
      try {
        TalkService_iface_.updateGroupPreferenceAttribute(args.reqSeq, args.groupMid, args.updatedAttrs);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateGroupPreferenceAttribute", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateGroupPreferenceAttribute");
        oprot.writeMessageBegin(new TMessage("updateGroupPreferenceAttribute", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateGroupPreferenceAttribute", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function createRoomV2() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : CreateRoomV2_args = new CreateRoomV2_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : CreateRoomV2_result = new CreateRoomV2_result();
      try {
        result.success = TalkService_iface_.createRoomV2(args.reqSeq, args.contactIds);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing createRoomV2", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createRoomV2");
        oprot.writeMessageBegin(new TMessage("createRoomV2", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("createRoomV2", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function storeUpdateProfileAttribute() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : StoreUpdateProfileAttribute_args = new StoreUpdateProfileAttribute_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : StoreUpdateProfileAttribute_result = new StoreUpdateProfileAttribute_result();
      try {
        TalkService_iface_.storeUpdateProfileAttribute(args.seq, args.profileAttribute, args.value);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing storeUpdateProfileAttribute", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing storeUpdateProfileAttribute");
        oprot.writeMessageBegin(new TMessage("storeUpdateProfileAttribute", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("storeUpdateProfileAttribute", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function syncContactBySnsIds() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SyncContactBySnsIds_args = new SyncContactBySnsIds_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SyncContactBySnsIds_result = new SyncContactBySnsIds_result();
      try {
        result.success = TalkService_iface_.syncContactBySnsIds(args.reqSeq, args.modifications);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing syncContactBySnsIds", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing syncContactBySnsIds");
        oprot.writeMessageBegin(new TMessage("syncContactBySnsIds", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("syncContactBySnsIds", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function syncContacts() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SyncContacts_args = new SyncContacts_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SyncContacts_result = new SyncContacts_result();
      try {
        result.success = TalkService_iface_.syncContacts(args.reqSeq, args.localContacts);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing syncContacts", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing syncContacts");
        oprot.writeMessageBegin(new TMessage("syncContacts", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("syncContacts", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function trySendMessage() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : TrySendMessage_args = new TrySendMessage_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : TrySendMessage_result = new TrySendMessage_result();
      try {
        result.success = TalkService_iface_.trySendMessage(args.seq, args.message);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing trySendMessage", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing trySendMessage");
        oprot.writeMessageBegin(new TMessage("trySendMessage", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("trySendMessage", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getNextMessagesV2() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetNextMessagesV2_args = new GetNextMessagesV2_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetNextMessagesV2_result = new GetNextMessagesV2_result();
      try {
        result.success = TalkService_iface_.getNextMessagesV2(args.messageBoxId, args.startMessageId, args.messagesCount);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getNextMessagesV2", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNextMessagesV2");
        oprot.writeMessageBegin(new TMessage("getNextMessagesV2", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getNextMessagesV2", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getMessageBoxCompactWrapUpV2() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetMessageBoxCompactWrapUpV2_args = new GetMessageBoxCompactWrapUpV2_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetMessageBoxCompactWrapUpV2_result = new GetMessageBoxCompactWrapUpV2_result();
      try {
        result.success = TalkService_iface_.getMessageBoxCompactWrapUpV2(args.messageBoxId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getMessageBoxCompactWrapUpV2", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageBoxCompactWrapUpV2");
        oprot.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUpV2", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUpV2", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getRecentMessagesV2() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetRecentMessagesV2_args = new GetRecentMessagesV2_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetRecentMessagesV2_result = new GetRecentMessagesV2_result();
      try {
        result.success = TalkService_iface_.getRecentMessagesV2(args.messageBoxId, args.messagesCount);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getRecentMessagesV2", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRecentMessagesV2");
        oprot.writeMessageBegin(new TMessage("getRecentMessagesV2", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getRecentMessagesV2", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function validateContactsOnBot() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ValidateContactsOnBot_args = new ValidateContactsOnBot_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ValidateContactsOnBot_result = new ValidateContactsOnBot_result();
      try {
        result.success = TalkService_iface_.validateContactsOnBot(args.contacts);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing validateContactsOnBot", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing validateContactsOnBot");
        oprot.writeMessageBegin(new TMessage("validateContactsOnBot", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("validateContactsOnBot", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function tryFriendRequest() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : TryFriendRequest_args = new TryFriendRequest_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : TryFriendRequest_result = new TryFriendRequest_result();
      try {
        TalkService_iface_.tryFriendRequest(args.midOrEMid, args.method, args.friendRequestParams);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing tryFriendRequest", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing tryFriendRequest");
        oprot.writeMessageBegin(new TMessage("tryFriendRequest", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("tryFriendRequest", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function unblockContact() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UnblockContact_args = new UnblockContact_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UnblockContact_result = new UnblockContact_result();
      try {
        TalkService_iface_.unblockContact(args.reqSeq, args.id);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing unblockContact", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing unblockContact");
        oprot.writeMessageBegin(new TMessage("unblockContact", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("unblockContact", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function unblockRecommendation() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UnblockRecommendation_args = new UnblockRecommendation_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UnblockRecommendation_result = new UnblockRecommendation_result();
      try {
        TalkService_iface_.unblockRecommendation(args.reqSeq, args.id);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing unblockRecommendation", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing unblockRecommendation");
        oprot.writeMessageBegin(new TMessage("unblockRecommendation", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("unblockRecommendation", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function unregisterUserAndDevice() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UnregisterUserAndDevice_args = new UnregisterUserAndDevice_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UnregisterUserAndDevice_result = new UnregisterUserAndDevice_result();
      try {
        result.success = TalkService_iface_.unregisterUserAndDevice();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing unregisterUserAndDevice", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing unregisterUserAndDevice");
        oprot.writeMessageBegin(new TMessage("unregisterUserAndDevice", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("unregisterUserAndDevice", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateApnsDeviceToken() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateApnsDeviceToken_args = new UpdateApnsDeviceToken_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateApnsDeviceToken_result = new UpdateApnsDeviceToken_result();
      try {
        TalkService_iface_.updateApnsDeviceToken(args.apnsDeviceToken);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateApnsDeviceToken", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateApnsDeviceToken");
        oprot.writeMessageBegin(new TMessage("updateApnsDeviceToken", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateApnsDeviceToken", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateBuddySetting() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateBuddySetting_args = new UpdateBuddySetting_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateBuddySetting_result = new UpdateBuddySetting_result();
      try {
        TalkService_iface_.updateBuddySetting(args.key, args.value);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateBuddySetting", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateBuddySetting");
        oprot.writeMessageBegin(new TMessage("updateBuddySetting", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateBuddySetting", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateC2DMRegistrationId() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateC2DMRegistrationId_args = new UpdateC2DMRegistrationId_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateC2DMRegistrationId_result = new UpdateC2DMRegistrationId_result();
      try {
        TalkService_iface_.updateC2DMRegistrationId(args.registrationId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateC2DMRegistrationId", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateC2DMRegistrationId");
        oprot.writeMessageBegin(new TMessage("updateC2DMRegistrationId", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateC2DMRegistrationId", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateContactSetting() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateContactSetting_args = new UpdateContactSetting_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateContactSetting_result = new UpdateContactSetting_result();
      try {
        TalkService_iface_.updateContactSetting(args.reqSeq, args.mid, args.flag, args.value);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateContactSetting", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateContactSetting");
        oprot.writeMessageBegin(new TMessage("updateContactSetting", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateContactSetting", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateCustomModeSettings() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateCustomModeSettings_args = new UpdateCustomModeSettings_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateCustomModeSettings_result = new UpdateCustomModeSettings_result();
      try {
        TalkService_iface_.updateCustomModeSettings(args.customMode, args.paramMap);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateCustomModeSettings", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateCustomModeSettings");
        oprot.writeMessageBegin(new TMessage("updateCustomModeSettings", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateCustomModeSettings", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateDeviceInfo() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateDeviceInfo_args = new UpdateDeviceInfo_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateDeviceInfo_result = new UpdateDeviceInfo_result();
      try {
        TalkService_iface_.updateDeviceInfo(args.deviceUid, args.deviceInfo);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateDeviceInfo", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateDeviceInfo");
        oprot.writeMessageBegin(new TMessage("updateDeviceInfo", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateDeviceInfo", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateGroup() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateGroup_args = new UpdateGroup_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateGroup_result = new UpdateGroup_result();
      try {
        TalkService_iface_.updateGroup(args.reqSeq, args.group);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateGroup", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateGroup");
        oprot.writeMessageBegin(new TMessage("updateGroup", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateGroup", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateNotificationToken() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateNotificationToken_args = new UpdateNotificationToken_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateNotificationToken_result = new UpdateNotificationToken_result();
      try {
        TalkService_iface_.updateNotificationToken(args.type, args.token);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateNotificationToken", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateNotificationToken");
        oprot.writeMessageBegin(new TMessage("updateNotificationToken", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateNotificationToken", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateNotificationTokenWithBytes() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateNotificationTokenWithBytes_args = new UpdateNotificationTokenWithBytes_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateNotificationTokenWithBytes_result = new UpdateNotificationTokenWithBytes_result();
      try {
        TalkService_iface_.updateNotificationTokenWithBytes(args.type, args.token);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateNotificationTokenWithBytes", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateNotificationTokenWithBytes");
        oprot.writeMessageBegin(new TMessage("updateNotificationTokenWithBytes", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateNotificationTokenWithBytes", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateProfile() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateProfile_args = new UpdateProfile_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateProfile_result = new UpdateProfile_result();
      try {
        TalkService_iface_.updateProfile(args.reqSeq, args.profile);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateProfile", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateProfile");
        oprot.writeMessageBegin(new TMessage("updateProfile", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateProfile", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateProfileAttribute() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateProfileAttribute_args = new UpdateProfileAttribute_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateProfileAttribute_result = new UpdateProfileAttribute_result();
      try {
        TalkService_iface_.updateProfileAttribute(args.reqSeq, args.attr, args.value);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateProfileAttribute", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateProfileAttribute");
        oprot.writeMessageBegin(new TMessage("updateProfileAttribute", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateProfileAttribute", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateRegion() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateRegion_args = new UpdateRegion_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateRegion_result = new UpdateRegion_result();
      try {
        TalkService_iface_.updateRegion(args.region);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateRegion", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateRegion");
        oprot.writeMessageBegin(new TMessage("updateRegion", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateRegion", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateSettings() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateSettings_args = new UpdateSettings_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateSettings_result = new UpdateSettings_result();
      try {
        TalkService_iface_.updateSettings(args.reqSeq, args.settings);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateSettings", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateSettings");
        oprot.writeMessageBegin(new TMessage("updateSettings", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateSettings", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateSettings2() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateSettings2_args = new UpdateSettings2_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateSettings2_result = new UpdateSettings2_result();
      try {
        result.success = TalkService_iface_.updateSettings2(args.reqSeq, args.settings);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateSettings2", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateSettings2");
        oprot.writeMessageBegin(new TMessage("updateSettings2", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateSettings2", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateSettingsAttribute() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateSettingsAttribute_args = new UpdateSettingsAttribute_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateSettingsAttribute_result = new UpdateSettingsAttribute_result();
      try {
        TalkService_iface_.updateSettingsAttribute(args.reqSeq, args.attr, args.value);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateSettingsAttribute", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateSettingsAttribute");
        oprot.writeMessageBegin(new TMessage("updateSettingsAttribute", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateSettingsAttribute", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateSettingsAttributes() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateSettingsAttributes_args = new UpdateSettingsAttributes_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateSettingsAttributes_result = new UpdateSettingsAttributes_result();
      try {
        result.success = TalkService_iface_.updateSettingsAttributes(args.reqSeq, args.attrBitset, args.settings);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateSettingsAttributes", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateSettingsAttributes");
        oprot.writeMessageBegin(new TMessage("updateSettingsAttributes", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateSettingsAttributes", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function verifyIdentityCredential() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : VerifyIdentityCredential_args = new VerifyIdentityCredential_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : VerifyIdentityCredential_result = new VerifyIdentityCredential_result();
      try {
        TalkService_iface_.verifyIdentityCredential(args.identityProvider, args.identifier, args.password);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing verifyIdentityCredential", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing verifyIdentityCredential");
        oprot.writeMessageBegin(new TMessage("verifyIdentityCredential", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("verifyIdentityCredential", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function verifyIdentityCredentialWithResult() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : VerifyIdentityCredentialWithResult_args = new VerifyIdentityCredentialWithResult_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : VerifyIdentityCredentialWithResult_result = new VerifyIdentityCredentialWithResult_result();
      try {
        result.success = TalkService_iface_.verifyIdentityCredentialWithResult(args.identityCredential);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing verifyIdentityCredentialWithResult", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing verifyIdentityCredentialWithResult");
        oprot.writeMessageBegin(new TMessage("verifyIdentityCredentialWithResult", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("verifyIdentityCredentialWithResult", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function verifyPhone() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : VerifyPhone_args = new VerifyPhone_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : VerifyPhone_result = new VerifyPhone_result();
      try {
        result.success = TalkService_iface_.verifyPhone(args.sessionId, args.pinCode, args.udidHash);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing verifyPhone", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing verifyPhone");
        oprot.writeMessageBegin(new TMessage("verifyPhone", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("verifyPhone", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function verifyQrcode() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : VerifyQrcode_args = new VerifyQrcode_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : VerifyQrcode_result = new VerifyQrcode_result();
      try {
        result.success = TalkService_iface_.verifyQrcode(args.verifier, args.pinCode);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing verifyQrcode", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing verifyQrcode");
        oprot.writeMessageBegin(new TMessage("verifyQrcode", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("verifyQrcode", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

}

