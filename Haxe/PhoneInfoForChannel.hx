/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class PhoneInfoForChannel implements TBase {
  
  static var STRUCT_DESC = { new TStruct("PhoneInfoForChannel"); };
  static var MID_FIELD_DESC = { new TField("mid", TType.STRING, 1); };
  static var NORMALIZED_PHONE_NUMBER_FIELD_DESC = { new TField("normalizedPhoneNumber", TType.STRING, 2); };
  static var ALLOWED_TO_SEARCH_BY_PHONE_NUMBER_FIELD_DESC = { new TField("allowedToSearchByPhoneNumber", TType.BOOL, 3); };
  static var ALLOWED_TO_RECEIVE_MESSAGE_FROM_NON_FRIEND_FIELD_DESC = { new TField("allowedToReceiveMessageFromNonFriend", TType.BOOL, 4); };
  static var REGION_FIELD_DESC = { new TField("region", TType.STRING, 5); };

  @:isVar
  public var mid(get,set) : String;
  @:isVar
  public var normalizedPhoneNumber(get,set) : String;
  @:isVar
  public var allowedToSearchByPhoneNumber(get,set) : Bool;
  @:isVar
  public var allowedToReceiveMessageFromNonFriend(get,set) : Bool;
  @:isVar
  public var region(get,set) : String;

  inline static var MID_FIELD_ID : Int = 1;
  inline static var NORMALIZEDPHONENUMBER_FIELD_ID : Int = 2;
  inline static var ALLOWEDTOSEARCHBYPHONENUMBER_FIELD_ID : Int = 3;
  inline static var ALLOWEDTORECEIVEMESSAGEFROMNONFRIEND_FIELD_ID : Int = 4;
  inline static var REGION_FIELD_ID : Int = 5;

  private var __isset_allowedToSearchByPhoneNumber : Bool = false;
  private var __isset_allowedToReceiveMessageFromNonFriend : Bool = false;

  public function new() {
  }

  public function get_mid() : String {
    return this.mid;
  }

  public function set_mid(mid:String) : String {
    this.mid = mid;
    return this.mid;
  }

  public function unsetMid() : Void {
    this.mid = null;
  }

  // Returns true if field mid is set (has been assigned a value) and false otherwise
  public function isSetMid() : Bool {
    return this.mid != null;
  }

  public function get_normalizedPhoneNumber() : String {
    return this.normalizedPhoneNumber;
  }

  public function set_normalizedPhoneNumber(normalizedPhoneNumber:String) : String {
    this.normalizedPhoneNumber = normalizedPhoneNumber;
    return this.normalizedPhoneNumber;
  }

  public function unsetNormalizedPhoneNumber() : Void {
    this.normalizedPhoneNumber = null;
  }

  // Returns true if field normalizedPhoneNumber is set (has been assigned a value) and false otherwise
  public function isSetNormalizedPhoneNumber() : Bool {
    return this.normalizedPhoneNumber != null;
  }

  public function get_allowedToSearchByPhoneNumber() : Bool {
    return this.allowedToSearchByPhoneNumber;
  }

  public function set_allowedToSearchByPhoneNumber(allowedToSearchByPhoneNumber:Bool) : Bool {
    this.allowedToSearchByPhoneNumber = allowedToSearchByPhoneNumber;
    this.__isset_allowedToSearchByPhoneNumber = true;
    return this.allowedToSearchByPhoneNumber;
  }

  public function unsetAllowedToSearchByPhoneNumber() : Void {
    this.__isset_allowedToSearchByPhoneNumber = false;
  }

  // Returns true if field allowedToSearchByPhoneNumber is set (has been assigned a value) and false otherwise
  public function isSetAllowedToSearchByPhoneNumber() : Bool {
    return this.__isset_allowedToSearchByPhoneNumber;
  }

  public function get_allowedToReceiveMessageFromNonFriend() : Bool {
    return this.allowedToReceiveMessageFromNonFriend;
  }

  public function set_allowedToReceiveMessageFromNonFriend(allowedToReceiveMessageFromNonFriend:Bool) : Bool {
    this.allowedToReceiveMessageFromNonFriend = allowedToReceiveMessageFromNonFriend;
    this.__isset_allowedToReceiveMessageFromNonFriend = true;
    return this.allowedToReceiveMessageFromNonFriend;
  }

  public function unsetAllowedToReceiveMessageFromNonFriend() : Void {
    this.__isset_allowedToReceiveMessageFromNonFriend = false;
  }

  // Returns true if field allowedToReceiveMessageFromNonFriend is set (has been assigned a value) and false otherwise
  public function isSetAllowedToReceiveMessageFromNonFriend() : Bool {
    return this.__isset_allowedToReceiveMessageFromNonFriend;
  }

  public function get_region() : String {
    return this.region;
  }

  public function set_region(region:String) : String {
    this.region = region;
    return this.region;
  }

  public function unsetRegion() : Void {
    this.region = null;
  }

  // Returns true if field region is set (has been assigned a value) and false otherwise
  public function isSetRegion() : Bool {
    return this.region != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case MID_FIELD_ID:
      if (value == null) {
        unsetMid();
      } else {
        this.mid = value;
      }

    case NORMALIZEDPHONENUMBER_FIELD_ID:
      if (value == null) {
        unsetNormalizedPhoneNumber();
      } else {
        this.normalizedPhoneNumber = value;
      }

    case ALLOWEDTOSEARCHBYPHONENUMBER_FIELD_ID:
      if (value == null) {
        unsetAllowedToSearchByPhoneNumber();
      } else {
        this.allowedToSearchByPhoneNumber = value;
      }

    case ALLOWEDTORECEIVEMESSAGEFROMNONFRIEND_FIELD_ID:
      if (value == null) {
        unsetAllowedToReceiveMessageFromNonFriend();
      } else {
        this.allowedToReceiveMessageFromNonFriend = value;
      }

    case REGION_FIELD_ID:
      if (value == null) {
        unsetRegion();
      } else {
        this.region = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case MID_FIELD_ID:
      return this.mid;
    case NORMALIZEDPHONENUMBER_FIELD_ID:
      return this.normalizedPhoneNumber;
    case ALLOWEDTOSEARCHBYPHONENUMBER_FIELD_ID:
      return this.allowedToSearchByPhoneNumber;
    case ALLOWEDTORECEIVEMESSAGEFROMNONFRIEND_FIELD_ID:
      return this.allowedToReceiveMessageFromNonFriend;
    case REGION_FIELD_ID:
      return this.region;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case MID_FIELD_ID:
      return isSetMid();
    case NORMALIZEDPHONENUMBER_FIELD_ID:
      return isSetNormalizedPhoneNumber();
    case ALLOWEDTOSEARCHBYPHONENUMBER_FIELD_ID:
      return isSetAllowedToSearchByPhoneNumber();
    case ALLOWEDTORECEIVEMESSAGEFROMNONFRIEND_FIELD_ID:
      return isSetAllowedToReceiveMessageFromNonFriend();
    case REGION_FIELD_ID:
      return isSetRegion();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NORMALIZEDPHONENUMBER_FIELD_ID:
            if (field.type == TType.STRING) {
              this.normalizedPhoneNumber = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ALLOWEDTOSEARCHBYPHONENUMBER_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.allowedToSearchByPhoneNumber = iprot.readBool();
              this.__isset_allowedToSearchByPhoneNumber = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ALLOWEDTORECEIVEMESSAGEFROMNONFRIEND_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.allowedToReceiveMessageFromNonFriend = iprot.readBool();
              this.__isset_allowedToReceiveMessageFromNonFriend = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case REGION_FIELD_ID:
            if (field.type == TType.STRING) {
              this.region = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      if (this.normalizedPhoneNumber != null) {
        oprot.writeFieldBegin(NORMALIZED_PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(this.normalizedPhoneNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ALLOWED_TO_SEARCH_BY_PHONE_NUMBER_FIELD_DESC);
      oprot.writeBool(this.allowedToSearchByPhoneNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALLOWED_TO_RECEIVE_MESSAGE_FROM_NON_FRIEND_FIELD_DESC);
      oprot.writeBool(this.allowedToReceiveMessageFromNonFriend);
      oprot.writeFieldEnd();
      if (this.region != null) {
        oprot.writeFieldBegin(REGION_FIELD_DESC);
        oprot.writeString(this.region);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "PhoneInfoForChannel(";
    var first : Bool = true;

    ret += "mid:";
    if (this.mid == null) {
      ret += "null";
    } else {
      ret += this.mid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "normalizedPhoneNumber:";
    if (this.normalizedPhoneNumber == null) {
      ret += "null";
    } else {
      ret += this.normalizedPhoneNumber;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "allowedToSearchByPhoneNumber:";
    ret += this.allowedToSearchByPhoneNumber;
    first = false;
    if (!first) ret +=  ", ";
    ret += "allowedToReceiveMessageFromNonFriend:";
    ret += this.allowedToReceiveMessageFromNonFriend;
    first = false;
    if (!first) ret +=  ", ";
    ret += "region:";
    if (this.region == null) {
      ret += "null";
    } else {
      ret += this.region;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

