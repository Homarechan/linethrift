/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class BuddyOnAir implements TBase {
  
  static var STRUCT_DESC = { new TStruct("BuddyOnAir"); };
  static var MID_FIELD_DESC = { new TField("mid", TType.STRING, 1); };
  static var FRESHNESS_LIFETIME_FIELD_DESC = { new TField("freshnessLifetime", TType.I64, 3); };
  static var ON_AIR_ID_FIELD_DESC = { new TField("onAirId", TType.STRING, 4); };
  static var ON_AIR_FIELD_DESC = { new TField("onAir", TType.BOOL, 5); };
  static var TEXT_FIELD_DESC = { new TField("text", TType.STRING, 11); };
  static var VIEWER_COUNT_FIELD_DESC = { new TField("viewerCount", TType.I64, 12); };
  static var TARGET_COUNT_FIELD_DESC = { new TField("targetCount", TType.I64, 13); };
  static var ON_AIR_TYPE_FIELD_DESC = { new TField("onAirType", TType.I32, 31); };
  static var ON_AIR_URLS_FIELD_DESC = { new TField("onAirUrls", TType.STRUCT, 32); };

  @:isVar
  public var mid(get,set) : String;
  @:isVar
  public var freshnessLifetime(get,set) : haxe.Int64;
  @:isVar
  public var onAirId(get,set) : String;
  @:isVar
  public var onAir(get,set) : Bool;
  @:isVar
  public var text(get,set) : String;
  @:isVar
  public var viewerCount(get,set) : haxe.Int64;
  @:isVar
  public var targetCount(get,set) : haxe.Int64;
  @:isVar
  public var onAirType(get,set) : Int;
  @:isVar
  public var onAirUrls(get,set) : BuddyOnAirUrls;

  inline static var MID_FIELD_ID : Int = 1;
  inline static var FRESHNESSLIFETIME_FIELD_ID : Int = 3;
  inline static var ONAIRID_FIELD_ID : Int = 4;
  inline static var ONAIR_FIELD_ID : Int = 5;
  inline static var TEXT_FIELD_ID : Int = 11;
  inline static var VIEWERCOUNT_FIELD_ID : Int = 12;
  inline static var TARGETCOUNT_FIELD_ID : Int = 13;
  inline static var ONAIRTYPE_FIELD_ID : Int = 31;
  inline static var ONAIRURLS_FIELD_ID : Int = 32;

  private var __isset_freshnessLifetime : Bool = false;
  private var __isset_onAir : Bool = false;
  private var __isset_viewerCount : Bool = false;
  private var __isset_targetCount : Bool = false;
  private var __isset_onAirType : Bool = false;

  public function new() {
  }

  public function get_mid() : String {
    return this.mid;
  }

  public function set_mid(mid:String) : String {
    this.mid = mid;
    return this.mid;
  }

  public function unsetMid() : Void {
    this.mid = null;
  }

  // Returns true if field mid is set (has been assigned a value) and false otherwise
  public function isSetMid() : Bool {
    return this.mid != null;
  }

  public function get_freshnessLifetime() : haxe.Int64 {
    return this.freshnessLifetime;
  }

  public function set_freshnessLifetime(freshnessLifetime:haxe.Int64) : haxe.Int64 {
    this.freshnessLifetime = freshnessLifetime;
    this.__isset_freshnessLifetime = true;
    return this.freshnessLifetime;
  }

  public function unsetFreshnessLifetime() : Void {
    this.__isset_freshnessLifetime = false;
  }

  // Returns true if field freshnessLifetime is set (has been assigned a value) and false otherwise
  public function isSetFreshnessLifetime() : Bool {
    return this.__isset_freshnessLifetime;
  }

  public function get_onAirId() : String {
    return this.onAirId;
  }

  public function set_onAirId(onAirId:String) : String {
    this.onAirId = onAirId;
    return this.onAirId;
  }

  public function unsetOnAirId() : Void {
    this.onAirId = null;
  }

  // Returns true if field onAirId is set (has been assigned a value) and false otherwise
  public function isSetOnAirId() : Bool {
    return this.onAirId != null;
  }

  public function get_onAir() : Bool {
    return this.onAir;
  }

  public function set_onAir(onAir:Bool) : Bool {
    this.onAir = onAir;
    this.__isset_onAir = true;
    return this.onAir;
  }

  public function unsetOnAir() : Void {
    this.__isset_onAir = false;
  }

  // Returns true if field onAir is set (has been assigned a value) and false otherwise
  public function isSetOnAir() : Bool {
    return this.__isset_onAir;
  }

  public function get_text() : String {
    return this.text;
  }

  public function set_text(text:String) : String {
    this.text = text;
    return this.text;
  }

  public function unsetText() : Void {
    this.text = null;
  }

  // Returns true if field text is set (has been assigned a value) and false otherwise
  public function isSetText() : Bool {
    return this.text != null;
  }

  public function get_viewerCount() : haxe.Int64 {
    return this.viewerCount;
  }

  public function set_viewerCount(viewerCount:haxe.Int64) : haxe.Int64 {
    this.viewerCount = viewerCount;
    this.__isset_viewerCount = true;
    return this.viewerCount;
  }

  public function unsetViewerCount() : Void {
    this.__isset_viewerCount = false;
  }

  // Returns true if field viewerCount is set (has been assigned a value) and false otherwise
  public function isSetViewerCount() : Bool {
    return this.__isset_viewerCount;
  }

  public function get_targetCount() : haxe.Int64 {
    return this.targetCount;
  }

  public function set_targetCount(targetCount:haxe.Int64) : haxe.Int64 {
    this.targetCount = targetCount;
    this.__isset_targetCount = true;
    return this.targetCount;
  }

  public function unsetTargetCount() : Void {
    this.__isset_targetCount = false;
  }

  // Returns true if field targetCount is set (has been assigned a value) and false otherwise
  public function isSetTargetCount() : Bool {
    return this.__isset_targetCount;
  }

  public function get_onAirType() : Int {
    return this.onAirType;
  }

  public function set_onAirType(onAirType:Int) : Int {
    this.onAirType = onAirType;
    this.__isset_onAirType = true;
    return this.onAirType;
  }

  public function unsetOnAirType() : Void {
    this.__isset_onAirType = false;
  }

  // Returns true if field onAirType is set (has been assigned a value) and false otherwise
  public function isSetOnAirType() : Bool {
    return this.__isset_onAirType;
  }

  public function get_onAirUrls() : BuddyOnAirUrls {
    return this.onAirUrls;
  }

  public function set_onAirUrls(onAirUrls:BuddyOnAirUrls) : BuddyOnAirUrls {
    this.onAirUrls = onAirUrls;
    return this.onAirUrls;
  }

  public function unsetOnAirUrls() : Void {
    this.onAirUrls = null;
  }

  // Returns true if field onAirUrls is set (has been assigned a value) and false otherwise
  public function isSetOnAirUrls() : Bool {
    return this.onAirUrls != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case MID_FIELD_ID:
      if (value == null) {
        unsetMid();
      } else {
        this.mid = value;
      }

    case FRESHNESSLIFETIME_FIELD_ID:
      if (value == null) {
        unsetFreshnessLifetime();
      } else {
        this.freshnessLifetime = value;
      }

    case ONAIRID_FIELD_ID:
      if (value == null) {
        unsetOnAirId();
      } else {
        this.onAirId = value;
      }

    case ONAIR_FIELD_ID:
      if (value == null) {
        unsetOnAir();
      } else {
        this.onAir = value;
      }

    case TEXT_FIELD_ID:
      if (value == null) {
        unsetText();
      } else {
        this.text = value;
      }

    case VIEWERCOUNT_FIELD_ID:
      if (value == null) {
        unsetViewerCount();
      } else {
        this.viewerCount = value;
      }

    case TARGETCOUNT_FIELD_ID:
      if (value == null) {
        unsetTargetCount();
      } else {
        this.targetCount = value;
      }

    case ONAIRTYPE_FIELD_ID:
      if (value == null) {
        unsetOnAirType();
      } else {
        this.onAirType = value;
      }

    case ONAIRURLS_FIELD_ID:
      if (value == null) {
        unsetOnAirUrls();
      } else {
        this.onAirUrls = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case MID_FIELD_ID:
      return this.mid;
    case FRESHNESSLIFETIME_FIELD_ID:
      return this.freshnessLifetime;
    case ONAIRID_FIELD_ID:
      return this.onAirId;
    case ONAIR_FIELD_ID:
      return this.onAir;
    case TEXT_FIELD_ID:
      return this.text;
    case VIEWERCOUNT_FIELD_ID:
      return this.viewerCount;
    case TARGETCOUNT_FIELD_ID:
      return this.targetCount;
    case ONAIRTYPE_FIELD_ID:
      return this.onAirType;
    case ONAIRURLS_FIELD_ID:
      return this.onAirUrls;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case MID_FIELD_ID:
      return isSetMid();
    case FRESHNESSLIFETIME_FIELD_ID:
      return isSetFreshnessLifetime();
    case ONAIRID_FIELD_ID:
      return isSetOnAirId();
    case ONAIR_FIELD_ID:
      return isSetOnAir();
    case TEXT_FIELD_ID:
      return isSetText();
    case VIEWERCOUNT_FIELD_ID:
      return isSetViewerCount();
    case TARGETCOUNT_FIELD_ID:
      return isSetTargetCount();
    case ONAIRTYPE_FIELD_ID:
      return isSetOnAirType();
    case ONAIRURLS_FIELD_ID:
      return isSetOnAirUrls();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case FRESHNESSLIFETIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.freshnessLifetime = iprot.readI64();
              this.__isset_freshnessLifetime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ONAIRID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.onAirId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ONAIR_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.onAir = iprot.readBool();
              this.__isset_onAir = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TEXT_FIELD_ID:
            if (field.type == TType.STRING) {
              this.text = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case VIEWERCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.viewerCount = iprot.readI64();
              this.__isset_viewerCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TARGETCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.targetCount = iprot.readI64();
              this.__isset_targetCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ONAIRTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.onAirType = iprot.readI32();
              this.__isset_onAirType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ONAIRURLS_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.onAirUrls = new BuddyOnAirUrls();
              this.onAirUrls.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FRESHNESS_LIFETIME_FIELD_DESC);
      oprot.writeI64(this.freshnessLifetime);
      oprot.writeFieldEnd();
      if (this.onAirId != null) {
        oprot.writeFieldBegin(ON_AIR_ID_FIELD_DESC);
        oprot.writeString(this.onAirId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ON_AIR_FIELD_DESC);
      oprot.writeBool(this.onAir);
      oprot.writeFieldEnd();
      if (this.text != null) {
        oprot.writeFieldBegin(TEXT_FIELD_DESC);
        oprot.writeString(this.text);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VIEWER_COUNT_FIELD_DESC);
      oprot.writeI64(this.viewerCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TARGET_COUNT_FIELD_DESC);
      oprot.writeI64(this.targetCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ON_AIR_TYPE_FIELD_DESC);
      oprot.writeI32(this.onAirType);
      oprot.writeFieldEnd();
      if (this.onAirUrls != null) {
        oprot.writeFieldBegin(ON_AIR_URLS_FIELD_DESC);
        this.onAirUrls.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "BuddyOnAir(";
    var first : Bool = true;

    ret += "mid:";
    if (this.mid == null) {
      ret += "null";
    } else {
      ret += this.mid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "freshnessLifetime:";
    ret += this.freshnessLifetime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "onAirId:";
    if (this.onAirId == null) {
      ret += "null";
    } else {
      ret += this.onAirId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "onAir:";
    ret += this.onAir;
    first = false;
    if (!first) ret +=  ", ";
    ret += "text:";
    if (this.text == null) {
      ret += "null";
    } else {
      ret += this.text;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "viewerCount:";
    ret += this.viewerCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "targetCount:";
    ret += this.targetCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "onAirType:";
    var onAirType_name : String = .BuddyOnAirType.VALUES_TO_NAMES[this.onAirType];
    if (onAirType_name != null) {
      ret += onAirType_name;
      ret += " (";
    }
    ret += this.onAirType;
    if (onAirType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "onAirUrls:";
    if (this.onAirUrls == null) {
      ret += "null";
    } else {
      ret += this.onAirUrls;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetOnAirType() && !.BuddyOnAirType.VALID_VALUES.contains(onAirType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'onAirType' has been assigned the invalid value " + onAirType);
    }
  }

}

