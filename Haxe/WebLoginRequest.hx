/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class WebLoginRequest implements TBase {
  
  static var STRUCT_DESC = { new TStruct("WebLoginRequest"); };
  static var HOOKED_FULL_URL_FIELD_DESC = { new TField("hookedFullUrl", TType.STRING, 1); };
  static var SESSION_STRING_FIELD_DESC = { new TField("sessionString", TType.STRING, 2); };
  static var FROM_IAB_FIELD_DESC = { new TField("fromIAB", TType.BOOL, 3); };

  @:isVar
  public var hookedFullUrl(get,set) : String;
  @:isVar
  public var sessionString(get,set) : String;
  @:isVar
  public var fromIAB(get,set) : Bool;

  inline static var HOOKEDFULLURL_FIELD_ID : Int = 1;
  inline static var SESSIONSTRING_FIELD_ID : Int = 2;
  inline static var FROMIAB_FIELD_ID : Int = 3;

  private var __isset_fromIAB : Bool = false;

  public function new() {
  }

  public function get_hookedFullUrl() : String {
    return this.hookedFullUrl;
  }

  public function set_hookedFullUrl(hookedFullUrl:String) : String {
    this.hookedFullUrl = hookedFullUrl;
    return this.hookedFullUrl;
  }

  public function unsetHookedFullUrl() : Void {
    this.hookedFullUrl = null;
  }

  // Returns true if field hookedFullUrl is set (has been assigned a value) and false otherwise
  public function isSetHookedFullUrl() : Bool {
    return this.hookedFullUrl != null;
  }

  public function get_sessionString() : String {
    return this.sessionString;
  }

  public function set_sessionString(sessionString:String) : String {
    this.sessionString = sessionString;
    return this.sessionString;
  }

  public function unsetSessionString() : Void {
    this.sessionString = null;
  }

  // Returns true if field sessionString is set (has been assigned a value) and false otherwise
  public function isSetSessionString() : Bool {
    return this.sessionString != null;
  }

  public function get_fromIAB() : Bool {
    return this.fromIAB;
  }

  public function set_fromIAB(fromIAB:Bool) : Bool {
    this.fromIAB = fromIAB;
    this.__isset_fromIAB = true;
    return this.fromIAB;
  }

  public function unsetFromIAB() : Void {
    this.__isset_fromIAB = false;
  }

  // Returns true if field fromIAB is set (has been assigned a value) and false otherwise
  public function isSetFromIAB() : Bool {
    return this.__isset_fromIAB;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case HOOKEDFULLURL_FIELD_ID:
      if (value == null) {
        unsetHookedFullUrl();
      } else {
        this.hookedFullUrl = value;
      }

    case SESSIONSTRING_FIELD_ID:
      if (value == null) {
        unsetSessionString();
      } else {
        this.sessionString = value;
      }

    case FROMIAB_FIELD_ID:
      if (value == null) {
        unsetFromIAB();
      } else {
        this.fromIAB = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case HOOKEDFULLURL_FIELD_ID:
      return this.hookedFullUrl;
    case SESSIONSTRING_FIELD_ID:
      return this.sessionString;
    case FROMIAB_FIELD_ID:
      return this.fromIAB;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case HOOKEDFULLURL_FIELD_ID:
      return isSetHookedFullUrl();
    case SESSIONSTRING_FIELD_ID:
      return isSetSessionString();
    case FROMIAB_FIELD_ID:
      return isSetFromIAB();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case HOOKEDFULLURL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.hookedFullUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SESSIONSTRING_FIELD_ID:
            if (field.type == TType.STRING) {
              this.sessionString = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case FROMIAB_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.fromIAB = iprot.readBool();
              this.__isset_fromIAB = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.hookedFullUrl != null) {
        oprot.writeFieldBegin(HOOKED_FULL_URL_FIELD_DESC);
        oprot.writeString(this.hookedFullUrl);
        oprot.writeFieldEnd();
      }
      if (this.sessionString != null) {
        oprot.writeFieldBegin(SESSION_STRING_FIELD_DESC);
        oprot.writeString(this.sessionString);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FROM_IAB_FIELD_DESC);
      oprot.writeBool(this.fromIAB);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "WebLoginRequest(";
    var first : Bool = true;

    ret += "hookedFullUrl:";
    if (this.hookedFullUrl == null) {
      ret += "null";
    } else {
      ret += this.hookedFullUrl;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "sessionString:";
    if (this.sessionString == null) {
      ret += "null";
    } else {
      ret += this.sessionString;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "fromIAB:";
    ret += this.fromIAB;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

