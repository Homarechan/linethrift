/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class BuddyDetail implements TBase {
  
  static var STRUCT_DESC = { new TStruct("BuddyDetail"); };
  static var MID_FIELD_DESC = { new TField("mid", TType.STRING, 1); };
  static var MEMBER_COUNT_FIELD_DESC = { new TField("memberCount", TType.I64, 2); };
  static var ON_AIR_FIELD_DESC = { new TField("onAir", TType.BOOL, 3); };
  static var BUSINESS_ACCOUNT_FIELD_DESC = { new TField("businessAccount", TType.BOOL, 4); };
  static var ADDABLE_FIELD_DESC = { new TField("addable", TType.BOOL, 5); };
  static var ACCEPTABLE_CONTENT_TYPES_FIELD_DESC = { new TField("acceptableContentTypes", TType.SET, 6); };
  static var CAPABLE_MYHOME_FIELD_DESC = { new TField("capableMyhome", TType.BOOL, 7); };

  @:isVar
  public var mid(get,set) : String;
  @:isVar
  public var memberCount(get,set) : haxe.Int64;
  @:isVar
  public var onAir(get,set) : Bool;
  @:isVar
  public var businessAccount(get,set) : Bool;
  @:isVar
  public var addable(get,set) : Bool;
  @:isVar
  public var acceptableContentTypes(get,set) : IntSet;
  @:isVar
  public var capableMyhome(get,set) : Bool;

  inline static var MID_FIELD_ID : Int = 1;
  inline static var MEMBERCOUNT_FIELD_ID : Int = 2;
  inline static var ONAIR_FIELD_ID : Int = 3;
  inline static var BUSINESSACCOUNT_FIELD_ID : Int = 4;
  inline static var ADDABLE_FIELD_ID : Int = 5;
  inline static var ACCEPTABLECONTENTTYPES_FIELD_ID : Int = 6;
  inline static var CAPABLEMYHOME_FIELD_ID : Int = 7;

  private var __isset_memberCount : Bool = false;
  private var __isset_onAir : Bool = false;
  private var __isset_businessAccount : Bool = false;
  private var __isset_addable : Bool = false;
  private var __isset_capableMyhome : Bool = false;

  public function new() {
  }

  public function get_mid() : String {
    return this.mid;
  }

  public function set_mid(mid:String) : String {
    this.mid = mid;
    return this.mid;
  }

  public function unsetMid() : Void {
    this.mid = null;
  }

  // Returns true if field mid is set (has been assigned a value) and false otherwise
  public function isSetMid() : Bool {
    return this.mid != null;
  }

  public function get_memberCount() : haxe.Int64 {
    return this.memberCount;
  }

  public function set_memberCount(memberCount:haxe.Int64) : haxe.Int64 {
    this.memberCount = memberCount;
    this.__isset_memberCount = true;
    return this.memberCount;
  }

  public function unsetMemberCount() : Void {
    this.__isset_memberCount = false;
  }

  // Returns true if field memberCount is set (has been assigned a value) and false otherwise
  public function isSetMemberCount() : Bool {
    return this.__isset_memberCount;
  }

  public function get_onAir() : Bool {
    return this.onAir;
  }

  public function set_onAir(onAir:Bool) : Bool {
    this.onAir = onAir;
    this.__isset_onAir = true;
    return this.onAir;
  }

  public function unsetOnAir() : Void {
    this.__isset_onAir = false;
  }

  // Returns true if field onAir is set (has been assigned a value) and false otherwise
  public function isSetOnAir() : Bool {
    return this.__isset_onAir;
  }

  public function get_businessAccount() : Bool {
    return this.businessAccount;
  }

  public function set_businessAccount(businessAccount:Bool) : Bool {
    this.businessAccount = businessAccount;
    this.__isset_businessAccount = true;
    return this.businessAccount;
  }

  public function unsetBusinessAccount() : Void {
    this.__isset_businessAccount = false;
  }

  // Returns true if field businessAccount is set (has been assigned a value) and false otherwise
  public function isSetBusinessAccount() : Bool {
    return this.__isset_businessAccount;
  }

  public function get_addable() : Bool {
    return this.addable;
  }

  public function set_addable(addable:Bool) : Bool {
    this.addable = addable;
    this.__isset_addable = true;
    return this.addable;
  }

  public function unsetAddable() : Void {
    this.__isset_addable = false;
  }

  // Returns true if field addable is set (has been assigned a value) and false otherwise
  public function isSetAddable() : Bool {
    return this.__isset_addable;
  }

  public function get_acceptableContentTypes() : IntSet {
    return this.acceptableContentTypes;
  }

  public function set_acceptableContentTypes(acceptableContentTypes:IntSet) : IntSet {
    this.acceptableContentTypes = acceptableContentTypes;
    return this.acceptableContentTypes;
  }

  public function unsetAcceptableContentTypes() : Void {
    this.acceptableContentTypes = null;
  }

  // Returns true if field acceptableContentTypes is set (has been assigned a value) and false otherwise
  public function isSetAcceptableContentTypes() : Bool {
    return this.acceptableContentTypes != null;
  }

  public function get_capableMyhome() : Bool {
    return this.capableMyhome;
  }

  public function set_capableMyhome(capableMyhome:Bool) : Bool {
    this.capableMyhome = capableMyhome;
    this.__isset_capableMyhome = true;
    return this.capableMyhome;
  }

  public function unsetCapableMyhome() : Void {
    this.__isset_capableMyhome = false;
  }

  // Returns true if field capableMyhome is set (has been assigned a value) and false otherwise
  public function isSetCapableMyhome() : Bool {
    return this.__isset_capableMyhome;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case MID_FIELD_ID:
      if (value == null) {
        unsetMid();
      } else {
        this.mid = value;
      }

    case MEMBERCOUNT_FIELD_ID:
      if (value == null) {
        unsetMemberCount();
      } else {
        this.memberCount = value;
      }

    case ONAIR_FIELD_ID:
      if (value == null) {
        unsetOnAir();
      } else {
        this.onAir = value;
      }

    case BUSINESSACCOUNT_FIELD_ID:
      if (value == null) {
        unsetBusinessAccount();
      } else {
        this.businessAccount = value;
      }

    case ADDABLE_FIELD_ID:
      if (value == null) {
        unsetAddable();
      } else {
        this.addable = value;
      }

    case ACCEPTABLECONTENTTYPES_FIELD_ID:
      if (value == null) {
        unsetAcceptableContentTypes();
      } else {
        this.acceptableContentTypes = value;
      }

    case CAPABLEMYHOME_FIELD_ID:
      if (value == null) {
        unsetCapableMyhome();
      } else {
        this.capableMyhome = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case MID_FIELD_ID:
      return this.mid;
    case MEMBERCOUNT_FIELD_ID:
      return this.memberCount;
    case ONAIR_FIELD_ID:
      return this.onAir;
    case BUSINESSACCOUNT_FIELD_ID:
      return this.businessAccount;
    case ADDABLE_FIELD_ID:
      return this.addable;
    case ACCEPTABLECONTENTTYPES_FIELD_ID:
      return this.acceptableContentTypes;
    case CAPABLEMYHOME_FIELD_ID:
      return this.capableMyhome;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case MID_FIELD_ID:
      return isSetMid();
    case MEMBERCOUNT_FIELD_ID:
      return isSetMemberCount();
    case ONAIR_FIELD_ID:
      return isSetOnAir();
    case BUSINESSACCOUNT_FIELD_ID:
      return isSetBusinessAccount();
    case ADDABLE_FIELD_ID:
      return isSetAddable();
    case ACCEPTABLECONTENTTYPES_FIELD_ID:
      return isSetAcceptableContentTypes();
    case CAPABLEMYHOME_FIELD_ID:
      return isSetCapableMyhome();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MEMBERCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.memberCount = iprot.readI64();
              this.__isset_memberCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ONAIR_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.onAir = iprot.readBool();
              this.__isset_onAir = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case BUSINESSACCOUNT_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.businessAccount = iprot.readBool();
              this.__isset_businessAccount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ADDABLE_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.addable = iprot.readBool();
              this.__isset_addable = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ACCEPTABLECONTENTTYPES_FIELD_ID:
            if (field.type == TType.SET) {
              {
                var _set56 = iprot.readSetBegin();
                this.acceptableContentTypes = new IntSet();
                for( _i57 in 0 ... _set56.size)
                {
                  var _elem58 : Int;
                  _elem58 = iprot.readI32();
                  this.acceptableContentTypes.add(_elem58);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CAPABLEMYHOME_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.capableMyhome = iprot.readBool();
              this.__isset_capableMyhome = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEMBER_COUNT_FIELD_DESC);
      oprot.writeI64(this.memberCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ON_AIR_FIELD_DESC);
      oprot.writeBool(this.onAir);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_ACCOUNT_FIELD_DESC);
      oprot.writeBool(this.businessAccount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADDABLE_FIELD_DESC);
      oprot.writeBool(this.addable);
      oprot.writeFieldEnd();
      if (this.acceptableContentTypes != null) {
        oprot.writeFieldBegin(ACCEPTABLE_CONTENT_TYPES_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.I32, this.acceptableContentTypes.size));
          for( elem59 in this.acceptableContentTypes.toArray())
          {
            oprot.writeI32(elem59);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CAPABLE_MYHOME_FIELD_DESC);
      oprot.writeBool(this.capableMyhome);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "BuddyDetail(";
    var first : Bool = true;

    ret += "mid:";
    if (this.mid == null) {
      ret += "null";
    } else {
      ret += this.mid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "memberCount:";
    ret += this.memberCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "onAir:";
    ret += this.onAir;
    first = false;
    if (!first) ret +=  ", ";
    ret += "businessAccount:";
    ret += this.businessAccount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "addable:";
    ret += this.addable;
    first = false;
    if (!first) ret +=  ", ";
    ret += "acceptableContentTypes:";
    if (this.acceptableContentTypes == null) {
      ret += "null";
    } else {
      ret += this.acceptableContentTypes;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "capableMyhome:";
    ret += this.capableMyhome;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

