/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class ShortcutItem implements TBase {
  
  static var STRUCT_DESC = { new TStruct("ShortcutItem"); };
  static var ID_FIELD_DESC = { new TField("id", TType.STRING, 1); };
  static var TITLE_FIELD_DESC = { new TField("title", TType.STRING, 2); };
  static var DESCR_FIELD_DESC = { new TField("descr", TType.STRING, 3); };
  static var ICON_PATH_FIELD_DESC = { new TField("iconPath", TType.STRING, 4); };
  static var URL_FIELD_DESC = { new TField("url", TType.STRING, 5); };
  static var BUTTONS_FIELD_DESC = { new TField("buttons", TType.LIST, 6); };
  static var ACTION_FIELD_DESC = { new TField("action", TType.STRUCT, 7); };

  @:isVar
  public var id(get,set) : String;
  @:isVar
  public var title(get,set) : String;
  @:isVar
  public var descr(get,set) : String;
  @:isVar
  public var iconPath(get,set) : String;
  @:isVar
  public var url(get,set) : String;
  @:isVar
  public var buttons(get,set) : List< ShortcutButton>;
  @:isVar
  public var action(get,set) : ShortcutButtonAction;

  inline static var ID_FIELD_ID : Int = 1;
  inline static var TITLE_FIELD_ID : Int = 2;
  inline static var DESCR_FIELD_ID : Int = 3;
  inline static var ICONPATH_FIELD_ID : Int = 4;
  inline static var URL_FIELD_ID : Int = 5;
  inline static var BUTTONS_FIELD_ID : Int = 6;
  inline static var ACTION_FIELD_ID : Int = 7;


  public function new() {
  }

  public function get_id() : String {
    return this.id;
  }

  public function set_id(id:String) : String {
    this.id = id;
    return this.id;
  }

  public function unsetId() : Void {
    this.id = null;
  }

  // Returns true if field id is set (has been assigned a value) and false otherwise
  public function isSetId() : Bool {
    return this.id != null;
  }

  public function get_title() : String {
    return this.title;
  }

  public function set_title(title:String) : String {
    this.title = title;
    return this.title;
  }

  public function unsetTitle() : Void {
    this.title = null;
  }

  // Returns true if field title is set (has been assigned a value) and false otherwise
  public function isSetTitle() : Bool {
    return this.title != null;
  }

  public function get_descr() : String {
    return this.descr;
  }

  public function set_descr(descr:String) : String {
    this.descr = descr;
    return this.descr;
  }

  public function unsetDescr() : Void {
    this.descr = null;
  }

  // Returns true if field descr is set (has been assigned a value) and false otherwise
  public function isSetDescr() : Bool {
    return this.descr != null;
  }

  public function get_iconPath() : String {
    return this.iconPath;
  }

  public function set_iconPath(iconPath:String) : String {
    this.iconPath = iconPath;
    return this.iconPath;
  }

  public function unsetIconPath() : Void {
    this.iconPath = null;
  }

  // Returns true if field iconPath is set (has been assigned a value) and false otherwise
  public function isSetIconPath() : Bool {
    return this.iconPath != null;
  }

  public function get_url() : String {
    return this.url;
  }

  public function set_url(url:String) : String {
    this.url = url;
    return this.url;
  }

  public function unsetUrl() : Void {
    this.url = null;
  }

  // Returns true if field url is set (has been assigned a value) and false otherwise
  public function isSetUrl() : Bool {
    return this.url != null;
  }

  public function get_buttons() : List< ShortcutButton> {
    return this.buttons;
  }

  public function set_buttons(buttons:List< ShortcutButton>) : List< ShortcutButton> {
    this.buttons = buttons;
    return this.buttons;
  }

  public function unsetButtons() : Void {
    this.buttons = null;
  }

  // Returns true if field buttons is set (has been assigned a value) and false otherwise
  public function isSetButtons() : Bool {
    return this.buttons != null;
  }

  public function get_action() : ShortcutButtonAction {
    return this.action;
  }

  public function set_action(action:ShortcutButtonAction) : ShortcutButtonAction {
    this.action = action;
    return this.action;
  }

  public function unsetAction() : Void {
    this.action = null;
  }

  // Returns true if field action is set (has been assigned a value) and false otherwise
  public function isSetAction() : Bool {
    return this.action != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case ID_FIELD_ID:
      if (value == null) {
        unsetId();
      } else {
        this.id = value;
      }

    case TITLE_FIELD_ID:
      if (value == null) {
        unsetTitle();
      } else {
        this.title = value;
      }

    case DESCR_FIELD_ID:
      if (value == null) {
        unsetDescr();
      } else {
        this.descr = value;
      }

    case ICONPATH_FIELD_ID:
      if (value == null) {
        unsetIconPath();
      } else {
        this.iconPath = value;
      }

    case URL_FIELD_ID:
      if (value == null) {
        unsetUrl();
      } else {
        this.url = value;
      }

    case BUTTONS_FIELD_ID:
      if (value == null) {
        unsetButtons();
      } else {
        this.buttons = value;
      }

    case ACTION_FIELD_ID:
      if (value == null) {
        unsetAction();
      } else {
        this.action = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case ID_FIELD_ID:
      return this.id;
    case TITLE_FIELD_ID:
      return this.title;
    case DESCR_FIELD_ID:
      return this.descr;
    case ICONPATH_FIELD_ID:
      return this.iconPath;
    case URL_FIELD_ID:
      return this.url;
    case BUTTONS_FIELD_ID:
      return this.buttons;
    case ACTION_FIELD_ID:
      return this.action;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case ID_FIELD_ID:
      return isSetId();
    case TITLE_FIELD_ID:
      return isSetTitle();
    case DESCR_FIELD_ID:
      return isSetDescr();
    case ICONPATH_FIELD_ID:
      return isSetIconPath();
    case URL_FIELD_ID:
      return isSetUrl();
    case BUTTONS_FIELD_ID:
      return isSetButtons();
    case ACTION_FIELD_ID:
      return isSetAction();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.id = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TITLE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.title = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DESCR_FIELD_ID:
            if (field.type == TType.STRING) {
              this.descr = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ICONPATH_FIELD_ID:
            if (field.type == TType.STRING) {
              this.iconPath = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case URL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.url = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case BUTTONS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list69 = iprot.readListBegin();
                this.buttons = new List< ShortcutButton>();
                for( _i70 in 0 ... _list69.size)
                {
                  var _elem71 : ShortcutButton;
                  _elem71 = new ShortcutButton();
                  _elem71.read(iprot);
                  this.buttons.add(_elem71);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ACTION_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.action = new ShortcutButtonAction();
              this.action.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
      if (this.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(this.title);
        oprot.writeFieldEnd();
      }
      if (this.descr != null) {
        oprot.writeFieldBegin(DESCR_FIELD_DESC);
        oprot.writeString(this.descr);
        oprot.writeFieldEnd();
      }
      if (this.iconPath != null) {
        oprot.writeFieldBegin(ICON_PATH_FIELD_DESC);
        oprot.writeString(this.iconPath);
        oprot.writeFieldEnd();
      }
      if (this.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(this.url);
        oprot.writeFieldEnd();
      }
      if (this.buttons != null) {
        oprot.writeFieldBegin(BUTTONS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.buttons.length));
          for( elem72 in this.buttons)
          {
            elem72.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.action != null) {
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        this.action.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "ShortcutItem(";
    var first : Bool = true;

    ret += "id:";
    if (this.id == null) {
      ret += "null";
    } else {
      ret += this.id;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "title:";
    if (this.title == null) {
      ret += "null";
    } else {
      ret += this.title;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "descr:";
    if (this.descr == null) {
      ret += "null";
    } else {
      ret += this.descr;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "iconPath:";
    if (this.iconPath == null) {
      ret += "null";
    } else {
      ret += this.iconPath;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "url:";
    if (this.url == null) {
      ret += "null";
    } else {
      ret += this.url;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "buttons:";
    if (this.buttons == null) {
      ret += "null";
    } else {
      ret += this.buttons;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "action:";
    if (this.action == null) {
      ret += "null";
    } else {
      ret += this.action;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

