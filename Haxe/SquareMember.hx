/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SquareMember implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SquareMember"); };
  static var SQUARE_MEMBER_MID_FIELD_DESC = { new TField("squareMemberMid", TType.STRING, 1); };
  static var SQUARE_MID_FIELD_DESC = { new TField("squareMid", TType.STRING, 2); };
  static var DISPLAY_NAME_FIELD_DESC = { new TField("displayName", TType.STRING, 3); };
  static var PROFILE_IMAGE_OBS_HASH_FIELD_DESC = { new TField("profileImageObsHash", TType.STRING, 4); };
  static var ABLE_TO_RECEIVE_MESSAGE_FIELD_DESC = { new TField("ableToReceiveMessage", TType.BOOL, 5); };
  static var MEMBERSHIP_STATE_FIELD_DESC = { new TField("membershipState", TType.I32, 7); };
  static var ROLE_FIELD_DESC = { new TField("role", TType.I32, 8); };
  static var REVISION_FIELD_DESC = { new TField("revision", TType.I64, 9); };
  static var PREFERENCE_FIELD_DESC = { new TField("preference", TType.STRUCT, 10); };
  static var JOIN_MESSAGE_FIELD_DESC = { new TField("joinMessage", TType.STRING, 11); };

  @:isVar
  public var squareMemberMid(get,set) : String;
  @:isVar
  public var squareMid(get,set) : String;
  @:isVar
  public var displayName(get,set) : String;
  @:isVar
  public var profileImageObsHash(get,set) : String;
  @:isVar
  public var ableToReceiveMessage(get,set) : Bool;
  @:isVar
  public var membershipState(get,set) : Int;
  @:isVar
  public var role(get,set) : Int;
  @:isVar
  public var revision(get,set) : haxe.Int64;
  @:isVar
  public var preference(get,set) : SquarePreference;
  @:isVar
  public var joinMessage(get,set) : String;

  inline static var SQUAREMEMBERMID_FIELD_ID : Int = 1;
  inline static var SQUAREMID_FIELD_ID : Int = 2;
  inline static var DISPLAYNAME_FIELD_ID : Int = 3;
  inline static var PROFILEIMAGEOBSHASH_FIELD_ID : Int = 4;
  inline static var ABLETORECEIVEMESSAGE_FIELD_ID : Int = 5;
  inline static var MEMBERSHIPSTATE_FIELD_ID : Int = 7;
  inline static var ROLE_FIELD_ID : Int = 8;
  inline static var REVISION_FIELD_ID : Int = 9;
  inline static var PREFERENCE_FIELD_ID : Int = 10;
  inline static var JOINMESSAGE_FIELD_ID : Int = 11;

  private var __isset_ableToReceiveMessage : Bool = false;
  private var __isset_membershipState : Bool = false;
  private var __isset_role : Bool = false;
  private var __isset_revision : Bool = false;

  public function new() {
  }

  public function get_squareMemberMid() : String {
    return this.squareMemberMid;
  }

  public function set_squareMemberMid(squareMemberMid:String) : String {
    this.squareMemberMid = squareMemberMid;
    return this.squareMemberMid;
  }

  public function unsetSquareMemberMid() : Void {
    this.squareMemberMid = null;
  }

  // Returns true if field squareMemberMid is set (has been assigned a value) and false otherwise
  public function isSetSquareMemberMid() : Bool {
    return this.squareMemberMid != null;
  }

  public function get_squareMid() : String {
    return this.squareMid;
  }

  public function set_squareMid(squareMid:String) : String {
    this.squareMid = squareMid;
    return this.squareMid;
  }

  public function unsetSquareMid() : Void {
    this.squareMid = null;
  }

  // Returns true if field squareMid is set (has been assigned a value) and false otherwise
  public function isSetSquareMid() : Bool {
    return this.squareMid != null;
  }

  public function get_displayName() : String {
    return this.displayName;
  }

  public function set_displayName(displayName:String) : String {
    this.displayName = displayName;
    return this.displayName;
  }

  public function unsetDisplayName() : Void {
    this.displayName = null;
  }

  // Returns true if field displayName is set (has been assigned a value) and false otherwise
  public function isSetDisplayName() : Bool {
    return this.displayName != null;
  }

  public function get_profileImageObsHash() : String {
    return this.profileImageObsHash;
  }

  public function set_profileImageObsHash(profileImageObsHash:String) : String {
    this.profileImageObsHash = profileImageObsHash;
    return this.profileImageObsHash;
  }

  public function unsetProfileImageObsHash() : Void {
    this.profileImageObsHash = null;
  }

  // Returns true if field profileImageObsHash is set (has been assigned a value) and false otherwise
  public function isSetProfileImageObsHash() : Bool {
    return this.profileImageObsHash != null;
  }

  public function get_ableToReceiveMessage() : Bool {
    return this.ableToReceiveMessage;
  }

  public function set_ableToReceiveMessage(ableToReceiveMessage:Bool) : Bool {
    this.ableToReceiveMessage = ableToReceiveMessage;
    this.__isset_ableToReceiveMessage = true;
    return this.ableToReceiveMessage;
  }

  public function unsetAbleToReceiveMessage() : Void {
    this.__isset_ableToReceiveMessage = false;
  }

  // Returns true if field ableToReceiveMessage is set (has been assigned a value) and false otherwise
  public function isSetAbleToReceiveMessage() : Bool {
    return this.__isset_ableToReceiveMessage;
  }

  public function get_membershipState() : Int {
    return this.membershipState;
  }

  public function set_membershipState(membershipState:Int) : Int {
    this.membershipState = membershipState;
    this.__isset_membershipState = true;
    return this.membershipState;
  }

  public function unsetMembershipState() : Void {
    this.__isset_membershipState = false;
  }

  // Returns true if field membershipState is set (has been assigned a value) and false otherwise
  public function isSetMembershipState() : Bool {
    return this.__isset_membershipState;
  }

  public function get_role() : Int {
    return this.role;
  }

  public function set_role(role:Int) : Int {
    this.role = role;
    this.__isset_role = true;
    return this.role;
  }

  public function unsetRole() : Void {
    this.__isset_role = false;
  }

  // Returns true if field role is set (has been assigned a value) and false otherwise
  public function isSetRole() : Bool {
    return this.__isset_role;
  }

  public function get_revision() : haxe.Int64 {
    return this.revision;
  }

  public function set_revision(revision:haxe.Int64) : haxe.Int64 {
    this.revision = revision;
    this.__isset_revision = true;
    return this.revision;
  }

  public function unsetRevision() : Void {
    this.__isset_revision = false;
  }

  // Returns true if field revision is set (has been assigned a value) and false otherwise
  public function isSetRevision() : Bool {
    return this.__isset_revision;
  }

  public function get_preference() : SquarePreference {
    return this.preference;
  }

  public function set_preference(preference:SquarePreference) : SquarePreference {
    this.preference = preference;
    return this.preference;
  }

  public function unsetPreference() : Void {
    this.preference = null;
  }

  // Returns true if field preference is set (has been assigned a value) and false otherwise
  public function isSetPreference() : Bool {
    return this.preference != null;
  }

  public function get_joinMessage() : String {
    return this.joinMessage;
  }

  public function set_joinMessage(joinMessage:String) : String {
    this.joinMessage = joinMessage;
    return this.joinMessage;
  }

  public function unsetJoinMessage() : Void {
    this.joinMessage = null;
  }

  // Returns true if field joinMessage is set (has been assigned a value) and false otherwise
  public function isSetJoinMessage() : Bool {
    return this.joinMessage != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case SQUAREMEMBERMID_FIELD_ID:
      if (value == null) {
        unsetSquareMemberMid();
      } else {
        this.squareMemberMid = value;
      }

    case SQUAREMID_FIELD_ID:
      if (value == null) {
        unsetSquareMid();
      } else {
        this.squareMid = value;
      }

    case DISPLAYNAME_FIELD_ID:
      if (value == null) {
        unsetDisplayName();
      } else {
        this.displayName = value;
      }

    case PROFILEIMAGEOBSHASH_FIELD_ID:
      if (value == null) {
        unsetProfileImageObsHash();
      } else {
        this.profileImageObsHash = value;
      }

    case ABLETORECEIVEMESSAGE_FIELD_ID:
      if (value == null) {
        unsetAbleToReceiveMessage();
      } else {
        this.ableToReceiveMessage = value;
      }

    case MEMBERSHIPSTATE_FIELD_ID:
      if (value == null) {
        unsetMembershipState();
      } else {
        this.membershipState = value;
      }

    case ROLE_FIELD_ID:
      if (value == null) {
        unsetRole();
      } else {
        this.role = value;
      }

    case REVISION_FIELD_ID:
      if (value == null) {
        unsetRevision();
      } else {
        this.revision = value;
      }

    case PREFERENCE_FIELD_ID:
      if (value == null) {
        unsetPreference();
      } else {
        this.preference = value;
      }

    case JOINMESSAGE_FIELD_ID:
      if (value == null) {
        unsetJoinMessage();
      } else {
        this.joinMessage = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case SQUAREMEMBERMID_FIELD_ID:
      return this.squareMemberMid;
    case SQUAREMID_FIELD_ID:
      return this.squareMid;
    case DISPLAYNAME_FIELD_ID:
      return this.displayName;
    case PROFILEIMAGEOBSHASH_FIELD_ID:
      return this.profileImageObsHash;
    case ABLETORECEIVEMESSAGE_FIELD_ID:
      return this.ableToReceiveMessage;
    case MEMBERSHIPSTATE_FIELD_ID:
      return this.membershipState;
    case ROLE_FIELD_ID:
      return this.role;
    case REVISION_FIELD_ID:
      return this.revision;
    case PREFERENCE_FIELD_ID:
      return this.preference;
    case JOINMESSAGE_FIELD_ID:
      return this.joinMessage;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case SQUAREMEMBERMID_FIELD_ID:
      return isSetSquareMemberMid();
    case SQUAREMID_FIELD_ID:
      return isSetSquareMid();
    case DISPLAYNAME_FIELD_ID:
      return isSetDisplayName();
    case PROFILEIMAGEOBSHASH_FIELD_ID:
      return isSetProfileImageObsHash();
    case ABLETORECEIVEMESSAGE_FIELD_ID:
      return isSetAbleToReceiveMessage();
    case MEMBERSHIPSTATE_FIELD_ID:
      return isSetMembershipState();
    case ROLE_FIELD_ID:
      return isSetRole();
    case REVISION_FIELD_ID:
      return isSetRevision();
    case PREFERENCE_FIELD_ID:
      return isSetPreference();
    case JOINMESSAGE_FIELD_ID:
      return isSetJoinMessage();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SQUAREMEMBERMID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.squareMemberMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SQUAREMID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.squareMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DISPLAYNAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.displayName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PROFILEIMAGEOBSHASH_FIELD_ID:
            if (field.type == TType.STRING) {
              this.profileImageObsHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ABLETORECEIVEMESSAGE_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.ableToReceiveMessage = iprot.readBool();
              this.__isset_ableToReceiveMessage = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MEMBERSHIPSTATE_FIELD_ID:
            if (field.type == TType.I32) {
              this.membershipState = iprot.readI32();
              this.__isset_membershipState = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ROLE_FIELD_ID:
            if (field.type == TType.I32) {
              this.role = iprot.readI32();
              this.__isset_role = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case REVISION_FIELD_ID:
            if (field.type == TType.I64) {
              this.revision = iprot.readI64();
              this.__isset_revision = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PREFERENCE_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.preference = new SquarePreference();
              this.preference.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case JOINMESSAGE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.joinMessage = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.squareMemberMid != null) {
        oprot.writeFieldBegin(SQUARE_MEMBER_MID_FIELD_DESC);
        oprot.writeString(this.squareMemberMid);
        oprot.writeFieldEnd();
      }
      if (this.squareMid != null) {
        oprot.writeFieldBegin(SQUARE_MID_FIELD_DESC);
        oprot.writeString(this.squareMid);
        oprot.writeFieldEnd();
      }
      if (this.displayName != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(this.displayName);
        oprot.writeFieldEnd();
      }
      if (this.profileImageObsHash != null) {
        oprot.writeFieldBegin(PROFILE_IMAGE_OBS_HASH_FIELD_DESC);
        oprot.writeString(this.profileImageObsHash);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ABLE_TO_RECEIVE_MESSAGE_FIELD_DESC);
      oprot.writeBool(this.ableToReceiveMessage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMBERSHIP_STATE_FIELD_DESC);
      oprot.writeI32(this.membershipState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROLE_FIELD_DESC);
      oprot.writeI32(this.role);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REVISION_FIELD_DESC);
      oprot.writeI64(this.revision);
      oprot.writeFieldEnd();
      if (this.preference != null) {
        oprot.writeFieldBegin(PREFERENCE_FIELD_DESC);
        this.preference.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.joinMessage != null) {
        oprot.writeFieldBegin(JOIN_MESSAGE_FIELD_DESC);
        oprot.writeString(this.joinMessage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SquareMember(";
    var first : Bool = true;

    ret += "squareMemberMid:";
    if (this.squareMemberMid == null) {
      ret += "null";
    } else {
      ret += this.squareMemberMid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "squareMid:";
    if (this.squareMid == null) {
      ret += "null";
    } else {
      ret += this.squareMid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "displayName:";
    if (this.displayName == null) {
      ret += "null";
    } else {
      ret += this.displayName;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "profileImageObsHash:";
    if (this.profileImageObsHash == null) {
      ret += "null";
    } else {
      ret += this.profileImageObsHash;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "ableToReceiveMessage:";
    ret += this.ableToReceiveMessage;
    first = false;
    if (!first) ret +=  ", ";
    ret += "membershipState:";
    var membershipState_name : String = .SquareMembershipState.VALUES_TO_NAMES[this.membershipState];
    if (membershipState_name != null) {
      ret += membershipState_name;
      ret += " (";
    }
    ret += this.membershipState;
    if (membershipState_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "role:";
    var role_name : String = .SquareMemberRole.VALUES_TO_NAMES[this.role];
    if (role_name != null) {
      ret += role_name;
      ret += " (";
    }
    ret += this.role;
    if (role_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "revision:";
    ret += this.revision;
    first = false;
    if (!first) ret +=  ", ";
    ret += "preference:";
    if (this.preference == null) {
      ret += "null";
    } else {
      ret += this.preference;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "joinMessage:";
    if (this.joinMessage == null) {
      ret += "null";
    } else {
      ret += this.joinMessage;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetMembershipState() && !.SquareMembershipState.VALID_VALUES.contains(membershipState)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'membershipState' has been assigned the invalid value " + membershipState);
    }
    if (isSetRole() && !.SquareMemberRole.VALID_VALUES.contains(role)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'role' has been assigned the invalid value " + role);
    }
  }

}

