/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;



class AccountSupervisorServiceImpl implements AccountSupervisorService {

  public function new( iprot : TProtocol, oprot : TProtocol = null)
  {
    iprot_ = iprot;
    if (oprot == null) {
      oprot_ = iprot;
    } else {
      oprot_ = oprot;
    }
  }

  private var iprot_ : TProtocol;
  private var oprot_ : TProtocol;
  private var seqid_ : Int;

  public function getInputProtocol() : TProtocol
  {
    return this.iprot_;
  }

  public function getOutputProtocol() : TProtocol
  {
    return this.oprot_;
  }

  public function getRSAKey() : RSAKey {
    oprot_.writeMessageBegin(new TMessage("getRSAKey", TMessageType.CALL, seqid_));
    var args : GetRSAKey_args = new GetRSAKey_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : RSAKey;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetRSAKey_result = new GetRSAKey_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getRSAKey failed: unknown result");
    });
    return retval;
  }

  public function notifyEmailConfirmationResult(parameterMap : StringMap< String>) : Void {
    oprot_.writeMessageBegin(new TMessage("notifyEmailConfirmationResult", TMessageType.CALL, seqid_));
    var args : NotifyEmailConfirmationResult_args = new NotifyEmailConfirmationResult_args();
    args.parameterMap = parameterMap;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : NotifyEmailConfirmationResult_result = new NotifyEmailConfirmationResult_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function registerVirtualAccount(locale : String, encryptedVirtualUserId : String, encryptedPassword : String) : String {
    oprot_.writeMessageBegin(new TMessage("registerVirtualAccount", TMessageType.CALL, seqid_));
    var args : RegisterVirtualAccount_args = new RegisterVirtualAccount_args();
    args.locale = locale;
    args.encryptedVirtualUserId = encryptedVirtualUserId;
    args.encryptedPassword = encryptedPassword;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RegisterVirtualAccount_result = new RegisterVirtualAccount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "registerVirtualAccount failed: unknown result");
    });
    return retval;
  }

  public function requestVirtualAccountPasswordChange(virtualMid : String, encryptedVirtualUserId : String, encryptedOldPassword : String, encryptedNewPassword : String) : Void {
    oprot_.writeMessageBegin(new TMessage("requestVirtualAccountPasswordChange", TMessageType.CALL, seqid_));
    var args : RequestVirtualAccountPasswordChange_args = new RequestVirtualAccountPasswordChange_args();
    args.virtualMid = virtualMid;
    args.encryptedVirtualUserId = encryptedVirtualUserId;
    args.encryptedOldPassword = encryptedOldPassword;
    args.encryptedNewPassword = encryptedNewPassword;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RequestVirtualAccountPasswordChange_result = new RequestVirtualAccountPasswordChange_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function requestVirtualAccountPasswordSet(virtualMid : String, encryptedVirtualUserId : String, encryptedNewPassword : String) : Void {
    oprot_.writeMessageBegin(new TMessage("requestVirtualAccountPasswordSet", TMessageType.CALL, seqid_));
    var args : RequestVirtualAccountPasswordSet_args = new RequestVirtualAccountPasswordSet_args();
    args.virtualMid = virtualMid;
    args.encryptedVirtualUserId = encryptedVirtualUserId;
    args.encryptedNewPassword = encryptedNewPassword;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RequestVirtualAccountPasswordSet_result = new RequestVirtualAccountPasswordSet_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function unregisterVirtualAccount(virtualMid : String) : Void {
    oprot_.writeMessageBegin(new TMessage("unregisterVirtualAccount", TMessageType.CALL, seqid_));
    var args : UnregisterVirtualAccount_args = new UnregisterVirtualAccount_args();
    args.virtualMid = virtualMid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UnregisterVirtualAccount_result = new UnregisterVirtualAccount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

}
