/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class VerifyPhoneNumberForLogin_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("verifyPhoneNumberForLogin_args"); };
  static var VERIFIER_FROM_PHONE_FIELD_DESC = { new TField("verifierFromPhone", TType.STRING, 2); };
  static var PIN_CODE_FOR_PHONE_FIELD_DESC = { new TField("pinCodeForPhone", TType.STRING, 3); };
  static var VERIFIER_FROM_LOGIN_FIELD_DESC = { new TField("verifierFromLogin", TType.STRING, 4); };

  @:isVar
  public var verifierFromPhone(get,set) : String;
  @:isVar
  public var pinCodeForPhone(get,set) : String;
  @:isVar
  public var verifierFromLogin(get,set) : String;

  inline static var VERIFIERFROMPHONE_FIELD_ID : Int = 2;
  inline static var PINCODEFORPHONE_FIELD_ID : Int = 3;
  inline static var VERIFIERFROMLOGIN_FIELD_ID : Int = 4;


  public function new() {
  }

  public function get_verifierFromPhone() : String {
    return this.verifierFromPhone;
  }

  public function set_verifierFromPhone(verifierFromPhone:String) : String {
    this.verifierFromPhone = verifierFromPhone;
    return this.verifierFromPhone;
  }

  public function unsetVerifierFromPhone() : Void {
    this.verifierFromPhone = null;
  }

  // Returns true if field verifierFromPhone is set (has been assigned a value) and false otherwise
  public function isSetVerifierFromPhone() : Bool {
    return this.verifierFromPhone != null;
  }

  public function get_pinCodeForPhone() : String {
    return this.pinCodeForPhone;
  }

  public function set_pinCodeForPhone(pinCodeForPhone:String) : String {
    this.pinCodeForPhone = pinCodeForPhone;
    return this.pinCodeForPhone;
  }

  public function unsetPinCodeForPhone() : Void {
    this.pinCodeForPhone = null;
  }

  // Returns true if field pinCodeForPhone is set (has been assigned a value) and false otherwise
  public function isSetPinCodeForPhone() : Bool {
    return this.pinCodeForPhone != null;
  }

  public function get_verifierFromLogin() : String {
    return this.verifierFromLogin;
  }

  public function set_verifierFromLogin(verifierFromLogin:String) : String {
    this.verifierFromLogin = verifierFromLogin;
    return this.verifierFromLogin;
  }

  public function unsetVerifierFromLogin() : Void {
    this.verifierFromLogin = null;
  }

  // Returns true if field verifierFromLogin is set (has been assigned a value) and false otherwise
  public function isSetVerifierFromLogin() : Bool {
    return this.verifierFromLogin != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case VERIFIERFROMPHONE_FIELD_ID:
      if (value == null) {
        unsetVerifierFromPhone();
      } else {
        this.verifierFromPhone = value;
      }

    case PINCODEFORPHONE_FIELD_ID:
      if (value == null) {
        unsetPinCodeForPhone();
      } else {
        this.pinCodeForPhone = value;
      }

    case VERIFIERFROMLOGIN_FIELD_ID:
      if (value == null) {
        unsetVerifierFromLogin();
      } else {
        this.verifierFromLogin = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case VERIFIERFROMPHONE_FIELD_ID:
      return this.verifierFromPhone;
    case PINCODEFORPHONE_FIELD_ID:
      return this.pinCodeForPhone;
    case VERIFIERFROMLOGIN_FIELD_ID:
      return this.verifierFromLogin;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case VERIFIERFROMPHONE_FIELD_ID:
      return isSetVerifierFromPhone();
    case PINCODEFORPHONE_FIELD_ID:
      return isSetPinCodeForPhone();
    case VERIFIERFROMLOGIN_FIELD_ID:
      return isSetVerifierFromLogin();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case VERIFIERFROMPHONE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.verifierFromPhone = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PINCODEFORPHONE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.pinCodeForPhone = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case VERIFIERFROMLOGIN_FIELD_ID:
            if (field.type == TType.STRING) {
              this.verifierFromLogin = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.verifierFromPhone != null) {
        oprot.writeFieldBegin(VERIFIER_FROM_PHONE_FIELD_DESC);
        oprot.writeString(this.verifierFromPhone);
        oprot.writeFieldEnd();
      }
      if (this.pinCodeForPhone != null) {
        oprot.writeFieldBegin(PIN_CODE_FOR_PHONE_FIELD_DESC);
        oprot.writeString(this.pinCodeForPhone);
        oprot.writeFieldEnd();
      }
      if (this.verifierFromLogin != null) {
        oprot.writeFieldBegin(VERIFIER_FROM_LOGIN_FIELD_DESC);
        oprot.writeString(this.verifierFromLogin);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "verifyPhoneNumberForLogin_args(";
    var first : Bool = true;

    ret += "verifierFromPhone:";
    if (this.verifierFromPhone == null) {
      ret += "null";
    } else {
      ret += this.verifierFromPhone;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "pinCodeForPhone:";
    if (this.pinCodeForPhone == null) {
      ret += "null";
    } else {
      ret += this.pinCodeForPhone;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "verifierFromLogin:";
    if (this.verifierFromLogin == null) {
      ret += "null";
    } else {
      ret += this.verifierFromLogin;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

