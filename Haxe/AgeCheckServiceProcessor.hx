/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class AgeCheckServiceProcessor implements TProcessor {

  private var AgeCheckService_iface_ : AgeCheckService;
  private var PROCESS_MAP = new StringMap< Int->TProtocol->TProtocol->Void >();

  public function new( iface : AgeCheckService)
  {
    AgeCheckService_iface_ = iface;
    PROCESS_MAP.set("checkUserAge", checkUserAge());
    PROCESS_MAP.set("checkUserAgeWithDocomo", checkUserAgeWithDocomo());
    PROCESS_MAP.set("retrieveOpenIdAuthUrlWithDocomo", retrieveOpenIdAuthUrlWithDocomo());
    PROCESS_MAP.set("retrieveRequestToken", retrieveRequestToken());
  }

  public function process( iprot : TProtocol, oprot : TProtocol) : Bool
  {
    var msg : TMessage = iprot.readMessageBegin();
    var fn  = PROCESS_MAP.get(msg.name);
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      var x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
      return true;
    }
    fn( msg.seqid, iprot, oprot);
    return true;
  }

  private function checkUserAge() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : CheckUserAge_args = new CheckUserAge_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : CheckUserAge_result = new CheckUserAge_result();
      try {
        result.success = AgeCheckService_iface_.checkUserAge(args.carrier, args.sessionId, args.verifier, args.standardAge);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing checkUserAge", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing checkUserAge");
        oprot.writeMessageBegin(new TMessage("checkUserAge", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("checkUserAge", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function checkUserAgeWithDocomo() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : CheckUserAgeWithDocomo_args = new CheckUserAgeWithDocomo_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : CheckUserAgeWithDocomo_result = new CheckUserAgeWithDocomo_result();
      try {
        result.success = AgeCheckService_iface_.checkUserAgeWithDocomo(args.openIdRedirectUrl, args.standardAge, args.verifier);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing checkUserAgeWithDocomo", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing checkUserAgeWithDocomo");
        oprot.writeMessageBegin(new TMessage("checkUserAgeWithDocomo", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("checkUserAgeWithDocomo", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function retrieveOpenIdAuthUrlWithDocomo() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RetrieveOpenIdAuthUrlWithDocomo_args = new RetrieveOpenIdAuthUrlWithDocomo_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RetrieveOpenIdAuthUrlWithDocomo_result = new RetrieveOpenIdAuthUrlWithDocomo_result();
      try {
        result.success = AgeCheckService_iface_.retrieveOpenIdAuthUrlWithDocomo();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing retrieveOpenIdAuthUrlWithDocomo", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing retrieveOpenIdAuthUrlWithDocomo");
        oprot.writeMessageBegin(new TMessage("retrieveOpenIdAuthUrlWithDocomo", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("retrieveOpenIdAuthUrlWithDocomo", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function retrieveRequestToken() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RetrieveRequestToken_args = new RetrieveRequestToken_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RetrieveRequestToken_result = new RetrieveRequestToken_result();
      try {
        result.success = AgeCheckService_iface_.retrieveRequestToken(args.carrier);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing retrieveRequestToken", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing retrieveRequestToken");
        oprot.writeMessageBegin(new TMessage("retrieveRequestToken", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("retrieveRequestToken", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

}

