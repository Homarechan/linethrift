/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class RespondE2EELoginRequest_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("respondE2EELoginRequest_args"); };
  static var VERIFIER_FIELD_DESC = { new TField("verifier", TType.STRING, 1); };
  static var PUBLIC_KEY_FIELD_DESC = { new TField("publicKey", TType.STRUCT, 2); };
  static var ENCRYPTED_KEY_CHAIN_FIELD_DESC = { new TField("encryptedKeyChain", TType.STRING, 3); };
  static var HASH_KEY_CHAIN_FIELD_DESC = { new TField("hashKeyChain", TType.STRING, 4); };
  static var ERROR_CODE_FIELD_DESC = { new TField("errorCode", TType.I32, 5); };

  @:isVar
  public var verifier(get,set) : String;
  @:isVar
  public var publicKey(get,set) : E2EEPublicKey;
  @:isVar
  public var encryptedKeyChain(get,set) : haxe.io.Bytes;
  @:isVar
  public var hashKeyChain(get,set) : haxe.io.Bytes;
  @:isVar
  public var errorCode(get,set) : Int;

  inline static var VERIFIER_FIELD_ID : Int = 1;
  inline static var PUBLICKEY_FIELD_ID : Int = 2;
  inline static var ENCRYPTEDKEYCHAIN_FIELD_ID : Int = 3;
  inline static var HASHKEYCHAIN_FIELD_ID : Int = 4;
  inline static var ERRORCODE_FIELD_ID : Int = 5;

  private var __isset_errorCode : Bool = false;

  public function new() {
  }

  public function get_verifier() : String {
    return this.verifier;
  }

  public function set_verifier(verifier:String) : String {
    this.verifier = verifier;
    return this.verifier;
  }

  public function unsetVerifier() : Void {
    this.verifier = null;
  }

  // Returns true if field verifier is set (has been assigned a value) and false otherwise
  public function isSetVerifier() : Bool {
    return this.verifier != null;
  }

  public function get_publicKey() : E2EEPublicKey {
    return this.publicKey;
  }

  public function set_publicKey(publicKey:E2EEPublicKey) : E2EEPublicKey {
    this.publicKey = publicKey;
    return this.publicKey;
  }

  public function unsetPublicKey() : Void {
    this.publicKey = null;
  }

  // Returns true if field publicKey is set (has been assigned a value) and false otherwise
  public function isSetPublicKey() : Bool {
    return this.publicKey != null;
  }

  public function get_encryptedKeyChain() : haxe.io.Bytes {
    return this.encryptedKeyChain;
  }

  public function set_encryptedKeyChain(encryptedKeyChain:haxe.io.Bytes) : haxe.io.Bytes {
    this.encryptedKeyChain = encryptedKeyChain;
    return this.encryptedKeyChain;
  }

  public function unsetEncryptedKeyChain() : Void {
    this.encryptedKeyChain = null;
  }

  // Returns true if field encryptedKeyChain is set (has been assigned a value) and false otherwise
  public function isSetEncryptedKeyChain() : Bool {
    return this.encryptedKeyChain != null;
  }

  public function get_hashKeyChain() : haxe.io.Bytes {
    return this.hashKeyChain;
  }

  public function set_hashKeyChain(hashKeyChain:haxe.io.Bytes) : haxe.io.Bytes {
    this.hashKeyChain = hashKeyChain;
    return this.hashKeyChain;
  }

  public function unsetHashKeyChain() : Void {
    this.hashKeyChain = null;
  }

  // Returns true if field hashKeyChain is set (has been assigned a value) and false otherwise
  public function isSetHashKeyChain() : Bool {
    return this.hashKeyChain != null;
  }

  public function get_errorCode() : Int {
    return this.errorCode;
  }

  public function set_errorCode(errorCode:Int) : Int {
    this.errorCode = errorCode;
    this.__isset_errorCode = true;
    return this.errorCode;
  }

  public function unsetErrorCode() : Void {
    this.__isset_errorCode = false;
  }

  // Returns true if field errorCode is set (has been assigned a value) and false otherwise
  public function isSetErrorCode() : Bool {
    return this.__isset_errorCode;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case VERIFIER_FIELD_ID:
      if (value == null) {
        unsetVerifier();
      } else {
        this.verifier = value;
      }

    case PUBLICKEY_FIELD_ID:
      if (value == null) {
        unsetPublicKey();
      } else {
        this.publicKey = value;
      }

    case ENCRYPTEDKEYCHAIN_FIELD_ID:
      if (value == null) {
        unsetEncryptedKeyChain();
      } else {
        this.encryptedKeyChain = value;
      }

    case HASHKEYCHAIN_FIELD_ID:
      if (value == null) {
        unsetHashKeyChain();
      } else {
        this.hashKeyChain = value;
      }

    case ERRORCODE_FIELD_ID:
      if (value == null) {
        unsetErrorCode();
      } else {
        this.errorCode = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case VERIFIER_FIELD_ID:
      return this.verifier;
    case PUBLICKEY_FIELD_ID:
      return this.publicKey;
    case ENCRYPTEDKEYCHAIN_FIELD_ID:
      return this.encryptedKeyChain;
    case HASHKEYCHAIN_FIELD_ID:
      return this.hashKeyChain;
    case ERRORCODE_FIELD_ID:
      return this.errorCode;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case VERIFIER_FIELD_ID:
      return isSetVerifier();
    case PUBLICKEY_FIELD_ID:
      return isSetPublicKey();
    case ENCRYPTEDKEYCHAIN_FIELD_ID:
      return isSetEncryptedKeyChain();
    case HASHKEYCHAIN_FIELD_ID:
      return isSetHashKeyChain();
    case ERRORCODE_FIELD_ID:
      return isSetErrorCode();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case VERIFIER_FIELD_ID:
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PUBLICKEY_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.publicKey = new E2EEPublicKey();
              this.publicKey.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ENCRYPTEDKEYCHAIN_FIELD_ID:
            if (field.type == TType.STRING) {
              this.encryptedKeyChain = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case HASHKEYCHAIN_FIELD_ID:
            if (field.type == TType.STRING) {
              this.hashKeyChain = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ERRORCODE_FIELD_ID:
            if (field.type == TType.I32) {
              this.errorCode = iprot.readI32();
              this.__isset_errorCode = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      if (this.publicKey != null) {
        oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
        this.publicKey.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.encryptedKeyChain != null) {
        oprot.writeFieldBegin(ENCRYPTED_KEY_CHAIN_FIELD_DESC);
        oprot.writeBinary(this.encryptedKeyChain);
        oprot.writeFieldEnd();
      }
      if (this.hashKeyChain != null) {
        oprot.writeFieldBegin(HASH_KEY_CHAIN_FIELD_DESC);
        oprot.writeBinary(this.hashKeyChain);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
      oprot.writeI32(this.errorCode);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "respondE2EELoginRequest_args(";
    var first : Bool = true;

    ret += "verifier:";
    if (this.verifier == null) {
      ret += "null";
    } else {
      ret += this.verifier;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "publicKey:";
    if (this.publicKey == null) {
      ret += "null";
    } else {
      ret += this.publicKey;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "encryptedKeyChain:";
    if (this.encryptedKeyChain == null) {
      ret += "null";
    } else {
        ret += "BINARY";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "hashKeyChain:";
    if (this.hashKeyChain == null) {
      ret += "null";
    } else {
        ret += "BINARY";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "errorCode:";
    var errorCode_name : String = .ErrorCode.VALUES_TO_NAMES[this.errorCode];
    if (errorCode_name != null) {
      ret += errorCode_name;
      ret += " (";
    }
    ret += this.errorCode;
    if (errorCode_name != null) {
      ret += ")";
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetErrorCode() && !.ErrorCode.VALID_VALUES.contains(errorCode)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'errorCode' has been assigned the invalid value " + errorCode);
    }
  }

}

