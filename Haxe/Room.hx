/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class Room implements TBase {
  
  static var STRUCT_DESC = { new TStruct("Room"); };
  static var MID_FIELD_DESC = { new TField("mid", TType.STRING, 1); };
  static var CREATED_TIME_FIELD_DESC = { new TField("createdTime", TType.I64, 2); };
  static var CONTACTS_FIELD_DESC = { new TField("contacts", TType.LIST, 10); };
  static var NOTIFICATION_DISABLED_FIELD_DESC = { new TField("notificationDisabled", TType.BOOL, 31); };
  static var MEMBER_MIDS_FIELD_DESC = { new TField("memberMids", TType.LIST, 40); };

  @:isVar
  public var mid(get,set) : String;
  @:isVar
  public var createdTime(get,set) : haxe.Int64;
  @:isVar
  public var contacts(get,set) : List< Contact>;
  @:isVar
  public var notificationDisabled(get,set) : Bool;
  @:isVar
  public var memberMids(get,set) : List< String>;

  inline static var MID_FIELD_ID : Int = 1;
  inline static var CREATEDTIME_FIELD_ID : Int = 2;
  inline static var CONTACTS_FIELD_ID : Int = 10;
  inline static var NOTIFICATIONDISABLED_FIELD_ID : Int = 31;
  inline static var MEMBERMIDS_FIELD_ID : Int = 40;

  private var __isset_createdTime : Bool = false;
  private var __isset_notificationDisabled : Bool = false;

  public function new() {
  }

  public function get_mid() : String {
    return this.mid;
  }

  public function set_mid(mid:String) : String {
    this.mid = mid;
    return this.mid;
  }

  public function unsetMid() : Void {
    this.mid = null;
  }

  // Returns true if field mid is set (has been assigned a value) and false otherwise
  public function isSetMid() : Bool {
    return this.mid != null;
  }

  public function get_createdTime() : haxe.Int64 {
    return this.createdTime;
  }

  public function set_createdTime(createdTime:haxe.Int64) : haxe.Int64 {
    this.createdTime = createdTime;
    this.__isset_createdTime = true;
    return this.createdTime;
  }

  public function unsetCreatedTime() : Void {
    this.__isset_createdTime = false;
  }

  // Returns true if field createdTime is set (has been assigned a value) and false otherwise
  public function isSetCreatedTime() : Bool {
    return this.__isset_createdTime;
  }

  public function get_contacts() : List< Contact> {
    return this.contacts;
  }

  public function set_contacts(contacts:List< Contact>) : List< Contact> {
    this.contacts = contacts;
    return this.contacts;
  }

  public function unsetContacts() : Void {
    this.contacts = null;
  }

  // Returns true if field contacts is set (has been assigned a value) and false otherwise
  public function isSetContacts() : Bool {
    return this.contacts != null;
  }

  public function get_notificationDisabled() : Bool {
    return this.notificationDisabled;
  }

  public function set_notificationDisabled(notificationDisabled:Bool) : Bool {
    this.notificationDisabled = notificationDisabled;
    this.__isset_notificationDisabled = true;
    return this.notificationDisabled;
  }

  public function unsetNotificationDisabled() : Void {
    this.__isset_notificationDisabled = false;
  }

  // Returns true if field notificationDisabled is set (has been assigned a value) and false otherwise
  public function isSetNotificationDisabled() : Bool {
    return this.__isset_notificationDisabled;
  }

  public function get_memberMids() : List< String> {
    return this.memberMids;
  }

  public function set_memberMids(memberMids:List< String>) : List< String> {
    this.memberMids = memberMids;
    return this.memberMids;
  }

  public function unsetMemberMids() : Void {
    this.memberMids = null;
  }

  // Returns true if field memberMids is set (has been assigned a value) and false otherwise
  public function isSetMemberMids() : Bool {
    return this.memberMids != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case MID_FIELD_ID:
      if (value == null) {
        unsetMid();
      } else {
        this.mid = value;
      }

    case CREATEDTIME_FIELD_ID:
      if (value == null) {
        unsetCreatedTime();
      } else {
        this.createdTime = value;
      }

    case CONTACTS_FIELD_ID:
      if (value == null) {
        unsetContacts();
      } else {
        this.contacts = value;
      }

    case NOTIFICATIONDISABLED_FIELD_ID:
      if (value == null) {
        unsetNotificationDisabled();
      } else {
        this.notificationDisabled = value;
      }

    case MEMBERMIDS_FIELD_ID:
      if (value == null) {
        unsetMemberMids();
      } else {
        this.memberMids = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case MID_FIELD_ID:
      return this.mid;
    case CREATEDTIME_FIELD_ID:
      return this.createdTime;
    case CONTACTS_FIELD_ID:
      return this.contacts;
    case NOTIFICATIONDISABLED_FIELD_ID:
      return this.notificationDisabled;
    case MEMBERMIDS_FIELD_ID:
      return this.memberMids;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case MID_FIELD_ID:
      return isSetMid();
    case CREATEDTIME_FIELD_ID:
      return isSetCreatedTime();
    case CONTACTS_FIELD_ID:
      return isSetContacts();
    case NOTIFICATIONDISABLED_FIELD_ID:
      return isSetNotificationDisabled();
    case MEMBERMIDS_FIELD_ID:
      return isSetMemberMids();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CREATEDTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.createdTime = iprot.readI64();
              this.__isset_createdTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CONTACTS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list235 = iprot.readListBegin();
                this.contacts = new List< Contact>();
                for( _i236 in 0 ... _list235.size)
                {
                  var _elem237 : Contact;
                  _elem237 = new Contact();
                  _elem237.read(iprot);
                  this.contacts.add(_elem237);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NOTIFICATIONDISABLED_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.notificationDisabled = iprot.readBool();
              this.__isset_notificationDisabled = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MEMBERMIDS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list238 = iprot.readListBegin();
                this.memberMids = new List< String>();
                for( _i239 in 0 ... _list238.size)
                {
                  var _elem240 : String;
                  _elem240 = iprot.readString();
                  this.memberMids.add(_elem240);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_TIME_FIELD_DESC);
      oprot.writeI64(this.createdTime);
      oprot.writeFieldEnd();
      if (this.contacts != null) {
        oprot.writeFieldBegin(CONTACTS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.contacts.length));
          for( elem241 in this.contacts)
          {
            elem241.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NOTIFICATION_DISABLED_FIELD_DESC);
      oprot.writeBool(this.notificationDisabled);
      oprot.writeFieldEnd();
      if (this.memberMids != null) {
        oprot.writeFieldBegin(MEMBER_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.memberMids.length));
          for( elem242 in this.memberMids)
          {
            oprot.writeString(elem242);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "Room(";
    var first : Bool = true;

    ret += "mid:";
    if (this.mid == null) {
      ret += "null";
    } else {
      ret += this.mid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "createdTime:";
    ret += this.createdTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "contacts:";
    if (this.contacts == null) {
      ret += "null";
    } else {
      ret += this.contacts;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "notificationDisabled:";
    ret += this.notificationDisabled;
    first = false;
    if (!first) ret +=  ", ";
    ret += "memberMids:";
    if (this.memberMids == null) {
      ret += "null";
    } else {
      ret += this.memberMids;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

