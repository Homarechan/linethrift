/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class IdentityCredentialRequest implements TBase {
  
  static var STRUCT_DESC = { new TStruct("IdentityCredentialRequest"); };
  static var META_DATA_FIELD_DESC = { new TField("metaData", TType.MAP, 1); };
  static var IDENTITY_PROVIDER_FIELD_DESC = { new TField("identityProvider", TType.I32, 2); };
  static var CIPHER_KEY_ID_FIELD_DESC = { new TField("cipherKeyId", TType.STRING, 3); };
  static var CIPHER_TEXT_FIELD_DESC = { new TField("cipherText", TType.STRING, 4); };
  static var CONFIRMATION_REQUEST_FIELD_DESC = { new TField("confirmationRequest", TType.STRUCT, 5); };

  @:isVar
  public var metaData(get,set) : StringMap< String>;
  @:isVar
  public var identityProvider(get,set) : Int;
  @:isVar
  public var cipherKeyId(get,set) : String;
  @:isVar
  public var cipherText(get,set) : String;
  @:isVar
  public var confirmationRequest(get,set) : IdentifierConfirmationRequest;

  inline static var METADATA_FIELD_ID : Int = 1;
  inline static var IDENTITYPROVIDER_FIELD_ID : Int = 2;
  inline static var CIPHERKEYID_FIELD_ID : Int = 3;
  inline static var CIPHERTEXT_FIELD_ID : Int = 4;
  inline static var CONFIRMATIONREQUEST_FIELD_ID : Int = 5;

  private var __isset_identityProvider : Bool = false;

  public function new() {
  }

  public function get_metaData() : StringMap< String> {
    return this.metaData;
  }

  public function set_metaData(metaData:StringMap< String>) : StringMap< String> {
    this.metaData = metaData;
    return this.metaData;
  }

  public function unsetMetaData() : Void {
    this.metaData = null;
  }

  // Returns true if field metaData is set (has been assigned a value) and false otherwise
  public function isSetMetaData() : Bool {
    return this.metaData != null;
  }

  public function get_identityProvider() : Int {
    return this.identityProvider;
  }

  public function set_identityProvider(identityProvider:Int) : Int {
    this.identityProvider = identityProvider;
    this.__isset_identityProvider = true;
    return this.identityProvider;
  }

  public function unsetIdentityProvider() : Void {
    this.__isset_identityProvider = false;
  }

  // Returns true if field identityProvider is set (has been assigned a value) and false otherwise
  public function isSetIdentityProvider() : Bool {
    return this.__isset_identityProvider;
  }

  public function get_cipherKeyId() : String {
    return this.cipherKeyId;
  }

  public function set_cipherKeyId(cipherKeyId:String) : String {
    this.cipherKeyId = cipherKeyId;
    return this.cipherKeyId;
  }

  public function unsetCipherKeyId() : Void {
    this.cipherKeyId = null;
  }

  // Returns true if field cipherKeyId is set (has been assigned a value) and false otherwise
  public function isSetCipherKeyId() : Bool {
    return this.cipherKeyId != null;
  }

  public function get_cipherText() : String {
    return this.cipherText;
  }

  public function set_cipherText(cipherText:String) : String {
    this.cipherText = cipherText;
    return this.cipherText;
  }

  public function unsetCipherText() : Void {
    this.cipherText = null;
  }

  // Returns true if field cipherText is set (has been assigned a value) and false otherwise
  public function isSetCipherText() : Bool {
    return this.cipherText != null;
  }

  public function get_confirmationRequest() : IdentifierConfirmationRequest {
    return this.confirmationRequest;
  }

  public function set_confirmationRequest(confirmationRequest:IdentifierConfirmationRequest) : IdentifierConfirmationRequest {
    this.confirmationRequest = confirmationRequest;
    return this.confirmationRequest;
  }

  public function unsetConfirmationRequest() : Void {
    this.confirmationRequest = null;
  }

  // Returns true if field confirmationRequest is set (has been assigned a value) and false otherwise
  public function isSetConfirmationRequest() : Bool {
    return this.confirmationRequest != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case METADATA_FIELD_ID:
      if (value == null) {
        unsetMetaData();
      } else {
        this.metaData = value;
      }

    case IDENTITYPROVIDER_FIELD_ID:
      if (value == null) {
        unsetIdentityProvider();
      } else {
        this.identityProvider = value;
      }

    case CIPHERKEYID_FIELD_ID:
      if (value == null) {
        unsetCipherKeyId();
      } else {
        this.cipherKeyId = value;
      }

    case CIPHERTEXT_FIELD_ID:
      if (value == null) {
        unsetCipherText();
      } else {
        this.cipherText = value;
      }

    case CONFIRMATIONREQUEST_FIELD_ID:
      if (value == null) {
        unsetConfirmationRequest();
      } else {
        this.confirmationRequest = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case METADATA_FIELD_ID:
      return this.metaData;
    case IDENTITYPROVIDER_FIELD_ID:
      return this.identityProvider;
    case CIPHERKEYID_FIELD_ID:
      return this.cipherKeyId;
    case CIPHERTEXT_FIELD_ID:
      return this.cipherText;
    case CONFIRMATIONREQUEST_FIELD_ID:
      return this.confirmationRequest;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case METADATA_FIELD_ID:
      return isSetMetaData();
    case IDENTITYPROVIDER_FIELD_ID:
      return isSetIdentityProvider();
    case CIPHERKEYID_FIELD_ID:
      return isSetCipherKeyId();
    case CIPHERTEXT_FIELD_ID:
      return isSetCipherText();
    case CONFIRMATIONREQUEST_FIELD_ID:
      return isSetConfirmationRequest();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case METADATA_FIELD_ID:
            if (field.type == TType.MAP) {
              {
                var _map36 = iprot.readMapBegin();
                this.metaData = new StringMap< String>();
                for( _i37 in 0 ... _map36.size)
                {
                  var _key38 : String;
                  var _val39 : String;
                  _key38 = iprot.readString();
                  _val39 = iprot.readString();
                  this.metaData.set( _key38, _val39);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case IDENTITYPROVIDER_FIELD_ID:
            if (field.type == TType.I32) {
              this.identityProvider = iprot.readI32();
              this.__isset_identityProvider = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CIPHERKEYID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.cipherKeyId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CIPHERTEXT_FIELD_ID:
            if (field.type == TType.STRING) {
              this.cipherText = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CONFIRMATIONREQUEST_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.confirmationRequest = new IdentifierConfirmationRequest();
              this.confirmationRequest.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.metaData != null) {
        oprot.writeFieldBegin(META_DATA_FIELD_DESC);
        {
          var _sizeCounter41 : Int = 0;
          for( _key40 in this.metaData) {
            _sizeCounter41++;
          }
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _sizeCounter41));
          for( elem42 in this.metaData.keys())
          {
            oprot.writeString(elem42);
            oprot.writeString(this.metaData.get(elem42));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IDENTITY_PROVIDER_FIELD_DESC);
      oprot.writeI32(this.identityProvider);
      oprot.writeFieldEnd();
      if (this.cipherKeyId != null) {
        oprot.writeFieldBegin(CIPHER_KEY_ID_FIELD_DESC);
        oprot.writeString(this.cipherKeyId);
        oprot.writeFieldEnd();
      }
      if (this.cipherText != null) {
        oprot.writeFieldBegin(CIPHER_TEXT_FIELD_DESC);
        oprot.writeString(this.cipherText);
        oprot.writeFieldEnd();
      }
      if (this.confirmationRequest != null) {
        oprot.writeFieldBegin(CONFIRMATION_REQUEST_FIELD_DESC);
        this.confirmationRequest.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "IdentityCredentialRequest(";
    var first : Bool = true;

    ret += "metaData:";
    if (this.metaData == null) {
      ret += "null";
    } else {
      ret += this.metaData;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "identityProvider:";
    var identityProvider_name : String = .IdentityProvider.VALUES_TO_NAMES[this.identityProvider];
    if (identityProvider_name != null) {
      ret += identityProvider_name;
      ret += " (";
    }
    ret += this.identityProvider;
    if (identityProvider_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "cipherKeyId:";
    if (this.cipherKeyId == null) {
      ret += "null";
    } else {
      ret += this.cipherKeyId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "cipherText:";
    if (this.cipherText == null) {
      ret += "null";
    } else {
      ret += this.cipherText;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "confirmationRequest:";
    if (this.confirmationRequest == null) {
      ret += "null";
    } else {
      ret += this.confirmationRequest;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetIdentityProvider() && !.IdentityProvider.VALID_VALUES.contains(identityProvider)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'identityProvider' has been assigned the invalid value " + identityProvider);
    }
  }

}

