/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class CoinPurchaseReservation implements TBase {
  
  static var STRUCT_DESC = { new TStruct("CoinPurchaseReservation"); };
  static var PRODUCT_ID_FIELD_DESC = { new TField("productId", TType.STRING, 1); };
  static var COUNTRY_FIELD_DESC = { new TField("country", TType.STRING, 2); };
  static var CURRENCY_FIELD_DESC = { new TField("currency", TType.STRING, 3); };
  static var PRICE_FIELD_DESC = { new TField("price", TType.STRING, 4); };
  static var APP_STORE_CODE_FIELD_DESC = { new TField("appStoreCode", TType.I32, 5); };
  static var LANGUAGE_FIELD_DESC = { new TField("language", TType.STRING, 6); };
  static var PG_CODE_FIELD_DESC = { new TField("pgCode", TType.I32, 7); };
  static var REDIRECT_URL_FIELD_DESC = { new TField("redirectUrl", TType.STRING, 8); };

  @:isVar
  public var productId(get,set) : String;
  @:isVar
  public var country(get,set) : String;
  @:isVar
  public var currency(get,set) : String;
  @:isVar
  public var price(get,set) : String;
  @:isVar
  public var appStoreCode(get,set) : Int;
  @:isVar
  public var language(get,set) : String;
  @:isVar
  public var pgCode(get,set) : Int;
  @:isVar
  public var redirectUrl(get,set) : String;

  inline static var PRODUCTID_FIELD_ID : Int = 1;
  inline static var COUNTRY_FIELD_ID : Int = 2;
  inline static var CURRENCY_FIELD_ID : Int = 3;
  inline static var PRICE_FIELD_ID : Int = 4;
  inline static var APPSTORECODE_FIELD_ID : Int = 5;
  inline static var LANGUAGE_FIELD_ID : Int = 6;
  inline static var PGCODE_FIELD_ID : Int = 7;
  inline static var REDIRECTURL_FIELD_ID : Int = 8;

  private var __isset_appStoreCode : Bool = false;
  private var __isset_pgCode : Bool = false;

  public function new() {
  }

  public function get_productId() : String {
    return this.productId;
  }

  public function set_productId(productId:String) : String {
    this.productId = productId;
    return this.productId;
  }

  public function unsetProductId() : Void {
    this.productId = null;
  }

  // Returns true if field productId is set (has been assigned a value) and false otherwise
  public function isSetProductId() : Bool {
    return this.productId != null;
  }

  public function get_country() : String {
    return this.country;
  }

  public function set_country(country:String) : String {
    this.country = country;
    return this.country;
  }

  public function unsetCountry() : Void {
    this.country = null;
  }

  // Returns true if field country is set (has been assigned a value) and false otherwise
  public function isSetCountry() : Bool {
    return this.country != null;
  }

  public function get_currency() : String {
    return this.currency;
  }

  public function set_currency(currency:String) : String {
    this.currency = currency;
    return this.currency;
  }

  public function unsetCurrency() : Void {
    this.currency = null;
  }

  // Returns true if field currency is set (has been assigned a value) and false otherwise
  public function isSetCurrency() : Bool {
    return this.currency != null;
  }

  public function get_price() : String {
    return this.price;
  }

  public function set_price(price:String) : String {
    this.price = price;
    return this.price;
  }

  public function unsetPrice() : Void {
    this.price = null;
  }

  // Returns true if field price is set (has been assigned a value) and false otherwise
  public function isSetPrice() : Bool {
    return this.price != null;
  }

  public function get_appStoreCode() : Int {
    return this.appStoreCode;
  }

  public function set_appStoreCode(appStoreCode:Int) : Int {
    this.appStoreCode = appStoreCode;
    this.__isset_appStoreCode = true;
    return this.appStoreCode;
  }

  public function unsetAppStoreCode() : Void {
    this.__isset_appStoreCode = false;
  }

  // Returns true if field appStoreCode is set (has been assigned a value) and false otherwise
  public function isSetAppStoreCode() : Bool {
    return this.__isset_appStoreCode;
  }

  public function get_language() : String {
    return this.language;
  }

  public function set_language(language:String) : String {
    this.language = language;
    return this.language;
  }

  public function unsetLanguage() : Void {
    this.language = null;
  }

  // Returns true if field language is set (has been assigned a value) and false otherwise
  public function isSetLanguage() : Bool {
    return this.language != null;
  }

  public function get_pgCode() : Int {
    return this.pgCode;
  }

  public function set_pgCode(pgCode:Int) : Int {
    this.pgCode = pgCode;
    this.__isset_pgCode = true;
    return this.pgCode;
  }

  public function unsetPgCode() : Void {
    this.__isset_pgCode = false;
  }

  // Returns true if field pgCode is set (has been assigned a value) and false otherwise
  public function isSetPgCode() : Bool {
    return this.__isset_pgCode;
  }

  public function get_redirectUrl() : String {
    return this.redirectUrl;
  }

  public function set_redirectUrl(redirectUrl:String) : String {
    this.redirectUrl = redirectUrl;
    return this.redirectUrl;
  }

  public function unsetRedirectUrl() : Void {
    this.redirectUrl = null;
  }

  // Returns true if field redirectUrl is set (has been assigned a value) and false otherwise
  public function isSetRedirectUrl() : Bool {
    return this.redirectUrl != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case PRODUCTID_FIELD_ID:
      if (value == null) {
        unsetProductId();
      } else {
        this.productId = value;
      }

    case COUNTRY_FIELD_ID:
      if (value == null) {
        unsetCountry();
      } else {
        this.country = value;
      }

    case CURRENCY_FIELD_ID:
      if (value == null) {
        unsetCurrency();
      } else {
        this.currency = value;
      }

    case PRICE_FIELD_ID:
      if (value == null) {
        unsetPrice();
      } else {
        this.price = value;
      }

    case APPSTORECODE_FIELD_ID:
      if (value == null) {
        unsetAppStoreCode();
      } else {
        this.appStoreCode = value;
      }

    case LANGUAGE_FIELD_ID:
      if (value == null) {
        unsetLanguage();
      } else {
        this.language = value;
      }

    case PGCODE_FIELD_ID:
      if (value == null) {
        unsetPgCode();
      } else {
        this.pgCode = value;
      }

    case REDIRECTURL_FIELD_ID:
      if (value == null) {
        unsetRedirectUrl();
      } else {
        this.redirectUrl = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case PRODUCTID_FIELD_ID:
      return this.productId;
    case COUNTRY_FIELD_ID:
      return this.country;
    case CURRENCY_FIELD_ID:
      return this.currency;
    case PRICE_FIELD_ID:
      return this.price;
    case APPSTORECODE_FIELD_ID:
      return this.appStoreCode;
    case LANGUAGE_FIELD_ID:
      return this.language;
    case PGCODE_FIELD_ID:
      return this.pgCode;
    case REDIRECTURL_FIELD_ID:
      return this.redirectUrl;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case PRODUCTID_FIELD_ID:
      return isSetProductId();
    case COUNTRY_FIELD_ID:
      return isSetCountry();
    case CURRENCY_FIELD_ID:
      return isSetCurrency();
    case PRICE_FIELD_ID:
      return isSetPrice();
    case APPSTORECODE_FIELD_ID:
      return isSetAppStoreCode();
    case LANGUAGE_FIELD_ID:
      return isSetLanguage();
    case PGCODE_FIELD_ID:
      return isSetPgCode();
    case REDIRECTURL_FIELD_ID:
      return isSetRedirectUrl();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case PRODUCTID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.productId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case COUNTRY_FIELD_ID:
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CURRENCY_FIELD_ID:
            if (field.type == TType.STRING) {
              this.currency = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PRICE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.price = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case APPSTORECODE_FIELD_ID:
            if (field.type == TType.I32) {
              this.appStoreCode = iprot.readI32();
              this.__isset_appStoreCode = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case LANGUAGE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PGCODE_FIELD_ID:
            if (field.type == TType.I32) {
              this.pgCode = iprot.readI32();
              this.__isset_pgCode = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case REDIRECTURL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.redirectUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(this.productId);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      if (this.currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(this.currency);
        oprot.writeFieldEnd();
      }
      if (this.price != null) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeString(this.price);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APP_STORE_CODE_FIELD_DESC);
      oprot.writeI32(this.appStoreCode);
      oprot.writeFieldEnd();
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PG_CODE_FIELD_DESC);
      oprot.writeI32(this.pgCode);
      oprot.writeFieldEnd();
      if (this.redirectUrl != null) {
        oprot.writeFieldBegin(REDIRECT_URL_FIELD_DESC);
        oprot.writeString(this.redirectUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "CoinPurchaseReservation(";
    var first : Bool = true;

    ret += "productId:";
    if (this.productId == null) {
      ret += "null";
    } else {
      ret += this.productId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "country:";
    if (this.country == null) {
      ret += "null";
    } else {
      ret += this.country;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "currency:";
    if (this.currency == null) {
      ret += "null";
    } else {
      ret += this.currency;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "price:";
    if (this.price == null) {
      ret += "null";
    } else {
      ret += this.price;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "appStoreCode:";
    var appStoreCode_name : String = .PaymentType.VALUES_TO_NAMES[this.appStoreCode];
    if (appStoreCode_name != null) {
      ret += appStoreCode_name;
      ret += " (";
    }
    ret += this.appStoreCode;
    if (appStoreCode_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "language:";
    if (this.language == null) {
      ret += "null";
    } else {
      ret += this.language;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "pgCode:";
    var pgCode_name : String = .PaymentPgType.VALUES_TO_NAMES[this.pgCode];
    if (pgCode_name != null) {
      ret += pgCode_name;
      ret += " (";
    }
    ret += this.pgCode;
    if (pgCode_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "redirectUrl:";
    if (this.redirectUrl == null) {
      ret += "null";
    } else {
      ret += this.redirectUrl;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetAppStoreCode() && !.PaymentType.VALID_VALUES.contains(appStoreCode)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'appStoreCode' has been assigned the invalid value " + appStoreCode);
    }
    if (isSetPgCode() && !.PaymentPgType.VALID_VALUES.contains(pgCode)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'pgCode' has been assigned the invalid value " + pgCode);
    }
  }

}

