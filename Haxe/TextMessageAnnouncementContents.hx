/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class TextMessageAnnouncementContents implements TBase {
  
  static var STRUCT_DESC = { new TStruct("TextMessageAnnouncementContents"); };
  static var MESSAGE_ID_FIELD_DESC = { new TField("messageId", TType.STRING, 1); };
  static var TEXT_FIELD_DESC = { new TField("text", TType.STRING, 2); };
  static var SENDER_SQUARE_MEMBER_MID_FIELD_DESC = { new TField("senderSquareMemberMid", TType.STRING, 3); };
  static var CREATED_AT_FIELD_DESC = { new TField("createdAt", TType.I64, 4); };

  @:isVar
  public var messageId(get,set) : String;
  @:isVar
  public var text(get,set) : String;
  @:isVar
  public var senderSquareMemberMid(get,set) : String;
  @:isVar
  public var createdAt(get,set) : haxe.Int64;

  inline static var MESSAGEID_FIELD_ID : Int = 1;
  inline static var TEXT_FIELD_ID : Int = 2;
  inline static var SENDERSQUAREMEMBERMID_FIELD_ID : Int = 3;
  inline static var CREATEDAT_FIELD_ID : Int = 4;

  private var __isset_createdAt : Bool = false;

  public function new() {
  }

  public function get_messageId() : String {
    return this.messageId;
  }

  public function set_messageId(messageId:String) : String {
    this.messageId = messageId;
    return this.messageId;
  }

  public function unsetMessageId() : Void {
    this.messageId = null;
  }

  // Returns true if field messageId is set (has been assigned a value) and false otherwise
  public function isSetMessageId() : Bool {
    return this.messageId != null;
  }

  public function get_text() : String {
    return this.text;
  }

  public function set_text(text:String) : String {
    this.text = text;
    return this.text;
  }

  public function unsetText() : Void {
    this.text = null;
  }

  // Returns true if field text is set (has been assigned a value) and false otherwise
  public function isSetText() : Bool {
    return this.text != null;
  }

  public function get_senderSquareMemberMid() : String {
    return this.senderSquareMemberMid;
  }

  public function set_senderSquareMemberMid(senderSquareMemberMid:String) : String {
    this.senderSquareMemberMid = senderSquareMemberMid;
    return this.senderSquareMemberMid;
  }

  public function unsetSenderSquareMemberMid() : Void {
    this.senderSquareMemberMid = null;
  }

  // Returns true if field senderSquareMemberMid is set (has been assigned a value) and false otherwise
  public function isSetSenderSquareMemberMid() : Bool {
    return this.senderSquareMemberMid != null;
  }

  public function get_createdAt() : haxe.Int64 {
    return this.createdAt;
  }

  public function set_createdAt(createdAt:haxe.Int64) : haxe.Int64 {
    this.createdAt = createdAt;
    this.__isset_createdAt = true;
    return this.createdAt;
  }

  public function unsetCreatedAt() : Void {
    this.__isset_createdAt = false;
  }

  // Returns true if field createdAt is set (has been assigned a value) and false otherwise
  public function isSetCreatedAt() : Bool {
    return this.__isset_createdAt;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case MESSAGEID_FIELD_ID:
      if (value == null) {
        unsetMessageId();
      } else {
        this.messageId = value;
      }

    case TEXT_FIELD_ID:
      if (value == null) {
        unsetText();
      } else {
        this.text = value;
      }

    case SENDERSQUAREMEMBERMID_FIELD_ID:
      if (value == null) {
        unsetSenderSquareMemberMid();
      } else {
        this.senderSquareMemberMid = value;
      }

    case CREATEDAT_FIELD_ID:
      if (value == null) {
        unsetCreatedAt();
      } else {
        this.createdAt = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case MESSAGEID_FIELD_ID:
      return this.messageId;
    case TEXT_FIELD_ID:
      return this.text;
    case SENDERSQUAREMEMBERMID_FIELD_ID:
      return this.senderSquareMemberMid;
    case CREATEDAT_FIELD_ID:
      return this.createdAt;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case MESSAGEID_FIELD_ID:
      return isSetMessageId();
    case TEXT_FIELD_ID:
      return isSetText();
    case SENDERSQUAREMEMBERMID_FIELD_ID:
      return isSetSenderSquareMemberMid();
    case CREATEDAT_FIELD_ID:
      return isSetCreatedAt();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MESSAGEID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.messageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TEXT_FIELD_ID:
            if (field.type == TType.STRING) {
              this.text = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SENDERSQUAREMEMBERMID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.senderSquareMemberMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CREATEDAT_FIELD_ID:
            if (field.type == TType.I64) {
              this.createdAt = iprot.readI64();
              this.__isset_createdAt = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.messageId != null) {
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.messageId);
        oprot.writeFieldEnd();
      }
      if (this.text != null) {
        oprot.writeFieldBegin(TEXT_FIELD_DESC);
        oprot.writeString(this.text);
        oprot.writeFieldEnd();
      }
      if (this.senderSquareMemberMid != null) {
        oprot.writeFieldBegin(SENDER_SQUARE_MEMBER_MID_FIELD_DESC);
        oprot.writeString(this.senderSquareMemberMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
      oprot.writeI64(this.createdAt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "TextMessageAnnouncementContents(";
    var first : Bool = true;

    ret += "messageId:";
    if (this.messageId == null) {
      ret += "null";
    } else {
      ret += this.messageId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "text:";
    if (this.text == null) {
      ret += "null";
    } else {
      ret += this.text;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "senderSquareMemberMid:";
    if (this.senderSquareMemberMid == null) {
      ret += "null";
    } else {
      ret += this.senderSquareMemberMid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "createdAt:";
    ret += this.createdAt;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

