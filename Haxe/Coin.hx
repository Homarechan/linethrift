/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class Coin implements TBase {
  
  static var STRUCT_DESC = { new TStruct("Coin"); };
  static var FREE_COIN_BALANCE_FIELD_DESC = { new TField("freeCoinBalance", TType.I32, 1); };
  static var PAYED_COIN_BALANCE_FIELD_DESC = { new TField("payedCoinBalance", TType.I32, 2); };
  static var TOTAL_COIN_BALANCE_FIELD_DESC = { new TField("totalCoinBalance", TType.I32, 3); };
  static var REWARD_COIN_BALANCE_FIELD_DESC = { new TField("rewardCoinBalance", TType.I32, 4); };

  @:isVar
  public var freeCoinBalance(get,set) : haxe.Int32;
  @:isVar
  public var payedCoinBalance(get,set) : haxe.Int32;
  @:isVar
  public var totalCoinBalance(get,set) : haxe.Int32;
  @:isVar
  public var rewardCoinBalance(get,set) : haxe.Int32;

  inline static var FREECOINBALANCE_FIELD_ID : Int = 1;
  inline static var PAYEDCOINBALANCE_FIELD_ID : Int = 2;
  inline static var TOTALCOINBALANCE_FIELD_ID : Int = 3;
  inline static var REWARDCOINBALANCE_FIELD_ID : Int = 4;

  private var __isset_freeCoinBalance : Bool = false;
  private var __isset_payedCoinBalance : Bool = false;
  private var __isset_totalCoinBalance : Bool = false;
  private var __isset_rewardCoinBalance : Bool = false;

  public function new() {
  }

  public function get_freeCoinBalance() : haxe.Int32 {
    return this.freeCoinBalance;
  }

  public function set_freeCoinBalance(freeCoinBalance:haxe.Int32) : haxe.Int32 {
    this.freeCoinBalance = freeCoinBalance;
    this.__isset_freeCoinBalance = true;
    return this.freeCoinBalance;
  }

  public function unsetFreeCoinBalance() : Void {
    this.__isset_freeCoinBalance = false;
  }

  // Returns true if field freeCoinBalance is set (has been assigned a value) and false otherwise
  public function isSetFreeCoinBalance() : Bool {
    return this.__isset_freeCoinBalance;
  }

  public function get_payedCoinBalance() : haxe.Int32 {
    return this.payedCoinBalance;
  }

  public function set_payedCoinBalance(payedCoinBalance:haxe.Int32) : haxe.Int32 {
    this.payedCoinBalance = payedCoinBalance;
    this.__isset_payedCoinBalance = true;
    return this.payedCoinBalance;
  }

  public function unsetPayedCoinBalance() : Void {
    this.__isset_payedCoinBalance = false;
  }

  // Returns true if field payedCoinBalance is set (has been assigned a value) and false otherwise
  public function isSetPayedCoinBalance() : Bool {
    return this.__isset_payedCoinBalance;
  }

  public function get_totalCoinBalance() : haxe.Int32 {
    return this.totalCoinBalance;
  }

  public function set_totalCoinBalance(totalCoinBalance:haxe.Int32) : haxe.Int32 {
    this.totalCoinBalance = totalCoinBalance;
    this.__isset_totalCoinBalance = true;
    return this.totalCoinBalance;
  }

  public function unsetTotalCoinBalance() : Void {
    this.__isset_totalCoinBalance = false;
  }

  // Returns true if field totalCoinBalance is set (has been assigned a value) and false otherwise
  public function isSetTotalCoinBalance() : Bool {
    return this.__isset_totalCoinBalance;
  }

  public function get_rewardCoinBalance() : haxe.Int32 {
    return this.rewardCoinBalance;
  }

  public function set_rewardCoinBalance(rewardCoinBalance:haxe.Int32) : haxe.Int32 {
    this.rewardCoinBalance = rewardCoinBalance;
    this.__isset_rewardCoinBalance = true;
    return this.rewardCoinBalance;
  }

  public function unsetRewardCoinBalance() : Void {
    this.__isset_rewardCoinBalance = false;
  }

  // Returns true if field rewardCoinBalance is set (has been assigned a value) and false otherwise
  public function isSetRewardCoinBalance() : Bool {
    return this.__isset_rewardCoinBalance;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case FREECOINBALANCE_FIELD_ID:
      if (value == null) {
        unsetFreeCoinBalance();
      } else {
        this.freeCoinBalance = value;
      }

    case PAYEDCOINBALANCE_FIELD_ID:
      if (value == null) {
        unsetPayedCoinBalance();
      } else {
        this.payedCoinBalance = value;
      }

    case TOTALCOINBALANCE_FIELD_ID:
      if (value == null) {
        unsetTotalCoinBalance();
      } else {
        this.totalCoinBalance = value;
      }

    case REWARDCOINBALANCE_FIELD_ID:
      if (value == null) {
        unsetRewardCoinBalance();
      } else {
        this.rewardCoinBalance = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case FREECOINBALANCE_FIELD_ID:
      return this.freeCoinBalance;
    case PAYEDCOINBALANCE_FIELD_ID:
      return this.payedCoinBalance;
    case TOTALCOINBALANCE_FIELD_ID:
      return this.totalCoinBalance;
    case REWARDCOINBALANCE_FIELD_ID:
      return this.rewardCoinBalance;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case FREECOINBALANCE_FIELD_ID:
      return isSetFreeCoinBalance();
    case PAYEDCOINBALANCE_FIELD_ID:
      return isSetPayedCoinBalance();
    case TOTALCOINBALANCE_FIELD_ID:
      return isSetTotalCoinBalance();
    case REWARDCOINBALANCE_FIELD_ID:
      return isSetRewardCoinBalance();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case FREECOINBALANCE_FIELD_ID:
            if (field.type == TType.I32) {
              this.freeCoinBalance = iprot.readI32();
              this.__isset_freeCoinBalance = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PAYEDCOINBALANCE_FIELD_ID:
            if (field.type == TType.I32) {
              this.payedCoinBalance = iprot.readI32();
              this.__isset_payedCoinBalance = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TOTALCOINBALANCE_FIELD_ID:
            if (field.type == TType.I32) {
              this.totalCoinBalance = iprot.readI32();
              this.__isset_totalCoinBalance = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case REWARDCOINBALANCE_FIELD_ID:
            if (field.type == TType.I32) {
              this.rewardCoinBalance = iprot.readI32();
              this.__isset_rewardCoinBalance = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FREE_COIN_BALANCE_FIELD_DESC);
      oprot.writeI32(this.freeCoinBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAYED_COIN_BALANCE_FIELD_DESC);
      oprot.writeI32(this.payedCoinBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_COIN_BALANCE_FIELD_DESC);
      oprot.writeI32(this.totalCoinBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REWARD_COIN_BALANCE_FIELD_DESC);
      oprot.writeI32(this.rewardCoinBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "Coin(";
    var first : Bool = true;

    ret += "freeCoinBalance:";
    ret += this.freeCoinBalance;
    first = false;
    if (!first) ret +=  ", ";
    ret += "payedCoinBalance:";
    ret += this.payedCoinBalance;
    first = false;
    if (!first) ret +=  ", ";
    ret += "totalCoinBalance:";
    ret += this.totalCoinBalance;
    first = false;
    if (!first) ret +=  ", ";
    ret += "rewardCoinBalance:";
    ret += this.rewardCoinBalance;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

