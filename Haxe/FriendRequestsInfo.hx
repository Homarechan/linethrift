/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class FriendRequestsInfo implements TBase {
  
  static var STRUCT_DESC = { new TStruct("FriendRequestsInfo"); };
  static var TOTAL_INCOMING_COUNT_FIELD_DESC = { new TField("totalIncomingCount", TType.I32, 1); };
  static var TOTAL_OUTGOING_COUNT_FIELD_DESC = { new TField("totalOutgoingCount", TType.I32, 2); };
  static var RECENT_INCOMINGS_FIELD_DESC = { new TField("recentIncomings", TType.LIST, 3); };
  static var RECENT_OUTGOINGS_FIELD_DESC = { new TField("recentOutgoings", TType.LIST, 4); };
  static var TOTAL_INCOMING_LIMIT_FIELD_DESC = { new TField("totalIncomingLimit", TType.I32, 5); };
  static var TOTAL_OUTGOING_LIMIT_FIELD_DESC = { new TField("totalOutgoingLimit", TType.I32, 6); };

  @:isVar
  public var totalIncomingCount(get,set) : haxe.Int32;
  @:isVar
  public var totalOutgoingCount(get,set) : haxe.Int32;
  @:isVar
  public var recentIncomings(get,set) : List< FriendRequest>;
  @:isVar
  public var recentOutgoings(get,set) : List< FriendRequest>;
  @:isVar
  public var totalIncomingLimit(get,set) : haxe.Int32;
  @:isVar
  public var totalOutgoingLimit(get,set) : haxe.Int32;

  inline static var TOTALINCOMINGCOUNT_FIELD_ID : Int = 1;
  inline static var TOTALOUTGOINGCOUNT_FIELD_ID : Int = 2;
  inline static var RECENTINCOMINGS_FIELD_ID : Int = 3;
  inline static var RECENTOUTGOINGS_FIELD_ID : Int = 4;
  inline static var TOTALINCOMINGLIMIT_FIELD_ID : Int = 5;
  inline static var TOTALOUTGOINGLIMIT_FIELD_ID : Int = 6;

  private var __isset_totalIncomingCount : Bool = false;
  private var __isset_totalOutgoingCount : Bool = false;
  private var __isset_totalIncomingLimit : Bool = false;
  private var __isset_totalOutgoingLimit : Bool = false;

  public function new() {
  }

  public function get_totalIncomingCount() : haxe.Int32 {
    return this.totalIncomingCount;
  }

  public function set_totalIncomingCount(totalIncomingCount:haxe.Int32) : haxe.Int32 {
    this.totalIncomingCount = totalIncomingCount;
    this.__isset_totalIncomingCount = true;
    return this.totalIncomingCount;
  }

  public function unsetTotalIncomingCount() : Void {
    this.__isset_totalIncomingCount = false;
  }

  // Returns true if field totalIncomingCount is set (has been assigned a value) and false otherwise
  public function isSetTotalIncomingCount() : Bool {
    return this.__isset_totalIncomingCount;
  }

  public function get_totalOutgoingCount() : haxe.Int32 {
    return this.totalOutgoingCount;
  }

  public function set_totalOutgoingCount(totalOutgoingCount:haxe.Int32) : haxe.Int32 {
    this.totalOutgoingCount = totalOutgoingCount;
    this.__isset_totalOutgoingCount = true;
    return this.totalOutgoingCount;
  }

  public function unsetTotalOutgoingCount() : Void {
    this.__isset_totalOutgoingCount = false;
  }

  // Returns true if field totalOutgoingCount is set (has been assigned a value) and false otherwise
  public function isSetTotalOutgoingCount() : Bool {
    return this.__isset_totalOutgoingCount;
  }

  public function get_recentIncomings() : List< FriendRequest> {
    return this.recentIncomings;
  }

  public function set_recentIncomings(recentIncomings:List< FriendRequest>) : List< FriendRequest> {
    this.recentIncomings = recentIncomings;
    return this.recentIncomings;
  }

  public function unsetRecentIncomings() : Void {
    this.recentIncomings = null;
  }

  // Returns true if field recentIncomings is set (has been assigned a value) and false otherwise
  public function isSetRecentIncomings() : Bool {
    return this.recentIncomings != null;
  }

  public function get_recentOutgoings() : List< FriendRequest> {
    return this.recentOutgoings;
  }

  public function set_recentOutgoings(recentOutgoings:List< FriendRequest>) : List< FriendRequest> {
    this.recentOutgoings = recentOutgoings;
    return this.recentOutgoings;
  }

  public function unsetRecentOutgoings() : Void {
    this.recentOutgoings = null;
  }

  // Returns true if field recentOutgoings is set (has been assigned a value) and false otherwise
  public function isSetRecentOutgoings() : Bool {
    return this.recentOutgoings != null;
  }

  public function get_totalIncomingLimit() : haxe.Int32 {
    return this.totalIncomingLimit;
  }

  public function set_totalIncomingLimit(totalIncomingLimit:haxe.Int32) : haxe.Int32 {
    this.totalIncomingLimit = totalIncomingLimit;
    this.__isset_totalIncomingLimit = true;
    return this.totalIncomingLimit;
  }

  public function unsetTotalIncomingLimit() : Void {
    this.__isset_totalIncomingLimit = false;
  }

  // Returns true if field totalIncomingLimit is set (has been assigned a value) and false otherwise
  public function isSetTotalIncomingLimit() : Bool {
    return this.__isset_totalIncomingLimit;
  }

  public function get_totalOutgoingLimit() : haxe.Int32 {
    return this.totalOutgoingLimit;
  }

  public function set_totalOutgoingLimit(totalOutgoingLimit:haxe.Int32) : haxe.Int32 {
    this.totalOutgoingLimit = totalOutgoingLimit;
    this.__isset_totalOutgoingLimit = true;
    return this.totalOutgoingLimit;
  }

  public function unsetTotalOutgoingLimit() : Void {
    this.__isset_totalOutgoingLimit = false;
  }

  // Returns true if field totalOutgoingLimit is set (has been assigned a value) and false otherwise
  public function isSetTotalOutgoingLimit() : Bool {
    return this.__isset_totalOutgoingLimit;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case TOTALINCOMINGCOUNT_FIELD_ID:
      if (value == null) {
        unsetTotalIncomingCount();
      } else {
        this.totalIncomingCount = value;
      }

    case TOTALOUTGOINGCOUNT_FIELD_ID:
      if (value == null) {
        unsetTotalOutgoingCount();
      } else {
        this.totalOutgoingCount = value;
      }

    case RECENTINCOMINGS_FIELD_ID:
      if (value == null) {
        unsetRecentIncomings();
      } else {
        this.recentIncomings = value;
      }

    case RECENTOUTGOINGS_FIELD_ID:
      if (value == null) {
        unsetRecentOutgoings();
      } else {
        this.recentOutgoings = value;
      }

    case TOTALINCOMINGLIMIT_FIELD_ID:
      if (value == null) {
        unsetTotalIncomingLimit();
      } else {
        this.totalIncomingLimit = value;
      }

    case TOTALOUTGOINGLIMIT_FIELD_ID:
      if (value == null) {
        unsetTotalOutgoingLimit();
      } else {
        this.totalOutgoingLimit = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case TOTALINCOMINGCOUNT_FIELD_ID:
      return this.totalIncomingCount;
    case TOTALOUTGOINGCOUNT_FIELD_ID:
      return this.totalOutgoingCount;
    case RECENTINCOMINGS_FIELD_ID:
      return this.recentIncomings;
    case RECENTOUTGOINGS_FIELD_ID:
      return this.recentOutgoings;
    case TOTALINCOMINGLIMIT_FIELD_ID:
      return this.totalIncomingLimit;
    case TOTALOUTGOINGLIMIT_FIELD_ID:
      return this.totalOutgoingLimit;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case TOTALINCOMINGCOUNT_FIELD_ID:
      return isSetTotalIncomingCount();
    case TOTALOUTGOINGCOUNT_FIELD_ID:
      return isSetTotalOutgoingCount();
    case RECENTINCOMINGS_FIELD_ID:
      return isSetRecentIncomings();
    case RECENTOUTGOINGS_FIELD_ID:
      return isSetRecentOutgoings();
    case TOTALINCOMINGLIMIT_FIELD_ID:
      return isSetTotalIncomingLimit();
    case TOTALOUTGOINGLIMIT_FIELD_ID:
      return isSetTotalOutgoingLimit();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case TOTALINCOMINGCOUNT_FIELD_ID:
            if (field.type == TType.I32) {
              this.totalIncomingCount = iprot.readI32();
              this.__isset_totalIncomingCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TOTALOUTGOINGCOUNT_FIELD_ID:
            if (field.type == TType.I32) {
              this.totalOutgoingCount = iprot.readI32();
              this.__isset_totalOutgoingCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case RECENTINCOMINGS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list235 = iprot.readListBegin();
                this.recentIncomings = new List< FriendRequest>();
                for( _i236 in 0 ... _list235.size)
                {
                  var _elem237 : FriendRequest;
                  _elem237 = new FriendRequest();
                  _elem237.read(iprot);
                  this.recentIncomings.add(_elem237);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case RECENTOUTGOINGS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list238 = iprot.readListBegin();
                this.recentOutgoings = new List< FriendRequest>();
                for( _i239 in 0 ... _list238.size)
                {
                  var _elem240 : FriendRequest;
                  _elem240 = new FriendRequest();
                  _elem240.read(iprot);
                  this.recentOutgoings.add(_elem240);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TOTALINCOMINGLIMIT_FIELD_ID:
            if (field.type == TType.I32) {
              this.totalIncomingLimit = iprot.readI32();
              this.__isset_totalIncomingLimit = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TOTALOUTGOINGLIMIT_FIELD_ID:
            if (field.type == TType.I32) {
              this.totalOutgoingLimit = iprot.readI32();
              this.__isset_totalOutgoingLimit = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTAL_INCOMING_COUNT_FIELD_DESC);
      oprot.writeI32(this.totalIncomingCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_OUTGOING_COUNT_FIELD_DESC);
      oprot.writeI32(this.totalOutgoingCount);
      oprot.writeFieldEnd();
      if (this.recentIncomings != null) {
        oprot.writeFieldBegin(RECENT_INCOMINGS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.recentIncomings.length));
          for( elem241 in this.recentIncomings)
          {
            elem241.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.recentOutgoings != null) {
        oprot.writeFieldBegin(RECENT_OUTGOINGS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.recentOutgoings.length));
          for( elem242 in this.recentOutgoings)
          {
            elem242.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_INCOMING_LIMIT_FIELD_DESC);
      oprot.writeI32(this.totalIncomingLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_OUTGOING_LIMIT_FIELD_DESC);
      oprot.writeI32(this.totalOutgoingLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "FriendRequestsInfo(";
    var first : Bool = true;

    ret += "totalIncomingCount:";
    ret += this.totalIncomingCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "totalOutgoingCount:";
    ret += this.totalOutgoingCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "recentIncomings:";
    if (this.recentIncomings == null) {
      ret += "null";
    } else {
      ret += this.recentIncomings;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "recentOutgoings:";
    if (this.recentOutgoings == null) {
      ret += "null";
    } else {
      ret += this.recentOutgoings;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "totalIncomingLimit:";
    ret += this.totalIncomingLimit;
    first = false;
    if (!first) ret +=  ", ";
    ret += "totalOutgoingLimit:";
    ret += this.totalOutgoingLimit;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

