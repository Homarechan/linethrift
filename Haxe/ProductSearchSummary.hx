/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class ProductSearchSummary implements TBase {
  
  static var STRUCT_DESC = { new TStruct("ProductSearchSummary"); };
  static var ID_FIELD_DESC = { new TField("id", TType.STRING, 1); };
  static var TYPE_FIELD_DESC = { new TField("type", TType.I32, 2); };
  static var NAME_FIELD_DESC = { new TField("name", TType.STRING, 3); };
  static var AUTHOR_FIELD_DESC = { new TField("author", TType.STRING, 4); };
  static var PROMOTION_INFO_FIELD_DESC = { new TField("promotionInfo", TType.STRUCT, 5); };
  static var VERSION_FIELD_DESC = { new TField("version", TType.I64, 6); };
  static var NEW_FLAG_FIELD_DESC = { new TField("newFlag", TType.BOOL, 7); };
  static var PRICE_TIER_FIELD_DESC = { new TField("priceTier", TType.I32, 8); };
  static var PRICE_IN_LINE_COIN_FIELD_DESC = { new TField("priceInLineCoin", TType.STRING, 9); };
  static var PROPERTY_FIELD_DESC = { new TField("property", TType.STRUCT, 10); };
  static var SUB_TYPE_FIELD_DESC = { new TField("subType", TType.I32, 11); };
  static var ON_SALE_FIELD_DESC = { new TField("onSale", TType.BOOL, 12); };
  static var AVAILABLE_FOR_PRESENT_FIELD_DESC = { new TField("availableForPresent", TType.BOOL, 13); };
  static var AVAILABLE_FOR_PURCHASE_FIELD_DESC = { new TField("availableForPurchase", TType.BOOL, 14); };
  static var VALID_DAYS_FIELD_DESC = { new TField("validDays", TType.I32, 15); };
  static var AUTHOR_ID_FIELD_DESC = { new TField("authorId", TType.STRING, 16); };
  static var SALE_FLAG_FIELD_DESC = { new TField("saleFlag", TType.BOOL, 17); };

  @:isVar
  public var id(get,set) : String;
  @:isVar
  public var type(get,set) : Int;
  @:isVar
  public var name(get,set) : String;
  @:isVar
  public var author(get,set) : String;
  @:isVar
  public var promotionInfo(get,set) : PromotionInfo;
  @:isVar
  public var version(get,set) : haxe.Int64;
  @:isVar
  public var newFlag(get,set) : Bool;
  @:isVar
  public var priceTier(get,set) : haxe.Int32;
  @:isVar
  public var priceInLineCoin(get,set) : String;
  @:isVar
  public var property(get,set) : ProductProperty;
  @:isVar
  public var subType(get,set) : Int;
  @:isVar
  public var onSale(get,set) : Bool;
  @:isVar
  public var availableForPresent(get,set) : Bool;
  @:isVar
  public var availableForPurchase(get,set) : Bool;
  @:isVar
  public var validDays(get,set) : haxe.Int32;
  @:isVar
  public var authorId(get,set) : String;
  @:isVar
  public var saleFlag(get,set) : Bool;

  inline static var ID_FIELD_ID : Int = 1;
  inline static var TYPE_FIELD_ID : Int = 2;
  inline static var NAME_FIELD_ID : Int = 3;
  inline static var AUTHOR_FIELD_ID : Int = 4;
  inline static var PROMOTIONINFO_FIELD_ID : Int = 5;
  inline static var VERSION_FIELD_ID : Int = 6;
  inline static var NEWFLAG_FIELD_ID : Int = 7;
  inline static var PRICETIER_FIELD_ID : Int = 8;
  inline static var PRICEINLINECOIN_FIELD_ID : Int = 9;
  inline static var PROPERTY_FIELD_ID : Int = 10;
  inline static var SUBTYPE_FIELD_ID : Int = 11;
  inline static var ONSALE_FIELD_ID : Int = 12;
  inline static var AVAILABLEFORPRESENT_FIELD_ID : Int = 13;
  inline static var AVAILABLEFORPURCHASE_FIELD_ID : Int = 14;
  inline static var VALIDDAYS_FIELD_ID : Int = 15;
  inline static var AUTHORID_FIELD_ID : Int = 16;
  inline static var SALEFLAG_FIELD_ID : Int = 17;

  private var __isset_type : Bool = false;
  private var __isset_version : Bool = false;
  private var __isset_newFlag : Bool = false;
  private var __isset_priceTier : Bool = false;
  private var __isset_subType : Bool = false;
  private var __isset_onSale : Bool = false;
  private var __isset_availableForPresent : Bool = false;
  private var __isset_availableForPurchase : Bool = false;
  private var __isset_validDays : Bool = false;
  private var __isset_saleFlag : Bool = false;

  public function new() {
  }

  public function get_id() : String {
    return this.id;
  }

  public function set_id(id:String) : String {
    this.id = id;
    return this.id;
  }

  public function unsetId() : Void {
    this.id = null;
  }

  // Returns true if field id is set (has been assigned a value) and false otherwise
  public function isSetId() : Bool {
    return this.id != null;
  }

  public function get_type() : Int {
    return this.type;
  }

  public function set_type(type:Int) : Int {
    this.type = type;
    this.__isset_type = true;
    return this.type;
  }

  public function unsetType() : Void {
    this.__isset_type = false;
  }

  // Returns true if field type is set (has been assigned a value) and false otherwise
  public function isSetType() : Bool {
    return this.__isset_type;
  }

  public function get_name() : String {
    return this.name;
  }

  public function set_name(name:String) : String {
    this.name = name;
    return this.name;
  }

  public function unsetName() : Void {
    this.name = null;
  }

  // Returns true if field name is set (has been assigned a value) and false otherwise
  public function isSetName() : Bool {
    return this.name != null;
  }

  public function get_author() : String {
    return this.author;
  }

  public function set_author(author:String) : String {
    this.author = author;
    return this.author;
  }

  public function unsetAuthor() : Void {
    this.author = null;
  }

  // Returns true if field author is set (has been assigned a value) and false otherwise
  public function isSetAuthor() : Bool {
    return this.author != null;
  }

  public function get_promotionInfo() : PromotionInfo {
    return this.promotionInfo;
  }

  public function set_promotionInfo(promotionInfo:PromotionInfo) : PromotionInfo {
    this.promotionInfo = promotionInfo;
    return this.promotionInfo;
  }

  public function unsetPromotionInfo() : Void {
    this.promotionInfo = null;
  }

  // Returns true if field promotionInfo is set (has been assigned a value) and false otherwise
  public function isSetPromotionInfo() : Bool {
    return this.promotionInfo != null;
  }

  public function get_version() : haxe.Int64 {
    return this.version;
  }

  public function set_version(version:haxe.Int64) : haxe.Int64 {
    this.version = version;
    this.__isset_version = true;
    return this.version;
  }

  public function unsetVersion() : Void {
    this.__isset_version = false;
  }

  // Returns true if field version is set (has been assigned a value) and false otherwise
  public function isSetVersion() : Bool {
    return this.__isset_version;
  }

  public function get_newFlag() : Bool {
    return this.newFlag;
  }

  public function set_newFlag(newFlag:Bool) : Bool {
    this.newFlag = newFlag;
    this.__isset_newFlag = true;
    return this.newFlag;
  }

  public function unsetNewFlag() : Void {
    this.__isset_newFlag = false;
  }

  // Returns true if field newFlag is set (has been assigned a value) and false otherwise
  public function isSetNewFlag() : Bool {
    return this.__isset_newFlag;
  }

  public function get_priceTier() : haxe.Int32 {
    return this.priceTier;
  }

  public function set_priceTier(priceTier:haxe.Int32) : haxe.Int32 {
    this.priceTier = priceTier;
    this.__isset_priceTier = true;
    return this.priceTier;
  }

  public function unsetPriceTier() : Void {
    this.__isset_priceTier = false;
  }

  // Returns true if field priceTier is set (has been assigned a value) and false otherwise
  public function isSetPriceTier() : Bool {
    return this.__isset_priceTier;
  }

  public function get_priceInLineCoin() : String {
    return this.priceInLineCoin;
  }

  public function set_priceInLineCoin(priceInLineCoin:String) : String {
    this.priceInLineCoin = priceInLineCoin;
    return this.priceInLineCoin;
  }

  public function unsetPriceInLineCoin() : Void {
    this.priceInLineCoin = null;
  }

  // Returns true if field priceInLineCoin is set (has been assigned a value) and false otherwise
  public function isSetPriceInLineCoin() : Bool {
    return this.priceInLineCoin != null;
  }

  public function get_property() : ProductProperty {
    return this.property;
  }

  public function set_property(property:ProductProperty) : ProductProperty {
    this.property = property;
    return this.property;
  }

  public function unsetProperty() : Void {
    this.property = null;
  }

  // Returns true if field property is set (has been assigned a value) and false otherwise
  public function isSetProperty() : Bool {
    return this.property != null;
  }

  public function get_subType() : Int {
    return this.subType;
  }

  public function set_subType(subType:Int) : Int {
    this.subType = subType;
    this.__isset_subType = true;
    return this.subType;
  }

  public function unsetSubType() : Void {
    this.__isset_subType = false;
  }

  // Returns true if field subType is set (has been assigned a value) and false otherwise
  public function isSetSubType() : Bool {
    return this.__isset_subType;
  }

  public function get_onSale() : Bool {
    return this.onSale;
  }

  public function set_onSale(onSale:Bool) : Bool {
    this.onSale = onSale;
    this.__isset_onSale = true;
    return this.onSale;
  }

  public function unsetOnSale() : Void {
    this.__isset_onSale = false;
  }

  // Returns true if field onSale is set (has been assigned a value) and false otherwise
  public function isSetOnSale() : Bool {
    return this.__isset_onSale;
  }

  public function get_availableForPresent() : Bool {
    return this.availableForPresent;
  }

  public function set_availableForPresent(availableForPresent:Bool) : Bool {
    this.availableForPresent = availableForPresent;
    this.__isset_availableForPresent = true;
    return this.availableForPresent;
  }

  public function unsetAvailableForPresent() : Void {
    this.__isset_availableForPresent = false;
  }

  // Returns true if field availableForPresent is set (has been assigned a value) and false otherwise
  public function isSetAvailableForPresent() : Bool {
    return this.__isset_availableForPresent;
  }

  public function get_availableForPurchase() : Bool {
    return this.availableForPurchase;
  }

  public function set_availableForPurchase(availableForPurchase:Bool) : Bool {
    this.availableForPurchase = availableForPurchase;
    this.__isset_availableForPurchase = true;
    return this.availableForPurchase;
  }

  public function unsetAvailableForPurchase() : Void {
    this.__isset_availableForPurchase = false;
  }

  // Returns true if field availableForPurchase is set (has been assigned a value) and false otherwise
  public function isSetAvailableForPurchase() : Bool {
    return this.__isset_availableForPurchase;
  }

  public function get_validDays() : haxe.Int32 {
    return this.validDays;
  }

  public function set_validDays(validDays:haxe.Int32) : haxe.Int32 {
    this.validDays = validDays;
    this.__isset_validDays = true;
    return this.validDays;
  }

  public function unsetValidDays() : Void {
    this.__isset_validDays = false;
  }

  // Returns true if field validDays is set (has been assigned a value) and false otherwise
  public function isSetValidDays() : Bool {
    return this.__isset_validDays;
  }

  public function get_authorId() : String {
    return this.authorId;
  }

  public function set_authorId(authorId:String) : String {
    this.authorId = authorId;
    return this.authorId;
  }

  public function unsetAuthorId() : Void {
    this.authorId = null;
  }

  // Returns true if field authorId is set (has been assigned a value) and false otherwise
  public function isSetAuthorId() : Bool {
    return this.authorId != null;
  }

  public function get_saleFlag() : Bool {
    return this.saleFlag;
  }

  public function set_saleFlag(saleFlag:Bool) : Bool {
    this.saleFlag = saleFlag;
    this.__isset_saleFlag = true;
    return this.saleFlag;
  }

  public function unsetSaleFlag() : Void {
    this.__isset_saleFlag = false;
  }

  // Returns true if field saleFlag is set (has been assigned a value) and false otherwise
  public function isSetSaleFlag() : Bool {
    return this.__isset_saleFlag;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case ID_FIELD_ID:
      if (value == null) {
        unsetId();
      } else {
        this.id = value;
      }

    case TYPE_FIELD_ID:
      if (value == null) {
        unsetType();
      } else {
        this.type = value;
      }

    case NAME_FIELD_ID:
      if (value == null) {
        unsetName();
      } else {
        this.name = value;
      }

    case AUTHOR_FIELD_ID:
      if (value == null) {
        unsetAuthor();
      } else {
        this.author = value;
      }

    case PROMOTIONINFO_FIELD_ID:
      if (value == null) {
        unsetPromotionInfo();
      } else {
        this.promotionInfo = value;
      }

    case VERSION_FIELD_ID:
      if (value == null) {
        unsetVersion();
      } else {
        this.version = value;
      }

    case NEWFLAG_FIELD_ID:
      if (value == null) {
        unsetNewFlag();
      } else {
        this.newFlag = value;
      }

    case PRICETIER_FIELD_ID:
      if (value == null) {
        unsetPriceTier();
      } else {
        this.priceTier = value;
      }

    case PRICEINLINECOIN_FIELD_ID:
      if (value == null) {
        unsetPriceInLineCoin();
      } else {
        this.priceInLineCoin = value;
      }

    case PROPERTY_FIELD_ID:
      if (value == null) {
        unsetProperty();
      } else {
        this.property = value;
      }

    case SUBTYPE_FIELD_ID:
      if (value == null) {
        unsetSubType();
      } else {
        this.subType = value;
      }

    case ONSALE_FIELD_ID:
      if (value == null) {
        unsetOnSale();
      } else {
        this.onSale = value;
      }

    case AVAILABLEFORPRESENT_FIELD_ID:
      if (value == null) {
        unsetAvailableForPresent();
      } else {
        this.availableForPresent = value;
      }

    case AVAILABLEFORPURCHASE_FIELD_ID:
      if (value == null) {
        unsetAvailableForPurchase();
      } else {
        this.availableForPurchase = value;
      }

    case VALIDDAYS_FIELD_ID:
      if (value == null) {
        unsetValidDays();
      } else {
        this.validDays = value;
      }

    case AUTHORID_FIELD_ID:
      if (value == null) {
        unsetAuthorId();
      } else {
        this.authorId = value;
      }

    case SALEFLAG_FIELD_ID:
      if (value == null) {
        unsetSaleFlag();
      } else {
        this.saleFlag = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case ID_FIELD_ID:
      return this.id;
    case TYPE_FIELD_ID:
      return this.type;
    case NAME_FIELD_ID:
      return this.name;
    case AUTHOR_FIELD_ID:
      return this.author;
    case PROMOTIONINFO_FIELD_ID:
      return this.promotionInfo;
    case VERSION_FIELD_ID:
      return this.version;
    case NEWFLAG_FIELD_ID:
      return this.newFlag;
    case PRICETIER_FIELD_ID:
      return this.priceTier;
    case PRICEINLINECOIN_FIELD_ID:
      return this.priceInLineCoin;
    case PROPERTY_FIELD_ID:
      return this.property;
    case SUBTYPE_FIELD_ID:
      return this.subType;
    case ONSALE_FIELD_ID:
      return this.onSale;
    case AVAILABLEFORPRESENT_FIELD_ID:
      return this.availableForPresent;
    case AVAILABLEFORPURCHASE_FIELD_ID:
      return this.availableForPurchase;
    case VALIDDAYS_FIELD_ID:
      return this.validDays;
    case AUTHORID_FIELD_ID:
      return this.authorId;
    case SALEFLAG_FIELD_ID:
      return this.saleFlag;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case ID_FIELD_ID:
      return isSetId();
    case TYPE_FIELD_ID:
      return isSetType();
    case NAME_FIELD_ID:
      return isSetName();
    case AUTHOR_FIELD_ID:
      return isSetAuthor();
    case PROMOTIONINFO_FIELD_ID:
      return isSetPromotionInfo();
    case VERSION_FIELD_ID:
      return isSetVersion();
    case NEWFLAG_FIELD_ID:
      return isSetNewFlag();
    case PRICETIER_FIELD_ID:
      return isSetPriceTier();
    case PRICEINLINECOIN_FIELD_ID:
      return isSetPriceInLineCoin();
    case PROPERTY_FIELD_ID:
      return isSetProperty();
    case SUBTYPE_FIELD_ID:
      return isSetSubType();
    case ONSALE_FIELD_ID:
      return isSetOnSale();
    case AVAILABLEFORPRESENT_FIELD_ID:
      return isSetAvailableForPresent();
    case AVAILABLEFORPURCHASE_FIELD_ID:
      return isSetAvailableForPurchase();
    case VALIDDAYS_FIELD_ID:
      return isSetValidDays();
    case AUTHORID_FIELD_ID:
      return isSetAuthorId();
    case SALEFLAG_FIELD_ID:
      return isSetSaleFlag();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.id = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.type = iprot.readI32();
              this.__isset_type = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case AUTHOR_FIELD_ID:
            if (field.type == TType.STRING) {
              this.author = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PROMOTIONINFO_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.promotionInfo = new PromotionInfo();
              this.promotionInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case VERSION_FIELD_ID:
            if (field.type == TType.I64) {
              this.version = iprot.readI64();
              this.__isset_version = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NEWFLAG_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.newFlag = iprot.readBool();
              this.__isset_newFlag = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PRICETIER_FIELD_ID:
            if (field.type == TType.I32) {
              this.priceTier = iprot.readI32();
              this.__isset_priceTier = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PRICEINLINECOIN_FIELD_ID:
            if (field.type == TType.STRING) {
              this.priceInLineCoin = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PROPERTY_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.property = new ProductProperty();
              this.property.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SUBTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.subType = iprot.readI32();
              this.__isset_subType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ONSALE_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.onSale = iprot.readBool();
              this.__isset_onSale = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case AVAILABLEFORPRESENT_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.availableForPresent = iprot.readBool();
              this.__isset_availableForPresent = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case AVAILABLEFORPURCHASE_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.availableForPurchase = iprot.readBool();
              this.__isset_availableForPurchase = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case VALIDDAYS_FIELD_ID:
            if (field.type == TType.I32) {
              this.validDays = iprot.readI32();
              this.__isset_validDays = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case AUTHORID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.authorId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SALEFLAG_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.saleFlag = iprot.readBool();
              this.__isset_saleFlag = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.author != null) {
        oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
        oprot.writeString(this.author);
        oprot.writeFieldEnd();
      }
      if (this.promotionInfo != null) {
        oprot.writeFieldBegin(PROMOTION_INFO_FIELD_DESC);
        this.promotionInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI64(this.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEW_FLAG_FIELD_DESC);
      oprot.writeBool(this.newFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_TIER_FIELD_DESC);
      oprot.writeI32(this.priceTier);
      oprot.writeFieldEnd();
      if (this.priceInLineCoin != null) {
        oprot.writeFieldBegin(PRICE_IN_LINE_COIN_FIELD_DESC);
        oprot.writeString(this.priceInLineCoin);
        oprot.writeFieldEnd();
      }
      if (this.property != null) {
        oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
        this.property.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUB_TYPE_FIELD_DESC);
      oprot.writeI32(this.subType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ON_SALE_FIELD_DESC);
      oprot.writeBool(this.onSale);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_FOR_PRESENT_FIELD_DESC);
      oprot.writeBool(this.availableForPresent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_FOR_PURCHASE_FIELD_DESC);
      oprot.writeBool(this.availableForPurchase);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VALID_DAYS_FIELD_DESC);
      oprot.writeI32(this.validDays);
      oprot.writeFieldEnd();
      if (this.authorId != null) {
        oprot.writeFieldBegin(AUTHOR_ID_FIELD_DESC);
        oprot.writeString(this.authorId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SALE_FLAG_FIELD_DESC);
      oprot.writeBool(this.saleFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "ProductSearchSummary(";
    var first : Bool = true;

    ret += "id:";
    if (this.id == null) {
      ret += "null";
    } else {
      ret += this.id;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "type:";
    var type_name : String = .PType.VALUES_TO_NAMES[this.type];
    if (type_name != null) {
      ret += type_name;
      ret += " (";
    }
    ret += this.type;
    if (type_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "name:";
    if (this.name == null) {
      ret += "null";
    } else {
      ret += this.name;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "author:";
    if (this.author == null) {
      ret += "null";
    } else {
      ret += this.author;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "promotionInfo:";
    if (this.promotionInfo == null) {
      ret += "null";
    } else {
      ret += this.promotionInfo;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "version:";
    ret += this.version;
    first = false;
    if (!first) ret +=  ", ";
    ret += "newFlag:";
    ret += this.newFlag;
    first = false;
    if (!first) ret +=  ", ";
    ret += "priceTier:";
    ret += this.priceTier;
    first = false;
    if (!first) ret +=  ", ";
    ret += "priceInLineCoin:";
    if (this.priceInLineCoin == null) {
      ret += "null";
    } else {
      ret += this.priceInLineCoin;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "property:";
    if (this.property == null) {
      ret += "null";
    } else {
      ret += this.property;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "subType:";
    var subType_name : String = .SubType.VALUES_TO_NAMES[this.subType];
    if (subType_name != null) {
      ret += subType_name;
      ret += " (";
    }
    ret += this.subType;
    if (subType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "onSale:";
    ret += this.onSale;
    first = false;
    if (!first) ret +=  ", ";
    ret += "availableForPresent:";
    ret += this.availableForPresent;
    first = false;
    if (!first) ret +=  ", ";
    ret += "availableForPurchase:";
    ret += this.availableForPurchase;
    first = false;
    if (!first) ret +=  ", ";
    ret += "validDays:";
    ret += this.validDays;
    first = false;
    if (!first) ret +=  ", ";
    ret += "authorId:";
    if (this.authorId == null) {
      ret += "null";
    } else {
      ret += this.authorId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "saleFlag:";
    ret += this.saleFlag;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !.PType.VALID_VALUES.contains(type)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'type' has been assigned the invalid value " + type);
    }
    if (isSetSubType() && !.SubType.VALID_VALUES.contains(subType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'subType' has been assigned the invalid value " + subType);
    }
  }

}

