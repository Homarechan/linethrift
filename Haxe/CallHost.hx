/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class CallHost implements TBase {
  
  static var STRUCT_DESC = { new TStruct("CallHost"); };
  static var HOST_FIELD_DESC = { new TField("host", TType.STRING, 1); };
  static var PORT_FIELD_DESC = { new TField("port", TType.I32, 2); };
  static var ZONE_FIELD_DESC = { new TField("zone", TType.STRING, 3); };

  @:isVar
  public var host(get,set) : String;
  @:isVar
  public var port(get,set) : haxe.Int32;
  @:isVar
  public var zone(get,set) : String;

  inline static var HOST_FIELD_ID : Int = 1;
  inline static var PORT_FIELD_ID : Int = 2;
  inline static var ZONE_FIELD_ID : Int = 3;

  private var __isset_port : Bool = false;

  public function new() {
  }

  public function get_host() : String {
    return this.host;
  }

  public function set_host(host:String) : String {
    this.host = host;
    return this.host;
  }

  public function unsetHost() : Void {
    this.host = null;
  }

  // Returns true if field host is set (has been assigned a value) and false otherwise
  public function isSetHost() : Bool {
    return this.host != null;
  }

  public function get_port() : haxe.Int32 {
    return this.port;
  }

  public function set_port(port:haxe.Int32) : haxe.Int32 {
    this.port = port;
    this.__isset_port = true;
    return this.port;
  }

  public function unsetPort() : Void {
    this.__isset_port = false;
  }

  // Returns true if field port is set (has been assigned a value) and false otherwise
  public function isSetPort() : Bool {
    return this.__isset_port;
  }

  public function get_zone() : String {
    return this.zone;
  }

  public function set_zone(zone:String) : String {
    this.zone = zone;
    return this.zone;
  }

  public function unsetZone() : Void {
    this.zone = null;
  }

  // Returns true if field zone is set (has been assigned a value) and false otherwise
  public function isSetZone() : Bool {
    return this.zone != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case HOST_FIELD_ID:
      if (value == null) {
        unsetHost();
      } else {
        this.host = value;
      }

    case PORT_FIELD_ID:
      if (value == null) {
        unsetPort();
      } else {
        this.port = value;
      }

    case ZONE_FIELD_ID:
      if (value == null) {
        unsetZone();
      } else {
        this.zone = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case HOST_FIELD_ID:
      return this.host;
    case PORT_FIELD_ID:
      return this.port;
    case ZONE_FIELD_ID:
      return this.zone;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case HOST_FIELD_ID:
      return isSetHost();
    case PORT_FIELD_ID:
      return isSetPort();
    case ZONE_FIELD_ID:
      return isSetZone();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case HOST_FIELD_ID:
            if (field.type == TType.STRING) {
              this.host = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PORT_FIELD_ID:
            if (field.type == TType.I32) {
              this.port = iprot.readI32();
              this.__isset_port = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ZONE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.zone = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.host != null) {
        oprot.writeFieldBegin(HOST_FIELD_DESC);
        oprot.writeString(this.host);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(this.port);
      oprot.writeFieldEnd();
      if (this.zone != null) {
        oprot.writeFieldBegin(ZONE_FIELD_DESC);
        oprot.writeString(this.zone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "CallHost(";
    var first : Bool = true;

    ret += "host:";
    if (this.host == null) {
      ret += "null";
    } else {
      ret += this.host;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "port:";
    ret += this.port;
    first = false;
    if (!first) ret +=  ", ";
    ret += "zone:";
    if (this.zone == null) {
      ret += "null";
    } else {
      ret += this.zone;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

