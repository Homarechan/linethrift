/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class RegisterDeviceWithoutPhoneNumberWithIdentityCredential_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("registerDeviceWithoutPhoneNumberWithIdentityCredential_args"); };
  static var REGION_FIELD_DESC = { new TField("region", TType.STRING, 2); };
  static var UDID_HASH_FIELD_DESC = { new TField("udidHash", TType.STRING, 3); };
  static var DEVICE_INFO_FIELD_DESC = { new TField("deviceInfo", TType.STRUCT, 4); };
  static var PROVIDER_FIELD_DESC = { new TField("provider", TType.I32, 5); };
  static var IDENTIFIER_FIELD_DESC = { new TField("identifier", TType.STRING, 6); };
  static var VERIFIER_FIELD_DESC = { new TField("verifier", TType.STRING, 7); };
  static var MID_FIELD_DESC = { new TField("mid", TType.STRING, 8); };
  static var MIGRATION_PINCODE_SESSION_ID_FIELD_DESC = { new TField("migrationPincodeSessionId", TType.STRING, 9); };

  @:isVar
  public var region(get,set) : String;
  @:isVar
  public var udidHash(get,set) : String;
  @:isVar
  public var deviceInfo(get,set) : DeviceInfo;
  @:isVar
  public var provider(get,set) : Int;
  @:isVar
  public var identifier(get,set) : String;
  @:isVar
  public var verifier(get,set) : String;
  @:isVar
  public var mid(get,set) : String;
  @:isVar
  public var migrationPincodeSessionId(get,set) : String;

  inline static var REGION_FIELD_ID : Int = 2;
  inline static var UDIDHASH_FIELD_ID : Int = 3;
  inline static var DEVICEINFO_FIELD_ID : Int = 4;
  inline static var PROVIDER_FIELD_ID : Int = 5;
  inline static var IDENTIFIER_FIELD_ID : Int = 6;
  inline static var VERIFIER_FIELD_ID : Int = 7;
  inline static var MID_FIELD_ID : Int = 8;
  inline static var MIGRATIONPINCODESESSIONID_FIELD_ID : Int = 9;

  private var __isset_provider : Bool = false;

  public function new() {
  }

  public function get_region() : String {
    return this.region;
  }

  public function set_region(region:String) : String {
    this.region = region;
    return this.region;
  }

  public function unsetRegion() : Void {
    this.region = null;
  }

  // Returns true if field region is set (has been assigned a value) and false otherwise
  public function isSetRegion() : Bool {
    return this.region != null;
  }

  public function get_udidHash() : String {
    return this.udidHash;
  }

  public function set_udidHash(udidHash:String) : String {
    this.udidHash = udidHash;
    return this.udidHash;
  }

  public function unsetUdidHash() : Void {
    this.udidHash = null;
  }

  // Returns true if field udidHash is set (has been assigned a value) and false otherwise
  public function isSetUdidHash() : Bool {
    return this.udidHash != null;
  }

  public function get_deviceInfo() : DeviceInfo {
    return this.deviceInfo;
  }

  public function set_deviceInfo(deviceInfo:DeviceInfo) : DeviceInfo {
    this.deviceInfo = deviceInfo;
    return this.deviceInfo;
  }

  public function unsetDeviceInfo() : Void {
    this.deviceInfo = null;
  }

  // Returns true if field deviceInfo is set (has been assigned a value) and false otherwise
  public function isSetDeviceInfo() : Bool {
    return this.deviceInfo != null;
  }

  public function get_provider() : Int {
    return this.provider;
  }

  public function set_provider(provider:Int) : Int {
    this.provider = provider;
    this.__isset_provider = true;
    return this.provider;
  }

  public function unsetProvider() : Void {
    this.__isset_provider = false;
  }

  // Returns true if field provider is set (has been assigned a value) and false otherwise
  public function isSetProvider() : Bool {
    return this.__isset_provider;
  }

  public function get_identifier() : String {
    return this.identifier;
  }

  public function set_identifier(identifier:String) : String {
    this.identifier = identifier;
    return this.identifier;
  }

  public function unsetIdentifier() : Void {
    this.identifier = null;
  }

  // Returns true if field identifier is set (has been assigned a value) and false otherwise
  public function isSetIdentifier() : Bool {
    return this.identifier != null;
  }

  public function get_verifier() : String {
    return this.verifier;
  }

  public function set_verifier(verifier:String) : String {
    this.verifier = verifier;
    return this.verifier;
  }

  public function unsetVerifier() : Void {
    this.verifier = null;
  }

  // Returns true if field verifier is set (has been assigned a value) and false otherwise
  public function isSetVerifier() : Bool {
    return this.verifier != null;
  }

  public function get_mid() : String {
    return this.mid;
  }

  public function set_mid(mid:String) : String {
    this.mid = mid;
    return this.mid;
  }

  public function unsetMid() : Void {
    this.mid = null;
  }

  // Returns true if field mid is set (has been assigned a value) and false otherwise
  public function isSetMid() : Bool {
    return this.mid != null;
  }

  public function get_migrationPincodeSessionId() : String {
    return this.migrationPincodeSessionId;
  }

  public function set_migrationPincodeSessionId(migrationPincodeSessionId:String) : String {
    this.migrationPincodeSessionId = migrationPincodeSessionId;
    return this.migrationPincodeSessionId;
  }

  public function unsetMigrationPincodeSessionId() : Void {
    this.migrationPincodeSessionId = null;
  }

  // Returns true if field migrationPincodeSessionId is set (has been assigned a value) and false otherwise
  public function isSetMigrationPincodeSessionId() : Bool {
    return this.migrationPincodeSessionId != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case REGION_FIELD_ID:
      if (value == null) {
        unsetRegion();
      } else {
        this.region = value;
      }

    case UDIDHASH_FIELD_ID:
      if (value == null) {
        unsetUdidHash();
      } else {
        this.udidHash = value;
      }

    case DEVICEINFO_FIELD_ID:
      if (value == null) {
        unsetDeviceInfo();
      } else {
        this.deviceInfo = value;
      }

    case PROVIDER_FIELD_ID:
      if (value == null) {
        unsetProvider();
      } else {
        this.provider = value;
      }

    case IDENTIFIER_FIELD_ID:
      if (value == null) {
        unsetIdentifier();
      } else {
        this.identifier = value;
      }

    case VERIFIER_FIELD_ID:
      if (value == null) {
        unsetVerifier();
      } else {
        this.verifier = value;
      }

    case MID_FIELD_ID:
      if (value == null) {
        unsetMid();
      } else {
        this.mid = value;
      }

    case MIGRATIONPINCODESESSIONID_FIELD_ID:
      if (value == null) {
        unsetMigrationPincodeSessionId();
      } else {
        this.migrationPincodeSessionId = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case REGION_FIELD_ID:
      return this.region;
    case UDIDHASH_FIELD_ID:
      return this.udidHash;
    case DEVICEINFO_FIELD_ID:
      return this.deviceInfo;
    case PROVIDER_FIELD_ID:
      return this.provider;
    case IDENTIFIER_FIELD_ID:
      return this.identifier;
    case VERIFIER_FIELD_ID:
      return this.verifier;
    case MID_FIELD_ID:
      return this.mid;
    case MIGRATIONPINCODESESSIONID_FIELD_ID:
      return this.migrationPincodeSessionId;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case REGION_FIELD_ID:
      return isSetRegion();
    case UDIDHASH_FIELD_ID:
      return isSetUdidHash();
    case DEVICEINFO_FIELD_ID:
      return isSetDeviceInfo();
    case PROVIDER_FIELD_ID:
      return isSetProvider();
    case IDENTIFIER_FIELD_ID:
      return isSetIdentifier();
    case VERIFIER_FIELD_ID:
      return isSetVerifier();
    case MID_FIELD_ID:
      return isSetMid();
    case MIGRATIONPINCODESESSIONID_FIELD_ID:
      return isSetMigrationPincodeSessionId();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case REGION_FIELD_ID:
            if (field.type == TType.STRING) {
              this.region = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case UDIDHASH_FIELD_ID:
            if (field.type == TType.STRING) {
              this.udidHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DEVICEINFO_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.deviceInfo = new DeviceInfo();
              this.deviceInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PROVIDER_FIELD_ID:
            if (field.type == TType.I32) {
              this.provider = iprot.readI32();
              this.__isset_provider = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case IDENTIFIER_FIELD_ID:
            if (field.type == TType.STRING) {
              this.identifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case VERIFIER_FIELD_ID:
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MIGRATIONPINCODESESSIONID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.migrationPincodeSessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.region != null) {
        oprot.writeFieldBegin(REGION_FIELD_DESC);
        oprot.writeString(this.region);
        oprot.writeFieldEnd();
      }
      if (this.udidHash != null) {
        oprot.writeFieldBegin(UDID_HASH_FIELD_DESC);
        oprot.writeString(this.udidHash);
        oprot.writeFieldEnd();
      }
      if (this.deviceInfo != null) {
        oprot.writeFieldBegin(DEVICE_INFO_FIELD_DESC);
        this.deviceInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROVIDER_FIELD_DESC);
      oprot.writeI32(this.provider);
      oprot.writeFieldEnd();
      if (this.identifier != null) {
        oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
        oprot.writeString(this.identifier);
        oprot.writeFieldEnd();
      }
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      if (this.migrationPincodeSessionId != null) {
        oprot.writeFieldBegin(MIGRATION_PINCODE_SESSION_ID_FIELD_DESC);
        oprot.writeString(this.migrationPincodeSessionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "registerDeviceWithoutPhoneNumberWithIdentityCredential_args(";
    var first : Bool = true;

    ret += "region:";
    if (this.region == null) {
      ret += "null";
    } else {
      ret += this.region;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "udidHash:";
    if (this.udidHash == null) {
      ret += "null";
    } else {
      ret += this.udidHash;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "deviceInfo:";
    if (this.deviceInfo == null) {
      ret += "null";
    } else {
      ret += this.deviceInfo;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "provider:";
    var provider_name : String = .IdentityProvider.VALUES_TO_NAMES[this.provider];
    if (provider_name != null) {
      ret += provider_name;
      ret += " (";
    }
    ret += this.provider;
    if (provider_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "identifier:";
    if (this.identifier == null) {
      ret += "null";
    } else {
      ret += this.identifier;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "verifier:";
    if (this.verifier == null) {
      ret += "null";
    } else {
      ret += this.verifier;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "mid:";
    if (this.mid == null) {
      ret += "null";
    } else {
      ret += this.mid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "migrationPincodeSessionId:";
    if (this.migrationPincodeSessionId == null) {
      ret += "null";
    } else {
      ret += this.migrationPincodeSessionId;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetProvider() && !.IdentityProvider.VALID_VALUES.contains(provider)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'provider' has been assigned the invalid value " + provider);
    }
  }

}

