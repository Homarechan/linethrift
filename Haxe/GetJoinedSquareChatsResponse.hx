/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class GetJoinedSquareChatsResponse implements TBase {
  
  static var STRUCT_DESC = { new TStruct("GetJoinedSquareChatsResponse"); };
  static var CHATS_FIELD_DESC = { new TField("chats", TType.LIST, 1); };
  static var CHAT_MEMBERS_FIELD_DESC = { new TField("chatMembers", TType.MAP, 2); };
  static var STATUSES_FIELD_DESC = { new TField("statuses", TType.MAP, 3); };
  static var CONTINUATION_TOKEN_FIELD_DESC = { new TField("continuationToken", TType.STRING, 4); };

  @:isVar
  public var chats(get,set) : List< SquareChat>;
  @:isVar
  public var chatMembers(get,set) : StringMap< SquareChatMember>;
  @:isVar
  public var statuses(get,set) : StringMap< SquareChatStatus>;
  @:isVar
  public var continuationToken(get,set) : String;

  inline static var CHATS_FIELD_ID : Int = 1;
  inline static var CHATMEMBERS_FIELD_ID : Int = 2;
  inline static var STATUSES_FIELD_ID : Int = 3;
  inline static var CONTINUATIONTOKEN_FIELD_ID : Int = 4;


  public function new() {
  }

  public function get_chats() : List< SquareChat> {
    return this.chats;
  }

  public function set_chats(chats:List< SquareChat>) : List< SquareChat> {
    this.chats = chats;
    return this.chats;
  }

  public function unsetChats() : Void {
    this.chats = null;
  }

  // Returns true if field chats is set (has been assigned a value) and false otherwise
  public function isSetChats() : Bool {
    return this.chats != null;
  }

  public function get_chatMembers() : StringMap< SquareChatMember> {
    return this.chatMembers;
  }

  public function set_chatMembers(chatMembers:StringMap< SquareChatMember>) : StringMap< SquareChatMember> {
    this.chatMembers = chatMembers;
    return this.chatMembers;
  }

  public function unsetChatMembers() : Void {
    this.chatMembers = null;
  }

  // Returns true if field chatMembers is set (has been assigned a value) and false otherwise
  public function isSetChatMembers() : Bool {
    return this.chatMembers != null;
  }

  public function get_statuses() : StringMap< SquareChatStatus> {
    return this.statuses;
  }

  public function set_statuses(statuses:StringMap< SquareChatStatus>) : StringMap< SquareChatStatus> {
    this.statuses = statuses;
    return this.statuses;
  }

  public function unsetStatuses() : Void {
    this.statuses = null;
  }

  // Returns true if field statuses is set (has been assigned a value) and false otherwise
  public function isSetStatuses() : Bool {
    return this.statuses != null;
  }

  public function get_continuationToken() : String {
    return this.continuationToken;
  }

  public function set_continuationToken(continuationToken:String) : String {
    this.continuationToken = continuationToken;
    return this.continuationToken;
  }

  public function unsetContinuationToken() : Void {
    this.continuationToken = null;
  }

  // Returns true if field continuationToken is set (has been assigned a value) and false otherwise
  public function isSetContinuationToken() : Bool {
    return this.continuationToken != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case CHATS_FIELD_ID:
      if (value == null) {
        unsetChats();
      } else {
        this.chats = value;
      }

    case CHATMEMBERS_FIELD_ID:
      if (value == null) {
        unsetChatMembers();
      } else {
        this.chatMembers = value;
      }

    case STATUSES_FIELD_ID:
      if (value == null) {
        unsetStatuses();
      } else {
        this.statuses = value;
      }

    case CONTINUATIONTOKEN_FIELD_ID:
      if (value == null) {
        unsetContinuationToken();
      } else {
        this.continuationToken = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case CHATS_FIELD_ID:
      return this.chats;
    case CHATMEMBERS_FIELD_ID:
      return this.chatMembers;
    case STATUSES_FIELD_ID:
      return this.statuses;
    case CONTINUATIONTOKEN_FIELD_ID:
      return this.continuationToken;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case CHATS_FIELD_ID:
      return isSetChats();
    case CHATMEMBERS_FIELD_ID:
      return isSetChatMembers();
    case STATUSES_FIELD_ID:
      return isSetStatuses();
    case CONTINUATIONTOKEN_FIELD_ID:
      return isSetContinuationToken();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case CHATS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list549 = iprot.readListBegin();
                this.chats = new List< SquareChat>();
                for( _i550 in 0 ... _list549.size)
                {
                  var _elem551 : SquareChat;
                  _elem551 = new SquareChat();
                  _elem551.read(iprot);
                  this.chats.add(_elem551);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CHATMEMBERS_FIELD_ID:
            if (field.type == TType.MAP) {
              {
                var _map552 = iprot.readMapBegin();
                this.chatMembers = new StringMap< SquareChatMember>();
                for( _i553 in 0 ... _map552.size)
                {
                  var _key554 : String;
                  var _val555 : SquareChatMember;
                  _key554 = iprot.readString();
                  _val555 = new SquareChatMember();
                  _val555.read(iprot);
                  this.chatMembers.set( _key554, _val555);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case STATUSES_FIELD_ID:
            if (field.type == TType.MAP) {
              {
                var _map556 = iprot.readMapBegin();
                this.statuses = new StringMap< SquareChatStatus>();
                for( _i557 in 0 ... _map556.size)
                {
                  var _key558 : String;
                  var _val559 : SquareChatStatus;
                  _key558 = iprot.readString();
                  _val559 = new SquareChatStatus();
                  _val559.read(iprot);
                  this.statuses.set( _key558, _val559);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CONTINUATIONTOKEN_FIELD_ID:
            if (field.type == TType.STRING) {
              this.continuationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.chats != null) {
        oprot.writeFieldBegin(CHATS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.chats.length));
          for( elem560 in this.chats)
          {
            elem560.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.chatMembers != null) {
        oprot.writeFieldBegin(CHAT_MEMBERS_FIELD_DESC);
        {
          var _sizeCounter562 : Int = 0;
          for( _key561 in this.chatMembers) {
            _sizeCounter562++;
          }
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, _sizeCounter562));
          for( elem563 in this.chatMembers.keys())
          {
            oprot.writeString(elem563);
            this.chatMembers.get(elem563).write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.statuses != null) {
        oprot.writeFieldBegin(STATUSES_FIELD_DESC);
        {
          var _sizeCounter565 : Int = 0;
          for( _key564 in this.statuses) {
            _sizeCounter565++;
          }
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, _sizeCounter565));
          for( elem566 in this.statuses.keys())
          {
            oprot.writeString(elem566);
            this.statuses.get(elem566).write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.continuationToken != null) {
        oprot.writeFieldBegin(CONTINUATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.continuationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "GetJoinedSquareChatsResponse(";
    var first : Bool = true;

    ret += "chats:";
    if (this.chats == null) {
      ret += "null";
    } else {
      ret += this.chats;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "chatMembers:";
    if (this.chatMembers == null) {
      ret += "null";
    } else {
      ret += this.chatMembers;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "statuses:";
    if (this.statuses == null) {
      ret += "null";
    } else {
      ret += this.statuses;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "continuationToken:";
    if (this.continuationToken == null) {
      ret += "null";
    } else {
      ret += this.continuationToken;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

