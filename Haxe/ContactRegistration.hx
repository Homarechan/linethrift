/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class ContactRegistration implements TBase {
  
  static var STRUCT_DESC = { new TStruct("ContactRegistration"); };
  static var CONTACT_FIELD_DESC = { new TField("contact", TType.STRUCT, 1); };
  static var LUID_FIELD_DESC = { new TField("luid", TType.STRING, 10); };
  static var CONTACT_TYPE_FIELD_DESC = { new TField("contactType", TType.I32, 11); };
  static var CONTACT_KEY_FIELD_DESC = { new TField("contactKey", TType.STRING, 12); };

  @:isVar
  public var contact(get,set) : Contact;
  @:isVar
  public var luid(get,set) : String;
  @:isVar
  public var contactType(get,set) : Int;
  @:isVar
  public var contactKey(get,set) : String;

  inline static var CONTACT_FIELD_ID : Int = 1;
  inline static var LUID_FIELD_ID : Int = 10;
  inline static var CONTACTTYPE_FIELD_ID : Int = 11;
  inline static var CONTACTKEY_FIELD_ID : Int = 12;

  private var __isset_contactType : Bool = false;

  public function new() {
  }

  public function get_contact() : Contact {
    return this.contact;
  }

  public function set_contact(contact:Contact) : Contact {
    this.contact = contact;
    return this.contact;
  }

  public function unsetContact() : Void {
    this.contact = null;
  }

  // Returns true if field contact is set (has been assigned a value) and false otherwise
  public function isSetContact() : Bool {
    return this.contact != null;
  }

  public function get_luid() : String {
    return this.luid;
  }

  public function set_luid(luid:String) : String {
    this.luid = luid;
    return this.luid;
  }

  public function unsetLuid() : Void {
    this.luid = null;
  }

  // Returns true if field luid is set (has been assigned a value) and false otherwise
  public function isSetLuid() : Bool {
    return this.luid != null;
  }

  public function get_contactType() : Int {
    return this.contactType;
  }

  public function set_contactType(contactType:Int) : Int {
    this.contactType = contactType;
    this.__isset_contactType = true;
    return this.contactType;
  }

  public function unsetContactType() : Void {
    this.__isset_contactType = false;
  }

  // Returns true if field contactType is set (has been assigned a value) and false otherwise
  public function isSetContactType() : Bool {
    return this.__isset_contactType;
  }

  public function get_contactKey() : String {
    return this.contactKey;
  }

  public function set_contactKey(contactKey:String) : String {
    this.contactKey = contactKey;
    return this.contactKey;
  }

  public function unsetContactKey() : Void {
    this.contactKey = null;
  }

  // Returns true if field contactKey is set (has been assigned a value) and false otherwise
  public function isSetContactKey() : Bool {
    return this.contactKey != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case CONTACT_FIELD_ID:
      if (value == null) {
        unsetContact();
      } else {
        this.contact = value;
      }

    case LUID_FIELD_ID:
      if (value == null) {
        unsetLuid();
      } else {
        this.luid = value;
      }

    case CONTACTTYPE_FIELD_ID:
      if (value == null) {
        unsetContactType();
      } else {
        this.contactType = value;
      }

    case CONTACTKEY_FIELD_ID:
      if (value == null) {
        unsetContactKey();
      } else {
        this.contactKey = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case CONTACT_FIELD_ID:
      return this.contact;
    case LUID_FIELD_ID:
      return this.luid;
    case CONTACTTYPE_FIELD_ID:
      return this.contactType;
    case CONTACTKEY_FIELD_ID:
      return this.contactKey;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case CONTACT_FIELD_ID:
      return isSetContact();
    case LUID_FIELD_ID:
      return isSetLuid();
    case CONTACTTYPE_FIELD_ID:
      return isSetContactType();
    case CONTACTKEY_FIELD_ID:
      return isSetContactKey();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case CONTACT_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.contact = new Contact();
              this.contact.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case LUID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.luid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CONTACTTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.contactType = iprot.readI32();
              this.__isset_contactType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CONTACTKEY_FIELD_ID:
            if (field.type == TType.STRING) {
              this.contactKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.contact != null) {
        oprot.writeFieldBegin(CONTACT_FIELD_DESC);
        this.contact.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.luid != null) {
        oprot.writeFieldBegin(LUID_FIELD_DESC);
        oprot.writeString(this.luid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONTACT_TYPE_FIELD_DESC);
      oprot.writeI32(this.contactType);
      oprot.writeFieldEnd();
      if (this.contactKey != null) {
        oprot.writeFieldBegin(CONTACT_KEY_FIELD_DESC);
        oprot.writeString(this.contactKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "ContactRegistration(";
    var first : Bool = true;

    ret += "contact:";
    if (this.contact == null) {
      ret += "null";
    } else {
      ret += this.contact;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "luid:";
    if (this.luid == null) {
      ret += "null";
    } else {
      ret += this.luid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "contactType:";
    var contactType_name : String = .ContactType.VALUES_TO_NAMES[this.contactType];
    if (contactType_name != null) {
      ret += contactType_name;
      ret += " (";
    }
    ret += this.contactType;
    if (contactType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "contactKey:";
    if (this.contactKey == null) {
      ret += "null";
    } else {
      ret += this.contactKey;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetContactType() && !.ContactType.VALID_VALUES.contains(contactType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'contactType' has been assigned the invalid value " + contactType);
    }
  }

}

