/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class CommitMessageResult implements TBase {
  
  static var STRUCT_DESC = { new TStruct("CommitMessageResult"); };
  static var MESSAGE_FIELD_DESC = { new TField("message", TType.STRUCT, 1); };
  static var CODE_FIELD_DESC = { new TField("code", TType.I32, 2); };
  static var REASON_FIELD_DESC = { new TField("reason", TType.STRING, 3); };
  static var SUCCESS_COUNT_FIELD_DESC = { new TField("successCount", TType.I64, 4); };
  static var FAIL_COUNT_FIELD_DESC = { new TField("failCount", TType.I64, 5); };
  static var UNREGISTER_COUNT_FIELD_DESC = { new TField("unregisterCount", TType.I64, 6); };
  static var BLOCK_COUNT_FIELD_DESC = { new TField("blockCount", TType.I64, 7); };

  @:isVar
  public var message(get,set) : Message;
  @:isVar
  public var code(get,set) : Int;
  @:isVar
  public var reason(get,set) : String;
  @:isVar
  public var successCount(get,set) : haxe.Int64;
  @:isVar
  public var failCount(get,set) : haxe.Int64;
  @:isVar
  public var unregisterCount(get,set) : haxe.Int64;
  @:isVar
  public var blockCount(get,set) : haxe.Int64;

  inline static var MESSAGE_FIELD_ID : Int = 1;
  inline static var CODE_FIELD_ID : Int = 2;
  inline static var REASON_FIELD_ID : Int = 3;
  inline static var SUCCESSCOUNT_FIELD_ID : Int = 4;
  inline static var FAILCOUNT_FIELD_ID : Int = 5;
  inline static var UNREGISTERCOUNT_FIELD_ID : Int = 6;
  inline static var BLOCKCOUNT_FIELD_ID : Int = 7;

  private var __isset_code : Bool = false;
  private var __isset_successCount : Bool = false;
  private var __isset_failCount : Bool = false;
  private var __isset_unregisterCount : Bool = false;
  private var __isset_blockCount : Bool = false;

  public function new() {
  }

  public function get_message() : Message {
    return this.message;
  }

  public function set_message(message:Message) : Message {
    this.message = message;
    return this.message;
  }

  public function unsetMessage() : Void {
    this.message = null;
  }

  // Returns true if field message is set (has been assigned a value) and false otherwise
  public function isSetMessage() : Bool {
    return this.message != null;
  }

  public function get_code() : Int {
    return this.code;
  }

  public function set_code(code:Int) : Int {
    this.code = code;
    this.__isset_code = true;
    return this.code;
  }

  public function unsetCode() : Void {
    this.__isset_code = false;
  }

  // Returns true if field code is set (has been assigned a value) and false otherwise
  public function isSetCode() : Bool {
    return this.__isset_code;
  }

  public function get_reason() : String {
    return this.reason;
  }

  public function set_reason(reason:String) : String {
    this.reason = reason;
    return this.reason;
  }

  public function unsetReason() : Void {
    this.reason = null;
  }

  // Returns true if field reason is set (has been assigned a value) and false otherwise
  public function isSetReason() : Bool {
    return this.reason != null;
  }

  public function get_successCount() : haxe.Int64 {
    return this.successCount;
  }

  public function set_successCount(successCount:haxe.Int64) : haxe.Int64 {
    this.successCount = successCount;
    this.__isset_successCount = true;
    return this.successCount;
  }

  public function unsetSuccessCount() : Void {
    this.__isset_successCount = false;
  }

  // Returns true if field successCount is set (has been assigned a value) and false otherwise
  public function isSetSuccessCount() : Bool {
    return this.__isset_successCount;
  }

  public function get_failCount() : haxe.Int64 {
    return this.failCount;
  }

  public function set_failCount(failCount:haxe.Int64) : haxe.Int64 {
    this.failCount = failCount;
    this.__isset_failCount = true;
    return this.failCount;
  }

  public function unsetFailCount() : Void {
    this.__isset_failCount = false;
  }

  // Returns true if field failCount is set (has been assigned a value) and false otherwise
  public function isSetFailCount() : Bool {
    return this.__isset_failCount;
  }

  public function get_unregisterCount() : haxe.Int64 {
    return this.unregisterCount;
  }

  public function set_unregisterCount(unregisterCount:haxe.Int64) : haxe.Int64 {
    this.unregisterCount = unregisterCount;
    this.__isset_unregisterCount = true;
    return this.unregisterCount;
  }

  public function unsetUnregisterCount() : Void {
    this.__isset_unregisterCount = false;
  }

  // Returns true if field unregisterCount is set (has been assigned a value) and false otherwise
  public function isSetUnregisterCount() : Bool {
    return this.__isset_unregisterCount;
  }

  public function get_blockCount() : haxe.Int64 {
    return this.blockCount;
  }

  public function set_blockCount(blockCount:haxe.Int64) : haxe.Int64 {
    this.blockCount = blockCount;
    this.__isset_blockCount = true;
    return this.blockCount;
  }

  public function unsetBlockCount() : Void {
    this.__isset_blockCount = false;
  }

  // Returns true if field blockCount is set (has been assigned a value) and false otherwise
  public function isSetBlockCount() : Bool {
    return this.__isset_blockCount;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case MESSAGE_FIELD_ID:
      if (value == null) {
        unsetMessage();
      } else {
        this.message = value;
      }

    case CODE_FIELD_ID:
      if (value == null) {
        unsetCode();
      } else {
        this.code = value;
      }

    case REASON_FIELD_ID:
      if (value == null) {
        unsetReason();
      } else {
        this.reason = value;
      }

    case SUCCESSCOUNT_FIELD_ID:
      if (value == null) {
        unsetSuccessCount();
      } else {
        this.successCount = value;
      }

    case FAILCOUNT_FIELD_ID:
      if (value == null) {
        unsetFailCount();
      } else {
        this.failCount = value;
      }

    case UNREGISTERCOUNT_FIELD_ID:
      if (value == null) {
        unsetUnregisterCount();
      } else {
        this.unregisterCount = value;
      }

    case BLOCKCOUNT_FIELD_ID:
      if (value == null) {
        unsetBlockCount();
      } else {
        this.blockCount = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case MESSAGE_FIELD_ID:
      return this.message;
    case CODE_FIELD_ID:
      return this.code;
    case REASON_FIELD_ID:
      return this.reason;
    case SUCCESSCOUNT_FIELD_ID:
      return this.successCount;
    case FAILCOUNT_FIELD_ID:
      return this.failCount;
    case UNREGISTERCOUNT_FIELD_ID:
      return this.unregisterCount;
    case BLOCKCOUNT_FIELD_ID:
      return this.blockCount;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case MESSAGE_FIELD_ID:
      return isSetMessage();
    case CODE_FIELD_ID:
      return isSetCode();
    case REASON_FIELD_ID:
      return isSetReason();
    case SUCCESSCOUNT_FIELD_ID:
      return isSetSuccessCount();
    case FAILCOUNT_FIELD_ID:
      return isSetFailCount();
    case UNREGISTERCOUNT_FIELD_ID:
      return isSetUnregisterCount();
    case BLOCKCOUNT_FIELD_ID:
      return isSetBlockCount();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MESSAGE_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.message = new Message();
              this.message.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CODE_FIELD_ID:
            if (field.type == TType.I32) {
              this.code = iprot.readI32();
              this.__isset_code = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case REASON_FIELD_ID:
            if (field.type == TType.STRING) {
              this.reason = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SUCCESSCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.successCount = iprot.readI64();
              this.__isset_successCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case FAILCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.failCount = iprot.readI64();
              this.__isset_failCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case UNREGISTERCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.unregisterCount = iprot.readI64();
              this.__isset_unregisterCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case BLOCKCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.blockCount = iprot.readI64();
              this.__isset_blockCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        this.message.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CODE_FIELD_DESC);
      oprot.writeI32(this.code);
      oprot.writeFieldEnd();
      if (this.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(this.reason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUCCESS_COUNT_FIELD_DESC);
      oprot.writeI64(this.successCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAIL_COUNT_FIELD_DESC);
      oprot.writeI64(this.failCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNREGISTER_COUNT_FIELD_DESC);
      oprot.writeI64(this.unregisterCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCK_COUNT_FIELD_DESC);
      oprot.writeI64(this.blockCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "CommitMessageResult(";
    var first : Bool = true;

    ret += "message:";
    if (this.message == null) {
      ret += "null";
    } else {
      ret += this.message;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "code:";
    var code_name : String = .CommitMessageResultCode.VALUES_TO_NAMES[this.code];
    if (code_name != null) {
      ret += code_name;
      ret += " (";
    }
    ret += this.code;
    if (code_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "reason:";
    if (this.reason == null) {
      ret += "null";
    } else {
      ret += this.reason;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "successCount:";
    ret += this.successCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "failCount:";
    ret += this.failCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "unregisterCount:";
    ret += this.unregisterCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "blockCount:";
    ret += this.blockCount;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetCode() && !.CommitMessageResultCode.VALID_VALUES.contains(code)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'code' has been assigned the invalid value " + code);
    }
  }

}

