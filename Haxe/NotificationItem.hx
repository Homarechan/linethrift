/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class NotificationItem implements TBase {
  
  static var STRUCT_DESC = { new TStruct("NotificationItem"); };
  static var ID_FIELD_DESC = { new TField("id", TType.STRING, 1); };
  static var _FROM_FIELD_DESC = { new TField("_from", TType.STRING, 2); };
  static var TO_FIELD_DESC = { new TField("to", TType.STRING, 3); };
  static var FROM_CHANNEL_FIELD_DESC = { new TField("fromChannel", TType.STRING, 4); };
  static var TO_CHANNEL_FIELD_DESC = { new TField("toChannel", TType.STRING, 5); };
  static var REVISION_FIELD_DESC = { new TField("revision", TType.I64, 7); };
  static var CREATED_TIME_FIELD_DESC = { new TField("createdTime", TType.I64, 8); };
  static var CONTENT_FIELD_DESC = { new TField("content", TType.MAP, 9); };

  @:isVar
  public var id(get,set) : String;
  @:isVar
  public var _from(get,set) : String;
  @:isVar
  public var to(get,set) : String;
  @:isVar
  public var fromChannel(get,set) : String;
  @:isVar
  public var toChannel(get,set) : String;
  @:isVar
  public var revision(get,set) : haxe.Int64;
  @:isVar
  public var createdTime(get,set) : haxe.Int64;
  @:isVar
  public var content(get,set) : StringMap< String>;

  inline static var ID_FIELD_ID : Int = 1;
  inline static var _FROM_FIELD_ID : Int = 2;
  inline static var TO_FIELD_ID : Int = 3;
  inline static var FROMCHANNEL_FIELD_ID : Int = 4;
  inline static var TOCHANNEL_FIELD_ID : Int = 5;
  inline static var REVISION_FIELD_ID : Int = 7;
  inline static var CREATEDTIME_FIELD_ID : Int = 8;
  inline static var CONTENT_FIELD_ID : Int = 9;

  private var __isset_revision : Bool = false;
  private var __isset_createdTime : Bool = false;

  public function new() {
  }

  public function get_id() : String {
    return this.id;
  }

  public function set_id(id:String) : String {
    this.id = id;
    return this.id;
  }

  public function unsetId() : Void {
    this.id = null;
  }

  // Returns true if field id is set (has been assigned a value) and false otherwise
  public function isSetId() : Bool {
    return this.id != null;
  }

  public function get__from() : String {
    return this._from;
  }

  public function set__from(_from:String) : String {
    this._from = _from;
    return this._from;
  }

  public function unset_from() : Void {
    this._from = null;
  }

  // Returns true if field _from is set (has been assigned a value) and false otherwise
  public function isSet_from() : Bool {
    return this._from != null;
  }

  public function get_to() : String {
    return this.to;
  }

  public function set_to(to:String) : String {
    this.to = to;
    return this.to;
  }

  public function unsetTo() : Void {
    this.to = null;
  }

  // Returns true if field to is set (has been assigned a value) and false otherwise
  public function isSetTo() : Bool {
    return this.to != null;
  }

  public function get_fromChannel() : String {
    return this.fromChannel;
  }

  public function set_fromChannel(fromChannel:String) : String {
    this.fromChannel = fromChannel;
    return this.fromChannel;
  }

  public function unsetFromChannel() : Void {
    this.fromChannel = null;
  }

  // Returns true if field fromChannel is set (has been assigned a value) and false otherwise
  public function isSetFromChannel() : Bool {
    return this.fromChannel != null;
  }

  public function get_toChannel() : String {
    return this.toChannel;
  }

  public function set_toChannel(toChannel:String) : String {
    this.toChannel = toChannel;
    return this.toChannel;
  }

  public function unsetToChannel() : Void {
    this.toChannel = null;
  }

  // Returns true if field toChannel is set (has been assigned a value) and false otherwise
  public function isSetToChannel() : Bool {
    return this.toChannel != null;
  }

  public function get_revision() : haxe.Int64 {
    return this.revision;
  }

  public function set_revision(revision:haxe.Int64) : haxe.Int64 {
    this.revision = revision;
    this.__isset_revision = true;
    return this.revision;
  }

  public function unsetRevision() : Void {
    this.__isset_revision = false;
  }

  // Returns true if field revision is set (has been assigned a value) and false otherwise
  public function isSetRevision() : Bool {
    return this.__isset_revision;
  }

  public function get_createdTime() : haxe.Int64 {
    return this.createdTime;
  }

  public function set_createdTime(createdTime:haxe.Int64) : haxe.Int64 {
    this.createdTime = createdTime;
    this.__isset_createdTime = true;
    return this.createdTime;
  }

  public function unsetCreatedTime() : Void {
    this.__isset_createdTime = false;
  }

  // Returns true if field createdTime is set (has been assigned a value) and false otherwise
  public function isSetCreatedTime() : Bool {
    return this.__isset_createdTime;
  }

  public function get_content() : StringMap< String> {
    return this.content;
  }

  public function set_content(content:StringMap< String>) : StringMap< String> {
    this.content = content;
    return this.content;
  }

  public function unsetContent() : Void {
    this.content = null;
  }

  // Returns true if field content is set (has been assigned a value) and false otherwise
  public function isSetContent() : Bool {
    return this.content != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case ID_FIELD_ID:
      if (value == null) {
        unsetId();
      } else {
        this.id = value;
      }

    case _FROM_FIELD_ID:
      if (value == null) {
        unset_from();
      } else {
        this._from = value;
      }

    case TO_FIELD_ID:
      if (value == null) {
        unsetTo();
      } else {
        this.to = value;
      }

    case FROMCHANNEL_FIELD_ID:
      if (value == null) {
        unsetFromChannel();
      } else {
        this.fromChannel = value;
      }

    case TOCHANNEL_FIELD_ID:
      if (value == null) {
        unsetToChannel();
      } else {
        this.toChannel = value;
      }

    case REVISION_FIELD_ID:
      if (value == null) {
        unsetRevision();
      } else {
        this.revision = value;
      }

    case CREATEDTIME_FIELD_ID:
      if (value == null) {
        unsetCreatedTime();
      } else {
        this.createdTime = value;
      }

    case CONTENT_FIELD_ID:
      if (value == null) {
        unsetContent();
      } else {
        this.content = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case ID_FIELD_ID:
      return this.id;
    case _FROM_FIELD_ID:
      return this._from;
    case TO_FIELD_ID:
      return this.to;
    case FROMCHANNEL_FIELD_ID:
      return this.fromChannel;
    case TOCHANNEL_FIELD_ID:
      return this.toChannel;
    case REVISION_FIELD_ID:
      return this.revision;
    case CREATEDTIME_FIELD_ID:
      return this.createdTime;
    case CONTENT_FIELD_ID:
      return this.content;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case ID_FIELD_ID:
      return isSetId();
    case _FROM_FIELD_ID:
      return isSet_from();
    case TO_FIELD_ID:
      return isSetTo();
    case FROMCHANNEL_FIELD_ID:
      return isSetFromChannel();
    case TOCHANNEL_FIELD_ID:
      return isSetToChannel();
    case REVISION_FIELD_ID:
      return isSetRevision();
    case CREATEDTIME_FIELD_ID:
      return isSetCreatedTime();
    case CONTENT_FIELD_ID:
      return isSetContent();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.id = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case _FROM_FIELD_ID:
            if (field.type == TType.STRING) {
              this._from = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TO_FIELD_ID:
            if (field.type == TType.STRING) {
              this.to = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case FROMCHANNEL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.fromChannel = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TOCHANNEL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.toChannel = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case REVISION_FIELD_ID:
            if (field.type == TType.I64) {
              this.revision = iprot.readI64();
              this.__isset_revision = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CREATEDTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.createdTime = iprot.readI64();
              this.__isset_createdTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CONTENT_FIELD_ID:
            if (field.type == TType.MAP) {
              {
                var _map193 = iprot.readMapBegin();
                this.content = new StringMap< String>();
                for( _i194 in 0 ... _map193.size)
                {
                  var _key195 : String;
                  var _val196 : String;
                  _key195 = iprot.readString();
                  _val196 = iprot.readString();
                  this.content.set( _key195, _val196);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
      if (this._from != null) {
        oprot.writeFieldBegin(_FROM_FIELD_DESC);
        oprot.writeString(this._from);
        oprot.writeFieldEnd();
      }
      if (this.to != null) {
        oprot.writeFieldBegin(TO_FIELD_DESC);
        oprot.writeString(this.to);
        oprot.writeFieldEnd();
      }
      if (this.fromChannel != null) {
        oprot.writeFieldBegin(FROM_CHANNEL_FIELD_DESC);
        oprot.writeString(this.fromChannel);
        oprot.writeFieldEnd();
      }
      if (this.toChannel != null) {
        oprot.writeFieldBegin(TO_CHANNEL_FIELD_DESC);
        oprot.writeString(this.toChannel);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REVISION_FIELD_DESC);
      oprot.writeI64(this.revision);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATED_TIME_FIELD_DESC);
      oprot.writeI64(this.createdTime);
      oprot.writeFieldEnd();
      if (this.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        {
          var _sizeCounter198 : Int = 0;
          for( _key197 in this.content) {
            _sizeCounter198++;
          }
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _sizeCounter198));
          for( elem199 in this.content.keys())
          {
            oprot.writeString(elem199);
            oprot.writeString(this.content.get(elem199));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "NotificationItem(";
    var first : Bool = true;

    ret += "id:";
    if (this.id == null) {
      ret += "null";
    } else {
      ret += this.id;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "_from:";
    if (this._from == null) {
      ret += "null";
    } else {
      ret += this._from;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "to:";
    if (this.to == null) {
      ret += "null";
    } else {
      ret += this.to;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "fromChannel:";
    if (this.fromChannel == null) {
      ret += "null";
    } else {
      ret += this.fromChannel;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "toChannel:";
    if (this.toChannel == null) {
      ret += "null";
    } else {
      ret += this.toChannel;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "revision:";
    ret += this.revision;
    first = false;
    if (!first) ret +=  ", ";
    ret += "createdTime:";
    ret += this.createdTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "content:";
    if (this.content == null) {
      ret += "null";
    } else {
      ret += this.content;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

