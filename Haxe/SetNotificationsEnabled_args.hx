/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SetNotificationsEnabled_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("setNotificationsEnabled_args"); };
  static var REQ_SEQ_FIELD_DESC = { new TField("reqSeq", TType.I32, 1); };
  static var TYPE_FIELD_DESC = { new TField("type", TType.I32, 2); };
  static var TARGET_FIELD_DESC = { new TField("target", TType.STRING, 3); };
  static var ENABLEMENT_FIELD_DESC = { new TField("enablement", TType.BOOL, 4); };

  @:isVar
  public var reqSeq(get,set) : haxe.Int32;
  @:isVar
  public var type(get,set) : Int;
  @:isVar
  public var target(get,set) : String;
  @:isVar
  public var enablement(get,set) : Bool;

  inline static var REQSEQ_FIELD_ID : Int = 1;
  inline static var TYPE_FIELD_ID : Int = 2;
  inline static var TARGET_FIELD_ID : Int = 3;
  inline static var ENABLEMENT_FIELD_ID : Int = 4;

  private var __isset_reqSeq : Bool = false;
  private var __isset_type : Bool = false;
  private var __isset_enablement : Bool = false;

  public function new() {
  }

  public function get_reqSeq() : haxe.Int32 {
    return this.reqSeq;
  }

  public function set_reqSeq(reqSeq:haxe.Int32) : haxe.Int32 {
    this.reqSeq = reqSeq;
    this.__isset_reqSeq = true;
    return this.reqSeq;
  }

  public function unsetReqSeq() : Void {
    this.__isset_reqSeq = false;
  }

  // Returns true if field reqSeq is set (has been assigned a value) and false otherwise
  public function isSetReqSeq() : Bool {
    return this.__isset_reqSeq;
  }

  public function get_type() : Int {
    return this.type;
  }

  public function set_type(type:Int) : Int {
    this.type = type;
    this.__isset_type = true;
    return this.type;
  }

  public function unsetType() : Void {
    this.__isset_type = false;
  }

  // Returns true if field type is set (has been assigned a value) and false otherwise
  public function isSetType() : Bool {
    return this.__isset_type;
  }

  public function get_target() : String {
    return this.target;
  }

  public function set_target(target:String) : String {
    this.target = target;
    return this.target;
  }

  public function unsetTarget() : Void {
    this.target = null;
  }

  // Returns true if field target is set (has been assigned a value) and false otherwise
  public function isSetTarget() : Bool {
    return this.target != null;
  }

  public function get_enablement() : Bool {
    return this.enablement;
  }

  public function set_enablement(enablement:Bool) : Bool {
    this.enablement = enablement;
    this.__isset_enablement = true;
    return this.enablement;
  }

  public function unsetEnablement() : Void {
    this.__isset_enablement = false;
  }

  // Returns true if field enablement is set (has been assigned a value) and false otherwise
  public function isSetEnablement() : Bool {
    return this.__isset_enablement;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case REQSEQ_FIELD_ID:
      if (value == null) {
        unsetReqSeq();
      } else {
        this.reqSeq = value;
      }

    case TYPE_FIELD_ID:
      if (value == null) {
        unsetType();
      } else {
        this.type = value;
      }

    case TARGET_FIELD_ID:
      if (value == null) {
        unsetTarget();
      } else {
        this.target = value;
      }

    case ENABLEMENT_FIELD_ID:
      if (value == null) {
        unsetEnablement();
      } else {
        this.enablement = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case REQSEQ_FIELD_ID:
      return this.reqSeq;
    case TYPE_FIELD_ID:
      return this.type;
    case TARGET_FIELD_ID:
      return this.target;
    case ENABLEMENT_FIELD_ID:
      return this.enablement;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case REQSEQ_FIELD_ID:
      return isSetReqSeq();
    case TYPE_FIELD_ID:
      return isSetType();
    case TARGET_FIELD_ID:
      return isSetTarget();
    case ENABLEMENT_FIELD_ID:
      return isSetEnablement();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case REQSEQ_FIELD_ID:
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              this.__isset_reqSeq = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.type = iprot.readI32();
              this.__isset_type = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TARGET_FIELD_ID:
            if (field.type == TType.STRING) {
              this.target = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ENABLEMENT_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.enablement = iprot.readBool();
              this.__isset_enablement = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type);
      oprot.writeFieldEnd();
      if (this.target != null) {
        oprot.writeFieldBegin(TARGET_FIELD_DESC);
        oprot.writeString(this.target);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ENABLEMENT_FIELD_DESC);
      oprot.writeBool(this.enablement);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "setNotificationsEnabled_args(";
    var first : Bool = true;

    ret += "reqSeq:";
    ret += this.reqSeq;
    first = false;
    if (!first) ret +=  ", ";
    ret += "type:";
    var type_name : String = .MIDType.VALUES_TO_NAMES[this.type];
    if (type_name != null) {
      ret += type_name;
      ret += " (";
    }
    ret += this.type;
    if (type_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "target:";
    if (this.target == null) {
      ret += "null";
    } else {
      ret += this.target;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "enablement:";
    ret += this.enablement;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !.MIDType.VALID_VALUES.contains(type)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'type' has been assigned the invalid value " + type);
    }
  }

}

