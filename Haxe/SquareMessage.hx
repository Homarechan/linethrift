/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SquareMessage implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SquareMessage"); };
  static var MESSAGE_FIELD_DESC = { new TField("message", TType.STRUCT, 1); };
  static var FROM_TYPE_FIELD_DESC = { new TField("fromType", TType.I32, 3); };
  static var SQUARE_MESSAGE_REVISION_FIELD_DESC = { new TField("squareMessageRevision", TType.I64, 4); };

  @:isVar
  public var message(get,set) : Message;
  @:isVar
  public var fromType(get,set) : Int;
  @:isVar
  public var squareMessageRevision(get,set) : haxe.Int64;

  inline static var MESSAGE_FIELD_ID : Int = 1;
  inline static var FROMTYPE_FIELD_ID : Int = 3;
  inline static var SQUAREMESSAGEREVISION_FIELD_ID : Int = 4;

  private var __isset_fromType : Bool = false;
  private var __isset_squareMessageRevision : Bool = false;

  public function new() {
  }

  public function get_message() : Message {
    return this.message;
  }

  public function set_message(message:Message) : Message {
    this.message = message;
    return this.message;
  }

  public function unsetMessage() : Void {
    this.message = null;
  }

  // Returns true if field message is set (has been assigned a value) and false otherwise
  public function isSetMessage() : Bool {
    return this.message != null;
  }

  public function get_fromType() : Int {
    return this.fromType;
  }

  public function set_fromType(fromType:Int) : Int {
    this.fromType = fromType;
    this.__isset_fromType = true;
    return this.fromType;
  }

  public function unsetFromType() : Void {
    this.__isset_fromType = false;
  }

  // Returns true if field fromType is set (has been assigned a value) and false otherwise
  public function isSetFromType() : Bool {
    return this.__isset_fromType;
  }

  public function get_squareMessageRevision() : haxe.Int64 {
    return this.squareMessageRevision;
  }

  public function set_squareMessageRevision(squareMessageRevision:haxe.Int64) : haxe.Int64 {
    this.squareMessageRevision = squareMessageRevision;
    this.__isset_squareMessageRevision = true;
    return this.squareMessageRevision;
  }

  public function unsetSquareMessageRevision() : Void {
    this.__isset_squareMessageRevision = false;
  }

  // Returns true if field squareMessageRevision is set (has been assigned a value) and false otherwise
  public function isSetSquareMessageRevision() : Bool {
    return this.__isset_squareMessageRevision;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case MESSAGE_FIELD_ID:
      if (value == null) {
        unsetMessage();
      } else {
        this.message = value;
      }

    case FROMTYPE_FIELD_ID:
      if (value == null) {
        unsetFromType();
      } else {
        this.fromType = value;
      }

    case SQUAREMESSAGEREVISION_FIELD_ID:
      if (value == null) {
        unsetSquareMessageRevision();
      } else {
        this.squareMessageRevision = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case MESSAGE_FIELD_ID:
      return this.message;
    case FROMTYPE_FIELD_ID:
      return this.fromType;
    case SQUAREMESSAGEREVISION_FIELD_ID:
      return this.squareMessageRevision;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case MESSAGE_FIELD_ID:
      return isSetMessage();
    case FROMTYPE_FIELD_ID:
      return isSetFromType();
    case SQUAREMESSAGEREVISION_FIELD_ID:
      return isSetSquareMessageRevision();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MESSAGE_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.message = new Message();
              this.message.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case FROMTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.fromType = iprot.readI32();
              this.__isset_fromType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SQUAREMESSAGEREVISION_FIELD_ID:
            if (field.type == TType.I64) {
              this.squareMessageRevision = iprot.readI64();
              this.__isset_squareMessageRevision = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        this.message.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FROM_TYPE_FIELD_DESC);
      oprot.writeI32(this.fromType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SQUARE_MESSAGE_REVISION_FIELD_DESC);
      oprot.writeI64(this.squareMessageRevision);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SquareMessage(";
    var first : Bool = true;

    ret += "message:";
    if (this.message == null) {
      ret += "null";
    } else {
      ret += this.message;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "fromType:";
    var fromType_name : String = .MIDType.VALUES_TO_NAMES[this.fromType];
    if (fromType_name != null) {
      ret += fromType_name;
      ret += " (";
    }
    ret += this.fromType;
    if (fromType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "squareMessageRevision:";
    ret += this.squareMessageRevision;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetFromType() && !.MIDType.VALID_VALUES.contains(fromType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'fromType' has been assigned the invalid value " + fromType);
    }
  }

}

