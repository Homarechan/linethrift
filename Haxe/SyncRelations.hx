/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SyncRelations implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SyncRelations"); };
  static var SYNC_ALL_FIELD_DESC = { new TField("syncAll", TType.BOOL, 1); };
  static var SYNC_PARAM_CONTACT_FIELD_DESC = { new TField("syncParamContact", TType.LIST, 2); };
  static var SYNC_PARAM_MID_FIELD_DESC = { new TField("syncParamMid", TType.LIST, 3); };

  @:isVar
  public var syncAll(get,set) : Bool;
  @:isVar
  public var syncParamContact(get,set) : List< SyncParamContact>;
  @:isVar
  public var syncParamMid(get,set) : List< SyncParamMid>;

  inline static var SYNCALL_FIELD_ID : Int = 1;
  inline static var SYNCPARAMCONTACT_FIELD_ID : Int = 2;
  inline static var SYNCPARAMMID_FIELD_ID : Int = 3;

  private var __isset_syncAll : Bool = false;

  public function new() {
  }

  public function get_syncAll() : Bool {
    return this.syncAll;
  }

  public function set_syncAll(syncAll:Bool) : Bool {
    this.syncAll = syncAll;
    this.__isset_syncAll = true;
    return this.syncAll;
  }

  public function unsetSyncAll() : Void {
    this.__isset_syncAll = false;
  }

  // Returns true if field syncAll is set (has been assigned a value) and false otherwise
  public function isSetSyncAll() : Bool {
    return this.__isset_syncAll;
  }

  public function get_syncParamContact() : List< SyncParamContact> {
    return this.syncParamContact;
  }

  public function set_syncParamContact(syncParamContact:List< SyncParamContact>) : List< SyncParamContact> {
    this.syncParamContact = syncParamContact;
    return this.syncParamContact;
  }

  public function unsetSyncParamContact() : Void {
    this.syncParamContact = null;
  }

  // Returns true if field syncParamContact is set (has been assigned a value) and false otherwise
  public function isSetSyncParamContact() : Bool {
    return this.syncParamContact != null;
  }

  public function get_syncParamMid() : List< SyncParamMid> {
    return this.syncParamMid;
  }

  public function set_syncParamMid(syncParamMid:List< SyncParamMid>) : List< SyncParamMid> {
    this.syncParamMid = syncParamMid;
    return this.syncParamMid;
  }

  public function unsetSyncParamMid() : Void {
    this.syncParamMid = null;
  }

  // Returns true if field syncParamMid is set (has been assigned a value) and false otherwise
  public function isSetSyncParamMid() : Bool {
    return this.syncParamMid != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case SYNCALL_FIELD_ID:
      if (value == null) {
        unsetSyncAll();
      } else {
        this.syncAll = value;
      }

    case SYNCPARAMCONTACT_FIELD_ID:
      if (value == null) {
        unsetSyncParamContact();
      } else {
        this.syncParamContact = value;
      }

    case SYNCPARAMMID_FIELD_ID:
      if (value == null) {
        unsetSyncParamMid();
      } else {
        this.syncParamMid = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case SYNCALL_FIELD_ID:
      return this.syncAll;
    case SYNCPARAMCONTACT_FIELD_ID:
      return this.syncParamContact;
    case SYNCPARAMMID_FIELD_ID:
      return this.syncParamMid;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case SYNCALL_FIELD_ID:
      return isSetSyncAll();
    case SYNCPARAMCONTACT_FIELD_ID:
      return isSetSyncParamContact();
    case SYNCPARAMMID_FIELD_ID:
      return isSetSyncParamMid();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SYNCALL_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.syncAll = iprot.readBool();
              this.__isset_syncAll = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SYNCPARAMCONTACT_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list404 = iprot.readListBegin();
                this.syncParamContact = new List< SyncParamContact>();
                for( _i405 in 0 ... _list404.size)
                {
                  var _elem406 : SyncParamContact;
                  _elem406 = new SyncParamContact();
                  _elem406.read(iprot);
                  this.syncParamContact.add(_elem406);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SYNCPARAMMID_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list407 = iprot.readListBegin();
                this.syncParamMid = new List< SyncParamMid>();
                for( _i408 in 0 ... _list407.size)
                {
                  var _elem409 : SyncParamMid;
                  _elem409 = new SyncParamMid();
                  _elem409.read(iprot);
                  this.syncParamMid.add(_elem409);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SYNC_ALL_FIELD_DESC);
      oprot.writeBool(this.syncAll);
      oprot.writeFieldEnd();
      if (this.syncParamContact != null) {
        oprot.writeFieldBegin(SYNC_PARAM_CONTACT_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.syncParamContact.length));
          for( elem410 in this.syncParamContact)
          {
            elem410.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.syncParamMid != null) {
        oprot.writeFieldBegin(SYNC_PARAM_MID_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.syncParamMid.length));
          for( elem411 in this.syncParamMid)
          {
            elem411.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SyncRelations(";
    var first : Bool = true;

    ret += "syncAll:";
    ret += this.syncAll;
    first = false;
    if (!first) ret +=  ", ";
    ret += "syncParamContact:";
    if (this.syncParamContact == null) {
      ret += "null";
    } else {
      ret += this.syncParamContact;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "syncParamMid:";
    if (this.syncParamMid == null) {
      ret += "null";
    } else {
      ret += this.syncParamMid;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

