/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class GetJoinedSquaresResponse implements TBase {
  
  static var STRUCT_DESC = { new TStruct("GetJoinedSquaresResponse"); };
  static var SQUARES_FIELD_DESC = { new TField("squares", TType.LIST, 1); };
  static var MEMBERS_FIELD_DESC = { new TField("members", TType.MAP, 2); };
  static var AUTHORITIES_FIELD_DESC = { new TField("authorities", TType.MAP, 3); };
  static var STATUSES_FIELD_DESC = { new TField("statuses", TType.MAP, 4); };
  static var CONTINUATION_TOKEN_FIELD_DESC = { new TField("continuationToken", TType.STRING, 5); };
  static var NOTE_STATUSES_FIELD_DESC = { new TField("noteStatuses", TType.MAP, 6); };

  @:isVar
  public var squares(get,set) : List< Square>;
  @:isVar
  public var members(get,set) : StringMap< SquareMember>;
  @:isVar
  public var authorities(get,set) : StringMap< SquareAuthority>;
  @:isVar
  public var statuses(get,set) : StringMap< SquareStatus>;
  @:isVar
  public var continuationToken(get,set) : String;
  @:isVar
  public var noteStatuses(get,set) : StringMap< NoteStatus>;

  inline static var SQUARES_FIELD_ID : Int = 1;
  inline static var MEMBERS_FIELD_ID : Int = 2;
  inline static var AUTHORITIES_FIELD_ID : Int = 3;
  inline static var STATUSES_FIELD_ID : Int = 4;
  inline static var CONTINUATIONTOKEN_FIELD_ID : Int = 5;
  inline static var NOTESTATUSES_FIELD_ID : Int = 6;


  public function new() {
  }

  public function get_squares() : List< Square> {
    return this.squares;
  }

  public function set_squares(squares:List< Square>) : List< Square> {
    this.squares = squares;
    return this.squares;
  }

  public function unsetSquares() : Void {
    this.squares = null;
  }

  // Returns true if field squares is set (has been assigned a value) and false otherwise
  public function isSetSquares() : Bool {
    return this.squares != null;
  }

  public function get_members() : StringMap< SquareMember> {
    return this.members;
  }

  public function set_members(members:StringMap< SquareMember>) : StringMap< SquareMember> {
    this.members = members;
    return this.members;
  }

  public function unsetMembers() : Void {
    this.members = null;
  }

  // Returns true if field members is set (has been assigned a value) and false otherwise
  public function isSetMembers() : Bool {
    return this.members != null;
  }

  public function get_authorities() : StringMap< SquareAuthority> {
    return this.authorities;
  }

  public function set_authorities(authorities:StringMap< SquareAuthority>) : StringMap< SquareAuthority> {
    this.authorities = authorities;
    return this.authorities;
  }

  public function unsetAuthorities() : Void {
    this.authorities = null;
  }

  // Returns true if field authorities is set (has been assigned a value) and false otherwise
  public function isSetAuthorities() : Bool {
    return this.authorities != null;
  }

  public function get_statuses() : StringMap< SquareStatus> {
    return this.statuses;
  }

  public function set_statuses(statuses:StringMap< SquareStatus>) : StringMap< SquareStatus> {
    this.statuses = statuses;
    return this.statuses;
  }

  public function unsetStatuses() : Void {
    this.statuses = null;
  }

  // Returns true if field statuses is set (has been assigned a value) and false otherwise
  public function isSetStatuses() : Bool {
    return this.statuses != null;
  }

  public function get_continuationToken() : String {
    return this.continuationToken;
  }

  public function set_continuationToken(continuationToken:String) : String {
    this.continuationToken = continuationToken;
    return this.continuationToken;
  }

  public function unsetContinuationToken() : Void {
    this.continuationToken = null;
  }

  // Returns true if field continuationToken is set (has been assigned a value) and false otherwise
  public function isSetContinuationToken() : Bool {
    return this.continuationToken != null;
  }

  public function get_noteStatuses() : StringMap< NoteStatus> {
    return this.noteStatuses;
  }

  public function set_noteStatuses(noteStatuses:StringMap< NoteStatus>) : StringMap< NoteStatus> {
    this.noteStatuses = noteStatuses;
    return this.noteStatuses;
  }

  public function unsetNoteStatuses() : Void {
    this.noteStatuses = null;
  }

  // Returns true if field noteStatuses is set (has been assigned a value) and false otherwise
  public function isSetNoteStatuses() : Bool {
    return this.noteStatuses != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case SQUARES_FIELD_ID:
      if (value == null) {
        unsetSquares();
      } else {
        this.squares = value;
      }

    case MEMBERS_FIELD_ID:
      if (value == null) {
        unsetMembers();
      } else {
        this.members = value;
      }

    case AUTHORITIES_FIELD_ID:
      if (value == null) {
        unsetAuthorities();
      } else {
        this.authorities = value;
      }

    case STATUSES_FIELD_ID:
      if (value == null) {
        unsetStatuses();
      } else {
        this.statuses = value;
      }

    case CONTINUATIONTOKEN_FIELD_ID:
      if (value == null) {
        unsetContinuationToken();
      } else {
        this.continuationToken = value;
      }

    case NOTESTATUSES_FIELD_ID:
      if (value == null) {
        unsetNoteStatuses();
      } else {
        this.noteStatuses = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case SQUARES_FIELD_ID:
      return this.squares;
    case MEMBERS_FIELD_ID:
      return this.members;
    case AUTHORITIES_FIELD_ID:
      return this.authorities;
    case STATUSES_FIELD_ID:
      return this.statuses;
    case CONTINUATIONTOKEN_FIELD_ID:
      return this.continuationToken;
    case NOTESTATUSES_FIELD_ID:
      return this.noteStatuses;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case SQUARES_FIELD_ID:
      return isSetSquares();
    case MEMBERS_FIELD_ID:
      return isSetMembers();
    case AUTHORITIES_FIELD_ID:
      return isSetAuthorities();
    case STATUSES_FIELD_ID:
      return isSetStatuses();
    case CONTINUATIONTOKEN_FIELD_ID:
      return isSetContinuationToken();
    case NOTESTATUSES_FIELD_ID:
      return isSetNoteStatuses();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SQUARES_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list424 = iprot.readListBegin();
                this.squares = new List< Square>();
                for( _i425 in 0 ... _list424.size)
                {
                  var _elem426 : Square;
                  _elem426 = new Square();
                  _elem426.read(iprot);
                  this.squares.add(_elem426);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MEMBERS_FIELD_ID:
            if (field.type == TType.MAP) {
              {
                var _map427 = iprot.readMapBegin();
                this.members = new StringMap< SquareMember>();
                for( _i428 in 0 ... _map427.size)
                {
                  var _key429 : String;
                  var _val430 : SquareMember;
                  _key429 = iprot.readString();
                  _val430 = new SquareMember();
                  _val430.read(iprot);
                  this.members.set( _key429, _val430);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case AUTHORITIES_FIELD_ID:
            if (field.type == TType.MAP) {
              {
                var _map431 = iprot.readMapBegin();
                this.authorities = new StringMap< SquareAuthority>();
                for( _i432 in 0 ... _map431.size)
                {
                  var _key433 : String;
                  var _val434 : SquareAuthority;
                  _key433 = iprot.readString();
                  _val434 = new SquareAuthority();
                  _val434.read(iprot);
                  this.authorities.set( _key433, _val434);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case STATUSES_FIELD_ID:
            if (field.type == TType.MAP) {
              {
                var _map435 = iprot.readMapBegin();
                this.statuses = new StringMap< SquareStatus>();
                for( _i436 in 0 ... _map435.size)
                {
                  var _key437 : String;
                  var _val438 : SquareStatus;
                  _key437 = iprot.readString();
                  _val438 = new SquareStatus();
                  _val438.read(iprot);
                  this.statuses.set( _key437, _val438);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CONTINUATIONTOKEN_FIELD_ID:
            if (field.type == TType.STRING) {
              this.continuationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NOTESTATUSES_FIELD_ID:
            if (field.type == TType.MAP) {
              {
                var _map439 = iprot.readMapBegin();
                this.noteStatuses = new StringMap< NoteStatus>();
                for( _i440 in 0 ... _map439.size)
                {
                  var _key441 : String;
                  var _val442 : NoteStatus;
                  _key441 = iprot.readString();
                  _val442 = new NoteStatus();
                  _val442.read(iprot);
                  this.noteStatuses.set( _key441, _val442);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.squares != null) {
        oprot.writeFieldBegin(SQUARES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.squares.length));
          for( elem443 in this.squares)
          {
            elem443.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.members != null) {
        oprot.writeFieldBegin(MEMBERS_FIELD_DESC);
        {
          var _sizeCounter445 : Int = 0;
          for( _key444 in this.members) {
            _sizeCounter445++;
          }
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, _sizeCounter445));
          for( elem446 in this.members.keys())
          {
            oprot.writeString(elem446);
            this.members.get(elem446).write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.authorities != null) {
        oprot.writeFieldBegin(AUTHORITIES_FIELD_DESC);
        {
          var _sizeCounter448 : Int = 0;
          for( _key447 in this.authorities) {
            _sizeCounter448++;
          }
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, _sizeCounter448));
          for( elem449 in this.authorities.keys())
          {
            oprot.writeString(elem449);
            this.authorities.get(elem449).write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.statuses != null) {
        oprot.writeFieldBegin(STATUSES_FIELD_DESC);
        {
          var _sizeCounter451 : Int = 0;
          for( _key450 in this.statuses) {
            _sizeCounter451++;
          }
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, _sizeCounter451));
          for( elem452 in this.statuses.keys())
          {
            oprot.writeString(elem452);
            this.statuses.get(elem452).write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.continuationToken != null) {
        oprot.writeFieldBegin(CONTINUATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.continuationToken);
        oprot.writeFieldEnd();
      }
      if (this.noteStatuses != null) {
        oprot.writeFieldBegin(NOTE_STATUSES_FIELD_DESC);
        {
          var _sizeCounter454 : Int = 0;
          for( _key453 in this.noteStatuses) {
            _sizeCounter454++;
          }
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, _sizeCounter454));
          for( elem455 in this.noteStatuses.keys())
          {
            oprot.writeString(elem455);
            this.noteStatuses.get(elem455).write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "GetJoinedSquaresResponse(";
    var first : Bool = true;

    ret += "squares:";
    if (this.squares == null) {
      ret += "null";
    } else {
      ret += this.squares;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "members:";
    if (this.members == null) {
      ret += "null";
    } else {
      ret += this.members;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "authorities:";
    if (this.authorities == null) {
      ret += "null";
    } else {
      ret += this.authorities;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "statuses:";
    if (this.statuses == null) {
      ret += "null";
    } else {
      ret += this.statuses;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "continuationToken:";
    if (this.continuationToken == null) {
      ret += "null";
    } else {
      ret += this.continuationToken;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "noteStatuses:";
    if (this.noteStatuses == null) {
      ret += "null";
    } else {
      ret += this.noteStatuses;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

