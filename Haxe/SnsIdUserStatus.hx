/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SnsIdUserStatus implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SnsIdUserStatus"); };
  static var USER_EXISTING_FIELD_DESC = { new TField("userExisting", TType.BOOL, 1); };
  static var PHONE_NUMBER_REGISTERED_FIELD_DESC = { new TField("phoneNumberRegistered", TType.BOOL, 2); };
  static var SAME_DEVICE_FIELD_DESC = { new TField("sameDevice", TType.BOOL, 3); };

  @:isVar
  public var userExisting(get,set) : Bool;
  @:isVar
  public var phoneNumberRegistered(get,set) : Bool;
  @:isVar
  public var sameDevice(get,set) : Bool;

  inline static var USEREXISTING_FIELD_ID : Int = 1;
  inline static var PHONENUMBERREGISTERED_FIELD_ID : Int = 2;
  inline static var SAMEDEVICE_FIELD_ID : Int = 3;

  private var __isset_userExisting : Bool = false;
  private var __isset_phoneNumberRegistered : Bool = false;
  private var __isset_sameDevice : Bool = false;

  public function new() {
  }

  public function get_userExisting() : Bool {
    return this.userExisting;
  }

  public function set_userExisting(userExisting:Bool) : Bool {
    this.userExisting = userExisting;
    this.__isset_userExisting = true;
    return this.userExisting;
  }

  public function unsetUserExisting() : Void {
    this.__isset_userExisting = false;
  }

  // Returns true if field userExisting is set (has been assigned a value) and false otherwise
  public function isSetUserExisting() : Bool {
    return this.__isset_userExisting;
  }

  public function get_phoneNumberRegistered() : Bool {
    return this.phoneNumberRegistered;
  }

  public function set_phoneNumberRegistered(phoneNumberRegistered:Bool) : Bool {
    this.phoneNumberRegistered = phoneNumberRegistered;
    this.__isset_phoneNumberRegistered = true;
    return this.phoneNumberRegistered;
  }

  public function unsetPhoneNumberRegistered() : Void {
    this.__isset_phoneNumberRegistered = false;
  }

  // Returns true if field phoneNumberRegistered is set (has been assigned a value) and false otherwise
  public function isSetPhoneNumberRegistered() : Bool {
    return this.__isset_phoneNumberRegistered;
  }

  public function get_sameDevice() : Bool {
    return this.sameDevice;
  }

  public function set_sameDevice(sameDevice:Bool) : Bool {
    this.sameDevice = sameDevice;
    this.__isset_sameDevice = true;
    return this.sameDevice;
  }

  public function unsetSameDevice() : Void {
    this.__isset_sameDevice = false;
  }

  // Returns true if field sameDevice is set (has been assigned a value) and false otherwise
  public function isSetSameDevice() : Bool {
    return this.__isset_sameDevice;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case USEREXISTING_FIELD_ID:
      if (value == null) {
        unsetUserExisting();
      } else {
        this.userExisting = value;
      }

    case PHONENUMBERREGISTERED_FIELD_ID:
      if (value == null) {
        unsetPhoneNumberRegistered();
      } else {
        this.phoneNumberRegistered = value;
      }

    case SAMEDEVICE_FIELD_ID:
      if (value == null) {
        unsetSameDevice();
      } else {
        this.sameDevice = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case USEREXISTING_FIELD_ID:
      return this.userExisting;
    case PHONENUMBERREGISTERED_FIELD_ID:
      return this.phoneNumberRegistered;
    case SAMEDEVICE_FIELD_ID:
      return this.sameDevice;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case USEREXISTING_FIELD_ID:
      return isSetUserExisting();
    case PHONENUMBERREGISTERED_FIELD_ID:
      return isSetPhoneNumberRegistered();
    case SAMEDEVICE_FIELD_ID:
      return isSetSameDevice();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case USEREXISTING_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.userExisting = iprot.readBool();
              this.__isset_userExisting = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PHONENUMBERREGISTERED_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.phoneNumberRegistered = iprot.readBool();
              this.__isset_phoneNumberRegistered = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SAMEDEVICE_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.sameDevice = iprot.readBool();
              this.__isset_sameDevice = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_EXISTING_FIELD_DESC);
      oprot.writeBool(this.userExisting);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PHONE_NUMBER_REGISTERED_FIELD_DESC);
      oprot.writeBool(this.phoneNumberRegistered);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SAME_DEVICE_FIELD_DESC);
      oprot.writeBool(this.sameDevice);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SnsIdUserStatus(";
    var first : Bool = true;

    ret += "userExisting:";
    ret += this.userExisting;
    first = false;
    if (!first) ret +=  ", ";
    ret += "phoneNumberRegistered:";
    ret += this.phoneNumberRegistered;
    first = false;
    if (!first) ret +=  ", ";
    ret += "sameDevice:";
    ret += this.sameDevice;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

