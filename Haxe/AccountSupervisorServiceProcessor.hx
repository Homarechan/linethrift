/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class AccountSupervisorServiceProcessor implements TProcessor {

  private var AccountSupervisorService_iface_ : AccountSupervisorService;
  private var PROCESS_MAP = new StringMap< Int->TProtocol->TProtocol->Void >();

  public function new( iface : AccountSupervisorService)
  {
    AccountSupervisorService_iface_ = iface;
    PROCESS_MAP.set("getRSAKey", getRSAKey());
    PROCESS_MAP.set("notifyEmailConfirmationResult", notifyEmailConfirmationResult());
    PROCESS_MAP.set("registerVirtualAccount", registerVirtualAccount());
    PROCESS_MAP.set("requestVirtualAccountPasswordChange", requestVirtualAccountPasswordChange());
    PROCESS_MAP.set("requestVirtualAccountPasswordSet", requestVirtualAccountPasswordSet());
    PROCESS_MAP.set("unregisterVirtualAccount", unregisterVirtualAccount());
  }

  public function process( iprot : TProtocol, oprot : TProtocol) : Bool
  {
    var msg : TMessage = iprot.readMessageBegin();
    var fn  = PROCESS_MAP.get(msg.name);
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      var x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
      return true;
    }
    fn( msg.seqid, iprot, oprot);
    return true;
  }

  private function getRSAKey() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetRSAKey_args = new GetRSAKey_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetRSAKey_result = new GetRSAKey_result();
      try {
        result.success = AccountSupervisorService_iface_.getRSAKey();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getRSAKey", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRSAKey");
        oprot.writeMessageBegin(new TMessage("getRSAKey", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getRSAKey", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function notifyEmailConfirmationResult() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : NotifyEmailConfirmationResult_args = new NotifyEmailConfirmationResult_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : NotifyEmailConfirmationResult_result = new NotifyEmailConfirmationResult_result();
      try {
        AccountSupervisorService_iface_.notifyEmailConfirmationResult(args.parameterMap);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing notifyEmailConfirmationResult", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyEmailConfirmationResult");
        oprot.writeMessageBegin(new TMessage("notifyEmailConfirmationResult", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("notifyEmailConfirmationResult", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function registerVirtualAccount() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RegisterVirtualAccount_args = new RegisterVirtualAccount_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RegisterVirtualAccount_result = new RegisterVirtualAccount_result();
      try {
        result.success = AccountSupervisorService_iface_.registerVirtualAccount(args.locale, args.encryptedVirtualUserId, args.encryptedPassword);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing registerVirtualAccount", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerVirtualAccount");
        oprot.writeMessageBegin(new TMessage("registerVirtualAccount", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("registerVirtualAccount", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function requestVirtualAccountPasswordChange() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RequestVirtualAccountPasswordChange_args = new RequestVirtualAccountPasswordChange_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RequestVirtualAccountPasswordChange_result = new RequestVirtualAccountPasswordChange_result();
      try {
        AccountSupervisorService_iface_.requestVirtualAccountPasswordChange(args.virtualMid, args.encryptedVirtualUserId, args.encryptedOldPassword, args.encryptedNewPassword);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing requestVirtualAccountPasswordChange", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing requestVirtualAccountPasswordChange");
        oprot.writeMessageBegin(new TMessage("requestVirtualAccountPasswordChange", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("requestVirtualAccountPasswordChange", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function requestVirtualAccountPasswordSet() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RequestVirtualAccountPasswordSet_args = new RequestVirtualAccountPasswordSet_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RequestVirtualAccountPasswordSet_result = new RequestVirtualAccountPasswordSet_result();
      try {
        AccountSupervisorService_iface_.requestVirtualAccountPasswordSet(args.virtualMid, args.encryptedVirtualUserId, args.encryptedNewPassword);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing requestVirtualAccountPasswordSet", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing requestVirtualAccountPasswordSet");
        oprot.writeMessageBegin(new TMessage("requestVirtualAccountPasswordSet", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("requestVirtualAccountPasswordSet", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function unregisterVirtualAccount() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UnregisterVirtualAccount_args = new UnregisterVirtualAccount_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UnregisterVirtualAccount_result = new UnregisterVirtualAccount_result();
      try {
        AccountSupervisorService_iface_.unregisterVirtualAccount(args.virtualMid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing unregisterVirtualAccount", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing unregisterVirtualAccount");
        oprot.writeMessageBegin(new TMessage("unregisterVirtualAccount", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("unregisterVirtualAccount", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

}

