/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class AdditionalInfoItem implements TBase {
  
  static var STRUCT_DESC = { new TStruct("AdditionalInfoItem"); };
  static var ID_FIELD_DESC = { new TField("id", TType.STRING, 1); };
  static var G_FIELD_DESC = { new TField("g", TType.I32, 2); };
  static var TITLE_FIELD_DESC = { new TField("title", TType.STRING, 3); };
  static var DESCR_FIELD_DESC = { new TField("descr", TType.STRING, 4); };
  static var ICON_URL_FIELD_DESC = { new TField("iconUrl", TType.STRING, 5); };
  static var LINK_FIELD_DESC = { new TField("link", TType.STRING, 6); };

  @:isVar
  public var id(get,set) : String;
  @:isVar
  public var g(get,set) : haxe.Int32;
  @:isVar
  public var title(get,set) : String;
  @:isVar
  public var descr(get,set) : String;
  @:isVar
  public var iconUrl(get,set) : String;
  @:isVar
  public var link(get,set) : String;

  inline static var ID_FIELD_ID : Int = 1;
  inline static var G_FIELD_ID : Int = 2;
  inline static var TITLE_FIELD_ID : Int = 3;
  inline static var DESCR_FIELD_ID : Int = 4;
  inline static var ICONURL_FIELD_ID : Int = 5;
  inline static var LINK_FIELD_ID : Int = 6;

  private var __isset_g : Bool = false;

  public function new() {
  }

  public function get_id() : String {
    return this.id;
  }

  public function set_id(id:String) : String {
    this.id = id;
    return this.id;
  }

  public function unsetId() : Void {
    this.id = null;
  }

  // Returns true if field id is set (has been assigned a value) and false otherwise
  public function isSetId() : Bool {
    return this.id != null;
  }

  public function get_g() : haxe.Int32 {
    return this.g;
  }

  public function set_g(g:haxe.Int32) : haxe.Int32 {
    this.g = g;
    this.__isset_g = true;
    return this.g;
  }

  public function unsetG() : Void {
    this.__isset_g = false;
  }

  // Returns true if field g is set (has been assigned a value) and false otherwise
  public function isSetG() : Bool {
    return this.__isset_g;
  }

  public function get_title() : String {
    return this.title;
  }

  public function set_title(title:String) : String {
    this.title = title;
    return this.title;
  }

  public function unsetTitle() : Void {
    this.title = null;
  }

  // Returns true if field title is set (has been assigned a value) and false otherwise
  public function isSetTitle() : Bool {
    return this.title != null;
  }

  public function get_descr() : String {
    return this.descr;
  }

  public function set_descr(descr:String) : String {
    this.descr = descr;
    return this.descr;
  }

  public function unsetDescr() : Void {
    this.descr = null;
  }

  // Returns true if field descr is set (has been assigned a value) and false otherwise
  public function isSetDescr() : Bool {
    return this.descr != null;
  }

  public function get_iconUrl() : String {
    return this.iconUrl;
  }

  public function set_iconUrl(iconUrl:String) : String {
    this.iconUrl = iconUrl;
    return this.iconUrl;
  }

  public function unsetIconUrl() : Void {
    this.iconUrl = null;
  }

  // Returns true if field iconUrl is set (has been assigned a value) and false otherwise
  public function isSetIconUrl() : Bool {
    return this.iconUrl != null;
  }

  public function get_link() : String {
    return this.link;
  }

  public function set_link(link:String) : String {
    this.link = link;
    return this.link;
  }

  public function unsetLink() : Void {
    this.link = null;
  }

  // Returns true if field link is set (has been assigned a value) and false otherwise
  public function isSetLink() : Bool {
    return this.link != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case ID_FIELD_ID:
      if (value == null) {
        unsetId();
      } else {
        this.id = value;
      }

    case G_FIELD_ID:
      if (value == null) {
        unsetG();
      } else {
        this.g = value;
      }

    case TITLE_FIELD_ID:
      if (value == null) {
        unsetTitle();
      } else {
        this.title = value;
      }

    case DESCR_FIELD_ID:
      if (value == null) {
        unsetDescr();
      } else {
        this.descr = value;
      }

    case ICONURL_FIELD_ID:
      if (value == null) {
        unsetIconUrl();
      } else {
        this.iconUrl = value;
      }

    case LINK_FIELD_ID:
      if (value == null) {
        unsetLink();
      } else {
        this.link = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case ID_FIELD_ID:
      return this.id;
    case G_FIELD_ID:
      return this.g;
    case TITLE_FIELD_ID:
      return this.title;
    case DESCR_FIELD_ID:
      return this.descr;
    case ICONURL_FIELD_ID:
      return this.iconUrl;
    case LINK_FIELD_ID:
      return this.link;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case ID_FIELD_ID:
      return isSetId();
    case G_FIELD_ID:
      return isSetG();
    case TITLE_FIELD_ID:
      return isSetTitle();
    case DESCR_FIELD_ID:
      return isSetDescr();
    case ICONURL_FIELD_ID:
      return isSetIconUrl();
    case LINK_FIELD_ID:
      return isSetLink();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.id = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case G_FIELD_ID:
            if (field.type == TType.I32) {
              this.g = iprot.readI32();
              this.__isset_g = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TITLE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.title = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DESCR_FIELD_ID:
            if (field.type == TType.STRING) {
              this.descr = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ICONURL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.iconUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case LINK_FIELD_ID:
            if (field.type == TType.STRING) {
              this.link = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(G_FIELD_DESC);
      oprot.writeI32(this.g);
      oprot.writeFieldEnd();
      if (this.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(this.title);
        oprot.writeFieldEnd();
      }
      if (this.descr != null) {
        oprot.writeFieldBegin(DESCR_FIELD_DESC);
        oprot.writeString(this.descr);
        oprot.writeFieldEnd();
      }
      if (this.iconUrl != null) {
        oprot.writeFieldBegin(ICON_URL_FIELD_DESC);
        oprot.writeString(this.iconUrl);
        oprot.writeFieldEnd();
      }
      if (this.link != null) {
        oprot.writeFieldBegin(LINK_FIELD_DESC);
        oprot.writeString(this.link);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "AdditionalInfoItem(";
    var first : Bool = true;

    ret += "id:";
    if (this.id == null) {
      ret += "null";
    } else {
      ret += this.id;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "g:";
    ret += this.g;
    first = false;
    if (!first) ret +=  ", ";
    ret += "title:";
    if (this.title == null) {
      ret += "null";
    } else {
      ret += this.title;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "descr:";
    if (this.descr == null) {
      ret += "null";
    } else {
      ret += this.descr;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "iconUrl:";
    if (this.iconUrl == null) {
      ret += "null";
    } else {
      ret += this.iconUrl;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "link:";
    if (this.link == null) {
      ret += "null";
    } else {
      ret += this.link;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

