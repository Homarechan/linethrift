/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class GetBuddyContacts_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("getBuddyContacts_args"); };
  static var LANGUAGE_FIELD_DESC = { new TField("language", TType.STRING, 2); };
  static var COUNTRY_FIELD_DESC = { new TField("country", TType.STRING, 3); };
  static var CLASSIFICATION_FIELD_DESC = { new TField("classification", TType.STRING, 4); };
  static var FROM_INDEX_FIELD_DESC = { new TField("fromIndex", TType.I32, 5); };
  static var COUNT_FIELD_DESC = { new TField("count", TType.I32, 6); };

  @:isVar
  public var language(get,set) : String;
  @:isVar
  public var country(get,set) : String;
  @:isVar
  public var classification(get,set) : String;
  @:isVar
  public var fromIndex(get,set) : haxe.Int32;
  @:isVar
  public var count(get,set) : haxe.Int32;

  inline static var LANGUAGE_FIELD_ID : Int = 2;
  inline static var COUNTRY_FIELD_ID : Int = 3;
  inline static var CLASSIFICATION_FIELD_ID : Int = 4;
  inline static var FROMINDEX_FIELD_ID : Int = 5;
  inline static var COUNT_FIELD_ID : Int = 6;

  private var __isset_fromIndex : Bool = false;
  private var __isset_count : Bool = false;

  public function new() {
  }

  public function get_language() : String {
    return this.language;
  }

  public function set_language(language:String) : String {
    this.language = language;
    return this.language;
  }

  public function unsetLanguage() : Void {
    this.language = null;
  }

  // Returns true if field language is set (has been assigned a value) and false otherwise
  public function isSetLanguage() : Bool {
    return this.language != null;
  }

  public function get_country() : String {
    return this.country;
  }

  public function set_country(country:String) : String {
    this.country = country;
    return this.country;
  }

  public function unsetCountry() : Void {
    this.country = null;
  }

  // Returns true if field country is set (has been assigned a value) and false otherwise
  public function isSetCountry() : Bool {
    return this.country != null;
  }

  public function get_classification() : String {
    return this.classification;
  }

  public function set_classification(classification:String) : String {
    this.classification = classification;
    return this.classification;
  }

  public function unsetClassification() : Void {
    this.classification = null;
  }

  // Returns true if field classification is set (has been assigned a value) and false otherwise
  public function isSetClassification() : Bool {
    return this.classification != null;
  }

  public function get_fromIndex() : haxe.Int32 {
    return this.fromIndex;
  }

  public function set_fromIndex(fromIndex:haxe.Int32) : haxe.Int32 {
    this.fromIndex = fromIndex;
    this.__isset_fromIndex = true;
    return this.fromIndex;
  }

  public function unsetFromIndex() : Void {
    this.__isset_fromIndex = false;
  }

  // Returns true if field fromIndex is set (has been assigned a value) and false otherwise
  public function isSetFromIndex() : Bool {
    return this.__isset_fromIndex;
  }

  public function get_count() : haxe.Int32 {
    return this.count;
  }

  public function set_count(count:haxe.Int32) : haxe.Int32 {
    this.count = count;
    this.__isset_count = true;
    return this.count;
  }

  public function unsetCount() : Void {
    this.__isset_count = false;
  }

  // Returns true if field count is set (has been assigned a value) and false otherwise
  public function isSetCount() : Bool {
    return this.__isset_count;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case LANGUAGE_FIELD_ID:
      if (value == null) {
        unsetLanguage();
      } else {
        this.language = value;
      }

    case COUNTRY_FIELD_ID:
      if (value == null) {
        unsetCountry();
      } else {
        this.country = value;
      }

    case CLASSIFICATION_FIELD_ID:
      if (value == null) {
        unsetClassification();
      } else {
        this.classification = value;
      }

    case FROMINDEX_FIELD_ID:
      if (value == null) {
        unsetFromIndex();
      } else {
        this.fromIndex = value;
      }

    case COUNT_FIELD_ID:
      if (value == null) {
        unsetCount();
      } else {
        this.count = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case LANGUAGE_FIELD_ID:
      return this.language;
    case COUNTRY_FIELD_ID:
      return this.country;
    case CLASSIFICATION_FIELD_ID:
      return this.classification;
    case FROMINDEX_FIELD_ID:
      return this.fromIndex;
    case COUNT_FIELD_ID:
      return this.count;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case LANGUAGE_FIELD_ID:
      return isSetLanguage();
    case COUNTRY_FIELD_ID:
      return isSetCountry();
    case CLASSIFICATION_FIELD_ID:
      return isSetClassification();
    case FROMINDEX_FIELD_ID:
      return isSetFromIndex();
    case COUNT_FIELD_ID:
      return isSetCount();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case LANGUAGE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case COUNTRY_FIELD_ID:
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CLASSIFICATION_FIELD_ID:
            if (field.type == TType.STRING) {
              this.classification = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case FROMINDEX_FIELD_ID:
            if (field.type == TType.I32) {
              this.fromIndex = iprot.readI32();
              this.__isset_fromIndex = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case COUNT_FIELD_ID:
            if (field.type == TType.I32) {
              this.count = iprot.readI32();
              this.__isset_count = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      if (this.classification != null) {
        oprot.writeFieldBegin(CLASSIFICATION_FIELD_DESC);
        oprot.writeString(this.classification);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FROM_INDEX_FIELD_DESC);
      oprot.writeI32(this.fromIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(this.count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "getBuddyContacts_args(";
    var first : Bool = true;

    ret += "language:";
    if (this.language == null) {
      ret += "null";
    } else {
      ret += this.language;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "country:";
    if (this.country == null) {
      ret += "null";
    } else {
      ret += this.country;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "classification:";
    if (this.classification == null) {
      ret += "null";
    } else {
      ret += this.classification;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "fromIndex:";
    ret += this.fromIndex;
    first = false;
    if (!first) ret +=  ", ";
    ret += "count:";
    ret += this.count;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

