/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class ProductProperty implements TBase {
  
  static var STRUCT_DESC = { new TStruct("ProductProperty"); };
  static var STICKER_PROPERTY_FIELD_DESC = { new TField("stickerProperty", TType.STRUCT, 1); };
  static var STICON_PROPERTY_FIELD_DESC = { new TField("sticonProperty", TType.STRUCT, 3); };
  static var THEME_PROPERTY_FIELD_DESC = { new TField("themeProperty", TType.STRUCT, 2); };

  @:isVar
  public var stickerProperty(get,set) : StickerProperty;
  @:isVar
  public var sticonProperty(get,set) : SticonProperty;
  @:isVar
  public var themeProperty(get,set) : ThemeProperty;

  inline static var STICKERPROPERTY_FIELD_ID : Int = 1;
  inline static var STICONPROPERTY_FIELD_ID : Int = 3;
  inline static var THEMEPROPERTY_FIELD_ID : Int = 2;


  public function new() {
  }

  public function get_stickerProperty() : StickerProperty {
    return this.stickerProperty;
  }

  public function set_stickerProperty(stickerProperty:StickerProperty) : StickerProperty {
    this.stickerProperty = stickerProperty;
    return this.stickerProperty;
  }

  public function unsetStickerProperty() : Void {
    this.stickerProperty = null;
  }

  // Returns true if field stickerProperty is set (has been assigned a value) and false otherwise
  public function isSetStickerProperty() : Bool {
    return this.stickerProperty != null;
  }

  public function get_sticonProperty() : SticonProperty {
    return this.sticonProperty;
  }

  public function set_sticonProperty(sticonProperty:SticonProperty) : SticonProperty {
    this.sticonProperty = sticonProperty;
    return this.sticonProperty;
  }

  public function unsetSticonProperty() : Void {
    this.sticonProperty = null;
  }

  // Returns true if field sticonProperty is set (has been assigned a value) and false otherwise
  public function isSetSticonProperty() : Bool {
    return this.sticonProperty != null;
  }

  public function get_themeProperty() : ThemeProperty {
    return this.themeProperty;
  }

  public function set_themeProperty(themeProperty:ThemeProperty) : ThemeProperty {
    this.themeProperty = themeProperty;
    return this.themeProperty;
  }

  public function unsetThemeProperty() : Void {
    this.themeProperty = null;
  }

  // Returns true if field themeProperty is set (has been assigned a value) and false otherwise
  public function isSetThemeProperty() : Bool {
    return this.themeProperty != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case STICKERPROPERTY_FIELD_ID:
      if (value == null) {
        unsetStickerProperty();
      } else {
        this.stickerProperty = value;
      }

    case STICONPROPERTY_FIELD_ID:
      if (value == null) {
        unsetSticonProperty();
      } else {
        this.sticonProperty = value;
      }

    case THEMEPROPERTY_FIELD_ID:
      if (value == null) {
        unsetThemeProperty();
      } else {
        this.themeProperty = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case STICKERPROPERTY_FIELD_ID:
      return this.stickerProperty;
    case STICONPROPERTY_FIELD_ID:
      return this.sticonProperty;
    case THEMEPROPERTY_FIELD_ID:
      return this.themeProperty;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case STICKERPROPERTY_FIELD_ID:
      return isSetStickerProperty();
    case STICONPROPERTY_FIELD_ID:
      return isSetSticonProperty();
    case THEMEPROPERTY_FIELD_ID:
      return isSetThemeProperty();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case STICKERPROPERTY_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.stickerProperty = new StickerProperty();
              this.stickerProperty.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case STICONPROPERTY_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.sticonProperty = new SticonProperty();
              this.sticonProperty.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case THEMEPROPERTY_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.themeProperty = new ThemeProperty();
              this.themeProperty.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.stickerProperty != null) {
        oprot.writeFieldBegin(STICKER_PROPERTY_FIELD_DESC);
        this.stickerProperty.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.themeProperty != null) {
        oprot.writeFieldBegin(THEME_PROPERTY_FIELD_DESC);
        this.themeProperty.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.sticonProperty != null) {
        oprot.writeFieldBegin(STICON_PROPERTY_FIELD_DESC);
        this.sticonProperty.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "ProductProperty(";
    var first : Bool = true;

    ret += "stickerProperty:";
    if (this.stickerProperty == null) {
      ret += "null";
    } else {
      ret += this.stickerProperty;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "sticonProperty:";
    if (this.sticonProperty == null) {
      ret += "null";
    } else {
      ret += this.sticonProperty;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "themeProperty:";
    if (this.themeProperty == null) {
      ret += "null";
    } else {
      ret += this.themeProperty;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

