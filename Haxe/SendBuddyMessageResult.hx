/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SendBuddyMessageResult implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SendBuddyMessageResult"); };
  static var REQUEST_ID_FIELD_DESC = { new TField("requestId", TType.STRING, 1); };
  static var STATE_FIELD_DESC = { new TField("state", TType.I32, 2); };
  static var MESSAGE_ID_FIELD_DESC = { new TField("messageId", TType.STRING, 3); };
  static var EVENT_NO_FIELD_DESC = { new TField("eventNo", TType.I32, 4); };
  static var RECEIVER_COUNT_FIELD_DESC = { new TField("receiverCount", TType.I64, 11); };
  static var SUCCESS_COUNT_FIELD_DESC = { new TField("successCount", TType.I64, 12); };
  static var FAIL_COUNT_FIELD_DESC = { new TField("failCount", TType.I64, 13); };
  static var CANCEL_COUNT_FIELD_DESC = { new TField("cancelCount", TType.I64, 14); };
  static var BLOCK_COUNT_FIELD_DESC = { new TField("blockCount", TType.I64, 15); };
  static var UNREGISTER_COUNT_FIELD_DESC = { new TField("unregisterCount", TType.I64, 16); };
  static var TIMESTAMP_FIELD_DESC = { new TField("timestamp", TType.I64, 21); };
  static var MESSAGE_FIELD_DESC = { new TField("message", TType.STRING, 22); };

  @:isVar
  public var requestId(get,set) : String;
  @:isVar
  public var state(get,set) : Int;
  @:isVar
  public var messageId(get,set) : String;
  @:isVar
  public var eventNo(get,set) : haxe.Int32;
  @:isVar
  public var receiverCount(get,set) : haxe.Int64;
  @:isVar
  public var successCount(get,set) : haxe.Int64;
  @:isVar
  public var failCount(get,set) : haxe.Int64;
  @:isVar
  public var cancelCount(get,set) : haxe.Int64;
  @:isVar
  public var blockCount(get,set) : haxe.Int64;
  @:isVar
  public var unregisterCount(get,set) : haxe.Int64;
  @:isVar
  public var timestamp(get,set) : haxe.Int64;
  @:isVar
  public var message(get,set) : String;

  inline static var REQUESTID_FIELD_ID : Int = 1;
  inline static var STATE_FIELD_ID : Int = 2;
  inline static var MESSAGEID_FIELD_ID : Int = 3;
  inline static var EVENTNO_FIELD_ID : Int = 4;
  inline static var RECEIVERCOUNT_FIELD_ID : Int = 11;
  inline static var SUCCESSCOUNT_FIELD_ID : Int = 12;
  inline static var FAILCOUNT_FIELD_ID : Int = 13;
  inline static var CANCELCOUNT_FIELD_ID : Int = 14;
  inline static var BLOCKCOUNT_FIELD_ID : Int = 15;
  inline static var UNREGISTERCOUNT_FIELD_ID : Int = 16;
  inline static var TIMESTAMP_FIELD_ID : Int = 21;
  inline static var MESSAGE_FIELD_ID : Int = 22;

  private var __isset_state : Bool = false;
  private var __isset_eventNo : Bool = false;
  private var __isset_receiverCount : Bool = false;
  private var __isset_successCount : Bool = false;
  private var __isset_failCount : Bool = false;
  private var __isset_cancelCount : Bool = false;
  private var __isset_blockCount : Bool = false;
  private var __isset_unregisterCount : Bool = false;
  private var __isset_timestamp : Bool = false;

  public function new() {
  }

  public function get_requestId() : String {
    return this.requestId;
  }

  public function set_requestId(requestId:String) : String {
    this.requestId = requestId;
    return this.requestId;
  }

  public function unsetRequestId() : Void {
    this.requestId = null;
  }

  // Returns true if field requestId is set (has been assigned a value) and false otherwise
  public function isSetRequestId() : Bool {
    return this.requestId != null;
  }

  public function get_state() : Int {
    return this.state;
  }

  public function set_state(state:Int) : Int {
    this.state = state;
    this.__isset_state = true;
    return this.state;
  }

  public function unsetState() : Void {
    this.__isset_state = false;
  }

  // Returns true if field state is set (has been assigned a value) and false otherwise
  public function isSetState() : Bool {
    return this.__isset_state;
  }

  public function get_messageId() : String {
    return this.messageId;
  }

  public function set_messageId(messageId:String) : String {
    this.messageId = messageId;
    return this.messageId;
  }

  public function unsetMessageId() : Void {
    this.messageId = null;
  }

  // Returns true if field messageId is set (has been assigned a value) and false otherwise
  public function isSetMessageId() : Bool {
    return this.messageId != null;
  }

  public function get_eventNo() : haxe.Int32 {
    return this.eventNo;
  }

  public function set_eventNo(eventNo:haxe.Int32) : haxe.Int32 {
    this.eventNo = eventNo;
    this.__isset_eventNo = true;
    return this.eventNo;
  }

  public function unsetEventNo() : Void {
    this.__isset_eventNo = false;
  }

  // Returns true if field eventNo is set (has been assigned a value) and false otherwise
  public function isSetEventNo() : Bool {
    return this.__isset_eventNo;
  }

  public function get_receiverCount() : haxe.Int64 {
    return this.receiverCount;
  }

  public function set_receiverCount(receiverCount:haxe.Int64) : haxe.Int64 {
    this.receiverCount = receiverCount;
    this.__isset_receiverCount = true;
    return this.receiverCount;
  }

  public function unsetReceiverCount() : Void {
    this.__isset_receiverCount = false;
  }

  // Returns true if field receiverCount is set (has been assigned a value) and false otherwise
  public function isSetReceiverCount() : Bool {
    return this.__isset_receiverCount;
  }

  public function get_successCount() : haxe.Int64 {
    return this.successCount;
  }

  public function set_successCount(successCount:haxe.Int64) : haxe.Int64 {
    this.successCount = successCount;
    this.__isset_successCount = true;
    return this.successCount;
  }

  public function unsetSuccessCount() : Void {
    this.__isset_successCount = false;
  }

  // Returns true if field successCount is set (has been assigned a value) and false otherwise
  public function isSetSuccessCount() : Bool {
    return this.__isset_successCount;
  }

  public function get_failCount() : haxe.Int64 {
    return this.failCount;
  }

  public function set_failCount(failCount:haxe.Int64) : haxe.Int64 {
    this.failCount = failCount;
    this.__isset_failCount = true;
    return this.failCount;
  }

  public function unsetFailCount() : Void {
    this.__isset_failCount = false;
  }

  // Returns true if field failCount is set (has been assigned a value) and false otherwise
  public function isSetFailCount() : Bool {
    return this.__isset_failCount;
  }

  public function get_cancelCount() : haxe.Int64 {
    return this.cancelCount;
  }

  public function set_cancelCount(cancelCount:haxe.Int64) : haxe.Int64 {
    this.cancelCount = cancelCount;
    this.__isset_cancelCount = true;
    return this.cancelCount;
  }

  public function unsetCancelCount() : Void {
    this.__isset_cancelCount = false;
  }

  // Returns true if field cancelCount is set (has been assigned a value) and false otherwise
  public function isSetCancelCount() : Bool {
    return this.__isset_cancelCount;
  }

  public function get_blockCount() : haxe.Int64 {
    return this.blockCount;
  }

  public function set_blockCount(blockCount:haxe.Int64) : haxe.Int64 {
    this.blockCount = blockCount;
    this.__isset_blockCount = true;
    return this.blockCount;
  }

  public function unsetBlockCount() : Void {
    this.__isset_blockCount = false;
  }

  // Returns true if field blockCount is set (has been assigned a value) and false otherwise
  public function isSetBlockCount() : Bool {
    return this.__isset_blockCount;
  }

  public function get_unregisterCount() : haxe.Int64 {
    return this.unregisterCount;
  }

  public function set_unregisterCount(unregisterCount:haxe.Int64) : haxe.Int64 {
    this.unregisterCount = unregisterCount;
    this.__isset_unregisterCount = true;
    return this.unregisterCount;
  }

  public function unsetUnregisterCount() : Void {
    this.__isset_unregisterCount = false;
  }

  // Returns true if field unregisterCount is set (has been assigned a value) and false otherwise
  public function isSetUnregisterCount() : Bool {
    return this.__isset_unregisterCount;
  }

  public function get_timestamp() : haxe.Int64 {
    return this.timestamp;
  }

  public function set_timestamp(timestamp:haxe.Int64) : haxe.Int64 {
    this.timestamp = timestamp;
    this.__isset_timestamp = true;
    return this.timestamp;
  }

  public function unsetTimestamp() : Void {
    this.__isset_timestamp = false;
  }

  // Returns true if field timestamp is set (has been assigned a value) and false otherwise
  public function isSetTimestamp() : Bool {
    return this.__isset_timestamp;
  }

  public function get_message() : String {
    return this.message;
  }

  public function set_message(message:String) : String {
    this.message = message;
    return this.message;
  }

  public function unsetMessage() : Void {
    this.message = null;
  }

  // Returns true if field message is set (has been assigned a value) and false otherwise
  public function isSetMessage() : Bool {
    return this.message != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case REQUESTID_FIELD_ID:
      if (value == null) {
        unsetRequestId();
      } else {
        this.requestId = value;
      }

    case STATE_FIELD_ID:
      if (value == null) {
        unsetState();
      } else {
        this.state = value;
      }

    case MESSAGEID_FIELD_ID:
      if (value == null) {
        unsetMessageId();
      } else {
        this.messageId = value;
      }

    case EVENTNO_FIELD_ID:
      if (value == null) {
        unsetEventNo();
      } else {
        this.eventNo = value;
      }

    case RECEIVERCOUNT_FIELD_ID:
      if (value == null) {
        unsetReceiverCount();
      } else {
        this.receiverCount = value;
      }

    case SUCCESSCOUNT_FIELD_ID:
      if (value == null) {
        unsetSuccessCount();
      } else {
        this.successCount = value;
      }

    case FAILCOUNT_FIELD_ID:
      if (value == null) {
        unsetFailCount();
      } else {
        this.failCount = value;
      }

    case CANCELCOUNT_FIELD_ID:
      if (value == null) {
        unsetCancelCount();
      } else {
        this.cancelCount = value;
      }

    case BLOCKCOUNT_FIELD_ID:
      if (value == null) {
        unsetBlockCount();
      } else {
        this.blockCount = value;
      }

    case UNREGISTERCOUNT_FIELD_ID:
      if (value == null) {
        unsetUnregisterCount();
      } else {
        this.unregisterCount = value;
      }

    case TIMESTAMP_FIELD_ID:
      if (value == null) {
        unsetTimestamp();
      } else {
        this.timestamp = value;
      }

    case MESSAGE_FIELD_ID:
      if (value == null) {
        unsetMessage();
      } else {
        this.message = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case REQUESTID_FIELD_ID:
      return this.requestId;
    case STATE_FIELD_ID:
      return this.state;
    case MESSAGEID_FIELD_ID:
      return this.messageId;
    case EVENTNO_FIELD_ID:
      return this.eventNo;
    case RECEIVERCOUNT_FIELD_ID:
      return this.receiverCount;
    case SUCCESSCOUNT_FIELD_ID:
      return this.successCount;
    case FAILCOUNT_FIELD_ID:
      return this.failCount;
    case CANCELCOUNT_FIELD_ID:
      return this.cancelCount;
    case BLOCKCOUNT_FIELD_ID:
      return this.blockCount;
    case UNREGISTERCOUNT_FIELD_ID:
      return this.unregisterCount;
    case TIMESTAMP_FIELD_ID:
      return this.timestamp;
    case MESSAGE_FIELD_ID:
      return this.message;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case REQUESTID_FIELD_ID:
      return isSetRequestId();
    case STATE_FIELD_ID:
      return isSetState();
    case MESSAGEID_FIELD_ID:
      return isSetMessageId();
    case EVENTNO_FIELD_ID:
      return isSetEventNo();
    case RECEIVERCOUNT_FIELD_ID:
      return isSetReceiverCount();
    case SUCCESSCOUNT_FIELD_ID:
      return isSetSuccessCount();
    case FAILCOUNT_FIELD_ID:
      return isSetFailCount();
    case CANCELCOUNT_FIELD_ID:
      return isSetCancelCount();
    case BLOCKCOUNT_FIELD_ID:
      return isSetBlockCount();
    case UNREGISTERCOUNT_FIELD_ID:
      return isSetUnregisterCount();
    case TIMESTAMP_FIELD_ID:
      return isSetTimestamp();
    case MESSAGE_FIELD_ID:
      return isSetMessage();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case REQUESTID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case STATE_FIELD_ID:
            if (field.type == TType.I32) {
              this.state = iprot.readI32();
              this.__isset_state = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MESSAGEID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.messageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case EVENTNO_FIELD_ID:
            if (field.type == TType.I32) {
              this.eventNo = iprot.readI32();
              this.__isset_eventNo = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case RECEIVERCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.receiverCount = iprot.readI64();
              this.__isset_receiverCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SUCCESSCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.successCount = iprot.readI64();
              this.__isset_successCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case FAILCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.failCount = iprot.readI64();
              this.__isset_failCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CANCELCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.cancelCount = iprot.readI64();
              this.__isset_cancelCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case BLOCKCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.blockCount = iprot.readI64();
              this.__isset_blockCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case UNREGISTERCOUNT_FIELD_ID:
            if (field.type == TType.I64) {
              this.unregisterCount = iprot.readI64();
              this.__isset_unregisterCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TIMESTAMP_FIELD_ID:
            if (field.type == TType.I64) {
              this.timestamp = iprot.readI64();
              this.__isset_timestamp = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MESSAGE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.message = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(this.state);
      oprot.writeFieldEnd();
      if (this.messageId != null) {
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.messageId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EVENT_NO_FIELD_DESC);
      oprot.writeI32(this.eventNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVER_COUNT_FIELD_DESC);
      oprot.writeI64(this.receiverCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUCCESS_COUNT_FIELD_DESC);
      oprot.writeI64(this.successCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAIL_COUNT_FIELD_DESC);
      oprot.writeI64(this.failCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CANCEL_COUNT_FIELD_DESC);
      oprot.writeI64(this.cancelCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCK_COUNT_FIELD_DESC);
      oprot.writeI64(this.blockCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNREGISTER_COUNT_FIELD_DESC);
      oprot.writeI64(this.unregisterCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(this.timestamp);
      oprot.writeFieldEnd();
      if (this.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(this.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SendBuddyMessageResult(";
    var first : Bool = true;

    ret += "requestId:";
    if (this.requestId == null) {
      ret += "null";
    } else {
      ret += this.requestId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "state:";
    var state_name : String = .BuddyResultState.VALUES_TO_NAMES[this.state];
    if (state_name != null) {
      ret += state_name;
      ret += " (";
    }
    ret += this.state;
    if (state_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "messageId:";
    if (this.messageId == null) {
      ret += "null";
    } else {
      ret += this.messageId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "eventNo:";
    ret += this.eventNo;
    first = false;
    if (!first) ret +=  ", ";
    ret += "receiverCount:";
    ret += this.receiverCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "successCount:";
    ret += this.successCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "failCount:";
    ret += this.failCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "cancelCount:";
    ret += this.cancelCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "blockCount:";
    ret += this.blockCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "unregisterCount:";
    ret += this.unregisterCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "timestamp:";
    ret += this.timestamp;
    first = false;
    if (!first) ret +=  ", ";
    ret += "message:";
    if (this.message == null) {
      ret += "null";
    } else {
      ret += this.message;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetState() && !.BuddyResultState.VALID_VALUES.contains(state)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'state' has been assigned the invalid value " + state);
    }
  }

}

