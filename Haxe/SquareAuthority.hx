/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SquareAuthority implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SquareAuthority"); };
  static var SQUARE_MID_FIELD_DESC = { new TField("squareMid", TType.STRING, 1); };
  static var UPDATE_SQUARE_PROFILE_FIELD_DESC = { new TField("updateSquareProfile", TType.I32, 2); };
  static var INVITE_NEW_MEMBER_FIELD_DESC = { new TField("inviteNewMember", TType.I32, 3); };
  static var APPROVE_JOIN_REQUEST_FIELD_DESC = { new TField("approveJoinRequest", TType.I32, 4); };
  static var CREATE_POST_FIELD_DESC = { new TField("createPost", TType.I32, 5); };
  static var CREATE_OPEN_SQUARE_CHAT_FIELD_DESC = { new TField("createOpenSquareChat", TType.I32, 6); };
  static var DELETE_SQUARE_CHAT_OR_POST_FIELD_DESC = { new TField("deleteSquareChatOrPost", TType.I32, 7); };
  static var REMOVE_SQUARE_MEMBER_FIELD_DESC = { new TField("removeSquareMember", TType.I32, 8); };
  static var GRANT_ROLE_FIELD_DESC = { new TField("grantRole", TType.I32, 9); };
  static var ENABLE_INVITATION_TICKET_FIELD_DESC = { new TField("enableInvitationTicket", TType.I32, 10); };
  static var REVISION_FIELD_DESC = { new TField("revision", TType.I64, 11); };

  @:isVar
  public var squareMid(get,set) : String;
  @:isVar
  public var updateSquareProfile(get,set) : Int;
  @:isVar
  public var inviteNewMember(get,set) : Int;
  @:isVar
  public var approveJoinRequest(get,set) : Int;
  @:isVar
  public var createPost(get,set) : Int;
  @:isVar
  public var createOpenSquareChat(get,set) : Int;
  @:isVar
  public var deleteSquareChatOrPost(get,set) : Int;
  @:isVar
  public var removeSquareMember(get,set) : Int;
  @:isVar
  public var grantRole(get,set) : Int;
  @:isVar
  public var enableInvitationTicket(get,set) : Int;
  @:isVar
  public var revision(get,set) : haxe.Int64;

  inline static var SQUAREMID_FIELD_ID : Int = 1;
  inline static var UPDATESQUAREPROFILE_FIELD_ID : Int = 2;
  inline static var INVITENEWMEMBER_FIELD_ID : Int = 3;
  inline static var APPROVEJOINREQUEST_FIELD_ID : Int = 4;
  inline static var CREATEPOST_FIELD_ID : Int = 5;
  inline static var CREATEOPENSQUARECHAT_FIELD_ID : Int = 6;
  inline static var DELETESQUARECHATORPOST_FIELD_ID : Int = 7;
  inline static var REMOVESQUAREMEMBER_FIELD_ID : Int = 8;
  inline static var GRANTROLE_FIELD_ID : Int = 9;
  inline static var ENABLEINVITATIONTICKET_FIELD_ID : Int = 10;
  inline static var REVISION_FIELD_ID : Int = 11;

  private var __isset_updateSquareProfile : Bool = false;
  private var __isset_inviteNewMember : Bool = false;
  private var __isset_approveJoinRequest : Bool = false;
  private var __isset_createPost : Bool = false;
  private var __isset_createOpenSquareChat : Bool = false;
  private var __isset_deleteSquareChatOrPost : Bool = false;
  private var __isset_removeSquareMember : Bool = false;
  private var __isset_grantRole : Bool = false;
  private var __isset_enableInvitationTicket : Bool = false;
  private var __isset_revision : Bool = false;

  public function new() {
  }

  public function get_squareMid() : String {
    return this.squareMid;
  }

  public function set_squareMid(squareMid:String) : String {
    this.squareMid = squareMid;
    return this.squareMid;
  }

  public function unsetSquareMid() : Void {
    this.squareMid = null;
  }

  // Returns true if field squareMid is set (has been assigned a value) and false otherwise
  public function isSetSquareMid() : Bool {
    return this.squareMid != null;
  }

  public function get_updateSquareProfile() : Int {
    return this.updateSquareProfile;
  }

  public function set_updateSquareProfile(updateSquareProfile:Int) : Int {
    this.updateSquareProfile = updateSquareProfile;
    this.__isset_updateSquareProfile = true;
    return this.updateSquareProfile;
  }

  public function unsetUpdateSquareProfile() : Void {
    this.__isset_updateSquareProfile = false;
  }

  // Returns true if field updateSquareProfile is set (has been assigned a value) and false otherwise
  public function isSetUpdateSquareProfile() : Bool {
    return this.__isset_updateSquareProfile;
  }

  public function get_inviteNewMember() : Int {
    return this.inviteNewMember;
  }

  public function set_inviteNewMember(inviteNewMember:Int) : Int {
    this.inviteNewMember = inviteNewMember;
    this.__isset_inviteNewMember = true;
    return this.inviteNewMember;
  }

  public function unsetInviteNewMember() : Void {
    this.__isset_inviteNewMember = false;
  }

  // Returns true if field inviteNewMember is set (has been assigned a value) and false otherwise
  public function isSetInviteNewMember() : Bool {
    return this.__isset_inviteNewMember;
  }

  public function get_approveJoinRequest() : Int {
    return this.approveJoinRequest;
  }

  public function set_approveJoinRequest(approveJoinRequest:Int) : Int {
    this.approveJoinRequest = approveJoinRequest;
    this.__isset_approveJoinRequest = true;
    return this.approveJoinRequest;
  }

  public function unsetApproveJoinRequest() : Void {
    this.__isset_approveJoinRequest = false;
  }

  // Returns true if field approveJoinRequest is set (has been assigned a value) and false otherwise
  public function isSetApproveJoinRequest() : Bool {
    return this.__isset_approveJoinRequest;
  }

  public function get_createPost() : Int {
    return this.createPost;
  }

  public function set_createPost(createPost:Int) : Int {
    this.createPost = createPost;
    this.__isset_createPost = true;
    return this.createPost;
  }

  public function unsetCreatePost() : Void {
    this.__isset_createPost = false;
  }

  // Returns true if field createPost is set (has been assigned a value) and false otherwise
  public function isSetCreatePost() : Bool {
    return this.__isset_createPost;
  }

  public function get_createOpenSquareChat() : Int {
    return this.createOpenSquareChat;
  }

  public function set_createOpenSquareChat(createOpenSquareChat:Int) : Int {
    this.createOpenSquareChat = createOpenSquareChat;
    this.__isset_createOpenSquareChat = true;
    return this.createOpenSquareChat;
  }

  public function unsetCreateOpenSquareChat() : Void {
    this.__isset_createOpenSquareChat = false;
  }

  // Returns true if field createOpenSquareChat is set (has been assigned a value) and false otherwise
  public function isSetCreateOpenSquareChat() : Bool {
    return this.__isset_createOpenSquareChat;
  }

  public function get_deleteSquareChatOrPost() : Int {
    return this.deleteSquareChatOrPost;
  }

  public function set_deleteSquareChatOrPost(deleteSquareChatOrPost:Int) : Int {
    this.deleteSquareChatOrPost = deleteSquareChatOrPost;
    this.__isset_deleteSquareChatOrPost = true;
    return this.deleteSquareChatOrPost;
  }

  public function unsetDeleteSquareChatOrPost() : Void {
    this.__isset_deleteSquareChatOrPost = false;
  }

  // Returns true if field deleteSquareChatOrPost is set (has been assigned a value) and false otherwise
  public function isSetDeleteSquareChatOrPost() : Bool {
    return this.__isset_deleteSquareChatOrPost;
  }

  public function get_removeSquareMember() : Int {
    return this.removeSquareMember;
  }

  public function set_removeSquareMember(removeSquareMember:Int) : Int {
    this.removeSquareMember = removeSquareMember;
    this.__isset_removeSquareMember = true;
    return this.removeSquareMember;
  }

  public function unsetRemoveSquareMember() : Void {
    this.__isset_removeSquareMember = false;
  }

  // Returns true if field removeSquareMember is set (has been assigned a value) and false otherwise
  public function isSetRemoveSquareMember() : Bool {
    return this.__isset_removeSquareMember;
  }

  public function get_grantRole() : Int {
    return this.grantRole;
  }

  public function set_grantRole(grantRole:Int) : Int {
    this.grantRole = grantRole;
    this.__isset_grantRole = true;
    return this.grantRole;
  }

  public function unsetGrantRole() : Void {
    this.__isset_grantRole = false;
  }

  // Returns true if field grantRole is set (has been assigned a value) and false otherwise
  public function isSetGrantRole() : Bool {
    return this.__isset_grantRole;
  }

  public function get_enableInvitationTicket() : Int {
    return this.enableInvitationTicket;
  }

  public function set_enableInvitationTicket(enableInvitationTicket:Int) : Int {
    this.enableInvitationTicket = enableInvitationTicket;
    this.__isset_enableInvitationTicket = true;
    return this.enableInvitationTicket;
  }

  public function unsetEnableInvitationTicket() : Void {
    this.__isset_enableInvitationTicket = false;
  }

  // Returns true if field enableInvitationTicket is set (has been assigned a value) and false otherwise
  public function isSetEnableInvitationTicket() : Bool {
    return this.__isset_enableInvitationTicket;
  }

  public function get_revision() : haxe.Int64 {
    return this.revision;
  }

  public function set_revision(revision:haxe.Int64) : haxe.Int64 {
    this.revision = revision;
    this.__isset_revision = true;
    return this.revision;
  }

  public function unsetRevision() : Void {
    this.__isset_revision = false;
  }

  // Returns true if field revision is set (has been assigned a value) and false otherwise
  public function isSetRevision() : Bool {
    return this.__isset_revision;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case SQUAREMID_FIELD_ID:
      if (value == null) {
        unsetSquareMid();
      } else {
        this.squareMid = value;
      }

    case UPDATESQUAREPROFILE_FIELD_ID:
      if (value == null) {
        unsetUpdateSquareProfile();
      } else {
        this.updateSquareProfile = value;
      }

    case INVITENEWMEMBER_FIELD_ID:
      if (value == null) {
        unsetInviteNewMember();
      } else {
        this.inviteNewMember = value;
      }

    case APPROVEJOINREQUEST_FIELD_ID:
      if (value == null) {
        unsetApproveJoinRequest();
      } else {
        this.approveJoinRequest = value;
      }

    case CREATEPOST_FIELD_ID:
      if (value == null) {
        unsetCreatePost();
      } else {
        this.createPost = value;
      }

    case CREATEOPENSQUARECHAT_FIELD_ID:
      if (value == null) {
        unsetCreateOpenSquareChat();
      } else {
        this.createOpenSquareChat = value;
      }

    case DELETESQUARECHATORPOST_FIELD_ID:
      if (value == null) {
        unsetDeleteSquareChatOrPost();
      } else {
        this.deleteSquareChatOrPost = value;
      }

    case REMOVESQUAREMEMBER_FIELD_ID:
      if (value == null) {
        unsetRemoveSquareMember();
      } else {
        this.removeSquareMember = value;
      }

    case GRANTROLE_FIELD_ID:
      if (value == null) {
        unsetGrantRole();
      } else {
        this.grantRole = value;
      }

    case ENABLEINVITATIONTICKET_FIELD_ID:
      if (value == null) {
        unsetEnableInvitationTicket();
      } else {
        this.enableInvitationTicket = value;
      }

    case REVISION_FIELD_ID:
      if (value == null) {
        unsetRevision();
      } else {
        this.revision = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case SQUAREMID_FIELD_ID:
      return this.squareMid;
    case UPDATESQUAREPROFILE_FIELD_ID:
      return this.updateSquareProfile;
    case INVITENEWMEMBER_FIELD_ID:
      return this.inviteNewMember;
    case APPROVEJOINREQUEST_FIELD_ID:
      return this.approveJoinRequest;
    case CREATEPOST_FIELD_ID:
      return this.createPost;
    case CREATEOPENSQUARECHAT_FIELD_ID:
      return this.createOpenSquareChat;
    case DELETESQUARECHATORPOST_FIELD_ID:
      return this.deleteSquareChatOrPost;
    case REMOVESQUAREMEMBER_FIELD_ID:
      return this.removeSquareMember;
    case GRANTROLE_FIELD_ID:
      return this.grantRole;
    case ENABLEINVITATIONTICKET_FIELD_ID:
      return this.enableInvitationTicket;
    case REVISION_FIELD_ID:
      return this.revision;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case SQUAREMID_FIELD_ID:
      return isSetSquareMid();
    case UPDATESQUAREPROFILE_FIELD_ID:
      return isSetUpdateSquareProfile();
    case INVITENEWMEMBER_FIELD_ID:
      return isSetInviteNewMember();
    case APPROVEJOINREQUEST_FIELD_ID:
      return isSetApproveJoinRequest();
    case CREATEPOST_FIELD_ID:
      return isSetCreatePost();
    case CREATEOPENSQUARECHAT_FIELD_ID:
      return isSetCreateOpenSquareChat();
    case DELETESQUARECHATORPOST_FIELD_ID:
      return isSetDeleteSquareChatOrPost();
    case REMOVESQUAREMEMBER_FIELD_ID:
      return isSetRemoveSquareMember();
    case GRANTROLE_FIELD_ID:
      return isSetGrantRole();
    case ENABLEINVITATIONTICKET_FIELD_ID:
      return isSetEnableInvitationTicket();
    case REVISION_FIELD_ID:
      return isSetRevision();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SQUAREMID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.squareMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case UPDATESQUAREPROFILE_FIELD_ID:
            if (field.type == TType.I32) {
              this.updateSquareProfile = iprot.readI32();
              this.__isset_updateSquareProfile = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case INVITENEWMEMBER_FIELD_ID:
            if (field.type == TType.I32) {
              this.inviteNewMember = iprot.readI32();
              this.__isset_inviteNewMember = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case APPROVEJOINREQUEST_FIELD_ID:
            if (field.type == TType.I32) {
              this.approveJoinRequest = iprot.readI32();
              this.__isset_approveJoinRequest = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CREATEPOST_FIELD_ID:
            if (field.type == TType.I32) {
              this.createPost = iprot.readI32();
              this.__isset_createPost = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CREATEOPENSQUARECHAT_FIELD_ID:
            if (field.type == TType.I32) {
              this.createOpenSquareChat = iprot.readI32();
              this.__isset_createOpenSquareChat = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DELETESQUARECHATORPOST_FIELD_ID:
            if (field.type == TType.I32) {
              this.deleteSquareChatOrPost = iprot.readI32();
              this.__isset_deleteSquareChatOrPost = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case REMOVESQUAREMEMBER_FIELD_ID:
            if (field.type == TType.I32) {
              this.removeSquareMember = iprot.readI32();
              this.__isset_removeSquareMember = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case GRANTROLE_FIELD_ID:
            if (field.type == TType.I32) {
              this.grantRole = iprot.readI32();
              this.__isset_grantRole = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ENABLEINVITATIONTICKET_FIELD_ID:
            if (field.type == TType.I32) {
              this.enableInvitationTicket = iprot.readI32();
              this.__isset_enableInvitationTicket = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case REVISION_FIELD_ID:
            if (field.type == TType.I64) {
              this.revision = iprot.readI64();
              this.__isset_revision = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.squareMid != null) {
        oprot.writeFieldBegin(SQUARE_MID_FIELD_DESC);
        oprot.writeString(this.squareMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATE_SQUARE_PROFILE_FIELD_DESC);
      oprot.writeI32(this.updateSquareProfile);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INVITE_NEW_MEMBER_FIELD_DESC);
      oprot.writeI32(this.inviteNewMember);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPROVE_JOIN_REQUEST_FIELD_DESC);
      oprot.writeI32(this.approveJoinRequest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_POST_FIELD_DESC);
      oprot.writeI32(this.createPost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_OPEN_SQUARE_CHAT_FIELD_DESC);
      oprot.writeI32(this.createOpenSquareChat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELETE_SQUARE_CHAT_OR_POST_FIELD_DESC);
      oprot.writeI32(this.deleteSquareChatOrPost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REMOVE_SQUARE_MEMBER_FIELD_DESC);
      oprot.writeI32(this.removeSquareMember);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GRANT_ROLE_FIELD_DESC);
      oprot.writeI32(this.grantRole);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENABLE_INVITATION_TICKET_FIELD_DESC);
      oprot.writeI32(this.enableInvitationTicket);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REVISION_FIELD_DESC);
      oprot.writeI64(this.revision);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SquareAuthority(";
    var first : Bool = true;

    ret += "squareMid:";
    if (this.squareMid == null) {
      ret += "null";
    } else {
      ret += this.squareMid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "updateSquareProfile:";
    var updateSquareProfile_name : String = .SquareMemberRole.VALUES_TO_NAMES[this.updateSquareProfile];
    if (updateSquareProfile_name != null) {
      ret += updateSquareProfile_name;
      ret += " (";
    }
    ret += this.updateSquareProfile;
    if (updateSquareProfile_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "inviteNewMember:";
    var inviteNewMember_name : String = .SquareMemberRole.VALUES_TO_NAMES[this.inviteNewMember];
    if (inviteNewMember_name != null) {
      ret += inviteNewMember_name;
      ret += " (";
    }
    ret += this.inviteNewMember;
    if (inviteNewMember_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "approveJoinRequest:";
    var approveJoinRequest_name : String = .SquareMemberRole.VALUES_TO_NAMES[this.approveJoinRequest];
    if (approveJoinRequest_name != null) {
      ret += approveJoinRequest_name;
      ret += " (";
    }
    ret += this.approveJoinRequest;
    if (approveJoinRequest_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "createPost:";
    var createPost_name : String = .SquareMemberRole.VALUES_TO_NAMES[this.createPost];
    if (createPost_name != null) {
      ret += createPost_name;
      ret += " (";
    }
    ret += this.createPost;
    if (createPost_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "createOpenSquareChat:";
    var createOpenSquareChat_name : String = .SquareMemberRole.VALUES_TO_NAMES[this.createOpenSquareChat];
    if (createOpenSquareChat_name != null) {
      ret += createOpenSquareChat_name;
      ret += " (";
    }
    ret += this.createOpenSquareChat;
    if (createOpenSquareChat_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "deleteSquareChatOrPost:";
    var deleteSquareChatOrPost_name : String = .SquareMemberRole.VALUES_TO_NAMES[this.deleteSquareChatOrPost];
    if (deleteSquareChatOrPost_name != null) {
      ret += deleteSquareChatOrPost_name;
      ret += " (";
    }
    ret += this.deleteSquareChatOrPost;
    if (deleteSquareChatOrPost_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "removeSquareMember:";
    var removeSquareMember_name : String = .SquareMemberRole.VALUES_TO_NAMES[this.removeSquareMember];
    if (removeSquareMember_name != null) {
      ret += removeSquareMember_name;
      ret += " (";
    }
    ret += this.removeSquareMember;
    if (removeSquareMember_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "grantRole:";
    var grantRole_name : String = .SquareMemberRole.VALUES_TO_NAMES[this.grantRole];
    if (grantRole_name != null) {
      ret += grantRole_name;
      ret += " (";
    }
    ret += this.grantRole;
    if (grantRole_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "enableInvitationTicket:";
    var enableInvitationTicket_name : String = .SquareMemberRole.VALUES_TO_NAMES[this.enableInvitationTicket];
    if (enableInvitationTicket_name != null) {
      ret += enableInvitationTicket_name;
      ret += " (";
    }
    ret += this.enableInvitationTicket;
    if (enableInvitationTicket_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "revision:";
    ret += this.revision;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetUpdateSquareProfile() && !.SquareMemberRole.VALID_VALUES.contains(updateSquareProfile)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'updateSquareProfile' has been assigned the invalid value " + updateSquareProfile);
    }
    if (isSetInviteNewMember() && !.SquareMemberRole.VALID_VALUES.contains(inviteNewMember)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'inviteNewMember' has been assigned the invalid value " + inviteNewMember);
    }
    if (isSetApproveJoinRequest() && !.SquareMemberRole.VALID_VALUES.contains(approveJoinRequest)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'approveJoinRequest' has been assigned the invalid value " + approveJoinRequest);
    }
    if (isSetCreatePost() && !.SquareMemberRole.VALID_VALUES.contains(createPost)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'createPost' has been assigned the invalid value " + createPost);
    }
    if (isSetCreateOpenSquareChat() && !.SquareMemberRole.VALID_VALUES.contains(createOpenSquareChat)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'createOpenSquareChat' has been assigned the invalid value " + createOpenSquareChat);
    }
    if (isSetDeleteSquareChatOrPost() && !.SquareMemberRole.VALID_VALUES.contains(deleteSquareChatOrPost)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'deleteSquareChatOrPost' has been assigned the invalid value " + deleteSquareChatOrPost);
    }
    if (isSetRemoveSquareMember() && !.SquareMemberRole.VALID_VALUES.contains(removeSquareMember)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'removeSquareMember' has been assigned the invalid value " + removeSquareMember);
    }
    if (isSetGrantRole() && !.SquareMemberRole.VALID_VALUES.contains(grantRole)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'grantRole' has been assigned the invalid value " + grantRole);
    }
    if (isSetEnableInvitationTicket() && !.SquareMemberRole.VALID_VALUES.contains(enableInvitationTicket)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'enableInvitationTicket' has been assigned the invalid value " + enableInvitationTicket);
    }
  }

}

