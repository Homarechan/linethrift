/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


interface TalkService {

  function getChatRoomAnnouncementsBulk(chatRoomMids : List< String>) : StringMap< List< ChatRoomAnnouncement>>;

  function getChatRoomAnnouncements(chatRoomMid : String) : List< ChatRoomAnnouncement>;

  function createChatRoomAnnouncement(reqSeq : haxe.Int32, chatRoomMid : String, type : Int, contents : ChatRoomAnnouncementContents) : ChatRoomAnnouncement;

  function removeChatRoomAnnouncement(reqSeq : haxe.Int32, chatRoomMid : String, announcementSeq : haxe.Int64) : Void;

  function unsendMessage(seq : haxe.Int32, messageId : String) : Void;

  function getGroupWithoutMembers(groupId : String) : Group;

  function requestResendMessage(reqSeq : haxe.Int32, senderMid : String, messageId : String) : Void;

  function respondResendMessage(reqSeq : haxe.Int32, receiverMid : String, originalMessageId : String, resendMessage : Message, errorCode : Int) : Void;

  function acceptGroupInvitation(reqSeq : haxe.Int32, groupId : String) : Void;

  function acceptGroupInvitationByTicket(reqSeq : haxe.Int32, GroupMid : String, ticketId : String) : Void;

  function acceptProximityMatches(sessionId : String, ids : StringSet) : Void;

  function acquireCallRoute(to : String) : List< String>;

  function acquireCallTicket(to : String) : String;

  function acquireEncryptedAccessToken(featureType : Int) : String;

  function addSnsId(snsIdType : Int, snsAccessToken : String) : String;

  function blockContact(reqSeq : haxe.Int32, id : String) : Void;

  function blockRecommendation(reqSeq : haxe.Int32, id : String) : Void;

  function cancelGroupInvitation(reqSeq : haxe.Int32, groupId : String, contactIds : List< String>) : Void;

  function changeVerificationMethod(sessionId : String, method : Int) : VerificationSessionData;

  function clearIdentityCredential() : Void;

  function clearMessageBox(channelId : String, messageBoxId : String) : Void;

  function closeProximityMatch(sessionId : String) : Void;

  function commitSendMessage(seq : haxe.Int32, messageId : String, receiverMids : List< String>) : StringMap< String>;

  function commitSendMessages(seq : haxe.Int32, messageIds : List< String>, receiverMids : List< String>) : StringMap< String>;

  function commitUpdateProfile(seq : haxe.Int32, attrs : List< Int>, receiverMids : List< String>) : StringMap< String>;

  function confirmEmail(verifier : String, pinCode : String) : Void;

  function createGroup(seq : haxe.Int32, name : String, contactIds : List< String>) : Group;

  function createQrcodeBase64Image(url : String, characterSet : String, imageSize : haxe.Int32, x : haxe.Int32, y : haxe.Int32, width : haxe.Int32, height : haxe.Int32) : String;

  function createRoom(reqSeq : haxe.Int32, contactIds : List< String>) : Room;

  function createSession() : String;

  function fetchAnnouncements(lastFetchedIndex : haxe.Int32) : List< Announcement>;

  function fetchMessages(localTs : haxe.Int64, count : haxe.Int32) : List< Message>;

  function fetchOperations(localRev : haxe.Int64, count : haxe.Int32) : List< Operation>;

  function fetchOps(localRev : haxe.Int64, count : haxe.Int32, globalRev : haxe.Int64, individualRev : haxe.Int64) : List< Operation>;

  function findAndAddContactsByEmail(reqSeq : haxe.Int32, emails : StringSet) : StringMap< Contact>;

  function findAndAddContactsByMid(reqSeq : haxe.Int32, mid : String, type : Int, reference : String) : StringMap< Contact>;

  function findGroupByTicketV2(ticketId : String) : Group;

  function findAndAddContactsByPhone(reqSeq : haxe.Int32, phones : StringSet) : StringMap< Contact>;

  function getFriendRequests(direction : Int, lastSeenSeqId : haxe.Int64) : List< FriendRequest>;

  function removeFriendRequest(direction : Int, midOrEMid : String) : Void;

  function findAndAddContactsByUserid(reqSeq : haxe.Int32, userid : String) : StringMap< Contact>;

  function findContactByUserid(userid : String) : Contact;

  function findContactByUserTicket(ticketIdWithTag : String) : Contact;

  function findContactsByEmail(emails : StringSet) : StringMap< Contact>;

  function findContactsByPhone(phones : StringSet) : StringMap< Contact>;

  function findSnsIdUserStatus(snsIdType : Int, snsAccessToken : String, udidHash : String) : SnsIdUserStatus;

  function finishUpdateVerification(sessionId : String) : Void;

  function generateUserTicket(expirationTime : haxe.Int64, maxUseCount : haxe.Int32) : Ticket;

  function destroyMessage(seq : haxe.Int32, chatId : String, messageId : String, sessionId : haxe.Int32) : Void;

  function getAcceptedProximityMatches(sessionId : String) : StringSet;

  function getActiveBuddySubscriberIds() : List< String>;

  function getAllContactIds() : List< String>;

  function getAuthQrcode(keepLoggedIn : Bool, systemName : String) : AuthQrcode;

  function getBlockedContactIds() : List< String>;

  function registerWithPhoneNumber(sessionId : String, migrationPincodeSessionId : String) : RegisterWithPhoneNumberResult;

  function registerWithPhoneNumberAndPassword(sessionId : String, keynm : String, encrypted : String) : RegisterWithPhoneNumberResult;

  function getAnalyticsInfo() : AnalyticsInfo;

  function reportClientStatistics(reqSeq : haxe.Int32, category : Int, count : haxe.Int32) : Void;

  function verifyPhoneNumberForLogin(verifierFromPhone : String, pinCodeForPhone : String, verifierFromLogin : String) : String;

  function verifyPhoneNumber(sessionId : String, pinCode : String, udidHash : String, migrationPincodeSessionId : String, oldUdidHash : String) : PhoneVerificationResult;

  function getBlockedContactIdsByRange(start : haxe.Int32, count : haxe.Int32) : List< String>;

  function getBlockedRecommendationIds() : List< String>;

  function getBuddyBlockerIds() : List< String>;

  function getBuddyLocation(mid : String, index : haxe.Int32) : Geolocation;

  function getCompactContactsModifiedSince(timestamp : haxe.Int64) : List< CompactContact>;

  function getCompactGroup(groupId : String) : Group;

  function getCompactRoom(roomId : String) : Room;

  function getContact(id : String) : Contact;

  function getContacts(ids : List< String>) : List< Contact>;

  function getContactWithFriendRequestStatus(id : String) : Contact;

  function getCountryWithRequestIp() : String;

  function getFavoriteMids() : List< String>;

  function getGroup(groupId : String) : Group;

  function getGroupIdsInvited() : List< String>;

  function getGroupIdsJoined() : List< String>;

  function getGroups(groupIds : List< String>) : List< Group>;

  function getHiddenContactMids() : List< String>;

  function getIdentityIdentifier() : String;

  function getLastAnnouncementIndex() : haxe.Int32;

  function getLastOpRevision() : haxe.Int64;

  function getSuggestRevisions() : SuggestDictionaryRevisions;

  function getPreviousMessagesV2WithReadCount(messageBoxId : String, endMessageId : MessageBoxV2MessageId, messagesCount : haxe.Int32) : List< Message>;

  function getMessageBox(channelId : String, messageBoxId : String, lastMessagesCount : haxe.Int32) : TMessageBox;

  function getMessageBoxCompactWrapUp(mid : String) : TMessageBoxWrapUp;

  function getMessageBoxCompactWrapUpList(start : haxe.Int32, messageBoxCount : haxe.Int32) : TMessageBoxWrapUpResponse;

  function getMessageBoxList(channelId : String, lastMessagesCount : haxe.Int32) : List< TMessageBox>;

  function getMessageBoxListByStatus(channelId : String, lastMessagesCount : haxe.Int32, status : haxe.Int32) : List< TMessageBox>;

  function getMessageBoxWrapUp(mid : String) : TMessageBoxWrapUp;

  function getMessageBoxWrapUpList(start : haxe.Int32, messageBoxCount : haxe.Int32) : TMessageBoxWrapUpResponse;

  function getMessagesBySequenceNumber(channelId : String, messageBoxId : String, startSeq : haxe.Int64, endSeq : haxe.Int64) : List< Message>;

  function getNextMessages(messageBoxId : String, startSeq : haxe.Int64, messagesCount : haxe.Int32) : List< Message>;

  function getNotificationPolicy(carrier : Int) : List< Int>;

  function getPreviousMessages(messageBoxId : String, endSeq : haxe.Int64, messagesCount : haxe.Int32) : List< Message>;

  function getProfile() : Profile;

  function getProximityMatchCandidateList(sessionId : String) : ProximityMatchCandidateResult;

  function getProximityMatchCandidates(sessionId : String) : ObjectSet< Contact>;

  function getRecentMessages(messageBoxId : String, messagesCount : haxe.Int32) : List< Message>;

  function getRecommendationIds() : List< String>;

  function getRoom(roomId : String) : Room;

  function getRSAKeyInfo(provider : Int) : RSAKey;

  function getServerTime() : haxe.Int64;

  function getSessions() : List< LoginSession>;

  function getSettings() : Settings;

  function getGroupsV2(groupIds : List< String>) : List< Group>;

  function getSettingsAttributes(attrBitset : haxe.Int32) : Settings;

  function getSystemConfiguration() : SystemConfiguration;

  function getUserTicket() : Ticket;

  function getWapInvitation(invitationHash : String) : WapInvitation;

  function invalidateUserTicket() : Void;

  function inviteFriendsBySms(phoneNumberList : List< String>) : Void;

  function inviteIntoGroup(reqSeq : haxe.Int32, groupId : String, contactIds : List< String>) : Void;

  function inviteIntoRoom(reqSeq : haxe.Int32, roomId : String, contactIds : List< String>) : Void;

  function inviteViaEmail(reqSeq : haxe.Int32, email : String, name : String) : Void;

  function isIdentityIdentifierAvailable(provider : Int, identifier : String) : Bool;

  function isUseridAvailable(userid : String) : Bool;

  function kickoutFromGroup(reqSeq : haxe.Int32, groupId : String, contactIds : List< String>) : Void;

  function reissueGroupTicket(groupMid : String) : String;

  function findGroupByTicket(ticketId : String) : Group;

  function leaveGroup(reqSeq : haxe.Int32, groupId : String) : Void;

  function leaveRoom(reqSeq : haxe.Int32, roomId : String) : Void;

  function loginWithIdentityCredential(identityProvider : Int, identifier : String, password : String, keepLoggedIn : Bool, accessLocation : String, systemName : String, certificate : String) : String;

  function loginWithIdentityCredentialForCertificate(identityProvider : Int, identifier : String, password : String, keepLoggedIn : Bool, accessLocation : String, systemName : String, certificate : String) : LoginResult;

  function loginWithVerifier(verifier : String) : String;

  function loginWithVerifierForCerificate(verifier : String) : LoginResult;

  function loginWithVerifierForCertificate(verifier : String) : LoginResult;

  function logout() : Void;

  function logoutSession(tokenKey : String) : Void;

  function noop() : Void;

  function notifiedRedirect(paramMap : StringMap< String>) : Void;

  function notifyBuddyOnAir(seq : haxe.Int32, receiverMids : List< String>) : StringMap< String>;

  function notifyIndividualEvent(notificationStatus : Int, receiverMids : List< String>) : Void;

  function notifyInstalled(udidHash : String, applicationTypeWithExtensions : String) : Void;

  function notifyRegistrationComplete(udidHash : String, applicationTypeWithExtensions : String) : Void;

  function notifySleep(lastRev : haxe.Int64, badge : haxe.Int32) : Void;

  function notifyUpdated(lastRev : haxe.Int64, deviceInfo : DeviceInfo) : Void;

  function openProximityMatch(location : Location) : String;

  function registerBuddyUser(buddyId : String, registrarPassword : String) : String;

  function registerBuddyUserid(seq : haxe.Int32, userid : String) : Void;

  function registerDevice(sessionId : String) : String;

  function registerDeviceWithIdentityCredential(sessionId : String, provider : Int, identifier : String, verifier : String) : String;

  function registerDeviceWithoutPhoneNumber(region : String, udidHash : String, deviceInfo : DeviceInfo) : String;

  function registerDeviceWithoutPhoneNumberWithIdentityCredential(region : String, udidHash : String, deviceInfo : DeviceInfo, provider : Int, identifier : String, verifier : String, mid : String, migrationPincodeSessionId : String) : String;

  function registerUserid(reqSeq : haxe.Int32, userid : String) : Bool;

  function registerWapDevice(invitationHash : String, guidHash : String, email : String, deviceInfo : DeviceInfo) : String;

  function registerWithExistingSnsIdAndIdentityCredential(identityCredential : IdentityCredential, region : String, udidHash : String, deviceInfo : DeviceInfo) : String;

  function registerWithSnsId(snsIdType : Int, snsAccessToken : String, region : String, udidHash : String, deviceInfo : DeviceInfo, mid : String) : RegisterWithSnsIdResult;

  function registerWithSnsIdAndIdentityCredential(snsIdType : Int, snsAccessToken : String, identityCredential : IdentityCredential, region : String, udidHash : String, deviceInfo : DeviceInfo) : String;

  function reissueDeviceCredential() : String;

  function reissueUserTicket(expirationTime : haxe.Int64, maxUseCount : haxe.Int32) : String;

  function getMessageReadRange(chatIds : List< String>) : List< TMessageReadRange>;

  function rejectGroupInvitation(reqSeq : haxe.Int32, groupId : String) : Void;

  function releaseSession() : Void;

  function removeAllMessages(seq : haxe.Int32, lastMessageId : String) : Void;

  function removeBuddyLocation(mid : String, index : haxe.Int32) : Void;

  function removeMessage(messageId : String) : Bool;

  function makeUserAddMyselfAsContact(contactOwnerMid : String) : ContactTransition;

  function removeMessageFromMyHome(messageId : String) : Bool;

  function removeSnsId(snsIdType : Int) : String;

  function report(syncOpRevision : haxe.Int64, category : Int, report : String) : Void;

  function reportContacts(syncOpRevision : haxe.Int64, category : Int, contactReports : List< ContactReport>, actionType : Int) : List< ContactReportResult>;

  function reportGroups(syncOpRevision : haxe.Int64, groups : List< Group>) : Void;

  function reportProfile(syncOpRevision : haxe.Int64, profile : Profile) : Void;

  function reportRooms(syncOpRevision : haxe.Int64, rooms : List< Room>) : Void;

  function findAndAddContactByMetaTag(reqSeq : haxe.Int32, userid : String, reference : String) : Contact;

  function reportSettings(syncOpRevision : haxe.Int64, settings : Settings) : Void;

  function reportSpam(chatMid : String, memberMids : List< String>, spammerReasons : List< Int>, senderMids : List< String>, spamMessageIds : List< String>, spamMessages : List< String>) : Void;

  function reportSpammer(spammerMid : String, spammerReasons : List< Int>, spamMessageIds : List< String>) : Void;

  function requestAccountPasswordReset(provider : Int, identifier : String, locale : String) : Void;

  function requestEmailConfirmation(emailConfirmation : EmailConfirmation) : EmailConfirmationSession;

  function requestIdentityUnbind(provider : Int, identifier : String) : Void;

  function resendEmailConfirmation(verifier : String) : EmailConfirmationSession;

  function resendPinCode(sessionId : String) : Void;

  function resendPinCodeBySMS(sessionId : String) : Void;

  function sendChatChecked(seq : haxe.Int32, consumer : String, lastMessageId : String) : Void;

  function sendMessageAwaitCommit(seq : haxe.Int32, message : Message) : CommitMessageResult;

  function sendChatRemoved(seq : haxe.Int32, consumer : String, lastMessageId : String) : Void;

  function sendContentPreviewUpdated(esq : haxe.Int32, messageId : String, receiverMids : List< String>) : StringMap< String>;

  function sendContentReceipt(seq : haxe.Int32, consumer : String, messageId : String) : Void;

  function sendDummyPush() : Void;

  function removeE2EEPublicKey(publicKey : E2EEPublicKey) : Void;

  function negotiateE2EEPublicKey(mid : String) : E2EENegotiationResult;

  function getE2EEPublicKey(mid : String, version : haxe.Int32, keyId : haxe.Int32) : E2EEPublicKey;

  function requestE2EEKeyExchange(reqSeq : haxe.Int32, temporalPublicKey : haxe.io.Bytes, publicKey : E2EEPublicKey, verifier : haxe.io.Bytes) : Void;

  function getLastE2EEPublicKeys(chatMid : String) : StringMap< E2EEPublicKey>;

  function registerE2EEPublicKey(reqSeq : haxe.Int32, publicKey : E2EEPublicKey) : E2EEPublicKey;

  function getE2EEPublicKeys() : List< E2EEPublicKey>;

  function getE2EEPublicKeysEx(ignoreE2EEStatus : Bool) : List< E2EEPublicKey>;

  function getReadMessageOpsInBulk(chatIds : List< String>) : List< Operation>;

  function sendEvent(seq : haxe.Int32, message : Message) : Message;

  function sendMessage(seq : haxe.Int32, message : Message) : Message;

  function sendMessageIgnored(seq : haxe.Int32, consumer : String, messageIds : List< String>) : Void;

  function sendMessageReceipt(seq : haxe.Int32, consumer : String, messageIds : List< String>) : Void;

  function findContactByMetaTag(userid : String, reference : String) : Contact;

  function sendMessageToMyHome(seq : haxe.Int32, message : Message) : Message;

  function setBuddyLocation(mid : String, index : haxe.Int32, location : Geolocation) : Void;

  function setIdentityCredential(identifier : String, verifier : String, provider : Int) : Void;

  function setNotificationsEnabled(reqSeq : haxe.Int32, type : Int, target : String, enablement : Bool) : Void;

  function startUpdateVerification(region : String, carrier : Int, phone : String, udidHash : String, deviceInfo : DeviceInfo, networkCode : String, locale : String) : VerificationSessionData;

  function startVerification(region : String, carrier : Int, phone : String, udidHash : String, deviceInfo : DeviceInfo, networkCode : String, mid : String, locale : String, simInfo : SIMInfo, oldUdidHash : String) : VerificationSessionData;

  function updateGroupPreferenceAttribute(reqSeq : haxe.Int32, groupMid : String, updatedAttrs : IntMap< String>) : Void;

  function createRoomV2(reqSeq : haxe.Int32, contactIds : List< String>) : Room;

  function storeUpdateProfileAttribute(seq : haxe.Int32, profileAttribute : Int, value : String) : Void;

  function syncContactBySnsIds(reqSeq : haxe.Int32, modifications : List< SnsFriendModification>) : List< SnsFriendContactRegistration>;

  function syncContacts(reqSeq : haxe.Int32, localContacts : List< ContactModification>) : StringMap< ContactRegistration>;

  function trySendMessage(seq : haxe.Int32, message : Message) : Message;

  function getNextMessagesV2(messageBoxId : String, startMessageId : MessageBoxV2MessageId, messagesCount : haxe.Int32) : List< Message>;

  function getMessageBoxCompactWrapUpV2(messageBoxId : String) : TMessageBoxWrapUp;

  function getRecentMessagesV2(messageBoxId : String, messagesCount : haxe.Int32) : List< Message>;

  function validateContactsOnBot(contacts : List< String>) : StringMap< String>;

  function tryFriendRequest(midOrEMid : String, method : Int, friendRequestParams : String) : Void;

  function unblockContact(reqSeq : haxe.Int32, id : String) : Void;

  function unblockRecommendation(reqSeq : haxe.Int32, id : String) : Void;

  function unregisterUserAndDevice() : String;

  function updateApnsDeviceToken(apnsDeviceToken : haxe.io.Bytes) : Void;

  function updateBuddySetting(key : String, value : String) : Void;

  function updateC2DMRegistrationId(registrationId : String) : Void;

  function updateContactSetting(reqSeq : haxe.Int32, mid : String, flag : Int, value : String) : Void;

  function updateCustomModeSettings(customMode : Int, paramMap : StringMap< String>) : Void;

  function updateDeviceInfo(deviceUid : String, deviceInfo : DeviceInfo) : Void;

  function updateGroup(reqSeq : haxe.Int32, group : Group) : Void;

  function updateNotificationToken(type : Int, token : String) : Void;

  function updateNotificationTokenWithBytes(type : Int, token : haxe.io.Bytes) : Void;

  function updateProfile(reqSeq : haxe.Int32, profile : Profile) : Void;

  function updateProfileAttribute(reqSeq : haxe.Int32, attr : Int, value : String) : Void;

  function updateRegion(region : String) : Void;

  function updateSettings(reqSeq : haxe.Int32, settings : Settings) : Void;

  function updateSettings2(reqSeq : haxe.Int32, settings : Settings) : haxe.Int32;

  function updateSettingsAttribute(reqSeq : haxe.Int32, attr : Int, value : String) : Void;

  function updateSettingsAttributes(reqSeq : haxe.Int32, attrBitset : haxe.Int32, settings : Settings) : haxe.Int32;

  function verifyIdentityCredential(identityProvider : Int, identifier : String, password : String) : Void;

  function verifyIdentityCredentialWithResult(identityCredential : IdentityCredential) : UserAuthStatus;

  function verifyPhone(sessionId : String, pinCode : String, udidHash : String) : Int;

  function verifyQrcode(verifier : String, pinCode : String) : String;

}

