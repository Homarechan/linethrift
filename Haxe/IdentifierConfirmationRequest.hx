/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class IdentifierConfirmationRequest implements TBase {
  
  static var STRUCT_DESC = { new TStruct("IdentifierConfirmationRequest"); };
  static var META_DATA_FIELD_DESC = { new TField("metaData", TType.MAP, 1); };
  static var FORCE_REGISTRATION_FIELD_DESC = { new TField("forceRegistration", TType.BOOL, 2); };
  static var VERIFICATION_CODE_FIELD_DESC = { new TField("verificationCode", TType.STRING, 3); };

  @:isVar
  public var metaData(get,set) : StringMap< String>;
  @:isVar
  public var forceRegistration(get,set) : Bool;
  @:isVar
  public var verificationCode(get,set) : String;

  inline static var METADATA_FIELD_ID : Int = 1;
  inline static var FORCEREGISTRATION_FIELD_ID : Int = 2;
  inline static var VERIFICATIONCODE_FIELD_ID : Int = 3;

  private var __isset_forceRegistration : Bool = false;

  public function new() {
  }

  public function get_metaData() : StringMap< String> {
    return this.metaData;
  }

  public function set_metaData(metaData:StringMap< String>) : StringMap< String> {
    this.metaData = metaData;
    return this.metaData;
  }

  public function unsetMetaData() : Void {
    this.metaData = null;
  }

  // Returns true if field metaData is set (has been assigned a value) and false otherwise
  public function isSetMetaData() : Bool {
    return this.metaData != null;
  }

  public function get_forceRegistration() : Bool {
    return this.forceRegistration;
  }

  public function set_forceRegistration(forceRegistration:Bool) : Bool {
    this.forceRegistration = forceRegistration;
    this.__isset_forceRegistration = true;
    return this.forceRegistration;
  }

  public function unsetForceRegistration() : Void {
    this.__isset_forceRegistration = false;
  }

  // Returns true if field forceRegistration is set (has been assigned a value) and false otherwise
  public function isSetForceRegistration() : Bool {
    return this.__isset_forceRegistration;
  }

  public function get_verificationCode() : String {
    return this.verificationCode;
  }

  public function set_verificationCode(verificationCode:String) : String {
    this.verificationCode = verificationCode;
    return this.verificationCode;
  }

  public function unsetVerificationCode() : Void {
    this.verificationCode = null;
  }

  // Returns true if field verificationCode is set (has been assigned a value) and false otherwise
  public function isSetVerificationCode() : Bool {
    return this.verificationCode != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case METADATA_FIELD_ID:
      if (value == null) {
        unsetMetaData();
      } else {
        this.metaData = value;
      }

    case FORCEREGISTRATION_FIELD_ID:
      if (value == null) {
        unsetForceRegistration();
      } else {
        this.forceRegistration = value;
      }

    case VERIFICATIONCODE_FIELD_ID:
      if (value == null) {
        unsetVerificationCode();
      } else {
        this.verificationCode = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case METADATA_FIELD_ID:
      return this.metaData;
    case FORCEREGISTRATION_FIELD_ID:
      return this.forceRegistration;
    case VERIFICATIONCODE_FIELD_ID:
      return this.verificationCode;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case METADATA_FIELD_ID:
      return isSetMetaData();
    case FORCEREGISTRATION_FIELD_ID:
      return isSetForceRegistration();
    case VERIFICATIONCODE_FIELD_ID:
      return isSetVerificationCode();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case METADATA_FIELD_ID:
            if (field.type == TType.MAP) {
              {
                var _map29 = iprot.readMapBegin();
                this.metaData = new StringMap< String>();
                for( _i30 in 0 ... _map29.size)
                {
                  var _key31 : String;
                  var _val32 : String;
                  _key31 = iprot.readString();
                  _val32 = iprot.readString();
                  this.metaData.set( _key31, _val32);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case FORCEREGISTRATION_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.forceRegistration = iprot.readBool();
              this.__isset_forceRegistration = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case VERIFICATIONCODE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.verificationCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.metaData != null) {
        oprot.writeFieldBegin(META_DATA_FIELD_DESC);
        {
          var _sizeCounter34 : Int = 0;
          for( _key33 in this.metaData) {
            _sizeCounter34++;
          }
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _sizeCounter34));
          for( elem35 in this.metaData.keys())
          {
            oprot.writeString(elem35);
            oprot.writeString(this.metaData.get(elem35));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FORCE_REGISTRATION_FIELD_DESC);
      oprot.writeBool(this.forceRegistration);
      oprot.writeFieldEnd();
      if (this.verificationCode != null) {
        oprot.writeFieldBegin(VERIFICATION_CODE_FIELD_DESC);
        oprot.writeString(this.verificationCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "IdentifierConfirmationRequest(";
    var first : Bool = true;

    ret += "metaData:";
    if (this.metaData == null) {
      ret += "null";
    } else {
      ret += this.metaData;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "forceRegistration:";
    ret += this.forceRegistration;
    first = false;
    if (!first) ret +=  ", ";
    ret += "verificationCode:";
    if (this.verificationCode == null) {
      ret += "null";
    } else {
      ret += this.verificationCode;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

