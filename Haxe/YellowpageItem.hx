/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class YellowpageItem implements TBase {
  
  static var STRUCT_DESC = { new TStruct("YellowpageItem"); };
  static var ID_FIELD_DESC = { new TField("id", TType.STRING, 1); };
  static var MID_FIELD_DESC = { new TField("mid", TType.STRING, 2); };
  static var NAME_FIELD_DESC = { new TField("name", TType.STRING, 3); };
  static var ADDRESS_FIELD_DESC = { new TField("address", TType.STRING, 4); };
  static var LATITUDE_FIELD_DESC = { new TField("latitude", TType.DOUBLE, 5); };
  static var LONGITUDE_FIELD_DESC = { new TField("longitude", TType.DOUBLE, 6); };
  static var DISTANCE_FIELD_DESC = { new TField("distance", TType.DOUBLE, 7); };
  static var CAN_FREE_CALL_FIELD_DESC = { new TField("canFreeCall", TType.BOOL, 8); };
  static var K_FIELD_DESC = { new TField("k", TType.I32, 9); };
  static var PHONE_NUMBER_FIELD_DESC = { new TField("phoneNumber", TType.STRING, 10); };
  static var CAT_FIELD_DESC = { new TField("cat", TType.I32, 11); };
  static var CATEGORY_ICON_FIELD_DESC = { new TField("categoryIcon", TType.I32, 12); };
  static var ADDITIONAL_INFO_FIELD_DESC = { new TField("additionalInfo", TType.LIST, 13); };

  @:isVar
  public var id(get,set) : String;
  @:isVar
  public var mid(get,set) : String;
  @:isVar
  public var name(get,set) : String;
  @:isVar
  public var address(get,set) : String;
  @:isVar
  public var latitude(get,set) : Float;
  @:isVar
  public var longitude(get,set) : Float;
  @:isVar
  public var distance(get,set) : Float;
  @:isVar
  public var canFreeCall(get,set) : Bool;
  @:isVar
  public var k(get,set) : haxe.Int32;
  @:isVar
  public var phoneNumber(get,set) : String;
  @:isVar
  public var cat(get,set) : haxe.Int32;
  @:isVar
  public var categoryIcon(get,set) : haxe.Int32;
  @:isVar
  public var additionalInfo(get,set) : List< AdditionalInfoItem>;

  inline static var ID_FIELD_ID : Int = 1;
  inline static var MID_FIELD_ID : Int = 2;
  inline static var NAME_FIELD_ID : Int = 3;
  inline static var ADDRESS_FIELD_ID : Int = 4;
  inline static var LATITUDE_FIELD_ID : Int = 5;
  inline static var LONGITUDE_FIELD_ID : Int = 6;
  inline static var DISTANCE_FIELD_ID : Int = 7;
  inline static var CANFREECALL_FIELD_ID : Int = 8;
  inline static var K_FIELD_ID : Int = 9;
  inline static var PHONENUMBER_FIELD_ID : Int = 10;
  inline static var CAT_FIELD_ID : Int = 11;
  inline static var CATEGORYICON_FIELD_ID : Int = 12;
  inline static var ADDITIONALINFO_FIELD_ID : Int = 13;

  private var __isset_latitude : Bool = false;
  private var __isset_longitude : Bool = false;
  private var __isset_distance : Bool = false;
  private var __isset_canFreeCall : Bool = false;
  private var __isset_k : Bool = false;
  private var __isset_cat : Bool = false;
  private var __isset_categoryIcon : Bool = false;

  public function new() {
  }

  public function get_id() : String {
    return this.id;
  }

  public function set_id(id:String) : String {
    this.id = id;
    return this.id;
  }

  public function unsetId() : Void {
    this.id = null;
  }

  // Returns true if field id is set (has been assigned a value) and false otherwise
  public function isSetId() : Bool {
    return this.id != null;
  }

  public function get_mid() : String {
    return this.mid;
  }

  public function set_mid(mid:String) : String {
    this.mid = mid;
    return this.mid;
  }

  public function unsetMid() : Void {
    this.mid = null;
  }

  // Returns true if field mid is set (has been assigned a value) and false otherwise
  public function isSetMid() : Bool {
    return this.mid != null;
  }

  public function get_name() : String {
    return this.name;
  }

  public function set_name(name:String) : String {
    this.name = name;
    return this.name;
  }

  public function unsetName() : Void {
    this.name = null;
  }

  // Returns true if field name is set (has been assigned a value) and false otherwise
  public function isSetName() : Bool {
    return this.name != null;
  }

  public function get_address() : String {
    return this.address;
  }

  public function set_address(address:String) : String {
    this.address = address;
    return this.address;
  }

  public function unsetAddress() : Void {
    this.address = null;
  }

  // Returns true if field address is set (has been assigned a value) and false otherwise
  public function isSetAddress() : Bool {
    return this.address != null;
  }

  public function get_latitude() : Float {
    return this.latitude;
  }

  public function set_latitude(latitude:Float) : Float {
    this.latitude = latitude;
    this.__isset_latitude = true;
    return this.latitude;
  }

  public function unsetLatitude() : Void {
    this.__isset_latitude = false;
  }

  // Returns true if field latitude is set (has been assigned a value) and false otherwise
  public function isSetLatitude() : Bool {
    return this.__isset_latitude;
  }

  public function get_longitude() : Float {
    return this.longitude;
  }

  public function set_longitude(longitude:Float) : Float {
    this.longitude = longitude;
    this.__isset_longitude = true;
    return this.longitude;
  }

  public function unsetLongitude() : Void {
    this.__isset_longitude = false;
  }

  // Returns true if field longitude is set (has been assigned a value) and false otherwise
  public function isSetLongitude() : Bool {
    return this.__isset_longitude;
  }

  public function get_distance() : Float {
    return this.distance;
  }

  public function set_distance(distance:Float) : Float {
    this.distance = distance;
    this.__isset_distance = true;
    return this.distance;
  }

  public function unsetDistance() : Void {
    this.__isset_distance = false;
  }

  // Returns true if field distance is set (has been assigned a value) and false otherwise
  public function isSetDistance() : Bool {
    return this.__isset_distance;
  }

  public function get_canFreeCall() : Bool {
    return this.canFreeCall;
  }

  public function set_canFreeCall(canFreeCall:Bool) : Bool {
    this.canFreeCall = canFreeCall;
    this.__isset_canFreeCall = true;
    return this.canFreeCall;
  }

  public function unsetCanFreeCall() : Void {
    this.__isset_canFreeCall = false;
  }

  // Returns true if field canFreeCall is set (has been assigned a value) and false otherwise
  public function isSetCanFreeCall() : Bool {
    return this.__isset_canFreeCall;
  }

  public function get_k() : haxe.Int32 {
    return this.k;
  }

  public function set_k(k:haxe.Int32) : haxe.Int32 {
    this.k = k;
    this.__isset_k = true;
    return this.k;
  }

  public function unsetK() : Void {
    this.__isset_k = false;
  }

  // Returns true if field k is set (has been assigned a value) and false otherwise
  public function isSetK() : Bool {
    return this.__isset_k;
  }

  public function get_phoneNumber() : String {
    return this.phoneNumber;
  }

  public function set_phoneNumber(phoneNumber:String) : String {
    this.phoneNumber = phoneNumber;
    return this.phoneNumber;
  }

  public function unsetPhoneNumber() : Void {
    this.phoneNumber = null;
  }

  // Returns true if field phoneNumber is set (has been assigned a value) and false otherwise
  public function isSetPhoneNumber() : Bool {
    return this.phoneNumber != null;
  }

  public function get_cat() : haxe.Int32 {
    return this.cat;
  }

  public function set_cat(cat:haxe.Int32) : haxe.Int32 {
    this.cat = cat;
    this.__isset_cat = true;
    return this.cat;
  }

  public function unsetCat() : Void {
    this.__isset_cat = false;
  }

  // Returns true if field cat is set (has been assigned a value) and false otherwise
  public function isSetCat() : Bool {
    return this.__isset_cat;
  }

  public function get_categoryIcon() : haxe.Int32 {
    return this.categoryIcon;
  }

  public function set_categoryIcon(categoryIcon:haxe.Int32) : haxe.Int32 {
    this.categoryIcon = categoryIcon;
    this.__isset_categoryIcon = true;
    return this.categoryIcon;
  }

  public function unsetCategoryIcon() : Void {
    this.__isset_categoryIcon = false;
  }

  // Returns true if field categoryIcon is set (has been assigned a value) and false otherwise
  public function isSetCategoryIcon() : Bool {
    return this.__isset_categoryIcon;
  }

  public function get_additionalInfo() : List< AdditionalInfoItem> {
    return this.additionalInfo;
  }

  public function set_additionalInfo(additionalInfo:List< AdditionalInfoItem>) : List< AdditionalInfoItem> {
    this.additionalInfo = additionalInfo;
    return this.additionalInfo;
  }

  public function unsetAdditionalInfo() : Void {
    this.additionalInfo = null;
  }

  // Returns true if field additionalInfo is set (has been assigned a value) and false otherwise
  public function isSetAdditionalInfo() : Bool {
    return this.additionalInfo != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case ID_FIELD_ID:
      if (value == null) {
        unsetId();
      } else {
        this.id = value;
      }

    case MID_FIELD_ID:
      if (value == null) {
        unsetMid();
      } else {
        this.mid = value;
      }

    case NAME_FIELD_ID:
      if (value == null) {
        unsetName();
      } else {
        this.name = value;
      }

    case ADDRESS_FIELD_ID:
      if (value == null) {
        unsetAddress();
      } else {
        this.address = value;
      }

    case LATITUDE_FIELD_ID:
      if (value == null) {
        unsetLatitude();
      } else {
        this.latitude = value;
      }

    case LONGITUDE_FIELD_ID:
      if (value == null) {
        unsetLongitude();
      } else {
        this.longitude = value;
      }

    case DISTANCE_FIELD_ID:
      if (value == null) {
        unsetDistance();
      } else {
        this.distance = value;
      }

    case CANFREECALL_FIELD_ID:
      if (value == null) {
        unsetCanFreeCall();
      } else {
        this.canFreeCall = value;
      }

    case K_FIELD_ID:
      if (value == null) {
        unsetK();
      } else {
        this.k = value;
      }

    case PHONENUMBER_FIELD_ID:
      if (value == null) {
        unsetPhoneNumber();
      } else {
        this.phoneNumber = value;
      }

    case CAT_FIELD_ID:
      if (value == null) {
        unsetCat();
      } else {
        this.cat = value;
      }

    case CATEGORYICON_FIELD_ID:
      if (value == null) {
        unsetCategoryIcon();
      } else {
        this.categoryIcon = value;
      }

    case ADDITIONALINFO_FIELD_ID:
      if (value == null) {
        unsetAdditionalInfo();
      } else {
        this.additionalInfo = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case ID_FIELD_ID:
      return this.id;
    case MID_FIELD_ID:
      return this.mid;
    case NAME_FIELD_ID:
      return this.name;
    case ADDRESS_FIELD_ID:
      return this.address;
    case LATITUDE_FIELD_ID:
      return this.latitude;
    case LONGITUDE_FIELD_ID:
      return this.longitude;
    case DISTANCE_FIELD_ID:
      return this.distance;
    case CANFREECALL_FIELD_ID:
      return this.canFreeCall;
    case K_FIELD_ID:
      return this.k;
    case PHONENUMBER_FIELD_ID:
      return this.phoneNumber;
    case CAT_FIELD_ID:
      return this.cat;
    case CATEGORYICON_FIELD_ID:
      return this.categoryIcon;
    case ADDITIONALINFO_FIELD_ID:
      return this.additionalInfo;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case ID_FIELD_ID:
      return isSetId();
    case MID_FIELD_ID:
      return isSetMid();
    case NAME_FIELD_ID:
      return isSetName();
    case ADDRESS_FIELD_ID:
      return isSetAddress();
    case LATITUDE_FIELD_ID:
      return isSetLatitude();
    case LONGITUDE_FIELD_ID:
      return isSetLongitude();
    case DISTANCE_FIELD_ID:
      return isSetDistance();
    case CANFREECALL_FIELD_ID:
      return isSetCanFreeCall();
    case K_FIELD_ID:
      return isSetK();
    case PHONENUMBER_FIELD_ID:
      return isSetPhoneNumber();
    case CAT_FIELD_ID:
      return isSetCat();
    case CATEGORYICON_FIELD_ID:
      return isSetCategoryIcon();
    case ADDITIONALINFO_FIELD_ID:
      return isSetAdditionalInfo();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.id = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ADDRESS_FIELD_ID:
            if (field.type == TType.STRING) {
              this.address = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case LATITUDE_FIELD_ID:
            if (field.type == TType.DOUBLE) {
              this.latitude = iprot.readDouble();
              this.__isset_latitude = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case LONGITUDE_FIELD_ID:
            if (field.type == TType.DOUBLE) {
              this.longitude = iprot.readDouble();
              this.__isset_longitude = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DISTANCE_FIELD_ID:
            if (field.type == TType.DOUBLE) {
              this.distance = iprot.readDouble();
              this.__isset_distance = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CANFREECALL_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.canFreeCall = iprot.readBool();
              this.__isset_canFreeCall = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case K_FIELD_ID:
            if (field.type == TType.I32) {
              this.k = iprot.readI32();
              this.__isset_k = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PHONENUMBER_FIELD_ID:
            if (field.type == TType.STRING) {
              this.phoneNumber = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CAT_FIELD_ID:
            if (field.type == TType.I32) {
              this.cat = iprot.readI32();
              this.__isset_cat = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CATEGORYICON_FIELD_ID:
            if (field.type == TType.I32) {
              this.categoryIcon = iprot.readI32();
              this.__isset_categoryIcon = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ADDITIONALINFO_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list58 = iprot.readListBegin();
                this.additionalInfo = new List< AdditionalInfoItem>();
                for( _i59 in 0 ... _list58.size)
                {
                  var _elem60 : AdditionalInfoItem;
                  _elem60 = new AdditionalInfoItem();
                  _elem60.read(iprot);
                  this.additionalInfo.add(_elem60);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(this.address);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
      oprot.writeDouble(this.latitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
      oprot.writeDouble(this.longitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISTANCE_FIELD_DESC);
      oprot.writeDouble(this.distance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAN_FREE_CALL_FIELD_DESC);
      oprot.writeBool(this.canFreeCall);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(K_FIELD_DESC);
      oprot.writeI32(this.k);
      oprot.writeFieldEnd();
      if (this.phoneNumber != null) {
        oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(this.phoneNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CAT_FIELD_DESC);
      oprot.writeI32(this.cat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CATEGORY_ICON_FIELD_DESC);
      oprot.writeI32(this.categoryIcon);
      oprot.writeFieldEnd();
      if (this.additionalInfo != null) {
        oprot.writeFieldBegin(ADDITIONAL_INFO_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.additionalInfo.length));
          for( elem61 in this.additionalInfo)
          {
            elem61.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "YellowpageItem(";
    var first : Bool = true;

    ret += "id:";
    if (this.id == null) {
      ret += "null";
    } else {
      ret += this.id;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "mid:";
    if (this.mid == null) {
      ret += "null";
    } else {
      ret += this.mid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "name:";
    if (this.name == null) {
      ret += "null";
    } else {
      ret += this.name;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "address:";
    if (this.address == null) {
      ret += "null";
    } else {
      ret += this.address;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "latitude:";
    ret += this.latitude;
    first = false;
    if (!first) ret +=  ", ";
    ret += "longitude:";
    ret += this.longitude;
    first = false;
    if (!first) ret +=  ", ";
    ret += "distance:";
    ret += this.distance;
    first = false;
    if (!first) ret +=  ", ";
    ret += "canFreeCall:";
    ret += this.canFreeCall;
    first = false;
    if (!first) ret +=  ", ";
    ret += "k:";
    ret += this.k;
    first = false;
    if (!first) ret +=  ", ";
    ret += "phoneNumber:";
    if (this.phoneNumber == null) {
      ret += "null";
    } else {
      ret += this.phoneNumber;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "cat:";
    ret += this.cat;
    first = false;
    if (!first) ret +=  ", ";
    ret += "categoryIcon:";
    ret += this.categoryIcon;
    first = false;
    if (!first) ret +=  ", ";
    ret += "additionalInfo:";
    if (this.additionalInfo == null) {
      ret += "null";
    } else {
      ret += this.additionalInfo;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

