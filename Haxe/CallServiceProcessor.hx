/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class CallServiceProcessor implements TProcessor {

  private var CallService_iface_ : CallService;
  private var PROCESS_MAP = new StringMap< Int->TProtocol->TProtocol->Void >();

  public function new( iface : CallService)
  {
    CallService_iface_ = iface;
    PROCESS_MAP.set("getUserStatus", getUserStatus());
    PROCESS_MAP.set("updateProfileAttributeForChannel", updateProfileAttributeForChannel());
    PROCESS_MAP.set("updateExtendedProfileAttribute", updateExtendedProfileAttribute());
    PROCESS_MAP.set("getAllSimpleChannelContacts", getAllSimpleChannelContacts());
    PROCESS_MAP.set("getUserIdentities", getUserIdentities());
    PROCESS_MAP.set("markPaidCallAd", markPaidCallAd());
    PROCESS_MAP.set("isGroupMember", isGroupMember());
    PROCESS_MAP.set("getPhoneInfoFromPhoneNumber", getPhoneInfoFromPhoneNumber());
    PROCESS_MAP.set("redeemPaidCallVoucher", redeemPaidCallVoucher());
    PROCESS_MAP.set("getPreferredDisplayName", getPreferredDisplayName());
    PROCESS_MAP.set("getContactsForChannel", getContactsForChannel());
    PROCESS_MAP.set("getCallCreditProducts", getCallCreditProducts());
    PROCESS_MAP.set("getCompactContacts", getCompactContacts());
    PROCESS_MAP.set("notifyNotiCenterEvent", notifyNotiCenterEvent());
    PROCESS_MAP.set("isInContact", isInContact());
    PROCESS_MAP.set("lookupGroupMembers", lookupGroupMembers());
    PROCESS_MAP.set("getRoomInformation", getRoomInformation());
    PROCESS_MAP.set("getGroupCall", getGroupCall());
    PROCESS_MAP.set("isAllowSecondaryDeviceLogin", isAllowSecondaryDeviceLogin());
    PROCESS_MAP.set("getPrimaryClientForChannel", getPrimaryClientForChannel());
    PROCESS_MAP.set("createRoomWithBuddy", createRoomWithBuddy());
    PROCESS_MAP.set("getDisplayName", getDisplayName());
    PROCESS_MAP.set("getPaidCallMetadata", getPaidCallMetadata());
    PROCESS_MAP.set("getMid", getMid());
    PROCESS_MAP.set("getUserCountryForBilling", getUserCountryForBilling());
    PROCESS_MAP.set("getFavoriteGroupIdsForChannel", getFavoriteGroupIdsForChannel());
    PROCESS_MAP.set("getPaidCallHistory", getPaidCallHistory());
    PROCESS_MAP.set("sendPinCodeOperation", sendPinCodeOperation());
    PROCESS_MAP.set("inviteIntoGroupCall", inviteIntoGroupCall());
    PROCESS_MAP.set("getFriendMids", getFriendMids());
    PROCESS_MAP.set("getMetaProfile", getMetaProfile());
    PROCESS_MAP.set("sendMessageForChannel", sendMessageForChannel());
    PROCESS_MAP.set("activeBuddySubscriberCount", activeBuddySubscriberCount());
    PROCESS_MAP.set("getCallCreditPurchaseHistory", getCallCreditPurchaseHistory());
    PROCESS_MAP.set("isRoomMember", isRoomMember());
    PROCESS_MAP.set("sendSystemOAMessage", sendSystemOAMessage());
    PROCESS_MAP.set("acquirePaidCallRoute", acquirePaidCallRoute());
    PROCESS_MAP.set("getGroupsForChannel", getGroupsForChannel());
    PROCESS_MAP.set("getUserCreateTime", getUserCreateTime());
    PROCESS_MAP.set("registerChannelCP", registerChannelCP());
    PROCESS_MAP.set("reserveCallCreditPurchase", reserveCallCreditPurchase());
    PROCESS_MAP.set("acquirePaidCallCurrencyExchangeRate", acquirePaidCallCurrencyExchangeRate());
    PROCESS_MAP.set("getRoomMemberMidsForAppPlatform", getRoomMemberMidsForAppPlatform());
    PROCESS_MAP.set("getPaidCallBalanceList", getPaidCallBalanceList());
    PROCESS_MAP.set("getPersonalInfos", getPersonalInfos());
    PROCESS_MAP.set("getPrimaryClientsForChannel", getPrimaryClientsForChannel());
    PROCESS_MAP.set("addBuddyToContact", addBuddyToContact());
    PROCESS_MAP.set("getGroupMemberMidsForAppPlatform", getGroupMemberMidsForAppPlatform());
    PROCESS_MAP.set("getUserLanguage", getUserLanguage());
    PROCESS_MAP.set("lookupPaidCall", lookupPaidCall());
    PROCESS_MAP.set("getExtendedProfile", getExtendedProfile());
    PROCESS_MAP.set("getReverseCompactContacts", getReverseCompactContacts());
    PROCESS_MAP.set("getPaidCallAdStatus", getPaidCallAdStatus());
    PROCESS_MAP.set("findContactByUseridWithoutAbuseBlockForChannel", findContactByUseridWithoutAbuseBlockForChannel());
    PROCESS_MAP.set("getGroupMemberMids", getGroupMemberMids());
    PROCESS_MAP.set("sendMessageWithoutRelationship", sendMessageWithoutRelationship());
    PROCESS_MAP.set("displayBuddySubscriberCountInBulk", displayBuddySubscriberCountInBulk());
    PROCESS_MAP.set("lookupRoomMembers", lookupRoomMembers());
    PROCESS_MAP.set("getFavoriteMidsForChannel", getFavoriteMidsForChannel());
    PROCESS_MAP.set("getAllContactIdsForChannel", getAllContactIdsForChannel());
    PROCESS_MAP.set("displayBuddySubscriberCount", displayBuddySubscriberCount());
    PROCESS_MAP.set("getProfileForChannel", getProfileForChannel());
    PROCESS_MAP.set("getUserTickets", getUserTickets());
    PROCESS_MAP.set("getOAFriendMids", getOAFriendMids());
    PROCESS_MAP.set("searchPaidCallUserRate", searchPaidCallUserRate());
    PROCESS_MAP.set("getJoinedGroupIdsForChannel", getJoinedGroupIdsForChannel());
    PROCESS_MAP.set("acquireGroupCallRoute", acquireGroupCallRoute());
    PROCESS_MAP.set("getUserMidsWhoAddedMe", getUserMidsWhoAddedMe());
    PROCESS_MAP.set("getIdentityCredential", getIdentityCredential());
    PROCESS_MAP.set("addOperationForChannel", addOperationForChannel());
    PROCESS_MAP.set("getSimpleChannelContacts", getSimpleChannelContacts());
    PROCESS_MAP.set("getUserLastSentMessageTimeStamp", getUserLastSentMessageTimeStamp());
  }

  public function process( iprot : TProtocol, oprot : TProtocol) : Bool
  {
    var msg : TMessage = iprot.readMessageBegin();
    var fn  = PROCESS_MAP.get(msg.name);
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      var x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
      return true;
    }
    fn( msg.seqid, iprot, oprot);
    return true;
  }

  private function getUserStatus() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetUserStatus_args = new GetUserStatus_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetUserStatus_result = new GetUserStatus_result();
      try {
        result.success = CallService_iface_.getUserStatus(args.mid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getUserStatus", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserStatus");
        oprot.writeMessageBegin(new TMessage("getUserStatus", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getUserStatus", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateProfileAttributeForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateProfileAttributeForChannel_args = new UpdateProfileAttributeForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateProfileAttributeForChannel_result = new UpdateProfileAttributeForChannel_result();
      try {
        CallService_iface_.updateProfileAttributeForChannel(args.profileAttribute, args.value);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateProfileAttributeForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateProfileAttributeForChannel");
        oprot.writeMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateExtendedProfileAttribute() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateExtendedProfileAttribute_args = new UpdateExtendedProfileAttribute_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateExtendedProfileAttribute_result = new UpdateExtendedProfileAttribute_result();
      try {
        CallService_iface_.updateExtendedProfileAttribute(args.attr, args.extendedProfile);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateExtendedProfileAttribute", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateExtendedProfileAttribute");
        oprot.writeMessageBegin(new TMessage("updateExtendedProfileAttribute", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateExtendedProfileAttribute", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getAllSimpleChannelContacts() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetAllSimpleChannelContacts_args = new GetAllSimpleChannelContacts_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetAllSimpleChannelContacts_result = new GetAllSimpleChannelContacts_result();
      try {
        result.success = CallService_iface_.getAllSimpleChannelContacts(args.statusSticonFallbackDisabled);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getAllSimpleChannelContacts", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAllSimpleChannelContacts");
        oprot.writeMessageBegin(new TMessage("getAllSimpleChannelContacts", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getAllSimpleChannelContacts", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getUserIdentities() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetUserIdentities_args = new GetUserIdentities_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetUserIdentities_result = new GetUserIdentities_result();
      try {
        result.success = CallService_iface_.getUserIdentities();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getUserIdentities", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserIdentities");
        oprot.writeMessageBegin(new TMessage("getUserIdentities", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getUserIdentities", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function markPaidCallAd() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : MarkPaidCallAd_args = new MarkPaidCallAd_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : MarkPaidCallAd_result = new MarkPaidCallAd_result();
      try {
        result.success = CallService_iface_.markPaidCallAd(args.dialedNumber, args.language, args.disableCallerId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing markPaidCallAd", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing markPaidCallAd");
        oprot.writeMessageBegin(new TMessage("markPaidCallAd", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("markPaidCallAd", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function isGroupMember() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : IsGroupMember_args = new IsGroupMember_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : IsGroupMember_result = new IsGroupMember_result();
      try {
        result.success = CallService_iface_.isGroupMember(args.groupId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing isGroupMember", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing isGroupMember");
        oprot.writeMessageBegin(new TMessage("isGroupMember", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("isGroupMember", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getPhoneInfoFromPhoneNumber() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetPhoneInfoFromPhoneNumber_args = new GetPhoneInfoFromPhoneNumber_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetPhoneInfoFromPhoneNumber_result = new GetPhoneInfoFromPhoneNumber_result();
      try {
        result.success = CallService_iface_.getPhoneInfoFromPhoneNumber(args.region, args.phoneNumber);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getPhoneInfoFromPhoneNumber", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPhoneInfoFromPhoneNumber");
        oprot.writeMessageBegin(new TMessage("getPhoneInfoFromPhoneNumber", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getPhoneInfoFromPhoneNumber", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function redeemPaidCallVoucher() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RedeemPaidCallVoucher_args = new RedeemPaidCallVoucher_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RedeemPaidCallVoucher_result = new RedeemPaidCallVoucher_result();
      try {
        result.success = CallService_iface_.redeemPaidCallVoucher(args.serial, args.language);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing redeemPaidCallVoucher", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing redeemPaidCallVoucher");
        oprot.writeMessageBegin(new TMessage("redeemPaidCallVoucher", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("redeemPaidCallVoucher", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getPreferredDisplayName() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetPreferredDisplayName_args = new GetPreferredDisplayName_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetPreferredDisplayName_result = new GetPreferredDisplayName_result();
      try {
        result.success = CallService_iface_.getPreferredDisplayName(args.mids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getPreferredDisplayName", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPreferredDisplayName");
        oprot.writeMessageBegin(new TMessage("getPreferredDisplayName", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getPreferredDisplayName", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getContactsForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetContactsForChannel_args = new GetContactsForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetContactsForChannel_result = new GetContactsForChannel_result();
      try {
        result.success = CallService_iface_.getContactsForChannel(args.ids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getContactsForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getContactsForChannel");
        oprot.writeMessageBegin(new TMessage("getContactsForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getContactsForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getCallCreditProducts() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetCallCreditProducts_args = new GetCallCreditProducts_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetCallCreditProducts_result = new GetCallCreditProducts_result();
      try {
        result.success = CallService_iface_.getCallCreditProducts(args.appStoreCode, args.pgCode, args.country, args.language);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getCallCreditProducts", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCallCreditProducts");
        oprot.writeMessageBegin(new TMessage("getCallCreditProducts", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getCallCreditProducts", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getCompactContacts() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetCompactContacts_args = new GetCompactContacts_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetCompactContacts_result = new GetCompactContacts_result();
      try {
        result.success = CallService_iface_.getCompactContacts(args.lastModifiedTimestamp);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getCompactContacts", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCompactContacts");
        oprot.writeMessageBegin(new TMessage("getCompactContacts", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getCompactContacts", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function notifyNotiCenterEvent() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : NotifyNotiCenterEvent_args = new NotifyNotiCenterEvent_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : NotifyNotiCenterEvent_result = new NotifyNotiCenterEvent_result();
      try {
        CallService_iface_.notifyNotiCenterEvent(args.event);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing notifyNotiCenterEvent", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyNotiCenterEvent");
        oprot.writeMessageBegin(new TMessage("notifyNotiCenterEvent", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("notifyNotiCenterEvent", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function isInContact() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : IsInContact_args = new IsInContact_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : IsInContact_result = new IsInContact_result();
      try {
        result.success = CallService_iface_.isInContact(args.mid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing isInContact", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing isInContact");
        oprot.writeMessageBegin(new TMessage("isInContact", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("isInContact", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function lookupGroupMembers() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : LookupGroupMembers_args = new LookupGroupMembers_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : LookupGroupMembers_result = new LookupGroupMembers_result();
      try {
        result.success = CallService_iface_.lookupGroupMembers(args.groupId, args.mids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing lookupGroupMembers", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing lookupGroupMembers");
        oprot.writeMessageBegin(new TMessage("lookupGroupMembers", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("lookupGroupMembers", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getRoomInformation() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetRoomInformation_args = new GetRoomInformation_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetRoomInformation_result = new GetRoomInformation_result();
      try {
        result.success = CallService_iface_.getRoomInformation(args.roomMid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getRoomInformation", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRoomInformation");
        oprot.writeMessageBegin(new TMessage("getRoomInformation", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getRoomInformation", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getGroupCall() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetGroupCall_args = new GetGroupCall_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetGroupCall_result = new GetGroupCall_result();
      try {
        result.success = CallService_iface_.getGroupCall(args.chatMid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getGroupCall", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupCall");
        oprot.writeMessageBegin(new TMessage("getGroupCall", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getGroupCall", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function isAllowSecondaryDeviceLogin() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : IsAllowSecondaryDeviceLogin_args = new IsAllowSecondaryDeviceLogin_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : IsAllowSecondaryDeviceLogin_result = new IsAllowSecondaryDeviceLogin_result();
      try {
        result.success = CallService_iface_.isAllowSecondaryDeviceLogin();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing isAllowSecondaryDeviceLogin", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing isAllowSecondaryDeviceLogin");
        oprot.writeMessageBegin(new TMessage("isAllowSecondaryDeviceLogin", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("isAllowSecondaryDeviceLogin", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getPrimaryClientForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetPrimaryClientForChannel_args = new GetPrimaryClientForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetPrimaryClientForChannel_result = new GetPrimaryClientForChannel_result();
      try {
        result.success = CallService_iface_.getPrimaryClientForChannel();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getPrimaryClientForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPrimaryClientForChannel");
        oprot.writeMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function createRoomWithBuddy() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : CreateRoomWithBuddy_args = new CreateRoomWithBuddy_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : CreateRoomWithBuddy_result = new CreateRoomWithBuddy_result();
      try {
        result.success = CallService_iface_.createRoomWithBuddy(args.reqSeq, args.buddyMid, args.contactIds);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing createRoomWithBuddy", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createRoomWithBuddy");
        oprot.writeMessageBegin(new TMessage("createRoomWithBuddy", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("createRoomWithBuddy", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getDisplayName() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetDisplayName_args = new GetDisplayName_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetDisplayName_result = new GetDisplayName_result();
      try {
        result.success = CallService_iface_.getDisplayName(args.mid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getDisplayName", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getDisplayName");
        oprot.writeMessageBegin(new TMessage("getDisplayName", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getDisplayName", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getPaidCallMetadata() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetPaidCallMetadata_args = new GetPaidCallMetadata_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetPaidCallMetadata_result = new GetPaidCallMetadata_result();
      try {
        result.success = CallService_iface_.getPaidCallMetadata(args.language);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getPaidCallMetadata", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPaidCallMetadata");
        oprot.writeMessageBegin(new TMessage("getPaidCallMetadata", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getPaidCallMetadata", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getMid() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetMid_args = new GetMid_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetMid_result = new GetMid_result();
      try {
        result.success = CallService_iface_.getMid();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getMid", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMid");
        oprot.writeMessageBegin(new TMessage("getMid", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getMid", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getUserCountryForBilling() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetUserCountryForBilling_args = new GetUserCountryForBilling_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetUserCountryForBilling_result = new GetUserCountryForBilling_result();
      try {
        result.success = CallService_iface_.getUserCountryForBilling(args.country, args.remoteIp);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getUserCountryForBilling", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserCountryForBilling");
        oprot.writeMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getFavoriteGroupIdsForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetFavoriteGroupIdsForChannel_args = new GetFavoriteGroupIdsForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetFavoriteGroupIdsForChannel_result = new GetFavoriteGroupIdsForChannel_result();
      try {
        result.success = CallService_iface_.getFavoriteGroupIdsForChannel();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getFavoriteGroupIdsForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getFavoriteGroupIdsForChannel");
        oprot.writeMessageBegin(new TMessage("getFavoriteGroupIdsForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getFavoriteGroupIdsForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getPaidCallHistory() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetPaidCallHistory_args = new GetPaidCallHistory_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetPaidCallHistory_result = new GetPaidCallHistory_result();
      try {
        result.success = CallService_iface_.getPaidCallHistory(args.start, args.size, args.language);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getPaidCallHistory", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPaidCallHistory");
        oprot.writeMessageBegin(new TMessage("getPaidCallHistory", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getPaidCallHistory", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function sendPinCodeOperation() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SendPinCodeOperation_args = new SendPinCodeOperation_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SendPinCodeOperation_result = new SendPinCodeOperation_result();
      try {
        CallService_iface_.sendPinCodeOperation(args.verifier);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing sendPinCodeOperation", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendPinCodeOperation");
        oprot.writeMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function inviteIntoGroupCall() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : InviteIntoGroupCall_args = new InviteIntoGroupCall_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : InviteIntoGroupCall_result = new InviteIntoGroupCall_result();
      try {
        CallService_iface_.inviteIntoGroupCall(args.chatMid, args.memberMids, args.mediaType);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing inviteIntoGroupCall", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing inviteIntoGroupCall");
        oprot.writeMessageBegin(new TMessage("inviteIntoGroupCall", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("inviteIntoGroupCall", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getFriendMids() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetFriendMids_args = new GetFriendMids_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetFriendMids_result = new GetFriendMids_result();
      try {
        result.success = CallService_iface_.getFriendMids();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getFriendMids", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getFriendMids");
        oprot.writeMessageBegin(new TMessage("getFriendMids", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getFriendMids", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getMetaProfile() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetMetaProfile_args = new GetMetaProfile_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetMetaProfile_result = new GetMetaProfile_result();
      try {
        result.success = CallService_iface_.getMetaProfile();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getMetaProfile", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMetaProfile");
        oprot.writeMessageBegin(new TMessage("getMetaProfile", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getMetaProfile", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function sendMessageForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SendMessageForChannel_args = new SendMessageForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SendMessageForChannel_result = new SendMessageForChannel_result();
      try {
        result.success = CallService_iface_.sendMessageForChannel(args.message);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing sendMessageForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendMessageForChannel");
        oprot.writeMessageBegin(new TMessage("sendMessageForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("sendMessageForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function activeBuddySubscriberCount() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ActiveBuddySubscriberCount_args = new ActiveBuddySubscriberCount_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ActiveBuddySubscriberCount_result = new ActiveBuddySubscriberCount_result();
      try {
        result.success = CallService_iface_.activeBuddySubscriberCount();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing activeBuddySubscriberCount", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing activeBuddySubscriberCount");
        oprot.writeMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getCallCreditPurchaseHistory() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetCallCreditPurchaseHistory_args = new GetCallCreditPurchaseHistory_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetCallCreditPurchaseHistory_result = new GetCallCreditPurchaseHistory_result();
      try {
        result.success = CallService_iface_.getCallCreditPurchaseHistory(args.request);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getCallCreditPurchaseHistory", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCallCreditPurchaseHistory");
        oprot.writeMessageBegin(new TMessage("getCallCreditPurchaseHistory", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getCallCreditPurchaseHistory", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function isRoomMember() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : IsRoomMember_args = new IsRoomMember_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : IsRoomMember_result = new IsRoomMember_result();
      try {
        result.success = CallService_iface_.isRoomMember(args.roomId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing isRoomMember", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing isRoomMember");
        oprot.writeMessageBegin(new TMessage("isRoomMember", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("isRoomMember", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function sendSystemOAMessage() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SendSystemOAMessage_args = new SendSystemOAMessage_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SendSystemOAMessage_result = new SendSystemOAMessage_result();
      try {
        result.success = CallService_iface_.sendSystemOAMessage(args.message);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing sendSystemOAMessage", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendSystemOAMessage");
        oprot.writeMessageBegin(new TMessage("sendSystemOAMessage", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("sendSystemOAMessage", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function acquirePaidCallRoute() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : AcquirePaidCallRoute_args = new AcquirePaidCallRoute_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : AcquirePaidCallRoute_result = new AcquirePaidCallRoute_result();
      try {
        result.success = CallService_iface_.acquirePaidCallRoute(args.paidCallType, args.dialedNumber, args.language, args.networkCode, args.disableCallerId, args.referer, args.adSessionId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing acquirePaidCallRoute", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acquirePaidCallRoute");
        oprot.writeMessageBegin(new TMessage("acquirePaidCallRoute", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("acquirePaidCallRoute", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getGroupsForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetGroupsForChannel_args = new GetGroupsForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetGroupsForChannel_result = new GetGroupsForChannel_result();
      try {
        result.success = CallService_iface_.getGroupsForChannel(args.groupIds);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getGroupsForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupsForChannel");
        oprot.writeMessageBegin(new TMessage("getGroupsForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getGroupsForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getUserCreateTime() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetUserCreateTime_args = new GetUserCreateTime_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetUserCreateTime_result = new GetUserCreateTime_result();
      try {
        result.success = CallService_iface_.getUserCreateTime();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getUserCreateTime", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserCreateTime");
        oprot.writeMessageBegin(new TMessage("getUserCreateTime", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getUserCreateTime", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function registerChannelCP() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RegisterChannelCP_args = new RegisterChannelCP_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RegisterChannelCP_result = new RegisterChannelCP_result();
      try {
        result.success = CallService_iface_.registerChannelCP(args.cpId, args.registerPassword);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing registerChannelCP", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerChannelCP");
        oprot.writeMessageBegin(new TMessage("registerChannelCP", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("registerChannelCP", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function reserveCallCreditPurchase() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ReserveCallCreditPurchase_args = new ReserveCallCreditPurchase_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ReserveCallCreditPurchase_result = new ReserveCallCreditPurchase_result();
      try {
        result.success = CallService_iface_.reserveCallCreditPurchase(args.request);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing reserveCallCreditPurchase", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reserveCallCreditPurchase");
        oprot.writeMessageBegin(new TMessage("reserveCallCreditPurchase", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("reserveCallCreditPurchase", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function acquirePaidCallCurrencyExchangeRate() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : AcquirePaidCallCurrencyExchangeRate_args = new AcquirePaidCallCurrencyExchangeRate_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : AcquirePaidCallCurrencyExchangeRate_result = new AcquirePaidCallCurrencyExchangeRate_result();
      try {
        result.success = CallService_iface_.acquirePaidCallCurrencyExchangeRate(args.language);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing acquirePaidCallCurrencyExchangeRate", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acquirePaidCallCurrencyExchangeRate");
        oprot.writeMessageBegin(new TMessage("acquirePaidCallCurrencyExchangeRate", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("acquirePaidCallCurrencyExchangeRate", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getRoomMemberMidsForAppPlatform() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetRoomMemberMidsForAppPlatform_args = new GetRoomMemberMidsForAppPlatform_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetRoomMemberMidsForAppPlatform_result = new GetRoomMemberMidsForAppPlatform_result();
      try {
        result.success = CallService_iface_.getRoomMemberMidsForAppPlatform(args.roomId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getRoomMemberMidsForAppPlatform", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRoomMemberMidsForAppPlatform");
        oprot.writeMessageBegin(new TMessage("getRoomMemberMidsForAppPlatform", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getRoomMemberMidsForAppPlatform", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getPaidCallBalanceList() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetPaidCallBalanceList_args = new GetPaidCallBalanceList_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetPaidCallBalanceList_result = new GetPaidCallBalanceList_result();
      try {
        result.success = CallService_iface_.getPaidCallBalanceList(args.language);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getPaidCallBalanceList", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPaidCallBalanceList");
        oprot.writeMessageBegin(new TMessage("getPaidCallBalanceList", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getPaidCallBalanceList", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getPersonalInfos() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetPersonalInfos_args = new GetPersonalInfos_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetPersonalInfos_result = new GetPersonalInfos_result();
      try {
        result.success = CallService_iface_.getPersonalInfos(args.requiredPersonalInfos);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getPersonalInfos", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPersonalInfos");
        oprot.writeMessageBegin(new TMessage("getPersonalInfos", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getPersonalInfos", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getPrimaryClientsForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetPrimaryClientsForChannel_args = new GetPrimaryClientsForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetPrimaryClientsForChannel_result = new GetPrimaryClientsForChannel_result();
      try {
        result.success = CallService_iface_.getPrimaryClientsForChannel(args.userMids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getPrimaryClientsForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPrimaryClientsForChannel");
        oprot.writeMessageBegin(new TMessage("getPrimaryClientsForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getPrimaryClientsForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function addBuddyToContact() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : AddBuddyToContact_args = new AddBuddyToContact_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : AddBuddyToContact_result = new AddBuddyToContact_result();
      try {
        result.success = CallService_iface_.addBuddyToContact(args.buddyMid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing addBuddyToContact", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing addBuddyToContact");
        oprot.writeMessageBegin(new TMessage("addBuddyToContact", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("addBuddyToContact", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getGroupMemberMidsForAppPlatform() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetGroupMemberMidsForAppPlatform_args = new GetGroupMemberMidsForAppPlatform_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetGroupMemberMidsForAppPlatform_result = new GetGroupMemberMidsForAppPlatform_result();
      try {
        result.success = CallService_iface_.getGroupMemberMidsForAppPlatform(args.groupId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getGroupMemberMidsForAppPlatform", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupMemberMidsForAppPlatform");
        oprot.writeMessageBegin(new TMessage("getGroupMemberMidsForAppPlatform", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getGroupMemberMidsForAppPlatform", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getUserLanguage() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetUserLanguage_args = new GetUserLanguage_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetUserLanguage_result = new GetUserLanguage_result();
      try {
        result.success = CallService_iface_.getUserLanguage();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getUserLanguage", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserLanguage");
        oprot.writeMessageBegin(new TMessage("getUserLanguage", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getUserLanguage", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function lookupPaidCall() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : LookupPaidCall_args = new LookupPaidCall_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : LookupPaidCall_result = new LookupPaidCall_result();
      try {
        result.success = CallService_iface_.lookupPaidCall(args.dialedNumber, args.language, args.referer);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing lookupPaidCall", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing lookupPaidCall");
        oprot.writeMessageBegin(new TMessage("lookupPaidCall", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("lookupPaidCall", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getExtendedProfile() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetExtendedProfile_args = new GetExtendedProfile_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetExtendedProfile_result = new GetExtendedProfile_result();
      try {
        result.success = CallService_iface_.getExtendedProfile();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getExtendedProfile", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getExtendedProfile");
        oprot.writeMessageBegin(new TMessage("getExtendedProfile", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getExtendedProfile", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getReverseCompactContacts() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetReverseCompactContacts_args = new GetReverseCompactContacts_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetReverseCompactContacts_result = new GetReverseCompactContacts_result();
      try {
        result.success = CallService_iface_.getReverseCompactContacts(args.ids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getReverseCompactContacts", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getReverseCompactContacts");
        oprot.writeMessageBegin(new TMessage("getReverseCompactContacts", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getReverseCompactContacts", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getPaidCallAdStatus() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetPaidCallAdStatus_args = new GetPaidCallAdStatus_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetPaidCallAdStatus_result = new GetPaidCallAdStatus_result();
      try {
        result.success = CallService_iface_.getPaidCallAdStatus();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getPaidCallAdStatus", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPaidCallAdStatus");
        oprot.writeMessageBegin(new TMessage("getPaidCallAdStatus", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getPaidCallAdStatus", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function findContactByUseridWithoutAbuseBlockForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FindContactByUseridWithoutAbuseBlockForChannel_args = new FindContactByUseridWithoutAbuseBlockForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FindContactByUseridWithoutAbuseBlockForChannel_result = new FindContactByUseridWithoutAbuseBlockForChannel_result();
      try {
        result.success = CallService_iface_.findContactByUseridWithoutAbuseBlockForChannel(args.userid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing findContactByUseridWithoutAbuseBlockForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findContactByUseridWithoutAbuseBlockForChannel");
        oprot.writeMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getGroupMemberMids() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetGroupMemberMids_args = new GetGroupMemberMids_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetGroupMemberMids_result = new GetGroupMemberMids_result();
      try {
        result.success = CallService_iface_.getGroupMemberMids(args.groupId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getGroupMemberMids", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupMemberMids");
        oprot.writeMessageBegin(new TMessage("getGroupMemberMids", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getGroupMemberMids", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function sendMessageWithoutRelationship() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SendMessageWithoutRelationship_args = new SendMessageWithoutRelationship_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SendMessageWithoutRelationship_result = new SendMessageWithoutRelationship_result();
      try {
        result.success = CallService_iface_.sendMessageWithoutRelationship(args.message);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing sendMessageWithoutRelationship", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendMessageWithoutRelationship");
        oprot.writeMessageBegin(new TMessage("sendMessageWithoutRelationship", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("sendMessageWithoutRelationship", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function displayBuddySubscriberCountInBulk() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : DisplayBuddySubscriberCountInBulk_args = new DisplayBuddySubscriberCountInBulk_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : DisplayBuddySubscriberCountInBulk_result = new DisplayBuddySubscriberCountInBulk_result();
      try {
        result.success = CallService_iface_.displayBuddySubscriberCountInBulk(args.mids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing displayBuddySubscriberCountInBulk", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing displayBuddySubscriberCountInBulk");
        oprot.writeMessageBegin(new TMessage("displayBuddySubscriberCountInBulk", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("displayBuddySubscriberCountInBulk", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function lookupRoomMembers() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : LookupRoomMembers_args = new LookupRoomMembers_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : LookupRoomMembers_result = new LookupRoomMembers_result();
      try {
        result.success = CallService_iface_.lookupRoomMembers(args.roomId, args.mids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing lookupRoomMembers", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing lookupRoomMembers");
        oprot.writeMessageBegin(new TMessage("lookupRoomMembers", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("lookupRoomMembers", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getFavoriteMidsForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetFavoriteMidsForChannel_args = new GetFavoriteMidsForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetFavoriteMidsForChannel_result = new GetFavoriteMidsForChannel_result();
      try {
        result.success = CallService_iface_.getFavoriteMidsForChannel();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getFavoriteMidsForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getFavoriteMidsForChannel");
        oprot.writeMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getAllContactIdsForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetAllContactIdsForChannel_args = new GetAllContactIdsForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetAllContactIdsForChannel_result = new GetAllContactIdsForChannel_result();
      try {
        result.success = CallService_iface_.getAllContactIdsForChannel();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getAllContactIdsForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAllContactIdsForChannel");
        oprot.writeMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function displayBuddySubscriberCount() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : DisplayBuddySubscriberCount_args = new DisplayBuddySubscriberCount_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : DisplayBuddySubscriberCount_result = new DisplayBuddySubscriberCount_result();
      try {
        result.success = CallService_iface_.displayBuddySubscriberCount();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing displayBuddySubscriberCount", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing displayBuddySubscriberCount");
        oprot.writeMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getProfileForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetProfileForChannel_args = new GetProfileForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetProfileForChannel_result = new GetProfileForChannel_result();
      try {
        result.success = CallService_iface_.getProfileForChannel();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getProfileForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getProfileForChannel");
        oprot.writeMessageBegin(new TMessage("getProfileForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getProfileForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getUserTickets() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetUserTickets_args = new GetUserTickets_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetUserTickets_result = new GetUserTickets_result();
      try {
        result.success = CallService_iface_.getUserTickets(args.userMids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getUserTickets", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserTickets");
        oprot.writeMessageBegin(new TMessage("getUserTickets", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getUserTickets", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getOAFriendMids() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetOAFriendMids_args = new GetOAFriendMids_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetOAFriendMids_result = new GetOAFriendMids_result();
      try {
        result.success = CallService_iface_.getOAFriendMids();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getOAFriendMids", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getOAFriendMids");
        oprot.writeMessageBegin(new TMessage("getOAFriendMids", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getOAFriendMids", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function searchPaidCallUserRate() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SearchPaidCallUserRate_args = new SearchPaidCallUserRate_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SearchPaidCallUserRate_result = new SearchPaidCallUserRate_result();
      try {
        result.success = CallService_iface_.searchPaidCallUserRate(args.countryCode, args.language);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing searchPaidCallUserRate", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing searchPaidCallUserRate");
        oprot.writeMessageBegin(new TMessage("searchPaidCallUserRate", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("searchPaidCallUserRate", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getJoinedGroupIdsForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetJoinedGroupIdsForChannel_args = new GetJoinedGroupIdsForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetJoinedGroupIdsForChannel_result = new GetJoinedGroupIdsForChannel_result();
      try {
        result.success = CallService_iface_.getJoinedGroupIdsForChannel();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getJoinedGroupIdsForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getJoinedGroupIdsForChannel");
        oprot.writeMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function acquireGroupCallRoute() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : AcquireGroupCallRoute_args = new AcquireGroupCallRoute_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : AcquireGroupCallRoute_result = new AcquireGroupCallRoute_result();
      try {
        result.success = CallService_iface_.acquireGroupCallRoute(args.chatMid, args.mediaType);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing acquireGroupCallRoute", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acquireGroupCallRoute");
        oprot.writeMessageBegin(new TMessage("acquireGroupCallRoute", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("acquireGroupCallRoute", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getUserMidsWhoAddedMe() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetUserMidsWhoAddedMe_args = new GetUserMidsWhoAddedMe_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetUserMidsWhoAddedMe_result = new GetUserMidsWhoAddedMe_result();
      try {
        result.success = CallService_iface_.getUserMidsWhoAddedMe();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getUserMidsWhoAddedMe", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserMidsWhoAddedMe");
        oprot.writeMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getIdentityCredential() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetIdentityCredential_args = new GetIdentityCredential_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetIdentityCredential_result = new GetIdentityCredential_result();
      try {
        result.success = CallService_iface_.getIdentityCredential();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getIdentityCredential", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getIdentityCredential");
        oprot.writeMessageBegin(new TMessage("getIdentityCredential", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getIdentityCredential", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function addOperationForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : AddOperationForChannel_args = new AddOperationForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : AddOperationForChannel_result = new AddOperationForChannel_result();
      try {
        CallService_iface_.addOperationForChannel(args.opType, args.param1, args.param2, args.param3);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing addOperationForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing addOperationForChannel");
        oprot.writeMessageBegin(new TMessage("addOperationForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("addOperationForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getSimpleChannelContacts() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetSimpleChannelContacts_args = new GetSimpleChannelContacts_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetSimpleChannelContacts_result = new GetSimpleChannelContacts_result();
      try {
        result.success = CallService_iface_.getSimpleChannelContacts(args.ids, args.statusSticonFallbackDisabled);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getSimpleChannelContacts", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSimpleChannelContacts");
        oprot.writeMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getUserLastSentMessageTimeStamp() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetUserLastSentMessageTimeStamp_args = new GetUserLastSentMessageTimeStamp_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetUserLastSentMessageTimeStamp_result = new GetUserLastSentMessageTimeStamp_result();
      try {
        result.success = CallService_iface_.getUserLastSentMessageTimeStamp(args.mid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getUserLastSentMessageTimeStamp", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserLastSentMessageTimeStamp");
        oprot.writeMessageBegin(new TMessage("getUserLastSentMessageTimeStamp", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getUserLastSentMessageTimeStamp", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

}

