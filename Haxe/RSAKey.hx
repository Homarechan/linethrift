/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class RSAKey implements TBase {
  
  static var STRUCT_DESC = { new TStruct("RSAKey"); };
  static var KEYNM_FIELD_DESC = { new TField("keynm", TType.STRING, 1); };
  static var NVALUE_FIELD_DESC = { new TField("nvalue", TType.STRING, 2); };
  static var EVALUE_FIELD_DESC = { new TField("evalue", TType.STRING, 3); };
  static var SESSION_KEY_FIELD_DESC = { new TField("sessionKey", TType.STRING, 4); };

  @:isVar
  public var keynm(get,set) : String;
  @:isVar
  public var nvalue(get,set) : String;
  @:isVar
  public var evalue(get,set) : String;
  @:isVar
  public var sessionKey(get,set) : String;

  inline static var KEYNM_FIELD_ID : Int = 1;
  inline static var NVALUE_FIELD_ID : Int = 2;
  inline static var EVALUE_FIELD_ID : Int = 3;
  inline static var SESSIONKEY_FIELD_ID : Int = 4;


  public function new() {
  }

  public function get_keynm() : String {
    return this.keynm;
  }

  public function set_keynm(keynm:String) : String {
    this.keynm = keynm;
    return this.keynm;
  }

  public function unsetKeynm() : Void {
    this.keynm = null;
  }

  // Returns true if field keynm is set (has been assigned a value) and false otherwise
  public function isSetKeynm() : Bool {
    return this.keynm != null;
  }

  public function get_nvalue() : String {
    return this.nvalue;
  }

  public function set_nvalue(nvalue:String) : String {
    this.nvalue = nvalue;
    return this.nvalue;
  }

  public function unsetNvalue() : Void {
    this.nvalue = null;
  }

  // Returns true if field nvalue is set (has been assigned a value) and false otherwise
  public function isSetNvalue() : Bool {
    return this.nvalue != null;
  }

  public function get_evalue() : String {
    return this.evalue;
  }

  public function set_evalue(evalue:String) : String {
    this.evalue = evalue;
    return this.evalue;
  }

  public function unsetEvalue() : Void {
    this.evalue = null;
  }

  // Returns true if field evalue is set (has been assigned a value) and false otherwise
  public function isSetEvalue() : Bool {
    return this.evalue != null;
  }

  public function get_sessionKey() : String {
    return this.sessionKey;
  }

  public function set_sessionKey(sessionKey:String) : String {
    this.sessionKey = sessionKey;
    return this.sessionKey;
  }

  public function unsetSessionKey() : Void {
    this.sessionKey = null;
  }

  // Returns true if field sessionKey is set (has been assigned a value) and false otherwise
  public function isSetSessionKey() : Bool {
    return this.sessionKey != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case KEYNM_FIELD_ID:
      if (value == null) {
        unsetKeynm();
      } else {
        this.keynm = value;
      }

    case NVALUE_FIELD_ID:
      if (value == null) {
        unsetNvalue();
      } else {
        this.nvalue = value;
      }

    case EVALUE_FIELD_ID:
      if (value == null) {
        unsetEvalue();
      } else {
        this.evalue = value;
      }

    case SESSIONKEY_FIELD_ID:
      if (value == null) {
        unsetSessionKey();
      } else {
        this.sessionKey = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case KEYNM_FIELD_ID:
      return this.keynm;
    case NVALUE_FIELD_ID:
      return this.nvalue;
    case EVALUE_FIELD_ID:
      return this.evalue;
    case SESSIONKEY_FIELD_ID:
      return this.sessionKey;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case KEYNM_FIELD_ID:
      return isSetKeynm();
    case NVALUE_FIELD_ID:
      return isSetNvalue();
    case EVALUE_FIELD_ID:
      return isSetEvalue();
    case SESSIONKEY_FIELD_ID:
      return isSetSessionKey();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case KEYNM_FIELD_ID:
            if (field.type == TType.STRING) {
              this.keynm = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NVALUE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.nvalue = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case EVALUE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.evalue = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SESSIONKEY_FIELD_ID:
            if (field.type == TType.STRING) {
              this.sessionKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.keynm != null) {
        oprot.writeFieldBegin(KEYNM_FIELD_DESC);
        oprot.writeString(this.keynm);
        oprot.writeFieldEnd();
      }
      if (this.nvalue != null) {
        oprot.writeFieldBegin(NVALUE_FIELD_DESC);
        oprot.writeString(this.nvalue);
        oprot.writeFieldEnd();
      }
      if (this.evalue != null) {
        oprot.writeFieldBegin(EVALUE_FIELD_DESC);
        oprot.writeString(this.evalue);
        oprot.writeFieldEnd();
      }
      if (this.sessionKey != null) {
        oprot.writeFieldBegin(SESSION_KEY_FIELD_DESC);
        oprot.writeString(this.sessionKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "RSAKey(";
    var first : Bool = true;

    ret += "keynm:";
    if (this.keynm == null) {
      ret += "null";
    } else {
      ret += this.keynm;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "nvalue:";
    if (this.nvalue == null) {
      ret += "null";
    } else {
      ret += this.nvalue;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "evalue:";
    if (this.evalue == null) {
      ret += "null";
    } else {
      ret += this.evalue;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "sessionKey:";
    if (this.sessionKey == null) {
      ret += "null";
    } else {
      ret += this.sessionKey;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

