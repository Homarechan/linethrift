/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class PaidCallResponse implements TBase {
  
  static var STRUCT_DESC = { new TStruct("PaidCallResponse"); };
  static var HOST_FIELD_DESC = { new TField("host", TType.STRUCT, 1); };
  static var DIALING_FIELD_DESC = { new TField("dialing", TType.STRUCT, 2); };
  static var TOKEN_FIELD_DESC = { new TField("token", TType.STRING, 3); };
  static var SPOT_ITEMS_FIELD_DESC = { new TField("spotItems", TType.LIST, 4); };

  @:isVar
  public var host(get,set) : CallHost;
  @:isVar
  public var dialing(get,set) : PaidCallDialing;
  @:isVar
  public var token(get,set) : String;
  @:isVar
  public var spotItems(get,set) : List< SpotItem>;

  inline static var HOST_FIELD_ID : Int = 1;
  inline static var DIALING_FIELD_ID : Int = 2;
  inline static var TOKEN_FIELD_ID : Int = 3;
  inline static var SPOTITEMS_FIELD_ID : Int = 4;


  public function new() {
  }

  public function get_host() : CallHost {
    return this.host;
  }

  public function set_host(host:CallHost) : CallHost {
    this.host = host;
    return this.host;
  }

  public function unsetHost() : Void {
    this.host = null;
  }

  // Returns true if field host is set (has been assigned a value) and false otherwise
  public function isSetHost() : Bool {
    return this.host != null;
  }

  public function get_dialing() : PaidCallDialing {
    return this.dialing;
  }

  public function set_dialing(dialing:PaidCallDialing) : PaidCallDialing {
    this.dialing = dialing;
    return this.dialing;
  }

  public function unsetDialing() : Void {
    this.dialing = null;
  }

  // Returns true if field dialing is set (has been assigned a value) and false otherwise
  public function isSetDialing() : Bool {
    return this.dialing != null;
  }

  public function get_token() : String {
    return this.token;
  }

  public function set_token(token:String) : String {
    this.token = token;
    return this.token;
  }

  public function unsetToken() : Void {
    this.token = null;
  }

  // Returns true if field token is set (has been assigned a value) and false otherwise
  public function isSetToken() : Bool {
    return this.token != null;
  }

  public function get_spotItems() : List< SpotItem> {
    return this.spotItems;
  }

  public function set_spotItems(spotItems:List< SpotItem>) : List< SpotItem> {
    this.spotItems = spotItems;
    return this.spotItems;
  }

  public function unsetSpotItems() : Void {
    this.spotItems = null;
  }

  // Returns true if field spotItems is set (has been assigned a value) and false otherwise
  public function isSetSpotItems() : Bool {
    return this.spotItems != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case HOST_FIELD_ID:
      if (value == null) {
        unsetHost();
      } else {
        this.host = value;
      }

    case DIALING_FIELD_ID:
      if (value == null) {
        unsetDialing();
      } else {
        this.dialing = value;
      }

    case TOKEN_FIELD_ID:
      if (value == null) {
        unsetToken();
      } else {
        this.token = value;
      }

    case SPOTITEMS_FIELD_ID:
      if (value == null) {
        unsetSpotItems();
      } else {
        this.spotItems = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case HOST_FIELD_ID:
      return this.host;
    case DIALING_FIELD_ID:
      return this.dialing;
    case TOKEN_FIELD_ID:
      return this.token;
    case SPOTITEMS_FIELD_ID:
      return this.spotItems;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case HOST_FIELD_ID:
      return isSetHost();
    case DIALING_FIELD_ID:
      return isSetDialing();
    case TOKEN_FIELD_ID:
      return isSetToken();
    case SPOTITEMS_FIELD_ID:
      return isSetSpotItems();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case HOST_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.host = new CallHost();
              this.host.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DIALING_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.dialing = new PaidCallDialing();
              this.dialing.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TOKEN_FIELD_ID:
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SPOTITEMS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list121 = iprot.readListBegin();
                this.spotItems = new List< SpotItem>();
                for( _i122 in 0 ... _list121.size)
                {
                  var _elem123 : SpotItem;
                  _elem123 = new SpotItem();
                  _elem123.read(iprot);
                  this.spotItems.add(_elem123);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.host != null) {
        oprot.writeFieldBegin(HOST_FIELD_DESC);
        this.host.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.dialing != null) {
        oprot.writeFieldBegin(DIALING_FIELD_DESC);
        this.dialing.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.spotItems != null) {
        oprot.writeFieldBegin(SPOT_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.spotItems.length));
          for( elem124 in this.spotItems)
          {
            elem124.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "PaidCallResponse(";
    var first : Bool = true;

    ret += "host:";
    if (this.host == null) {
      ret += "null";
    } else {
      ret += this.host;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "dialing:";
    if (this.dialing == null) {
      ret += "null";
    } else {
      ret += this.dialing;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "token:";
    if (this.token == null) {
      ret += "null";
    } else {
      ret += this.token;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "spotItems:";
    if (this.spotItems == null) {
      ret += "null";
    } else {
      ret += this.spotItems;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

