/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class RemoveSubscriptionsRequest implements TBase {
  
  static var STRUCT_DESC = { new TStruct("RemoveSubscriptionsRequest"); };
  static var UNSUBSCRIPTIONS_FIELD_DESC = { new TField("unsubscriptions", TType.LIST, 2); };

  @:isVar
  public var unsubscriptions(get,set) : List< haxe.Int64>;

  inline static var UNSUBSCRIPTIONS_FIELD_ID : Int = 2;


  public function new() {
  }

  public function get_unsubscriptions() : List< haxe.Int64> {
    return this.unsubscriptions;
  }

  public function set_unsubscriptions(unsubscriptions:List< haxe.Int64>) : List< haxe.Int64> {
    this.unsubscriptions = unsubscriptions;
    return this.unsubscriptions;
  }

  public function unsetUnsubscriptions() : Void {
    this.unsubscriptions = null;
  }

  // Returns true if field unsubscriptions is set (has been assigned a value) and false otherwise
  public function isSetUnsubscriptions() : Bool {
    return this.unsubscriptions != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case UNSUBSCRIPTIONS_FIELD_ID:
      if (value == null) {
        unsetUnsubscriptions();
      } else {
        this.unsubscriptions = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case UNSUBSCRIPTIONS_FIELD_ID:
      return this.unsubscriptions;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case UNSUBSCRIPTIONS_FIELD_ID:
      return isSetUnsubscriptions();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case UNSUBSCRIPTIONS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list606 = iprot.readListBegin();
                this.unsubscriptions = new List< haxe.Int64>();
                for( _i607 in 0 ... _list606.size)
                {
                  var _elem608 : haxe.Int64;
                  _elem608 = iprot.readI64();
                  this.unsubscriptions.add(_elem608);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.unsubscriptions != null) {
        oprot.writeFieldBegin(UNSUBSCRIPTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I64, this.unsubscriptions.length));
          for( elem609 in this.unsubscriptions)
          {
            oprot.writeI64(elem609);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "RemoveSubscriptionsRequest(";
    var first : Bool = true;

    ret += "unsubscriptions:";
    if (this.unsubscriptions == null) {
      ret += "null";
    } else {
      ret += this.unsubscriptions;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

