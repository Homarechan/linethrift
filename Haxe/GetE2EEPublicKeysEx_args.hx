/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class GetE2EEPublicKeysEx_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("getE2EEPublicKeysEx_args"); };
  static var IGNORE_E2_EESTATUS_FIELD_DESC = { new TField("ignoreE2EEStatus", TType.BOOL, 2); };

  @:isVar
  public var ignoreE2EEStatus(get,set) : Bool;

  inline static var IGNOREE2EESTATUS_FIELD_ID : Int = 2;

  private var __isset_ignoreE2EEStatus : Bool = false;

  public function new() {
  }

  public function get_ignoreE2EEStatus() : Bool {
    return this.ignoreE2EEStatus;
  }

  public function set_ignoreE2EEStatus(ignoreE2EEStatus:Bool) : Bool {
    this.ignoreE2EEStatus = ignoreE2EEStatus;
    this.__isset_ignoreE2EEStatus = true;
    return this.ignoreE2EEStatus;
  }

  public function unsetIgnoreE2EEStatus() : Void {
    this.__isset_ignoreE2EEStatus = false;
  }

  // Returns true if field ignoreE2EEStatus is set (has been assigned a value) and false otherwise
  public function isSetIgnoreE2EEStatus() : Bool {
    return this.__isset_ignoreE2EEStatus;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case IGNOREE2EESTATUS_FIELD_ID:
      if (value == null) {
        unsetIgnoreE2EEStatus();
      } else {
        this.ignoreE2EEStatus = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case IGNOREE2EESTATUS_FIELD_ID:
      return this.ignoreE2EEStatus;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case IGNOREE2EESTATUS_FIELD_ID:
      return isSetIgnoreE2EEStatus();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case IGNOREE2EESTATUS_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.ignoreE2EEStatus = iprot.readBool();
              this.__isset_ignoreE2EEStatus = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IGNORE_E2_EESTATUS_FIELD_DESC);
      oprot.writeBool(this.ignoreE2EEStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "getE2EEPublicKeysEx_args(";
    var first : Bool = true;

    ret += "ignoreE2EEStatus:";
    ret += this.ignoreE2EEStatus;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

