/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class RespondResendMessage_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("respondResendMessage_args"); };
  static var REQ_SEQ_FIELD_DESC = { new TField("reqSeq", TType.I32, 1); };
  static var RECEIVER_MID_FIELD_DESC = { new TField("receiverMid", TType.STRING, 2); };
  static var ORIGINAL_MESSAGE_ID_FIELD_DESC = { new TField("originalMessageId", TType.STRING, 3); };
  static var RESEND_MESSAGE_FIELD_DESC = { new TField("resendMessage", TType.STRUCT, 4); };
  static var ERROR_CODE_FIELD_DESC = { new TField("errorCode", TType.I32, 5); };

  @:isVar
  public var reqSeq(get,set) : haxe.Int32;
  @:isVar
  public var receiverMid(get,set) : String;
  @:isVar
  public var originalMessageId(get,set) : String;
  @:isVar
  public var resendMessage(get,set) : Message;
  @:isVar
  public var errorCode(get,set) : Int;

  inline static var REQSEQ_FIELD_ID : Int = 1;
  inline static var RECEIVERMID_FIELD_ID : Int = 2;
  inline static var ORIGINALMESSAGEID_FIELD_ID : Int = 3;
  inline static var RESENDMESSAGE_FIELD_ID : Int = 4;
  inline static var ERRORCODE_FIELD_ID : Int = 5;

  private var __isset_reqSeq : Bool = false;
  private var __isset_errorCode : Bool = false;

  public function new() {
  }

  public function get_reqSeq() : haxe.Int32 {
    return this.reqSeq;
  }

  public function set_reqSeq(reqSeq:haxe.Int32) : haxe.Int32 {
    this.reqSeq = reqSeq;
    this.__isset_reqSeq = true;
    return this.reqSeq;
  }

  public function unsetReqSeq() : Void {
    this.__isset_reqSeq = false;
  }

  // Returns true if field reqSeq is set (has been assigned a value) and false otherwise
  public function isSetReqSeq() : Bool {
    return this.__isset_reqSeq;
  }

  public function get_receiverMid() : String {
    return this.receiverMid;
  }

  public function set_receiverMid(receiverMid:String) : String {
    this.receiverMid = receiverMid;
    return this.receiverMid;
  }

  public function unsetReceiverMid() : Void {
    this.receiverMid = null;
  }

  // Returns true if field receiverMid is set (has been assigned a value) and false otherwise
  public function isSetReceiverMid() : Bool {
    return this.receiverMid != null;
  }

  public function get_originalMessageId() : String {
    return this.originalMessageId;
  }

  public function set_originalMessageId(originalMessageId:String) : String {
    this.originalMessageId = originalMessageId;
    return this.originalMessageId;
  }

  public function unsetOriginalMessageId() : Void {
    this.originalMessageId = null;
  }

  // Returns true if field originalMessageId is set (has been assigned a value) and false otherwise
  public function isSetOriginalMessageId() : Bool {
    return this.originalMessageId != null;
  }

  public function get_resendMessage() : Message {
    return this.resendMessage;
  }

  public function set_resendMessage(resendMessage:Message) : Message {
    this.resendMessage = resendMessage;
    return this.resendMessage;
  }

  public function unsetResendMessage() : Void {
    this.resendMessage = null;
  }

  // Returns true if field resendMessage is set (has been assigned a value) and false otherwise
  public function isSetResendMessage() : Bool {
    return this.resendMessage != null;
  }

  public function get_errorCode() : Int {
    return this.errorCode;
  }

  public function set_errorCode(errorCode:Int) : Int {
    this.errorCode = errorCode;
    this.__isset_errorCode = true;
    return this.errorCode;
  }

  public function unsetErrorCode() : Void {
    this.__isset_errorCode = false;
  }

  // Returns true if field errorCode is set (has been assigned a value) and false otherwise
  public function isSetErrorCode() : Bool {
    return this.__isset_errorCode;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case REQSEQ_FIELD_ID:
      if (value == null) {
        unsetReqSeq();
      } else {
        this.reqSeq = value;
      }

    case RECEIVERMID_FIELD_ID:
      if (value == null) {
        unsetReceiverMid();
      } else {
        this.receiverMid = value;
      }

    case ORIGINALMESSAGEID_FIELD_ID:
      if (value == null) {
        unsetOriginalMessageId();
      } else {
        this.originalMessageId = value;
      }

    case RESENDMESSAGE_FIELD_ID:
      if (value == null) {
        unsetResendMessage();
      } else {
        this.resendMessage = value;
      }

    case ERRORCODE_FIELD_ID:
      if (value == null) {
        unsetErrorCode();
      } else {
        this.errorCode = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case REQSEQ_FIELD_ID:
      return this.reqSeq;
    case RECEIVERMID_FIELD_ID:
      return this.receiverMid;
    case ORIGINALMESSAGEID_FIELD_ID:
      return this.originalMessageId;
    case RESENDMESSAGE_FIELD_ID:
      return this.resendMessage;
    case ERRORCODE_FIELD_ID:
      return this.errorCode;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case REQSEQ_FIELD_ID:
      return isSetReqSeq();
    case RECEIVERMID_FIELD_ID:
      return isSetReceiverMid();
    case ORIGINALMESSAGEID_FIELD_ID:
      return isSetOriginalMessageId();
    case RESENDMESSAGE_FIELD_ID:
      return isSetResendMessage();
    case ERRORCODE_FIELD_ID:
      return isSetErrorCode();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case REQSEQ_FIELD_ID:
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              this.__isset_reqSeq = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case RECEIVERMID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.receiverMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ORIGINALMESSAGEID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.originalMessageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case RESENDMESSAGE_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.resendMessage = new Message();
              this.resendMessage.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ERRORCODE_FIELD_ID:
            if (field.type == TType.I32) {
              this.errorCode = iprot.readI32();
              this.__isset_errorCode = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.receiverMid != null) {
        oprot.writeFieldBegin(RECEIVER_MID_FIELD_DESC);
        oprot.writeString(this.receiverMid);
        oprot.writeFieldEnd();
      }
      if (this.originalMessageId != null) {
        oprot.writeFieldBegin(ORIGINAL_MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.originalMessageId);
        oprot.writeFieldEnd();
      }
      if (this.resendMessage != null) {
        oprot.writeFieldBegin(RESEND_MESSAGE_FIELD_DESC);
        this.resendMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
      oprot.writeI32(this.errorCode);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "respondResendMessage_args(";
    var first : Bool = true;

    ret += "reqSeq:";
    ret += this.reqSeq;
    first = false;
    if (!first) ret +=  ", ";
    ret += "receiverMid:";
    if (this.receiverMid == null) {
      ret += "null";
    } else {
      ret += this.receiverMid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "originalMessageId:";
    if (this.originalMessageId == null) {
      ret += "null";
    } else {
      ret += this.originalMessageId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "resendMessage:";
    if (this.resendMessage == null) {
      ret += "null";
    } else {
      ret += this.resendMessage;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "errorCode:";
    var errorCode_name : String = .ErrorCode.VALUES_TO_NAMES[this.errorCode];
    if (errorCode_name != null) {
      ret += errorCode_name;
      ret += " (";
    }
    ret += this.errorCode;
    if (errorCode_name != null) {
      ret += ")";
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetErrorCode() && !.ErrorCode.VALID_VALUES.contains(errorCode)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'errorCode' has been assigned the invalid value " + errorCode);
    }
  }

}

