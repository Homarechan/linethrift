/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class ChannelApplicationProvidedServiceProcessor implements TProcessor {

  private var ChannelApplicationProvidedService_iface_ : ChannelApplicationProvidedService;
  private var PROCESS_MAP = new StringMap< Int->TProtocol->TProtocol->Void >();

  public function new( iface : ChannelApplicationProvidedService)
  {
    ChannelApplicationProvidedService_iface_ = iface;
    PROCESS_MAP.set("activeBuddySubscriberCount", activeBuddySubscriberCount());
    PROCESS_MAP.set("addOperationForChannel", addOperationForChannel());
    PROCESS_MAP.set("displayBuddySubscriberCount", displayBuddySubscriberCount());
    PROCESS_MAP.set("findContactByUseridWithoutAbuseBlockForChannel", findContactByUseridWithoutAbuseBlockForChannel());
    PROCESS_MAP.set("getAllContactIdsForChannel", getAllContactIdsForChannel());
    PROCESS_MAP.set("getCompactContacts", getCompactContacts());
    PROCESS_MAP.set("getContactsForChannel", getContactsForChannel());
    PROCESS_MAP.set("getDisplayName", getDisplayName());
    PROCESS_MAP.set("getFavoriteMidsForChannel", getFavoriteMidsForChannel());
    PROCESS_MAP.set("getFriendMids", getFriendMids());
    PROCESS_MAP.set("getGroupMemberMids", getGroupMemberMids());
    PROCESS_MAP.set("getGroupsForChannel", getGroupsForChannel());
    PROCESS_MAP.set("getIdentityCredential", getIdentityCredential());
    PROCESS_MAP.set("getJoinedGroupIdsForChannel", getJoinedGroupIdsForChannel());
    PROCESS_MAP.set("getMetaProfile", getMetaProfile());
    PROCESS_MAP.set("getMid", getMid());
    PROCESS_MAP.set("getPrimaryClientForChannel", getPrimaryClientForChannel());
    PROCESS_MAP.set("getProfileForChannel", getProfileForChannel());
    PROCESS_MAP.set("getSimpleChannelContacts", getSimpleChannelContacts());
    PROCESS_MAP.set("getUserCountryForBilling", getUserCountryForBilling());
    PROCESS_MAP.set("getUserCreateTime", getUserCreateTime());
    PROCESS_MAP.set("getUserIdentities", getUserIdentities());
    PROCESS_MAP.set("getUserLanguage", getUserLanguage());
    PROCESS_MAP.set("getUserMidsWhoAddedMe", getUserMidsWhoAddedMe());
    PROCESS_MAP.set("isGroupMember", isGroupMember());
    PROCESS_MAP.set("isInContact", isInContact());
    PROCESS_MAP.set("registerChannelCP", registerChannelCP());
    PROCESS_MAP.set("removeNotificationStatus", removeNotificationStatus());
    PROCESS_MAP.set("sendMessageForChannel", sendMessageForChannel());
    PROCESS_MAP.set("sendPinCodeOperation", sendPinCodeOperation());
    PROCESS_MAP.set("updateProfileAttributeForChannel", updateProfileAttributeForChannel());
  }

  public function process( iprot : TProtocol, oprot : TProtocol) : Bool
  {
    var msg : TMessage = iprot.readMessageBegin();
    var fn  = PROCESS_MAP.get(msg.name);
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      var x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
      return true;
    }
    fn( msg.seqid, iprot, oprot);
    return true;
  }

  private function activeBuddySubscriberCount() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ActiveBuddySubscriberCount_args = new ActiveBuddySubscriberCount_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ActiveBuddySubscriberCount_result = new ActiveBuddySubscriberCount_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.activeBuddySubscriberCount();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing activeBuddySubscriberCount", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing activeBuddySubscriberCount");
        oprot.writeMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function addOperationForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : AddOperationForChannel_args = new AddOperationForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : AddOperationForChannel_result = new AddOperationForChannel_result();
      try {
        ChannelApplicationProvidedService_iface_.addOperationForChannel(args.opType, args.param1, args.param2, args.param3);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing addOperationForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing addOperationForChannel");
        oprot.writeMessageBegin(new TMessage("addOperationForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("addOperationForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function displayBuddySubscriberCount() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : DisplayBuddySubscriberCount_args = new DisplayBuddySubscriberCount_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : DisplayBuddySubscriberCount_result = new DisplayBuddySubscriberCount_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.displayBuddySubscriberCount();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing displayBuddySubscriberCount", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing displayBuddySubscriberCount");
        oprot.writeMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function findContactByUseridWithoutAbuseBlockForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : FindContactByUseridWithoutAbuseBlockForChannel_args = new FindContactByUseridWithoutAbuseBlockForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : FindContactByUseridWithoutAbuseBlockForChannel_result = new FindContactByUseridWithoutAbuseBlockForChannel_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.findContactByUseridWithoutAbuseBlockForChannel(args.userid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing findContactByUseridWithoutAbuseBlockForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findContactByUseridWithoutAbuseBlockForChannel");
        oprot.writeMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getAllContactIdsForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetAllContactIdsForChannel_args = new GetAllContactIdsForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetAllContactIdsForChannel_result = new GetAllContactIdsForChannel_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getAllContactIdsForChannel();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getAllContactIdsForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAllContactIdsForChannel");
        oprot.writeMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getCompactContacts() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetCompactContacts_args = new GetCompactContacts_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetCompactContacts_result = new GetCompactContacts_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getCompactContacts(args.lastModifiedTimestamp);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getCompactContacts", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCompactContacts");
        oprot.writeMessageBegin(new TMessage("getCompactContacts", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getCompactContacts", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getContactsForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetContactsForChannel_args = new GetContactsForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetContactsForChannel_result = new GetContactsForChannel_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getContactsForChannel(args.ids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getContactsForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getContactsForChannel");
        oprot.writeMessageBegin(new TMessage("getContactsForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getContactsForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getDisplayName() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetDisplayName_args = new GetDisplayName_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetDisplayName_result = new GetDisplayName_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getDisplayName(args.mid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getDisplayName", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getDisplayName");
        oprot.writeMessageBegin(new TMessage("getDisplayName", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getDisplayName", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getFavoriteMidsForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetFavoriteMidsForChannel_args = new GetFavoriteMidsForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetFavoriteMidsForChannel_result = new GetFavoriteMidsForChannel_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getFavoriteMidsForChannel();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getFavoriteMidsForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getFavoriteMidsForChannel");
        oprot.writeMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getFriendMids() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetFriendMids_args = new GetFriendMids_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetFriendMids_result = new GetFriendMids_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getFriendMids();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getFriendMids", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getFriendMids");
        oprot.writeMessageBegin(new TMessage("getFriendMids", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getFriendMids", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getGroupMemberMids() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetGroupMemberMids_args = new GetGroupMemberMids_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetGroupMemberMids_result = new GetGroupMemberMids_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getGroupMemberMids(args.groupId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getGroupMemberMids", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupMemberMids");
        oprot.writeMessageBegin(new TMessage("getGroupMemberMids", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getGroupMemberMids", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getGroupsForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetGroupsForChannel_args = new GetGroupsForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetGroupsForChannel_result = new GetGroupsForChannel_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getGroupsForChannel(args.groupIds);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getGroupsForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupsForChannel");
        oprot.writeMessageBegin(new TMessage("getGroupsForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getGroupsForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getIdentityCredential() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetIdentityCredential_args = new GetIdentityCredential_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetIdentityCredential_result = new GetIdentityCredential_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getIdentityCredential();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getIdentityCredential", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getIdentityCredential");
        oprot.writeMessageBegin(new TMessage("getIdentityCredential", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getIdentityCredential", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getJoinedGroupIdsForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetJoinedGroupIdsForChannel_args = new GetJoinedGroupIdsForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetJoinedGroupIdsForChannel_result = new GetJoinedGroupIdsForChannel_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getJoinedGroupIdsForChannel();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getJoinedGroupIdsForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getJoinedGroupIdsForChannel");
        oprot.writeMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getMetaProfile() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetMetaProfile_args = new GetMetaProfile_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetMetaProfile_result = new GetMetaProfile_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getMetaProfile();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getMetaProfile", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMetaProfile");
        oprot.writeMessageBegin(new TMessage("getMetaProfile", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getMetaProfile", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getMid() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetMid_args = new GetMid_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetMid_result = new GetMid_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getMid();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getMid", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMid");
        oprot.writeMessageBegin(new TMessage("getMid", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getMid", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getPrimaryClientForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetPrimaryClientForChannel_args = new GetPrimaryClientForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetPrimaryClientForChannel_result = new GetPrimaryClientForChannel_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getPrimaryClientForChannel();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getPrimaryClientForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPrimaryClientForChannel");
        oprot.writeMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getProfileForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetProfileForChannel_args = new GetProfileForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetProfileForChannel_result = new GetProfileForChannel_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getProfileForChannel();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getProfileForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getProfileForChannel");
        oprot.writeMessageBegin(new TMessage("getProfileForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getProfileForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getSimpleChannelContacts() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetSimpleChannelContacts_args = new GetSimpleChannelContacts_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetSimpleChannelContacts_result = new GetSimpleChannelContacts_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getSimpleChannelContacts(args.ids);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getSimpleChannelContacts", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSimpleChannelContacts");
        oprot.writeMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getUserCountryForBilling() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetUserCountryForBilling_args = new GetUserCountryForBilling_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetUserCountryForBilling_result = new GetUserCountryForBilling_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getUserCountryForBilling(args.country, args.remoteIp);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getUserCountryForBilling", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserCountryForBilling");
        oprot.writeMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getUserCreateTime() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetUserCreateTime_args = new GetUserCreateTime_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetUserCreateTime_result = new GetUserCreateTime_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getUserCreateTime();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getUserCreateTime", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserCreateTime");
        oprot.writeMessageBegin(new TMessage("getUserCreateTime", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getUserCreateTime", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getUserIdentities() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetUserIdentities_args = new GetUserIdentities_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetUserIdentities_result = new GetUserIdentities_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getUserIdentities();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getUserIdentities", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserIdentities");
        oprot.writeMessageBegin(new TMessage("getUserIdentities", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getUserIdentities", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getUserLanguage() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetUserLanguage_args = new GetUserLanguage_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetUserLanguage_result = new GetUserLanguage_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getUserLanguage();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getUserLanguage", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserLanguage");
        oprot.writeMessageBegin(new TMessage("getUserLanguage", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getUserLanguage", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function getUserMidsWhoAddedMe() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : GetUserMidsWhoAddedMe_args = new GetUserMidsWhoAddedMe_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : GetUserMidsWhoAddedMe_result = new GetUserMidsWhoAddedMe_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.getUserMidsWhoAddedMe();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing getUserMidsWhoAddedMe", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserMidsWhoAddedMe");
        oprot.writeMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function isGroupMember() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : IsGroupMember_args = new IsGroupMember_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : IsGroupMember_result = new IsGroupMember_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.isGroupMember(args.groupId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing isGroupMember", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing isGroupMember");
        oprot.writeMessageBegin(new TMessage("isGroupMember", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("isGroupMember", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function isInContact() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : IsInContact_args = new IsInContact_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : IsInContact_result = new IsInContact_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.isInContact(args.mid);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing isInContact", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing isInContact");
        oprot.writeMessageBegin(new TMessage("isInContact", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("isInContact", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function registerChannelCP() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RegisterChannelCP_args = new RegisterChannelCP_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RegisterChannelCP_result = new RegisterChannelCP_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.registerChannelCP(args.cpId, args.registerPassword);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing registerChannelCP", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerChannelCP");
        oprot.writeMessageBegin(new TMessage("registerChannelCP", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("registerChannelCP", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function removeNotificationStatus() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RemoveNotificationStatus_args = new RemoveNotificationStatus_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RemoveNotificationStatus_result = new RemoveNotificationStatus_result();
      try {
        ChannelApplicationProvidedService_iface_.removeNotificationStatus(args.notificationStatus);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing removeNotificationStatus", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeNotificationStatus");
        oprot.writeMessageBegin(new TMessage("removeNotificationStatus", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("removeNotificationStatus", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function sendMessageForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SendMessageForChannel_args = new SendMessageForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SendMessageForChannel_result = new SendMessageForChannel_result();
      try {
        result.success = ChannelApplicationProvidedService_iface_.sendMessageForChannel(args.message);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing sendMessageForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendMessageForChannel");
        oprot.writeMessageBegin(new TMessage("sendMessageForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("sendMessageForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function sendPinCodeOperation() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : SendPinCodeOperation_args = new SendPinCodeOperation_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : SendPinCodeOperation_result = new SendPinCodeOperation_result();
      try {
        ChannelApplicationProvidedService_iface_.sendPinCodeOperation(args.verifier);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing sendPinCodeOperation", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendPinCodeOperation");
        oprot.writeMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function updateProfileAttributeForChannel() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : UpdateProfileAttributeForChannel_args = new UpdateProfileAttributeForChannel_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : UpdateProfileAttributeForChannel_result = new UpdateProfileAttributeForChannel_result();
      try {
        ChannelApplicationProvidedService_iface_.updateProfileAttributeForChannel(args.profileAttribute, args.value);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing updateProfileAttributeForChannel", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateProfileAttributeForChannel");
        oprot.writeMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

}

