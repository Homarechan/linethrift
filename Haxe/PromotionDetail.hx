/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class PromotionDetail implements TBase {
  
  static var STRUCT_DESC = { new TStruct("PromotionDetail"); };
  static var PROMOTION_BUDDY_INFO_FIELD_DESC = { new TField("promotionBuddyInfo", TType.STRUCT, 1); };
  static var PROMOTION_INSTALL_INFO_FIELD_DESC = { new TField("promotionInstallInfo", TType.STRUCT, 2); };
  static var PROMOTION_MISSION_INFO_FIELD_DESC = { new TField("promotionMissionInfo", TType.STRUCT, 3); };

  @:isVar
  public var promotionBuddyInfo(get,set) : PromotionBuddyInfo;
  @:isVar
  public var promotionInstallInfo(get,set) : PromotionInstallInfo;
  @:isVar
  public var promotionMissionInfo(get,set) : PromotionMissionInfo;

  inline static var PROMOTIONBUDDYINFO_FIELD_ID : Int = 1;
  inline static var PROMOTIONINSTALLINFO_FIELD_ID : Int = 2;
  inline static var PROMOTIONMISSIONINFO_FIELD_ID : Int = 3;


  public function new() {
  }

  public function get_promotionBuddyInfo() : PromotionBuddyInfo {
    return this.promotionBuddyInfo;
  }

  public function set_promotionBuddyInfo(promotionBuddyInfo:PromotionBuddyInfo) : PromotionBuddyInfo {
    this.promotionBuddyInfo = promotionBuddyInfo;
    return this.promotionBuddyInfo;
  }

  public function unsetPromotionBuddyInfo() : Void {
    this.promotionBuddyInfo = null;
  }

  // Returns true if field promotionBuddyInfo is set (has been assigned a value) and false otherwise
  public function isSetPromotionBuddyInfo() : Bool {
    return this.promotionBuddyInfo != null;
  }

  public function get_promotionInstallInfo() : PromotionInstallInfo {
    return this.promotionInstallInfo;
  }

  public function set_promotionInstallInfo(promotionInstallInfo:PromotionInstallInfo) : PromotionInstallInfo {
    this.promotionInstallInfo = promotionInstallInfo;
    return this.promotionInstallInfo;
  }

  public function unsetPromotionInstallInfo() : Void {
    this.promotionInstallInfo = null;
  }

  // Returns true if field promotionInstallInfo is set (has been assigned a value) and false otherwise
  public function isSetPromotionInstallInfo() : Bool {
    return this.promotionInstallInfo != null;
  }

  public function get_promotionMissionInfo() : PromotionMissionInfo {
    return this.promotionMissionInfo;
  }

  public function set_promotionMissionInfo(promotionMissionInfo:PromotionMissionInfo) : PromotionMissionInfo {
    this.promotionMissionInfo = promotionMissionInfo;
    return this.promotionMissionInfo;
  }

  public function unsetPromotionMissionInfo() : Void {
    this.promotionMissionInfo = null;
  }

  // Returns true if field promotionMissionInfo is set (has been assigned a value) and false otherwise
  public function isSetPromotionMissionInfo() : Bool {
    return this.promotionMissionInfo != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case PROMOTIONBUDDYINFO_FIELD_ID:
      if (value == null) {
        unsetPromotionBuddyInfo();
      } else {
        this.promotionBuddyInfo = value;
      }

    case PROMOTIONINSTALLINFO_FIELD_ID:
      if (value == null) {
        unsetPromotionInstallInfo();
      } else {
        this.promotionInstallInfo = value;
      }

    case PROMOTIONMISSIONINFO_FIELD_ID:
      if (value == null) {
        unsetPromotionMissionInfo();
      } else {
        this.promotionMissionInfo = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case PROMOTIONBUDDYINFO_FIELD_ID:
      return this.promotionBuddyInfo;
    case PROMOTIONINSTALLINFO_FIELD_ID:
      return this.promotionInstallInfo;
    case PROMOTIONMISSIONINFO_FIELD_ID:
      return this.promotionMissionInfo;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case PROMOTIONBUDDYINFO_FIELD_ID:
      return isSetPromotionBuddyInfo();
    case PROMOTIONINSTALLINFO_FIELD_ID:
      return isSetPromotionInstallInfo();
    case PROMOTIONMISSIONINFO_FIELD_ID:
      return isSetPromotionMissionInfo();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case PROMOTIONBUDDYINFO_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.promotionBuddyInfo = new PromotionBuddyInfo();
              this.promotionBuddyInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PROMOTIONINSTALLINFO_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.promotionInstallInfo = new PromotionInstallInfo();
              this.promotionInstallInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PROMOTIONMISSIONINFO_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.promotionMissionInfo = new PromotionMissionInfo();
              this.promotionMissionInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.promotionBuddyInfo != null) {
        oprot.writeFieldBegin(PROMOTION_BUDDY_INFO_FIELD_DESC);
        this.promotionBuddyInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.promotionInstallInfo != null) {
        oprot.writeFieldBegin(PROMOTION_INSTALL_INFO_FIELD_DESC);
        this.promotionInstallInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.promotionMissionInfo != null) {
        oprot.writeFieldBegin(PROMOTION_MISSION_INFO_FIELD_DESC);
        this.promotionMissionInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "PromotionDetail(";
    var first : Bool = true;

    ret += "promotionBuddyInfo:";
    if (this.promotionBuddyInfo == null) {
      ret += "null";
    } else {
      ret += this.promotionBuddyInfo;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "promotionInstallInfo:";
    if (this.promotionInstallInfo == null) {
      ret += "null";
    } else {
      ret += this.promotionInstallInfo;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "promotionMissionInfo:";
    if (this.promotionMissionInfo == null) {
      ret += "null";
    } else {
      ret += this.promotionMissionInfo;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

