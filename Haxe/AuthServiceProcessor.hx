/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class AuthServiceProcessor implements TProcessor {

  private var AuthService_iface_ : AuthService;
  private var PROCESS_MAP = new StringMap< Int->TProtocol->TProtocol->Void >();

  public function new( iface : AuthService)
  {
    AuthService_iface_ = iface;
    PROCESS_MAP.set("normalizePhoneNumber", normalizePhoneNumber());
    PROCESS_MAP.set("respondE2EELoginRequest", respondE2EELoginRequest());
    PROCESS_MAP.set("confirmE2EELogin", confirmE2EELogin());
    PROCESS_MAP.set("logoutZ", logoutZ());
    PROCESS_MAP.set("loginZ", loginZ());
    PROCESS_MAP.set("issueTokenForAccountMigrationSettings", issueTokenForAccountMigrationSettings());
    PROCESS_MAP.set("issueTokenForAccountMigration", issueTokenForAccountMigration());
    PROCESS_MAP.set("verifyQrcodeWithE2EE", verifyQrcodeWithE2EE());
  }

  public function process( iprot : TProtocol, oprot : TProtocol) : Bool
  {
    var msg : TMessage = iprot.readMessageBegin();
    var fn  = PROCESS_MAP.get(msg.name);
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      var x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
      return true;
    }
    fn( msg.seqid, iprot, oprot);
    return true;
  }

  private function normalizePhoneNumber() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : NormalizePhoneNumber_args = new NormalizePhoneNumber_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : NormalizePhoneNumber_result = new NormalizePhoneNumber_result();
      try {
        result.success = AuthService_iface_.normalizePhoneNumber(args.countryCode, args.phoneNumber, args.countryCodeHint);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing normalizePhoneNumber", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing normalizePhoneNumber");
        oprot.writeMessageBegin(new TMessage("normalizePhoneNumber", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("normalizePhoneNumber", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function respondE2EELoginRequest() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : RespondE2EELoginRequest_args = new RespondE2EELoginRequest_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : RespondE2EELoginRequest_result = new RespondE2EELoginRequest_result();
      try {
        AuthService_iface_.respondE2EELoginRequest(args.verifier, args.publicKey, args.encryptedKeyChain, args.hashKeyChain, args.errorCode);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing respondE2EELoginRequest", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing respondE2EELoginRequest");
        oprot.writeMessageBegin(new TMessage("respondE2EELoginRequest", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("respondE2EELoginRequest", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function confirmE2EELogin() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : ConfirmE2EELogin_args = new ConfirmE2EELogin_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : ConfirmE2EELogin_result = new ConfirmE2EELogin_result();
      try {
        result.success = AuthService_iface_.confirmE2EELogin(args.verifier, args.deviceSecret);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing confirmE2EELogin", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing confirmE2EELogin");
        oprot.writeMessageBegin(new TMessage("confirmE2EELogin", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("confirmE2EELogin", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function logoutZ() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : LogoutZ_args = new LogoutZ_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : LogoutZ_result = new LogoutZ_result();
      try {
        AuthService_iface_.logoutZ();
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing logoutZ", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing logoutZ");
        oprot.writeMessageBegin(new TMessage("logoutZ", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("logoutZ", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function loginZ() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : LoginZ_args = new LoginZ_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : LoginZ_result = new LoginZ_result();
      try {
        result.success = AuthService_iface_.loginZ(args.loginRequest);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing loginZ", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing loginZ");
        oprot.writeMessageBegin(new TMessage("loginZ", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("loginZ", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function issueTokenForAccountMigrationSettings() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : IssueTokenForAccountMigrationSettings_args = new IssueTokenForAccountMigrationSettings_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : IssueTokenForAccountMigrationSettings_result = new IssueTokenForAccountMigrationSettings_result();
      try {
        result.success = AuthService_iface_.issueTokenForAccountMigrationSettings(args.enforce);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing issueTokenForAccountMigrationSettings", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing issueTokenForAccountMigrationSettings");
        oprot.writeMessageBegin(new TMessage("issueTokenForAccountMigrationSettings", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("issueTokenForAccountMigrationSettings", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function issueTokenForAccountMigration() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : IssueTokenForAccountMigration_args = new IssueTokenForAccountMigration_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : IssueTokenForAccountMigration_result = new IssueTokenForAccountMigration_result();
      try {
        result.success = AuthService_iface_.issueTokenForAccountMigration(args.migrationSessionId);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing issueTokenForAccountMigration", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing issueTokenForAccountMigration");
        oprot.writeMessageBegin(new TMessage("issueTokenForAccountMigration", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("issueTokenForAccountMigration", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

  private function verifyQrcodeWithE2EE() : Int->TProtocol->TProtocol->Void {
    return function( seqid : Int, iprot : TProtocol, oprot : TProtocol) : Void
    {
      var args : VerifyQrcodeWithE2EE_args = new VerifyQrcodeWithE2EE_args();
      args.read(iprot);
      iprot.readMessageEnd();
      var result : VerifyQrcodeWithE2EE_result = new VerifyQrcodeWithE2EE_result();
      try {
        result.success = AuthService_iface_.verifyQrcodeWithE2EE(args.verifier, args.pinCode, args.errorCode, args.publicKey, args.encryptedKeyChain, args.hashKeyChain);
      } catch (e:TalkException) {
        result.e = e;
      } catch (th : Dynamic) {
        trace("Internal error processing verifyQrcodeWithE2EE", th);
        var x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing verifyQrcodeWithE2EE");
        oprot.writeMessageBegin(new TMessage("verifyQrcodeWithE2EE", TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return;
      }
      oprot.writeMessageBegin(new TMessage("verifyQrcodeWithE2EE", TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
    }

  }

}

