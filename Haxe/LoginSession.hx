/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class LoginSession implements TBase {
  
  static var STRUCT_DESC = { new TStruct("LoginSession"); };
  static var TOKEN_KEY_FIELD_DESC = { new TField("tokenKey", TType.STRING, 1); };
  static var EXPIRATION_TIME_FIELD_DESC = { new TField("expirationTime", TType.I64, 3); };
  static var APPLICATION_TYPE_FIELD_DESC = { new TField("applicationType", TType.I32, 11); };
  static var SYSTEM_NAME_FIELD_DESC = { new TField("systemName", TType.STRING, 12); };
  static var ACCESS_LOCATION_FIELD_DESC = { new TField("accessLocation", TType.STRING, 22); };

  @:isVar
  public var tokenKey(get,set) : String;
  @:isVar
  public var expirationTime(get,set) : haxe.Int64;
  @:isVar
  public var applicationType(get,set) : Int;
  @:isVar
  public var systemName(get,set) : String;
  @:isVar
  public var accessLocation(get,set) : String;

  inline static var TOKENKEY_FIELD_ID : Int = 1;
  inline static var EXPIRATIONTIME_FIELD_ID : Int = 3;
  inline static var APPLICATIONTYPE_FIELD_ID : Int = 11;
  inline static var SYSTEMNAME_FIELD_ID : Int = 12;
  inline static var ACCESSLOCATION_FIELD_ID : Int = 22;

  private var __isset_expirationTime : Bool = false;
  private var __isset_applicationType : Bool = false;

  public function new() {
  }

  public function get_tokenKey() : String {
    return this.tokenKey;
  }

  public function set_tokenKey(tokenKey:String) : String {
    this.tokenKey = tokenKey;
    return this.tokenKey;
  }

  public function unsetTokenKey() : Void {
    this.tokenKey = null;
  }

  // Returns true if field tokenKey is set (has been assigned a value) and false otherwise
  public function isSetTokenKey() : Bool {
    return this.tokenKey != null;
  }

  public function get_expirationTime() : haxe.Int64 {
    return this.expirationTime;
  }

  public function set_expirationTime(expirationTime:haxe.Int64) : haxe.Int64 {
    this.expirationTime = expirationTime;
    this.__isset_expirationTime = true;
    return this.expirationTime;
  }

  public function unsetExpirationTime() : Void {
    this.__isset_expirationTime = false;
  }

  // Returns true if field expirationTime is set (has been assigned a value) and false otherwise
  public function isSetExpirationTime() : Bool {
    return this.__isset_expirationTime;
  }

  public function get_applicationType() : Int {
    return this.applicationType;
  }

  public function set_applicationType(applicationType:Int) : Int {
    this.applicationType = applicationType;
    this.__isset_applicationType = true;
    return this.applicationType;
  }

  public function unsetApplicationType() : Void {
    this.__isset_applicationType = false;
  }

  // Returns true if field applicationType is set (has been assigned a value) and false otherwise
  public function isSetApplicationType() : Bool {
    return this.__isset_applicationType;
  }

  public function get_systemName() : String {
    return this.systemName;
  }

  public function set_systemName(systemName:String) : String {
    this.systemName = systemName;
    return this.systemName;
  }

  public function unsetSystemName() : Void {
    this.systemName = null;
  }

  // Returns true if field systemName is set (has been assigned a value) and false otherwise
  public function isSetSystemName() : Bool {
    return this.systemName != null;
  }

  public function get_accessLocation() : String {
    return this.accessLocation;
  }

  public function set_accessLocation(accessLocation:String) : String {
    this.accessLocation = accessLocation;
    return this.accessLocation;
  }

  public function unsetAccessLocation() : Void {
    this.accessLocation = null;
  }

  // Returns true if field accessLocation is set (has been assigned a value) and false otherwise
  public function isSetAccessLocation() : Bool {
    return this.accessLocation != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case TOKENKEY_FIELD_ID:
      if (value == null) {
        unsetTokenKey();
      } else {
        this.tokenKey = value;
      }

    case EXPIRATIONTIME_FIELD_ID:
      if (value == null) {
        unsetExpirationTime();
      } else {
        this.expirationTime = value;
      }

    case APPLICATIONTYPE_FIELD_ID:
      if (value == null) {
        unsetApplicationType();
      } else {
        this.applicationType = value;
      }

    case SYSTEMNAME_FIELD_ID:
      if (value == null) {
        unsetSystemName();
      } else {
        this.systemName = value;
      }

    case ACCESSLOCATION_FIELD_ID:
      if (value == null) {
        unsetAccessLocation();
      } else {
        this.accessLocation = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case TOKENKEY_FIELD_ID:
      return this.tokenKey;
    case EXPIRATIONTIME_FIELD_ID:
      return this.expirationTime;
    case APPLICATIONTYPE_FIELD_ID:
      return this.applicationType;
    case SYSTEMNAME_FIELD_ID:
      return this.systemName;
    case ACCESSLOCATION_FIELD_ID:
      return this.accessLocation;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case TOKENKEY_FIELD_ID:
      return isSetTokenKey();
    case EXPIRATIONTIME_FIELD_ID:
      return isSetExpirationTime();
    case APPLICATIONTYPE_FIELD_ID:
      return isSetApplicationType();
    case SYSTEMNAME_FIELD_ID:
      return isSetSystemName();
    case ACCESSLOCATION_FIELD_ID:
      return isSetAccessLocation();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case TOKENKEY_FIELD_ID:
            if (field.type == TType.STRING) {
              this.tokenKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case EXPIRATIONTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.expirationTime = iprot.readI64();
              this.__isset_expirationTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case APPLICATIONTYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.applicationType = iprot.readI32();
              this.__isset_applicationType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SYSTEMNAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.systemName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ACCESSLOCATION_FIELD_ID:
            if (field.type == TType.STRING) {
              this.accessLocation = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.tokenKey != null) {
        oprot.writeFieldBegin(TOKEN_KEY_FIELD_DESC);
        oprot.writeString(this.tokenKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPIRATION_TIME_FIELD_DESC);
      oprot.writeI64(this.expirationTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLICATION_TYPE_FIELD_DESC);
      oprot.writeI32(this.applicationType);
      oprot.writeFieldEnd();
      if (this.systemName != null) {
        oprot.writeFieldBegin(SYSTEM_NAME_FIELD_DESC);
        oprot.writeString(this.systemName);
        oprot.writeFieldEnd();
      }
      if (this.accessLocation != null) {
        oprot.writeFieldBegin(ACCESS_LOCATION_FIELD_DESC);
        oprot.writeString(this.accessLocation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "LoginSession(";
    var first : Bool = true;

    ret += "tokenKey:";
    if (this.tokenKey == null) {
      ret += "null";
    } else {
      ret += this.tokenKey;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "expirationTime:";
    ret += this.expirationTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "applicationType:";
    var applicationType_name : String = .ApplicationType.VALUES_TO_NAMES[this.applicationType];
    if (applicationType_name != null) {
      ret += applicationType_name;
      ret += " (";
    }
    ret += this.applicationType;
    if (applicationType_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "systemName:";
    if (this.systemName == null) {
      ret += "null";
    } else {
      ret += this.systemName;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "accessLocation:";
    if (this.accessLocation == null) {
      ret += "null";
    } else {
      ret += this.accessLocation;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetApplicationType() && !.ApplicationType.VALID_VALUES.contains(applicationType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'applicationType' has been assigned the invalid value " + applicationType);
    }
  }

}

