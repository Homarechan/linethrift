/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class CompactContact implements TBase {
  
  static var STRUCT_DESC = { new TStruct("CompactContact"); };
  static var MID_FIELD_DESC = { new TField("mid", TType.STRING, 1); };
  static var CREATED_TIME_FIELD_DESC = { new TField("createdTime", TType.I64, 2); };
  static var MODIFIED_TIME_FIELD_DESC = { new TField("modifiedTime", TType.I64, 3); };
  static var STATUS_FIELD_DESC = { new TField("status", TType.I32, 4); };
  static var SETTINGS_FIELD_DESC = { new TField("settings", TType.I64, 5); };
  static var DISPLAY_NAME_OVERRIDDEN_FIELD_DESC = { new TField("displayNameOverridden", TType.STRING, 6); };

  @:isVar
  public var mid(get,set) : String;
  @:isVar
  public var createdTime(get,set) : haxe.Int64;
  @:isVar
  public var modifiedTime(get,set) : haxe.Int64;
  @:isVar
  public var status(get,set) : Int;
  @:isVar
  public var settings(get,set) : haxe.Int64;
  @:isVar
  public var displayNameOverridden(get,set) : String;

  inline static var MID_FIELD_ID : Int = 1;
  inline static var CREATEDTIME_FIELD_ID : Int = 2;
  inline static var MODIFIEDTIME_FIELD_ID : Int = 3;
  inline static var STATUS_FIELD_ID : Int = 4;
  inline static var SETTINGS_FIELD_ID : Int = 5;
  inline static var DISPLAYNAMEOVERRIDDEN_FIELD_ID : Int = 6;

  private var __isset_createdTime : Bool = false;
  private var __isset_modifiedTime : Bool = false;
  private var __isset_status : Bool = false;
  private var __isset_settings : Bool = false;

  public function new() {
  }

  public function get_mid() : String {
    return this.mid;
  }

  public function set_mid(mid:String) : String {
    this.mid = mid;
    return this.mid;
  }

  public function unsetMid() : Void {
    this.mid = null;
  }

  // Returns true if field mid is set (has been assigned a value) and false otherwise
  public function isSetMid() : Bool {
    return this.mid != null;
  }

  public function get_createdTime() : haxe.Int64 {
    return this.createdTime;
  }

  public function set_createdTime(createdTime:haxe.Int64) : haxe.Int64 {
    this.createdTime = createdTime;
    this.__isset_createdTime = true;
    return this.createdTime;
  }

  public function unsetCreatedTime() : Void {
    this.__isset_createdTime = false;
  }

  // Returns true if field createdTime is set (has been assigned a value) and false otherwise
  public function isSetCreatedTime() : Bool {
    return this.__isset_createdTime;
  }

  public function get_modifiedTime() : haxe.Int64 {
    return this.modifiedTime;
  }

  public function set_modifiedTime(modifiedTime:haxe.Int64) : haxe.Int64 {
    this.modifiedTime = modifiedTime;
    this.__isset_modifiedTime = true;
    return this.modifiedTime;
  }

  public function unsetModifiedTime() : Void {
    this.__isset_modifiedTime = false;
  }

  // Returns true if field modifiedTime is set (has been assigned a value) and false otherwise
  public function isSetModifiedTime() : Bool {
    return this.__isset_modifiedTime;
  }

  public function get_status() : Int {
    return this.status;
  }

  public function set_status(status:Int) : Int {
    this.status = status;
    this.__isset_status = true;
    return this.status;
  }

  public function unsetStatus() : Void {
    this.__isset_status = false;
  }

  // Returns true if field status is set (has been assigned a value) and false otherwise
  public function isSetStatus() : Bool {
    return this.__isset_status;
  }

  public function get_settings() : haxe.Int64 {
    return this.settings;
  }

  public function set_settings(settings:haxe.Int64) : haxe.Int64 {
    this.settings = settings;
    this.__isset_settings = true;
    return this.settings;
  }

  public function unsetSettings() : Void {
    this.__isset_settings = false;
  }

  // Returns true if field settings is set (has been assigned a value) and false otherwise
  public function isSetSettings() : Bool {
    return this.__isset_settings;
  }

  public function get_displayNameOverridden() : String {
    return this.displayNameOverridden;
  }

  public function set_displayNameOverridden(displayNameOverridden:String) : String {
    this.displayNameOverridden = displayNameOverridden;
    return this.displayNameOverridden;
  }

  public function unsetDisplayNameOverridden() : Void {
    this.displayNameOverridden = null;
  }

  // Returns true if field displayNameOverridden is set (has been assigned a value) and false otherwise
  public function isSetDisplayNameOverridden() : Bool {
    return this.displayNameOverridden != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case MID_FIELD_ID:
      if (value == null) {
        unsetMid();
      } else {
        this.mid = value;
      }

    case CREATEDTIME_FIELD_ID:
      if (value == null) {
        unsetCreatedTime();
      } else {
        this.createdTime = value;
      }

    case MODIFIEDTIME_FIELD_ID:
      if (value == null) {
        unsetModifiedTime();
      } else {
        this.modifiedTime = value;
      }

    case STATUS_FIELD_ID:
      if (value == null) {
        unsetStatus();
      } else {
        this.status = value;
      }

    case SETTINGS_FIELD_ID:
      if (value == null) {
        unsetSettings();
      } else {
        this.settings = value;
      }

    case DISPLAYNAMEOVERRIDDEN_FIELD_ID:
      if (value == null) {
        unsetDisplayNameOverridden();
      } else {
        this.displayNameOverridden = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case MID_FIELD_ID:
      return this.mid;
    case CREATEDTIME_FIELD_ID:
      return this.createdTime;
    case MODIFIEDTIME_FIELD_ID:
      return this.modifiedTime;
    case STATUS_FIELD_ID:
      return this.status;
    case SETTINGS_FIELD_ID:
      return this.settings;
    case DISPLAYNAMEOVERRIDDEN_FIELD_ID:
      return this.displayNameOverridden;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case MID_FIELD_ID:
      return isSetMid();
    case CREATEDTIME_FIELD_ID:
      return isSetCreatedTime();
    case MODIFIEDTIME_FIELD_ID:
      return isSetModifiedTime();
    case STATUS_FIELD_ID:
      return isSetStatus();
    case SETTINGS_FIELD_ID:
      return isSetSettings();
    case DISPLAYNAMEOVERRIDDEN_FIELD_ID:
      return isSetDisplayNameOverridden();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CREATEDTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.createdTime = iprot.readI64();
              this.__isset_createdTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MODIFIEDTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.modifiedTime = iprot.readI64();
              this.__isset_modifiedTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case STATUS_FIELD_ID:
            if (field.type == TType.I32) {
              this.status = iprot.readI32();
              this.__isset_status = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SETTINGS_FIELD_ID:
            if (field.type == TType.I64) {
              this.settings = iprot.readI64();
              this.__isset_settings = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case DISPLAYNAMEOVERRIDDEN_FIELD_ID:
            if (field.type == TType.STRING) {
              this.displayNameOverridden = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_TIME_FIELD_DESC);
      oprot.writeI64(this.createdTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODIFIED_TIME_FIELD_DESC);
      oprot.writeI64(this.modifiedTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(this.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SETTINGS_FIELD_DESC);
      oprot.writeI64(this.settings);
      oprot.writeFieldEnd();
      if (this.displayNameOverridden != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_OVERRIDDEN_FIELD_DESC);
        oprot.writeString(this.displayNameOverridden);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "CompactContact(";
    var first : Bool = true;

    ret += "mid:";
    if (this.mid == null) {
      ret += "null";
    } else {
      ret += this.mid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "createdTime:";
    ret += this.createdTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "modifiedTime:";
    ret += this.modifiedTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "status:";
    var status_name : String = .ContactStatus.VALUES_TO_NAMES[this.status];
    if (status_name != null) {
      ret += status_name;
      ret += " (";
    }
    ret += this.status;
    if (status_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "settings:";
    ret += this.settings;
    first = false;
    if (!first) ret +=  ", ";
    ret += "displayNameOverridden:";
    if (this.displayNameOverridden == null) {
      ret += "null";
    } else {
      ret += this.displayNameOverridden;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetStatus() && !.ContactStatus.VALID_VALUES.contains(status)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'status' has been assigned the invalid value " + status);
    }
  }

}

