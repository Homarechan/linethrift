/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class InviteIntoGroupCall_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("inviteIntoGroupCall_args"); };
  static var CHAT_MID_FIELD_DESC = { new TField("chatMid", TType.STRING, 2); };
  static var MEMBER_MIDS_FIELD_DESC = { new TField("memberMids", TType.LIST, 3); };
  static var MEDIA_TYPE_FIELD_DESC = { new TField("mediaType", TType.I32, 4); };

  @:isVar
  public var chatMid(get,set) : String;
  @:isVar
  public var memberMids(get,set) : List< String>;
  @:isVar
  public var mediaType(get,set) : Int;

  inline static var CHATMID_FIELD_ID : Int = 2;
  inline static var MEMBERMIDS_FIELD_ID : Int = 3;
  inline static var MEDIATYPE_FIELD_ID : Int = 4;

  private var __isset_mediaType : Bool = false;

  public function new() {
  }

  public function get_chatMid() : String {
    return this.chatMid;
  }

  public function set_chatMid(chatMid:String) : String {
    this.chatMid = chatMid;
    return this.chatMid;
  }

  public function unsetChatMid() : Void {
    this.chatMid = null;
  }

  // Returns true if field chatMid is set (has been assigned a value) and false otherwise
  public function isSetChatMid() : Bool {
    return this.chatMid != null;
  }

  public function get_memberMids() : List< String> {
    return this.memberMids;
  }

  public function set_memberMids(memberMids:List< String>) : List< String> {
    this.memberMids = memberMids;
    return this.memberMids;
  }

  public function unsetMemberMids() : Void {
    this.memberMids = null;
  }

  // Returns true if field memberMids is set (has been assigned a value) and false otherwise
  public function isSetMemberMids() : Bool {
    return this.memberMids != null;
  }

  public function get_mediaType() : Int {
    return this.mediaType;
  }

  public function set_mediaType(mediaType:Int) : Int {
    this.mediaType = mediaType;
    this.__isset_mediaType = true;
    return this.mediaType;
  }

  public function unsetMediaType() : Void {
    this.__isset_mediaType = false;
  }

  // Returns true if field mediaType is set (has been assigned a value) and false otherwise
  public function isSetMediaType() : Bool {
    return this.__isset_mediaType;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case CHATMID_FIELD_ID:
      if (value == null) {
        unsetChatMid();
      } else {
        this.chatMid = value;
      }

    case MEMBERMIDS_FIELD_ID:
      if (value == null) {
        unsetMemberMids();
      } else {
        this.memberMids = value;
      }

    case MEDIATYPE_FIELD_ID:
      if (value == null) {
        unsetMediaType();
      } else {
        this.mediaType = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case CHATMID_FIELD_ID:
      return this.chatMid;
    case MEMBERMIDS_FIELD_ID:
      return this.memberMids;
    case MEDIATYPE_FIELD_ID:
      return this.mediaType;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case CHATMID_FIELD_ID:
      return isSetChatMid();
    case MEMBERMIDS_FIELD_ID:
      return isSetMemberMids();
    case MEDIATYPE_FIELD_ID:
      return isSetMediaType();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case CHATMID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.chatMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MEMBERMIDS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list1355 = iprot.readListBegin();
                this.memberMids = new List< String>();
                for( _i1356 in 0 ... _list1355.size)
                {
                  var _elem1357 : String;
                  _elem1357 = iprot.readString();
                  this.memberMids.add(_elem1357);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MEDIATYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.mediaType = iprot.readI32();
              this.__isset_mediaType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.chatMid != null) {
        oprot.writeFieldBegin(CHAT_MID_FIELD_DESC);
        oprot.writeString(this.chatMid);
        oprot.writeFieldEnd();
      }
      if (this.memberMids != null) {
        oprot.writeFieldBegin(MEMBER_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.memberMids.length));
          for( elem1358 in this.memberMids)
          {
            oprot.writeString(elem1358);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
      oprot.writeI32(this.mediaType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "inviteIntoGroupCall_args(";
    var first : Bool = true;

    ret += "chatMid:";
    if (this.chatMid == null) {
      ret += "null";
    } else {
      ret += this.chatMid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "memberMids:";
    if (this.memberMids == null) {
      ret += "null";
    } else {
      ret += this.memberMids;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "mediaType:";
    var mediaType_name : String = .GroupCallMediaType.VALUES_TO_NAMES[this.mediaType];
    if (mediaType_name != null) {
      ret += mediaType_name;
      ret += " (";
    }
    ret += this.mediaType;
    if (mediaType_name != null) {
      ret += ")";
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetMediaType() && !.GroupCallMediaType.VALID_VALUES.contains(mediaType)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'mediaType' has been assigned the invalid value " + mediaType);
    }
  }

}

