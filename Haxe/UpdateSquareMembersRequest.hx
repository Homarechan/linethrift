/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class UpdateSquareMembersRequest implements TBase {
  
  static var STRUCT_DESC = { new TStruct("UpdateSquareMembersRequest"); };
  static var UPDATED_ATTRS_FIELD_DESC = { new TField("updatedAttrs", TType.SET, 2); };
  static var MEMBERS_FIELD_DESC = { new TField("members", TType.LIST, 3); };

  @:isVar
  public var updatedAttrs(get,set) : IntSet;
  @:isVar
  public var members(get,set) : List< SquareMember>;

  inline static var UPDATEDATTRS_FIELD_ID : Int = 2;
  inline static var MEMBERS_FIELD_ID : Int = 3;


  public function new() {
  }

  public function get_updatedAttrs() : IntSet {
    return this.updatedAttrs;
  }

  public function set_updatedAttrs(updatedAttrs:IntSet) : IntSet {
    this.updatedAttrs = updatedAttrs;
    return this.updatedAttrs;
  }

  public function unsetUpdatedAttrs() : Void {
    this.updatedAttrs = null;
  }

  // Returns true if field updatedAttrs is set (has been assigned a value) and false otherwise
  public function isSetUpdatedAttrs() : Bool {
    return this.updatedAttrs != null;
  }

  public function get_members() : List< SquareMember> {
    return this.members;
  }

  public function set_members(members:List< SquareMember>) : List< SquareMember> {
    this.members = members;
    return this.members;
  }

  public function unsetMembers() : Void {
    this.members = null;
  }

  // Returns true if field members is set (has been assigned a value) and false otherwise
  public function isSetMembers() : Bool {
    return this.members != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case UPDATEDATTRS_FIELD_ID:
      if (value == null) {
        unsetUpdatedAttrs();
      } else {
        this.updatedAttrs = value;
      }

    case MEMBERS_FIELD_ID:
      if (value == null) {
        unsetMembers();
      } else {
        this.members = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case UPDATEDATTRS_FIELD_ID:
      return this.updatedAttrs;
    case MEMBERS_FIELD_ID:
      return this.members;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case UPDATEDATTRS_FIELD_ID:
      return isSetUpdatedAttrs();
    case MEMBERS_FIELD_ID:
      return isSetMembers();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case UPDATEDATTRS_FIELD_ID:
            if (field.type == TType.SET) {
              {
                var _set475 = iprot.readSetBegin();
                this.updatedAttrs = new IntSet();
                for( _i476 in 0 ... _set475.size)
                {
                  var _elem477 : Int;
                  _elem477 = iprot.readI32();
                  this.updatedAttrs.add(_elem477);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MEMBERS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list478 = iprot.readListBegin();
                this.members = new List< SquareMember>();
                for( _i479 in 0 ... _list478.size)
                {
                  var _elem480 : SquareMember;
                  _elem480 = new SquareMember();
                  _elem480.read(iprot);
                  this.members.add(_elem480);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.updatedAttrs != null) {
        oprot.writeFieldBegin(UPDATED_ATTRS_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.I32, this.updatedAttrs.size));
          for( elem481 in this.updatedAttrs.toArray())
          {
            oprot.writeI32(elem481);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.members != null) {
        oprot.writeFieldBegin(MEMBERS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.members.length));
          for( elem482 in this.members)
          {
            elem482.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "UpdateSquareMembersRequest(";
    var first : Bool = true;

    ret += "updatedAttrs:";
    if (this.updatedAttrs == null) {
      ret += "null";
    } else {
      ret += this.updatedAttrs;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "members:";
    if (this.members == null) {
      ret += "null";
    } else {
      ret += this.members;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

