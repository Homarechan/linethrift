/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class LoginRequest implements TBase {
  
  static var STRUCT_DESC = { new TStruct("LoginRequest"); };
  static var TYPE_FIELD_DESC = { new TField("type", TType.I32, 1); };
  static var IDENTITY_PROVIDER_FIELD_DESC = { new TField("identityProvider", TType.I32, 2); };
  static var IDENTIFIER_FIELD_DESC = { new TField("identifier", TType.STRING, 3); };
  static var PASSWORD_FIELD_DESC = { new TField("password", TType.STRING, 4); };
  static var KEEP_LOGGED_IN_FIELD_DESC = { new TField("keepLoggedIn", TType.BOOL, 5); };
  static var ACCESS_LOCATION_FIELD_DESC = { new TField("accessLocation", TType.STRING, 6); };
  static var SYSTEM_NAME_FIELD_DESC = { new TField("systemName", TType.STRING, 7); };
  static var CERTIFICATE_FIELD_DESC = { new TField("certificate", TType.STRING, 8); };
  static var VERIFIER_FIELD_DESC = { new TField("verifier", TType.STRING, 9); };
  static var SECRET_FIELD_DESC = { new TField("secret", TType.STRING, 10); };
  static var E2EE_VERSION_FIELD_DESC = { new TField("e2eeVersion", TType.I32, 11); };

  @:isVar
  public var type(get,set) : haxe.Int32;
  @:isVar
  public var identityProvider(get,set) : haxe.Int32;
  @:isVar
  public var identifier(get,set) : String;
  @:isVar
  public var password(get,set) : String;
  @:isVar
  public var keepLoggedIn(get,set) : Bool;
  @:isVar
  public var accessLocation(get,set) : String;
  @:isVar
  public var systemName(get,set) : String;
  @:isVar
  public var certificate(get,set) : String;
  @:isVar
  public var verifier(get,set) : String;
  @:isVar
  public var secret(get,set) : String;
  @:isVar
  public var e2eeVersion(get,set) : haxe.Int32;

  inline static var TYPE_FIELD_ID : Int = 1;
  inline static var IDENTITYPROVIDER_FIELD_ID : Int = 2;
  inline static var IDENTIFIER_FIELD_ID : Int = 3;
  inline static var PASSWORD_FIELD_ID : Int = 4;
  inline static var KEEPLOGGEDIN_FIELD_ID : Int = 5;
  inline static var ACCESSLOCATION_FIELD_ID : Int = 6;
  inline static var SYSTEMNAME_FIELD_ID : Int = 7;
  inline static var CERTIFICATE_FIELD_ID : Int = 8;
  inline static var VERIFIER_FIELD_ID : Int = 9;
  inline static var SECRET_FIELD_ID : Int = 10;
  inline static var E2EEVERSION_FIELD_ID : Int = 11;

  private var __isset_type : Bool = false;
  private var __isset_identityProvider : Bool = false;
  private var __isset_keepLoggedIn : Bool = false;
  private var __isset_e2eeVersion : Bool = false;

  public function new() {
  }

  public function get_type() : haxe.Int32 {
    return this.type;
  }

  public function set_type(type:haxe.Int32) : haxe.Int32 {
    this.type = type;
    this.__isset_type = true;
    return this.type;
  }

  public function unsetType() : Void {
    this.__isset_type = false;
  }

  // Returns true if field type is set (has been assigned a value) and false otherwise
  public function isSetType() : Bool {
    return this.__isset_type;
  }

  public function get_identityProvider() : haxe.Int32 {
    return this.identityProvider;
  }

  public function set_identityProvider(identityProvider:haxe.Int32) : haxe.Int32 {
    this.identityProvider = identityProvider;
    this.__isset_identityProvider = true;
    return this.identityProvider;
  }

  public function unsetIdentityProvider() : Void {
    this.__isset_identityProvider = false;
  }

  // Returns true if field identityProvider is set (has been assigned a value) and false otherwise
  public function isSetIdentityProvider() : Bool {
    return this.__isset_identityProvider;
  }

  public function get_identifier() : String {
    return this.identifier;
  }

  public function set_identifier(identifier:String) : String {
    this.identifier = identifier;
    return this.identifier;
  }

  public function unsetIdentifier() : Void {
    this.identifier = null;
  }

  // Returns true if field identifier is set (has been assigned a value) and false otherwise
  public function isSetIdentifier() : Bool {
    return this.identifier != null;
  }

  public function get_password() : String {
    return this.password;
  }

  public function set_password(password:String) : String {
    this.password = password;
    return this.password;
  }

  public function unsetPassword() : Void {
    this.password = null;
  }

  // Returns true if field password is set (has been assigned a value) and false otherwise
  public function isSetPassword() : Bool {
    return this.password != null;
  }

  public function get_keepLoggedIn() : Bool {
    return this.keepLoggedIn;
  }

  public function set_keepLoggedIn(keepLoggedIn:Bool) : Bool {
    this.keepLoggedIn = keepLoggedIn;
    this.__isset_keepLoggedIn = true;
    return this.keepLoggedIn;
  }

  public function unsetKeepLoggedIn() : Void {
    this.__isset_keepLoggedIn = false;
  }

  // Returns true if field keepLoggedIn is set (has been assigned a value) and false otherwise
  public function isSetKeepLoggedIn() : Bool {
    return this.__isset_keepLoggedIn;
  }

  public function get_accessLocation() : String {
    return this.accessLocation;
  }

  public function set_accessLocation(accessLocation:String) : String {
    this.accessLocation = accessLocation;
    return this.accessLocation;
  }

  public function unsetAccessLocation() : Void {
    this.accessLocation = null;
  }

  // Returns true if field accessLocation is set (has been assigned a value) and false otherwise
  public function isSetAccessLocation() : Bool {
    return this.accessLocation != null;
  }

  public function get_systemName() : String {
    return this.systemName;
  }

  public function set_systemName(systemName:String) : String {
    this.systemName = systemName;
    return this.systemName;
  }

  public function unsetSystemName() : Void {
    this.systemName = null;
  }

  // Returns true if field systemName is set (has been assigned a value) and false otherwise
  public function isSetSystemName() : Bool {
    return this.systemName != null;
  }

  public function get_certificate() : String {
    return this.certificate;
  }

  public function set_certificate(certificate:String) : String {
    this.certificate = certificate;
    return this.certificate;
  }

  public function unsetCertificate() : Void {
    this.certificate = null;
  }

  // Returns true if field certificate is set (has been assigned a value) and false otherwise
  public function isSetCertificate() : Bool {
    return this.certificate != null;
  }

  public function get_verifier() : String {
    return this.verifier;
  }

  public function set_verifier(verifier:String) : String {
    this.verifier = verifier;
    return this.verifier;
  }

  public function unsetVerifier() : Void {
    this.verifier = null;
  }

  // Returns true if field verifier is set (has been assigned a value) and false otherwise
  public function isSetVerifier() : Bool {
    return this.verifier != null;
  }

  public function get_secret() : String {
    return this.secret;
  }

  public function set_secret(secret:String) : String {
    this.secret = secret;
    return this.secret;
  }

  public function unsetSecret() : Void {
    this.secret = null;
  }

  // Returns true if field secret is set (has been assigned a value) and false otherwise
  public function isSetSecret() : Bool {
    return this.secret != null;
  }

  public function get_e2eeVersion() : haxe.Int32 {
    return this.e2eeVersion;
  }

  public function set_e2eeVersion(e2eeVersion:haxe.Int32) : haxe.Int32 {
    this.e2eeVersion = e2eeVersion;
    this.__isset_e2eeVersion = true;
    return this.e2eeVersion;
  }

  public function unsetE2eeVersion() : Void {
    this.__isset_e2eeVersion = false;
  }

  // Returns true if field e2eeVersion is set (has been assigned a value) and false otherwise
  public function isSetE2eeVersion() : Bool {
    return this.__isset_e2eeVersion;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case TYPE_FIELD_ID:
      if (value == null) {
        unsetType();
      } else {
        this.type = value;
      }

    case IDENTITYPROVIDER_FIELD_ID:
      if (value == null) {
        unsetIdentityProvider();
      } else {
        this.identityProvider = value;
      }

    case IDENTIFIER_FIELD_ID:
      if (value == null) {
        unsetIdentifier();
      } else {
        this.identifier = value;
      }

    case PASSWORD_FIELD_ID:
      if (value == null) {
        unsetPassword();
      } else {
        this.password = value;
      }

    case KEEPLOGGEDIN_FIELD_ID:
      if (value == null) {
        unsetKeepLoggedIn();
      } else {
        this.keepLoggedIn = value;
      }

    case ACCESSLOCATION_FIELD_ID:
      if (value == null) {
        unsetAccessLocation();
      } else {
        this.accessLocation = value;
      }

    case SYSTEMNAME_FIELD_ID:
      if (value == null) {
        unsetSystemName();
      } else {
        this.systemName = value;
      }

    case CERTIFICATE_FIELD_ID:
      if (value == null) {
        unsetCertificate();
      } else {
        this.certificate = value;
      }

    case VERIFIER_FIELD_ID:
      if (value == null) {
        unsetVerifier();
      } else {
        this.verifier = value;
      }

    case SECRET_FIELD_ID:
      if (value == null) {
        unsetSecret();
      } else {
        this.secret = value;
      }

    case E2EEVERSION_FIELD_ID:
      if (value == null) {
        unsetE2eeVersion();
      } else {
        this.e2eeVersion = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case TYPE_FIELD_ID:
      return this.type;
    case IDENTITYPROVIDER_FIELD_ID:
      return this.identityProvider;
    case IDENTIFIER_FIELD_ID:
      return this.identifier;
    case PASSWORD_FIELD_ID:
      return this.password;
    case KEEPLOGGEDIN_FIELD_ID:
      return this.keepLoggedIn;
    case ACCESSLOCATION_FIELD_ID:
      return this.accessLocation;
    case SYSTEMNAME_FIELD_ID:
      return this.systemName;
    case CERTIFICATE_FIELD_ID:
      return this.certificate;
    case VERIFIER_FIELD_ID:
      return this.verifier;
    case SECRET_FIELD_ID:
      return this.secret;
    case E2EEVERSION_FIELD_ID:
      return this.e2eeVersion;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case TYPE_FIELD_ID:
      return isSetType();
    case IDENTITYPROVIDER_FIELD_ID:
      return isSetIdentityProvider();
    case IDENTIFIER_FIELD_ID:
      return isSetIdentifier();
    case PASSWORD_FIELD_ID:
      return isSetPassword();
    case KEEPLOGGEDIN_FIELD_ID:
      return isSetKeepLoggedIn();
    case ACCESSLOCATION_FIELD_ID:
      return isSetAccessLocation();
    case SYSTEMNAME_FIELD_ID:
      return isSetSystemName();
    case CERTIFICATE_FIELD_ID:
      return isSetCertificate();
    case VERIFIER_FIELD_ID:
      return isSetVerifier();
    case SECRET_FIELD_ID:
      return isSetSecret();
    case E2EEVERSION_FIELD_ID:
      return isSetE2eeVersion();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case TYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.type = iprot.readI32();
              this.__isset_type = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case IDENTITYPROVIDER_FIELD_ID:
            if (field.type == TType.I32) {
              this.identityProvider = iprot.readI32();
              this.__isset_identityProvider = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case IDENTIFIER_FIELD_ID:
            if (field.type == TType.STRING) {
              this.identifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PASSWORD_FIELD_ID:
            if (field.type == TType.STRING) {
              this.password = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case KEEPLOGGEDIN_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.keepLoggedIn = iprot.readBool();
              this.__isset_keepLoggedIn = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case ACCESSLOCATION_FIELD_ID:
            if (field.type == TType.STRING) {
              this.accessLocation = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SYSTEMNAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.systemName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CERTIFICATE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.certificate = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case VERIFIER_FIELD_ID:
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SECRET_FIELD_ID:
            if (field.type == TType.STRING) {
              this.secret = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case E2EEVERSION_FIELD_ID:
            if (field.type == TType.I32) {
              this.e2eeVersion = iprot.readI32();
              this.__isset_e2eeVersion = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IDENTITY_PROVIDER_FIELD_DESC);
      oprot.writeI32(this.identityProvider);
      oprot.writeFieldEnd();
      if (this.identifier != null) {
        oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
        oprot.writeString(this.identifier);
        oprot.writeFieldEnd();
      }
      if (this.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(this.password);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KEEP_LOGGED_IN_FIELD_DESC);
      oprot.writeBool(this.keepLoggedIn);
      oprot.writeFieldEnd();
      if (this.accessLocation != null) {
        oprot.writeFieldBegin(ACCESS_LOCATION_FIELD_DESC);
        oprot.writeString(this.accessLocation);
        oprot.writeFieldEnd();
      }
      if (this.systemName != null) {
        oprot.writeFieldBegin(SYSTEM_NAME_FIELD_DESC);
        oprot.writeString(this.systemName);
        oprot.writeFieldEnd();
      }
      if (this.certificate != null) {
        oprot.writeFieldBegin(CERTIFICATE_FIELD_DESC);
        oprot.writeString(this.certificate);
        oprot.writeFieldEnd();
      }
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      if (this.secret != null) {
        oprot.writeFieldBegin(SECRET_FIELD_DESC);
        oprot.writeString(this.secret);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(E2EE_VERSION_FIELD_DESC);
      oprot.writeI32(this.e2eeVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "LoginRequest(";
    var first : Bool = true;

    ret += "type:";
    ret += this.type;
    first = false;
    if (!first) ret +=  ", ";
    ret += "identityProvider:";
    ret += this.identityProvider;
    first = false;
    if (!first) ret +=  ", ";
    ret += "identifier:";
    if (this.identifier == null) {
      ret += "null";
    } else {
      ret += this.identifier;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "password:";
    if (this.password == null) {
      ret += "null";
    } else {
      ret += this.password;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "keepLoggedIn:";
    ret += this.keepLoggedIn;
    first = false;
    if (!first) ret +=  ", ";
    ret += "accessLocation:";
    if (this.accessLocation == null) {
      ret += "null";
    } else {
      ret += this.accessLocation;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "systemName:";
    if (this.systemName == null) {
      ret += "null";
    } else {
      ret += this.systemName;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "certificate:";
    if (this.certificate == null) {
      ret += "null";
    } else {
      ret += this.certificate;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "verifier:";
    if (this.verifier == null) {
      ret += "null";
    } else {
      ret += this.verifier;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "secret:";
    if (this.secret == null) {
      ret += "null";
    } else {
      ret += this.secret;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "e2eeVersion:";
    ret += this.e2eeVersion;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

