/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;



class ChannelServiceImpl implements ChannelService {

  public function new( iprot : TProtocol, oprot : TProtocol = null)
  {
    iprot_ = iprot;
    if (oprot == null) {
      oprot_ = iprot;
    } else {
      oprot_ = oprot;
    }
  }

  private var iprot_ : TProtocol;
  private var oprot_ : TProtocol;
  private var seqid_ : Int;

  public function getInputProtocol() : TProtocol
  {
    return this.iprot_;
  }

  public function getOutputProtocol() : TProtocol
  {
    return this.oprot_;
  }

  public function issueOTP(channelId : String) : OTPResult {
    oprot_.writeMessageBegin(new TMessage("issueOTP", TMessageType.CALL, seqid_));
    var args : IssueOTP_args = new IssueOTP_args();
    args.channelId = channelId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : OTPResult;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : IssueOTP_result = new IssueOTP_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "issueOTP failed: unknown result");
    });
    return retval;
  }

  public function approveChannelAndIssueChannelToken(channelId : String) : ChannelToken {
    oprot_.writeMessageBegin(new TMessage("approveChannelAndIssueChannelToken", TMessageType.CALL, seqid_));
    var args : ApproveChannelAndIssueChannelToken_args = new ApproveChannelAndIssueChannelToken_args();
    args.channelId = channelId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : ChannelToken;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ApproveChannelAndIssueChannelToken_result = new ApproveChannelAndIssueChannelToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "approveChannelAndIssueChannelToken failed: unknown result");
    });
    return retval;
  }

  public function approveChannelAndIssueRequestToken(channelId : String, otpId : String) : String {
    oprot_.writeMessageBegin(new TMessage("approveChannelAndIssueRequestToken", TMessageType.CALL, seqid_));
    var args : ApproveChannelAndIssueRequestToken_args = new ApproveChannelAndIssueRequestToken_args();
    args.channelId = channelId;
    args.otpId = otpId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ApproveChannelAndIssueRequestToken_result = new ApproveChannelAndIssueRequestToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "approveChannelAndIssueRequestToken failed: unknown result");
    });
    return retval;
  }

  public function fetchNotificationItems(localRev : haxe.Int64) : NotificationFetchResult {
    oprot_.writeMessageBegin(new TMessage("fetchNotificationItems", TMessageType.CALL, seqid_));
    var args : FetchNotificationItems_args = new FetchNotificationItems_args();
    args.localRev = localRev;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : NotificationFetchResult;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FetchNotificationItems_result = new FetchNotificationItems_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "fetchNotificationItems failed: unknown result");
    });
    return retval;
  }

  public function getApprovedChannels(lastSynced : haxe.Int64, locale : String) : ApprovedChannelInfos {
    oprot_.writeMessageBegin(new TMessage("getApprovedChannels", TMessageType.CALL, seqid_));
    var args : GetApprovedChannels_args = new GetApprovedChannels_args();
    args.lastSynced = lastSynced;
    args.locale = locale;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : ApprovedChannelInfos;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetApprovedChannels_result = new GetApprovedChannels_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getApprovedChannels failed: unknown result");
    });
    return retval;
  }

  public function getChannelInfo(channelId : String, locale : String) : ChannelInfo {
    oprot_.writeMessageBegin(new TMessage("getChannelInfo", TMessageType.CALL, seqid_));
    var args : GetChannelInfo_args = new GetChannelInfo_args();
    args.channelId = channelId;
    args.locale = locale;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : ChannelInfo;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetChannelInfo_result = new GetChannelInfo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getChannelInfo failed: unknown result");
    });
    return retval;
  }

  public function getChannelNotificationSetting(channelId : String, locale : String) : ChannelNotificationSetting {
    oprot_.writeMessageBegin(new TMessage("getChannelNotificationSetting", TMessageType.CALL, seqid_));
    var args : GetChannelNotificationSetting_args = new GetChannelNotificationSetting_args();
    args.channelId = channelId;
    args.locale = locale;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : ChannelNotificationSetting;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetChannelNotificationSetting_result = new GetChannelNotificationSetting_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getChannelNotificationSetting failed: unknown result");
    });
    return retval;
  }

  public function getChannelNotificationSettings(locale : String) : List< ChannelNotificationSetting> {
    oprot_.writeMessageBegin(new TMessage("getChannelNotificationSettings", TMessageType.CALL, seqid_));
    var args : GetChannelNotificationSettings_args = new GetChannelNotificationSettings_args();
    args.locale = locale;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< ChannelNotificationSetting>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetChannelNotificationSettings_result = new GetChannelNotificationSettings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getChannelNotificationSettings failed: unknown result");
    });
    return retval;
  }

  public function getChannels(lastSynced : haxe.Int64, locale : String) : ChannelInfos {
    oprot_.writeMessageBegin(new TMessage("getChannels", TMessageType.CALL, seqid_));
    var args : GetChannels_args = new GetChannels_args();
    args.lastSynced = lastSynced;
    args.locale = locale;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : ChannelInfos;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetChannels_result = new GetChannels_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getChannels failed: unknown result");
    });
    return retval;
  }

  public function getDomains(lastSynced : haxe.Int64) : ChannelDomains {
    oprot_.writeMessageBegin(new TMessage("getDomains", TMessageType.CALL, seqid_));
    var args : GetDomains_args = new GetDomains_args();
    args.lastSynced = lastSynced;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : ChannelDomains;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetDomains_result = new GetDomains_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getDomains failed: unknown result");
    });
    return retval;
  }

  public function getFriendChannelMatrices(channelIds : List< String>) : FriendChannelMatricesResponse {
    oprot_.writeMessageBegin(new TMessage("getFriendChannelMatrices", TMessageType.CALL, seqid_));
    var args : GetFriendChannelMatrices_args = new GetFriendChannelMatrices_args();
    args.channelIds = channelIds;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : FriendChannelMatricesResponse;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetFriendChannelMatrices_result = new GetFriendChannelMatrices_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getFriendChannelMatrices failed: unknown result");
    });
    return retval;
  }

  public function updateChannelSettings(channelSettings : ChannelSettings) : Bool {
    oprot_.writeMessageBegin(new TMessage("updateChannelSettings", TMessageType.CALL, seqid_));
    var args : UpdateChannelSettings_args = new UpdateChannelSettings_args();
    args.channelSettings = channelSettings;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Bool;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateChannelSettings_result = new UpdateChannelSettings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "updateChannelSettings failed: unknown result");
    });
    return retval;
  }

  public function getCommonDomains(lastSynced : haxe.Int64) : ChannelDomains {
    oprot_.writeMessageBegin(new TMessage("getCommonDomains", TMessageType.CALL, seqid_));
    var args : GetCommonDomains_args = new GetCommonDomains_args();
    args.lastSynced = lastSynced;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : ChannelDomains;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetCommonDomains_result = new GetCommonDomains_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getCommonDomains failed: unknown result");
    });
    return retval;
  }

  public function getNotificationBadgeCount(localRev : haxe.Int64) : haxe.Int32 {
    oprot_.writeMessageBegin(new TMessage("getNotificationBadgeCount", TMessageType.CALL, seqid_));
    var args : GetNotificationBadgeCount_args = new GetNotificationBadgeCount_args();
    args.localRev = localRev;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : haxe.Int32;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetNotificationBadgeCount_result = new GetNotificationBadgeCount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getNotificationBadgeCount failed: unknown result");
    });
    return retval;
  }

  public function issueChannelToken(channelId : String) : ChannelToken {
    oprot_.writeMessageBegin(new TMessage("issueChannelToken", TMessageType.CALL, seqid_));
    var args : IssueChannelToken_args = new IssueChannelToken_args();
    args.channelId = channelId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : ChannelToken;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : IssueChannelToken_result = new IssueChannelToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "issueChannelToken failed: unknown result");
    });
    return retval;
  }

  public function issueRequestToken(channelId : String, otpId : String) : String {
    oprot_.writeMessageBegin(new TMessage("issueRequestToken", TMessageType.CALL, seqid_));
    var args : IssueRequestToken_args = new IssueRequestToken_args();
    args.channelId = channelId;
    args.otpId = otpId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : IssueRequestToken_result = new IssueRequestToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "issueRequestToken failed: unknown result");
    });
    return retval;
  }

  public function issueRequestTokenWithAuthScheme(channelId : String, otpId : String, authScheme : List< String>, returnUrl : String) : RequestTokenResponse {
    oprot_.writeMessageBegin(new TMessage("issueRequestTokenWithAuthScheme", TMessageType.CALL, seqid_));
    var args : IssueRequestTokenWithAuthScheme_args = new IssueRequestTokenWithAuthScheme_args();
    args.channelId = channelId;
    args.otpId = otpId;
    args.authScheme = authScheme;
    args.returnUrl = returnUrl;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : RequestTokenResponse;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : IssueRequestTokenWithAuthScheme_result = new IssueRequestTokenWithAuthScheme_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "issueRequestTokenWithAuthScheme failed: unknown result");
    });
    return retval;
  }

  public function issueRequestTokenForAutoLogin(channelId : String, otpId : String, redirectUrl : String) : String {
    oprot_.writeMessageBegin(new TMessage("issueRequestTokenForAutoLogin", TMessageType.CALL, seqid_));
    var args : IssueRequestTokenForAutoLogin_args = new IssueRequestTokenForAutoLogin_args();
    args.channelId = channelId;
    args.otpId = otpId;
    args.redirectUrl = redirectUrl;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : IssueRequestTokenForAutoLogin_result = new IssueRequestTokenForAutoLogin_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "issueRequestTokenForAutoLogin failed: unknown result");
    });
    return retval;
  }

  public function getUpdatedChannelIds(channelIds : List< ChannelIdWithLastUpdated>) : List< String> {
    oprot_.writeMessageBegin(new TMessage("getUpdatedChannelIds", TMessageType.CALL, seqid_));
    var args : GetUpdatedChannelIds_args = new GetUpdatedChannelIds_args();
    args.channelIds = channelIds;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetUpdatedChannelIds_result = new GetUpdatedChannelIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getUpdatedChannelIds failed: unknown result");
    });
    return retval;
  }

  public function reserveCoinUse(request : CoinUseReservation, locale : String) : String {
    oprot_.writeMessageBegin(new TMessage("reserveCoinUse", TMessageType.CALL, seqid_));
    var args : ReserveCoinUse_args = new ReserveCoinUse_args();
    args.request = request;
    args.locale = locale;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ReserveCoinUse_result = new ReserveCoinUse_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "reserveCoinUse failed: unknown result");
    });
    return retval;
  }

  public function revokeChannel(channelId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("revokeChannel", TMessageType.CALL, seqid_));
    var args : RevokeChannel_args = new RevokeChannel_args();
    args.channelId = channelId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RevokeChannel_result = new RevokeChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function syncChannelData(lastSynced : haxe.Int64, locale : String) : ChannelSyncDatas {
    oprot_.writeMessageBegin(new TMessage("syncChannelData", TMessageType.CALL, seqid_));
    var args : SyncChannelData_args = new SyncChannelData_args();
    args.lastSynced = lastSynced;
    args.locale = locale;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : ChannelSyncDatas;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SyncChannelData_result = new SyncChannelData_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "syncChannelData failed: unknown result");
    });
    return retval;
  }

  public function updateChannelNotificationSetting(setting : List< ChannelNotificationSetting>) : Void {
    oprot_.writeMessageBegin(new TMessage("updateChannelNotificationSetting", TMessageType.CALL, seqid_));
    var args : UpdateChannelNotificationSetting_args = new UpdateChannelNotificationSetting_args();
    args.setting = setting;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateChannelNotificationSetting_result = new UpdateChannelNotificationSetting_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

}
