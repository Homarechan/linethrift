/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class ShouldSyncException extends TException implements TBase {
  
  static var STRUCT_DESC = { new TStruct("ShouldSyncException"); };
  static var SYNC_OP_REVISION_FIELD_DESC = { new TField("syncOpRevision", TType.I64, 1); };
  static var SYNC_SCOPE_FIELD_DESC = { new TField("syncScope", TType.STRUCT, 2); };
  static var SYNC_REASON_FIELD_DESC = { new TField("syncReason", TType.I32, 3); };
  static var MESSAGE_FIELD_DESC = { new TField("message", TType.STRING, 4); };

  @:isVar
  public var syncOpRevision(get,set) : haxe.Int64;
  @:isVar
  public var syncScope(get,set) : SyncScope;
  @:isVar
  public var syncReason(get,set) : Int;
  @:isVar
  public var message(get,set) : String;

  inline static var SYNCOPREVISION_FIELD_ID : Int = 1;
  inline static var SYNCSCOPE_FIELD_ID : Int = 2;
  inline static var SYNCREASON_FIELD_ID : Int = 3;
  inline static var MESSAGE_FIELD_ID : Int = 4;

  private var __isset_syncOpRevision : Bool = false;
  private var __isset_syncReason : Bool = false;

  public function new() {
    super();
  }

  public function get_syncOpRevision() : haxe.Int64 {
    return this.syncOpRevision;
  }

  public function set_syncOpRevision(syncOpRevision:haxe.Int64) : haxe.Int64 {
    this.syncOpRevision = syncOpRevision;
    this.__isset_syncOpRevision = true;
    return this.syncOpRevision;
  }

  public function unsetSyncOpRevision() : Void {
    this.__isset_syncOpRevision = false;
  }

  // Returns true if field syncOpRevision is set (has been assigned a value) and false otherwise
  public function isSetSyncOpRevision() : Bool {
    return this.__isset_syncOpRevision;
  }

  public function get_syncScope() : SyncScope {
    return this.syncScope;
  }

  public function set_syncScope(syncScope:SyncScope) : SyncScope {
    this.syncScope = syncScope;
    return this.syncScope;
  }

  public function unsetSyncScope() : Void {
    this.syncScope = null;
  }

  // Returns true if field syncScope is set (has been assigned a value) and false otherwise
  public function isSetSyncScope() : Bool {
    return this.syncScope != null;
  }

  public function get_syncReason() : Int {
    return this.syncReason;
  }

  public function set_syncReason(syncReason:Int) : Int {
    this.syncReason = syncReason;
    this.__isset_syncReason = true;
    return this.syncReason;
  }

  public function unsetSyncReason() : Void {
    this.__isset_syncReason = false;
  }

  // Returns true if field syncReason is set (has been assigned a value) and false otherwise
  public function isSetSyncReason() : Bool {
    return this.__isset_syncReason;
  }

  public function get_message() : String {
    return this.message;
  }

  public function set_message(message:String) : String {
    this.message = message;
    return this.message;
  }

  public function unsetMessage() : Void {
    this.message = null;
  }

  // Returns true if field message is set (has been assigned a value) and false otherwise
  public function isSetMessage() : Bool {
    return this.message != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case SYNCOPREVISION_FIELD_ID:
      if (value == null) {
        unsetSyncOpRevision();
      } else {
        this.syncOpRevision = value;
      }

    case SYNCSCOPE_FIELD_ID:
      if (value == null) {
        unsetSyncScope();
      } else {
        this.syncScope = value;
      }

    case SYNCREASON_FIELD_ID:
      if (value == null) {
        unsetSyncReason();
      } else {
        this.syncReason = value;
      }

    case MESSAGE_FIELD_ID:
      if (value == null) {
        unsetMessage();
      } else {
        this.message = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case SYNCOPREVISION_FIELD_ID:
      return this.syncOpRevision;
    case SYNCSCOPE_FIELD_ID:
      return this.syncScope;
    case SYNCREASON_FIELD_ID:
      return this.syncReason;
    case MESSAGE_FIELD_ID:
      return this.message;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case SYNCOPREVISION_FIELD_ID:
      return isSetSyncOpRevision();
    case SYNCSCOPE_FIELD_ID:
      return isSetSyncScope();
    case SYNCREASON_FIELD_ID:
      return isSetSyncReason();
    case MESSAGE_FIELD_ID:
      return isSetMessage();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SYNCOPREVISION_FIELD_ID:
            if (field.type == TType.I64) {
              this.syncOpRevision = iprot.readI64();
              this.__isset_syncOpRevision = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SYNCSCOPE_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.syncScope = new SyncScope();
              this.syncScope.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SYNCREASON_FIELD_ID:
            if (field.type == TType.I32) {
              this.syncReason = iprot.readI32();
              this.__isset_syncReason = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MESSAGE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.message = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SYNC_OP_REVISION_FIELD_DESC);
      oprot.writeI64(this.syncOpRevision);
      oprot.writeFieldEnd();
      if (this.syncScope != null) {
        oprot.writeFieldBegin(SYNC_SCOPE_FIELD_DESC);
        this.syncScope.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SYNC_REASON_FIELD_DESC);
      oprot.writeI32(this.syncReason);
      oprot.writeFieldEnd();
      if (this.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(this.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "ShouldSyncException(";
    var first : Bool = true;

    ret += "syncOpRevision:";
    ret += this.syncOpRevision;
    first = false;
    if (!first) ret +=  ", ";
    ret += "syncScope:";
    if (this.syncScope == null) {
      ret += "null";
    } else {
      ret += this.syncScope;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "syncReason:";
    var syncReason_name : String = .SyncTriggerReason.VALUES_TO_NAMES[this.syncReason];
    if (syncReason_name != null) {
      ret += syncReason_name;
      ret += " (";
    }
    ret += this.syncReason;
    if (syncReason_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "message:";
    if (this.message == null) {
      ret += "null";
    } else {
      ret += this.message;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetSyncReason() && !.SyncTriggerReason.VALID_VALUES.contains(syncReason)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'syncReason' has been assigned the invalid value " + syncReason);
    }
  }

}

