/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class CreateQrcodeBase64Image_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("createQrcodeBase64Image_args"); };
  static var URL_FIELD_DESC = { new TField("url", TType.STRING, 2); };
  static var CHARACTER_SET_FIELD_DESC = { new TField("characterSet", TType.STRING, 3); };
  static var IMAGE_SIZE_FIELD_DESC = { new TField("imageSize", TType.I32, 4); };
  static var X_FIELD_DESC = { new TField("x", TType.I32, 5); };
  static var Y_FIELD_DESC = { new TField("y", TType.I32, 6); };
  static var WIDTH_FIELD_DESC = { new TField("width", TType.I32, 7); };
  static var HEIGHT_FIELD_DESC = { new TField("height", TType.I32, 8); };

  @:isVar
  public var url(get,set) : String;
  @:isVar
  public var characterSet(get,set) : String;
  @:isVar
  public var imageSize(get,set) : haxe.Int32;
  @:isVar
  public var x(get,set) : haxe.Int32;
  @:isVar
  public var y(get,set) : haxe.Int32;
  @:isVar
  public var width(get,set) : haxe.Int32;
  @:isVar
  public var height(get,set) : haxe.Int32;

  inline static var URL_FIELD_ID : Int = 2;
  inline static var CHARACTERSET_FIELD_ID : Int = 3;
  inline static var IMAGESIZE_FIELD_ID : Int = 4;
  inline static var X_FIELD_ID : Int = 5;
  inline static var Y_FIELD_ID : Int = 6;
  inline static var WIDTH_FIELD_ID : Int = 7;
  inline static var HEIGHT_FIELD_ID : Int = 8;

  private var __isset_imageSize : Bool = false;
  private var __isset_x : Bool = false;
  private var __isset_y : Bool = false;
  private var __isset_width : Bool = false;
  private var __isset_height : Bool = false;

  public function new() {
  }

  public function get_url() : String {
    return this.url;
  }

  public function set_url(url:String) : String {
    this.url = url;
    return this.url;
  }

  public function unsetUrl() : Void {
    this.url = null;
  }

  // Returns true if field url is set (has been assigned a value) and false otherwise
  public function isSetUrl() : Bool {
    return this.url != null;
  }

  public function get_characterSet() : String {
    return this.characterSet;
  }

  public function set_characterSet(characterSet:String) : String {
    this.characterSet = characterSet;
    return this.characterSet;
  }

  public function unsetCharacterSet() : Void {
    this.characterSet = null;
  }

  // Returns true if field characterSet is set (has been assigned a value) and false otherwise
  public function isSetCharacterSet() : Bool {
    return this.characterSet != null;
  }

  public function get_imageSize() : haxe.Int32 {
    return this.imageSize;
  }

  public function set_imageSize(imageSize:haxe.Int32) : haxe.Int32 {
    this.imageSize = imageSize;
    this.__isset_imageSize = true;
    return this.imageSize;
  }

  public function unsetImageSize() : Void {
    this.__isset_imageSize = false;
  }

  // Returns true if field imageSize is set (has been assigned a value) and false otherwise
  public function isSetImageSize() : Bool {
    return this.__isset_imageSize;
  }

  public function get_x() : haxe.Int32 {
    return this.x;
  }

  public function set_x(x:haxe.Int32) : haxe.Int32 {
    this.x = x;
    this.__isset_x = true;
    return this.x;
  }

  public function unsetX() : Void {
    this.__isset_x = false;
  }

  // Returns true if field x is set (has been assigned a value) and false otherwise
  public function isSetX() : Bool {
    return this.__isset_x;
  }

  public function get_y() : haxe.Int32 {
    return this.y;
  }

  public function set_y(y:haxe.Int32) : haxe.Int32 {
    this.y = y;
    this.__isset_y = true;
    return this.y;
  }

  public function unsetY() : Void {
    this.__isset_y = false;
  }

  // Returns true if field y is set (has been assigned a value) and false otherwise
  public function isSetY() : Bool {
    return this.__isset_y;
  }

  public function get_width() : haxe.Int32 {
    return this.width;
  }

  public function set_width(width:haxe.Int32) : haxe.Int32 {
    this.width = width;
    this.__isset_width = true;
    return this.width;
  }

  public function unsetWidth() : Void {
    this.__isset_width = false;
  }

  // Returns true if field width is set (has been assigned a value) and false otherwise
  public function isSetWidth() : Bool {
    return this.__isset_width;
  }

  public function get_height() : haxe.Int32 {
    return this.height;
  }

  public function set_height(height:haxe.Int32) : haxe.Int32 {
    this.height = height;
    this.__isset_height = true;
    return this.height;
  }

  public function unsetHeight() : Void {
    this.__isset_height = false;
  }

  // Returns true if field height is set (has been assigned a value) and false otherwise
  public function isSetHeight() : Bool {
    return this.__isset_height;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case URL_FIELD_ID:
      if (value == null) {
        unsetUrl();
      } else {
        this.url = value;
      }

    case CHARACTERSET_FIELD_ID:
      if (value == null) {
        unsetCharacterSet();
      } else {
        this.characterSet = value;
      }

    case IMAGESIZE_FIELD_ID:
      if (value == null) {
        unsetImageSize();
      } else {
        this.imageSize = value;
      }

    case X_FIELD_ID:
      if (value == null) {
        unsetX();
      } else {
        this.x = value;
      }

    case Y_FIELD_ID:
      if (value == null) {
        unsetY();
      } else {
        this.y = value;
      }

    case WIDTH_FIELD_ID:
      if (value == null) {
        unsetWidth();
      } else {
        this.width = value;
      }

    case HEIGHT_FIELD_ID:
      if (value == null) {
        unsetHeight();
      } else {
        this.height = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case URL_FIELD_ID:
      return this.url;
    case CHARACTERSET_FIELD_ID:
      return this.characterSet;
    case IMAGESIZE_FIELD_ID:
      return this.imageSize;
    case X_FIELD_ID:
      return this.x;
    case Y_FIELD_ID:
      return this.y;
    case WIDTH_FIELD_ID:
      return this.width;
    case HEIGHT_FIELD_ID:
      return this.height;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case URL_FIELD_ID:
      return isSetUrl();
    case CHARACTERSET_FIELD_ID:
      return isSetCharacterSet();
    case IMAGESIZE_FIELD_ID:
      return isSetImageSize();
    case X_FIELD_ID:
      return isSetX();
    case Y_FIELD_ID:
      return isSetY();
    case WIDTH_FIELD_ID:
      return isSetWidth();
    case HEIGHT_FIELD_ID:
      return isSetHeight();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case URL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.url = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CHARACTERSET_FIELD_ID:
            if (field.type == TType.STRING) {
              this.characterSet = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case IMAGESIZE_FIELD_ID:
            if (field.type == TType.I32) {
              this.imageSize = iprot.readI32();
              this.__isset_imageSize = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case X_FIELD_ID:
            if (field.type == TType.I32) {
              this.x = iprot.readI32();
              this.__isset_x = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case Y_FIELD_ID:
            if (field.type == TType.I32) {
              this.y = iprot.readI32();
              this.__isset_y = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case WIDTH_FIELD_ID:
            if (field.type == TType.I32) {
              this.width = iprot.readI32();
              this.__isset_width = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case HEIGHT_FIELD_ID:
            if (field.type == TType.I32) {
              this.height = iprot.readI32();
              this.__isset_height = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(this.url);
        oprot.writeFieldEnd();
      }
      if (this.characterSet != null) {
        oprot.writeFieldBegin(CHARACTER_SET_FIELD_DESC);
        oprot.writeString(this.characterSet);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IMAGE_SIZE_FIELD_DESC);
      oprot.writeI32(this.imageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(X_FIELD_DESC);
      oprot.writeI32(this.x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(Y_FIELD_DESC);
      oprot.writeI32(this.y);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIDTH_FIELD_DESC);
      oprot.writeI32(this.width);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
      oprot.writeI32(this.height);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "createQrcodeBase64Image_args(";
    var first : Bool = true;

    ret += "url:";
    if (this.url == null) {
      ret += "null";
    } else {
      ret += this.url;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "characterSet:";
    if (this.characterSet == null) {
      ret += "null";
    } else {
      ret += this.characterSet;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "imageSize:";
    ret += this.imageSize;
    first = false;
    if (!first) ret +=  ", ";
    ret += "x:";
    ret += this.x;
    first = false;
    if (!first) ret +=  ", ";
    ret += "y:";
    ret += this.y;
    first = false;
    if (!first) ret +=  ", ";
    ret += "width:";
    ret += this.width;
    first = false;
    if (!first) ret +=  ", ";
    ret += "height:";
    ret += this.height;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

