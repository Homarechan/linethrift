/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SubscriptionState implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SubscriptionState"); };
  static var SUBSCRIPTION_ID_FIELD_DESC = { new TField("subscriptionId", TType.I64, 1); };
  static var TTL_MILLIS_FIELD_DESC = { new TField("ttlMillis", TType.I64, 2); };

  @:isVar
  public var subscriptionId(get,set) : haxe.Int64;
  @:isVar
  public var ttlMillis(get,set) : haxe.Int64;

  inline static var SUBSCRIPTIONID_FIELD_ID : Int = 1;
  inline static var TTLMILLIS_FIELD_ID : Int = 2;

  private var __isset_subscriptionId : Bool = false;
  private var __isset_ttlMillis : Bool = false;

  public function new() {
  }

  public function get_subscriptionId() : haxe.Int64 {
    return this.subscriptionId;
  }

  public function set_subscriptionId(subscriptionId:haxe.Int64) : haxe.Int64 {
    this.subscriptionId = subscriptionId;
    this.__isset_subscriptionId = true;
    return this.subscriptionId;
  }

  public function unsetSubscriptionId() : Void {
    this.__isset_subscriptionId = false;
  }

  // Returns true if field subscriptionId is set (has been assigned a value) and false otherwise
  public function isSetSubscriptionId() : Bool {
    return this.__isset_subscriptionId;
  }

  public function get_ttlMillis() : haxe.Int64 {
    return this.ttlMillis;
  }

  public function set_ttlMillis(ttlMillis:haxe.Int64) : haxe.Int64 {
    this.ttlMillis = ttlMillis;
    this.__isset_ttlMillis = true;
    return this.ttlMillis;
  }

  public function unsetTtlMillis() : Void {
    this.__isset_ttlMillis = false;
  }

  // Returns true if field ttlMillis is set (has been assigned a value) and false otherwise
  public function isSetTtlMillis() : Bool {
    return this.__isset_ttlMillis;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case SUBSCRIPTIONID_FIELD_ID:
      if (value == null) {
        unsetSubscriptionId();
      } else {
        this.subscriptionId = value;
      }

    case TTLMILLIS_FIELD_ID:
      if (value == null) {
        unsetTtlMillis();
      } else {
        this.ttlMillis = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case SUBSCRIPTIONID_FIELD_ID:
      return this.subscriptionId;
    case TTLMILLIS_FIELD_ID:
      return this.ttlMillis;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case SUBSCRIPTIONID_FIELD_ID:
      return isSetSubscriptionId();
    case TTLMILLIS_FIELD_ID:
      return isSetTtlMillis();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUBSCRIPTIONID_FIELD_ID:
            if (field.type == TType.I64) {
              this.subscriptionId = iprot.readI64();
              this.__isset_subscriptionId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TTLMILLIS_FIELD_ID:
            if (field.type == TType.I64) {
              this.ttlMillis = iprot.readI64();
              this.__isset_ttlMillis = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SUBSCRIPTION_ID_FIELD_DESC);
      oprot.writeI64(this.subscriptionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TTL_MILLIS_FIELD_DESC);
      oprot.writeI64(this.ttlMillis);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SubscriptionState(";
    var first : Bool = true;

    ret += "subscriptionId:";
    ret += this.subscriptionId;
    first = false;
    if (!first) ret +=  ", ";
    ret += "ttlMillis:";
    ret += this.ttlMillis;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

