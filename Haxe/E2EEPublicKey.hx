/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class E2EEPublicKey implements TBase {
  
  static var STRUCT_DESC = { new TStruct("E2EEPublicKey"); };
  static var VERSION_FIELD_DESC = { new TField("version", TType.I32, 1); };
  static var KEY_ID_FIELD_DESC = { new TField("keyId", TType.I32, 2); };
  static var KEY_DATA_FIELD_DESC = { new TField("keyData", TType.STRING, 4); };
  static var CREATED_TIME_FIELD_DESC = { new TField("createdTime", TType.I64, 5); };

  @:isVar
  public var version(get,set) : haxe.Int32;
  @:isVar
  public var keyId(get,set) : haxe.Int32;
  @:isVar
  public var keyData(get,set) : haxe.io.Bytes;
  @:isVar
  public var createdTime(get,set) : haxe.Int64;

  inline static var VERSION_FIELD_ID : Int = 1;
  inline static var KEYID_FIELD_ID : Int = 2;
  inline static var KEYDATA_FIELD_ID : Int = 4;
  inline static var CREATEDTIME_FIELD_ID : Int = 5;

  private var __isset_version : Bool = false;
  private var __isset_keyId : Bool = false;
  private var __isset_createdTime : Bool = false;

  public function new() {
  }

  public function get_version() : haxe.Int32 {
    return this.version;
  }

  public function set_version(version:haxe.Int32) : haxe.Int32 {
    this.version = version;
    this.__isset_version = true;
    return this.version;
  }

  public function unsetVersion() : Void {
    this.__isset_version = false;
  }

  // Returns true if field version is set (has been assigned a value) and false otherwise
  public function isSetVersion() : Bool {
    return this.__isset_version;
  }

  public function get_keyId() : haxe.Int32 {
    return this.keyId;
  }

  public function set_keyId(keyId:haxe.Int32) : haxe.Int32 {
    this.keyId = keyId;
    this.__isset_keyId = true;
    return this.keyId;
  }

  public function unsetKeyId() : Void {
    this.__isset_keyId = false;
  }

  // Returns true if field keyId is set (has been assigned a value) and false otherwise
  public function isSetKeyId() : Bool {
    return this.__isset_keyId;
  }

  public function get_keyData() : haxe.io.Bytes {
    return this.keyData;
  }

  public function set_keyData(keyData:haxe.io.Bytes) : haxe.io.Bytes {
    this.keyData = keyData;
    return this.keyData;
  }

  public function unsetKeyData() : Void {
    this.keyData = null;
  }

  // Returns true if field keyData is set (has been assigned a value) and false otherwise
  public function isSetKeyData() : Bool {
    return this.keyData != null;
  }

  public function get_createdTime() : haxe.Int64 {
    return this.createdTime;
  }

  public function set_createdTime(createdTime:haxe.Int64) : haxe.Int64 {
    this.createdTime = createdTime;
    this.__isset_createdTime = true;
    return this.createdTime;
  }

  public function unsetCreatedTime() : Void {
    this.__isset_createdTime = false;
  }

  // Returns true if field createdTime is set (has been assigned a value) and false otherwise
  public function isSetCreatedTime() : Bool {
    return this.__isset_createdTime;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case VERSION_FIELD_ID:
      if (value == null) {
        unsetVersion();
      } else {
        this.version = value;
      }

    case KEYID_FIELD_ID:
      if (value == null) {
        unsetKeyId();
      } else {
        this.keyId = value;
      }

    case KEYDATA_FIELD_ID:
      if (value == null) {
        unsetKeyData();
      } else {
        this.keyData = value;
      }

    case CREATEDTIME_FIELD_ID:
      if (value == null) {
        unsetCreatedTime();
      } else {
        this.createdTime = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case VERSION_FIELD_ID:
      return this.version;
    case KEYID_FIELD_ID:
      return this.keyId;
    case KEYDATA_FIELD_ID:
      return this.keyData;
    case CREATEDTIME_FIELD_ID:
      return this.createdTime;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case VERSION_FIELD_ID:
      return isSetVersion();
    case KEYID_FIELD_ID:
      return isSetKeyId();
    case KEYDATA_FIELD_ID:
      return isSetKeyData();
    case CREATEDTIME_FIELD_ID:
      return isSetCreatedTime();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case VERSION_FIELD_ID:
            if (field.type == TType.I32) {
              this.version = iprot.readI32();
              this.__isset_version = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case KEYID_FIELD_ID:
            if (field.type == TType.I32) {
              this.keyId = iprot.readI32();
              this.__isset_keyId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case KEYDATA_FIELD_ID:
            if (field.type == TType.STRING) {
              this.keyData = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CREATEDTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.createdTime = iprot.readI64();
              this.__isset_createdTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(this.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KEY_ID_FIELD_DESC);
      oprot.writeI32(this.keyId);
      oprot.writeFieldEnd();
      if (this.keyData != null) {
        oprot.writeFieldBegin(KEY_DATA_FIELD_DESC);
        oprot.writeBinary(this.keyData);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_TIME_FIELD_DESC);
      oprot.writeI64(this.createdTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "E2EEPublicKey(";
    var first : Bool = true;

    ret += "version:";
    ret += this.version;
    first = false;
    if (!first) ret +=  ", ";
    ret += "keyId:";
    ret += this.keyId;
    first = false;
    if (!first) ret +=  ", ";
    ret += "keyData:";
    if (this.keyData == null) {
      ret += "null";
    } else {
        ret += "BINARY";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "createdTime:";
    ret += this.createdTime;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

