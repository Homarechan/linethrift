/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SquareChat implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SquareChat"); };
  static var SQUARE_CHAT_MID_FIELD_DESC = { new TField("squareChatMid", TType.STRING, 1); };
  static var SQUARE_MID_FIELD_DESC = { new TField("squareMid", TType.STRING, 2); };
  static var TYPE_FIELD_DESC = { new TField("type", TType.I32, 3); };
  static var NAME_FIELD_DESC = { new TField("name", TType.STRING, 4); };
  static var CHAT_IMAGE_OBS_HASH_FIELD_DESC = { new TField("chatImageObsHash", TType.STRING, 5); };
  static var SQUARE_CHAT_REVISION_FIELD_DESC = { new TField("squareChatRevision", TType.I64, 6); };
  static var MAX_MEMBER_COUNT_FIELD_DESC = { new TField("maxMemberCount", TType.I32, 7); };
  static var STATE_FIELD_DESC = { new TField("state", TType.I32, 8); };

  @:isVar
  public var squareChatMid(get,set) : String;
  @:isVar
  public var squareMid(get,set) : String;
  @:isVar
  public var type(get,set) : Int;
  @:isVar
  public var name(get,set) : String;
  @:isVar
  public var chatImageObsHash(get,set) : String;
  @:isVar
  public var squareChatRevision(get,set) : haxe.Int64;
  @:isVar
  public var maxMemberCount(get,set) : haxe.Int32;
  @:isVar
  public var state(get,set) : Int;

  inline static var SQUARECHATMID_FIELD_ID : Int = 1;
  inline static var SQUAREMID_FIELD_ID : Int = 2;
  inline static var TYPE_FIELD_ID : Int = 3;
  inline static var NAME_FIELD_ID : Int = 4;
  inline static var CHATIMAGEOBSHASH_FIELD_ID : Int = 5;
  inline static var SQUARECHATREVISION_FIELD_ID : Int = 6;
  inline static var MAXMEMBERCOUNT_FIELD_ID : Int = 7;
  inline static var STATE_FIELD_ID : Int = 8;

  private var __isset_type : Bool = false;
  private var __isset_squareChatRevision : Bool = false;
  private var __isset_maxMemberCount : Bool = false;
  private var __isset_state : Bool = false;

  public function new() {
  }

  public function get_squareChatMid() : String {
    return this.squareChatMid;
  }

  public function set_squareChatMid(squareChatMid:String) : String {
    this.squareChatMid = squareChatMid;
    return this.squareChatMid;
  }

  public function unsetSquareChatMid() : Void {
    this.squareChatMid = null;
  }

  // Returns true if field squareChatMid is set (has been assigned a value) and false otherwise
  public function isSetSquareChatMid() : Bool {
    return this.squareChatMid != null;
  }

  public function get_squareMid() : String {
    return this.squareMid;
  }

  public function set_squareMid(squareMid:String) : String {
    this.squareMid = squareMid;
    return this.squareMid;
  }

  public function unsetSquareMid() : Void {
    this.squareMid = null;
  }

  // Returns true if field squareMid is set (has been assigned a value) and false otherwise
  public function isSetSquareMid() : Bool {
    return this.squareMid != null;
  }

  public function get_type() : Int {
    return this.type;
  }

  public function set_type(type:Int) : Int {
    this.type = type;
    this.__isset_type = true;
    return this.type;
  }

  public function unsetType() : Void {
    this.__isset_type = false;
  }

  // Returns true if field type is set (has been assigned a value) and false otherwise
  public function isSetType() : Bool {
    return this.__isset_type;
  }

  public function get_name() : String {
    return this.name;
  }

  public function set_name(name:String) : String {
    this.name = name;
    return this.name;
  }

  public function unsetName() : Void {
    this.name = null;
  }

  // Returns true if field name is set (has been assigned a value) and false otherwise
  public function isSetName() : Bool {
    return this.name != null;
  }

  public function get_chatImageObsHash() : String {
    return this.chatImageObsHash;
  }

  public function set_chatImageObsHash(chatImageObsHash:String) : String {
    this.chatImageObsHash = chatImageObsHash;
    return this.chatImageObsHash;
  }

  public function unsetChatImageObsHash() : Void {
    this.chatImageObsHash = null;
  }

  // Returns true if field chatImageObsHash is set (has been assigned a value) and false otherwise
  public function isSetChatImageObsHash() : Bool {
    return this.chatImageObsHash != null;
  }

  public function get_squareChatRevision() : haxe.Int64 {
    return this.squareChatRevision;
  }

  public function set_squareChatRevision(squareChatRevision:haxe.Int64) : haxe.Int64 {
    this.squareChatRevision = squareChatRevision;
    this.__isset_squareChatRevision = true;
    return this.squareChatRevision;
  }

  public function unsetSquareChatRevision() : Void {
    this.__isset_squareChatRevision = false;
  }

  // Returns true if field squareChatRevision is set (has been assigned a value) and false otherwise
  public function isSetSquareChatRevision() : Bool {
    return this.__isset_squareChatRevision;
  }

  public function get_maxMemberCount() : haxe.Int32 {
    return this.maxMemberCount;
  }

  public function set_maxMemberCount(maxMemberCount:haxe.Int32) : haxe.Int32 {
    this.maxMemberCount = maxMemberCount;
    this.__isset_maxMemberCount = true;
    return this.maxMemberCount;
  }

  public function unsetMaxMemberCount() : Void {
    this.__isset_maxMemberCount = false;
  }

  // Returns true if field maxMemberCount is set (has been assigned a value) and false otherwise
  public function isSetMaxMemberCount() : Bool {
    return this.__isset_maxMemberCount;
  }

  public function get_state() : Int {
    return this.state;
  }

  public function set_state(state:Int) : Int {
    this.state = state;
    this.__isset_state = true;
    return this.state;
  }

  public function unsetState() : Void {
    this.__isset_state = false;
  }

  // Returns true if field state is set (has been assigned a value) and false otherwise
  public function isSetState() : Bool {
    return this.__isset_state;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case SQUARECHATMID_FIELD_ID:
      if (value == null) {
        unsetSquareChatMid();
      } else {
        this.squareChatMid = value;
      }

    case SQUAREMID_FIELD_ID:
      if (value == null) {
        unsetSquareMid();
      } else {
        this.squareMid = value;
      }

    case TYPE_FIELD_ID:
      if (value == null) {
        unsetType();
      } else {
        this.type = value;
      }

    case NAME_FIELD_ID:
      if (value == null) {
        unsetName();
      } else {
        this.name = value;
      }

    case CHATIMAGEOBSHASH_FIELD_ID:
      if (value == null) {
        unsetChatImageObsHash();
      } else {
        this.chatImageObsHash = value;
      }

    case SQUARECHATREVISION_FIELD_ID:
      if (value == null) {
        unsetSquareChatRevision();
      } else {
        this.squareChatRevision = value;
      }

    case MAXMEMBERCOUNT_FIELD_ID:
      if (value == null) {
        unsetMaxMemberCount();
      } else {
        this.maxMemberCount = value;
      }

    case STATE_FIELD_ID:
      if (value == null) {
        unsetState();
      } else {
        this.state = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case SQUARECHATMID_FIELD_ID:
      return this.squareChatMid;
    case SQUAREMID_FIELD_ID:
      return this.squareMid;
    case TYPE_FIELD_ID:
      return this.type;
    case NAME_FIELD_ID:
      return this.name;
    case CHATIMAGEOBSHASH_FIELD_ID:
      return this.chatImageObsHash;
    case SQUARECHATREVISION_FIELD_ID:
      return this.squareChatRevision;
    case MAXMEMBERCOUNT_FIELD_ID:
      return this.maxMemberCount;
    case STATE_FIELD_ID:
      return this.state;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case SQUARECHATMID_FIELD_ID:
      return isSetSquareChatMid();
    case SQUAREMID_FIELD_ID:
      return isSetSquareMid();
    case TYPE_FIELD_ID:
      return isSetType();
    case NAME_FIELD_ID:
      return isSetName();
    case CHATIMAGEOBSHASH_FIELD_ID:
      return isSetChatImageObsHash();
    case SQUARECHATREVISION_FIELD_ID:
      return isSetSquareChatRevision();
    case MAXMEMBERCOUNT_FIELD_ID:
      return isSetMaxMemberCount();
    case STATE_FIELD_ID:
      return isSetState();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SQUARECHATMID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.squareChatMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SQUAREMID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.squareMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TYPE_FIELD_ID:
            if (field.type == TType.I32) {
              this.type = iprot.readI32();
              this.__isset_type = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case NAME_FIELD_ID:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CHATIMAGEOBSHASH_FIELD_ID:
            if (field.type == TType.STRING) {
              this.chatImageObsHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case SQUARECHATREVISION_FIELD_ID:
            if (field.type == TType.I64) {
              this.squareChatRevision = iprot.readI64();
              this.__isset_squareChatRevision = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MAXMEMBERCOUNT_FIELD_ID:
            if (field.type == TType.I32) {
              this.maxMemberCount = iprot.readI32();
              this.__isset_maxMemberCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case STATE_FIELD_ID:
            if (field.type == TType.I32) {
              this.state = iprot.readI32();
              this.__isset_state = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.squareChatMid != null) {
        oprot.writeFieldBegin(SQUARE_CHAT_MID_FIELD_DESC);
        oprot.writeString(this.squareChatMid);
        oprot.writeFieldEnd();
      }
      if (this.squareMid != null) {
        oprot.writeFieldBegin(SQUARE_MID_FIELD_DESC);
        oprot.writeString(this.squareMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.chatImageObsHash != null) {
        oprot.writeFieldBegin(CHAT_IMAGE_OBS_HASH_FIELD_DESC);
        oprot.writeString(this.chatImageObsHash);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SQUARE_CHAT_REVISION_FIELD_DESC);
      oprot.writeI64(this.squareChatRevision);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_MEMBER_COUNT_FIELD_DESC);
      oprot.writeI32(this.maxMemberCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(this.state);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SquareChat(";
    var first : Bool = true;

    ret += "squareChatMid:";
    if (this.squareChatMid == null) {
      ret += "null";
    } else {
      ret += this.squareChatMid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "squareMid:";
    if (this.squareMid == null) {
      ret += "null";
    } else {
      ret += this.squareMid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "type:";
    var type_name : String = .SquareChatType.VALUES_TO_NAMES[this.type];
    if (type_name != null) {
      ret += type_name;
      ret += " (";
    }
    ret += this.type;
    if (type_name != null) {
      ret += ")";
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "name:";
    if (this.name == null) {
      ret += "null";
    } else {
      ret += this.name;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "chatImageObsHash:";
    if (this.chatImageObsHash == null) {
      ret += "null";
    } else {
      ret += this.chatImageObsHash;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "squareChatRevision:";
    ret += this.squareChatRevision;
    first = false;
    if (!first) ret +=  ", ";
    ret += "maxMemberCount:";
    ret += this.maxMemberCount;
    first = false;
    if (!first) ret +=  ", ";
    ret += "state:";
    var state_name : String = .SquareChatState.VALUES_TO_NAMES[this.state];
    if (state_name != null) {
      ret += state_name;
      ret += " (";
    }
    ret += this.state;
    if (state_name != null) {
      ret += ")";
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !.SquareChatType.VALID_VALUES.contains(type)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'type' has been assigned the invalid value " + type);
    }
    if (isSetState() && !.SquareChatState.VALID_VALUES.contains(state)){
      throw new TProtocolException(TProtocolException.UNKNOWN, "The field 'state' has been assigned the invalid value " + state);
    }
  }

}

