/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SnsFriends implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SnsFriends"); };
  static var SNS_FRIENDS_FIELD_DESC = { new TField("snsFriends", TType.LIST, 1); };
  static var HAS_MORE_FIELD_DESC = { new TField("hasMore", TType.BOOL, 2); };

  @:isVar
  public var snsFriends(get,set) : List< SnsFriend>;
  @:isVar
  public var hasMore(get,set) : Bool;

  inline static var SNSFRIENDS_FIELD_ID : Int = 1;
  inline static var HASMORE_FIELD_ID : Int = 2;

  private var __isset_hasMore : Bool = false;

  public function new() {
  }

  public function get_snsFriends() : List< SnsFriend> {
    return this.snsFriends;
  }

  public function set_snsFriends(snsFriends:List< SnsFriend>) : List< SnsFriend> {
    this.snsFriends = snsFriends;
    return this.snsFriends;
  }

  public function unsetSnsFriends() : Void {
    this.snsFriends = null;
  }

  // Returns true if field snsFriends is set (has been assigned a value) and false otherwise
  public function isSetSnsFriends() : Bool {
    return this.snsFriends != null;
  }

  public function get_hasMore() : Bool {
    return this.hasMore;
  }

  public function set_hasMore(hasMore:Bool) : Bool {
    this.hasMore = hasMore;
    this.__isset_hasMore = true;
    return this.hasMore;
  }

  public function unsetHasMore() : Void {
    this.__isset_hasMore = false;
  }

  // Returns true if field hasMore is set (has been assigned a value) and false otherwise
  public function isSetHasMore() : Bool {
    return this.__isset_hasMore;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case SNSFRIENDS_FIELD_ID:
      if (value == null) {
        unsetSnsFriends();
      } else {
        this.snsFriends = value;
      }

    case HASMORE_FIELD_ID:
      if (value == null) {
        unsetHasMore();
      } else {
        this.hasMore = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case SNSFRIENDS_FIELD_ID:
      return this.snsFriends;
    case HASMORE_FIELD_ID:
      return this.hasMore;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case SNSFRIENDS_FIELD_ID:
      return isSetSnsFriends();
    case HASMORE_FIELD_ID:
      return isSetHasMore();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SNSFRIENDS_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list273 = iprot.readListBegin();
                this.snsFriends = new List< SnsFriend>();
                for( _i274 in 0 ... _list273.size)
                {
                  var _elem275 : SnsFriend;
                  _elem275 = new SnsFriend();
                  _elem275.read(iprot);
                  this.snsFriends.add(_elem275);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case HASMORE_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.hasMore = iprot.readBool();
              this.__isset_hasMore = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.snsFriends != null) {
        oprot.writeFieldBegin(SNS_FRIENDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.snsFriends.length));
          for( elem276 in this.snsFriends)
          {
            elem276.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HAS_MORE_FIELD_DESC);
      oprot.writeBool(this.hasMore);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SnsFriends(";
    var first : Bool = true;

    ret += "snsFriends:";
    if (this.snsFriends == null) {
      ret += "null";
    } else {
      ret += this.snsFriends;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "hasMore:";
    ret += this.hasMore;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

