/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class RegisterChannelCP_args implements TBase {
  
  static var STRUCT_DESC = { new TStruct("registerChannelCP_args"); };
  static var CP_ID_FIELD_DESC = { new TField("cpId", TType.STRING, 2); };
  static var REGISTER_PASSWORD_FIELD_DESC = { new TField("registerPassword", TType.STRING, 3); };

  @:isVar
  public var cpId(get,set) : String;
  @:isVar
  public var registerPassword(get,set) : String;

  inline static var CPID_FIELD_ID : Int = 2;
  inline static var REGISTERPASSWORD_FIELD_ID : Int = 3;


  public function new() {
  }

  public function get_cpId() : String {
    return this.cpId;
  }

  public function set_cpId(cpId:String) : String {
    this.cpId = cpId;
    return this.cpId;
  }

  public function unsetCpId() : Void {
    this.cpId = null;
  }

  // Returns true if field cpId is set (has been assigned a value) and false otherwise
  public function isSetCpId() : Bool {
    return this.cpId != null;
  }

  public function get_registerPassword() : String {
    return this.registerPassword;
  }

  public function set_registerPassword(registerPassword:String) : String {
    this.registerPassword = registerPassword;
    return this.registerPassword;
  }

  public function unsetRegisterPassword() : Void {
    this.registerPassword = null;
  }

  // Returns true if field registerPassword is set (has been assigned a value) and false otherwise
  public function isSetRegisterPassword() : Bool {
    return this.registerPassword != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case CPID_FIELD_ID:
      if (value == null) {
        unsetCpId();
      } else {
        this.cpId = value;
      }

    case REGISTERPASSWORD_FIELD_ID:
      if (value == null) {
        unsetRegisterPassword();
      } else {
        this.registerPassword = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case CPID_FIELD_ID:
      return this.cpId;
    case REGISTERPASSWORD_FIELD_ID:
      return this.registerPassword;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case CPID_FIELD_ID:
      return isSetCpId();
    case REGISTERPASSWORD_FIELD_ID:
      return isSetRegisterPassword();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case CPID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.cpId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case REGISTERPASSWORD_FIELD_ID:
            if (field.type == TType.STRING) {
              this.registerPassword = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.cpId != null) {
        oprot.writeFieldBegin(CP_ID_FIELD_DESC);
        oprot.writeString(this.cpId);
        oprot.writeFieldEnd();
      }
      if (this.registerPassword != null) {
        oprot.writeFieldBegin(REGISTER_PASSWORD_FIELD_DESC);
        oprot.writeString(this.registerPassword);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "registerChannelCP_args(";
    var first : Bool = true;

    ret += "cpId:";
    if (this.cpId == null) {
      ret += "null";
    } else {
      ret += this.cpId;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "registerPassword:";
    if (this.registerPassword == null) {
      ret += "null";
    } else {
      ret += this.registerPassword;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

