/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class SquareEventNotifiedInviteIntoSquareChat implements TBase {
  
  static var STRUCT_DESC = { new TStruct("SquareEventNotifiedInviteIntoSquareChat"); };
  static var SQUARE_CHAT_MID_FIELD_DESC = { new TField("squareChatMid", TType.STRING, 1); };
  static var INVITEES_FIELD_DESC = { new TField("invitees", TType.LIST, 2); };
  static var INVITOR_FIELD_DESC = { new TField("invitor", TType.STRUCT, 3); };
  static var INVITOR_RELATION_FIELD_DESC = { new TField("invitorRelation", TType.STRUCT, 4); };

  @:isVar
  public var squareChatMid(get,set) : String;
  @:isVar
  public var invitees(get,set) : List< SquareMember>;
  @:isVar
  public var invitor(get,set) : SquareMember;
  @:isVar
  public var invitorRelation(get,set) : SquareMemberRelation;

  inline static var SQUARECHATMID_FIELD_ID : Int = 1;
  inline static var INVITEES_FIELD_ID : Int = 2;
  inline static var INVITOR_FIELD_ID : Int = 3;
  inline static var INVITORRELATION_FIELD_ID : Int = 4;


  public function new() {
  }

  public function get_squareChatMid() : String {
    return this.squareChatMid;
  }

  public function set_squareChatMid(squareChatMid:String) : String {
    this.squareChatMid = squareChatMid;
    return this.squareChatMid;
  }

  public function unsetSquareChatMid() : Void {
    this.squareChatMid = null;
  }

  // Returns true if field squareChatMid is set (has been assigned a value) and false otherwise
  public function isSetSquareChatMid() : Bool {
    return this.squareChatMid != null;
  }

  public function get_invitees() : List< SquareMember> {
    return this.invitees;
  }

  public function set_invitees(invitees:List< SquareMember>) : List< SquareMember> {
    this.invitees = invitees;
    return this.invitees;
  }

  public function unsetInvitees() : Void {
    this.invitees = null;
  }

  // Returns true if field invitees is set (has been assigned a value) and false otherwise
  public function isSetInvitees() : Bool {
    return this.invitees != null;
  }

  public function get_invitor() : SquareMember {
    return this.invitor;
  }

  public function set_invitor(invitor:SquareMember) : SquareMember {
    this.invitor = invitor;
    return this.invitor;
  }

  public function unsetInvitor() : Void {
    this.invitor = null;
  }

  // Returns true if field invitor is set (has been assigned a value) and false otherwise
  public function isSetInvitor() : Bool {
    return this.invitor != null;
  }

  public function get_invitorRelation() : SquareMemberRelation {
    return this.invitorRelation;
  }

  public function set_invitorRelation(invitorRelation:SquareMemberRelation) : SquareMemberRelation {
    this.invitorRelation = invitorRelation;
    return this.invitorRelation;
  }

  public function unsetInvitorRelation() : Void {
    this.invitorRelation = null;
  }

  // Returns true if field invitorRelation is set (has been assigned a value) and false otherwise
  public function isSetInvitorRelation() : Bool {
    return this.invitorRelation != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case SQUARECHATMID_FIELD_ID:
      if (value == null) {
        unsetSquareChatMid();
      } else {
        this.squareChatMid = value;
      }

    case INVITEES_FIELD_ID:
      if (value == null) {
        unsetInvitees();
      } else {
        this.invitees = value;
      }

    case INVITOR_FIELD_ID:
      if (value == null) {
        unsetInvitor();
      } else {
        this.invitor = value;
      }

    case INVITORRELATION_FIELD_ID:
      if (value == null) {
        unsetInvitorRelation();
      } else {
        this.invitorRelation = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case SQUARECHATMID_FIELD_ID:
      return this.squareChatMid;
    case INVITEES_FIELD_ID:
      return this.invitees;
    case INVITOR_FIELD_ID:
      return this.invitor;
    case INVITORRELATION_FIELD_ID:
      return this.invitorRelation;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case SQUARECHATMID_FIELD_ID:
      return isSetSquareChatMid();
    case INVITEES_FIELD_ID:
      return isSetInvitees();
    case INVITOR_FIELD_ID:
      return isSetInvitor();
    case INVITORRELATION_FIELD_ID:
      return isSetInvitorRelation();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SQUARECHATMID_FIELD_ID:
            if (field.type == TType.STRING) {
              this.squareChatMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case INVITEES_FIELD_ID:
            if (field.type == TType.LIST) {
              {
                var _list475 = iprot.readListBegin();
                this.invitees = new List< SquareMember>();
                for( _i476 in 0 ... _list475.size)
                {
                  var _elem477 : SquareMember;
                  _elem477 = new SquareMember();
                  _elem477.read(iprot);
                  this.invitees.add(_elem477);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case INVITOR_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.invitor = new SquareMember();
              this.invitor.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case INVITORRELATION_FIELD_ID:
            if (field.type == TType.STRUCT) {
              this.invitorRelation = new SquareMemberRelation();
              this.invitorRelation.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.squareChatMid != null) {
        oprot.writeFieldBegin(SQUARE_CHAT_MID_FIELD_DESC);
        oprot.writeString(this.squareChatMid);
        oprot.writeFieldEnd();
      }
      if (this.invitees != null) {
        oprot.writeFieldBegin(INVITEES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.invitees.length));
          for( elem478 in this.invitees)
          {
            elem478.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.invitor != null) {
        oprot.writeFieldBegin(INVITOR_FIELD_DESC);
        this.invitor.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.invitorRelation != null) {
        oprot.writeFieldBegin(INVITOR_RELATION_FIELD_DESC);
        this.invitorRelation.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "SquareEventNotifiedInviteIntoSquareChat(";
    var first : Bool = true;

    ret += "squareChatMid:";
    if (this.squareChatMid == null) {
      ret += "null";
    } else {
      ret += this.squareChatMid;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "invitees:";
    if (this.invitees == null) {
      ret += "null";
    } else {
      ret += this.invitees;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "invitor:";
    if (this.invitor == null) {
      ret += "null";
    } else {
      ret += this.invitor;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "invitorRelation:";
    if (this.invitorRelation == null) {
      ret += "null";
    } else {
      ret += this.invitorRelation;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

