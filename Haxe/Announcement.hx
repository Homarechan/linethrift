/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class Announcement implements TBase {
  
  static var STRUCT_DESC = { new TStruct("Announcement"); };
  static var INDEX_FIELD_DESC = { new TField("index", TType.I32, 1); };
  static var FORCE_UPDATE_FIELD_DESC = { new TField("forceUpdate", TType.BOOL, 10); };
  static var TITLE_FIELD_DESC = { new TField("title", TType.STRING, 11); };
  static var TEXT_FIELD_DESC = { new TField("text", TType.STRING, 12); };
  static var CREATED_TIME_FIELD_DESC = { new TField("createdTime", TType.I64, 13); };
  static var PICTURE_URL_FIELD_DESC = { new TField("pictureUrl", TType.STRING, 14); };
  static var THUMBNAIL_URL_FIELD_DESC = { new TField("thumbnailUrl", TType.STRING, 15); };

  @:isVar
  public var index(get,set) : haxe.Int32;
  @:isVar
  public var forceUpdate(get,set) : Bool;
  @:isVar
  public var title(get,set) : String;
  @:isVar
  public var text(get,set) : String;
  @:isVar
  public var createdTime(get,set) : haxe.Int64;
  @:isVar
  public var pictureUrl(get,set) : String;
  @:isVar
  public var thumbnailUrl(get,set) : String;

  inline static var INDEX_FIELD_ID : Int = 1;
  inline static var FORCEUPDATE_FIELD_ID : Int = 10;
  inline static var TITLE_FIELD_ID : Int = 11;
  inline static var TEXT_FIELD_ID : Int = 12;
  inline static var CREATEDTIME_FIELD_ID : Int = 13;
  inline static var PICTUREURL_FIELD_ID : Int = 14;
  inline static var THUMBNAILURL_FIELD_ID : Int = 15;

  private var __isset_index : Bool = false;
  private var __isset_forceUpdate : Bool = false;
  private var __isset_createdTime : Bool = false;

  public function new() {
  }

  public function get_index() : haxe.Int32 {
    return this.index;
  }

  public function set_index(index:haxe.Int32) : haxe.Int32 {
    this.index = index;
    this.__isset_index = true;
    return this.index;
  }

  public function unsetIndex() : Void {
    this.__isset_index = false;
  }

  // Returns true if field index is set (has been assigned a value) and false otherwise
  public function isSetIndex() : Bool {
    return this.__isset_index;
  }

  public function get_forceUpdate() : Bool {
    return this.forceUpdate;
  }

  public function set_forceUpdate(forceUpdate:Bool) : Bool {
    this.forceUpdate = forceUpdate;
    this.__isset_forceUpdate = true;
    return this.forceUpdate;
  }

  public function unsetForceUpdate() : Void {
    this.__isset_forceUpdate = false;
  }

  // Returns true if field forceUpdate is set (has been assigned a value) and false otherwise
  public function isSetForceUpdate() : Bool {
    return this.__isset_forceUpdate;
  }

  public function get_title() : String {
    return this.title;
  }

  public function set_title(title:String) : String {
    this.title = title;
    return this.title;
  }

  public function unsetTitle() : Void {
    this.title = null;
  }

  // Returns true if field title is set (has been assigned a value) and false otherwise
  public function isSetTitle() : Bool {
    return this.title != null;
  }

  public function get_text() : String {
    return this.text;
  }

  public function set_text(text:String) : String {
    this.text = text;
    return this.text;
  }

  public function unsetText() : Void {
    this.text = null;
  }

  // Returns true if field text is set (has been assigned a value) and false otherwise
  public function isSetText() : Bool {
    return this.text != null;
  }

  public function get_createdTime() : haxe.Int64 {
    return this.createdTime;
  }

  public function set_createdTime(createdTime:haxe.Int64) : haxe.Int64 {
    this.createdTime = createdTime;
    this.__isset_createdTime = true;
    return this.createdTime;
  }

  public function unsetCreatedTime() : Void {
    this.__isset_createdTime = false;
  }

  // Returns true if field createdTime is set (has been assigned a value) and false otherwise
  public function isSetCreatedTime() : Bool {
    return this.__isset_createdTime;
  }

  public function get_pictureUrl() : String {
    return this.pictureUrl;
  }

  public function set_pictureUrl(pictureUrl:String) : String {
    this.pictureUrl = pictureUrl;
    return this.pictureUrl;
  }

  public function unsetPictureUrl() : Void {
    this.pictureUrl = null;
  }

  // Returns true if field pictureUrl is set (has been assigned a value) and false otherwise
  public function isSetPictureUrl() : Bool {
    return this.pictureUrl != null;
  }

  public function get_thumbnailUrl() : String {
    return this.thumbnailUrl;
  }

  public function set_thumbnailUrl(thumbnailUrl:String) : String {
    this.thumbnailUrl = thumbnailUrl;
    return this.thumbnailUrl;
  }

  public function unsetThumbnailUrl() : Void {
    this.thumbnailUrl = null;
  }

  // Returns true if field thumbnailUrl is set (has been assigned a value) and false otherwise
  public function isSetThumbnailUrl() : Bool {
    return this.thumbnailUrl != null;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case INDEX_FIELD_ID:
      if (value == null) {
        unsetIndex();
      } else {
        this.index = value;
      }

    case FORCEUPDATE_FIELD_ID:
      if (value == null) {
        unsetForceUpdate();
      } else {
        this.forceUpdate = value;
      }

    case TITLE_FIELD_ID:
      if (value == null) {
        unsetTitle();
      } else {
        this.title = value;
      }

    case TEXT_FIELD_ID:
      if (value == null) {
        unsetText();
      } else {
        this.text = value;
      }

    case CREATEDTIME_FIELD_ID:
      if (value == null) {
        unsetCreatedTime();
      } else {
        this.createdTime = value;
      }

    case PICTUREURL_FIELD_ID:
      if (value == null) {
        unsetPictureUrl();
      } else {
        this.pictureUrl = value;
      }

    case THUMBNAILURL_FIELD_ID:
      if (value == null) {
        unsetThumbnailUrl();
      } else {
        this.thumbnailUrl = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case INDEX_FIELD_ID:
      return this.index;
    case FORCEUPDATE_FIELD_ID:
      return this.forceUpdate;
    case TITLE_FIELD_ID:
      return this.title;
    case TEXT_FIELD_ID:
      return this.text;
    case CREATEDTIME_FIELD_ID:
      return this.createdTime;
    case PICTUREURL_FIELD_ID:
      return this.pictureUrl;
    case THUMBNAILURL_FIELD_ID:
      return this.thumbnailUrl;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case INDEX_FIELD_ID:
      return isSetIndex();
    case FORCEUPDATE_FIELD_ID:
      return isSetForceUpdate();
    case TITLE_FIELD_ID:
      return isSetTitle();
    case TEXT_FIELD_ID:
      return isSetText();
    case CREATEDTIME_FIELD_ID:
      return isSetCreatedTime();
    case PICTUREURL_FIELD_ID:
      return isSetPictureUrl();
    case THUMBNAILURL_FIELD_ID:
      return isSetThumbnailUrl();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case INDEX_FIELD_ID:
            if (field.type == TType.I32) {
              this.index = iprot.readI32();
              this.__isset_index = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case FORCEUPDATE_FIELD_ID:
            if (field.type == TType.BOOL) {
              this.forceUpdate = iprot.readBool();
              this.__isset_forceUpdate = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TITLE_FIELD_ID:
            if (field.type == TType.STRING) {
              this.title = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case TEXT_FIELD_ID:
            if (field.type == TType.STRING) {
              this.text = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case CREATEDTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.createdTime = iprot.readI64();
              this.__isset_createdTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case PICTUREURL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.pictureUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case THUMBNAILURL_FIELD_ID:
            if (field.type == TType.STRING) {
              this.thumbnailUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeI32(this.index);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FORCE_UPDATE_FIELD_DESC);
      oprot.writeBool(this.forceUpdate);
      oprot.writeFieldEnd();
      if (this.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(this.title);
        oprot.writeFieldEnd();
      }
      if (this.text != null) {
        oprot.writeFieldBegin(TEXT_FIELD_DESC);
        oprot.writeString(this.text);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_TIME_FIELD_DESC);
      oprot.writeI64(this.createdTime);
      oprot.writeFieldEnd();
      if (this.pictureUrl != null) {
        oprot.writeFieldBegin(PICTURE_URL_FIELD_DESC);
        oprot.writeString(this.pictureUrl);
        oprot.writeFieldEnd();
      }
      if (this.thumbnailUrl != null) {
        oprot.writeFieldBegin(THUMBNAIL_URL_FIELD_DESC);
        oprot.writeString(this.thumbnailUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "Announcement(";
    var first : Bool = true;

    ret += "index:";
    ret += this.index;
    first = false;
    if (!first) ret +=  ", ";
    ret += "forceUpdate:";
    ret += this.forceUpdate;
    first = false;
    if (!first) ret +=  ", ";
    ret += "title:";
    if (this.title == null) {
      ret += "null";
    } else {
      ret += this.title;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "text:";
    if (this.text == null) {
      ret += "null";
    } else {
      ret += this.text;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "createdTime:";
    ret += this.createdTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "pictureUrl:";
    if (this.pictureUrl == null) {
      ret += "null";
    } else {
      ret += this.pictureUrl;
    }
    first = false;
    if (!first) ret +=  ", ";
    ret += "thumbnailUrl:";
    if (this.thumbnailUrl == null) {
      ret += "null";
    } else {
      ret += this.thumbnailUrl;
    }
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

