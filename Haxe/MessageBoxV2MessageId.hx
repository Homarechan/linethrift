/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


class MessageBoxV2MessageId implements TBase {
  
  static var STRUCT_DESC = { new TStruct("MessageBoxV2MessageId"); };
  static var DELIVERED_TIME_FIELD_DESC = { new TField("deliveredTime", TType.I64, 1); };
  static var MESSAGE_ID_FIELD_DESC = { new TField("messageId", TType.I64, 2); };

  @:isVar
  public var deliveredTime(get,set) : haxe.Int64;
  @:isVar
  public var messageId(get,set) : haxe.Int64;

  inline static var DELIVEREDTIME_FIELD_ID : Int = 1;
  inline static var MESSAGEID_FIELD_ID : Int = 2;

  private var __isset_deliveredTime : Bool = false;
  private var __isset_messageId : Bool = false;

  public function new() {
  }

  public function get_deliveredTime() : haxe.Int64 {
    return this.deliveredTime;
  }

  public function set_deliveredTime(deliveredTime:haxe.Int64) : haxe.Int64 {
    this.deliveredTime = deliveredTime;
    this.__isset_deliveredTime = true;
    return this.deliveredTime;
  }

  public function unsetDeliveredTime() : Void {
    this.__isset_deliveredTime = false;
  }

  // Returns true if field deliveredTime is set (has been assigned a value) and false otherwise
  public function isSetDeliveredTime() : Bool {
    return this.__isset_deliveredTime;
  }

  public function get_messageId() : haxe.Int64 {
    return this.messageId;
  }

  public function set_messageId(messageId:haxe.Int64) : haxe.Int64 {
    this.messageId = messageId;
    this.__isset_messageId = true;
    return this.messageId;
  }

  public function unsetMessageId() : Void {
    this.__isset_messageId = false;
  }

  // Returns true if field messageId is set (has been assigned a value) and false otherwise
  public function isSetMessageId() : Bool {
    return this.__isset_messageId;
  }

  public function setFieldValue(fieldID : Int, value : Dynamic) : Void {
    switch (fieldID) {
    case DELIVEREDTIME_FIELD_ID:
      if (value == null) {
        unsetDeliveredTime();
      } else {
        this.deliveredTime = value;
      }

    case MESSAGEID_FIELD_ID:
      if (value == null) {
        unsetMessageId();
      } else {
        this.messageId = value;
      }

    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function getFieldValue(fieldID : Int) : Dynamic {
    switch (fieldID) {
    case DELIVEREDTIME_FIELD_ID:
      return this.deliveredTime;
    case MESSAGEID_FIELD_ID:
      return this.messageId;
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public function isSet(fieldID : Int) : Bool {
    switch (fieldID) {
    case DELIVEREDTIME_FIELD_ID:
      return isSetDeliveredTime();
    case MESSAGEID_FIELD_ID:
      return isSetMessageId();
    default:
      throw new ArgumentError("Field " + fieldID + " doesn't exist!");
    }
  }

  public function read( iprot : TProtocol) : Void {
    iprot.IncrementRecursionDepth();
    try
    {
      var field : TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DELIVEREDTIME_FIELD_ID:
            if (field.type == TType.I64) {
              this.deliveredTime = iprot.readI64();
              this.__isset_deliveredTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          case MESSAGEID_FIELD_ID:
            if (field.type == TType.I64) {
              this.messageId = iprot.readI64();
              this.__isset_messageId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      iprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      iprot.DecrementRecursionDepth();
      throw e;
    }

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public function write(oprot:TProtocol) : Void {
    validate();
    oprot.IncrementRecursionDepth();
    try
    {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DELIVERED_TIME_FIELD_DESC);
      oprot.writeI64(this.deliveredTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
      oprot.writeI64(this.messageId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
      oprot.DecrementRecursionDepth();
    }
    catch(e:Dynamic)
    {
      oprot.DecrementRecursionDepth();
      throw e;
    }
  }

  public function toString() : String {
    var ret : String = "MessageBoxV2MessageId(";
    var first : Bool = true;

    ret += "deliveredTime:";
    ret += this.deliveredTime;
    first = false;
    if (!first) ret +=  ", ";
    ret += "messageId:";
    ret += this.messageId;
    first = false;
    ret += ")";
    return ret;
  }

  public function validate() : Void {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

