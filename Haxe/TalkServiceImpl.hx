/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package;

import org.apache.thrift.helper.*;
import haxe.io.Bytes;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import haxe.ds.ObjectMap;

#if flash
import flash.errors.ArgumentError;
#end

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;



class TalkServiceImpl implements TalkService {

  public function new( iprot : TProtocol, oprot : TProtocol = null)
  {
    iprot_ = iprot;
    if (oprot == null) {
      oprot_ = iprot;
    } else {
      oprot_ = oprot;
    }
  }

  private var iprot_ : TProtocol;
  private var oprot_ : TProtocol;
  private var seqid_ : Int;

  public function getInputProtocol() : TProtocol
  {
    return this.iprot_;
  }

  public function getOutputProtocol() : TProtocol
  {
    return this.oprot_;
  }

  public function getChatRoomAnnouncementsBulk(chatRoomMids : List< String>) : StringMap< List< ChatRoomAnnouncement>> {
    oprot_.writeMessageBegin(new TMessage("getChatRoomAnnouncementsBulk", TMessageType.CALL, seqid_));
    var args : GetChatRoomAnnouncementsBulk_args = new GetChatRoomAnnouncementsBulk_args();
    args.chatRoomMids = chatRoomMids;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : StringMap< List< ChatRoomAnnouncement>>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetChatRoomAnnouncementsBulk_result = new GetChatRoomAnnouncementsBulk_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getChatRoomAnnouncementsBulk failed: unknown result");
    });
    return retval;
  }

  public function getChatRoomAnnouncements(chatRoomMid : String) : List< ChatRoomAnnouncement> {
    oprot_.writeMessageBegin(new TMessage("getChatRoomAnnouncements", TMessageType.CALL, seqid_));
    var args : GetChatRoomAnnouncements_args = new GetChatRoomAnnouncements_args();
    args.chatRoomMid = chatRoomMid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< ChatRoomAnnouncement>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetChatRoomAnnouncements_result = new GetChatRoomAnnouncements_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getChatRoomAnnouncements failed: unknown result");
    });
    return retval;
  }

  public function createChatRoomAnnouncement(reqSeq : haxe.Int32, chatRoomMid : String, type : Int, contents : ChatRoomAnnouncementContents) : ChatRoomAnnouncement {
    oprot_.writeMessageBegin(new TMessage("createChatRoomAnnouncement", TMessageType.CALL, seqid_));
    var args : CreateChatRoomAnnouncement_args = new CreateChatRoomAnnouncement_args();
    args.reqSeq = reqSeq;
    args.chatRoomMid = chatRoomMid;
    args.type = type;
    args.contents = contents;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : ChatRoomAnnouncement;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : CreateChatRoomAnnouncement_result = new CreateChatRoomAnnouncement_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "createChatRoomAnnouncement failed: unknown result");
    });
    return retval;
  }

  public function removeChatRoomAnnouncement(reqSeq : haxe.Int32, chatRoomMid : String, announcementSeq : haxe.Int64) : Void {
    oprot_.writeMessageBegin(new TMessage("removeChatRoomAnnouncement", TMessageType.CALL, seqid_));
    var args : RemoveChatRoomAnnouncement_args = new RemoveChatRoomAnnouncement_args();
    args.reqSeq = reqSeq;
    args.chatRoomMid = chatRoomMid;
    args.announcementSeq = announcementSeq;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RemoveChatRoomAnnouncement_result = new RemoveChatRoomAnnouncement_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function unsendMessage(seq : haxe.Int32, messageId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("unsendMessage", TMessageType.CALL, seqid_));
    var args : UnsendMessage_args = new UnsendMessage_args();
    args.seq = seq;
    args.messageId = messageId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UnsendMessage_result = new UnsendMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function getGroupWithoutMembers(groupId : String) : Group {
    oprot_.writeMessageBegin(new TMessage("getGroupWithoutMembers", TMessageType.CALL, seqid_));
    var args : GetGroupWithoutMembers_args = new GetGroupWithoutMembers_args();
    args.groupId = groupId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Group;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetGroupWithoutMembers_result = new GetGroupWithoutMembers_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getGroupWithoutMembers failed: unknown result");
    });
    return retval;
  }

  public function requestResendMessage(reqSeq : haxe.Int32, senderMid : String, messageId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("requestResendMessage", TMessageType.CALL, seqid_));
    var args : RequestResendMessage_args = new RequestResendMessage_args();
    args.reqSeq = reqSeq;
    args.senderMid = senderMid;
    args.messageId = messageId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RequestResendMessage_result = new RequestResendMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function respondResendMessage(reqSeq : haxe.Int32, receiverMid : String, originalMessageId : String, resendMessage : Message, errorCode : Int) : Void {
    oprot_.writeMessageBegin(new TMessage("respondResendMessage", TMessageType.CALL, seqid_));
    var args : RespondResendMessage_args = new RespondResendMessage_args();
    args.reqSeq = reqSeq;
    args.receiverMid = receiverMid;
    args.originalMessageId = originalMessageId;
    args.resendMessage = resendMessage;
    args.errorCode = errorCode;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RespondResendMessage_result = new RespondResendMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function acceptGroupInvitation(reqSeq : haxe.Int32, groupId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("acceptGroupInvitation", TMessageType.CALL, seqid_));
    var args : AcceptGroupInvitation_args = new AcceptGroupInvitation_args();
    args.reqSeq = reqSeq;
    args.groupId = groupId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : AcceptGroupInvitation_result = new AcceptGroupInvitation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function acceptGroupInvitationByTicket(reqSeq : haxe.Int32, GroupMid : String, ticketId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("acceptGroupInvitationByTicket", TMessageType.CALL, seqid_));
    var args : AcceptGroupInvitationByTicket_args = new AcceptGroupInvitationByTicket_args();
    args.reqSeq = reqSeq;
    args.GroupMid = GroupMid;
    args.ticketId = ticketId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : AcceptGroupInvitationByTicket_result = new AcceptGroupInvitationByTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function acceptProximityMatches(sessionId : String, ids : StringSet) : Void {
    oprot_.writeMessageBegin(new TMessage("acceptProximityMatches", TMessageType.CALL, seqid_));
    var args : AcceptProximityMatches_args = new AcceptProximityMatches_args();
    args.sessionId = sessionId;
    args.ids = ids;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : AcceptProximityMatches_result = new AcceptProximityMatches_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function acquireCallRoute(to : String) : List< String> {
    oprot_.writeMessageBegin(new TMessage("acquireCallRoute", TMessageType.CALL, seqid_));
    var args : AcquireCallRoute_args = new AcquireCallRoute_args();
    args.to = to;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : AcquireCallRoute_result = new AcquireCallRoute_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "acquireCallRoute failed: unknown result");
    });
    return retval;
  }

  public function acquireCallTicket(to : String) : String {
    oprot_.writeMessageBegin(new TMessage("acquireCallTicket", TMessageType.CALL, seqid_));
    var args : AcquireCallTicket_args = new AcquireCallTicket_args();
    args.to = to;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : AcquireCallTicket_result = new AcquireCallTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "acquireCallTicket failed: unknown result");
    });
    return retval;
  }

  public function acquireEncryptedAccessToken(featureType : Int) : String {
    oprot_.writeMessageBegin(new TMessage("acquireEncryptedAccessToken", TMessageType.CALL, seqid_));
    var args : AcquireEncryptedAccessToken_args = new AcquireEncryptedAccessToken_args();
    args.featureType = featureType;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : AcquireEncryptedAccessToken_result = new AcquireEncryptedAccessToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "acquireEncryptedAccessToken failed: unknown result");
    });
    return retval;
  }

  public function addSnsId(snsIdType : Int, snsAccessToken : String) : String {
    oprot_.writeMessageBegin(new TMessage("addSnsId", TMessageType.CALL, seqid_));
    var args : AddSnsId_args = new AddSnsId_args();
    args.snsIdType = snsIdType;
    args.snsAccessToken = snsAccessToken;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : AddSnsId_result = new AddSnsId_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "addSnsId failed: unknown result");
    });
    return retval;
  }

  public function blockContact(reqSeq : haxe.Int32, id : String) : Void {
    oprot_.writeMessageBegin(new TMessage("blockContact", TMessageType.CALL, seqid_));
    var args : BlockContact_args = new BlockContact_args();
    args.reqSeq = reqSeq;
    args.id = id;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : BlockContact_result = new BlockContact_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function blockRecommendation(reqSeq : haxe.Int32, id : String) : Void {
    oprot_.writeMessageBegin(new TMessage("blockRecommendation", TMessageType.CALL, seqid_));
    var args : BlockRecommendation_args = new BlockRecommendation_args();
    args.reqSeq = reqSeq;
    args.id = id;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : BlockRecommendation_result = new BlockRecommendation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function cancelGroupInvitation(reqSeq : haxe.Int32, groupId : String, contactIds : List< String>) : Void {
    oprot_.writeMessageBegin(new TMessage("cancelGroupInvitation", TMessageType.CALL, seqid_));
    var args : CancelGroupInvitation_args = new CancelGroupInvitation_args();
    args.reqSeq = reqSeq;
    args.groupId = groupId;
    args.contactIds = contactIds;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : CancelGroupInvitation_result = new CancelGroupInvitation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function changeVerificationMethod(sessionId : String, method : Int) : VerificationSessionData {
    oprot_.writeMessageBegin(new TMessage("changeVerificationMethod", TMessageType.CALL, seqid_));
    var args : ChangeVerificationMethod_args = new ChangeVerificationMethod_args();
    args.sessionId = sessionId;
    args.method = method;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : VerificationSessionData;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ChangeVerificationMethod_result = new ChangeVerificationMethod_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "changeVerificationMethod failed: unknown result");
    });
    return retval;
  }

  public function clearIdentityCredential() : Void {
    oprot_.writeMessageBegin(new TMessage("clearIdentityCredential", TMessageType.CALL, seqid_));
    var args : ClearIdentityCredential_args = new ClearIdentityCredential_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ClearIdentityCredential_result = new ClearIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function clearMessageBox(channelId : String, messageBoxId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("clearMessageBox", TMessageType.CALL, seqid_));
    var args : ClearMessageBox_args = new ClearMessageBox_args();
    args.channelId = channelId;
    args.messageBoxId = messageBoxId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ClearMessageBox_result = new ClearMessageBox_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function closeProximityMatch(sessionId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("closeProximityMatch", TMessageType.CALL, seqid_));
    var args : CloseProximityMatch_args = new CloseProximityMatch_args();
    args.sessionId = sessionId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : CloseProximityMatch_result = new CloseProximityMatch_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function commitSendMessage(seq : haxe.Int32, messageId : String, receiverMids : List< String>) : StringMap< String> {
    oprot_.writeMessageBegin(new TMessage("commitSendMessage", TMessageType.CALL, seqid_));
    var args : CommitSendMessage_args = new CommitSendMessage_args();
    args.seq = seq;
    args.messageId = messageId;
    args.receiverMids = receiverMids;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : StringMap< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : CommitSendMessage_result = new CommitSendMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "commitSendMessage failed: unknown result");
    });
    return retval;
  }

  public function commitSendMessages(seq : haxe.Int32, messageIds : List< String>, receiverMids : List< String>) : StringMap< String> {
    oprot_.writeMessageBegin(new TMessage("commitSendMessages", TMessageType.CALL, seqid_));
    var args : CommitSendMessages_args = new CommitSendMessages_args();
    args.seq = seq;
    args.messageIds = messageIds;
    args.receiverMids = receiverMids;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : StringMap< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : CommitSendMessages_result = new CommitSendMessages_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "commitSendMessages failed: unknown result");
    });
    return retval;
  }

  public function commitUpdateProfile(seq : haxe.Int32, attrs : List< Int>, receiverMids : List< String>) : StringMap< String> {
    oprot_.writeMessageBegin(new TMessage("commitUpdateProfile", TMessageType.CALL, seqid_));
    var args : CommitUpdateProfile_args = new CommitUpdateProfile_args();
    args.seq = seq;
    args.attrs = attrs;
    args.receiverMids = receiverMids;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : StringMap< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : CommitUpdateProfile_result = new CommitUpdateProfile_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "commitUpdateProfile failed: unknown result");
    });
    return retval;
  }

  public function confirmEmail(verifier : String, pinCode : String) : Void {
    oprot_.writeMessageBegin(new TMessage("confirmEmail", TMessageType.CALL, seqid_));
    var args : ConfirmEmail_args = new ConfirmEmail_args();
    args.verifier = verifier;
    args.pinCode = pinCode;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ConfirmEmail_result = new ConfirmEmail_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function createGroup(seq : haxe.Int32, name : String, contactIds : List< String>) : Group {
    oprot_.writeMessageBegin(new TMessage("createGroup", TMessageType.CALL, seqid_));
    var args : CreateGroup_args = new CreateGroup_args();
    args.seq = seq;
    args.name = name;
    args.contactIds = contactIds;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Group;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : CreateGroup_result = new CreateGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "createGroup failed: unknown result");
    });
    return retval;
  }

  public function createQrcodeBase64Image(url : String, characterSet : String, imageSize : haxe.Int32, x : haxe.Int32, y : haxe.Int32, width : haxe.Int32, height : haxe.Int32) : String {
    oprot_.writeMessageBegin(new TMessage("createQrcodeBase64Image", TMessageType.CALL, seqid_));
    var args : CreateQrcodeBase64Image_args = new CreateQrcodeBase64Image_args();
    args.url = url;
    args.characterSet = characterSet;
    args.imageSize = imageSize;
    args.x = x;
    args.y = y;
    args.width = width;
    args.height = height;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : CreateQrcodeBase64Image_result = new CreateQrcodeBase64Image_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "createQrcodeBase64Image failed: unknown result");
    });
    return retval;
  }

  public function createRoom(reqSeq : haxe.Int32, contactIds : List< String>) : Room {
    oprot_.writeMessageBegin(new TMessage("createRoom", TMessageType.CALL, seqid_));
    var args : CreateRoom_args = new CreateRoom_args();
    args.reqSeq = reqSeq;
    args.contactIds = contactIds;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Room;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : CreateRoom_result = new CreateRoom_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "createRoom failed: unknown result");
    });
    return retval;
  }

  public function createSession() : String {
    oprot_.writeMessageBegin(new TMessage("createSession", TMessageType.CALL, seqid_));
    var args : CreateSession_args = new CreateSession_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : CreateSession_result = new CreateSession_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "createSession failed: unknown result");
    });
    return retval;
  }

  public function fetchAnnouncements(lastFetchedIndex : haxe.Int32) : List< Announcement> {
    oprot_.writeMessageBegin(new TMessage("fetchAnnouncements", TMessageType.CALL, seqid_));
    var args : FetchAnnouncements_args = new FetchAnnouncements_args();
    args.lastFetchedIndex = lastFetchedIndex;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Announcement>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FetchAnnouncements_result = new FetchAnnouncements_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "fetchAnnouncements failed: unknown result");
    });
    return retval;
  }

  public function fetchMessages(localTs : haxe.Int64, count : haxe.Int32) : List< Message> {
    oprot_.writeMessageBegin(new TMessage("fetchMessages", TMessageType.CALL, seqid_));
    var args : FetchMessages_args = new FetchMessages_args();
    args.localTs = localTs;
    args.count = count;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Message>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FetchMessages_result = new FetchMessages_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "fetchMessages failed: unknown result");
    });
    return retval;
  }

  public function fetchOperations(localRev : haxe.Int64, count : haxe.Int32) : List< Operation> {
    oprot_.writeMessageBegin(new TMessage("fetchOperations", TMessageType.CALL, seqid_));
    var args : FetchOperations_args = new FetchOperations_args();
    args.localRev = localRev;
    args.count = count;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Operation>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FetchOperations_result = new FetchOperations_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "fetchOperations failed: unknown result");
    });
    return retval;
  }

  public function fetchOps(localRev : haxe.Int64, count : haxe.Int32, globalRev : haxe.Int64, individualRev : haxe.Int64) : List< Operation> {
    oprot_.writeMessageBegin(new TMessage("fetchOps", TMessageType.CALL, seqid_));
    var args : FetchOps_args = new FetchOps_args();
    args.localRev = localRev;
    args.count = count;
    args.globalRev = globalRev;
    args.individualRev = individualRev;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Operation>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FetchOps_result = new FetchOps_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "fetchOps failed: unknown result");
    });
    return retval;
  }

  public function findAndAddContactsByEmail(reqSeq : haxe.Int32, emails : StringSet) : StringMap< Contact> {
    oprot_.writeMessageBegin(new TMessage("findAndAddContactsByEmail", TMessageType.CALL, seqid_));
    var args : FindAndAddContactsByEmail_args = new FindAndAddContactsByEmail_args();
    args.reqSeq = reqSeq;
    args.emails = emails;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : StringMap< Contact>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FindAndAddContactsByEmail_result = new FindAndAddContactsByEmail_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "findAndAddContactsByEmail failed: unknown result");
    });
    return retval;
  }

  public function findAndAddContactsByMid(reqSeq : haxe.Int32, mid : String, type : Int, reference : String) : StringMap< Contact> {
    oprot_.writeMessageBegin(new TMessage("findAndAddContactsByMid", TMessageType.CALL, seqid_));
    var args : FindAndAddContactsByMid_args = new FindAndAddContactsByMid_args();
    args.reqSeq = reqSeq;
    args.mid = mid;
    args.type = type;
    args.reference = reference;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : StringMap< Contact>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FindAndAddContactsByMid_result = new FindAndAddContactsByMid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "findAndAddContactsByMid failed: unknown result");
    });
    return retval;
  }

  public function findGroupByTicketV2(ticketId : String) : Group {
    oprot_.writeMessageBegin(new TMessage("findGroupByTicketV2", TMessageType.CALL, seqid_));
    var args : FindGroupByTicketV2_args = new FindGroupByTicketV2_args();
    args.ticketId = ticketId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Group;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FindGroupByTicketV2_result = new FindGroupByTicketV2_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "findGroupByTicketV2 failed: unknown result");
    });
    return retval;
  }

  public function findAndAddContactsByPhone(reqSeq : haxe.Int32, phones : StringSet) : StringMap< Contact> {
    oprot_.writeMessageBegin(new TMessage("findAndAddContactsByPhone", TMessageType.CALL, seqid_));
    var args : FindAndAddContactsByPhone_args = new FindAndAddContactsByPhone_args();
    args.reqSeq = reqSeq;
    args.phones = phones;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : StringMap< Contact>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FindAndAddContactsByPhone_result = new FindAndAddContactsByPhone_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "findAndAddContactsByPhone failed: unknown result");
    });
    return retval;
  }

  public function getFriendRequests(direction : Int, lastSeenSeqId : haxe.Int64) : List< FriendRequest> {
    oprot_.writeMessageBegin(new TMessage("getFriendRequests", TMessageType.CALL, seqid_));
    var args : GetFriendRequests_args = new GetFriendRequests_args();
    args.direction = direction;
    args.lastSeenSeqId = lastSeenSeqId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< FriendRequest>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetFriendRequests_result = new GetFriendRequests_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getFriendRequests failed: unknown result");
    });
    return retval;
  }

  public function removeFriendRequest(direction : Int, midOrEMid : String) : Void {
    oprot_.writeMessageBegin(new TMessage("removeFriendRequest", TMessageType.CALL, seqid_));
    var args : RemoveFriendRequest_args = new RemoveFriendRequest_args();
    args.direction = direction;
    args.midOrEMid = midOrEMid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RemoveFriendRequest_result = new RemoveFriendRequest_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function findAndAddContactsByUserid(reqSeq : haxe.Int32, userid : String) : StringMap< Contact> {
    oprot_.writeMessageBegin(new TMessage("findAndAddContactsByUserid", TMessageType.CALL, seqid_));
    var args : FindAndAddContactsByUserid_args = new FindAndAddContactsByUserid_args();
    args.reqSeq = reqSeq;
    args.userid = userid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : StringMap< Contact>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FindAndAddContactsByUserid_result = new FindAndAddContactsByUserid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "findAndAddContactsByUserid failed: unknown result");
    });
    return retval;
  }

  public function findContactByUserid(userid : String) : Contact {
    oprot_.writeMessageBegin(new TMessage("findContactByUserid", TMessageType.CALL, seqid_));
    var args : FindContactByUserid_args = new FindContactByUserid_args();
    args.userid = userid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Contact;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FindContactByUserid_result = new FindContactByUserid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "findContactByUserid failed: unknown result");
    });
    return retval;
  }

  public function findContactByUserTicket(ticketIdWithTag : String) : Contact {
    oprot_.writeMessageBegin(new TMessage("findContactByUserTicket", TMessageType.CALL, seqid_));
    var args : FindContactByUserTicket_args = new FindContactByUserTicket_args();
    args.ticketIdWithTag = ticketIdWithTag;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Contact;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FindContactByUserTicket_result = new FindContactByUserTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "findContactByUserTicket failed: unknown result");
    });
    return retval;
  }

  public function findContactsByEmail(emails : StringSet) : StringMap< Contact> {
    oprot_.writeMessageBegin(new TMessage("findContactsByEmail", TMessageType.CALL, seqid_));
    var args : FindContactsByEmail_args = new FindContactsByEmail_args();
    args.emails = emails;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : StringMap< Contact>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FindContactsByEmail_result = new FindContactsByEmail_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "findContactsByEmail failed: unknown result");
    });
    return retval;
  }

  public function findContactsByPhone(phones : StringSet) : StringMap< Contact> {
    oprot_.writeMessageBegin(new TMessage("findContactsByPhone", TMessageType.CALL, seqid_));
    var args : FindContactsByPhone_args = new FindContactsByPhone_args();
    args.phones = phones;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : StringMap< Contact>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FindContactsByPhone_result = new FindContactsByPhone_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "findContactsByPhone failed: unknown result");
    });
    return retval;
  }

  public function findSnsIdUserStatus(snsIdType : Int, snsAccessToken : String, udidHash : String) : SnsIdUserStatus {
    oprot_.writeMessageBegin(new TMessage("findSnsIdUserStatus", TMessageType.CALL, seqid_));
    var args : FindSnsIdUserStatus_args = new FindSnsIdUserStatus_args();
    args.snsIdType = snsIdType;
    args.snsAccessToken = snsAccessToken;
    args.udidHash = udidHash;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : SnsIdUserStatus;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FindSnsIdUserStatus_result = new FindSnsIdUserStatus_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "findSnsIdUserStatus failed: unknown result");
    });
    return retval;
  }

  public function finishUpdateVerification(sessionId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("finishUpdateVerification", TMessageType.CALL, seqid_));
    var args : FinishUpdateVerification_args = new FinishUpdateVerification_args();
    args.sessionId = sessionId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FinishUpdateVerification_result = new FinishUpdateVerification_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function generateUserTicket(expirationTime : haxe.Int64, maxUseCount : haxe.Int32) : Ticket {
    oprot_.writeMessageBegin(new TMessage("generateUserTicket", TMessageType.CALL, seqid_));
    var args : GenerateUserTicket_args = new GenerateUserTicket_args();
    args.expirationTime = expirationTime;
    args.maxUseCount = maxUseCount;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Ticket;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GenerateUserTicket_result = new GenerateUserTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "generateUserTicket failed: unknown result");
    });
    return retval;
  }

  public function destroyMessage(seq : haxe.Int32, chatId : String, messageId : String, sessionId : haxe.Int32) : Void {
    oprot_.writeMessageBegin(new TMessage("destroyMessage", TMessageType.CALL, seqid_));
    var args : DestroyMessage_args = new DestroyMessage_args();
    args.seq = seq;
    args.chatId = chatId;
    args.messageId = messageId;
    args.sessionId = sessionId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : DestroyMessage_result = new DestroyMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function getAcceptedProximityMatches(sessionId : String) : StringSet {
    oprot_.writeMessageBegin(new TMessage("getAcceptedProximityMatches", TMessageType.CALL, seqid_));
    var args : GetAcceptedProximityMatches_args = new GetAcceptedProximityMatches_args();
    args.sessionId = sessionId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : StringSet;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetAcceptedProximityMatches_result = new GetAcceptedProximityMatches_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getAcceptedProximityMatches failed: unknown result");
    });
    return retval;
  }

  public function getActiveBuddySubscriberIds() : List< String> {
    oprot_.writeMessageBegin(new TMessage("getActiveBuddySubscriberIds", TMessageType.CALL, seqid_));
    var args : GetActiveBuddySubscriberIds_args = new GetActiveBuddySubscriberIds_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetActiveBuddySubscriberIds_result = new GetActiveBuddySubscriberIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getActiveBuddySubscriberIds failed: unknown result");
    });
    return retval;
  }

  public function getAllContactIds() : List< String> {
    oprot_.writeMessageBegin(new TMessage("getAllContactIds", TMessageType.CALL, seqid_));
    var args : GetAllContactIds_args = new GetAllContactIds_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetAllContactIds_result = new GetAllContactIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getAllContactIds failed: unknown result");
    });
    return retval;
  }

  public function getAuthQrcode(keepLoggedIn : Bool, systemName : String) : AuthQrcode {
    oprot_.writeMessageBegin(new TMessage("getAuthQrcode", TMessageType.CALL, seqid_));
    var args : GetAuthQrcode_args = new GetAuthQrcode_args();
    args.keepLoggedIn = keepLoggedIn;
    args.systemName = systemName;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : AuthQrcode;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetAuthQrcode_result = new GetAuthQrcode_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getAuthQrcode failed: unknown result");
    });
    return retval;
  }

  public function getBlockedContactIds() : List< String> {
    oprot_.writeMessageBegin(new TMessage("getBlockedContactIds", TMessageType.CALL, seqid_));
    var args : GetBlockedContactIds_args = new GetBlockedContactIds_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetBlockedContactIds_result = new GetBlockedContactIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getBlockedContactIds failed: unknown result");
    });
    return retval;
  }

  public function registerWithPhoneNumber(sessionId : String, migrationPincodeSessionId : String) : RegisterWithPhoneNumberResult {
    oprot_.writeMessageBegin(new TMessage("registerWithPhoneNumber", TMessageType.CALL, seqid_));
    var args : RegisterWithPhoneNumber_args = new RegisterWithPhoneNumber_args();
    args.sessionId = sessionId;
    args.migrationPincodeSessionId = migrationPincodeSessionId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : RegisterWithPhoneNumberResult;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RegisterWithPhoneNumber_result = new RegisterWithPhoneNumber_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "registerWithPhoneNumber failed: unknown result");
    });
    return retval;
  }

  public function registerWithPhoneNumberAndPassword(sessionId : String, keynm : String, encrypted : String) : RegisterWithPhoneNumberResult {
    oprot_.writeMessageBegin(new TMessage("registerWithPhoneNumberAndPassword", TMessageType.CALL, seqid_));
    var args : RegisterWithPhoneNumberAndPassword_args = new RegisterWithPhoneNumberAndPassword_args();
    args.sessionId = sessionId;
    args.keynm = keynm;
    args.encrypted = encrypted;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : RegisterWithPhoneNumberResult;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RegisterWithPhoneNumberAndPassword_result = new RegisterWithPhoneNumberAndPassword_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "registerWithPhoneNumberAndPassword failed: unknown result");
    });
    return retval;
  }

  public function getAnalyticsInfo() : AnalyticsInfo {
    oprot_.writeMessageBegin(new TMessage("getAnalyticsInfo", TMessageType.CALL, seqid_));
    var args : GetAnalyticsInfo_args = new GetAnalyticsInfo_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : AnalyticsInfo;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetAnalyticsInfo_result = new GetAnalyticsInfo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getAnalyticsInfo failed: unknown result");
    });
    return retval;
  }

  public function reportClientStatistics(reqSeq : haxe.Int32, category : Int, count : haxe.Int32) : Void {
    oprot_.writeMessageBegin(new TMessage("reportClientStatistics", TMessageType.CALL, seqid_));
    var args : ReportClientStatistics_args = new ReportClientStatistics_args();
    args.reqSeq = reqSeq;
    args.category = category;
    args.count = count;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ReportClientStatistics_result = new ReportClientStatistics_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function verifyPhoneNumberForLogin(verifierFromPhone : String, pinCodeForPhone : String, verifierFromLogin : String) : String {
    oprot_.writeMessageBegin(new TMessage("verifyPhoneNumberForLogin", TMessageType.CALL, seqid_));
    var args : VerifyPhoneNumberForLogin_args = new VerifyPhoneNumberForLogin_args();
    args.verifierFromPhone = verifierFromPhone;
    args.pinCodeForPhone = pinCodeForPhone;
    args.verifierFromLogin = verifierFromLogin;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : VerifyPhoneNumberForLogin_result = new VerifyPhoneNumberForLogin_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "verifyPhoneNumberForLogin failed: unknown result");
    });
    return retval;
  }

  public function verifyPhoneNumber(sessionId : String, pinCode : String, udidHash : String, migrationPincodeSessionId : String, oldUdidHash : String) : PhoneVerificationResult {
    oprot_.writeMessageBegin(new TMessage("verifyPhoneNumber", TMessageType.CALL, seqid_));
    var args : VerifyPhoneNumber_args = new VerifyPhoneNumber_args();
    args.sessionId = sessionId;
    args.pinCode = pinCode;
    args.udidHash = udidHash;
    args.migrationPincodeSessionId = migrationPincodeSessionId;
    args.oldUdidHash = oldUdidHash;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : PhoneVerificationResult;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : VerifyPhoneNumber_result = new VerifyPhoneNumber_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "verifyPhoneNumber failed: unknown result");
    });
    return retval;
  }

  public function getBlockedContactIdsByRange(start : haxe.Int32, count : haxe.Int32) : List< String> {
    oprot_.writeMessageBegin(new TMessage("getBlockedContactIdsByRange", TMessageType.CALL, seqid_));
    var args : GetBlockedContactIdsByRange_args = new GetBlockedContactIdsByRange_args();
    args.start = start;
    args.count = count;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetBlockedContactIdsByRange_result = new GetBlockedContactIdsByRange_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getBlockedContactIdsByRange failed: unknown result");
    });
    return retval;
  }

  public function getBlockedRecommendationIds() : List< String> {
    oprot_.writeMessageBegin(new TMessage("getBlockedRecommendationIds", TMessageType.CALL, seqid_));
    var args : GetBlockedRecommendationIds_args = new GetBlockedRecommendationIds_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetBlockedRecommendationIds_result = new GetBlockedRecommendationIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getBlockedRecommendationIds failed: unknown result");
    });
    return retval;
  }

  public function getBuddyBlockerIds() : List< String> {
    oprot_.writeMessageBegin(new TMessage("getBuddyBlockerIds", TMessageType.CALL, seqid_));
    var args : GetBuddyBlockerIds_args = new GetBuddyBlockerIds_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetBuddyBlockerIds_result = new GetBuddyBlockerIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getBuddyBlockerIds failed: unknown result");
    });
    return retval;
  }

  public function getBuddyLocation(mid : String, index : haxe.Int32) : Geolocation {
    oprot_.writeMessageBegin(new TMessage("getBuddyLocation", TMessageType.CALL, seqid_));
    var args : GetBuddyLocation_args = new GetBuddyLocation_args();
    args.mid = mid;
    args.index = index;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Geolocation;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetBuddyLocation_result = new GetBuddyLocation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getBuddyLocation failed: unknown result");
    });
    return retval;
  }

  public function getCompactContactsModifiedSince(timestamp : haxe.Int64) : List< CompactContact> {
    oprot_.writeMessageBegin(new TMessage("getCompactContactsModifiedSince", TMessageType.CALL, seqid_));
    var args : GetCompactContactsModifiedSince_args = new GetCompactContactsModifiedSince_args();
    args.timestamp = timestamp;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< CompactContact>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetCompactContactsModifiedSince_result = new GetCompactContactsModifiedSince_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getCompactContactsModifiedSince failed: unknown result");
    });
    return retval;
  }

  public function getCompactGroup(groupId : String) : Group {
    oprot_.writeMessageBegin(new TMessage("getCompactGroup", TMessageType.CALL, seqid_));
    var args : GetCompactGroup_args = new GetCompactGroup_args();
    args.groupId = groupId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Group;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetCompactGroup_result = new GetCompactGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getCompactGroup failed: unknown result");
    });
    return retval;
  }

  public function getCompactRoom(roomId : String) : Room {
    oprot_.writeMessageBegin(new TMessage("getCompactRoom", TMessageType.CALL, seqid_));
    var args : GetCompactRoom_args = new GetCompactRoom_args();
    args.roomId = roomId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Room;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetCompactRoom_result = new GetCompactRoom_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getCompactRoom failed: unknown result");
    });
    return retval;
  }

  public function getContact(id : String) : Contact {
    oprot_.writeMessageBegin(new TMessage("getContact", TMessageType.CALL, seqid_));
    var args : GetContact_args = new GetContact_args();
    args.id = id;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Contact;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetContact_result = new GetContact_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getContact failed: unknown result");
    });
    return retval;
  }

  public function getContacts(ids : List< String>) : List< Contact> {
    oprot_.writeMessageBegin(new TMessage("getContacts", TMessageType.CALL, seqid_));
    var args : GetContacts_args = new GetContacts_args();
    args.ids = ids;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Contact>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetContacts_result = new GetContacts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getContacts failed: unknown result");
    });
    return retval;
  }

  public function getContactWithFriendRequestStatus(id : String) : Contact {
    oprot_.writeMessageBegin(new TMessage("getContactWithFriendRequestStatus", TMessageType.CALL, seqid_));
    var args : GetContactWithFriendRequestStatus_args = new GetContactWithFriendRequestStatus_args();
    args.id = id;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Contact;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetContactWithFriendRequestStatus_result = new GetContactWithFriendRequestStatus_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getContactWithFriendRequestStatus failed: unknown result");
    });
    return retval;
  }

  public function getCountryWithRequestIp() : String {
    oprot_.writeMessageBegin(new TMessage("getCountryWithRequestIp", TMessageType.CALL, seqid_));
    var args : GetCountryWithRequestIp_args = new GetCountryWithRequestIp_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetCountryWithRequestIp_result = new GetCountryWithRequestIp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getCountryWithRequestIp failed: unknown result");
    });
    return retval;
  }

  public function getFavoriteMids() : List< String> {
    oprot_.writeMessageBegin(new TMessage("getFavoriteMids", TMessageType.CALL, seqid_));
    var args : GetFavoriteMids_args = new GetFavoriteMids_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetFavoriteMids_result = new GetFavoriteMids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getFavoriteMids failed: unknown result");
    });
    return retval;
  }

  public function getGroup(groupId : String) : Group {
    oprot_.writeMessageBegin(new TMessage("getGroup", TMessageType.CALL, seqid_));
    var args : GetGroup_args = new GetGroup_args();
    args.groupId = groupId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Group;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetGroup_result = new GetGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getGroup failed: unknown result");
    });
    return retval;
  }

  public function getGroupIdsInvited() : List< String> {
    oprot_.writeMessageBegin(new TMessage("getGroupIdsInvited", TMessageType.CALL, seqid_));
    var args : GetGroupIdsInvited_args = new GetGroupIdsInvited_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetGroupIdsInvited_result = new GetGroupIdsInvited_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getGroupIdsInvited failed: unknown result");
    });
    return retval;
  }

  public function getGroupIdsJoined() : List< String> {
    oprot_.writeMessageBegin(new TMessage("getGroupIdsJoined", TMessageType.CALL, seqid_));
    var args : GetGroupIdsJoined_args = new GetGroupIdsJoined_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetGroupIdsJoined_result = new GetGroupIdsJoined_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getGroupIdsJoined failed: unknown result");
    });
    return retval;
  }

  public function getGroups(groupIds : List< String>) : List< Group> {
    oprot_.writeMessageBegin(new TMessage("getGroups", TMessageType.CALL, seqid_));
    var args : GetGroups_args = new GetGroups_args();
    args.groupIds = groupIds;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Group>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetGroups_result = new GetGroups_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getGroups failed: unknown result");
    });
    return retval;
  }

  public function getHiddenContactMids() : List< String> {
    oprot_.writeMessageBegin(new TMessage("getHiddenContactMids", TMessageType.CALL, seqid_));
    var args : GetHiddenContactMids_args = new GetHiddenContactMids_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetHiddenContactMids_result = new GetHiddenContactMids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getHiddenContactMids failed: unknown result");
    });
    return retval;
  }

  public function getIdentityIdentifier() : String {
    oprot_.writeMessageBegin(new TMessage("getIdentityIdentifier", TMessageType.CALL, seqid_));
    var args : GetIdentityIdentifier_args = new GetIdentityIdentifier_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetIdentityIdentifier_result = new GetIdentityIdentifier_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getIdentityIdentifier failed: unknown result");
    });
    return retval;
  }

  public function getLastAnnouncementIndex() : haxe.Int32 {
    oprot_.writeMessageBegin(new TMessage("getLastAnnouncementIndex", TMessageType.CALL, seqid_));
    var args : GetLastAnnouncementIndex_args = new GetLastAnnouncementIndex_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : haxe.Int32;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetLastAnnouncementIndex_result = new GetLastAnnouncementIndex_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getLastAnnouncementIndex failed: unknown result");
    });
    return retval;
  }

  public function getLastOpRevision() : haxe.Int64 {
    oprot_.writeMessageBegin(new TMessage("getLastOpRevision", TMessageType.CALL, seqid_));
    var args : GetLastOpRevision_args = new GetLastOpRevision_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : haxe.Int64;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetLastOpRevision_result = new GetLastOpRevision_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getLastOpRevision failed: unknown result");
    });
    return retval;
  }

  public function getSuggestRevisions() : SuggestDictionaryRevisions {
    oprot_.writeMessageBegin(new TMessage("getSuggestRevisions", TMessageType.CALL, seqid_));
    var args : GetSuggestRevisions_args = new GetSuggestRevisions_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : SuggestDictionaryRevisions;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetSuggestRevisions_result = new GetSuggestRevisions_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getSuggestRevisions failed: unknown result");
    });
    return retval;
  }

  public function getPreviousMessagesV2WithReadCount(messageBoxId : String, endMessageId : MessageBoxV2MessageId, messagesCount : haxe.Int32) : List< Message> {
    oprot_.writeMessageBegin(new TMessage("getPreviousMessagesV2WithReadCount", TMessageType.CALL, seqid_));
    var args : GetPreviousMessagesV2WithReadCount_args = new GetPreviousMessagesV2WithReadCount_args();
    args.messageBoxId = messageBoxId;
    args.endMessageId = endMessageId;
    args.messagesCount = messagesCount;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Message>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetPreviousMessagesV2WithReadCount_result = new GetPreviousMessagesV2WithReadCount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getPreviousMessagesV2WithReadCount failed: unknown result");
    });
    return retval;
  }

  public function getMessageBox(channelId : String, messageBoxId : String, lastMessagesCount : haxe.Int32) : TMessageBox {
    oprot_.writeMessageBegin(new TMessage("getMessageBox", TMessageType.CALL, seqid_));
    var args : GetMessageBox_args = new GetMessageBox_args();
    args.channelId = channelId;
    args.messageBoxId = messageBoxId;
    args.lastMessagesCount = lastMessagesCount;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : TMessageBox;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetMessageBox_result = new GetMessageBox_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getMessageBox failed: unknown result");
    });
    return retval;
  }

  public function getMessageBoxCompactWrapUp(mid : String) : TMessageBoxWrapUp {
    oprot_.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUp", TMessageType.CALL, seqid_));
    var args : GetMessageBoxCompactWrapUp_args = new GetMessageBoxCompactWrapUp_args();
    args.mid = mid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : TMessageBoxWrapUp;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetMessageBoxCompactWrapUp_result = new GetMessageBoxCompactWrapUp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getMessageBoxCompactWrapUp failed: unknown result");
    });
    return retval;
  }

  public function getMessageBoxCompactWrapUpList(start : haxe.Int32, messageBoxCount : haxe.Int32) : TMessageBoxWrapUpResponse {
    oprot_.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUpList", TMessageType.CALL, seqid_));
    var args : GetMessageBoxCompactWrapUpList_args = new GetMessageBoxCompactWrapUpList_args();
    args.start = start;
    args.messageBoxCount = messageBoxCount;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : TMessageBoxWrapUpResponse;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetMessageBoxCompactWrapUpList_result = new GetMessageBoxCompactWrapUpList_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getMessageBoxCompactWrapUpList failed: unknown result");
    });
    return retval;
  }

  public function getMessageBoxList(channelId : String, lastMessagesCount : haxe.Int32) : List< TMessageBox> {
    oprot_.writeMessageBegin(new TMessage("getMessageBoxList", TMessageType.CALL, seqid_));
    var args : GetMessageBoxList_args = new GetMessageBoxList_args();
    args.channelId = channelId;
    args.lastMessagesCount = lastMessagesCount;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< TMessageBox>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetMessageBoxList_result = new GetMessageBoxList_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getMessageBoxList failed: unknown result");
    });
    return retval;
  }

  public function getMessageBoxListByStatus(channelId : String, lastMessagesCount : haxe.Int32, status : haxe.Int32) : List< TMessageBox> {
    oprot_.writeMessageBegin(new TMessage("getMessageBoxListByStatus", TMessageType.CALL, seqid_));
    var args : GetMessageBoxListByStatus_args = new GetMessageBoxListByStatus_args();
    args.channelId = channelId;
    args.lastMessagesCount = lastMessagesCount;
    args.status = status;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< TMessageBox>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetMessageBoxListByStatus_result = new GetMessageBoxListByStatus_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getMessageBoxListByStatus failed: unknown result");
    });
    return retval;
  }

  public function getMessageBoxWrapUp(mid : String) : TMessageBoxWrapUp {
    oprot_.writeMessageBegin(new TMessage("getMessageBoxWrapUp", TMessageType.CALL, seqid_));
    var args : GetMessageBoxWrapUp_args = new GetMessageBoxWrapUp_args();
    args.mid = mid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : TMessageBoxWrapUp;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetMessageBoxWrapUp_result = new GetMessageBoxWrapUp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getMessageBoxWrapUp failed: unknown result");
    });
    return retval;
  }

  public function getMessageBoxWrapUpList(start : haxe.Int32, messageBoxCount : haxe.Int32) : TMessageBoxWrapUpResponse {
    oprot_.writeMessageBegin(new TMessage("getMessageBoxWrapUpList", TMessageType.CALL, seqid_));
    var args : GetMessageBoxWrapUpList_args = new GetMessageBoxWrapUpList_args();
    args.start = start;
    args.messageBoxCount = messageBoxCount;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : TMessageBoxWrapUpResponse;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetMessageBoxWrapUpList_result = new GetMessageBoxWrapUpList_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getMessageBoxWrapUpList failed: unknown result");
    });
    return retval;
  }

  public function getMessagesBySequenceNumber(channelId : String, messageBoxId : String, startSeq : haxe.Int64, endSeq : haxe.Int64) : List< Message> {
    oprot_.writeMessageBegin(new TMessage("getMessagesBySequenceNumber", TMessageType.CALL, seqid_));
    var args : GetMessagesBySequenceNumber_args = new GetMessagesBySequenceNumber_args();
    args.channelId = channelId;
    args.messageBoxId = messageBoxId;
    args.startSeq = startSeq;
    args.endSeq = endSeq;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Message>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetMessagesBySequenceNumber_result = new GetMessagesBySequenceNumber_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getMessagesBySequenceNumber failed: unknown result");
    });
    return retval;
  }

  public function getNextMessages(messageBoxId : String, startSeq : haxe.Int64, messagesCount : haxe.Int32) : List< Message> {
    oprot_.writeMessageBegin(new TMessage("getNextMessages", TMessageType.CALL, seqid_));
    var args : GetNextMessages_args = new GetNextMessages_args();
    args.messageBoxId = messageBoxId;
    args.startSeq = startSeq;
    args.messagesCount = messagesCount;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Message>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetNextMessages_result = new GetNextMessages_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getNextMessages failed: unknown result");
    });
    return retval;
  }

  public function getNotificationPolicy(carrier : Int) : List< Int> {
    oprot_.writeMessageBegin(new TMessage("getNotificationPolicy", TMessageType.CALL, seqid_));
    var args : GetNotificationPolicy_args = new GetNotificationPolicy_args();
    args.carrier = carrier;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Int>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetNotificationPolicy_result = new GetNotificationPolicy_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getNotificationPolicy failed: unknown result");
    });
    return retval;
  }

  public function getPreviousMessages(messageBoxId : String, endSeq : haxe.Int64, messagesCount : haxe.Int32) : List< Message> {
    oprot_.writeMessageBegin(new TMessage("getPreviousMessages", TMessageType.CALL, seqid_));
    var args : GetPreviousMessages_args = new GetPreviousMessages_args();
    args.messageBoxId = messageBoxId;
    args.endSeq = endSeq;
    args.messagesCount = messagesCount;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Message>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetPreviousMessages_result = new GetPreviousMessages_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getPreviousMessages failed: unknown result");
    });
    return retval;
  }

  public function getProfile() : Profile {
    oprot_.writeMessageBegin(new TMessage("getProfile", TMessageType.CALL, seqid_));
    var args : GetProfile_args = new GetProfile_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Profile;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetProfile_result = new GetProfile_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getProfile failed: unknown result");
    });
    return retval;
  }

  public function getProximityMatchCandidateList(sessionId : String) : ProximityMatchCandidateResult {
    oprot_.writeMessageBegin(new TMessage("getProximityMatchCandidateList", TMessageType.CALL, seqid_));
    var args : GetProximityMatchCandidateList_args = new GetProximityMatchCandidateList_args();
    args.sessionId = sessionId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : ProximityMatchCandidateResult;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetProximityMatchCandidateList_result = new GetProximityMatchCandidateList_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getProximityMatchCandidateList failed: unknown result");
    });
    return retval;
  }

  public function getProximityMatchCandidates(sessionId : String) : ObjectSet< Contact> {
    oprot_.writeMessageBegin(new TMessage("getProximityMatchCandidates", TMessageType.CALL, seqid_));
    var args : GetProximityMatchCandidates_args = new GetProximityMatchCandidates_args();
    args.sessionId = sessionId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : ObjectSet< Contact>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetProximityMatchCandidates_result = new GetProximityMatchCandidates_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getProximityMatchCandidates failed: unknown result");
    });
    return retval;
  }

  public function getRecentMessages(messageBoxId : String, messagesCount : haxe.Int32) : List< Message> {
    oprot_.writeMessageBegin(new TMessage("getRecentMessages", TMessageType.CALL, seqid_));
    var args : GetRecentMessages_args = new GetRecentMessages_args();
    args.messageBoxId = messageBoxId;
    args.messagesCount = messagesCount;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Message>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetRecentMessages_result = new GetRecentMessages_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getRecentMessages failed: unknown result");
    });
    return retval;
  }

  public function getRecommendationIds() : List< String> {
    oprot_.writeMessageBegin(new TMessage("getRecommendationIds", TMessageType.CALL, seqid_));
    var args : GetRecommendationIds_args = new GetRecommendationIds_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetRecommendationIds_result = new GetRecommendationIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getRecommendationIds failed: unknown result");
    });
    return retval;
  }

  public function getRoom(roomId : String) : Room {
    oprot_.writeMessageBegin(new TMessage("getRoom", TMessageType.CALL, seqid_));
    var args : GetRoom_args = new GetRoom_args();
    args.roomId = roomId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Room;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetRoom_result = new GetRoom_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getRoom failed: unknown result");
    });
    return retval;
  }

  public function getRSAKeyInfo(provider : Int) : RSAKey {
    oprot_.writeMessageBegin(new TMessage("getRSAKeyInfo", TMessageType.CALL, seqid_));
    var args : GetRSAKeyInfo_args = new GetRSAKeyInfo_args();
    args.provider = provider;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : RSAKey;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetRSAKeyInfo_result = new GetRSAKeyInfo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getRSAKeyInfo failed: unknown result");
    });
    return retval;
  }

  public function getServerTime() : haxe.Int64 {
    oprot_.writeMessageBegin(new TMessage("getServerTime", TMessageType.CALL, seqid_));
    var args : GetServerTime_args = new GetServerTime_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : haxe.Int64;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetServerTime_result = new GetServerTime_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getServerTime failed: unknown result");
    });
    return retval;
  }

  public function getSessions() : List< LoginSession> {
    oprot_.writeMessageBegin(new TMessage("getSessions", TMessageType.CALL, seqid_));
    var args : GetSessions_args = new GetSessions_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< LoginSession>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetSessions_result = new GetSessions_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getSessions failed: unknown result");
    });
    return retval;
  }

  public function getSettings() : Settings {
    oprot_.writeMessageBegin(new TMessage("getSettings", TMessageType.CALL, seqid_));
    var args : GetSettings_args = new GetSettings_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Settings;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetSettings_result = new GetSettings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getSettings failed: unknown result");
    });
    return retval;
  }

  public function getGroupsV2(groupIds : List< String>) : List< Group> {
    oprot_.writeMessageBegin(new TMessage("getGroupsV2", TMessageType.CALL, seqid_));
    var args : GetGroupsV2_args = new GetGroupsV2_args();
    args.groupIds = groupIds;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Group>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetGroupsV2_result = new GetGroupsV2_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getGroupsV2 failed: unknown result");
    });
    return retval;
  }

  public function getSettingsAttributes(attrBitset : haxe.Int32) : Settings {
    oprot_.writeMessageBegin(new TMessage("getSettingsAttributes", TMessageType.CALL, seqid_));
    var args : GetSettingsAttributes_args = new GetSettingsAttributes_args();
    args.attrBitset = attrBitset;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Settings;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetSettingsAttributes_result = new GetSettingsAttributes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getSettingsAttributes failed: unknown result");
    });
    return retval;
  }

  public function getSystemConfiguration() : SystemConfiguration {
    oprot_.writeMessageBegin(new TMessage("getSystemConfiguration", TMessageType.CALL, seqid_));
    var args : GetSystemConfiguration_args = new GetSystemConfiguration_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : SystemConfiguration;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetSystemConfiguration_result = new GetSystemConfiguration_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getSystemConfiguration failed: unknown result");
    });
    return retval;
  }

  public function getUserTicket() : Ticket {
    oprot_.writeMessageBegin(new TMessage("getUserTicket", TMessageType.CALL, seqid_));
    var args : GetUserTicket_args = new GetUserTicket_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Ticket;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetUserTicket_result = new GetUserTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getUserTicket failed: unknown result");
    });
    return retval;
  }

  public function getWapInvitation(invitationHash : String) : WapInvitation {
    oprot_.writeMessageBegin(new TMessage("getWapInvitation", TMessageType.CALL, seqid_));
    var args : GetWapInvitation_args = new GetWapInvitation_args();
    args.invitationHash = invitationHash;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : WapInvitation;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetWapInvitation_result = new GetWapInvitation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getWapInvitation failed: unknown result");
    });
    return retval;
  }

  public function invalidateUserTicket() : Void {
    oprot_.writeMessageBegin(new TMessage("invalidateUserTicket", TMessageType.CALL, seqid_));
    var args : InvalidateUserTicket_args = new InvalidateUserTicket_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : InvalidateUserTicket_result = new InvalidateUserTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function inviteFriendsBySms(phoneNumberList : List< String>) : Void {
    oprot_.writeMessageBegin(new TMessage("inviteFriendsBySms", TMessageType.CALL, seqid_));
    var args : InviteFriendsBySms_args = new InviteFriendsBySms_args();
    args.phoneNumberList = phoneNumberList;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : InviteFriendsBySms_result = new InviteFriendsBySms_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function inviteIntoGroup(reqSeq : haxe.Int32, groupId : String, contactIds : List< String>) : Void {
    oprot_.writeMessageBegin(new TMessage("inviteIntoGroup", TMessageType.CALL, seqid_));
    var args : InviteIntoGroup_args = new InviteIntoGroup_args();
    args.reqSeq = reqSeq;
    args.groupId = groupId;
    args.contactIds = contactIds;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : InviteIntoGroup_result = new InviteIntoGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function inviteIntoRoom(reqSeq : haxe.Int32, roomId : String, contactIds : List< String>) : Void {
    oprot_.writeMessageBegin(new TMessage("inviteIntoRoom", TMessageType.CALL, seqid_));
    var args : InviteIntoRoom_args = new InviteIntoRoom_args();
    args.reqSeq = reqSeq;
    args.roomId = roomId;
    args.contactIds = contactIds;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : InviteIntoRoom_result = new InviteIntoRoom_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function inviteViaEmail(reqSeq : haxe.Int32, email : String, name : String) : Void {
    oprot_.writeMessageBegin(new TMessage("inviteViaEmail", TMessageType.CALL, seqid_));
    var args : InviteViaEmail_args = new InviteViaEmail_args();
    args.reqSeq = reqSeq;
    args.email = email;
    args.name = name;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : InviteViaEmail_result = new InviteViaEmail_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function isIdentityIdentifierAvailable(provider : Int, identifier : String) : Bool {
    oprot_.writeMessageBegin(new TMessage("isIdentityIdentifierAvailable", TMessageType.CALL, seqid_));
    var args : IsIdentityIdentifierAvailable_args = new IsIdentityIdentifierAvailable_args();
    args.provider = provider;
    args.identifier = identifier;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Bool;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : IsIdentityIdentifierAvailable_result = new IsIdentityIdentifierAvailable_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "isIdentityIdentifierAvailable failed: unknown result");
    });
    return retval;
  }

  public function isUseridAvailable(userid : String) : Bool {
    oprot_.writeMessageBegin(new TMessage("isUseridAvailable", TMessageType.CALL, seqid_));
    var args : IsUseridAvailable_args = new IsUseridAvailable_args();
    args.userid = userid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Bool;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : IsUseridAvailable_result = new IsUseridAvailable_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "isUseridAvailable failed: unknown result");
    });
    return retval;
  }

  public function kickoutFromGroup(reqSeq : haxe.Int32, groupId : String, contactIds : List< String>) : Void {
    oprot_.writeMessageBegin(new TMessage("kickoutFromGroup", TMessageType.CALL, seqid_));
    var args : KickoutFromGroup_args = new KickoutFromGroup_args();
    args.reqSeq = reqSeq;
    args.groupId = groupId;
    args.contactIds = contactIds;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : KickoutFromGroup_result = new KickoutFromGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function reissueGroupTicket(groupMid : String) : String {
    oprot_.writeMessageBegin(new TMessage("reissueGroupTicket", TMessageType.CALL, seqid_));
    var args : ReissueGroupTicket_args = new ReissueGroupTicket_args();
    args.groupMid = groupMid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ReissueGroupTicket_result = new ReissueGroupTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "reissueGroupTicket failed: unknown result");
    });
    return retval;
  }

  public function findGroupByTicket(ticketId : String) : Group {
    oprot_.writeMessageBegin(new TMessage("findGroupByTicket", TMessageType.CALL, seqid_));
    var args : FindGroupByTicket_args = new FindGroupByTicket_args();
    args.ticketId = ticketId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Group;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FindGroupByTicket_result = new FindGroupByTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "findGroupByTicket failed: unknown result");
    });
    return retval;
  }

  public function leaveGroup(reqSeq : haxe.Int32, groupId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("leaveGroup", TMessageType.CALL, seqid_));
    var args : LeaveGroup_args = new LeaveGroup_args();
    args.reqSeq = reqSeq;
    args.groupId = groupId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : LeaveGroup_result = new LeaveGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function leaveRoom(reqSeq : haxe.Int32, roomId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("leaveRoom", TMessageType.CALL, seqid_));
    var args : LeaveRoom_args = new LeaveRoom_args();
    args.reqSeq = reqSeq;
    args.roomId = roomId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : LeaveRoom_result = new LeaveRoom_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function loginWithIdentityCredential(identityProvider : Int, identifier : String, password : String, keepLoggedIn : Bool, accessLocation : String, systemName : String, certificate : String) : String {
    oprot_.writeMessageBegin(new TMessage("loginWithIdentityCredential", TMessageType.CALL, seqid_));
    var args : LoginWithIdentityCredential_args = new LoginWithIdentityCredential_args();
    args.identityProvider = identityProvider;
    args.identifier = identifier;
    args.password = password;
    args.keepLoggedIn = keepLoggedIn;
    args.accessLocation = accessLocation;
    args.systemName = systemName;
    args.certificate = certificate;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : LoginWithIdentityCredential_result = new LoginWithIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "loginWithIdentityCredential failed: unknown result");
    });
    return retval;
  }

  public function loginWithIdentityCredentialForCertificate(identityProvider : Int, identifier : String, password : String, keepLoggedIn : Bool, accessLocation : String, systemName : String, certificate : String) : LoginResult {
    oprot_.writeMessageBegin(new TMessage("loginWithIdentityCredentialForCertificate", TMessageType.CALL, seqid_));
    var args : LoginWithIdentityCredentialForCertificate_args = new LoginWithIdentityCredentialForCertificate_args();
    args.identityProvider = identityProvider;
    args.identifier = identifier;
    args.password = password;
    args.keepLoggedIn = keepLoggedIn;
    args.accessLocation = accessLocation;
    args.systemName = systemName;
    args.certificate = certificate;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : LoginResult;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : LoginWithIdentityCredentialForCertificate_result = new LoginWithIdentityCredentialForCertificate_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "loginWithIdentityCredentialForCertificate failed: unknown result");
    });
    return retval;
  }

  public function loginWithVerifier(verifier : String) : String {
    oprot_.writeMessageBegin(new TMessage("loginWithVerifier", TMessageType.CALL, seqid_));
    var args : LoginWithVerifier_args = new LoginWithVerifier_args();
    args.verifier = verifier;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : LoginWithVerifier_result = new LoginWithVerifier_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "loginWithVerifier failed: unknown result");
    });
    return retval;
  }

  public function loginWithVerifierForCerificate(verifier : String) : LoginResult {
    oprot_.writeMessageBegin(new TMessage("loginWithVerifierForCerificate", TMessageType.CALL, seqid_));
    var args : LoginWithVerifierForCerificate_args = new LoginWithVerifierForCerificate_args();
    args.verifier = verifier;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : LoginResult;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : LoginWithVerifierForCerificate_result = new LoginWithVerifierForCerificate_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "loginWithVerifierForCerificate failed: unknown result");
    });
    return retval;
  }

  public function loginWithVerifierForCertificate(verifier : String) : LoginResult {
    oprot_.writeMessageBegin(new TMessage("loginWithVerifierForCertificate", TMessageType.CALL, seqid_));
    var args : LoginWithVerifierForCertificate_args = new LoginWithVerifierForCertificate_args();
    args.verifier = verifier;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : LoginResult;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : LoginWithVerifierForCertificate_result = new LoginWithVerifierForCertificate_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "loginWithVerifierForCertificate failed: unknown result");
    });
    return retval;
  }

  public function logout() : Void {
    oprot_.writeMessageBegin(new TMessage("logout", TMessageType.CALL, seqid_));
    var args : Logout_args = new Logout_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : Logout_result = new Logout_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function logoutSession(tokenKey : String) : Void {
    oprot_.writeMessageBegin(new TMessage("logoutSession", TMessageType.CALL, seqid_));
    var args : LogoutSession_args = new LogoutSession_args();
    args.tokenKey = tokenKey;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : LogoutSession_result = new LogoutSession_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function noop() : Void {
    oprot_.writeMessageBegin(new TMessage("noop", TMessageType.CALL, seqid_));
    var args : Noop_args = new Noop_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : Noop_result = new Noop_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function notifiedRedirect(paramMap : StringMap< String>) : Void {
    oprot_.writeMessageBegin(new TMessage("notifiedRedirect", TMessageType.CALL, seqid_));
    var args : NotifiedRedirect_args = new NotifiedRedirect_args();
    args.paramMap = paramMap;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : NotifiedRedirect_result = new NotifiedRedirect_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function notifyBuddyOnAir(seq : haxe.Int32, receiverMids : List< String>) : StringMap< String> {
    oprot_.writeMessageBegin(new TMessage("notifyBuddyOnAir", TMessageType.CALL, seqid_));
    var args : NotifyBuddyOnAir_args = new NotifyBuddyOnAir_args();
    args.seq = seq;
    args.receiverMids = receiverMids;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : StringMap< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : NotifyBuddyOnAir_result = new NotifyBuddyOnAir_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "notifyBuddyOnAir failed: unknown result");
    });
    return retval;
  }

  public function notifyIndividualEvent(notificationStatus : Int, receiverMids : List< String>) : Void {
    oprot_.writeMessageBegin(new TMessage("notifyIndividualEvent", TMessageType.CALL, seqid_));
    var args : NotifyIndividualEvent_args = new NotifyIndividualEvent_args();
    args.notificationStatus = notificationStatus;
    args.receiverMids = receiverMids;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : NotifyIndividualEvent_result = new NotifyIndividualEvent_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function notifyInstalled(udidHash : String, applicationTypeWithExtensions : String) : Void {
    oprot_.writeMessageBegin(new TMessage("notifyInstalled", TMessageType.CALL, seqid_));
    var args : NotifyInstalled_args = new NotifyInstalled_args();
    args.udidHash = udidHash;
    args.applicationTypeWithExtensions = applicationTypeWithExtensions;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : NotifyInstalled_result = new NotifyInstalled_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function notifyRegistrationComplete(udidHash : String, applicationTypeWithExtensions : String) : Void {
    oprot_.writeMessageBegin(new TMessage("notifyRegistrationComplete", TMessageType.CALL, seqid_));
    var args : NotifyRegistrationComplete_args = new NotifyRegistrationComplete_args();
    args.udidHash = udidHash;
    args.applicationTypeWithExtensions = applicationTypeWithExtensions;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : NotifyRegistrationComplete_result = new NotifyRegistrationComplete_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function notifySleep(lastRev : haxe.Int64, badge : haxe.Int32) : Void {
    oprot_.writeMessageBegin(new TMessage("notifySleep", TMessageType.CALL, seqid_));
    var args : NotifySleep_args = new NotifySleep_args();
    args.lastRev = lastRev;
    args.badge = badge;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : NotifySleep_result = new NotifySleep_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function notifyUpdated(lastRev : haxe.Int64, deviceInfo : DeviceInfo) : Void {
    oprot_.writeMessageBegin(new TMessage("notifyUpdated", TMessageType.CALL, seqid_));
    var args : NotifyUpdated_args = new NotifyUpdated_args();
    args.lastRev = lastRev;
    args.deviceInfo = deviceInfo;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : NotifyUpdated_result = new NotifyUpdated_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function openProximityMatch(location : Location) : String {
    oprot_.writeMessageBegin(new TMessage("openProximityMatch", TMessageType.CALL, seqid_));
    var args : OpenProximityMatch_args = new OpenProximityMatch_args();
    args.location = location;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : OpenProximityMatch_result = new OpenProximityMatch_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "openProximityMatch failed: unknown result");
    });
    return retval;
  }

  public function registerBuddyUser(buddyId : String, registrarPassword : String) : String {
    oprot_.writeMessageBegin(new TMessage("registerBuddyUser", TMessageType.CALL, seqid_));
    var args : RegisterBuddyUser_args = new RegisterBuddyUser_args();
    args.buddyId = buddyId;
    args.registrarPassword = registrarPassword;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RegisterBuddyUser_result = new RegisterBuddyUser_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "registerBuddyUser failed: unknown result");
    });
    return retval;
  }

  public function registerBuddyUserid(seq : haxe.Int32, userid : String) : Void {
    oprot_.writeMessageBegin(new TMessage("registerBuddyUserid", TMessageType.CALL, seqid_));
    var args : RegisterBuddyUserid_args = new RegisterBuddyUserid_args();
    args.seq = seq;
    args.userid = userid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RegisterBuddyUserid_result = new RegisterBuddyUserid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function registerDevice(sessionId : String) : String {
    oprot_.writeMessageBegin(new TMessage("registerDevice", TMessageType.CALL, seqid_));
    var args : RegisterDevice_args = new RegisterDevice_args();
    args.sessionId = sessionId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RegisterDevice_result = new RegisterDevice_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "registerDevice failed: unknown result");
    });
    return retval;
  }

  public function registerDeviceWithIdentityCredential(sessionId : String, provider : Int, identifier : String, verifier : String) : String {
    oprot_.writeMessageBegin(new TMessage("registerDeviceWithIdentityCredential", TMessageType.CALL, seqid_));
    var args : RegisterDeviceWithIdentityCredential_args = new RegisterDeviceWithIdentityCredential_args();
    args.sessionId = sessionId;
    args.provider = provider;
    args.identifier = identifier;
    args.verifier = verifier;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RegisterDeviceWithIdentityCredential_result = new RegisterDeviceWithIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "registerDeviceWithIdentityCredential failed: unknown result");
    });
    return retval;
  }

  public function registerDeviceWithoutPhoneNumber(region : String, udidHash : String, deviceInfo : DeviceInfo) : String {
    oprot_.writeMessageBegin(new TMessage("registerDeviceWithoutPhoneNumber", TMessageType.CALL, seqid_));
    var args : RegisterDeviceWithoutPhoneNumber_args = new RegisterDeviceWithoutPhoneNumber_args();
    args.region = region;
    args.udidHash = udidHash;
    args.deviceInfo = deviceInfo;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RegisterDeviceWithoutPhoneNumber_result = new RegisterDeviceWithoutPhoneNumber_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "registerDeviceWithoutPhoneNumber failed: unknown result");
    });
    return retval;
  }

  public function registerDeviceWithoutPhoneNumberWithIdentityCredential(region : String, udidHash : String, deviceInfo : DeviceInfo, provider : Int, identifier : String, verifier : String, mid : String, migrationPincodeSessionId : String) : String {
    oprot_.writeMessageBegin(new TMessage("registerDeviceWithoutPhoneNumberWithIdentityCredential", TMessageType.CALL, seqid_));
    var args : RegisterDeviceWithoutPhoneNumberWithIdentityCredential_args = new RegisterDeviceWithoutPhoneNumberWithIdentityCredential_args();
    args.region = region;
    args.udidHash = udidHash;
    args.deviceInfo = deviceInfo;
    args.provider = provider;
    args.identifier = identifier;
    args.verifier = verifier;
    args.mid = mid;
    args.migrationPincodeSessionId = migrationPincodeSessionId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RegisterDeviceWithoutPhoneNumberWithIdentityCredential_result = new RegisterDeviceWithoutPhoneNumberWithIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "registerDeviceWithoutPhoneNumberWithIdentityCredential failed: unknown result");
    });
    return retval;
  }

  public function registerUserid(reqSeq : haxe.Int32, userid : String) : Bool {
    oprot_.writeMessageBegin(new TMessage("registerUserid", TMessageType.CALL, seqid_));
    var args : RegisterUserid_args = new RegisterUserid_args();
    args.reqSeq = reqSeq;
    args.userid = userid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Bool;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RegisterUserid_result = new RegisterUserid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "registerUserid failed: unknown result");
    });
    return retval;
  }

  public function registerWapDevice(invitationHash : String, guidHash : String, email : String, deviceInfo : DeviceInfo) : String {
    oprot_.writeMessageBegin(new TMessage("registerWapDevice", TMessageType.CALL, seqid_));
    var args : RegisterWapDevice_args = new RegisterWapDevice_args();
    args.invitationHash = invitationHash;
    args.guidHash = guidHash;
    args.email = email;
    args.deviceInfo = deviceInfo;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RegisterWapDevice_result = new RegisterWapDevice_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "registerWapDevice failed: unknown result");
    });
    return retval;
  }

  public function registerWithExistingSnsIdAndIdentityCredential(identityCredential : IdentityCredential, region : String, udidHash : String, deviceInfo : DeviceInfo) : String {
    oprot_.writeMessageBegin(new TMessage("registerWithExistingSnsIdAndIdentityCredential", TMessageType.CALL, seqid_));
    var args : RegisterWithExistingSnsIdAndIdentityCredential_args = new RegisterWithExistingSnsIdAndIdentityCredential_args();
    args.identityCredential = identityCredential;
    args.region = region;
    args.udidHash = udidHash;
    args.deviceInfo = deviceInfo;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RegisterWithExistingSnsIdAndIdentityCredential_result = new RegisterWithExistingSnsIdAndIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "registerWithExistingSnsIdAndIdentityCredential failed: unknown result");
    });
    return retval;
  }

  public function registerWithSnsId(snsIdType : Int, snsAccessToken : String, region : String, udidHash : String, deviceInfo : DeviceInfo, mid : String) : RegisterWithSnsIdResult {
    oprot_.writeMessageBegin(new TMessage("registerWithSnsId", TMessageType.CALL, seqid_));
    var args : RegisterWithSnsId_args = new RegisterWithSnsId_args();
    args.snsIdType = snsIdType;
    args.snsAccessToken = snsAccessToken;
    args.region = region;
    args.udidHash = udidHash;
    args.deviceInfo = deviceInfo;
    args.mid = mid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : RegisterWithSnsIdResult;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RegisterWithSnsId_result = new RegisterWithSnsId_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "registerWithSnsId failed: unknown result");
    });
    return retval;
  }

  public function registerWithSnsIdAndIdentityCredential(snsIdType : Int, snsAccessToken : String, identityCredential : IdentityCredential, region : String, udidHash : String, deviceInfo : DeviceInfo) : String {
    oprot_.writeMessageBegin(new TMessage("registerWithSnsIdAndIdentityCredential", TMessageType.CALL, seqid_));
    var args : RegisterWithSnsIdAndIdentityCredential_args = new RegisterWithSnsIdAndIdentityCredential_args();
    args.snsIdType = snsIdType;
    args.snsAccessToken = snsAccessToken;
    args.identityCredential = identityCredential;
    args.region = region;
    args.udidHash = udidHash;
    args.deviceInfo = deviceInfo;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RegisterWithSnsIdAndIdentityCredential_result = new RegisterWithSnsIdAndIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "registerWithSnsIdAndIdentityCredential failed: unknown result");
    });
    return retval;
  }

  public function reissueDeviceCredential() : String {
    oprot_.writeMessageBegin(new TMessage("reissueDeviceCredential", TMessageType.CALL, seqid_));
    var args : ReissueDeviceCredential_args = new ReissueDeviceCredential_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ReissueDeviceCredential_result = new ReissueDeviceCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "reissueDeviceCredential failed: unknown result");
    });
    return retval;
  }

  public function reissueUserTicket(expirationTime : haxe.Int64, maxUseCount : haxe.Int32) : String {
    oprot_.writeMessageBegin(new TMessage("reissueUserTicket", TMessageType.CALL, seqid_));
    var args : ReissueUserTicket_args = new ReissueUserTicket_args();
    args.expirationTime = expirationTime;
    args.maxUseCount = maxUseCount;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ReissueUserTicket_result = new ReissueUserTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "reissueUserTicket failed: unknown result");
    });
    return retval;
  }

  public function getMessageReadRange(chatIds : List< String>) : List< TMessageReadRange> {
    oprot_.writeMessageBegin(new TMessage("getMessageReadRange", TMessageType.CALL, seqid_));
    var args : GetMessageReadRange_args = new GetMessageReadRange_args();
    args.chatIds = chatIds;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< TMessageReadRange>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetMessageReadRange_result = new GetMessageReadRange_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getMessageReadRange failed: unknown result");
    });
    return retval;
  }

  public function rejectGroupInvitation(reqSeq : haxe.Int32, groupId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("rejectGroupInvitation", TMessageType.CALL, seqid_));
    var args : RejectGroupInvitation_args = new RejectGroupInvitation_args();
    args.reqSeq = reqSeq;
    args.groupId = groupId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RejectGroupInvitation_result = new RejectGroupInvitation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function releaseSession() : Void {
    oprot_.writeMessageBegin(new TMessage("releaseSession", TMessageType.CALL, seqid_));
    var args : ReleaseSession_args = new ReleaseSession_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ReleaseSession_result = new ReleaseSession_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function removeAllMessages(seq : haxe.Int32, lastMessageId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("removeAllMessages", TMessageType.CALL, seqid_));
    var args : RemoveAllMessages_args = new RemoveAllMessages_args();
    args.seq = seq;
    args.lastMessageId = lastMessageId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RemoveAllMessages_result = new RemoveAllMessages_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function removeBuddyLocation(mid : String, index : haxe.Int32) : Void {
    oprot_.writeMessageBegin(new TMessage("removeBuddyLocation", TMessageType.CALL, seqid_));
    var args : RemoveBuddyLocation_args = new RemoveBuddyLocation_args();
    args.mid = mid;
    args.index = index;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RemoveBuddyLocation_result = new RemoveBuddyLocation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function removeMessage(messageId : String) : Bool {
    oprot_.writeMessageBegin(new TMessage("removeMessage", TMessageType.CALL, seqid_));
    var args : RemoveMessage_args = new RemoveMessage_args();
    args.messageId = messageId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Bool;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RemoveMessage_result = new RemoveMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "removeMessage failed: unknown result");
    });
    return retval;
  }

  public function makeUserAddMyselfAsContact(contactOwnerMid : String) : ContactTransition {
    oprot_.writeMessageBegin(new TMessage("makeUserAddMyselfAsContact", TMessageType.CALL, seqid_));
    var args : MakeUserAddMyselfAsContact_args = new MakeUserAddMyselfAsContact_args();
    args.contactOwnerMid = contactOwnerMid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : ContactTransition;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : MakeUserAddMyselfAsContact_result = new MakeUserAddMyselfAsContact_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "makeUserAddMyselfAsContact failed: unknown result");
    });
    return retval;
  }

  public function removeMessageFromMyHome(messageId : String) : Bool {
    oprot_.writeMessageBegin(new TMessage("removeMessageFromMyHome", TMessageType.CALL, seqid_));
    var args : RemoveMessageFromMyHome_args = new RemoveMessageFromMyHome_args();
    args.messageId = messageId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Bool;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RemoveMessageFromMyHome_result = new RemoveMessageFromMyHome_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "removeMessageFromMyHome failed: unknown result");
    });
    return retval;
  }

  public function removeSnsId(snsIdType : Int) : String {
    oprot_.writeMessageBegin(new TMessage("removeSnsId", TMessageType.CALL, seqid_));
    var args : RemoveSnsId_args = new RemoveSnsId_args();
    args.snsIdType = snsIdType;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RemoveSnsId_result = new RemoveSnsId_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "removeSnsId failed: unknown result");
    });
    return retval;
  }

  public function report(syncOpRevision : haxe.Int64, category : Int, report : String) : Void {
    oprot_.writeMessageBegin(new TMessage("report", TMessageType.CALL, seqid_));
    var args : Report_args = new Report_args();
    args.syncOpRevision = syncOpRevision;
    args.category = category;
    args.report = report;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : Report_result = new Report_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function reportContacts(syncOpRevision : haxe.Int64, category : Int, contactReports : List< ContactReport>, actionType : Int) : List< ContactReportResult> {
    oprot_.writeMessageBegin(new TMessage("reportContacts", TMessageType.CALL, seqid_));
    var args : ReportContacts_args = new ReportContacts_args();
    args.syncOpRevision = syncOpRevision;
    args.category = category;
    args.contactReports = contactReports;
    args.actionType = actionType;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< ContactReportResult>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ReportContacts_result = new ReportContacts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "reportContacts failed: unknown result");
    });
    return retval;
  }

  public function reportGroups(syncOpRevision : haxe.Int64, groups : List< Group>) : Void {
    oprot_.writeMessageBegin(new TMessage("reportGroups", TMessageType.CALL, seqid_));
    var args : ReportGroups_args = new ReportGroups_args();
    args.syncOpRevision = syncOpRevision;
    args.groups = groups;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ReportGroups_result = new ReportGroups_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function reportProfile(syncOpRevision : haxe.Int64, profile : Profile) : Void {
    oprot_.writeMessageBegin(new TMessage("reportProfile", TMessageType.CALL, seqid_));
    var args : ReportProfile_args = new ReportProfile_args();
    args.syncOpRevision = syncOpRevision;
    args.profile = profile;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ReportProfile_result = new ReportProfile_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function reportRooms(syncOpRevision : haxe.Int64, rooms : List< Room>) : Void {
    oprot_.writeMessageBegin(new TMessage("reportRooms", TMessageType.CALL, seqid_));
    var args : ReportRooms_args = new ReportRooms_args();
    args.syncOpRevision = syncOpRevision;
    args.rooms = rooms;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ReportRooms_result = new ReportRooms_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function findAndAddContactByMetaTag(reqSeq : haxe.Int32, userid : String, reference : String) : Contact {
    oprot_.writeMessageBegin(new TMessage("findAndAddContactByMetaTag", TMessageType.CALL, seqid_));
    var args : FindAndAddContactByMetaTag_args = new FindAndAddContactByMetaTag_args();
    args.reqSeq = reqSeq;
    args.userid = userid;
    args.reference = reference;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Contact;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FindAndAddContactByMetaTag_result = new FindAndAddContactByMetaTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "findAndAddContactByMetaTag failed: unknown result");
    });
    return retval;
  }

  public function reportSettings(syncOpRevision : haxe.Int64, settings : Settings) : Void {
    oprot_.writeMessageBegin(new TMessage("reportSettings", TMessageType.CALL, seqid_));
    var args : ReportSettings_args = new ReportSettings_args();
    args.syncOpRevision = syncOpRevision;
    args.settings = settings;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ReportSettings_result = new ReportSettings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function reportSpam(chatMid : String, memberMids : List< String>, spammerReasons : List< Int>, senderMids : List< String>, spamMessageIds : List< String>, spamMessages : List< String>) : Void {
    oprot_.writeMessageBegin(new TMessage("reportSpam", TMessageType.CALL, seqid_));
    var args : ReportSpam_args = new ReportSpam_args();
    args.chatMid = chatMid;
    args.memberMids = memberMids;
    args.spammerReasons = spammerReasons;
    args.senderMids = senderMids;
    args.spamMessageIds = spamMessageIds;
    args.spamMessages = spamMessages;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ReportSpam_result = new ReportSpam_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function reportSpammer(spammerMid : String, spammerReasons : List< Int>, spamMessageIds : List< String>) : Void {
    oprot_.writeMessageBegin(new TMessage("reportSpammer", TMessageType.CALL, seqid_));
    var args : ReportSpammer_args = new ReportSpammer_args();
    args.spammerMid = spammerMid;
    args.spammerReasons = spammerReasons;
    args.spamMessageIds = spamMessageIds;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ReportSpammer_result = new ReportSpammer_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function requestAccountPasswordReset(provider : Int, identifier : String, locale : String) : Void {
    oprot_.writeMessageBegin(new TMessage("requestAccountPasswordReset", TMessageType.CALL, seqid_));
    var args : RequestAccountPasswordReset_args = new RequestAccountPasswordReset_args();
    args.provider = provider;
    args.identifier = identifier;
    args.locale = locale;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RequestAccountPasswordReset_result = new RequestAccountPasswordReset_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function requestEmailConfirmation(emailConfirmation : EmailConfirmation) : EmailConfirmationSession {
    oprot_.writeMessageBegin(new TMessage("requestEmailConfirmation", TMessageType.CALL, seqid_));
    var args : RequestEmailConfirmation_args = new RequestEmailConfirmation_args();
    args.emailConfirmation = emailConfirmation;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : EmailConfirmationSession;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RequestEmailConfirmation_result = new RequestEmailConfirmation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "requestEmailConfirmation failed: unknown result");
    });
    return retval;
  }

  public function requestIdentityUnbind(provider : Int, identifier : String) : Void {
    oprot_.writeMessageBegin(new TMessage("requestIdentityUnbind", TMessageType.CALL, seqid_));
    var args : RequestIdentityUnbind_args = new RequestIdentityUnbind_args();
    args.provider = provider;
    args.identifier = identifier;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RequestIdentityUnbind_result = new RequestIdentityUnbind_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function resendEmailConfirmation(verifier : String) : EmailConfirmationSession {
    oprot_.writeMessageBegin(new TMessage("resendEmailConfirmation", TMessageType.CALL, seqid_));
    var args : ResendEmailConfirmation_args = new ResendEmailConfirmation_args();
    args.verifier = verifier;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : EmailConfirmationSession;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ResendEmailConfirmation_result = new ResendEmailConfirmation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "resendEmailConfirmation failed: unknown result");
    });
    return retval;
  }

  public function resendPinCode(sessionId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("resendPinCode", TMessageType.CALL, seqid_));
    var args : ResendPinCode_args = new ResendPinCode_args();
    args.sessionId = sessionId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ResendPinCode_result = new ResendPinCode_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function resendPinCodeBySMS(sessionId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("resendPinCodeBySMS", TMessageType.CALL, seqid_));
    var args : ResendPinCodeBySMS_args = new ResendPinCodeBySMS_args();
    args.sessionId = sessionId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ResendPinCodeBySMS_result = new ResendPinCodeBySMS_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function sendChatChecked(seq : haxe.Int32, consumer : String, lastMessageId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("sendChatChecked", TMessageType.CALL, seqid_));
    var args : SendChatChecked_args = new SendChatChecked_args();
    args.seq = seq;
    args.consumer = consumer;
    args.lastMessageId = lastMessageId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SendChatChecked_result = new SendChatChecked_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function sendMessageAwaitCommit(seq : haxe.Int32, message : Message) : CommitMessageResult {
    oprot_.writeMessageBegin(new TMessage("sendMessageAwaitCommit", TMessageType.CALL, seqid_));
    var args : SendMessageAwaitCommit_args = new SendMessageAwaitCommit_args();
    args.seq = seq;
    args.message = message;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : CommitMessageResult;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SendMessageAwaitCommit_result = new SendMessageAwaitCommit_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "sendMessageAwaitCommit failed: unknown result");
    });
    return retval;
  }

  public function sendChatRemoved(seq : haxe.Int32, consumer : String, lastMessageId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("sendChatRemoved", TMessageType.CALL, seqid_));
    var args : SendChatRemoved_args = new SendChatRemoved_args();
    args.seq = seq;
    args.consumer = consumer;
    args.lastMessageId = lastMessageId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SendChatRemoved_result = new SendChatRemoved_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function sendContentPreviewUpdated(esq : haxe.Int32, messageId : String, receiverMids : List< String>) : StringMap< String> {
    oprot_.writeMessageBegin(new TMessage("sendContentPreviewUpdated", TMessageType.CALL, seqid_));
    var args : SendContentPreviewUpdated_args = new SendContentPreviewUpdated_args();
    args.esq = esq;
    args.messageId = messageId;
    args.receiverMids = receiverMids;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : StringMap< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SendContentPreviewUpdated_result = new SendContentPreviewUpdated_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "sendContentPreviewUpdated failed: unknown result");
    });
    return retval;
  }

  public function sendContentReceipt(seq : haxe.Int32, consumer : String, messageId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("sendContentReceipt", TMessageType.CALL, seqid_));
    var args : SendContentReceipt_args = new SendContentReceipt_args();
    args.seq = seq;
    args.consumer = consumer;
    args.messageId = messageId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SendContentReceipt_result = new SendContentReceipt_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function sendDummyPush() : Void {
    oprot_.writeMessageBegin(new TMessage("sendDummyPush", TMessageType.CALL, seqid_));
    var args : SendDummyPush_args = new SendDummyPush_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SendDummyPush_result = new SendDummyPush_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function removeE2EEPublicKey(publicKey : E2EEPublicKey) : Void {
    oprot_.writeMessageBegin(new TMessage("removeE2EEPublicKey", TMessageType.CALL, seqid_));
    var args : RemoveE2EEPublicKey_args = new RemoveE2EEPublicKey_args();
    args.publicKey = publicKey;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RemoveE2EEPublicKey_result = new RemoveE2EEPublicKey_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function negotiateE2EEPublicKey(mid : String) : E2EENegotiationResult {
    oprot_.writeMessageBegin(new TMessage("negotiateE2EEPublicKey", TMessageType.CALL, seqid_));
    var args : NegotiateE2EEPublicKey_args = new NegotiateE2EEPublicKey_args();
    args.mid = mid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : E2EENegotiationResult;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : NegotiateE2EEPublicKey_result = new NegotiateE2EEPublicKey_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "negotiateE2EEPublicKey failed: unknown result");
    });
    return retval;
  }

  public function getE2EEPublicKey(mid : String, version : haxe.Int32, keyId : haxe.Int32) : E2EEPublicKey {
    oprot_.writeMessageBegin(new TMessage("getE2EEPublicKey", TMessageType.CALL, seqid_));
    var args : GetE2EEPublicKey_args = new GetE2EEPublicKey_args();
    args.mid = mid;
    args.version = version;
    args.keyId = keyId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : E2EEPublicKey;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetE2EEPublicKey_result = new GetE2EEPublicKey_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getE2EEPublicKey failed: unknown result");
    });
    return retval;
  }

  public function requestE2EEKeyExchange(reqSeq : haxe.Int32, temporalPublicKey : haxe.io.Bytes, publicKey : E2EEPublicKey, verifier : haxe.io.Bytes) : Void {
    oprot_.writeMessageBegin(new TMessage("requestE2EEKeyExchange", TMessageType.CALL, seqid_));
    var args : RequestE2EEKeyExchange_args = new RequestE2EEKeyExchange_args();
    args.reqSeq = reqSeq;
    args.temporalPublicKey = temporalPublicKey;
    args.publicKey = publicKey;
    args.verifier = verifier;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RequestE2EEKeyExchange_result = new RequestE2EEKeyExchange_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function getLastE2EEPublicKeys(chatMid : String) : StringMap< E2EEPublicKey> {
    oprot_.writeMessageBegin(new TMessage("getLastE2EEPublicKeys", TMessageType.CALL, seqid_));
    var args : GetLastE2EEPublicKeys_args = new GetLastE2EEPublicKeys_args();
    args.chatMid = chatMid;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : StringMap< E2EEPublicKey>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetLastE2EEPublicKeys_result = new GetLastE2EEPublicKeys_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getLastE2EEPublicKeys failed: unknown result");
    });
    return retval;
  }

  public function registerE2EEPublicKey(reqSeq : haxe.Int32, publicKey : E2EEPublicKey) : E2EEPublicKey {
    oprot_.writeMessageBegin(new TMessage("registerE2EEPublicKey", TMessageType.CALL, seqid_));
    var args : RegisterE2EEPublicKey_args = new RegisterE2EEPublicKey_args();
    args.reqSeq = reqSeq;
    args.publicKey = publicKey;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : E2EEPublicKey;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : RegisterE2EEPublicKey_result = new RegisterE2EEPublicKey_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "registerE2EEPublicKey failed: unknown result");
    });
    return retval;
  }

  public function getE2EEPublicKeys() : List< E2EEPublicKey> {
    oprot_.writeMessageBegin(new TMessage("getE2EEPublicKeys", TMessageType.CALL, seqid_));
    var args : GetE2EEPublicKeys_args = new GetE2EEPublicKeys_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< E2EEPublicKey>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetE2EEPublicKeys_result = new GetE2EEPublicKeys_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getE2EEPublicKeys failed: unknown result");
    });
    return retval;
  }

  public function getE2EEPublicKeysEx(ignoreE2EEStatus : Bool) : List< E2EEPublicKey> {
    oprot_.writeMessageBegin(new TMessage("getE2EEPublicKeysEx", TMessageType.CALL, seqid_));
    var args : GetE2EEPublicKeysEx_args = new GetE2EEPublicKeysEx_args();
    args.ignoreE2EEStatus = ignoreE2EEStatus;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< E2EEPublicKey>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetE2EEPublicKeysEx_result = new GetE2EEPublicKeysEx_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getE2EEPublicKeysEx failed: unknown result");
    });
    return retval;
  }

  public function getReadMessageOpsInBulk(chatIds : List< String>) : List< Operation> {
    oprot_.writeMessageBegin(new TMessage("getReadMessageOpsInBulk", TMessageType.CALL, seqid_));
    var args : GetReadMessageOpsInBulk_args = new GetReadMessageOpsInBulk_args();
    args.chatIds = chatIds;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Operation>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetReadMessageOpsInBulk_result = new GetReadMessageOpsInBulk_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getReadMessageOpsInBulk failed: unknown result");
    });
    return retval;
  }

  public function sendEvent(seq : haxe.Int32, message : Message) : Message {
    oprot_.writeMessageBegin(new TMessage("sendEvent", TMessageType.CALL, seqid_));
    var args : SendEvent_args = new SendEvent_args();
    args.seq = seq;
    args.message = message;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Message;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SendEvent_result = new SendEvent_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "sendEvent failed: unknown result");
    });
    return retval;
  }

  public function sendMessage(seq : haxe.Int32, message : Message) : Message {
    oprot_.writeMessageBegin(new TMessage("sendMessage", TMessageType.CALL, seqid_));
    var args : SendMessage_args = new SendMessage_args();
    args.seq = seq;
    args.message = message;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Message;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SendMessage_result = new SendMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "sendMessage failed: unknown result");
    });
    return retval;
  }

  public function sendMessageIgnored(seq : haxe.Int32, consumer : String, messageIds : List< String>) : Void {
    oprot_.writeMessageBegin(new TMessage("sendMessageIgnored", TMessageType.CALL, seqid_));
    var args : SendMessageIgnored_args = new SendMessageIgnored_args();
    args.seq = seq;
    args.consumer = consumer;
    args.messageIds = messageIds;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SendMessageIgnored_result = new SendMessageIgnored_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function sendMessageReceipt(seq : haxe.Int32, consumer : String, messageIds : List< String>) : Void {
    oprot_.writeMessageBegin(new TMessage("sendMessageReceipt", TMessageType.CALL, seqid_));
    var args : SendMessageReceipt_args = new SendMessageReceipt_args();
    args.seq = seq;
    args.consumer = consumer;
    args.messageIds = messageIds;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SendMessageReceipt_result = new SendMessageReceipt_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function findContactByMetaTag(userid : String, reference : String) : Contact {
    oprot_.writeMessageBegin(new TMessage("findContactByMetaTag", TMessageType.CALL, seqid_));
    var args : FindContactByMetaTag_args = new FindContactByMetaTag_args();
    args.userid = userid;
    args.reference = reference;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Contact;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : FindContactByMetaTag_result = new FindContactByMetaTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "findContactByMetaTag failed: unknown result");
    });
    return retval;
  }

  public function sendMessageToMyHome(seq : haxe.Int32, message : Message) : Message {
    oprot_.writeMessageBegin(new TMessage("sendMessageToMyHome", TMessageType.CALL, seqid_));
    var args : SendMessageToMyHome_args = new SendMessageToMyHome_args();
    args.seq = seq;
    args.message = message;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Message;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SendMessageToMyHome_result = new SendMessageToMyHome_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "sendMessageToMyHome failed: unknown result");
    });
    return retval;
  }

  public function setBuddyLocation(mid : String, index : haxe.Int32, location : Geolocation) : Void {
    oprot_.writeMessageBegin(new TMessage("setBuddyLocation", TMessageType.CALL, seqid_));
    var args : SetBuddyLocation_args = new SetBuddyLocation_args();
    args.mid = mid;
    args.index = index;
    args.location = location;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SetBuddyLocation_result = new SetBuddyLocation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function setIdentityCredential(identifier : String, verifier : String, provider : Int) : Void {
    oprot_.writeMessageBegin(new TMessage("setIdentityCredential", TMessageType.CALL, seqid_));
    var args : SetIdentityCredential_args = new SetIdentityCredential_args();
    args.identifier = identifier;
    args.verifier = verifier;
    args.provider = provider;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SetIdentityCredential_result = new SetIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function setNotificationsEnabled(reqSeq : haxe.Int32, type : Int, target : String, enablement : Bool) : Void {
    oprot_.writeMessageBegin(new TMessage("setNotificationsEnabled", TMessageType.CALL, seqid_));
    var args : SetNotificationsEnabled_args = new SetNotificationsEnabled_args();
    args.reqSeq = reqSeq;
    args.type = type;
    args.target = target;
    args.enablement = enablement;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SetNotificationsEnabled_result = new SetNotificationsEnabled_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function startUpdateVerification(region : String, carrier : Int, phone : String, udidHash : String, deviceInfo : DeviceInfo, networkCode : String, locale : String) : VerificationSessionData {
    oprot_.writeMessageBegin(new TMessage("startUpdateVerification", TMessageType.CALL, seqid_));
    var args : StartUpdateVerification_args = new StartUpdateVerification_args();
    args.region = region;
    args.carrier = carrier;
    args.phone = phone;
    args.udidHash = udidHash;
    args.deviceInfo = deviceInfo;
    args.networkCode = networkCode;
    args.locale = locale;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : VerificationSessionData;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : StartUpdateVerification_result = new StartUpdateVerification_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "startUpdateVerification failed: unknown result");
    });
    return retval;
  }

  public function startVerification(region : String, carrier : Int, phone : String, udidHash : String, deviceInfo : DeviceInfo, networkCode : String, mid : String, locale : String, simInfo : SIMInfo, oldUdidHash : String) : VerificationSessionData {
    oprot_.writeMessageBegin(new TMessage("startVerification", TMessageType.CALL, seqid_));
    var args : StartVerification_args = new StartVerification_args();
    args.region = region;
    args.carrier = carrier;
    args.phone = phone;
    args.udidHash = udidHash;
    args.deviceInfo = deviceInfo;
    args.networkCode = networkCode;
    args.mid = mid;
    args.locale = locale;
    args.simInfo = simInfo;
    args.oldUdidHash = oldUdidHash;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : VerificationSessionData;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : StartVerification_result = new StartVerification_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "startVerification failed: unknown result");
    });
    return retval;
  }

  public function updateGroupPreferenceAttribute(reqSeq : haxe.Int32, groupMid : String, updatedAttrs : IntMap< String>) : Void {
    oprot_.writeMessageBegin(new TMessage("updateGroupPreferenceAttribute", TMessageType.CALL, seqid_));
    var args : UpdateGroupPreferenceAttribute_args = new UpdateGroupPreferenceAttribute_args();
    args.reqSeq = reqSeq;
    args.groupMid = groupMid;
    args.updatedAttrs = updatedAttrs;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateGroupPreferenceAttribute_result = new UpdateGroupPreferenceAttribute_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function createRoomV2(reqSeq : haxe.Int32, contactIds : List< String>) : Room {
    oprot_.writeMessageBegin(new TMessage("createRoomV2", TMessageType.CALL, seqid_));
    var args : CreateRoomV2_args = new CreateRoomV2_args();
    args.reqSeq = reqSeq;
    args.contactIds = contactIds;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Room;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : CreateRoomV2_result = new CreateRoomV2_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "createRoomV2 failed: unknown result");
    });
    return retval;
  }

  public function storeUpdateProfileAttribute(seq : haxe.Int32, profileAttribute : Int, value : String) : Void {
    oprot_.writeMessageBegin(new TMessage("storeUpdateProfileAttribute", TMessageType.CALL, seqid_));
    var args : StoreUpdateProfileAttribute_args = new StoreUpdateProfileAttribute_args();
    args.seq = seq;
    args.profileAttribute = profileAttribute;
    args.value = value;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : StoreUpdateProfileAttribute_result = new StoreUpdateProfileAttribute_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function syncContactBySnsIds(reqSeq : haxe.Int32, modifications : List< SnsFriendModification>) : List< SnsFriendContactRegistration> {
    oprot_.writeMessageBegin(new TMessage("syncContactBySnsIds", TMessageType.CALL, seqid_));
    var args : SyncContactBySnsIds_args = new SyncContactBySnsIds_args();
    args.reqSeq = reqSeq;
    args.modifications = modifications;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< SnsFriendContactRegistration>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SyncContactBySnsIds_result = new SyncContactBySnsIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "syncContactBySnsIds failed: unknown result");
    });
    return retval;
  }

  public function syncContacts(reqSeq : haxe.Int32, localContacts : List< ContactModification>) : StringMap< ContactRegistration> {
    oprot_.writeMessageBegin(new TMessage("syncContacts", TMessageType.CALL, seqid_));
    var args : SyncContacts_args = new SyncContacts_args();
    args.reqSeq = reqSeq;
    args.localContacts = localContacts;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : StringMap< ContactRegistration>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : SyncContacts_result = new SyncContacts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "syncContacts failed: unknown result");
    });
    return retval;
  }

  public function trySendMessage(seq : haxe.Int32, message : Message) : Message {
    oprot_.writeMessageBegin(new TMessage("trySendMessage", TMessageType.CALL, seqid_));
    var args : TrySendMessage_args = new TrySendMessage_args();
    args.seq = seq;
    args.message = message;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Message;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : TrySendMessage_result = new TrySendMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "trySendMessage failed: unknown result");
    });
    return retval;
  }

  public function getNextMessagesV2(messageBoxId : String, startMessageId : MessageBoxV2MessageId, messagesCount : haxe.Int32) : List< Message> {
    oprot_.writeMessageBegin(new TMessage("getNextMessagesV2", TMessageType.CALL, seqid_));
    var args : GetNextMessagesV2_args = new GetNextMessagesV2_args();
    args.messageBoxId = messageBoxId;
    args.startMessageId = startMessageId;
    args.messagesCount = messagesCount;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Message>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetNextMessagesV2_result = new GetNextMessagesV2_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getNextMessagesV2 failed: unknown result");
    });
    return retval;
  }

  public function getMessageBoxCompactWrapUpV2(messageBoxId : String) : TMessageBoxWrapUp {
    oprot_.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUpV2", TMessageType.CALL, seqid_));
    var args : GetMessageBoxCompactWrapUpV2_args = new GetMessageBoxCompactWrapUpV2_args();
    args.messageBoxId = messageBoxId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : TMessageBoxWrapUp;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetMessageBoxCompactWrapUpV2_result = new GetMessageBoxCompactWrapUpV2_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getMessageBoxCompactWrapUpV2 failed: unknown result");
    });
    return retval;
  }

  public function getRecentMessagesV2(messageBoxId : String, messagesCount : haxe.Int32) : List< Message> {
    oprot_.writeMessageBegin(new TMessage("getRecentMessagesV2", TMessageType.CALL, seqid_));
    var args : GetRecentMessagesV2_args = new GetRecentMessagesV2_args();
    args.messageBoxId = messageBoxId;
    args.messagesCount = messagesCount;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : List< Message>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : GetRecentMessagesV2_result = new GetRecentMessagesV2_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "getRecentMessagesV2 failed: unknown result");
    });
    return retval;
  }

  public function validateContactsOnBot(contacts : List< String>) : StringMap< String> {
    oprot_.writeMessageBegin(new TMessage("validateContactsOnBot", TMessageType.CALL, seqid_));
    var args : ValidateContactsOnBot_args = new ValidateContactsOnBot_args();
    args.contacts = contacts;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : StringMap< String>;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : ValidateContactsOnBot_result = new ValidateContactsOnBot_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "validateContactsOnBot failed: unknown result");
    });
    return retval;
  }

  public function tryFriendRequest(midOrEMid : String, method : Int, friendRequestParams : String) : Void {
    oprot_.writeMessageBegin(new TMessage("tryFriendRequest", TMessageType.CALL, seqid_));
    var args : TryFriendRequest_args = new TryFriendRequest_args();
    args.midOrEMid = midOrEMid;
    args.method = method;
    args.friendRequestParams = friendRequestParams;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : TryFriendRequest_result = new TryFriendRequest_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function unblockContact(reqSeq : haxe.Int32, id : String) : Void {
    oprot_.writeMessageBegin(new TMessage("unblockContact", TMessageType.CALL, seqid_));
    var args : UnblockContact_args = new UnblockContact_args();
    args.reqSeq = reqSeq;
    args.id = id;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UnblockContact_result = new UnblockContact_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function unblockRecommendation(reqSeq : haxe.Int32, id : String) : Void {
    oprot_.writeMessageBegin(new TMessage("unblockRecommendation", TMessageType.CALL, seqid_));
    var args : UnblockRecommendation_args = new UnblockRecommendation_args();
    args.reqSeq = reqSeq;
    args.id = id;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UnblockRecommendation_result = new UnblockRecommendation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function unregisterUserAndDevice() : String {
    oprot_.writeMessageBegin(new TMessage("unregisterUserAndDevice", TMessageType.CALL, seqid_));
    var args : UnregisterUserAndDevice_args = new UnregisterUserAndDevice_args();
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UnregisterUserAndDevice_result = new UnregisterUserAndDevice_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "unregisterUserAndDevice failed: unknown result");
    });
    return retval;
  }

  public function updateApnsDeviceToken(apnsDeviceToken : haxe.io.Bytes) : Void {
    oprot_.writeMessageBegin(new TMessage("updateApnsDeviceToken", TMessageType.CALL, seqid_));
    var args : UpdateApnsDeviceToken_args = new UpdateApnsDeviceToken_args();
    args.apnsDeviceToken = apnsDeviceToken;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateApnsDeviceToken_result = new UpdateApnsDeviceToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function updateBuddySetting(key : String, value : String) : Void {
    oprot_.writeMessageBegin(new TMessage("updateBuddySetting", TMessageType.CALL, seqid_));
    var args : UpdateBuddySetting_args = new UpdateBuddySetting_args();
    args.key = key;
    args.value = value;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateBuddySetting_result = new UpdateBuddySetting_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function updateC2DMRegistrationId(registrationId : String) : Void {
    oprot_.writeMessageBegin(new TMessage("updateC2DMRegistrationId", TMessageType.CALL, seqid_));
    var args : UpdateC2DMRegistrationId_args = new UpdateC2DMRegistrationId_args();
    args.registrationId = registrationId;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateC2DMRegistrationId_result = new UpdateC2DMRegistrationId_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function updateContactSetting(reqSeq : haxe.Int32, mid : String, flag : Int, value : String) : Void {
    oprot_.writeMessageBegin(new TMessage("updateContactSetting", TMessageType.CALL, seqid_));
    var args : UpdateContactSetting_args = new UpdateContactSetting_args();
    args.reqSeq = reqSeq;
    args.mid = mid;
    args.flag = flag;
    args.value = value;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateContactSetting_result = new UpdateContactSetting_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function updateCustomModeSettings(customMode : Int, paramMap : StringMap< String>) : Void {
    oprot_.writeMessageBegin(new TMessage("updateCustomModeSettings", TMessageType.CALL, seqid_));
    var args : UpdateCustomModeSettings_args = new UpdateCustomModeSettings_args();
    args.customMode = customMode;
    args.paramMap = paramMap;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateCustomModeSettings_result = new UpdateCustomModeSettings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function updateDeviceInfo(deviceUid : String, deviceInfo : DeviceInfo) : Void {
    oprot_.writeMessageBegin(new TMessage("updateDeviceInfo", TMessageType.CALL, seqid_));
    var args : UpdateDeviceInfo_args = new UpdateDeviceInfo_args();
    args.deviceUid = deviceUid;
    args.deviceInfo = deviceInfo;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateDeviceInfo_result = new UpdateDeviceInfo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function updateGroup(reqSeq : haxe.Int32, group : Group) : Void {
    oprot_.writeMessageBegin(new TMessage("updateGroup", TMessageType.CALL, seqid_));
    var args : UpdateGroup_args = new UpdateGroup_args();
    args.reqSeq = reqSeq;
    args.group = group;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateGroup_result = new UpdateGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function updateNotificationToken(type : Int, token : String) : Void {
    oprot_.writeMessageBegin(new TMessage("updateNotificationToken", TMessageType.CALL, seqid_));
    var args : UpdateNotificationToken_args = new UpdateNotificationToken_args();
    args.type = type;
    args.token = token;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateNotificationToken_result = new UpdateNotificationToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function updateNotificationTokenWithBytes(type : Int, token : haxe.io.Bytes) : Void {
    oprot_.writeMessageBegin(new TMessage("updateNotificationTokenWithBytes", TMessageType.CALL, seqid_));
    var args : UpdateNotificationTokenWithBytes_args = new UpdateNotificationTokenWithBytes_args();
    args.type = type;
    args.token = token;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateNotificationTokenWithBytes_result = new UpdateNotificationTokenWithBytes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function updateProfile(reqSeq : haxe.Int32, profile : Profile) : Void {
    oprot_.writeMessageBegin(new TMessage("updateProfile", TMessageType.CALL, seqid_));
    var args : UpdateProfile_args = new UpdateProfile_args();
    args.reqSeq = reqSeq;
    args.profile = profile;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateProfile_result = new UpdateProfile_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function updateProfileAttribute(reqSeq : haxe.Int32, attr : Int, value : String) : Void {
    oprot_.writeMessageBegin(new TMessage("updateProfileAttribute", TMessageType.CALL, seqid_));
    var args : UpdateProfileAttribute_args = new UpdateProfileAttribute_args();
    args.reqSeq = reqSeq;
    args.attr = attr;
    args.value = value;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateProfileAttribute_result = new UpdateProfileAttribute_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function updateRegion(region : String) : Void {
    oprot_.writeMessageBegin(new TMessage("updateRegion", TMessageType.CALL, seqid_));
    var args : UpdateRegion_args = new UpdateRegion_args();
    args.region = region;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateRegion_result = new UpdateRegion_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function updateSettings(reqSeq : haxe.Int32, settings : Settings) : Void {
    oprot_.writeMessageBegin(new TMessage("updateSettings", TMessageType.CALL, seqid_));
    var args : UpdateSettings_args = new UpdateSettings_args();
    args.reqSeq = reqSeq;
    args.settings = settings;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateSettings_result = new UpdateSettings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function updateSettings2(reqSeq : haxe.Int32, settings : Settings) : haxe.Int32 {
    oprot_.writeMessageBegin(new TMessage("updateSettings2", TMessageType.CALL, seqid_));
    var args : UpdateSettings2_args = new UpdateSettings2_args();
    args.reqSeq = reqSeq;
    args.settings = settings;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : haxe.Int32;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateSettings2_result = new UpdateSettings2_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "updateSettings2 failed: unknown result");
    });
    return retval;
  }

  public function updateSettingsAttribute(reqSeq : haxe.Int32, attr : Int, value : String) : Void {
    oprot_.writeMessageBegin(new TMessage("updateSettingsAttribute", TMessageType.CALL, seqid_));
    var args : UpdateSettingsAttribute_args = new UpdateSettingsAttribute_args();
    args.reqSeq = reqSeq;
    args.attr = attr;
    args.value = value;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateSettingsAttribute_result = new UpdateSettingsAttribute_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function updateSettingsAttributes(reqSeq : haxe.Int32, attrBitset : haxe.Int32, settings : Settings) : haxe.Int32 {
    oprot_.writeMessageBegin(new TMessage("updateSettingsAttributes", TMessageType.CALL, seqid_));
    var args : UpdateSettingsAttributes_args = new UpdateSettingsAttributes_args();
    args.reqSeq = reqSeq;
    args.attrBitset = attrBitset;
    args.settings = settings;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : haxe.Int32;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : UpdateSettingsAttributes_result = new UpdateSettingsAttributes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "updateSettingsAttributes failed: unknown result");
    });
    return retval;
  }

  public function verifyIdentityCredential(identityProvider : Int, identifier : String, password : String) : Void {
    oprot_.writeMessageBegin(new TMessage("verifyIdentityCredential", TMessageType.CALL, seqid_));
    var args : VerifyIdentityCredential_args = new VerifyIdentityCredential_args();
    args.identityProvider = identityProvider;
    args.identifier = identifier;
    args.password = password;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : VerifyIdentityCredential_result = new VerifyIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    });
  }

  public function verifyIdentityCredentialWithResult(identityCredential : IdentityCredential) : UserAuthStatus {
    oprot_.writeMessageBegin(new TMessage("verifyIdentityCredentialWithResult", TMessageType.CALL, seqid_));
    var args : VerifyIdentityCredentialWithResult_args = new VerifyIdentityCredentialWithResult_args();
    args.identityCredential = identityCredential;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : UserAuthStatus;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : VerifyIdentityCredentialWithResult_result = new VerifyIdentityCredentialWithResult_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "verifyIdentityCredentialWithResult failed: unknown result");
    });
    return retval;
  }

  public function verifyPhone(sessionId : String, pinCode : String, udidHash : String) : Int {
    oprot_.writeMessageBegin(new TMessage("verifyPhone", TMessageType.CALL, seqid_));
    var args : VerifyPhone_args = new VerifyPhone_args();
    args.sessionId = sessionId;
    args.pinCode = pinCode;
    args.udidHash = udidHash;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : Int;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : VerifyPhone_result = new VerifyPhone_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "verifyPhone failed: unknown result");
    });
    return retval;
  }

  public function verifyQrcode(verifier : String, pinCode : String) : String {
    oprot_.writeMessageBegin(new TMessage("verifyQrcode", TMessageType.CALL, seqid_));
    var args : VerifyQrcode_args = new VerifyQrcode_args();
    args.verifier = verifier;
    args.pinCode = pinCode;
    args.write(oprot_);
    oprot_.writeMessageEnd();
    var retval : String;
    oprot_.getTransport().flush(function(error:Dynamic) : Void {
      if (error != null) {
        throw error;
      }
      var msg : TMessage = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        var x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      var result : VerifyQrcode_result = new VerifyQrcode_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        retval = result.success;
        return;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT,
                                  "verifyQrcode failed: unknown result");
    });
    return retval;
  }

}
