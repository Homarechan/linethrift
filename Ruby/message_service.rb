#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'line_types'

module MessageService
  class Client
    include ::Thrift::Client

    def fetchMessageOperations(localRevision, lastOpTimestamp, count)
      send_fetchMessageOperations(localRevision, lastOpTimestamp, count)
      return recv_fetchMessageOperations()
    end

    def send_fetchMessageOperations(localRevision, lastOpTimestamp, count)
      send_message('fetchMessageOperations', FetchMessageOperations_args, :localRevision => localRevision, :lastOpTimestamp => lastOpTimestamp, :count => count)
    end

    def recv_fetchMessageOperations()
      result = receive_message(FetchMessageOperations_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'fetchMessageOperations failed: unknown result')
    end

    def getLastReadMessageIds(chatId)
      send_getLastReadMessageIds(chatId)
      return recv_getLastReadMessageIds()
    end

    def send_getLastReadMessageIds(chatId)
      send_message('getLastReadMessageIds', GetLastReadMessageIds_args, :chatId => chatId)
    end

    def recv_getLastReadMessageIds()
      result = receive_message(GetLastReadMessageIds_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getLastReadMessageIds failed: unknown result')
    end

    def multiGetLastReadMessageIds(chatIds)
      send_multiGetLastReadMessageIds(chatIds)
      return recv_multiGetLastReadMessageIds()
    end

    def send_multiGetLastReadMessageIds(chatIds)
      send_message('multiGetLastReadMessageIds', MultiGetLastReadMessageIds_args, :chatIds => chatIds)
    end

    def recv_multiGetLastReadMessageIds()
      result = receive_message(MultiGetLastReadMessageIds_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multiGetLastReadMessageIds failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_fetchMessageOperations(seqid, iprot, oprot)
      args = read_args(iprot, FetchMessageOperations_args)
      result = FetchMessageOperations_result.new()
      begin
        result.success = @handler.fetchMessageOperations(args.localRevision, args.lastOpTimestamp, args.count)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'fetchMessageOperations', seqid)
    end

    def process_getLastReadMessageIds(seqid, iprot, oprot)
      args = read_args(iprot, GetLastReadMessageIds_args)
      result = GetLastReadMessageIds_result.new()
      begin
        result.success = @handler.getLastReadMessageIds(args.chatId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getLastReadMessageIds', seqid)
    end

    def process_multiGetLastReadMessageIds(seqid, iprot, oprot)
      args = read_args(iprot, MultiGetLastReadMessageIds_args)
      result = MultiGetLastReadMessageIds_result.new()
      begin
        result.success = @handler.multiGetLastReadMessageIds(args.chatIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'multiGetLastReadMessageIds', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class FetchMessageOperations_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LOCALREVISION = 2
    LASTOPTIMESTAMP = 3
    COUNT = 4

    FIELDS = {
      LOCALREVISION => {:type => ::Thrift::Types::I64, :name => 'localRevision'},
      LASTOPTIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'lastOpTimestamp'},
      COUNT => {:type => ::Thrift::Types::I32, :name => 'count'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchMessageOperations_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::MessageOperations},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLastReadMessageIds_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHATID = 2

    FIELDS = {
      CHATID => {:type => ::Thrift::Types::STRING, :name => 'chatId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLastReadMessageIds_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::LastReadMessageIds},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MultiGetLastReadMessageIds_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHATIDS = 2

    FIELDS = {
      CHATIDS => {:type => ::Thrift::Types::LIST, :name => 'chatIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MultiGetLastReadMessageIds_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::LastReadMessageIds}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

