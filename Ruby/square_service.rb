#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'line_types'

module SquareService
  class Client
    include ::Thrift::Client

    def getSquareChatAnnouncements(request)
      send_getSquareChatAnnouncements(request)
      return recv_getSquareChatAnnouncements()
    end

    def send_getSquareChatAnnouncements(request)
      send_message('getSquareChatAnnouncements', GetSquareChatAnnouncements_args, :request => request)
    end

    def recv_getSquareChatAnnouncements()
      result = receive_message(GetSquareChatAnnouncements_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSquareChatAnnouncements failed: unknown result')
    end

    def deleteSquareChatAnnouncement(request)
      send_deleteSquareChatAnnouncement(request)
      return recv_deleteSquareChatAnnouncement()
    end

    def send_deleteSquareChatAnnouncement(request)
      send_message('deleteSquareChatAnnouncement', DeleteSquareChatAnnouncement_args, :request => request)
    end

    def recv_deleteSquareChatAnnouncement()
      result = receive_message(DeleteSquareChatAnnouncement_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteSquareChatAnnouncement failed: unknown result')
    end

    def createSquareChatAnnouncement(request)
      send_createSquareChatAnnouncement(request)
      return recv_createSquareChatAnnouncement()
    end

    def send_createSquareChatAnnouncement(request)
      send_message('createSquareChatAnnouncement', CreateSquareChatAnnouncement_args, :request => request)
    end

    def recv_createSquareChatAnnouncement()
      result = receive_message(CreateSquareChatAnnouncement_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createSquareChatAnnouncement failed: unknown result')
    end

    def getNoteStatus(request)
      send_getNoteStatus(request)
      return recv_getNoteStatus()
    end

    def send_getNoteStatus(request)
      send_message('getNoteStatus', GetNoteStatus_args, :request => request)
    end

    def recv_getNoteStatus()
      result = receive_message(GetNoteStatus_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getNoteStatus failed: unknown result')
    end

    def getSquareStatus(request)
      send_getSquareStatus(request)
      return recv_getSquareStatus()
    end

    def send_getSquareStatus(request)
      send_message('getSquareStatus', GetSquareStatus_args, :request => request)
    end

    def recv_getSquareStatus()
      result = receive_message(GetSquareStatus_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSquareStatus failed: unknown result')
    end

    def reportSquareMember(request)
      send_reportSquareMember(request)
      return recv_reportSquareMember()
    end

    def send_reportSquareMember(request)
      send_message('reportSquareMember', ReportSquareMember_args, :request => request)
    end

    def recv_reportSquareMember()
      result = receive_message(ReportSquareMember_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'reportSquareMember failed: unknown result')
    end

    def reportSquareMessage(request)
      send_reportSquareMessage(request)
      return recv_reportSquareMessage()
    end

    def send_reportSquareMessage(request)
      send_message('reportSquareMessage', ReportSquareMessage_args, :request => request)
    end

    def recv_reportSquareMessage()
      result = receive_message(ReportSquareMessage_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'reportSquareMessage failed: unknown result')
    end

    def reportSquareChat(request)
      send_reportSquareChat(request)
      return recv_reportSquareChat()
    end

    def send_reportSquareChat(request)
      send_message('reportSquareChat', ReportSquareChat_args, :request => request)
    end

    def recv_reportSquareChat()
      result = receive_message(ReportSquareChat_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'reportSquareChat failed: unknown result')
    end

    def reportSquare(request)
      send_reportSquare(request)
      return recv_reportSquare()
    end

    def send_reportSquare(request)
      send_message('reportSquare', ReportSquare_args, :request => request)
    end

    def recv_reportSquare()
      result = receive_message(ReportSquare_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'reportSquare failed: unknown result')
    end

    def updateSquareMemberRelation(request)
      send_updateSquareMemberRelation(request)
      return recv_updateSquareMemberRelation()
    end

    def send_updateSquareMemberRelation(request)
      send_message('updateSquareMemberRelation', UpdateSquareMemberRelation_args, :request => request)
    end

    def recv_updateSquareMemberRelation()
      result = receive_message(UpdateSquareMemberRelation_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateSquareMemberRelation failed: unknown result')
    end

    def updateSquareAuthority(request)
      send_updateSquareAuthority(request)
      return recv_updateSquareAuthority()
    end

    def send_updateSquareAuthority(request)
      send_message('updateSquareAuthority', UpdateSquareAuthority_args, :request => request)
    end

    def recv_updateSquareAuthority()
      result = receive_message(UpdateSquareAuthority_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateSquareAuthority failed: unknown result')
    end

    def updateSquareChatMember(request)
      send_updateSquareChatMember(request)
      return recv_updateSquareChatMember()
    end

    def send_updateSquareChatMember(request)
      send_message('updateSquareChatMember', UpdateSquareChatMember_args, :request => request)
    end

    def recv_updateSquareChatMember()
      result = receive_message(UpdateSquareChatMember_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateSquareChatMember failed: unknown result')
    end

    def updateSquareChat(request)
      send_updateSquareChat(request)
      return recv_updateSquareChat()
    end

    def send_updateSquareChat(request)
      send_message('updateSquareChat', UpdateSquareChat_args, :request => request)
    end

    def recv_updateSquareChat()
      result = receive_message(UpdateSquareChat_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateSquareChat failed: unknown result')
    end

    def refreshSubscriptions(request)
      send_refreshSubscriptions(request)
      return recv_refreshSubscriptions()
    end

    def send_refreshSubscriptions(request)
      send_message('refreshSubscriptions', RefreshSubscriptions_args, :request => request)
    end

    def recv_refreshSubscriptions()
      result = receive_message(RefreshSubscriptions_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'refreshSubscriptions failed: unknown result')
    end

    def removeSubscriptions(request)
      send_removeSubscriptions(request)
      return recv_removeSubscriptions()
    end

    def send_removeSubscriptions(request)
      send_message('removeSubscriptions', RemoveSubscriptions_args, :request => request)
    end

    def recv_removeSubscriptions()
      result = receive_message(RemoveSubscriptions_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'removeSubscriptions failed: unknown result')
    end

    def rejectSquareMembers(request)
      send_rejectSquareMembers(request)
      return recv_rejectSquareMembers()
    end

    def send_rejectSquareMembers(request)
      send_message('rejectSquareMembers', RejectSquareMembers_args, :request => request)
    end

    def recv_rejectSquareMembers()
      result = receive_message(RejectSquareMembers_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'rejectSquareMembers failed: unknown result')
    end

    def updateSquareMembers(request)
      send_updateSquareMembers(request)
      return recv_updateSquareMembers()
    end

    def send_updateSquareMembers(request)
      send_message('updateSquareMembers', UpdateSquareMembers_args, :request => request)
    end

    def recv_updateSquareMembers()
      result = receive_message(UpdateSquareMembers_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateSquareMembers failed: unknown result')
    end

    def updateSquareMember(request)
      send_updateSquareMember(request)
      return recv_updateSquareMember()
    end

    def send_updateSquareMember(request)
      send_message('updateSquareMember', UpdateSquareMember_args, :request => request)
    end

    def recv_updateSquareMember()
      result = receive_message(UpdateSquareMember_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateSquareMember failed: unknown result')
    end

    def updateSquareFeatureSet(request)
      send_updateSquareFeatureSet(request)
      return recv_updateSquareFeatureSet()
    end

    def send_updateSquareFeatureSet(request)
      send_message('updateSquareFeatureSet', UpdateSquareFeatureSet_args, :request => request)
    end

    def recv_updateSquareFeatureSet()
      result = receive_message(UpdateSquareFeatureSet_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateSquareFeatureSet failed: unknown result')
    end

    def getSquareFeatureSet(request)
      send_getSquareFeatureSet(request)
      return recv_getSquareFeatureSet()
    end

    def send_getSquareFeatureSet(request)
      send_message('getSquareFeatureSet', GetSquareFeatureSet_args, :request => request)
    end

    def recv_getSquareFeatureSet()
      result = receive_message(GetSquareFeatureSet_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSquareFeatureSet failed: unknown result')
    end

    def searchSquares(request)
      send_searchSquares(request)
      return recv_searchSquares()
    end

    def send_searchSquares(request)
      send_message('searchSquares', SearchSquares_args, :request => request)
    end

    def recv_searchSquares()
      result = receive_message(SearchSquares_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'searchSquares failed: unknown result')
    end

    def updateSquare(request)
      send_updateSquare(request)
      return recv_updateSquare()
    end

    def send_updateSquare(request)
      send_message('updateSquare', UpdateSquare_args, :request => request)
    end

    def recv_updateSquare()
      result = receive_message(UpdateSquare_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateSquare failed: unknown result')
    end

    def getCategories(request)
      send_getCategories(request)
      return recv_getCategories()
    end

    def send_getCategories(request)
      send_message('getCategories', GetCategories_args, :request => request)
    end

    def recv_getCategories()
      result = receive_message(GetCategories_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCategories failed: unknown result')
    end

    def searchSquareMembers(request)
      send_searchSquareMembers(request)
      return recv_searchSquareMembers()
    end

    def send_searchSquareMembers(request)
      send_message('searchSquareMembers', SearchSquareMembers_args, :request => request)
    end

    def recv_searchSquareMembers()
      result = receive_message(SearchSquareMembers_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'searchSquareMembers failed: unknown result')
    end

    def fetchSquareChatEvents(request)
      send_fetchSquareChatEvents(request)
      return recv_fetchSquareChatEvents()
    end

    def send_fetchSquareChatEvents(request)
      send_message('fetchSquareChatEvents', FetchSquareChatEvents_args, :request => request)
    end

    def recv_fetchSquareChatEvents()
      result = receive_message(FetchSquareChatEvents_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'fetchSquareChatEvents failed: unknown result')
    end

    def fetchMyEvents(request)
      send_fetchMyEvents(request)
      return recv_fetchMyEvents()
    end

    def send_fetchMyEvents(request)
      send_message('fetchMyEvents', FetchMyEvents_args, :request => request)
    end

    def recv_fetchMyEvents()
      result = receive_message(FetchMyEvents_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'fetchMyEvents failed: unknown result')
    end

    def markAsRead(request)
      send_markAsRead(request)
      return recv_markAsRead()
    end

    def send_markAsRead(request)
      send_message('markAsRead', MarkAsRead_args, :request => request)
    end

    def recv_markAsRead()
      result = receive_message(MarkAsRead_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'markAsRead failed: unknown result')
    end

    def getSquareAuthority(request)
      send_getSquareAuthority(request)
      return recv_getSquareAuthority()
    end

    def send_getSquareAuthority(request)
      send_message('getSquareAuthority', GetSquareAuthority_args, :request => request)
    end

    def recv_getSquareAuthority()
      result = receive_message(GetSquareAuthority_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSquareAuthority failed: unknown result')
    end

    def sendMessage(request)
      send_sendMessage(request)
      return recv_sendMessage()
    end

    def send_sendMessage(request)
      send_message('sendMessage', SendMessage_args, :request => request)
    end

    def recv_sendMessage()
      result = receive_message(SendMessage_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendMessage failed: unknown result')
    end

    def leaveSquare(request)
      send_leaveSquare(request)
      return recv_leaveSquare()
    end

    def send_leaveSquare(request)
      send_message('leaveSquare', LeaveSquare_args, :request => request)
    end

    def recv_leaveSquare()
      result = receive_message(LeaveSquare_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'leaveSquare failed: unknown result')
    end

    def leaveSquareChat(request)
      send_leaveSquareChat(request)
      return recv_leaveSquareChat()
    end

    def send_leaveSquareChat(request)
      send_message('leaveSquareChat', LeaveSquareChat_args, :request => request)
    end

    def recv_leaveSquareChat()
      result = receive_message(LeaveSquareChat_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'leaveSquareChat failed: unknown result')
    end

    def joinSquareChat(request)
      send_joinSquareChat(request)
      return recv_joinSquareChat()
    end

    def send_joinSquareChat(request)
      send_message('joinSquareChat', JoinSquareChat_args, :request => request)
    end

    def recv_joinSquareChat()
      result = receive_message(JoinSquareChat_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'joinSquareChat failed: unknown result')
    end

    def joinSquare(request)
      send_joinSquare(request)
      return recv_joinSquare()
    end

    def send_joinSquare(request)
      send_message('joinSquare', JoinSquare_args, :request => request)
    end

    def recv_joinSquare()
      result = receive_message(JoinSquare_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'joinSquare failed: unknown result')
    end

    def inviteToSquare(request)
      send_inviteToSquare(request)
      return recv_inviteToSquare()
    end

    def send_inviteToSquare(request)
      send_message('inviteToSquare', InviteToSquare_args, :request => request)
    end

    def recv_inviteToSquare()
      result = receive_message(InviteToSquare_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'inviteToSquare failed: unknown result')
    end

    def inviteToSquareChat(request)
      send_inviteToSquareChat(request)
      return recv_inviteToSquareChat()
    end

    def send_inviteToSquareChat(request)
      send_message('inviteToSquareChat', InviteToSquareChat_args, :request => request)
    end

    def recv_inviteToSquareChat()
      result = receive_message(InviteToSquareChat_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'inviteToSquareChat failed: unknown result')
    end

    def getSquareMember(request)
      send_getSquareMember(request)
      return recv_getSquareMember()
    end

    def send_getSquareMember(request)
      send_message('getSquareMember', GetSquareMember_args, :request => request)
    end

    def recv_getSquareMember()
      result = receive_message(GetSquareMember_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSquareMember failed: unknown result')
    end

    def getSquareMembers(request)
      send_getSquareMembers(request)
      return recv_getSquareMembers()
    end

    def send_getSquareMembers(request)
      send_message('getSquareMembers', GetSquareMembers_args, :request => request)
    end

    def recv_getSquareMembers()
      result = receive_message(GetSquareMembers_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSquareMembers failed: unknown result')
    end

    def getSquareMemberRelation(request)
      send_getSquareMemberRelation(request)
      return recv_getSquareMemberRelation()
    end

    def send_getSquareMemberRelation(request)
      send_message('getSquareMemberRelation', GetSquareMemberRelation_args, :request => request)
    end

    def recv_getSquareMemberRelation()
      result = receive_message(GetSquareMemberRelation_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSquareMemberRelation failed: unknown result')
    end

    def getSquareMemberRelations(request)
      send_getSquareMemberRelations(request)
      return recv_getSquareMemberRelations()
    end

    def send_getSquareMemberRelations(request)
      send_message('getSquareMemberRelations', GetSquareMemberRelations_args, :request => request)
    end

    def recv_getSquareMemberRelations()
      result = receive_message(GetSquareMemberRelations_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSquareMemberRelations failed: unknown result')
    end

    def getSquareChatMembers(request)
      send_getSquareChatMembers(request)
      return recv_getSquareChatMembers()
    end

    def send_getSquareChatMembers(request)
      send_message('getSquareChatMembers', GetSquareChatMembers_args, :request => request)
    end

    def recv_getSquareChatMembers()
      result = receive_message(GetSquareChatMembers_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSquareChatMembers failed: unknown result')
    end

    def getSquareChatStatus(request)
      send_getSquareChatStatus(request)
      return recv_getSquareChatStatus()
    end

    def send_getSquareChatStatus(request)
      send_message('getSquareChatStatus', GetSquareChatStatus_args, :request => request)
    end

    def recv_getSquareChatStatus()
      result = receive_message(GetSquareChatStatus_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSquareChatStatus failed: unknown result')
    end

    def getSquareChat(request)
      send_getSquareChat(request)
      return recv_getSquareChat()
    end

    def send_getSquareChat(request)
      send_message('getSquareChat', GetSquareChat_args, :request => request)
    end

    def recv_getSquareChat()
      result = receive_message(GetSquareChat_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSquareChat failed: unknown result')
    end

    def getSquare(request)
      send_getSquare(request)
      return recv_getSquare()
    end

    def send_getSquare(request)
      send_message('getSquare', GetSquare_args, :request => request)
    end

    def recv_getSquare()
      result = receive_message(GetSquare_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSquare failed: unknown result')
    end

    def getJoinedSquares(request)
      send_getJoinedSquares(request)
      return recv_getJoinedSquares()
    end

    def send_getJoinedSquares(request)
      send_message('getJoinedSquares', GetJoinedSquares_args, :request => request)
    end

    def recv_getJoinedSquares()
      result = receive_message(GetJoinedSquares_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getJoinedSquares failed: unknown result')
    end

    def getJoinedSquareChats(request)
      send_getJoinedSquareChats(request)
      return recv_getJoinedSquareChats()
    end

    def send_getJoinedSquareChats(request)
      send_message('getJoinedSquareChats', GetJoinedSquareChats_args, :request => request)
    end

    def recv_getJoinedSquareChats()
      result = receive_message(GetJoinedSquareChats_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getJoinedSquareChats failed: unknown result')
    end

    def approveSquareMembers(request)
      send_approveSquareMembers(request)
      return recv_approveSquareMembers()
    end

    def send_approveSquareMembers(request)
      send_message('approveSquareMembers', ApproveSquareMembers_args, :request => request)
    end

    def recv_approveSquareMembers()
      result = receive_message(ApproveSquareMembers_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'approveSquareMembers failed: unknown result')
    end

    def createSquareChat(request)
      send_createSquareChat(request)
      return recv_createSquareChat()
    end

    def send_createSquareChat(request)
      send_message('createSquareChat', CreateSquareChat_args, :request => request)
    end

    def recv_createSquareChat()
      result = receive_message(CreateSquareChat_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createSquareChat failed: unknown result')
    end

    def createSquare(request)
      send_createSquare(request)
      return recv_createSquare()
    end

    def send_createSquare(request)
      send_message('createSquare', CreateSquare_args, :request => request)
    end

    def recv_createSquare()
      result = receive_message(CreateSquare_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createSquare failed: unknown result')
    end

    def deleteSquareChat(request)
      send_deleteSquareChat(request)
      return recv_deleteSquareChat()
    end

    def send_deleteSquareChat(request)
      send_message('deleteSquareChat', DeleteSquareChat_args, :request => request)
    end

    def recv_deleteSquareChat()
      result = receive_message(DeleteSquareChat_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteSquareChat failed: unknown result')
    end

    def deleteSquare(request)
      send_deleteSquare(request)
      return recv_deleteSquare()
    end

    def send_deleteSquare(request)
      send_message('deleteSquare', DeleteSquare_args, :request => request)
    end

    def recv_deleteSquare()
      result = receive_message(DeleteSquare_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteSquare failed: unknown result')
    end

    def destroyMessage(request)
      send_destroyMessage(request)
      return recv_destroyMessage()
    end

    def send_destroyMessage(request)
      send_message('destroyMessage', DestroyMessage_args, :request => request)
    end

    def recv_destroyMessage()
      result = receive_message(DestroyMessage_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'destroyMessage failed: unknown result')
    end

    def getJoinableSquareChats(request)
      send_getJoinableSquareChats(request)
      return recv_getJoinableSquareChats()
    end

    def send_getJoinableSquareChats(request)
      send_message('getJoinableSquareChats', GetJoinableSquareChats_args, :request => request)
    end

    def recv_getJoinableSquareChats()
      result = receive_message(GetJoinableSquareChats_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getJoinableSquareChats failed: unknown result')
    end

    def getInvitationTicketUrl(request)
      send_getInvitationTicketUrl(request)
      return recv_getInvitationTicketUrl()
    end

    def send_getInvitationTicketUrl(request)
      send_message('getInvitationTicketUrl', GetInvitationTicketUrl_args, :request => request)
    end

    def recv_getInvitationTicketUrl()
      result = receive_message(GetInvitationTicketUrl_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getInvitationTicketUrl failed: unknown result')
    end

    def findSquareByInvitationTicket(request)
      send_findSquareByInvitationTicket(request)
      return recv_findSquareByInvitationTicket()
    end

    def send_findSquareByInvitationTicket(request)
      send_message('findSquareByInvitationTicket', FindSquareByInvitationTicket_args, :request => request)
    end

    def recv_findSquareByInvitationTicket()
      result = receive_message(FindSquareByInvitationTicket_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findSquareByInvitationTicket failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_getSquareChatAnnouncements(seqid, iprot, oprot)
      args = read_args(iprot, GetSquareChatAnnouncements_args)
      result = GetSquareChatAnnouncements_result.new()
      begin
        result.success = @handler.getSquareChatAnnouncements(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getSquareChatAnnouncements', seqid)
    end

    def process_deleteSquareChatAnnouncement(seqid, iprot, oprot)
      args = read_args(iprot, DeleteSquareChatAnnouncement_args)
      result = DeleteSquareChatAnnouncement_result.new()
      begin
        result.success = @handler.deleteSquareChatAnnouncement(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'deleteSquareChatAnnouncement', seqid)
    end

    def process_createSquareChatAnnouncement(seqid, iprot, oprot)
      args = read_args(iprot, CreateSquareChatAnnouncement_args)
      result = CreateSquareChatAnnouncement_result.new()
      begin
        result.success = @handler.createSquareChatAnnouncement(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'createSquareChatAnnouncement', seqid)
    end

    def process_getNoteStatus(seqid, iprot, oprot)
      args = read_args(iprot, GetNoteStatus_args)
      result = GetNoteStatus_result.new()
      begin
        result.success = @handler.getNoteStatus(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getNoteStatus', seqid)
    end

    def process_getSquareStatus(seqid, iprot, oprot)
      args = read_args(iprot, GetSquareStatus_args)
      result = GetSquareStatus_result.new()
      begin
        result.success = @handler.getSquareStatus(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getSquareStatus', seqid)
    end

    def process_reportSquareMember(seqid, iprot, oprot)
      args = read_args(iprot, ReportSquareMember_args)
      result = ReportSquareMember_result.new()
      begin
        result.success = @handler.reportSquareMember(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'reportSquareMember', seqid)
    end

    def process_reportSquareMessage(seqid, iprot, oprot)
      args = read_args(iprot, ReportSquareMessage_args)
      result = ReportSquareMessage_result.new()
      begin
        result.success = @handler.reportSquareMessage(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'reportSquareMessage', seqid)
    end

    def process_reportSquareChat(seqid, iprot, oprot)
      args = read_args(iprot, ReportSquareChat_args)
      result = ReportSquareChat_result.new()
      begin
        result.success = @handler.reportSquareChat(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'reportSquareChat', seqid)
    end

    def process_reportSquare(seqid, iprot, oprot)
      args = read_args(iprot, ReportSquare_args)
      result = ReportSquare_result.new()
      begin
        result.success = @handler.reportSquare(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'reportSquare', seqid)
    end

    def process_updateSquareMemberRelation(seqid, iprot, oprot)
      args = read_args(iprot, UpdateSquareMemberRelation_args)
      result = UpdateSquareMemberRelation_result.new()
      begin
        result.success = @handler.updateSquareMemberRelation(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'updateSquareMemberRelation', seqid)
    end

    def process_updateSquareAuthority(seqid, iprot, oprot)
      args = read_args(iprot, UpdateSquareAuthority_args)
      result = UpdateSquareAuthority_result.new()
      begin
        result.success = @handler.updateSquareAuthority(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'updateSquareAuthority', seqid)
    end

    def process_updateSquareChatMember(seqid, iprot, oprot)
      args = read_args(iprot, UpdateSquareChatMember_args)
      result = UpdateSquareChatMember_result.new()
      begin
        result.success = @handler.updateSquareChatMember(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'updateSquareChatMember', seqid)
    end

    def process_updateSquareChat(seqid, iprot, oprot)
      args = read_args(iprot, UpdateSquareChat_args)
      result = UpdateSquareChat_result.new()
      begin
        result.success = @handler.updateSquareChat(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'updateSquareChat', seqid)
    end

    def process_refreshSubscriptions(seqid, iprot, oprot)
      args = read_args(iprot, RefreshSubscriptions_args)
      result = RefreshSubscriptions_result.new()
      begin
        result.success = @handler.refreshSubscriptions(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'refreshSubscriptions', seqid)
    end

    def process_removeSubscriptions(seqid, iprot, oprot)
      args = read_args(iprot, RemoveSubscriptions_args)
      result = RemoveSubscriptions_result.new()
      begin
        result.success = @handler.removeSubscriptions(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'removeSubscriptions', seqid)
    end

    def process_rejectSquareMembers(seqid, iprot, oprot)
      args = read_args(iprot, RejectSquareMembers_args)
      result = RejectSquareMembers_result.new()
      begin
        result.success = @handler.rejectSquareMembers(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'rejectSquareMembers', seqid)
    end

    def process_updateSquareMembers(seqid, iprot, oprot)
      args = read_args(iprot, UpdateSquareMembers_args)
      result = UpdateSquareMembers_result.new()
      begin
        result.success = @handler.updateSquareMembers(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'updateSquareMembers', seqid)
    end

    def process_updateSquareMember(seqid, iprot, oprot)
      args = read_args(iprot, UpdateSquareMember_args)
      result = UpdateSquareMember_result.new()
      begin
        result.success = @handler.updateSquareMember(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'updateSquareMember', seqid)
    end

    def process_updateSquareFeatureSet(seqid, iprot, oprot)
      args = read_args(iprot, UpdateSquareFeatureSet_args)
      result = UpdateSquareFeatureSet_result.new()
      begin
        result.success = @handler.updateSquareFeatureSet(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'updateSquareFeatureSet', seqid)
    end

    def process_getSquareFeatureSet(seqid, iprot, oprot)
      args = read_args(iprot, GetSquareFeatureSet_args)
      result = GetSquareFeatureSet_result.new()
      begin
        result.success = @handler.getSquareFeatureSet(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getSquareFeatureSet', seqid)
    end

    def process_searchSquares(seqid, iprot, oprot)
      args = read_args(iprot, SearchSquares_args)
      result = SearchSquares_result.new()
      begin
        result.success = @handler.searchSquares(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'searchSquares', seqid)
    end

    def process_updateSquare(seqid, iprot, oprot)
      args = read_args(iprot, UpdateSquare_args)
      result = UpdateSquare_result.new()
      begin
        result.success = @handler.updateSquare(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'updateSquare', seqid)
    end

    def process_getCategories(seqid, iprot, oprot)
      args = read_args(iprot, GetCategories_args)
      result = GetCategories_result.new()
      begin
        result.success = @handler.getCategories(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getCategories', seqid)
    end

    def process_searchSquareMembers(seqid, iprot, oprot)
      args = read_args(iprot, SearchSquareMembers_args)
      result = SearchSquareMembers_result.new()
      begin
        result.success = @handler.searchSquareMembers(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'searchSquareMembers', seqid)
    end

    def process_fetchSquareChatEvents(seqid, iprot, oprot)
      args = read_args(iprot, FetchSquareChatEvents_args)
      result = FetchSquareChatEvents_result.new()
      begin
        result.success = @handler.fetchSquareChatEvents(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'fetchSquareChatEvents', seqid)
    end

    def process_fetchMyEvents(seqid, iprot, oprot)
      args = read_args(iprot, FetchMyEvents_args)
      result = FetchMyEvents_result.new()
      begin
        result.success = @handler.fetchMyEvents(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'fetchMyEvents', seqid)
    end

    def process_markAsRead(seqid, iprot, oprot)
      args = read_args(iprot, MarkAsRead_args)
      result = MarkAsRead_result.new()
      begin
        result.success = @handler.markAsRead(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'markAsRead', seqid)
    end

    def process_getSquareAuthority(seqid, iprot, oprot)
      args = read_args(iprot, GetSquareAuthority_args)
      result = GetSquareAuthority_result.new()
      begin
        result.success = @handler.getSquareAuthority(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getSquareAuthority', seqid)
    end

    def process_sendMessage(seqid, iprot, oprot)
      args = read_args(iprot, SendMessage_args)
      result = SendMessage_result.new()
      begin
        result.success = @handler.sendMessage(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'sendMessage', seqid)
    end

    def process_leaveSquare(seqid, iprot, oprot)
      args = read_args(iprot, LeaveSquare_args)
      result = LeaveSquare_result.new()
      begin
        result.success = @handler.leaveSquare(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'leaveSquare', seqid)
    end

    def process_leaveSquareChat(seqid, iprot, oprot)
      args = read_args(iprot, LeaveSquareChat_args)
      result = LeaveSquareChat_result.new()
      begin
        result.success = @handler.leaveSquareChat(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'leaveSquareChat', seqid)
    end

    def process_joinSquareChat(seqid, iprot, oprot)
      args = read_args(iprot, JoinSquareChat_args)
      result = JoinSquareChat_result.new()
      begin
        result.success = @handler.joinSquareChat(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'joinSquareChat', seqid)
    end

    def process_joinSquare(seqid, iprot, oprot)
      args = read_args(iprot, JoinSquare_args)
      result = JoinSquare_result.new()
      begin
        result.success = @handler.joinSquare(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'joinSquare', seqid)
    end

    def process_inviteToSquare(seqid, iprot, oprot)
      args = read_args(iprot, InviteToSquare_args)
      result = InviteToSquare_result.new()
      begin
        result.success = @handler.inviteToSquare(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'inviteToSquare', seqid)
    end

    def process_inviteToSquareChat(seqid, iprot, oprot)
      args = read_args(iprot, InviteToSquareChat_args)
      result = InviteToSquareChat_result.new()
      begin
        result.success = @handler.inviteToSquareChat(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'inviteToSquareChat', seqid)
    end

    def process_getSquareMember(seqid, iprot, oprot)
      args = read_args(iprot, GetSquareMember_args)
      result = GetSquareMember_result.new()
      begin
        result.success = @handler.getSquareMember(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getSquareMember', seqid)
    end

    def process_getSquareMembers(seqid, iprot, oprot)
      args = read_args(iprot, GetSquareMembers_args)
      result = GetSquareMembers_result.new()
      begin
        result.success = @handler.getSquareMembers(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getSquareMembers', seqid)
    end

    def process_getSquareMemberRelation(seqid, iprot, oprot)
      args = read_args(iprot, GetSquareMemberRelation_args)
      result = GetSquareMemberRelation_result.new()
      begin
        result.success = @handler.getSquareMemberRelation(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getSquareMemberRelation', seqid)
    end

    def process_getSquareMemberRelations(seqid, iprot, oprot)
      args = read_args(iprot, GetSquareMemberRelations_args)
      result = GetSquareMemberRelations_result.new()
      begin
        result.success = @handler.getSquareMemberRelations(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getSquareMemberRelations', seqid)
    end

    def process_getSquareChatMembers(seqid, iprot, oprot)
      args = read_args(iprot, GetSquareChatMembers_args)
      result = GetSquareChatMembers_result.new()
      begin
        result.success = @handler.getSquareChatMembers(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getSquareChatMembers', seqid)
    end

    def process_getSquareChatStatus(seqid, iprot, oprot)
      args = read_args(iprot, GetSquareChatStatus_args)
      result = GetSquareChatStatus_result.new()
      begin
        result.success = @handler.getSquareChatStatus(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getSquareChatStatus', seqid)
    end

    def process_getSquareChat(seqid, iprot, oprot)
      args = read_args(iprot, GetSquareChat_args)
      result = GetSquareChat_result.new()
      begin
        result.success = @handler.getSquareChat(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getSquareChat', seqid)
    end

    def process_getSquare(seqid, iprot, oprot)
      args = read_args(iprot, GetSquare_args)
      result = GetSquare_result.new()
      begin
        result.success = @handler.getSquare(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getSquare', seqid)
    end

    def process_getJoinedSquares(seqid, iprot, oprot)
      args = read_args(iprot, GetJoinedSquares_args)
      result = GetJoinedSquares_result.new()
      begin
        result.success = @handler.getJoinedSquares(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getJoinedSquares', seqid)
    end

    def process_getJoinedSquareChats(seqid, iprot, oprot)
      args = read_args(iprot, GetJoinedSquareChats_args)
      result = GetJoinedSquareChats_result.new()
      begin
        result.success = @handler.getJoinedSquareChats(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getJoinedSquareChats', seqid)
    end

    def process_approveSquareMembers(seqid, iprot, oprot)
      args = read_args(iprot, ApproveSquareMembers_args)
      result = ApproveSquareMembers_result.new()
      begin
        result.success = @handler.approveSquareMembers(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'approveSquareMembers', seqid)
    end

    def process_createSquareChat(seqid, iprot, oprot)
      args = read_args(iprot, CreateSquareChat_args)
      result = CreateSquareChat_result.new()
      begin
        result.success = @handler.createSquareChat(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'createSquareChat', seqid)
    end

    def process_createSquare(seqid, iprot, oprot)
      args = read_args(iprot, CreateSquare_args)
      result = CreateSquare_result.new()
      begin
        result.success = @handler.createSquare(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'createSquare', seqid)
    end

    def process_deleteSquareChat(seqid, iprot, oprot)
      args = read_args(iprot, DeleteSquareChat_args)
      result = DeleteSquareChat_result.new()
      begin
        result.success = @handler.deleteSquareChat(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'deleteSquareChat', seqid)
    end

    def process_deleteSquare(seqid, iprot, oprot)
      args = read_args(iprot, DeleteSquare_args)
      result = DeleteSquare_result.new()
      begin
        result.success = @handler.deleteSquare(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'deleteSquare', seqid)
    end

    def process_destroyMessage(seqid, iprot, oprot)
      args = read_args(iprot, DestroyMessage_args)
      result = DestroyMessage_result.new()
      begin
        result.success = @handler.destroyMessage(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'destroyMessage', seqid)
    end

    def process_getJoinableSquareChats(seqid, iprot, oprot)
      args = read_args(iprot, GetJoinableSquareChats_args)
      result = GetJoinableSquareChats_result.new()
      begin
        result.success = @handler.getJoinableSquareChats(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getJoinableSquareChats', seqid)
    end

    def process_getInvitationTicketUrl(seqid, iprot, oprot)
      args = read_args(iprot, GetInvitationTicketUrl_args)
      result = GetInvitationTicketUrl_result.new()
      begin
        result.success = @handler.getInvitationTicketUrl(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'getInvitationTicketUrl', seqid)
    end

    def process_findSquareByInvitationTicket(seqid, iprot, oprot)
      args = read_args(iprot, FindSquareByInvitationTicket_args)
      result = FindSquareByInvitationTicket_result.new()
      begin
        result.success = @handler.findSquareByInvitationTicket(args.request)
      rescue ::SquareException => e
        result.e = e
      end
      write_result(result, oprot, 'findSquareByInvitationTicket', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class GetSquareChatAnnouncements_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetSquareChatAnnouncementsRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareChatAnnouncements_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetSquareChatAnnouncementsResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteSquareChatAnnouncement_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::DeleteSquareChatAnnouncementRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteSquareChatAnnouncement_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::DeleteSquareChatAnnouncementResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateSquareChatAnnouncement_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CreateSquareChatAnnouncementRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateSquareChatAnnouncement_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CreateSquareChatAnnouncementResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNoteStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetNoteStatusRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNoteStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetNoteStatusResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetSquareStatusRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetSquareStatusResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportSquareMember_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ReportSquareMemberRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportSquareMember_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ReportSquareMemberResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportSquareMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ReportSquareMessageRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportSquareMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ReportSquareMessageResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportSquareChat_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ReportSquareChatRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportSquareChat_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ReportSquareChatResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportSquare_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ReportSquareRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportSquare_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ReportSquareResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSquareMemberRelation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::UpdateSquareMemberRelationRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSquareMemberRelation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UpdateSquareMemberRelationResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSquareAuthority_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::UpdateSquareAuthorityRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSquareAuthority_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UpdateSquareAuthorityResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSquareChatMember_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::UpdateSquareChatMemberRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSquareChatMember_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UpdateSquareChatMemberResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSquareChat_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::UpdateSquareChatRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSquareChat_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UpdateSquareChatResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RefreshSubscriptions_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::RefreshSubscriptionsRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RefreshSubscriptions_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::RefreshSubscriptionsResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveSubscriptions_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::RemoveSubscriptionsRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveSubscriptions_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::RemoveSubscriptionsResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RejectSquareMembers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::RejectSquareMembersRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RejectSquareMembers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::RejectSquareMembersResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSquareMembers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::UpdateSquareMembersRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSquareMembers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UpdateSquareMembersResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSquareMember_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::UpdateSquareMemberRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSquareMember_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UpdateSquareMemberResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSquareFeatureSet_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::UpdateSquareFeatureSetRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSquareFeatureSet_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UpdateSquareFeatureSetResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareFeatureSet_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetSquareFeatureSetRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareFeatureSet_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetSquareFeatureSetResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SearchSquares_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::SearchSquaresRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SearchSquares_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SearchSquaresResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSquare_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::UpdateSquareRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSquare_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UpdateSquareResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCategories_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetSquareCategoriesRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCategories_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetSquareCategoriesResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SearchSquareMembers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::SearchSquareMembersRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SearchSquareMembers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SearchSquareMembersResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchSquareChatEvents_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::FetchSquareChatEventsRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchSquareChatEvents_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::FetchSquareChatEventsResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchMyEvents_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::FetchMyEventsRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchMyEvents_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::FetchMyEventsResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MarkAsRead_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::MarkAsReadRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MarkAsRead_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::MarkAsReadResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareAuthority_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetSquareAuthorityRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareAuthority_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetSquareAuthorityResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::SendMessageRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SendMessageResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LeaveSquare_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::LeaveSquareRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LeaveSquare_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::LeaveSquareResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LeaveSquareChat_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::LeaveSquareChatRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LeaveSquareChat_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::LeaveSquareChatResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class JoinSquareChat_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::JoinSquareChatRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class JoinSquareChat_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::JoinSquareChatResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class JoinSquare_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::JoinSquareRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class JoinSquare_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::JoinSquareResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteToSquare_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::InviteToSquareRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteToSquare_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::InviteToSquareResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteToSquareChat_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::InviteToSquareChatRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteToSquareChat_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::InviteToSquareChatResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareMember_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetSquareMemberRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareMember_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetSquareMemberResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareMembers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetSquareMembersRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareMembers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetSquareMembersResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareMemberRelation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetSquareMemberRelationRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareMemberRelation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetSquareMemberRelationResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareMemberRelations_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetSquareMemberRelationsRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareMemberRelations_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetSquareMemberRelationsResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareChatMembers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetSquareChatMembersRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareChatMembers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetSquareChatMembersResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareChatStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetSquareChatStatusRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareChatStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetSquareChatStatusResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareChat_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetSquareChatRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquareChat_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetSquareChatResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquare_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetSquareRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSquare_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetSquareResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetJoinedSquares_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetJoinedSquaresRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetJoinedSquares_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetJoinedSquaresResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetJoinedSquareChats_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetJoinedSquareChatsRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetJoinedSquareChats_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetJoinedSquareChatsResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ApproveSquareMembers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ApproveSquareMembersRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ApproveSquareMembers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ApproveSquareMembersResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateSquareChat_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CreateSquareChatRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateSquareChat_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CreateSquareChatResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateSquare_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CreateSquareRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateSquare_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CreateSquareResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteSquareChat_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::DeleteSquareChatRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteSquareChat_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::DeleteSquareChatResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteSquare_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::DeleteSquareRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteSquare_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::DeleteSquareResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DestroyMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::DestroyMessageRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DestroyMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::DestroyMessageResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetJoinableSquareChats_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetJoinableSquareChatsRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetJoinableSquareChats_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetJoinableSquareChatsResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetInvitationTicketUrl_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetInvitationTicketUrlRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetInvitationTicketUrl_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetInvitationTicketUrlResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindSquareByInvitationTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::FindSquareByInvitationTicketRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindSquareByInvitationTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::FindSquareByInvitationTicketResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SquareException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

