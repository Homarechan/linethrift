#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'line_types'

module ChannelService
  class Client
    include ::Thrift::Client

    def issueOTP(channelId)
      send_issueOTP(channelId)
      return recv_issueOTP()
    end

    def send_issueOTP(channelId)
      send_message('issueOTP', IssueOTP_args, :channelId => channelId)
    end

    def recv_issueOTP()
      result = receive_message(IssueOTP_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'issueOTP failed: unknown result')
    end

    def approveChannelAndIssueChannelToken(channelId)
      send_approveChannelAndIssueChannelToken(channelId)
      return recv_approveChannelAndIssueChannelToken()
    end

    def send_approveChannelAndIssueChannelToken(channelId)
      send_message('approveChannelAndIssueChannelToken', ApproveChannelAndIssueChannelToken_args, :channelId => channelId)
    end

    def recv_approveChannelAndIssueChannelToken()
      result = receive_message(ApproveChannelAndIssueChannelToken_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'approveChannelAndIssueChannelToken failed: unknown result')
    end

    def approveChannelAndIssueRequestToken(channelId, otpId)
      send_approveChannelAndIssueRequestToken(channelId, otpId)
      return recv_approveChannelAndIssueRequestToken()
    end

    def send_approveChannelAndIssueRequestToken(channelId, otpId)
      send_message('approveChannelAndIssueRequestToken', ApproveChannelAndIssueRequestToken_args, :channelId => channelId, :otpId => otpId)
    end

    def recv_approveChannelAndIssueRequestToken()
      result = receive_message(ApproveChannelAndIssueRequestToken_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'approveChannelAndIssueRequestToken failed: unknown result')
    end

    def fetchNotificationItems(localRev)
      send_fetchNotificationItems(localRev)
      return recv_fetchNotificationItems()
    end

    def send_fetchNotificationItems(localRev)
      send_message('fetchNotificationItems', FetchNotificationItems_args, :localRev => localRev)
    end

    def recv_fetchNotificationItems()
      result = receive_message(FetchNotificationItems_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'fetchNotificationItems failed: unknown result')
    end

    def getApprovedChannels(lastSynced, locale)
      send_getApprovedChannels(lastSynced, locale)
      return recv_getApprovedChannels()
    end

    def send_getApprovedChannels(lastSynced, locale)
      send_message('getApprovedChannels', GetApprovedChannels_args, :lastSynced => lastSynced, :locale => locale)
    end

    def recv_getApprovedChannels()
      result = receive_message(GetApprovedChannels_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getApprovedChannels failed: unknown result')
    end

    def getChannelInfo(channelId, locale)
      send_getChannelInfo(channelId, locale)
      return recv_getChannelInfo()
    end

    def send_getChannelInfo(channelId, locale)
      send_message('getChannelInfo', GetChannelInfo_args, :channelId => channelId, :locale => locale)
    end

    def recv_getChannelInfo()
      result = receive_message(GetChannelInfo_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getChannelInfo failed: unknown result')
    end

    def getChannelNotificationSetting(channelId, locale)
      send_getChannelNotificationSetting(channelId, locale)
      return recv_getChannelNotificationSetting()
    end

    def send_getChannelNotificationSetting(channelId, locale)
      send_message('getChannelNotificationSetting', GetChannelNotificationSetting_args, :channelId => channelId, :locale => locale)
    end

    def recv_getChannelNotificationSetting()
      result = receive_message(GetChannelNotificationSetting_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getChannelNotificationSetting failed: unknown result')
    end

    def getChannelNotificationSettings(locale)
      send_getChannelNotificationSettings(locale)
      return recv_getChannelNotificationSettings()
    end

    def send_getChannelNotificationSettings(locale)
      send_message('getChannelNotificationSettings', GetChannelNotificationSettings_args, :locale => locale)
    end

    def recv_getChannelNotificationSettings()
      result = receive_message(GetChannelNotificationSettings_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getChannelNotificationSettings failed: unknown result')
    end

    def getChannels(lastSynced, locale)
      send_getChannels(lastSynced, locale)
      return recv_getChannels()
    end

    def send_getChannels(lastSynced, locale)
      send_message('getChannels', GetChannels_args, :lastSynced => lastSynced, :locale => locale)
    end

    def recv_getChannels()
      result = receive_message(GetChannels_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getChannels failed: unknown result')
    end

    def getDomains(lastSynced)
      send_getDomains(lastSynced)
      return recv_getDomains()
    end

    def send_getDomains(lastSynced)
      send_message('getDomains', GetDomains_args, :lastSynced => lastSynced)
    end

    def recv_getDomains()
      result = receive_message(GetDomains_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getDomains failed: unknown result')
    end

    def getFriendChannelMatrices(channelIds)
      send_getFriendChannelMatrices(channelIds)
      return recv_getFriendChannelMatrices()
    end

    def send_getFriendChannelMatrices(channelIds)
      send_message('getFriendChannelMatrices', GetFriendChannelMatrices_args, :channelIds => channelIds)
    end

    def recv_getFriendChannelMatrices()
      result = receive_message(GetFriendChannelMatrices_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getFriendChannelMatrices failed: unknown result')
    end

    def updateChannelSettings(channelSettings)
      send_updateChannelSettings(channelSettings)
      return recv_updateChannelSettings()
    end

    def send_updateChannelSettings(channelSettings)
      send_message('updateChannelSettings', UpdateChannelSettings_args, :channelSettings => channelSettings)
    end

    def recv_updateChannelSettings()
      result = receive_message(UpdateChannelSettings_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateChannelSettings failed: unknown result')
    end

    def getCommonDomains(lastSynced)
      send_getCommonDomains(lastSynced)
      return recv_getCommonDomains()
    end

    def send_getCommonDomains(lastSynced)
      send_message('getCommonDomains', GetCommonDomains_args, :lastSynced => lastSynced)
    end

    def recv_getCommonDomains()
      result = receive_message(GetCommonDomains_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCommonDomains failed: unknown result')
    end

    def getNotificationBadgeCount(localRev)
      send_getNotificationBadgeCount(localRev)
      return recv_getNotificationBadgeCount()
    end

    def send_getNotificationBadgeCount(localRev)
      send_message('getNotificationBadgeCount', GetNotificationBadgeCount_args, :localRev => localRev)
    end

    def recv_getNotificationBadgeCount()
      result = receive_message(GetNotificationBadgeCount_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getNotificationBadgeCount failed: unknown result')
    end

    def issueChannelToken(channelId)
      send_issueChannelToken(channelId)
      return recv_issueChannelToken()
    end

    def send_issueChannelToken(channelId)
      send_message('issueChannelToken', IssueChannelToken_args, :channelId => channelId)
    end

    def recv_issueChannelToken()
      result = receive_message(IssueChannelToken_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'issueChannelToken failed: unknown result')
    end

    def issueRequestToken(channelId, otpId)
      send_issueRequestToken(channelId, otpId)
      return recv_issueRequestToken()
    end

    def send_issueRequestToken(channelId, otpId)
      send_message('issueRequestToken', IssueRequestToken_args, :channelId => channelId, :otpId => otpId)
    end

    def recv_issueRequestToken()
      result = receive_message(IssueRequestToken_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'issueRequestToken failed: unknown result')
    end

    def issueRequestTokenWithAuthScheme(channelId, otpId, authScheme, returnUrl)
      send_issueRequestTokenWithAuthScheme(channelId, otpId, authScheme, returnUrl)
      return recv_issueRequestTokenWithAuthScheme()
    end

    def send_issueRequestTokenWithAuthScheme(channelId, otpId, authScheme, returnUrl)
      send_message('issueRequestTokenWithAuthScheme', IssueRequestTokenWithAuthScheme_args, :channelId => channelId, :otpId => otpId, :authScheme => authScheme, :returnUrl => returnUrl)
    end

    def recv_issueRequestTokenWithAuthScheme()
      result = receive_message(IssueRequestTokenWithAuthScheme_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'issueRequestTokenWithAuthScheme failed: unknown result')
    end

    def issueRequestTokenForAutoLogin(channelId, otpId, redirectUrl)
      send_issueRequestTokenForAutoLogin(channelId, otpId, redirectUrl)
      return recv_issueRequestTokenForAutoLogin()
    end

    def send_issueRequestTokenForAutoLogin(channelId, otpId, redirectUrl)
      send_message('issueRequestTokenForAutoLogin', IssueRequestTokenForAutoLogin_args, :channelId => channelId, :otpId => otpId, :redirectUrl => redirectUrl)
    end

    def recv_issueRequestTokenForAutoLogin()
      result = receive_message(IssueRequestTokenForAutoLogin_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'issueRequestTokenForAutoLogin failed: unknown result')
    end

    def getUpdatedChannelIds(channelIds)
      send_getUpdatedChannelIds(channelIds)
      return recv_getUpdatedChannelIds()
    end

    def send_getUpdatedChannelIds(channelIds)
      send_message('getUpdatedChannelIds', GetUpdatedChannelIds_args, :channelIds => channelIds)
    end

    def recv_getUpdatedChannelIds()
      result = receive_message(GetUpdatedChannelIds_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUpdatedChannelIds failed: unknown result')
    end

    def reserveCoinUse(request, locale)
      send_reserveCoinUse(request, locale)
      return recv_reserveCoinUse()
    end

    def send_reserveCoinUse(request, locale)
      send_message('reserveCoinUse', ReserveCoinUse_args, :request => request, :locale => locale)
    end

    def recv_reserveCoinUse()
      result = receive_message(ReserveCoinUse_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'reserveCoinUse failed: unknown result')
    end

    def revokeChannel(channelId)
      send_revokeChannel(channelId)
      recv_revokeChannel()
    end

    def send_revokeChannel(channelId)
      send_message('revokeChannel', RevokeChannel_args, :channelId => channelId)
    end

    def recv_revokeChannel()
      result = receive_message(RevokeChannel_result)
      raise result.e unless result.e.nil?
      return
    end

    def syncChannelData(lastSynced, locale)
      send_syncChannelData(lastSynced, locale)
      return recv_syncChannelData()
    end

    def send_syncChannelData(lastSynced, locale)
      send_message('syncChannelData', SyncChannelData_args, :lastSynced => lastSynced, :locale => locale)
    end

    def recv_syncChannelData()
      result = receive_message(SyncChannelData_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'syncChannelData failed: unknown result')
    end

    def updateChannelNotificationSetting(setting)
      send_updateChannelNotificationSetting(setting)
      recv_updateChannelNotificationSetting()
    end

    def send_updateChannelNotificationSetting(setting)
      send_message('updateChannelNotificationSetting', UpdateChannelNotificationSetting_args, :setting => setting)
    end

    def recv_updateChannelNotificationSetting()
      result = receive_message(UpdateChannelNotificationSetting_result)
      raise result.e unless result.e.nil?
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_issueOTP(seqid, iprot, oprot)
      args = read_args(iprot, IssueOTP_args)
      result = IssueOTP_result.new()
      begin
        result.success = @handler.issueOTP(args.channelId)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'issueOTP', seqid)
    end

    def process_approveChannelAndIssueChannelToken(seqid, iprot, oprot)
      args = read_args(iprot, ApproveChannelAndIssueChannelToken_args)
      result = ApproveChannelAndIssueChannelToken_result.new()
      begin
        result.success = @handler.approveChannelAndIssueChannelToken(args.channelId)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'approveChannelAndIssueChannelToken', seqid)
    end

    def process_approveChannelAndIssueRequestToken(seqid, iprot, oprot)
      args = read_args(iprot, ApproveChannelAndIssueRequestToken_args)
      result = ApproveChannelAndIssueRequestToken_result.new()
      begin
        result.success = @handler.approveChannelAndIssueRequestToken(args.channelId, args.otpId)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'approveChannelAndIssueRequestToken', seqid)
    end

    def process_fetchNotificationItems(seqid, iprot, oprot)
      args = read_args(iprot, FetchNotificationItems_args)
      result = FetchNotificationItems_result.new()
      begin
        result.success = @handler.fetchNotificationItems(args.localRev)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'fetchNotificationItems', seqid)
    end

    def process_getApprovedChannels(seqid, iprot, oprot)
      args = read_args(iprot, GetApprovedChannels_args)
      result = GetApprovedChannels_result.new()
      begin
        result.success = @handler.getApprovedChannels(args.lastSynced, args.locale)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'getApprovedChannels', seqid)
    end

    def process_getChannelInfo(seqid, iprot, oprot)
      args = read_args(iprot, GetChannelInfo_args)
      result = GetChannelInfo_result.new()
      begin
        result.success = @handler.getChannelInfo(args.channelId, args.locale)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'getChannelInfo', seqid)
    end

    def process_getChannelNotificationSetting(seqid, iprot, oprot)
      args = read_args(iprot, GetChannelNotificationSetting_args)
      result = GetChannelNotificationSetting_result.new()
      begin
        result.success = @handler.getChannelNotificationSetting(args.channelId, args.locale)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'getChannelNotificationSetting', seqid)
    end

    def process_getChannelNotificationSettings(seqid, iprot, oprot)
      args = read_args(iprot, GetChannelNotificationSettings_args)
      result = GetChannelNotificationSettings_result.new()
      begin
        result.success = @handler.getChannelNotificationSettings(args.locale)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'getChannelNotificationSettings', seqid)
    end

    def process_getChannels(seqid, iprot, oprot)
      args = read_args(iprot, GetChannels_args)
      result = GetChannels_result.new()
      begin
        result.success = @handler.getChannels(args.lastSynced, args.locale)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'getChannels', seqid)
    end

    def process_getDomains(seqid, iprot, oprot)
      args = read_args(iprot, GetDomains_args)
      result = GetDomains_result.new()
      begin
        result.success = @handler.getDomains(args.lastSynced)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'getDomains', seqid)
    end

    def process_getFriendChannelMatrices(seqid, iprot, oprot)
      args = read_args(iprot, GetFriendChannelMatrices_args)
      result = GetFriendChannelMatrices_result.new()
      begin
        result.success = @handler.getFriendChannelMatrices(args.channelIds)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'getFriendChannelMatrices', seqid)
    end

    def process_updateChannelSettings(seqid, iprot, oprot)
      args = read_args(iprot, UpdateChannelSettings_args)
      result = UpdateChannelSettings_result.new()
      begin
        result.success = @handler.updateChannelSettings(args.channelSettings)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'updateChannelSettings', seqid)
    end

    def process_getCommonDomains(seqid, iprot, oprot)
      args = read_args(iprot, GetCommonDomains_args)
      result = GetCommonDomains_result.new()
      begin
        result.success = @handler.getCommonDomains(args.lastSynced)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'getCommonDomains', seqid)
    end

    def process_getNotificationBadgeCount(seqid, iprot, oprot)
      args = read_args(iprot, GetNotificationBadgeCount_args)
      result = GetNotificationBadgeCount_result.new()
      begin
        result.success = @handler.getNotificationBadgeCount(args.localRev)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'getNotificationBadgeCount', seqid)
    end

    def process_issueChannelToken(seqid, iprot, oprot)
      args = read_args(iprot, IssueChannelToken_args)
      result = IssueChannelToken_result.new()
      begin
        result.success = @handler.issueChannelToken(args.channelId)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'issueChannelToken', seqid)
    end

    def process_issueRequestToken(seqid, iprot, oprot)
      args = read_args(iprot, IssueRequestToken_args)
      result = IssueRequestToken_result.new()
      begin
        result.success = @handler.issueRequestToken(args.channelId, args.otpId)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'issueRequestToken', seqid)
    end

    def process_issueRequestTokenWithAuthScheme(seqid, iprot, oprot)
      args = read_args(iprot, IssueRequestTokenWithAuthScheme_args)
      result = IssueRequestTokenWithAuthScheme_result.new()
      begin
        result.success = @handler.issueRequestTokenWithAuthScheme(args.channelId, args.otpId, args.authScheme, args.returnUrl)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'issueRequestTokenWithAuthScheme', seqid)
    end

    def process_issueRequestTokenForAutoLogin(seqid, iprot, oprot)
      args = read_args(iprot, IssueRequestTokenForAutoLogin_args)
      result = IssueRequestTokenForAutoLogin_result.new()
      begin
        result.success = @handler.issueRequestTokenForAutoLogin(args.channelId, args.otpId, args.redirectUrl)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'issueRequestTokenForAutoLogin', seqid)
    end

    def process_getUpdatedChannelIds(seqid, iprot, oprot)
      args = read_args(iprot, GetUpdatedChannelIds_args)
      result = GetUpdatedChannelIds_result.new()
      begin
        result.success = @handler.getUpdatedChannelIds(args.channelIds)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'getUpdatedChannelIds', seqid)
    end

    def process_reserveCoinUse(seqid, iprot, oprot)
      args = read_args(iprot, ReserveCoinUse_args)
      result = ReserveCoinUse_result.new()
      begin
        result.success = @handler.reserveCoinUse(args.request, args.locale)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'reserveCoinUse', seqid)
    end

    def process_revokeChannel(seqid, iprot, oprot)
      args = read_args(iprot, RevokeChannel_args)
      result = RevokeChannel_result.new()
      begin
        @handler.revokeChannel(args.channelId)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'revokeChannel', seqid)
    end

    def process_syncChannelData(seqid, iprot, oprot)
      args = read_args(iprot, SyncChannelData_args)
      result = SyncChannelData_result.new()
      begin
        result.success = @handler.syncChannelData(args.lastSynced, args.locale)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'syncChannelData', seqid)
    end

    def process_updateChannelNotificationSetting(seqid, iprot, oprot)
      args = read_args(iprot, UpdateChannelNotificationSetting_args)
      result = UpdateChannelNotificationSetting_result.new()
      begin
        @handler.updateChannelNotificationSetting(args.setting)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'updateChannelNotificationSetting', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class IssueOTP_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELID = 2

    FIELDS = {
      CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IssueOTP_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::OTPResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ApproveChannelAndIssueChannelToken_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELID = 1

    FIELDS = {
      CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ApproveChannelAndIssueChannelToken_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ChannelToken},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ApproveChannelAndIssueRequestToken_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELID = 1
    OTPID = 2

    FIELDS = {
      CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
      OTPID => {:type => ::Thrift::Types::STRING, :name => 'otpId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ApproveChannelAndIssueRequestToken_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchNotificationItems_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LOCALREV = 2

    FIELDS = {
      LOCALREV => {:type => ::Thrift::Types::I64, :name => 'localRev'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchNotificationItems_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::NotificationFetchResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetApprovedChannels_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LASTSYNCED = 2
    LOCALE = 3

    FIELDS = {
      LASTSYNCED => {:type => ::Thrift::Types::I64, :name => 'lastSynced'},
      LOCALE => {:type => ::Thrift::Types::STRING, :name => 'locale'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetApprovedChannels_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ApprovedChannelInfos},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChannelInfo_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELID = 2
    LOCALE = 3

    FIELDS = {
      CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
      LOCALE => {:type => ::Thrift::Types::STRING, :name => 'locale'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChannelInfo_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ChannelInfo},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChannelNotificationSetting_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELID = 1
    LOCALE = 2

    FIELDS = {
      CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
      LOCALE => {:type => ::Thrift::Types::STRING, :name => 'locale'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChannelNotificationSetting_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ChannelNotificationSetting},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChannelNotificationSettings_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LOCALE = 1

    FIELDS = {
      LOCALE => {:type => ::Thrift::Types::STRING, :name => 'locale'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChannelNotificationSettings_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ChannelNotificationSetting}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChannels_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LASTSYNCED = 2
    LOCALE = 3

    FIELDS = {
      LASTSYNCED => {:type => ::Thrift::Types::I64, :name => 'lastSynced'},
      LOCALE => {:type => ::Thrift::Types::STRING, :name => 'locale'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChannels_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ChannelInfos},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDomains_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LASTSYNCED = 2

    FIELDS = {
      LASTSYNCED => {:type => ::Thrift::Types::I64, :name => 'lastSynced'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDomains_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ChannelDomains},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFriendChannelMatrices_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELIDS = 1

    FIELDS = {
      CHANNELIDS => {:type => ::Thrift::Types::LIST, :name => 'channelIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFriendChannelMatrices_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::FriendChannelMatricesResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateChannelSettings_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELSETTINGS = 1

    FIELDS = {
      CHANNELSETTINGS => {:type => ::Thrift::Types::STRUCT, :name => 'channelSettings', :class => ::ChannelSettings}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateChannelSettings_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCommonDomains_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LASTSYNCED = 1

    FIELDS = {
      LASTSYNCED => {:type => ::Thrift::Types::I64, :name => 'lastSynced'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCommonDomains_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ChannelDomains},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNotificationBadgeCount_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LOCALREV = 2

    FIELDS = {
      LOCALREV => {:type => ::Thrift::Types::I64, :name => 'localRev'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNotificationBadgeCount_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IssueChannelToken_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELID = 1

    FIELDS = {
      CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IssueChannelToken_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ChannelToken},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IssueRequestToken_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELID = 1
    OTPID = 2

    FIELDS = {
      CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
      OTPID => {:type => ::Thrift::Types::STRING, :name => 'otpId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IssueRequestToken_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IssueRequestTokenWithAuthScheme_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELID = 1
    OTPID = 2
    AUTHSCHEME = 3
    RETURNURL = 4

    FIELDS = {
      CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
      OTPID => {:type => ::Thrift::Types::STRING, :name => 'otpId'},
      AUTHSCHEME => {:type => ::Thrift::Types::LIST, :name => 'authScheme', :element => {:type => ::Thrift::Types::STRING}},
      RETURNURL => {:type => ::Thrift::Types::STRING, :name => 'returnUrl'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IssueRequestTokenWithAuthScheme_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::RequestTokenResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IssueRequestTokenForAutoLogin_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELID = 2
    OTPID = 3
    REDIRECTURL = 4

    FIELDS = {
      CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
      OTPID => {:type => ::Thrift::Types::STRING, :name => 'otpId'},
      REDIRECTURL => {:type => ::Thrift::Types::STRING, :name => 'redirectUrl'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IssueRequestTokenForAutoLogin_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUpdatedChannelIds_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELIDS = 1

    FIELDS = {
      CHANNELIDS => {:type => ::Thrift::Types::LIST, :name => 'channelIds', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ChannelIdWithLastUpdated}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUpdatedChannelIds_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReserveCoinUse_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 2
    LOCALE = 3

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CoinUseReservation},
      LOCALE => {:type => ::Thrift::Types::STRING, :name => 'locale'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReserveCoinUse_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RevokeChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELID = 1

    FIELDS = {
      CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RevokeChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SyncChannelData_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LASTSYNCED = 2
    LOCALE = 3

    FIELDS = {
      LASTSYNCED => {:type => ::Thrift::Types::I64, :name => 'lastSynced'},
      LOCALE => {:type => ::Thrift::Types::STRING, :name => 'locale'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SyncChannelData_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ChannelSyncDatas},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateChannelNotificationSetting_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SETTING = 1

    FIELDS = {
      SETTING => {:type => ::Thrift::Types::LIST, :name => 'setting', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ChannelNotificationSetting}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateChannelNotificationSetting_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

