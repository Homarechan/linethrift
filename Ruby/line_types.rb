#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module ApplicationType
  IOS = 16
  IOS_RC = 17
  IOS_BETA = 18
  IOS_ALPHA = 19
  ANDROID = 32
  ANDROID_RC = 33
  ANDROID_BETA = 34
  ANDROID_ALPHA = 35
  WAP = 48
  WAP_RC = 49
  WAP_BETA = 50
  WAP_ALPHA = 51
  BOT = 64
  BOT_RC = 65
  BOT_BETA = 66
  BOT_ALPHA = 67
  WEB = 80
  WEB_RC = 81
  WEB_BETA = 82
  WEB_ALPHA = 83
  DESKTOPWIN = 96
  DESKTOPWIN_RC = 97
  DESKTOPWIN_BETA = 98
  DESKTOPWIN_ALPHA = 99
  DESKTOPMAC = 112
  DESKTOPMAC_RC = 113
  DESKTOPMAC_BETA = 114
  DESKTOPMAC_ALPHA = 115
  CHANNELGW = 128
  CHANNELGW_RC = 129
  CHANNELGW_BETA = 130
  CHANNELGW_ALPHA = 131
  CHANNELCP = 144
  CHANNELCP_RC = 145
  CHANNELCP_BETA = 146
  CHANNELCP_ALPHA = 147
  WINPHONE = 160
  WINPHONE_RC = 161
  WINPHONE_BETA = 162
  WINPHONE_ALPHA = 163
  BLACKBERRY = 176
  BLACKBERRY_RC = 177
  BLACKBERRY_BETA = 178
  BLACKBERRY_ALPHA = 179
  WINMETRO = 192
  WINMETRO_RC = 193
  WINMETRO_BETA = 194
  WINMETRO_ALPHA = 195
  S40 = 208
  S40_RC = 209
  S40_BETA = 210
  S40_ALPHA = 211
  CHRONO = 224
  CHRONO_RC = 225
  CHRONO_BETA = 226
  CHRONO_ALPHA = 227
  TIZEN = 256
  TIZEN_RC = 257
  TIZEN_BETA = 258
  TIZEN_ALPHA = 259
  VIRTUAL = 272
  FIREFOXOS = 288
  FIREFOXOS_RC = 289
  FIREFOXOS_BETA = 290
  FIREFOXOS_ALPHA = 291
  IOSIPAD = 304
  IOSIPAD_RC = 305
  IOSIPAD_BETA = 306
  IOSIPAD_ALPHA = 307
  BIZIOS = 320
  BIZIOS_RC = 321
  BIZIOS_BETA = 322
  BIZIOS_ALPHA = 323
  BIZANDROID = 336
  BIZANDROID_RC = 337
  BIZANDROID_BETA = 338
  BIZANDROID_ALPHA = 339
  BIZBOT = 352
  BIZBOT_RC = 353
  BIZBOT_BETA = 354
  BIZBOT_ALPHA = 355
  CHROMEOS = 368
  CHROMEOS_RC = 369
  CHROMEOS_BETA = 370
  CHROMEOS_ALPHA = 371
  ANDROIDLITE = 384
  ANDROIDLITE_RC = 385
  ANDROIDLITE_BETA = 386
  ANDROIDLITE_ALPHA = 387
  WIN10 = 400
  WIN10_RC = 401
  WIN10_BETA = 402
  WIN10_ALPHA = 403
  BIZWEB = 416
  BIZWEB_RC = 417
  BIZWEB_BETA = 418
  BIZWEB_ALPHA = 419
  DUMMYPRIMARY = 432
  DUMMYPRIMARY_RC = 433
  DUMMYPRIMARY_BETA = 434
  DUMMYPRIMARY_ALPHA = 435
  SQUARE = 448
  SQUARE_RC = 449
  SQUARE_BETA = 450
  SQUARE_ALPHA = 451
  INTERNAL = 464
  INTERNAL_RC = 465
  INTERNAL_BETA = 466
  INTERNAL_ALPHA = 467
  CLOVAFRIENDS = 480
  CLOVAFRIENDS_RC = 481
  CLOVAFRIENDS_BETA = 482
  CLOVAFRIENDS_ALPHA = 483
  VALUE_MAP = {16 => "IOS", 17 => "IOS_RC", 18 => "IOS_BETA", 19 => "IOS_ALPHA", 32 => "ANDROID", 33 => "ANDROID_RC", 34 => "ANDROID_BETA", 35 => "ANDROID_ALPHA", 48 => "WAP", 49 => "WAP_RC", 50 => "WAP_BETA", 51 => "WAP_ALPHA", 64 => "BOT", 65 => "BOT_RC", 66 => "BOT_BETA", 67 => "BOT_ALPHA", 80 => "WEB", 81 => "WEB_RC", 82 => "WEB_BETA", 83 => "WEB_ALPHA", 96 => "DESKTOPWIN", 97 => "DESKTOPWIN_RC", 98 => "DESKTOPWIN_BETA", 99 => "DESKTOPWIN_ALPHA", 112 => "DESKTOPMAC", 113 => "DESKTOPMAC_RC", 114 => "DESKTOPMAC_BETA", 115 => "DESKTOPMAC_ALPHA", 128 => "CHANNELGW", 129 => "CHANNELGW_RC", 130 => "CHANNELGW_BETA", 131 => "CHANNELGW_ALPHA", 144 => "CHANNELCP", 145 => "CHANNELCP_RC", 146 => "CHANNELCP_BETA", 147 => "CHANNELCP_ALPHA", 160 => "WINPHONE", 161 => "WINPHONE_RC", 162 => "WINPHONE_BETA", 163 => "WINPHONE_ALPHA", 176 => "BLACKBERRY", 177 => "BLACKBERRY_RC", 178 => "BLACKBERRY_BETA", 179 => "BLACKBERRY_ALPHA", 192 => "WINMETRO", 193 => "WINMETRO_RC", 194 => "WINMETRO_BETA", 195 => "WINMETRO_ALPHA", 208 => "S40", 209 => "S40_RC", 210 => "S40_BETA", 211 => "S40_ALPHA", 224 => "CHRONO", 225 => "CHRONO_RC", 226 => "CHRONO_BETA", 227 => "CHRONO_ALPHA", 256 => "TIZEN", 257 => "TIZEN_RC", 258 => "TIZEN_BETA", 259 => "TIZEN_ALPHA", 272 => "VIRTUAL", 288 => "FIREFOXOS", 289 => "FIREFOXOS_RC", 290 => "FIREFOXOS_BETA", 291 => "FIREFOXOS_ALPHA", 304 => "IOSIPAD", 305 => "IOSIPAD_RC", 306 => "IOSIPAD_BETA", 307 => "IOSIPAD_ALPHA", 320 => "BIZIOS", 321 => "BIZIOS_RC", 322 => "BIZIOS_BETA", 323 => "BIZIOS_ALPHA", 336 => "BIZANDROID", 337 => "BIZANDROID_RC", 338 => "BIZANDROID_BETA", 339 => "BIZANDROID_ALPHA", 352 => "BIZBOT", 353 => "BIZBOT_RC", 354 => "BIZBOT_BETA", 355 => "BIZBOT_ALPHA", 368 => "CHROMEOS", 369 => "CHROMEOS_RC", 370 => "CHROMEOS_BETA", 371 => "CHROMEOS_ALPHA", 384 => "ANDROIDLITE", 385 => "ANDROIDLITE_RC", 386 => "ANDROIDLITE_BETA", 387 => "ANDROIDLITE_ALPHA", 400 => "WIN10", 401 => "WIN10_RC", 402 => "WIN10_BETA", 403 => "WIN10_ALPHA", 416 => "BIZWEB", 417 => "BIZWEB_RC", 418 => "BIZWEB_BETA", 419 => "BIZWEB_ALPHA", 432 => "DUMMYPRIMARY", 433 => "DUMMYPRIMARY_RC", 434 => "DUMMYPRIMARY_BETA", 435 => "DUMMYPRIMARY_ALPHA", 448 => "SQUARE", 449 => "SQUARE_RC", 450 => "SQUARE_BETA", 451 => "SQUARE_ALPHA", 464 => "INTERNAL", 465 => "INTERNAL_RC", 466 => "INTERNAL_BETA", 467 => "INTERNAL_ALPHA", 480 => "CLOVAFRIENDS", 481 => "CLOVAFRIENDS_RC", 482 => "CLOVAFRIENDS_BETA", 483 => "CLOVAFRIENDS_ALPHA"}
  VALID_VALUES = Set.new([IOS, IOS_RC, IOS_BETA, IOS_ALPHA, ANDROID, ANDROID_RC, ANDROID_BETA, ANDROID_ALPHA, WAP, WAP_RC, WAP_BETA, WAP_ALPHA, BOT, BOT_RC, BOT_BETA, BOT_ALPHA, WEB, WEB_RC, WEB_BETA, WEB_ALPHA, DESKTOPWIN, DESKTOPWIN_RC, DESKTOPWIN_BETA, DESKTOPWIN_ALPHA, DESKTOPMAC, DESKTOPMAC_RC, DESKTOPMAC_BETA, DESKTOPMAC_ALPHA, CHANNELGW, CHANNELGW_RC, CHANNELGW_BETA, CHANNELGW_ALPHA, CHANNELCP, CHANNELCP_RC, CHANNELCP_BETA, CHANNELCP_ALPHA, WINPHONE, WINPHONE_RC, WINPHONE_BETA, WINPHONE_ALPHA, BLACKBERRY, BLACKBERRY_RC, BLACKBERRY_BETA, BLACKBERRY_ALPHA, WINMETRO, WINMETRO_RC, WINMETRO_BETA, WINMETRO_ALPHA, S40, S40_RC, S40_BETA, S40_ALPHA, CHRONO, CHRONO_RC, CHRONO_BETA, CHRONO_ALPHA, TIZEN, TIZEN_RC, TIZEN_BETA, TIZEN_ALPHA, VIRTUAL, FIREFOXOS, FIREFOXOS_RC, FIREFOXOS_BETA, FIREFOXOS_ALPHA, IOSIPAD, IOSIPAD_RC, IOSIPAD_BETA, IOSIPAD_ALPHA, BIZIOS, BIZIOS_RC, BIZIOS_BETA, BIZIOS_ALPHA, BIZANDROID, BIZANDROID_RC, BIZANDROID_BETA, BIZANDROID_ALPHA, BIZBOT, BIZBOT_RC, BIZBOT_BETA, BIZBOT_ALPHA, CHROMEOS, CHROMEOS_RC, CHROMEOS_BETA, CHROMEOS_ALPHA, ANDROIDLITE, ANDROIDLITE_RC, ANDROIDLITE_BETA, ANDROIDLITE_ALPHA, WIN10, WIN10_RC, WIN10_BETA, WIN10_ALPHA, BIZWEB, BIZWEB_RC, BIZWEB_BETA, BIZWEB_ALPHA, DUMMYPRIMARY, DUMMYPRIMARY_RC, DUMMYPRIMARY_BETA, DUMMYPRIMARY_ALPHA, SQUARE, SQUARE_RC, SQUARE_BETA, SQUARE_ALPHA, INTERNAL, INTERNAL_RC, INTERNAL_BETA, INTERNAL_ALPHA, CLOVAFRIENDS, CLOVAFRIENDS_RC, CLOVAFRIENDS_BETA, CLOVAFRIENDS_ALPHA]).freeze
end

module ExtendedProfileAttribute
  VALUE_MAP = {}
  VALID_VALUES = Set.new([]).freeze
end

module PrivacyLevelType
  PUBLIC = 0
  PRIVATE = 1
  VALUE_MAP = {0 => "PUBLIC", 1 => "PRIVATE"}
  VALID_VALUES = Set.new([PUBLIC, PRIVATE]).freeze
end

module PaidCallerIdStatus
  NOT_SPECIFIED = 0
  VALID = 1
  VERIFICATION_REQUIRED = 2
  NOT_PERMITTED = 3
  LIMIT_EXCEEDED = 4
  LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 5
  VALUE_MAP = {0 => "NOT_SPECIFIED", 1 => "VALID", 2 => "VERIFICATION_REQUIRED", 3 => "NOT_PERMITTED", 4 => "LIMIT_EXCEEDED", 5 => "LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED"}
  VALID_VALUES = Set.new([NOT_SPECIFIED, VALID, VERIFICATION_REQUIRED, NOT_PERMITTED, LIMIT_EXCEEDED, LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED]).freeze
end

module PaidCallProductType
  COIN = 0
  CREDIT = 1
  MONTHLY = 2
  VALUE_MAP = {0 => "COIN", 1 => "CREDIT", 2 => "MONTHLY"}
  VALID_VALUES = Set.new([COIN, CREDIT, MONTHLY]).freeze
end

module PaidCallType
  OUT = 0
  IN = 1
  TOLLFREE = 2
  RECORD = 3
  AD = 4
  CS = 5
  VALUE_MAP = {0 => "OUT", 1 => "IN", 2 => "TOLLFREE", 3 => "RECORD", 4 => "AD", 5 => "CS"}
  VALID_VALUES = Set.new([OUT, IN, TOLLFREE, RECORD, AD, CS]).freeze
end

module BotType
  RESERVED = 0
  OFFICIAL = 1
  LINE_AT_0 = 2
  LINE_AT = 3
  VALUE_MAP = {0 => "RESERVED", 1 => "OFFICIAL", 2 => "LINE_AT_0", 3 => "LINE_AT"}
  VALID_VALUES = Set.new([RESERVED, OFFICIAL, LINE_AT_0, LINE_AT]).freeze
end

module BuddyOnAirLabel
  ON_AIR = 0
  LIVE = 1
  VALUE_MAP = {0 => "ON_AIR", 1 => "LIVE"}
  VALID_VALUES = Set.new([ON_AIR, LIVE]).freeze
end

module BuddyBannerLinkType
  BUDDY_BANNER_LINK_HIDDEN = 0
  BUDDY_BANNER_LINK_MID = 1
  BUDDY_BANNER_LINK_URL = 2
  VALUE_MAP = {0 => "BUDDY_BANNER_LINK_HIDDEN", 1 => "BUDDY_BANNER_LINK_MID", 2 => "BUDDY_BANNER_LINK_URL"}
  VALID_VALUES = Set.new([BUDDY_BANNER_LINK_HIDDEN, BUDDY_BANNER_LINK_MID, BUDDY_BANNER_LINK_URL]).freeze
end

module BuddyOnAirType
  NORMAL = 0
  LIVE = 1
  VOIP = 2
  VALUE_MAP = {0 => "NORMAL", 1 => "LIVE", 2 => "VOIP"}
  VALID_VALUES = Set.new([NORMAL, LIVE, VOIP]).freeze
end

module Diff
  ADDED = 0
  UPDATED = 1
  REMOVED = 2
  VALUE_MAP = {0 => "ADDED", 1 => "UPDATED", 2 => "REMOVED"}
  VALID_VALUES = Set.new([ADDED, UPDATED, REMOVED]).freeze
end

module ReportType
  ADVERTISING = 1
  GENDER_HARASSMENT = 2
  HARASSMENT = 3
  OTHER = 4
  VALUE_MAP = {1 => "ADVERTISING", 2 => "GENDER_HARASSMENT", 3 => "HARASSMENT", 4 => "OTHER"}
  VALID_VALUES = Set.new([ADVERTISING, GENDER_HARASSMENT, HARASSMENT, OTHER]).freeze
end

module SyncTriggerReason
  OTHER = 0
  REVISION_GAP_TOO_LARGE = 1
  OPERATION_EXPIRED = 2
  VALUE_MAP = {0 => "OTHER", 1 => "REVISION_GAP_TOO_LARGE", 2 => "OPERATION_EXPIRED"}
  VALID_VALUES = Set.new([OTHER, REVISION_GAP_TOO_LARGE, OPERATION_EXPIRED]).freeze
end

module ReportCategory
  PUSH_NORMAL_PLAIN = 0
  PUSH_NORMAL_E2EE = 1
  PUSH_VOIP_PLAIN = 2
  PUSH_VOIP_E2EE = 3
  VALUE_MAP = {0 => "PUSH_NORMAL_PLAIN", 1 => "PUSH_NORMAL_E2EE", 2 => "PUSH_VOIP_PLAIN", 3 => "PUSH_VOIP_E2EE"}
  VALID_VALUES = Set.new([PUSH_NORMAL_PLAIN, PUSH_NORMAL_E2EE, PUSH_VOIP_PLAIN, PUSH_VOIP_E2EE]).freeze
end

module BuddyResultState
  ACCEPTED = 1
  SUCCEEDED = 2
  FAILED = 3
  CANCELLED = 4
  NOTIFY_FAILED = 5
  STORING = 11
  UPLOADING = 21
  NOTIFYING = 31
  REMOVING_SUBSCRIPTION = 41
  UNREGISTERING_ACCOUNT = 42
  NOTIFYING_LEAVE_CHAT = 43
  VALUE_MAP = {1 => "ACCEPTED", 2 => "SUCCEEDED", 3 => "FAILED", 4 => "CANCELLED", 5 => "NOTIFY_FAILED", 11 => "STORING", 21 => "UPLOADING", 31 => "NOTIFYING", 41 => "REMOVING_SUBSCRIPTION", 42 => "UNREGISTERING_ACCOUNT", 43 => "NOTIFYING_LEAVE_CHAT"}
  VALID_VALUES = Set.new([ACCEPTED, SUCCEEDED, FAILED, CANCELLED, NOTIFY_FAILED, STORING, UPLOADING, NOTIFYING, REMOVING_SUBSCRIPTION, UNREGISTERING_ACCOUNT, NOTIFYING_LEAVE_CHAT]).freeze
end

module BuddySearchRequestSource
  NA = 0
  FRIEND_VIEW = 1
  OFFICIAL_ACCOUNT_VIEW = 2
  VALUE_MAP = {0 => "NA", 1 => "FRIEND_VIEW", 2 => "OFFICIAL_ACCOUNT_VIEW"}
  VALID_VALUES = Set.new([NA, FRIEND_VIEW, OFFICIAL_ACCOUNT_VIEW]).freeze
end

module CarrierCode
  NOT_SPECIFIED = 0
  JP_DOCOMO = 1
  JP_AU = 2
  JP_SOFTBANK = 3
  JP_DOCOMO_LINE = 4
  KR_SKT = 17
  KR_KT = 18
  KR_LGT = 19
  VALUE_MAP = {0 => "NOT_SPECIFIED", 1 => "JP_DOCOMO", 2 => "JP_AU", 3 => "JP_SOFTBANK", 4 => "JP_DOCOMO_LINE", 17 => "KR_SKT", 18 => "KR_KT", 19 => "KR_LGT"}
  VALID_VALUES = Set.new([NOT_SPECIFIED, JP_DOCOMO, JP_AU, JP_SOFTBANK, JP_DOCOMO_LINE, KR_SKT, KR_KT, KR_LGT]).freeze
end

module ChannelConfiguration
  MESSAGE = 0
  MESSAGE_NOTIFICATION = 1
  NOTIFICATION_CENTER = 2
  VALUE_MAP = {0 => "MESSAGE", 1 => "MESSAGE_NOTIFICATION", 2 => "NOTIFICATION_CENTER"}
  VALID_VALUES = Set.new([MESSAGE, MESSAGE_NOTIFICATION, NOTIFICATION_CENTER]).freeze
end

module ChannelPermission
  PROFILE = 0
  FRIENDS = 1
  GROUP = 2
  VALUE_MAP = {0 => "PROFILE", 1 => "FRIENDS", 2 => "GROUP"}
  VALID_VALUES = Set.new([PROFILE, FRIENDS, GROUP]).freeze
end

module ChannelFeatureLicense
  BLE_LCS_API_USABLE = 26
  PROHIBIT_MINIMIZE_CHANNEL_BROWSER = 27
  ALLOW_IOS_WEBKIT = 28
  VALUE_MAP = {26 => "BLE_LCS_API_USABLE", 27 => "PROHIBIT_MINIMIZE_CHANNEL_BROWSER", 28 => "ALLOW_IOS_WEBKIT"}
  VALID_VALUES = Set.new([BLE_LCS_API_USABLE, PROHIBIT_MINIMIZE_CHANNEL_BROWSER, ALLOW_IOS_WEBKIT]).freeze
end

module ChannelErrorCode
  ILLEGAL_ARGUMENT = 0
  INTERNAL_ERROR = 1
  CONNECTION_ERROR = 2
  AUTHENTICATIONI_FAILED = 3
  NEED_PERMISSION_APPROVAL = 4
  COIN_NOT_USABLE = 5
  WEBVIEW_NOT_ALLOWED = 6
  VALUE_MAP = {0 => "ILLEGAL_ARGUMENT", 1 => "INTERNAL_ERROR", 2 => "CONNECTION_ERROR", 3 => "AUTHENTICATIONI_FAILED", 4 => "NEED_PERMISSION_APPROVAL", 5 => "COIN_NOT_USABLE", 6 => "WEBVIEW_NOT_ALLOWED"}
  VALID_VALUES = Set.new([ILLEGAL_ARGUMENT, INTERNAL_ERROR, CONNECTION_ERROR, AUTHENTICATIONI_FAILED, NEED_PERMISSION_APPROVAL, COIN_NOT_USABLE, WEBVIEW_NOT_ALLOWED]).freeze
end

module ChannelSyncType
  SYNC = 0
  REMOVE = 1
  REMOVE_ALL = 2
  VALUE_MAP = {0 => "SYNC", 1 => "REMOVE", 2 => "REMOVE_ALL"}
  VALID_VALUES = Set.new([SYNC, REMOVE, REMOVE_ALL]).freeze
end

module LoginType
  ID_CREDENTIAL = 0
  QRCODE = 1
  ID_CREDENTIAL_WITH_E2EE = 2
  VALUE_MAP = {0 => "ID_CREDENTIAL", 1 => "QRCODE", 2 => "ID_CREDENTIAL_WITH_E2EE"}
  VALID_VALUES = Set.new([ID_CREDENTIAL, QRCODE, ID_CREDENTIAL_WITH_E2EE]).freeze
end

module ContactAttribute
  CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL = 1
  CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL = 2
  CONTACT_ATTRIBUTE_CAPABLE_MY_HOME = 16
  CONTACT_ATTRIBUTE_CAPABLE_BUDDY = 32
  VALUE_MAP = {1 => "CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL", 2 => "CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL", 16 => "CONTACT_ATTRIBUTE_CAPABLE_MY_HOME", 32 => "CONTACT_ATTRIBUTE_CAPABLE_BUDDY"}
  VALID_VALUES = Set.new([CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL, CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL, CONTACT_ATTRIBUTE_CAPABLE_MY_HOME, CONTACT_ATTRIBUTE_CAPABLE_BUDDY]).freeze
end

module ContactCategory
  NORMAL = 0
  RECOMMEND = 1
  VALUE_MAP = {0 => "NORMAL", 1 => "RECOMMEND"}
  VALID_VALUES = Set.new([NORMAL, RECOMMEND]).freeze
end

module ContactRelation
  ONEWAY = 0
  BOTH = 1
  NOT_REGISTERED = 2
  VALUE_MAP = {0 => "ONEWAY", 1 => "BOTH", 2 => "NOT_REGISTERED"}
  VALID_VALUES = Set.new([ONEWAY, BOTH, NOT_REGISTERED]).freeze
end

module AsymmetricKeyAlgorithm
  ASYMMETRIC_KEY_ALGORITHM_RSA = 1
  ASYMMETRIC_KEY_ALGORITHM_ECDH = 2
  VALUE_MAP = {1 => "ASYMMETRIC_KEY_ALGORITHM_RSA", 2 => "ASYMMETRIC_KEY_ALGORITHM_ECDH"}
  VALID_VALUES = Set.new([ASYMMETRIC_KEY_ALGORITHM_RSA, ASYMMETRIC_KEY_ALGORITHM_ECDH]).freeze
end

module ContactSetting
  CONTACT_SETTING_NOTIFICATION_DISABLE = 1
  CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2
  CONTACT_SETTING_CONTACT_HIDE = 4
  CONTACT_SETTING_FAVORITE = 8
  CONTACT_SETTING_DELETE = 16
  VALUE_MAP = {1 => "CONTACT_SETTING_NOTIFICATION_DISABLE", 2 => "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE", 4 => "CONTACT_SETTING_CONTACT_HIDE", 8 => "CONTACT_SETTING_FAVORITE", 16 => "CONTACT_SETTING_DELETE"}
  VALID_VALUES = Set.new([CONTACT_SETTING_NOTIFICATION_DISABLE, CONTACT_SETTING_DISPLAY_NAME_OVERRIDE, CONTACT_SETTING_CONTACT_HIDE, CONTACT_SETTING_FAVORITE, CONTACT_SETTING_DELETE]).freeze
end

module ContactStatus
  UNSPECIFIED = 0
  FRIEND = 1
  FRIEND_BLOCKED = 2
  RECOMMEND = 3
  RECOMMEND_BLOCKED = 4
  DELETED = 5
  DELETED_BLOCKED = 6
  VALUE_MAP = {0 => "UNSPECIFIED", 1 => "FRIEND", 2 => "FRIEND_BLOCKED", 3 => "RECOMMEND", 4 => "RECOMMEND_BLOCKED", 5 => "DELETED", 6 => "DELETED_BLOCKED"}
  VALID_VALUES = Set.new([UNSPECIFIED, FRIEND, FRIEND_BLOCKED, RECOMMEND, RECOMMEND_BLOCKED, DELETED, DELETED_BLOCKED]).freeze
end

module ContactType
  MID = 0
  PHONE = 1
  EMAIL = 2
  USERID = 3
  PROXIMITY = 4
  GROUP = 5
  USER = 6
  QRCODE = 7
  PROMOTION_BOT = 8
  CONTACT_MESSAGE = 9
  FRIEND_REQUEST = 10
  REPAIR = 128
  FACEBOOK = 2305
  SINA = 2306
  RENREN = 2307
  FEIXIN = 2308
  BBM = 2309
  BEACON = 11
  VALUE_MAP = {0 => "MID", 1 => "PHONE", 2 => "EMAIL", 3 => "USERID", 4 => "PROXIMITY", 5 => "GROUP", 6 => "USER", 7 => "QRCODE", 8 => "PROMOTION_BOT", 9 => "CONTACT_MESSAGE", 10 => "FRIEND_REQUEST", 128 => "REPAIR", 2305 => "FACEBOOK", 2306 => "SINA", 2307 => "RENREN", 2308 => "FEIXIN", 2309 => "BBM", 11 => "BEACON"}
  VALID_VALUES = Set.new([MID, PHONE, EMAIL, USERID, PROXIMITY, GROUP, USER, QRCODE, PROMOTION_BOT, CONTACT_MESSAGE, FRIEND_REQUEST, REPAIR, FACEBOOK, SINA, RENREN, FEIXIN, BBM, BEACON]).freeze
end

module GroupPreferenceAttribute
  INVITATION_TICKET = 1
  FAVORITE_TIMESTAMP = 2
  VALUE_MAP = {1 => "INVITATION_TICKET", 2 => "FAVORITE_TIMESTAMP"}
  VALID_VALUES = Set.new([INVITATION_TICKET, FAVORITE_TIMESTAMP]).freeze
end

module ContentType
  NONE = 0
  IMAGE = 1
  VIDEO = 2
  AUDIO = 3
  HTML = 4
  PDF = 5
  CALL = 6
  STICKER = 7
  PRESENCE = 8
  GIFT = 9
  GROUPBOARD = 10
  APPLINK = 11
  LINK = 12
  CONTACT = 13
  FILE = 14
  LOCATION = 15
  POSTNOTIFICATION = 16
  RICH = 17
  CHATEVENT = 18
  MUSIC = 19
  PAYMENT = 20
  EXTIMAGE = 21
  VALUE_MAP = {0 => "NONE", 1 => "IMAGE", 2 => "VIDEO", 3 => "AUDIO", 4 => "HTML", 5 => "PDF", 6 => "CALL", 7 => "STICKER", 8 => "PRESENCE", 9 => "GIFT", 10 => "GROUPBOARD", 11 => "APPLINK", 12 => "LINK", 13 => "CONTACT", 14 => "FILE", 15 => "LOCATION", 16 => "POSTNOTIFICATION", 17 => "RICH", 18 => "CHATEVENT", 19 => "MUSIC", 20 => "PAYMENT", 21 => "EXTIMAGE"}
  VALID_VALUES = Set.new([NONE, IMAGE, VIDEO, AUDIO, HTML, PDF, CALL, STICKER, PRESENCE, GIFT, GROUPBOARD, APPLINK, LINK, CONTACT, FILE, LOCATION, POSTNOTIFICATION, RICH, CHATEVENT, MUSIC, PAYMENT, EXTIMAGE]).freeze
end

module MessageRelationType
  FORWARD = 0
  AUTO_REPLY = 1
  SUBORDINATE = 2
  VALUE_MAP = {0 => "FORWARD", 1 => "AUTO_REPLY", 2 => "SUBORDINATE"}
  VALID_VALUES = Set.new([FORWARD, AUTO_REPLY, SUBORDINATE]).freeze
end

module CustomMode
  PROMOTION_FRIENDS_INVITE = 1
  CAPABILITY_SERVER_SIDE_SMS = 2
  LINE_CLIENT_ANALYTICS_CONFIGURATION = 3
  VALUE_MAP = {1 => "PROMOTION_FRIENDS_INVITE", 2 => "CAPABILITY_SERVER_SIDE_SMS", 3 => "LINE_CLIENT_ANALYTICS_CONFIGURATION"}
  VALID_VALUES = Set.new([PROMOTION_FRIENDS_INVITE, CAPABILITY_SERVER_SIDE_SMS, LINE_CLIENT_ANALYTICS_CONFIGURATION]).freeze
end

module RoomAttribute
  ALL = 255
  NOTIFICATION_SETTING = 1
  VALUE_MAP = {255 => "ALL", 1 => "NOTIFICATION_SETTING"}
  VALID_VALUES = Set.new([ALL, NOTIFICATION_SETTING]).freeze
end

module UserStatus
  NORMAL = 0
  UNBOUND = 1
  UNREGISTERED = 2
  VALUE_MAP = {0 => "NORMAL", 1 => "UNBOUND", 2 => "UNREGISTERED"}
  VALID_VALUES = Set.new([NORMAL, UNBOUND, UNREGISTERED]).freeze
end

module EmailConfirmationStatus
  NOT_SPECIFIED = 0
  NOT_YET = 1
  DONE = 3
  NEED_ENFORCED_INPUT = 4
  VALUE_MAP = {0 => "NOT_SPECIFIED", 1 => "NOT_YET", 3 => "DONE", 4 => "NEED_ENFORCED_INPUT"}
  VALID_VALUES = Set.new([NOT_SPECIFIED, NOT_YET, DONE, NEED_ENFORCED_INPUT]).freeze
end

module AccountMigrationPincodeType
  NOT_APPLICABLE = 0
  NOT_SET = 1
  SET = 2
  NEED_ENFORCED_INPUT = 3
  VALUE_MAP = {0 => "NOT_APPLICABLE", 1 => "NOT_SET", 2 => "SET", 3 => "NEED_ENFORCED_INPUT"}
  VALID_VALUES = Set.new([NOT_APPLICABLE, NOT_SET, SET, NEED_ENFORCED_INPUT]).freeze
end

module AccountMigrationCheckType
  SKIP = 0
  PINCODE = 1
  SECURITY_CENTER = 2
  VALUE_MAP = {0 => "SKIP", 1 => "PINCODE", 2 => "SECURITY_CENTER"}
  VALID_VALUES = Set.new([SKIP, PINCODE, SECURITY_CENTER]).freeze
end

module SecurityCenterSettingsType
  NOT_APPLICABLE = 0
  NOT_SET = 1
  SET = 2
  NEED_ENFORCED_INPUT = 3
  VALUE_MAP = {0 => "NOT_APPLICABLE", 1 => "NOT_SET", 2 => "SET", 3 => "NEED_ENFORCED_INPUT"}
  VALID_VALUES = Set.new([NOT_APPLICABLE, NOT_SET, SET, NEED_ENFORCED_INPUT]).freeze
end

module EmailConfirmationType
  SERVER_SIDE_EMAIL = 0
  CLIENT_SIDE_EMAIL = 1
  VALUE_MAP = {0 => "SERVER_SIDE_EMAIL", 1 => "CLIENT_SIDE_EMAIL"}
  VALID_VALUES = Set.new([SERVER_SIDE_EMAIL, CLIENT_SIDE_EMAIL]).freeze
end

module SquareChatAnnouncementType
  TEXT_MESSAGE = 0
  VALUE_MAP = {0 => "TEXT_MESSAGE"}
  VALID_VALUES = Set.new([TEXT_MESSAGE]).freeze
end

module SquareChatAttribute
  NAME = 2
  SQUARE_CHAT_IMAGE = 3
  STATE = 4
  VALUE_MAP = {2 => "NAME", 3 => "SQUARE_CHAT_IMAGE", 4 => "STATE"}
  VALID_VALUES = Set.new([NAME, SQUARE_CHAT_IMAGE, STATE]).freeze
end

module SquareMemberAttribute
  DISPLAY_NAME = 1
  PROFILE_IMAGE = 2
  ABLE_TO_RECEIVE_MESSAGE = 3
  MEMBERSHIP_STATE = 5
  ROLE = 6
  PREFERENCE = 7
  VALUE_MAP = {1 => "DISPLAY_NAME", 2 => "PROFILE_IMAGE", 3 => "ABLE_TO_RECEIVE_MESSAGE", 5 => "MEMBERSHIP_STATE", 6 => "ROLE", 7 => "PREFERENCE"}
  VALID_VALUES = Set.new([DISPLAY_NAME, PROFILE_IMAGE, ABLE_TO_RECEIVE_MESSAGE, MEMBERSHIP_STATE, ROLE, PREFERENCE]).freeze
end

module SquareMemberRelationAttribute
  BLOCKED = 1
  VALUE_MAP = {1 => "BLOCKED"}
  VALID_VALUES = Set.new([BLOCKED]).freeze
end

module SquarePreferenceAttribute
  FAVORITE = 1
  NOTI_FOR_NEW_JOIN_REQUEST = 2
  VALUE_MAP = {1 => "FAVORITE", 2 => "NOTI_FOR_NEW_JOIN_REQUEST"}
  VALID_VALUES = Set.new([FAVORITE, NOTI_FOR_NEW_JOIN_REQUEST]).freeze
end

module SquareState
  ALIVE = 0
  DELETED = 1
  SUSPENDED = 2
  VALUE_MAP = {0 => "ALIVE", 1 => "DELETED", 2 => "SUSPENDED"}
  VALID_VALUES = Set.new([ALIVE, DELETED, SUSPENDED]).freeze
end

module CommitMessageResultCode
  DELIVERED = 0
  DELIVERY_SKIPPED = 1
  DELIVERY_RESTRICTED = 2
  VALUE_MAP = {0 => "DELIVERED", 1 => "DELIVERY_SKIPPED", 2 => "DELIVERY_RESTRICTED"}
  VALID_VALUES = Set.new([DELIVERED, DELIVERY_SKIPPED, DELIVERY_RESTRICTED]).freeze
end

module ErrorCode
  ILLEGAL_ARGUMENT = 0
  AUTHENTICATION_FAILED = 1
  DB_FAILED = 2
  INVALID_STATE = 3
  EXCESSIVE_ACCESS = 4
  NOT_FOUND = 5
  INVALID_MID = 9
  NOT_A_MEMBER = 10
  INVALID_LENGTH = 6
  NOT_AVAILABLE_USER = 7
  NOT_AUTHORIZED_DEVICE = 8
  NOT_AUTHORIZED_SESSION = 14
  INCOMPATIBLE_APP_VERSION = 11
  NOT_READY = 12
  NOT_AVAILABLE_SESSION = 13
  SYSTEM_ERROR = 15
  NO_AVAILABLE_VERIFICATION_METHOD = 16
  NOT_AUTHENTICATED = 17
  INVALID_IDENTITY_CREDENTIAL = 18
  NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19
  INTERNAL_ERROR = 20
  NO_SUCH_IDENTITY_IDENFIER = 21
  DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22
  ILLEGAL_IDENTITY_CREDENTIAL = 23
  UNKNOWN_CHANNEL = 24
  NO_SUCH_MESSAGE_BOX = 25
  NOT_AVAILABLE_MESSAGE_BOX = 26
  CHANNEL_DOES_NOT_MATCH = 27
  NOT_YOUR_MESSAGE = 28
  MESSAGE_DEFINED_ERROR = 29
  USER_CANNOT_ACCEPT_PRESENTS = 30
  USER_NOT_STICKER_OWNER = 32
  MAINTENANCE_ERROR = 33
  ACCOUNT_NOT_MATCHED = 34
  ABUSE_BLOCK = 35
  NOT_FRIEND = 36
  NOT_ALLOWED_CALL = 37
  BLOCK_FRIEND = 38
  INCOMPATIBLE_VOIP_VERSION = 39
  INVALID_SNS_ACCESS_TOKEN = 40
  EXTERNAL_SERVICE_NOT_AVAILABLE = 41
  NOT_ALLOWED_ADD_CONTACT = 42
  NOT_CERTIFICATED = 43
  NOT_ALLOWED_SECONDARY_DEVICE = 44
  INVALID_PIN_CODE = 45
  NOT_FOUND_IDENTITY_CREDENTIAL = 46
  EXCEED_FILE_MAX_SIZE = 47
  EXCEED_DAILY_QUOTA = 48
  NOT_SUPPORT_SEND_FILE = 49
  MUST_UPGRADE = 50
  NOT_AVAILABLE_PIN_CODE_SESSION = 51
  EXPIRED_REVISION = 52
  NOT_YET_PHONE_NUMBER = 54
  BAD_CALL_NUMBER = 55
  UNAVAILABLE_CALL_NUMBER = 56
  NOT_SUPPORT_CALL_SERVICE = 57
  CONGESTION_CONTROL = 58
  NO_BALANCE = 59
  NOT_PERMITTED_CALLER_ID = 60
  NO_CALLER_ID_LIMIT_EXCEEDED = 61
  CALLER_ID_VERIFICATION_REQUIRED = 62
  NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 63
  MESSAGE_NOT_FOUND = 64
  INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT = 65
  ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED = 66
  ACCOUNT_MIGRATION_PINCODE_BLOCKED = 67
  INVALID_PASSWORD_FORMAT = 69
  FEATURE_RESTRICTED = 70
  MESSAGE_NOT_DESTRUCTIBLE = 71
  PAID_CALL_REDEEM_FAILED = 72
  PREVENTED_JOIN_BY_TICKET = 73
  SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT = 75
  SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY = 76
  SECURITY_CENTER_NOT_VERIFIED = 77
  SECURITY_CENTER_BLOCKED_BY_SETTING = 78
  SECURITY_CENTER_BLOCKED = 79
  TALK_PROXY_EXCEPTION = 80
  E2EE_INVALID_PROTOCOL = 81
  E2EE_RETRY_ENCRYPT = 82
  E2EE_UPDATE_SENDER_KEY = 83
  E2EE_UPDATE_RECEIVER_KEY = 84
  E2EE_INVALID_ARGUMENT = 85
  E2EE_INVALID_VERSION = 86
  E2EE_SENDER_DISABLED = 87
  E2EE_RECEIVER_DISABLED = 88
  E2EE_SENDER_NOT_ALLOWED = 89
  E2EE_RECEIVER_NOT_ALLOWED = 90
  E2EE_RESEND_FAIL = 91
  E2EE_RESEND_OK = 92
  HITOKOTO_BACKUP_NO_AVAILABLE_DATA = 93
  E2EE_UPDATE_PRIMARY_DEVICE = 94
  SUCCESS = 95
  CANCEL = 96
  E2EE_PRIMARY_NOT_SUPPORT = 97
  E2EE_RETRY_PLAIN = 98
  E2EE_RECREATE_GROUP_KEY = 99
  E2EE_GROUP_TOO_MANY_MEMBERS = 100
  SERVER_BUSY = 101
  NOT_ALLOWED_ADD_FOLLOW = 102
  INCOMING_FRIEND_REQUEST_LIMIT = 103
  OUTGOING_FRIEND_REQUEST_LIMIT = 104
  OUTGOING_FRIEND_REQUEST_QUOTA = 105
  DUPLICATED = 106
  BANNED = 107
  VALUE_MAP = {0 => "ILLEGAL_ARGUMENT", 1 => "AUTHENTICATION_FAILED", 2 => "DB_FAILED", 3 => "INVALID_STATE", 4 => "EXCESSIVE_ACCESS", 5 => "NOT_FOUND", 9 => "INVALID_MID", 10 => "NOT_A_MEMBER", 6 => "INVALID_LENGTH", 7 => "NOT_AVAILABLE_USER", 8 => "NOT_AUTHORIZED_DEVICE", 14 => "NOT_AUTHORIZED_SESSION", 11 => "INCOMPATIBLE_APP_VERSION", 12 => "NOT_READY", 13 => "NOT_AVAILABLE_SESSION", 15 => "SYSTEM_ERROR", 16 => "NO_AVAILABLE_VERIFICATION_METHOD", 17 => "NOT_AUTHENTICATED", 18 => "INVALID_IDENTITY_CREDENTIAL", 19 => "NOT_AVAILABLE_IDENTITY_IDENTIFIER", 20 => "INTERNAL_ERROR", 21 => "NO_SUCH_IDENTITY_IDENFIER", 22 => "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY", 23 => "ILLEGAL_IDENTITY_CREDENTIAL", 24 => "UNKNOWN_CHANNEL", 25 => "NO_SUCH_MESSAGE_BOX", 26 => "NOT_AVAILABLE_MESSAGE_BOX", 27 => "CHANNEL_DOES_NOT_MATCH", 28 => "NOT_YOUR_MESSAGE", 29 => "MESSAGE_DEFINED_ERROR", 30 => "USER_CANNOT_ACCEPT_PRESENTS", 32 => "USER_NOT_STICKER_OWNER", 33 => "MAINTENANCE_ERROR", 34 => "ACCOUNT_NOT_MATCHED", 35 => "ABUSE_BLOCK", 36 => "NOT_FRIEND", 37 => "NOT_ALLOWED_CALL", 38 => "BLOCK_FRIEND", 39 => "INCOMPATIBLE_VOIP_VERSION", 40 => "INVALID_SNS_ACCESS_TOKEN", 41 => "EXTERNAL_SERVICE_NOT_AVAILABLE", 42 => "NOT_ALLOWED_ADD_CONTACT", 43 => "NOT_CERTIFICATED", 44 => "NOT_ALLOWED_SECONDARY_DEVICE", 45 => "INVALID_PIN_CODE", 46 => "NOT_FOUND_IDENTITY_CREDENTIAL", 47 => "EXCEED_FILE_MAX_SIZE", 48 => "EXCEED_DAILY_QUOTA", 49 => "NOT_SUPPORT_SEND_FILE", 50 => "MUST_UPGRADE", 51 => "NOT_AVAILABLE_PIN_CODE_SESSION", 52 => "EXPIRED_REVISION", 54 => "NOT_YET_PHONE_NUMBER", 55 => "BAD_CALL_NUMBER", 56 => "UNAVAILABLE_CALL_NUMBER", 57 => "NOT_SUPPORT_CALL_SERVICE", 58 => "CONGESTION_CONTROL", 59 => "NO_BALANCE", 60 => "NOT_PERMITTED_CALLER_ID", 61 => "NO_CALLER_ID_LIMIT_EXCEEDED", 62 => "CALLER_ID_VERIFICATION_REQUIRED", 63 => "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED", 64 => "MESSAGE_NOT_FOUND", 65 => "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT", 66 => "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED", 67 => "ACCOUNT_MIGRATION_PINCODE_BLOCKED", 69 => "INVALID_PASSWORD_FORMAT", 70 => "FEATURE_RESTRICTED", 71 => "MESSAGE_NOT_DESTRUCTIBLE", 72 => "PAID_CALL_REDEEM_FAILED", 73 => "PREVENTED_JOIN_BY_TICKET", 75 => "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT", 76 => "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY", 77 => "SECURITY_CENTER_NOT_VERIFIED", 78 => "SECURITY_CENTER_BLOCKED_BY_SETTING", 79 => "SECURITY_CENTER_BLOCKED", 80 => "TALK_PROXY_EXCEPTION", 81 => "E2EE_INVALID_PROTOCOL", 82 => "E2EE_RETRY_ENCRYPT", 83 => "E2EE_UPDATE_SENDER_KEY", 84 => "E2EE_UPDATE_RECEIVER_KEY", 85 => "E2EE_INVALID_ARGUMENT", 86 => "E2EE_INVALID_VERSION", 87 => "E2EE_SENDER_DISABLED", 88 => "E2EE_RECEIVER_DISABLED", 89 => "E2EE_SENDER_NOT_ALLOWED", 90 => "E2EE_RECEIVER_NOT_ALLOWED", 91 => "E2EE_RESEND_FAIL", 92 => "E2EE_RESEND_OK", 93 => "HITOKOTO_BACKUP_NO_AVAILABLE_DATA", 94 => "E2EE_UPDATE_PRIMARY_DEVICE", 95 => "SUCCESS", 96 => "CANCEL", 97 => "E2EE_PRIMARY_NOT_SUPPORT", 98 => "E2EE_RETRY_PLAIN", 99 => "E2EE_RECREATE_GROUP_KEY", 100 => "E2EE_GROUP_TOO_MANY_MEMBERS", 101 => "SERVER_BUSY", 102 => "NOT_ALLOWED_ADD_FOLLOW", 103 => "INCOMING_FRIEND_REQUEST_LIMIT", 104 => "OUTGOING_FRIEND_REQUEST_LIMIT", 105 => "OUTGOING_FRIEND_REQUEST_QUOTA", 106 => "DUPLICATED", 107 => "BANNED"}
  VALID_VALUES = Set.new([ILLEGAL_ARGUMENT, AUTHENTICATION_FAILED, DB_FAILED, INVALID_STATE, EXCESSIVE_ACCESS, NOT_FOUND, INVALID_MID, NOT_A_MEMBER, INVALID_LENGTH, NOT_AVAILABLE_USER, NOT_AUTHORIZED_DEVICE, NOT_AUTHORIZED_SESSION, INCOMPATIBLE_APP_VERSION, NOT_READY, NOT_AVAILABLE_SESSION, SYSTEM_ERROR, NO_AVAILABLE_VERIFICATION_METHOD, NOT_AUTHENTICATED, INVALID_IDENTITY_CREDENTIAL, NOT_AVAILABLE_IDENTITY_IDENTIFIER, INTERNAL_ERROR, NO_SUCH_IDENTITY_IDENFIER, DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY, ILLEGAL_IDENTITY_CREDENTIAL, UNKNOWN_CHANNEL, NO_SUCH_MESSAGE_BOX, NOT_AVAILABLE_MESSAGE_BOX, CHANNEL_DOES_NOT_MATCH, NOT_YOUR_MESSAGE, MESSAGE_DEFINED_ERROR, USER_CANNOT_ACCEPT_PRESENTS, USER_NOT_STICKER_OWNER, MAINTENANCE_ERROR, ACCOUNT_NOT_MATCHED, ABUSE_BLOCK, NOT_FRIEND, NOT_ALLOWED_CALL, BLOCK_FRIEND, INCOMPATIBLE_VOIP_VERSION, INVALID_SNS_ACCESS_TOKEN, EXTERNAL_SERVICE_NOT_AVAILABLE, NOT_ALLOWED_ADD_CONTACT, NOT_CERTIFICATED, NOT_ALLOWED_SECONDARY_DEVICE, INVALID_PIN_CODE, NOT_FOUND_IDENTITY_CREDENTIAL, EXCEED_FILE_MAX_SIZE, EXCEED_DAILY_QUOTA, NOT_SUPPORT_SEND_FILE, MUST_UPGRADE, NOT_AVAILABLE_PIN_CODE_SESSION, EXPIRED_REVISION, NOT_YET_PHONE_NUMBER, BAD_CALL_NUMBER, UNAVAILABLE_CALL_NUMBER, NOT_SUPPORT_CALL_SERVICE, CONGESTION_CONTROL, NO_BALANCE, NOT_PERMITTED_CALLER_ID, NO_CALLER_ID_LIMIT_EXCEEDED, CALLER_ID_VERIFICATION_REQUIRED, NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED, MESSAGE_NOT_FOUND, INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT, ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED, ACCOUNT_MIGRATION_PINCODE_BLOCKED, INVALID_PASSWORD_FORMAT, FEATURE_RESTRICTED, MESSAGE_NOT_DESTRUCTIBLE, PAID_CALL_REDEEM_FAILED, PREVENTED_JOIN_BY_TICKET, SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT, SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY, SECURITY_CENTER_NOT_VERIFIED, SECURITY_CENTER_BLOCKED_BY_SETTING, SECURITY_CENTER_BLOCKED, TALK_PROXY_EXCEPTION, E2EE_INVALID_PROTOCOL, E2EE_RETRY_ENCRYPT, E2EE_UPDATE_SENDER_KEY, E2EE_UPDATE_RECEIVER_KEY, E2EE_INVALID_ARGUMENT, E2EE_INVALID_VERSION, E2EE_SENDER_DISABLED, E2EE_RECEIVER_DISABLED, E2EE_SENDER_NOT_ALLOWED, E2EE_RECEIVER_NOT_ALLOWED, E2EE_RESEND_FAIL, E2EE_RESEND_OK, HITOKOTO_BACKUP_NO_AVAILABLE_DATA, E2EE_UPDATE_PRIMARY_DEVICE, SUCCESS, CANCEL, E2EE_PRIMARY_NOT_SUPPORT, E2EE_RETRY_PLAIN, E2EE_RECREATE_GROUP_KEY, E2EE_GROUP_TOO_MANY_MEMBERS, SERVER_BUSY, NOT_ALLOWED_ADD_FOLLOW, INCOMING_FRIEND_REQUEST_LIMIT, OUTGOING_FRIEND_REQUEST_LIMIT, OUTGOING_FRIEND_REQUEST_QUOTA, DUPLICATED, BANNED]).freeze
end

module FeatureType
  OBS_VIDEO = 1
  OBS_GENERAL = 2
  VALUE_MAP = {1 => "OBS_VIDEO", 2 => "OBS_GENERAL"}
  VALID_VALUES = Set.new([OBS_VIDEO, OBS_GENERAL]).freeze
end

module GroupAttribute
  NAME = 1
  PICTURE_STATUS = 2
  ALL = 255
  PREVENTED_JOIN_BY_TICKET = 4
  NOTIFICATION_SETTING = 8
  VALUE_MAP = {1 => "NAME", 2 => "PICTURE_STATUS", 255 => "ALL", 4 => "PREVENTED_JOIN_BY_TICKET", 8 => "NOTIFICATION_SETTING"}
  VALID_VALUES = Set.new([NAME, PICTURE_STATUS, ALL, PREVENTED_JOIN_BY_TICKET, NOTIFICATION_SETTING]).freeze
end

module IdentityProvider
  UNKNOWN = 0
  LINE = 1
  NAVER_KR = 2
  LINE_PHONE = 3
  VALUE_MAP = {0 => "UNKNOWN", 1 => "LINE", 2 => "NAVER_KR", 3 => "LINE_PHONE"}
  VALID_VALUES = Set.new([UNKNOWN, LINE, NAVER_KR, LINE_PHONE]).freeze
end

module LoginResultType
  SUCCESS = 1
  REQUIRE_QRCODE = 2
  REQUIRE_DEVICE_CONFIRM = 3
  REQUIRE_SMS_CONFIRM = 4
  VALUE_MAP = {1 => "SUCCESS", 2 => "REQUIRE_QRCODE", 3 => "REQUIRE_DEVICE_CONFIRM", 4 => "REQUIRE_SMS_CONFIRM"}
  VALID_VALUES = Set.new([SUCCESS, REQUIRE_QRCODE, REQUIRE_DEVICE_CONFIRM, REQUIRE_SMS_CONFIRM]).freeze
end

module MessageOperationType
  SEND_MESSAGE = 1
  RECEIVE_MESSAGE = 2
  READ_MESSAGE = 3
  NOTIFIED_READ_MESSAGE = 4
  NOTIFIED_JOIN_CHAT = 5
  FAILED_SEND_MESSAGE = 6
  SEND_CONTENT = 7
  SEND_CONTENT_RECEIPT = 8
  SEND_CHAT_REMOVED = 9
  REMOVE_ALL_MESSAGES = 10
  VALUE_MAP = {1 => "SEND_MESSAGE", 2 => "RECEIVE_MESSAGE", 3 => "READ_MESSAGE", 4 => "NOTIFIED_READ_MESSAGE", 5 => "NOTIFIED_JOIN_CHAT", 6 => "FAILED_SEND_MESSAGE", 7 => "SEND_CONTENT", 8 => "SEND_CONTENT_RECEIPT", 9 => "SEND_CHAT_REMOVED", 10 => "REMOVE_ALL_MESSAGES"}
  VALID_VALUES = Set.new([SEND_MESSAGE, RECEIVE_MESSAGE, READ_MESSAGE, NOTIFIED_READ_MESSAGE, NOTIFIED_JOIN_CHAT, FAILED_SEND_MESSAGE, SEND_CONTENT, SEND_CONTENT_RECEIPT, SEND_CHAT_REMOVED, REMOVE_ALL_MESSAGES]).freeze
end

module MIDType
  USER = 0
  ROOM = 1
  GROUP = 2
  SQUARE = 3
  SQUARE_CHAT = 4
  SQUARE_MEMBER = 5
  BOT = 6
  VALUE_MAP = {0 => "USER", 1 => "ROOM", 2 => "GROUP", 3 => "SQUARE", 4 => "SQUARE_CHAT", 5 => "SQUARE_MEMBER", 6 => "BOT"}
  VALID_VALUES = Set.new([USER, ROOM, GROUP, SQUARE, SQUARE_CHAT, SQUARE_MEMBER, BOT]).freeze
end

module ServiceCode
  UNKNOWN = 0
  TALK = 1
  SQUARE = 2
  VALUE_MAP = {0 => "UNKNOWN", 1 => "TALK", 2 => "SQUARE"}
  VALID_VALUES = Set.new([UNKNOWN, TALK, SQUARE]).freeze
end

module FriendRequestDirection
  INCOMING = 1
  OUTGOING = 2
  VALUE_MAP = {1 => "INCOMING", 2 => "OUTGOING"}
  VALID_VALUES = Set.new([INCOMING, OUTGOING]).freeze
end

module FriendRequestMethod
  TIMELINE = 1
  NEARBY = 2
  SQUARE = 3
  VALUE_MAP = {1 => "TIMELINE", 2 => "NEARBY", 3 => "SQUARE"}
  VALID_VALUES = Set.new([TIMELINE, NEARBY, SQUARE]).freeze
end

module FriendRequestStatus
  NONE = 0
  AVAILABLE = 1
  ALREADY_REQUESTED = 2
  UNAVAILABLE = 3
  VALUE_MAP = {0 => "NONE", 1 => "AVAILABLE", 2 => "ALREADY_REQUESTED", 3 => "UNAVAILABLE"}
  VALID_VALUES = Set.new([NONE, AVAILABLE, ALREADY_REQUESTED, UNAVAILABLE]).freeze
end

module ModificationType
  ADD = 0
  REMOVE = 1
  MODIFY = 2
  VALUE_MAP = {0 => "ADD", 1 => "REMOVE", 2 => "MODIFY"}
  VALID_VALUES = Set.new([ADD, REMOVE, MODIFY]).freeze
end

module NotificationItemFetchMode
  ALL = 0
  APPEND = 1
  VALUE_MAP = {0 => "ALL", 1 => "APPEND"}
  VALID_VALUES = Set.new([ALL, APPEND]).freeze
end

module NotificationQueueType
  GLOBAL = 1
  MESSAGE = 2
  PRIMARY = 3
  VALUE_MAP = {1 => "GLOBAL", 2 => "MESSAGE", 3 => "PRIMARY"}
  VALID_VALUES = Set.new([GLOBAL, MESSAGE, PRIMARY]).freeze
end

module GroupCallMediaType
  AUDIO = 1
  VIDEO = 2
  VALUE_MAP = {1 => "AUDIO", 2 => "VIDEO"}
  VALID_VALUES = Set.new([AUDIO, VIDEO]).freeze
end

module PersonalInfo
  EMAIL = 0
  PHONE = 1
  BIRTHDAY = 2
  RAW_BIRTHDAY = 3
  VALUE_MAP = {0 => "EMAIL", 1 => "PHONE", 2 => "BIRTHDAY", 3 => "RAW_BIRTHDAY"}
  VALID_VALUES = Set.new([EMAIL, PHONE, BIRTHDAY, RAW_BIRTHDAY]).freeze
end

module NotificationStatus
  NOTIFICATION_ITEM_EXIST = 1
  TIMELINE_ITEM_EXIST = 2
  NOTE_GROUP_NEW_ITEM_EXIST = 4
  TIMELINE_BUDDYGROUP_CHANGED = 8
  NOTE_ONE_TO_ONE_NEW_ITEM_EXIST = 16
  ALBUM_ITEM_EXIST = 32
  TIMELINE_ITEM_DELETED = 64
  OTOGROUP_ITEM_EXIST = 128
  GROUPHOME_NEW_ITEM_EXIST = 256
  GROUPHOME_HIDDEN_ITEM_CHANGED = 512
  NOTIFICATION_ITEM_CHANGED = 1024
  BEAD_ITEM_HIDE = 2048
  BEAD_ITEM_SHOW = 4096
  VALUE_MAP = {1 => "NOTIFICATION_ITEM_EXIST", 2 => "TIMELINE_ITEM_EXIST", 4 => "NOTE_GROUP_NEW_ITEM_EXIST", 8 => "TIMELINE_BUDDYGROUP_CHANGED", 16 => "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST", 32 => "ALBUM_ITEM_EXIST", 64 => "TIMELINE_ITEM_DELETED", 128 => "OTOGROUP_ITEM_EXIST", 256 => "GROUPHOME_NEW_ITEM_EXIST", 512 => "GROUPHOME_HIDDEN_ITEM_CHANGED", 1024 => "NOTIFICATION_ITEM_CHANGED", 2048 => "BEAD_ITEM_HIDE", 4096 => "BEAD_ITEM_SHOW"}
  VALID_VALUES = Set.new([NOTIFICATION_ITEM_EXIST, TIMELINE_ITEM_EXIST, NOTE_GROUP_NEW_ITEM_EXIST, TIMELINE_BUDDYGROUP_CHANGED, NOTE_ONE_TO_ONE_NEW_ITEM_EXIST, ALBUM_ITEM_EXIST, TIMELINE_ITEM_DELETED, OTOGROUP_ITEM_EXIST, GROUPHOME_NEW_ITEM_EXIST, GROUPHOME_HIDDEN_ITEM_CHANGED, NOTIFICATION_ITEM_CHANGED, BEAD_ITEM_HIDE, BEAD_ITEM_SHOW]).freeze
end

module NotificationType
  APPLE_APNS = 1
  GOOGLE_C2DM = 2
  NHN_NNI = 3
  SKT_AOM = 4
  MS_MPNS = 5
  RIM_BIS = 6
  GOOGLE_GCM = 7
  NOKIA_NNAPI = 8
  TIZEN = 9
  LINE_BOT = 17
  LINE_WAP = 18
  APPLE_APNS_VOIP = 19
  MS_WNS = 20
  GOOGLE_FCM = 21
  VALUE_MAP = {1 => "APPLE_APNS", 2 => "GOOGLE_C2DM", 3 => "NHN_NNI", 4 => "SKT_AOM", 5 => "MS_MPNS", 6 => "RIM_BIS", 7 => "GOOGLE_GCM", 8 => "NOKIA_NNAPI", 9 => "TIZEN", 17 => "LINE_BOT", 18 => "LINE_WAP", 19 => "APPLE_APNS_VOIP", 20 => "MS_WNS", 21 => "GOOGLE_FCM"}
  VALID_VALUES = Set.new([APPLE_APNS, GOOGLE_C2DM, NHN_NNI, SKT_AOM, MS_MPNS, RIM_BIS, GOOGLE_GCM, NOKIA_NNAPI, TIZEN, LINE_BOT, LINE_WAP, APPLE_APNS_VOIP, MS_WNS, GOOGLE_FCM]).freeze
end

module OpStatus
  NORMAL = 0
  ALERT_DISABLED = 1
  ALWAYS = 2
  VALUE_MAP = {0 => "NORMAL", 1 => "ALERT_DISABLED", 2 => "ALWAYS"}
  VALID_VALUES = Set.new([NORMAL, ALERT_DISABLED, ALWAYS]).freeze
end

module OpType
  END_OF_OPERATION = 0
  UPDATE_PROFILE = 1
  UPDATE_SETTINGS = 36
  NOTIFIED_UPDATE_PROFILE = 2
  REGISTER_USERID = 3
  ADD_CONTACT = 4
  NOTIFIED_ADD_CONTACT = 5
  BLOCK_CONTACT = 6
  UNBLOCK_CONTACT = 7
  NOTIFIED_RECOMMEND_CONTACT = 8
  CREATE_GROUP = 9
  UPDATE_GROUP = 10
  NOTIFIED_UPDATE_GROUP = 11
  INVITE_INTO_GROUP = 12
  NOTIFIED_INVITE_INTO_GROUP = 13
  CANCEL_INVITATION_GROUP = 31
  NOTIFIED_CANCEL_INVITATION_GROUP = 32
  LEAVE_GROUP = 14
  NOTIFIED_LEAVE_GROUP = 15
  ACCEPT_GROUP_INVITATION = 16
  NOTIFIED_ACCEPT_GROUP_INVITATION = 17
  REJECT_GROUP_INVITATION = 34
  NOTIFIED_REJECT_GROUP_INVITATION = 35
  KICKOUT_FROM_GROUP = 18
  NOTIFIED_KICKOUT_FROM_GROUP = 19
  CREATE_ROOM = 20
  INVITE_INTO_ROOM = 21
  NOTIFIED_INVITE_INTO_ROOM = 22
  LEAVE_ROOM = 23
  NOTIFIED_LEAVE_ROOM = 24
  SEND_MESSAGE = 25
  RECEIVE_MESSAGE = 26
  SEND_MESSAGE_RECEIPT = 27
  RECEIVE_MESSAGE_RECEIPT = 28
  SEND_CONTENT_RECEIPT = 29
  RECEIVE_ANNOUNCEMENT = 30
  NOTIFIED_UNREGISTER_USER = 33
  INVITE_VIA_EMAIL = 38
  NOTIFIED_REGISTER_USER = 37
  NOTIFIED_REQUEST_RECOVERY = 39
  SEND_CHAT_CHECKED = 40
  SEND_CHAT_REMOVED = 41
  NOTIFIED_FORCE_SYNC = 42
  SEND_CONTENT = 43
  SEND_MESSAGE_MYHOME = 44
  NOTIFIED_UPDATE_CONTENT_PREVIEW = 45
  REMOVE_ALL_MESSAGES = 46
  NOTIFIED_UPDATE_PURCHASES = 47
  DUMMY = 48
  UPDATE_CONTACT = 49
  NOTIFIED_RECEIVED_CALL = 50
  CANCEL_CALL = 51
  NOTIFIED_REDIRECT = 52
  NOTIFIED_CHANNEL_SYNC = 53
  FAILED_SEND_MESSAGE = 54
  NOTIFIED_READ_MESSAGE = 55
  FAILED_EMAIL_CONFIRMATION = 56
  NOTIFIED_CHAT_CONTENT = 58
  NOTIFIED_PUSH_NOTICENTER_ITEM = 59
  NOTIFIED_JOIN_CHAT = 60
  NOTIFIED_LEAVE_CHAT = 61
  NOTIFIED_TYPING = 62
  FRIEND_REQUEST_ACCEPTED = 63
  DESTROY_MESSAGE = 64
  NOTIFIED_DESTROY_MESSAGE = 65
  UPDATE_PUBLICKEYCHAIN = 66
  NOTIFIED_UPDATE_PUBLICKEYCHAIN = 67
  NOTIFIED_BLOCK_CONTACT = 68
  NOTIFIED_UNBLOCK_CONTACT = 69
  UPDATE_GROUPPREFERENCE = 70
  NOTIFIED_PAYMENT_EVENT = 71
  REGISTER_E2EE_PUBLICKEY = 72
  NOTIFIED_E2EE_KEY_EXCHANGE_REQ = 73
  NOTIFIED_E2EE_KEY_EXCHANGE_RESP = 74
  NOTIFIED_E2EE_MESSAGE_RESEND_REQ = 75
  NOTIFIED_E2EE_MESSAGE_RESEND_RESP = 76
  NOTIFIED_E2EE_KEY_UPDATE = 77
  NOTIFIED_BUDDY_UPDATE_PROFILE = 78
  NOTIFIED_UPDATE_LINEAT_TABS = 79
  UPDATE_ROOM = 80
  NOTIFIED_BEACON_DETECTED = 81
  UPDATE_EXTENDED_PROFILE = 82
  ADD_FOLLOW = 83
  NOTIFIED_ADD_FOLLOW = 84
  DELETE_FOLLOW = 85
  NOTIFIED_DELETE_FOLLOW = 86
  UPDATE_TIMELINE_SETTINGS = 87
  NOTIFIED_FRIEND_REQUEST = 88
  UPDATE_RINGBACK_TONE = 89
  NOTIFIED_POSTBACK = 90
  RECEIVE_READ_WATERMARK = 91
  NOTIFIED_MESSAGE_DELIVERED = 92
  NOTIFIED_UPDATE_CHAT_BAR = 93
  NOTIFIED_CHATAPP_INSTALLED = 94
  NOTIFIED_CHATAPP_UPDATED = 95
  NOTIFIED_CHATAPP_NEW_MARK = 96
  NOTIFIED_CHATAPP_DELETED = 97
  NOTIFIED_CHATAPP_SYNC = 98
  NOTIFIED_UPDATE_MESSAGE = 99
  VALUE_MAP = {0 => "END_OF_OPERATION", 1 => "UPDATE_PROFILE", 36 => "UPDATE_SETTINGS", 2 => "NOTIFIED_UPDATE_PROFILE", 3 => "REGISTER_USERID", 4 => "ADD_CONTACT", 5 => "NOTIFIED_ADD_CONTACT", 6 => "BLOCK_CONTACT", 7 => "UNBLOCK_CONTACT", 8 => "NOTIFIED_RECOMMEND_CONTACT", 9 => "CREATE_GROUP", 10 => "UPDATE_GROUP", 11 => "NOTIFIED_UPDATE_GROUP", 12 => "INVITE_INTO_GROUP", 13 => "NOTIFIED_INVITE_INTO_GROUP", 31 => "CANCEL_INVITATION_GROUP", 32 => "NOTIFIED_CANCEL_INVITATION_GROUP", 14 => "LEAVE_GROUP", 15 => "NOTIFIED_LEAVE_GROUP", 16 => "ACCEPT_GROUP_INVITATION", 17 => "NOTIFIED_ACCEPT_GROUP_INVITATION", 34 => "REJECT_GROUP_INVITATION", 35 => "NOTIFIED_REJECT_GROUP_INVITATION", 18 => "KICKOUT_FROM_GROUP", 19 => "NOTIFIED_KICKOUT_FROM_GROUP", 20 => "CREATE_ROOM", 21 => "INVITE_INTO_ROOM", 22 => "NOTIFIED_INVITE_INTO_ROOM", 23 => "LEAVE_ROOM", 24 => "NOTIFIED_LEAVE_ROOM", 25 => "SEND_MESSAGE", 26 => "RECEIVE_MESSAGE", 27 => "SEND_MESSAGE_RECEIPT", 28 => "RECEIVE_MESSAGE_RECEIPT", 29 => "SEND_CONTENT_RECEIPT", 30 => "RECEIVE_ANNOUNCEMENT", 33 => "NOTIFIED_UNREGISTER_USER", 38 => "INVITE_VIA_EMAIL", 37 => "NOTIFIED_REGISTER_USER", 39 => "NOTIFIED_REQUEST_RECOVERY", 40 => "SEND_CHAT_CHECKED", 41 => "SEND_CHAT_REMOVED", 42 => "NOTIFIED_FORCE_SYNC", 43 => "SEND_CONTENT", 44 => "SEND_MESSAGE_MYHOME", 45 => "NOTIFIED_UPDATE_CONTENT_PREVIEW", 46 => "REMOVE_ALL_MESSAGES", 47 => "NOTIFIED_UPDATE_PURCHASES", 48 => "DUMMY", 49 => "UPDATE_CONTACT", 50 => "NOTIFIED_RECEIVED_CALL", 51 => "CANCEL_CALL", 52 => "NOTIFIED_REDIRECT", 53 => "NOTIFIED_CHANNEL_SYNC", 54 => "FAILED_SEND_MESSAGE", 55 => "NOTIFIED_READ_MESSAGE", 56 => "FAILED_EMAIL_CONFIRMATION", 58 => "NOTIFIED_CHAT_CONTENT", 59 => "NOTIFIED_PUSH_NOTICENTER_ITEM", 60 => "NOTIFIED_JOIN_CHAT", 61 => "NOTIFIED_LEAVE_CHAT", 62 => "NOTIFIED_TYPING", 63 => "FRIEND_REQUEST_ACCEPTED", 64 => "DESTROY_MESSAGE", 65 => "NOTIFIED_DESTROY_MESSAGE", 66 => "UPDATE_PUBLICKEYCHAIN", 67 => "NOTIFIED_UPDATE_PUBLICKEYCHAIN", 68 => "NOTIFIED_BLOCK_CONTACT", 69 => "NOTIFIED_UNBLOCK_CONTACT", 70 => "UPDATE_GROUPPREFERENCE", 71 => "NOTIFIED_PAYMENT_EVENT", 72 => "REGISTER_E2EE_PUBLICKEY", 73 => "NOTIFIED_E2EE_KEY_EXCHANGE_REQ", 74 => "NOTIFIED_E2EE_KEY_EXCHANGE_RESP", 75 => "NOTIFIED_E2EE_MESSAGE_RESEND_REQ", 76 => "NOTIFIED_E2EE_MESSAGE_RESEND_RESP", 77 => "NOTIFIED_E2EE_KEY_UPDATE", 78 => "NOTIFIED_BUDDY_UPDATE_PROFILE", 79 => "NOTIFIED_UPDATE_LINEAT_TABS", 80 => "UPDATE_ROOM", 81 => "NOTIFIED_BEACON_DETECTED", 82 => "UPDATE_EXTENDED_PROFILE", 83 => "ADD_FOLLOW", 84 => "NOTIFIED_ADD_FOLLOW", 85 => "DELETE_FOLLOW", 86 => "NOTIFIED_DELETE_FOLLOW", 87 => "UPDATE_TIMELINE_SETTINGS", 88 => "NOTIFIED_FRIEND_REQUEST", 89 => "UPDATE_RINGBACK_TONE", 90 => "NOTIFIED_POSTBACK", 91 => "RECEIVE_READ_WATERMARK", 92 => "NOTIFIED_MESSAGE_DELIVERED", 93 => "NOTIFIED_UPDATE_CHAT_BAR", 94 => "NOTIFIED_CHATAPP_INSTALLED", 95 => "NOTIFIED_CHATAPP_UPDATED", 96 => "NOTIFIED_CHATAPP_NEW_MARK", 97 => "NOTIFIED_CHATAPP_DELETED", 98 => "NOTIFIED_CHATAPP_SYNC", 99 => "NOTIFIED_UPDATE_MESSAGE"}
  VALID_VALUES = Set.new([END_OF_OPERATION, UPDATE_PROFILE, UPDATE_SETTINGS, NOTIFIED_UPDATE_PROFILE, REGISTER_USERID, ADD_CONTACT, NOTIFIED_ADD_CONTACT, BLOCK_CONTACT, UNBLOCK_CONTACT, NOTIFIED_RECOMMEND_CONTACT, CREATE_GROUP, UPDATE_GROUP, NOTIFIED_UPDATE_GROUP, INVITE_INTO_GROUP, NOTIFIED_INVITE_INTO_GROUP, CANCEL_INVITATION_GROUP, NOTIFIED_CANCEL_INVITATION_GROUP, LEAVE_GROUP, NOTIFIED_LEAVE_GROUP, ACCEPT_GROUP_INVITATION, NOTIFIED_ACCEPT_GROUP_INVITATION, REJECT_GROUP_INVITATION, NOTIFIED_REJECT_GROUP_INVITATION, KICKOUT_FROM_GROUP, NOTIFIED_KICKOUT_FROM_GROUP, CREATE_ROOM, INVITE_INTO_ROOM, NOTIFIED_INVITE_INTO_ROOM, LEAVE_ROOM, NOTIFIED_LEAVE_ROOM, SEND_MESSAGE, RECEIVE_MESSAGE, SEND_MESSAGE_RECEIPT, RECEIVE_MESSAGE_RECEIPT, SEND_CONTENT_RECEIPT, RECEIVE_ANNOUNCEMENT, NOTIFIED_UNREGISTER_USER, INVITE_VIA_EMAIL, NOTIFIED_REGISTER_USER, NOTIFIED_REQUEST_RECOVERY, SEND_CHAT_CHECKED, SEND_CHAT_REMOVED, NOTIFIED_FORCE_SYNC, SEND_CONTENT, SEND_MESSAGE_MYHOME, NOTIFIED_UPDATE_CONTENT_PREVIEW, REMOVE_ALL_MESSAGES, NOTIFIED_UPDATE_PURCHASES, DUMMY, UPDATE_CONTACT, NOTIFIED_RECEIVED_CALL, CANCEL_CALL, NOTIFIED_REDIRECT, NOTIFIED_CHANNEL_SYNC, FAILED_SEND_MESSAGE, NOTIFIED_READ_MESSAGE, FAILED_EMAIL_CONFIRMATION, NOTIFIED_CHAT_CONTENT, NOTIFIED_PUSH_NOTICENTER_ITEM, NOTIFIED_JOIN_CHAT, NOTIFIED_LEAVE_CHAT, NOTIFIED_TYPING, FRIEND_REQUEST_ACCEPTED, DESTROY_MESSAGE, NOTIFIED_DESTROY_MESSAGE, UPDATE_PUBLICKEYCHAIN, NOTIFIED_UPDATE_PUBLICKEYCHAIN, NOTIFIED_BLOCK_CONTACT, NOTIFIED_UNBLOCK_CONTACT, UPDATE_GROUPPREFERENCE, NOTIFIED_PAYMENT_EVENT, REGISTER_E2EE_PUBLICKEY, NOTIFIED_E2EE_KEY_EXCHANGE_REQ, NOTIFIED_E2EE_KEY_EXCHANGE_RESP, NOTIFIED_E2EE_MESSAGE_RESEND_REQ, NOTIFIED_E2EE_MESSAGE_RESEND_RESP, NOTIFIED_E2EE_KEY_UPDATE, NOTIFIED_BUDDY_UPDATE_PROFILE, NOTIFIED_UPDATE_LINEAT_TABS, UPDATE_ROOM, NOTIFIED_BEACON_DETECTED, UPDATE_EXTENDED_PROFILE, ADD_FOLLOW, NOTIFIED_ADD_FOLLOW, DELETE_FOLLOW, NOTIFIED_DELETE_FOLLOW, UPDATE_TIMELINE_SETTINGS, NOTIFIED_FRIEND_REQUEST, UPDATE_RINGBACK_TONE, NOTIFIED_POSTBACK, RECEIVE_READ_WATERMARK, NOTIFIED_MESSAGE_DELIVERED, NOTIFIED_UPDATE_CHAT_BAR, NOTIFIED_CHATAPP_INSTALLED, NOTIFIED_CHATAPP_UPDATED, NOTIFIED_CHATAPP_NEW_MARK, NOTIFIED_CHATAPP_DELETED, NOTIFIED_CHATAPP_SYNC, NOTIFIED_UPDATE_MESSAGE]).freeze
end

module PayloadType
  PAYLOAD_BUY = 101
  PAYLOAD_CS = 111
  PAYLOAD_BONUS = 121
  PAYLOAD_EVENT = 131
  VALUE_MAP = {101 => "PAYLOAD_BUY", 111 => "PAYLOAD_CS", 121 => "PAYLOAD_BONUS", 131 => "PAYLOAD_EVENT"}
  VALID_VALUES = Set.new([PAYLOAD_BUY, PAYLOAD_CS, PAYLOAD_BONUS, PAYLOAD_EVENT]).freeze
end

module PaymentPgType
  PAYMENT_PG_NONE = 0
  PAYMENT_PG_AU = 1
  PAYMENT_PG_AL = 2
  VALUE_MAP = {0 => "PAYMENT_PG_NONE", 1 => "PAYMENT_PG_AU", 2 => "PAYMENT_PG_AL"}
  VALID_VALUES = Set.new([PAYMENT_PG_NONE, PAYMENT_PG_AU, PAYMENT_PG_AL]).freeze
end

module PaymentType
  PAYMENT_APPLE = 1
  PAYMENT_GOOGLE = 2
  VALUE_MAP = {1 => "PAYMENT_APPLE", 2 => "PAYMENT_GOOGLE"}
  VALID_VALUES = Set.new([PAYMENT_APPLE, PAYMENT_GOOGLE]).freeze
end

module ProductBannerLinkType
  BANNER_LINK_NONE = 0
  BANNER_LINK_ITEM = 1
  BANNER_LINK_URL = 2
  BANNER_LINK_CATEGORY = 3
  VALUE_MAP = {0 => "BANNER_LINK_NONE", 1 => "BANNER_LINK_ITEM", 2 => "BANNER_LINK_URL", 3 => "BANNER_LINK_CATEGORY"}
  VALID_VALUES = Set.new([BANNER_LINK_NONE, BANNER_LINK_ITEM, BANNER_LINK_URL, BANNER_LINK_CATEGORY]).freeze
end

module ProductEventType
  NO_EVENT = 0
  CARRIER_ANY = 65537
  BUDDY_ANY = 131073
  INSTALL_IOS = 196609
  INSTALL_ANDROID = 196610
  MISSION_ANY = 262145
  MUSTBUY_ANY = 327681
  VALUE_MAP = {0 => "NO_EVENT", 65537 => "CARRIER_ANY", 131073 => "BUDDY_ANY", 196609 => "INSTALL_IOS", 196610 => "INSTALL_ANDROID", 262145 => "MISSION_ANY", 327681 => "MUSTBUY_ANY"}
  VALID_VALUES = Set.new([NO_EVENT, CARRIER_ANY, BUDDY_ANY, INSTALL_IOS, INSTALL_ANDROID, MISSION_ANY, MUSTBUY_ANY]).freeze
end

module StickerResourceType
  STATIC = 1
  ANIMATION = 2
  SOUND = 3
  ANIMATION_SOUND = 4
  POPUP = 5
  POPUP_SOUND = 6
  VALUE_MAP = {1 => "STATIC", 2 => "ANIMATION", 3 => "SOUND", 4 => "ANIMATION_SOUND", 5 => "POPUP", 6 => "POPUP_SOUND"}
  VALID_VALUES = Set.new([STATIC, ANIMATION, SOUND, ANIMATION_SOUND, POPUP, POPUP_SOUND]).freeze
end

module PlaceSearchProvider
  GOOGLE = 0
  BAIDU = 1
  VALUE_MAP = {0 => "GOOGLE", 1 => "BAIDU"}
  VALID_VALUES = Set.new([GOOGLE, BAIDU]).freeze
end

module PointErrorCode
  REQUEST_DUPLICATION = 3001
  INVALID_PARAMETER = 3002
  NOT_ENOUGH_BALANCE = 3003
  AUTHENTICATION_FAIL = 3004
  API_ACCESS_FORBIDDEN = 3005
  MEMBER_ACCOUNT_NOT_FOUND = 3006
  SERVICE_ACCOUNT_NOT_FOUND = 3007
  TRANSACTION_NOT_FOUND = 3008
  ALREADY_REVERSED_TRANSACTION = 3009
  MESSAGE_NOT_READABLE = 3010
  HTTP_REQUEST_METHOD_NOT_SUPPORTED = 3011
  HTTP_MEDIA_TYPE_NOT_SUPPORTED = 3012
  NOT_ALLOWED_TO_DEPOSIT = 3013
  NOT_ALLOWED_TO_PAY = 3014
  TRANSACTION_ACCESS_FORBIDDEN = 3015
  INVALID_SERVICE_CONFIGURATION = 4001
  DCS_COMMUNICATION_FAIL = 5004
  UPDATE_BALANCE_FAIL = 5007
  SYSTEM_ERROR = 5999
  SYSTEM_MAINTENANCE = 5888
  VALUE_MAP = {3001 => "REQUEST_DUPLICATION", 3002 => "INVALID_PARAMETER", 3003 => "NOT_ENOUGH_BALANCE", 3004 => "AUTHENTICATION_FAIL", 3005 => "API_ACCESS_FORBIDDEN", 3006 => "MEMBER_ACCOUNT_NOT_FOUND", 3007 => "SERVICE_ACCOUNT_NOT_FOUND", 3008 => "TRANSACTION_NOT_FOUND", 3009 => "ALREADY_REVERSED_TRANSACTION", 3010 => "MESSAGE_NOT_READABLE", 3011 => "HTTP_REQUEST_METHOD_NOT_SUPPORTED", 3012 => "HTTP_MEDIA_TYPE_NOT_SUPPORTED", 3013 => "NOT_ALLOWED_TO_DEPOSIT", 3014 => "NOT_ALLOWED_TO_PAY", 3015 => "TRANSACTION_ACCESS_FORBIDDEN", 4001 => "INVALID_SERVICE_CONFIGURATION", 5004 => "DCS_COMMUNICATION_FAIL", 5007 => "UPDATE_BALANCE_FAIL", 5999 => "SYSTEM_ERROR", 5888 => "SYSTEM_MAINTENANCE"}
  VALID_VALUES = Set.new([REQUEST_DUPLICATION, INVALID_PARAMETER, NOT_ENOUGH_BALANCE, AUTHENTICATION_FAIL, API_ACCESS_FORBIDDEN, MEMBER_ACCOUNT_NOT_FOUND, SERVICE_ACCOUNT_NOT_FOUND, TRANSACTION_NOT_FOUND, ALREADY_REVERSED_TRANSACTION, MESSAGE_NOT_READABLE, HTTP_REQUEST_METHOD_NOT_SUPPORTED, HTTP_MEDIA_TYPE_NOT_SUPPORTED, NOT_ALLOWED_TO_DEPOSIT, NOT_ALLOWED_TO_PAY, TRANSACTION_ACCESS_FORBIDDEN, INVALID_SERVICE_CONFIGURATION, DCS_COMMUNICATION_FAIL, UPDATE_BALANCE_FAIL, SYSTEM_ERROR, SYSTEM_MAINTENANCE]).freeze
end

module ProfileAttribute
  ALL = 511
  EMAIL = 1
  DISPLAY_NAME = 2
  PHONETIC_NAME = 4
  PICTURE = 8
  STATUS_MESSAGE = 16
  ALLOW_SEARCH_BY_USERID = 32
  ALLOW_SEARCH_BY_EMAIL = 64
  BUDDY_STATUS = 128
  MUSIC_PROFILE = 256
  VALUE_MAP = {511 => "ALL", 1 => "EMAIL", 2 => "DISPLAY_NAME", 4 => "PHONETIC_NAME", 8 => "PICTURE", 16 => "STATUS_MESSAGE", 32 => "ALLOW_SEARCH_BY_USERID", 64 => "ALLOW_SEARCH_BY_EMAIL", 128 => "BUDDY_STATUS", 256 => "MUSIC_PROFILE"}
  VALID_VALUES = Set.new([ALL, EMAIL, DISPLAY_NAME, PHONETIC_NAME, PICTURE, STATUS_MESSAGE, ALLOW_SEARCH_BY_USERID, ALLOW_SEARCH_BY_EMAIL, BUDDY_STATUS, MUSIC_PROFILE]).freeze
end

module PublicType
  HIDDEN = 0
  PUBLIC = 1000
  VALUE_MAP = {0 => "HIDDEN", 1000 => "PUBLIC"}
  VALID_VALUES = Set.new([HIDDEN, PUBLIC]).freeze
end

module RedirectType
  NONE = 0
  EXPIRE_SECOND = 1
  VALUE_MAP = {0 => "NONE", 1 => "EXPIRE_SECOND"}
  VALID_VALUES = Set.new([NONE, EXPIRE_SECOND]).freeze
end

module RegistrationType
  PHONE = 0
  EMAIL_WAP = 1
  FACEBOOK = 2305
  SINA = 2306
  RENREN = 2307
  FEIXIN = 2308
  VALUE_MAP = {0 => "PHONE", 1 => "EMAIL_WAP", 2305 => "FACEBOOK", 2306 => "SINA", 2307 => "RENREN", 2308 => "FEIXIN"}
  VALID_VALUES = Set.new([PHONE, EMAIL_WAP, FACEBOOK, SINA, RENREN, FEIXIN]).freeze
end

module ChatRoomAnnouncementType
  MESSAGE = 0
  NOTE = 1
  VALUE_MAP = {0 => "MESSAGE", 1 => "NOTE"}
  VALID_VALUES = Set.new([MESSAGE, NOTE]).freeze
end

module SettingsAttribute
  ALL = 2147483647
  NOTIFICATION_ENABLE = 1
  NOTIFICATION_MUTE_EXPIRATION = 2
  NOTIFICATION_NEW_MESSAGE = 4
  NOTIFICATION_GROUP_INVITATION = 8
  NOTIFICATION_SHOW_MESSAGE = 16
  NOTIFICATION_INCOMING_CALL = 32
  NOTIFICATION_SOUND_MESSAGE = 256
  NOTIFICATION_SOUND_GROUP = 512
  NOTIFICATION_DISABLED_WITH_SUB = 65536
  NOTIFICATION_PAYMENT = 131072
  PRIVACY_SYNC_CONTACTS = 64
  PRIVACY_SEARCH_BY_PHONE_NUMBER = 128
  PRIVACY_SEARCH_BY_USERID = 8192
  PRIVACY_SEARCH_BY_EMAIL = 16384
  PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152
  PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608
  PRIVACY_ALLOW_FRIEND_REQUEST = 1073741824
  PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432
  PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 67108864
  PRIVACY_AGREE_USE_PAIDCALL = 134217728
  CONTACT_MY_TICKET = 1024
  IDENTITY_PROVIDER = 2048
  IDENTITY_IDENTIFIER = 4096
  SNS_ACCOUNT = 524288
  PHONE_REGISTRATION = 1048576
  PREFERENCE_LOCALE = 32768
  CUSTOM_MODE = 4194304
  EMAIL_CONFIRMATION_STATUS = 16777216
  ACCOUNT_MIGRATION_PINCODE = 268435456
  ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 536870912
  SECURITY_CENTER_SETTINGS = 262144
  VALUE_MAP = {2147483647 => "ALL", 1 => "NOTIFICATION_ENABLE", 2 => "NOTIFICATION_MUTE_EXPIRATION", 4 => "NOTIFICATION_NEW_MESSAGE", 8 => "NOTIFICATION_GROUP_INVITATION", 16 => "NOTIFICATION_SHOW_MESSAGE", 32 => "NOTIFICATION_INCOMING_CALL", 256 => "NOTIFICATION_SOUND_MESSAGE", 512 => "NOTIFICATION_SOUND_GROUP", 65536 => "NOTIFICATION_DISABLED_WITH_SUB", 131072 => "NOTIFICATION_PAYMENT", 64 => "PRIVACY_SYNC_CONTACTS", 128 => "PRIVACY_SEARCH_BY_PHONE_NUMBER", 8192 => "PRIVACY_SEARCH_BY_USERID", 16384 => "PRIVACY_SEARCH_BY_EMAIL", 2097152 => "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN", 8388608 => "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME", 1073741824 => "PRIVACY_ALLOW_FRIEND_REQUEST", 33554432 => "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND", 67108864 => "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL", 134217728 => "PRIVACY_AGREE_USE_PAIDCALL", 1024 => "CONTACT_MY_TICKET", 2048 => "IDENTITY_PROVIDER", 4096 => "IDENTITY_IDENTIFIER", 524288 => "SNS_ACCOUNT", 1048576 => "PHONE_REGISTRATION", 32768 => "PREFERENCE_LOCALE", 4194304 => "CUSTOM_MODE", 16777216 => "EMAIL_CONFIRMATION_STATUS", 268435456 => "ACCOUNT_MIGRATION_PINCODE", 536870912 => "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE", 262144 => "SECURITY_CENTER_SETTINGS"}
  VALID_VALUES = Set.newfreeze
end

module SettingsAttributeEx
  NOTIFICATION_ENABLE = 0
  NOTIFICATION_MUTE_EXPIRATION = 1
  NOTIFICATION_NEW_MESSAGE = 2
  NOTIFICATION_GROUP_INVITATION = 3
  NOTIFICATION_SHOW_MESSAGE = 4
  NOTIFICATION_INCOMING_CALL = 5
  NOTIFICATION_SOUND_MESSAGE = 8
  NOTIFICATION_SOUND_GROUP = 9
  NOTIFICATION_DISABLED_WITH_SUB = 16
  NOTIFICATION_PAYMENT = 17
  NOTIFICATION_MENTION = 40
  NOTIFICATION_THUMBNAIL = 45
  PRIVACY_SYNC_CONTACTS = 6
  PRIVACY_SEARCH_BY_PHONE_NUMBER = 7
  PRIVACY_SEARCH_BY_USERID = 13
  PRIVACY_SEARCH_BY_EMAIL = 14
  PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 21
  PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 23
  PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME = 35
  PRIVACY_ALLOW_FRIEND_REQUEST = 30
  PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 25
  PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 26
  PRIVACY_AGREE_USE_PAIDCALL = 27
  CONTACT_MY_TICKET = 10
  IDENTITY_PROVIDER = 11
  IDENTITY_IDENTIFIER = 12
  SNS_ACCOUNT = 19
  PHONE_REGISTRATION = 20
  PREFERENCE_LOCALE = 15
  CUSTOM_MODE = 22
  EMAIL_CONFIRMATION_STATUS = 24
  ACCOUNT_MIGRATION_PINCODE = 28
  ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 29
  SECURITY_CENTER_SETTINGS = 18
  E2EE_ENABLE = 33
  ENABLE_SOUND_TO_TEXT = 47
  HITOKOTO_BACKUP_REQUESTED = 34
  CONTACT_ALLOW_FOLLOWING = 36
  PRIVACY_ALLOW_NEARBY = 37
  AGREEMENT_NEARBY = 38
  AGREEMENT_SQUARE = 39
  ALLOW_UNREGISTRATION_SECONDARY_DEVICE = 41
  AGREEMENT_BOT_USE = 42
  AGREEMENT_SHAKE_FUNCTION = 43
  AGREEMENT_MOBILE_CONTACT_NAME = 44
  AGREEMENT_SOUND_TO_TEXT = 46
  VALUE_MAP = {0 => "NOTIFICATION_ENABLE", 1 => "NOTIFICATION_MUTE_EXPIRATION", 2 => "NOTIFICATION_NEW_MESSAGE", 3 => "NOTIFICATION_GROUP_INVITATION", 4 => "NOTIFICATION_SHOW_MESSAGE", 5 => "NOTIFICATION_INCOMING_CALL", 8 => "NOTIFICATION_SOUND_MESSAGE", 9 => "NOTIFICATION_SOUND_GROUP", 16 => "NOTIFICATION_DISABLED_WITH_SUB", 17 => "NOTIFICATION_PAYMENT", 40 => "NOTIFICATION_MENTION", 45 => "NOTIFICATION_THUMBNAIL", 6 => "PRIVACY_SYNC_CONTACTS", 7 => "PRIVACY_SEARCH_BY_PHONE_NUMBER", 13 => "PRIVACY_SEARCH_BY_USERID", 14 => "PRIVACY_SEARCH_BY_EMAIL", 21 => "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN", 23 => "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME", 35 => "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME", 30 => "PRIVACY_ALLOW_FRIEND_REQUEST", 25 => "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND", 26 => "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL", 27 => "PRIVACY_AGREE_USE_PAIDCALL", 10 => "CONTACT_MY_TICKET", 11 => "IDENTITY_PROVIDER", 12 => "IDENTITY_IDENTIFIER", 19 => "SNS_ACCOUNT", 20 => "PHONE_REGISTRATION", 15 => "PREFERENCE_LOCALE", 22 => "CUSTOM_MODE", 24 => "EMAIL_CONFIRMATION_STATUS", 28 => "ACCOUNT_MIGRATION_PINCODE", 29 => "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE", 18 => "SECURITY_CENTER_SETTINGS", 33 => "E2EE_ENABLE", 47 => "ENABLE_SOUND_TO_TEXT", 34 => "HITOKOTO_BACKUP_REQUESTED", 36 => "CONTACT_ALLOW_FOLLOWING", 37 => "PRIVACY_ALLOW_NEARBY", 38 => "AGREEMENT_NEARBY", 39 => "AGREEMENT_SQUARE", 41 => "ALLOW_UNREGISTRATION_SECONDARY_DEVICE", 42 => "AGREEMENT_BOT_USE", 43 => "AGREEMENT_SHAKE_FUNCTION", 44 => "AGREEMENT_MOBILE_CONTACT_NAME", 46 => "AGREEMENT_SOUND_TO_TEXT"}
  VALID_VALUES = Set.new([NOTIFICATION_ENABLE, NOTIFICATION_MUTE_EXPIRATION, NOTIFICATION_NEW_MESSAGE, NOTIFICATION_GROUP_INVITATION, NOTIFICATION_SHOW_MESSAGE, NOTIFICATION_INCOMING_CALL, NOTIFICATION_SOUND_MESSAGE, NOTIFICATION_SOUND_GROUP, NOTIFICATION_DISABLED_WITH_SUB, NOTIFICATION_PAYMENT, NOTIFICATION_MENTION, NOTIFICATION_THUMBNAIL, PRIVACY_SYNC_CONTACTS, PRIVACY_SEARCH_BY_PHONE_NUMBER, PRIVACY_SEARCH_BY_USERID, PRIVACY_SEARCH_BY_EMAIL, PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN, PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME, PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME, PRIVACY_ALLOW_FRIEND_REQUEST, PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND, PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL, PRIVACY_AGREE_USE_PAIDCALL, CONTACT_MY_TICKET, IDENTITY_PROVIDER, IDENTITY_IDENTIFIER, SNS_ACCOUNT, PHONE_REGISTRATION, PREFERENCE_LOCALE, CUSTOM_MODE, EMAIL_CONFIRMATION_STATUS, ACCOUNT_MIGRATION_PINCODE, ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE, SECURITY_CENTER_SETTINGS, E2EE_ENABLE, ENABLE_SOUND_TO_TEXT, HITOKOTO_BACKUP_REQUESTED, CONTACT_ALLOW_FOLLOWING, PRIVACY_ALLOW_NEARBY, AGREEMENT_NEARBY, AGREEMENT_SQUARE, ALLOW_UNREGISTRATION_SECONDARY_DEVICE, AGREEMENT_BOT_USE, AGREEMENT_SHAKE_FUNCTION, AGREEMENT_MOBILE_CONTACT_NAME, AGREEMENT_SOUND_TO_TEXT]).freeze
end

module SnsIdType
  FACEBOOK = 1
  SINA = 2
  RENREN = 3
  FEIXIN = 4
  BBM = 5
  VALUE_MAP = {1 => "FACEBOOK", 2 => "SINA", 3 => "RENREN", 4 => "FEIXIN", 5 => "BBM"}
  VALID_VALUES = Set.new([FACEBOOK, SINA, RENREN, FEIXIN, BBM]).freeze
end

module SpammerReason
  OTHER = 0
  ADVERTISING = 1
  GENDER_HARASSMENT = 2
  HARASSMENT = 3
  VALUE_MAP = {0 => "OTHER", 1 => "ADVERTISING", 2 => "GENDER_HARASSMENT", 3 => "HARASSMENT"}
  VALID_VALUES = Set.new([OTHER, ADVERTISING, GENDER_HARASSMENT, HARASSMENT]).freeze
end

module SyncActionType
  SYNC = 0
  REPORT = 1
  VALUE_MAP = {0 => "SYNC", 1 => "REPORT"}
  VALID_VALUES = Set.new([SYNC, REPORT]).freeze
end

module SpotCategory
  UNKNOWN = 0
  GOURMET = 1
  BEAUTY = 2
  TRAVEL = 3
  SHOPPING = 4
  ENTERTAINMENT = 5
  SPORTS = 6
  TRANSPORT = 7
  LIFE = 8
  HOSPITAL = 9
  FINANCE = 10
  EDUCATION = 11
  OTHER = 12
  ALL = 10000
  VALUE_MAP = {0 => "UNKNOWN", 1 => "GOURMET", 2 => "BEAUTY", 3 => "TRAVEL", 4 => "SHOPPING", 5 => "ENTERTAINMENT", 6 => "SPORTS", 7 => "TRANSPORT", 8 => "LIFE", 9 => "HOSPITAL", 10 => "FINANCE", 11 => "EDUCATION", 12 => "OTHER", 10000 => "ALL"}
  VALID_VALUES = Set.new([UNKNOWN, GOURMET, BEAUTY, TRAVEL, SHOPPING, ENTERTAINMENT, SPORTS, TRANSPORT, LIFE, HOSPITAL, FINANCE, EDUCATION, OTHER, ALL]).freeze
end

module SyncCategory
  PROFILE = 0
  SETTINGS = 1
  OPS = 2
  CONTACT = 3
  RECOMMEND = 4
  BLOCK = 5
  GROUP = 6
  ROOM = 7
  NOTIFICATION = 8
  ADDRESS_BOOK = 9
  VALUE_MAP = {0 => "PROFILE", 1 => "SETTINGS", 2 => "OPS", 3 => "CONTACT", 4 => "RECOMMEND", 5 => "BLOCK", 6 => "GROUP", 7 => "ROOM", 8 => "NOTIFICATION", 9 => "ADDRESS_BOOK"}
  VALID_VALUES = Set.new([PROFILE, SETTINGS, OPS, CONTACT, RECOMMEND, BLOCK, GROUP, ROOM, NOTIFICATION, ADDRESS_BOOK]).freeze
end

module TMessageBoxStatus
  ACTIVATED = 1
  UNREAD = 2
  VALUE_MAP = {1 => "ACTIVATED", 2 => "UNREAD"}
  VALID_VALUES = Set.new([ACTIVATED, UNREAD]).freeze
end

module UniversalNotificationServiceErrorCode
  INTERNAL_ERROR = 0
  INVALID_KEY = 1
  ILLEGAL_ARGUMENT = 2
  TOO_MANY_REQUEST = 3
  AUTHENTICATION_FAILED = 4
  NO_WRITE_PERMISSION = 5
  VALUE_MAP = {0 => "INTERNAL_ERROR", 1 => "INVALID_KEY", 2 => "ILLEGAL_ARGUMENT", 3 => "TOO_MANY_REQUEST", 4 => "AUTHENTICATION_FAILED", 5 => "NO_WRITE_PERMISSION"}
  VALID_VALUES = Set.new([INTERNAL_ERROR, INVALID_KEY, ILLEGAL_ARGUMENT, TOO_MANY_REQUEST, AUTHENTICATION_FAILED, NO_WRITE_PERMISSION]).freeze
end

module UnregistrationReason
  UNREGISTRATION_REASON_UNREGISTER_USER = 1
  UNREGISTRATION_REASON_UNBIND_DEVICE = 2
  VALUE_MAP = {1 => "UNREGISTRATION_REASON_UNREGISTER_USER", 2 => "UNREGISTRATION_REASON_UNBIND_DEVICE"}
  VALID_VALUES = Set.new([UNREGISTRATION_REASON_UNREGISTER_USER, UNREGISTRATION_REASON_UNBIND_DEVICE]).freeze
end

module UserAgeType
  OVER = 1
  UNDER = 2
  UNDEFINED = 3
  VALUE_MAP = {1 => "OVER", 2 => "UNDER", 3 => "UNDEFINED"}
  VALID_VALUES = Set.new([OVER, UNDER, UNDEFINED]).freeze
end

module VerificationMethod
  NO_AVAILABLE = 0
  PIN_VIA_SMS = 1
  CALLERID_INDIGO = 2
  PIN_VIA_TTS = 4
  SKIP = 10
  VALUE_MAP = {0 => "NO_AVAILABLE", 1 => "PIN_VIA_SMS", 2 => "CALLERID_INDIGO", 4 => "PIN_VIA_TTS", 10 => "SKIP"}
  VALID_VALUES = Set.new([NO_AVAILABLE, PIN_VIA_SMS, CALLERID_INDIGO, PIN_VIA_TTS, SKIP]).freeze
end

module VerificationResult
  FAILED = 0
  OK_NOT_REGISTERED_YET = 1
  OK_REGISTERED_WITH_SAME_DEVICE = 2
  OK_REGISTERED_WITH_ANOTHER_DEVICE = 3
  VALUE_MAP = {0 => "FAILED", 1 => "OK_NOT_REGISTERED_YET", 2 => "OK_REGISTERED_WITH_SAME_DEVICE", 3 => "OK_REGISTERED_WITH_ANOTHER_DEVICE"}
  VALID_VALUES = Set.new([FAILED, OK_NOT_REGISTERED_YET, OK_REGISTERED_WITH_SAME_DEVICE, OK_REGISTERED_WITH_ANOTHER_DEVICE]).freeze
end

module WapInvitationType
  REGISTRATION = 1
  CHAT = 2
  VALUE_MAP = {1 => "REGISTRATION", 2 => "CHAT"}
  VALID_VALUES = Set.new([REGISTRATION, CHAT]).freeze
end

module MediaType
  AUDIO = 1
  VIDEO = 2
  VALUE_MAP = {1 => "AUDIO", 2 => "VIDEO"}
  VALID_VALUES = Set.new([AUDIO, VIDEO]).freeze
end

module SQErrorCode
  UNKNOWN = 0
  ILLEGAL_ARGUMENT = 400
  AUTHENTICATION_FAILURE = 401
  FORBIDDEN = 403
  NOT_FOUND = 404
  REVISION_MISMATCH = 409
  PRECONDITION_FAILED = 410
  INTERNAL_ERROR = 500
  NOT_IMPLEMENTED = 501
  TRY_AGAIN_LATER = 505
  VALUE_MAP = {0 => "UNKNOWN", 400 => "ILLEGAL_ARGUMENT", 401 => "AUTHENTICATION_FAILURE", 403 => "FORBIDDEN", 404 => "NOT_FOUND", 409 => "REVISION_MISMATCH", 410 => "PRECONDITION_FAILED", 500 => "INTERNAL_ERROR", 501 => "NOT_IMPLEMENTED", 505 => "TRY_AGAIN_LATER"}
  VALID_VALUES = Set.new([UNKNOWN, ILLEGAL_ARGUMENT, AUTHENTICATION_FAILURE, FORBIDDEN, NOT_FOUND, REVISION_MISMATCH, PRECONDITION_FAILED, INTERNAL_ERROR, NOT_IMPLEMENTED, TRY_AGAIN_LATER]).freeze
end

module SquareEventType
  RECEIVE_MESSAGE = 0
  SEND_MESSAGE = 1
  NOTIFIED_JOIN_SQUARE_CHAT = 2
  NOTIFIED_INVITE_INTO_SQUARE_CHAT = 3
  NOTIFIED_LEAVE_SQUARE_CHAT = 4
  NOTIFIED_DESTROY_MESSAGE = 5
  NOTIFIED_MARK_AS_READ = 6
  NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE = 7
  NOTIFIED_KICKOUT_FROM_SQUARE = 19
  NOTIFIED_SHUTDOWN_SQUARE = 18
  NOTIFIED_DELETE_SQUARE_CHAT = 20
  NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME = 30
  NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE = 31
  NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT = 37
  NOTIFIED_ADD_BOT = 33
  NOTIFIED_REMOVE_BOT = 34
  NOTIFIED_UPDATE_SQUARE = 8
  NOTIFIED_UPDATE_SQUARE_STATUS = 9
  NOTIFIED_UPDATE_SQUARE_AUTHORITY = 10
  NOTIFIED_UPDATE_SQUARE_MEMBER = 11
  NOTIFIED_UPDATE_SQUARE_CHAT = 12
  NOTIFIED_UPDATE_SQUARE_CHAT_STATUS = 13
  NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER = 14
  NOTIFIED_CREATE_SQUARE_MEMBER = 15
  NOTIFIED_CREATE_SQUARE_CHAT_MEMBER = 16
  NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION = 17
  NOTIFIED_UPDATE_SQUARE_FEATURE_SET = 32
  NOTIFIED_UPDATE_SQUARE_NOTE_STATUS = 36
  NOTIFICATION_JOIN_REQUEST = 21
  NOTIFICATION_JOINED = 22
  NOTIFICATION_PROMOTED_COADMIN = 23
  NOTIFICATION_PROMOTED_ADMIN = 24
  NOTIFICATION_DEMOTED_MEMBER = 25
  NOTIFICATION_KICKED_OUT = 26
  NOTIFICATION_SQUARE_DELETE = 27
  NOTIFICATION_SQUARE_CHAT_DELETE = 28
  NOTIFICATION_MESSAGE = 29
  VALUE_MAP = {0 => "RECEIVE_MESSAGE", 1 => "SEND_MESSAGE", 2 => "NOTIFIED_JOIN_SQUARE_CHAT", 3 => "NOTIFIED_INVITE_INTO_SQUARE_CHAT", 4 => "NOTIFIED_LEAVE_SQUARE_CHAT", 5 => "NOTIFIED_DESTROY_MESSAGE", 6 => "NOTIFIED_MARK_AS_READ", 7 => "NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE", 19 => "NOTIFIED_KICKOUT_FROM_SQUARE", 18 => "NOTIFIED_SHUTDOWN_SQUARE", 20 => "NOTIFIED_DELETE_SQUARE_CHAT", 30 => "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME", 31 => "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE", 37 => "NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT", 33 => "NOTIFIED_ADD_BOT", 34 => "NOTIFIED_REMOVE_BOT", 8 => "NOTIFIED_UPDATE_SQUARE", 9 => "NOTIFIED_UPDATE_SQUARE_STATUS", 10 => "NOTIFIED_UPDATE_SQUARE_AUTHORITY", 11 => "NOTIFIED_UPDATE_SQUARE_MEMBER", 12 => "NOTIFIED_UPDATE_SQUARE_CHAT", 13 => "NOTIFIED_UPDATE_SQUARE_CHAT_STATUS", 14 => "NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER", 15 => "NOTIFIED_CREATE_SQUARE_MEMBER", 16 => "NOTIFIED_CREATE_SQUARE_CHAT_MEMBER", 17 => "NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION", 32 => "NOTIFIED_UPDATE_SQUARE_FEATURE_SET", 36 => "NOTIFIED_UPDATE_SQUARE_NOTE_STATUS", 21 => "NOTIFICATION_JOIN_REQUEST", 22 => "NOTIFICATION_JOINED", 23 => "NOTIFICATION_PROMOTED_COADMIN", 24 => "NOTIFICATION_PROMOTED_ADMIN", 25 => "NOTIFICATION_DEMOTED_MEMBER", 26 => "NOTIFICATION_KICKED_OUT", 27 => "NOTIFICATION_SQUARE_DELETE", 28 => "NOTIFICATION_SQUARE_CHAT_DELETE", 29 => "NOTIFICATION_MESSAGE"}
  VALID_VALUES = Set.new([RECEIVE_MESSAGE, SEND_MESSAGE, NOTIFIED_JOIN_SQUARE_CHAT, NOTIFIED_INVITE_INTO_SQUARE_CHAT, NOTIFIED_LEAVE_SQUARE_CHAT, NOTIFIED_DESTROY_MESSAGE, NOTIFIED_MARK_AS_READ, NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE, NOTIFIED_KICKOUT_FROM_SQUARE, NOTIFIED_SHUTDOWN_SQUARE, NOTIFIED_DELETE_SQUARE_CHAT, NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME, NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE, NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT, NOTIFIED_ADD_BOT, NOTIFIED_REMOVE_BOT, NOTIFIED_UPDATE_SQUARE, NOTIFIED_UPDATE_SQUARE_STATUS, NOTIFIED_UPDATE_SQUARE_AUTHORITY, NOTIFIED_UPDATE_SQUARE_MEMBER, NOTIFIED_UPDATE_SQUARE_CHAT, NOTIFIED_UPDATE_SQUARE_CHAT_STATUS, NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER, NOTIFIED_CREATE_SQUARE_MEMBER, NOTIFIED_CREATE_SQUARE_CHAT_MEMBER, NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION, NOTIFIED_UPDATE_SQUARE_FEATURE_SET, NOTIFIED_UPDATE_SQUARE_NOTE_STATUS, NOTIFICATION_JOIN_REQUEST, NOTIFICATION_JOINED, NOTIFICATION_PROMOTED_COADMIN, NOTIFICATION_PROMOTED_ADMIN, NOTIFICATION_DEMOTED_MEMBER, NOTIFICATION_KICKED_OUT, NOTIFICATION_SQUARE_DELETE, NOTIFICATION_SQUARE_CHAT_DELETE, NOTIFICATION_MESSAGE]).freeze
end

module SquareMemberRelationState
  NONE = 1
  BLOCKED = 2
  VALUE_MAP = {1 => "NONE", 2 => "BLOCKED"}
  VALID_VALUES = Set.new([NONE, BLOCKED]).freeze
end

module SquareFeatureControlState
  DISABLED = 1
  ENABLED = 2
  VALUE_MAP = {1 => "DISABLED", 2 => "ENABLED"}
  VALID_VALUES = Set.new([DISABLED, ENABLED]).freeze
end

module BooleanState
  NONE = 0
  OFF = 1
  ON = 2
  VALUE_MAP = {0 => "NONE", 1 => "OFF", 2 => "ON"}
  VALID_VALUES = Set.new([NONE, OFF, ON]).freeze
end

module SquareType
  CLOSED = 0
  OPEN = 1
  VALUE_MAP = {0 => "CLOSED", 1 => "OPEN"}
  VALID_VALUES = Set.new([CLOSED, OPEN]).freeze
end

module SquareChatType
  OPEN = 1
  SECRET = 2
  ONE_ON_ONE = 3
  SQUARE_DEFAULT = 4
  VALUE_MAP = {1 => "OPEN", 2 => "SECRET", 3 => "ONE_ON_ONE", 4 => "SQUARE_DEFAULT"}
  VALID_VALUES = Set.new([OPEN, SECRET, ONE_ON_ONE, SQUARE_DEFAULT]).freeze
end

module SquareErrorCode
  UNKNOWN = 0
  INTERNAL_ERROR = 500
  NOT_IMPLEMENTED = 501
  TRY_AGAIN_LATER = 503
  MAINTENANCE = 505
  ILLEGAL_ARGUMENT = 400
  AUTHENTICATION_FAILURE = 401
  FORBIDDEN = 403
  NOT_FOUND = 404
  REVISION_MISMATCH = 409
  PRECONDITION_FAILED = 410
  VALUE_MAP = {0 => "UNKNOWN", 500 => "INTERNAL_ERROR", 501 => "NOT_IMPLEMENTED", 503 => "TRY_AGAIN_LATER", 505 => "MAINTENANCE", 400 => "ILLEGAL_ARGUMENT", 401 => "AUTHENTICATION_FAILURE", 403 => "FORBIDDEN", 404 => "NOT_FOUND", 409 => "REVISION_MISMATCH", 410 => "PRECONDITION_FAILED"}
  VALID_VALUES = Set.new([UNKNOWN, INTERNAL_ERROR, NOT_IMPLEMENTED, TRY_AGAIN_LATER, MAINTENANCE, ILLEGAL_ARGUMENT, AUTHENTICATION_FAILURE, FORBIDDEN, NOT_FOUND, REVISION_MISMATCH, PRECONDITION_FAILED]).freeze
end

module SquareChatState
  ALIVE = 0
  DELETED = 1
  SUSPENDED = 2
  VALUE_MAP = {0 => "ALIVE", 1 => "DELETED", 2 => "SUSPENDED"}
  VALID_VALUES = Set.new([ALIVE, DELETED, SUSPENDED]).freeze
end

module SquareFeatureSetAttribute
  CREATING_SECRET_SQUARE_CHAT = 1
  INVITING_INTO_OPEN_SQUARE_CHAT = 2
  VALUE_MAP = {1 => "CREATING_SECRET_SQUARE_CHAT", 2 => "INVITING_INTO_OPEN_SQUARE_CHAT"}
  VALID_VALUES = Set.new([CREATING_SECRET_SQUARE_CHAT, INVITING_INTO_OPEN_SQUARE_CHAT]).freeze
end

module SquareMembershipState
  JOIN_REQUESTED = 1
  JOINED = 2
  REJECTED = 3
  LEFT = 4
  KICK_OUT = 5
  BANNED = 6
  DELETED = 7
  VALUE_MAP = {1 => "JOIN_REQUESTED", 2 => "JOINED", 3 => "REJECTED", 4 => "LEFT", 5 => "KICK_OUT", 6 => "BANNED", 7 => "DELETED"}
  VALID_VALUES = Set.new([JOIN_REQUESTED, JOINED, REJECTED, LEFT, KICK_OUT, BANNED, DELETED]).freeze
end

module SquareChatMemberAttribute
  MEMBERSHIP_STATE = 4
  NOTIFICATION_MESSAGE = 6
  VALUE_MAP = {4 => "MEMBERSHIP_STATE", 6 => "NOTIFICATION_MESSAGE"}
  VALID_VALUES = Set.new([MEMBERSHIP_STATE, NOTIFICATION_MESSAGE]).freeze
end

module SquareMemberRole
  ADMIN = 1
  CO_ADMIN = 2
  MEMBER = 10
  VALUE_MAP = {1 => "ADMIN", 2 => "CO_ADMIN", 10 => "MEMBER"}
  VALID_VALUES = Set.new([ADMIN, CO_ADMIN, MEMBER]).freeze
end

module PreconditionFailedExtraInfo
  DUPLICATED_DISPLAY_NAME = 0
  VALUE_MAP = {0 => "DUPLICATED_DISPLAY_NAME"}
  VALID_VALUES = Set.new([DUPLICATED_DISPLAY_NAME]).freeze
end

module SquareChatMembershipState
  JOINED = 1
  LEFT = 2
  VALUE_MAP = {1 => "JOINED", 2 => "LEFT"}
  VALID_VALUES = Set.new([JOINED, LEFT]).freeze
end

module FetchDirection
  FORWARD = 1
  BACKWARD = 2
  VALUE_MAP = {1 => "FORWARD", 2 => "BACKWARD"}
  VALID_VALUES = Set.new([FORWARD, BACKWARD]).freeze
end

module SquareAttribute
  NAME = 1
  WELCOME_MESSAGE = 2
  PROFILE_IMAGE = 3
  DESCRIPTION = 4
  SEARCHABLE = 6
  CATEGORY = 7
  INVITATION_URL = 8
  ABLE_TO_USE_INVITATION_URL = 9
  STATE = 10
  VALUE_MAP = {1 => "NAME", 2 => "WELCOME_MESSAGE", 3 => "PROFILE_IMAGE", 4 => "DESCRIPTION", 6 => "SEARCHABLE", 7 => "CATEGORY", 8 => "INVITATION_URL", 9 => "ABLE_TO_USE_INVITATION_URL", 10 => "STATE"}
  VALID_VALUES = Set.new([NAME, WELCOME_MESSAGE, PROFILE_IMAGE, DESCRIPTION, SEARCHABLE, CATEGORY, INVITATION_URL, ABLE_TO_USE_INVITATION_URL, STATE]).freeze
end

module SquareAuthorityAttribute
  UPDATE_SQUARE_PROFILE = 1
  INVITE_NEW_MEMBER = 2
  APPROVE_JOIN_REQUEST = 3
  CREATE_POST = 4
  CREATE_OPEN_SQUARE_CHAT = 5
  DELETE_SQUARE_CHAT_OR_POST = 6
  REMOVE_SQUARE_MEMBER = 7
  GRANT_ROLE = 8
  ENABLE_INVITATION_TICKET = 9
  CREATE_CHAT_ANNOUNCEMENT = 10
  VALUE_MAP = {1 => "UPDATE_SQUARE_PROFILE", 2 => "INVITE_NEW_MEMBER", 3 => "APPROVE_JOIN_REQUEST", 4 => "CREATE_POST", 5 => "CREATE_OPEN_SQUARE_CHAT", 6 => "DELETE_SQUARE_CHAT_OR_POST", 7 => "REMOVE_SQUARE_MEMBER", 8 => "GRANT_ROLE", 9 => "ENABLE_INVITATION_TICKET", 10 => "CREATE_CHAT_ANNOUNCEMENT"}
  VALID_VALUES = Set.new([UPDATE_SQUARE_PROFILE, INVITE_NEW_MEMBER, APPROVE_JOIN_REQUEST, CREATE_POST, CREATE_OPEN_SQUARE_CHAT, DELETE_SQUARE_CHAT_OR_POST, REMOVE_SQUARE_MEMBER, GRANT_ROLE, ENABLE_INVITATION_TICKET, CREATE_CHAT_ANNOUNCEMENT]).freeze
end

module SquareEventStatus
  NORMAL = 1
  ALERT_DISABLED = 2
  VALUE_MAP = {1 => "NORMAL", 2 => "ALERT_DISABLED"}
  VALID_VALUES = Set.new([NORMAL, ALERT_DISABLED]).freeze
end

module SuggestDictionaryIncrementStatus
  SUCCESS = 0
  INVALID_REVISION = 1
  TOO_LARGE_DATA = 2
  SCHEME_CHANGED = 3
  RETRY = 4
  FAIL = 5
  TOO_OLD_DATA = 6
  VALUE_MAP = {0 => "SUCCESS", 1 => "INVALID_REVISION", 2 => "TOO_LARGE_DATA", 3 => "SCHEME_CHANGED", 4 => "RETRY", 5 => "FAIL", 6 => "TOO_OLD_DATA"}
  VALID_VALUES = Set.new([SUCCESS, INVALID_REVISION, TOO_LARGE_DATA, SCHEME_CHANGED, RETRY, FAIL, TOO_OLD_DATA]).freeze
end

class Location
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TITLE = 1
  ADDRESS = 2
  LATITUDE = 3
  LONGITUDE = 4
  PHONE = 5

  FIELDS = {
    TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
    ADDRESS => {:type => ::Thrift::Types::STRING, :name => 'address'},
    LATITUDE => {:type => ::Thrift::Types::DOUBLE, :name => 'latitude'},
    LONGITUDE => {:type => ::Thrift::Types::DOUBLE, :name => 'longitude'},
    PHONE => {:type => ::Thrift::Types::STRING, :name => 'phone'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class MessageBoxV2MessageId
  include ::Thrift::Struct, ::Thrift::Struct_Union
  DELIVEREDTIME = 1
  MESSAGEID = 2

  FIELDS = {
    DELIVEREDTIME => {:type => ::Thrift::Types::I64, :name => 'deliveredTime'},
    MESSAGEID => {:type => ::Thrift::Types::I64, :name => 'messageId'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class MessageCommitResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REQUESTID = 1
  STATE = 2
  MESSAGESTOREREQUESTID = 3
  MESSAGEIDS = 4
  RECEIVERCOUNT = 11
  SUCCESSCOUNT = 12
  FAILCOUNT = 13
  BLOCKCOUNT = 14
  UNREGISTEREDCOUNT = 15
  UNRELATEDCOUNT = 16
  ERRORDESCRIPTION = 21

  FIELDS = {
    REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
    STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => ::BuddyResultState},
    MESSAGESTOREREQUESTID => {:type => ::Thrift::Types::STRING, :name => 'messageStoreRequestId'},
    MESSAGEIDS => {:type => ::Thrift::Types::LIST, :name => 'messageIds', :element => {:type => ::Thrift::Types::STRING}},
    RECEIVERCOUNT => {:type => ::Thrift::Types::I64, :name => 'receiverCount'},
    SUCCESSCOUNT => {:type => ::Thrift::Types::I64, :name => 'successCount'},
    FAILCOUNT => {:type => ::Thrift::Types::I64, :name => 'failCount'},
    BLOCKCOUNT => {:type => ::Thrift::Types::I64, :name => 'blockCount'},
    UNREGISTEREDCOUNT => {:type => ::Thrift::Types::I64, :name => 'unregisteredCount'},
    UNRELATEDCOUNT => {:type => ::Thrift::Types::I64, :name => 'unrelatedCount'},
    ERRORDESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'errorDescription'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @state.nil? || ::BuddyResultState::VALID_VALUES.include?(@state)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class CallHost
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HOST = 1
  PORT = 2
  ZONE = 3

  FIELDS = {
    HOST => {:type => ::Thrift::Types::STRING, :name => 'host'},
    PORT => {:type => ::Thrift::Types::I32, :name => 'port'},
    ZONE => {:type => ::Thrift::Types::STRING, :name => 'zone'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class AgeCheckDocomoResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  AUTHURL = 1
  USERAGETYPE = 2

  FIELDS = {
    AUTHURL => {:type => ::Thrift::Types::STRING, :name => 'authUrl'},
    USERAGETYPE => {:type => ::Thrift::Types::I32, :name => 'userAgeType', :enum_class => ::UserAgeType}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @userAgeType.nil? || ::UserAgeType::VALID_VALUES.include?(@userAgeType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field userAgeType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class AgeCheckRequestResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  AUTHURL = 1
  SESSIONID = 2

  FIELDS = {
    AUTHURL => {:type => ::Thrift::Types::STRING, :name => 'authUrl'},
    SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class TextMessageAnnouncementContents
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MESSAGEID = 1
  TEXT = 2
  SENDERSQUAREMEMBERMID = 3
  CREATEDAT = 4

  FIELDS = {
    MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'},
    TEXT => {:type => ::Thrift::Types::STRING, :name => 'text'},
    SENDERSQUAREMEMBERMID => {:type => ::Thrift::Types::STRING, :name => 'senderSquareMemberMid'},
    CREATEDAT => {:type => ::Thrift::Types::I64, :name => 'createdAt'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareChatAnnouncementContents
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TEXTMESSAGEANNOUNCEMENTCONTENTS = 1

  FIELDS = {
    TEXTMESSAGEANNOUNCEMENTCONTENTS => {:type => ::Thrift::Types::STRUCT, :name => 'textMessageAnnouncementContents', :class => ::TextMessageAnnouncementContents}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareChatAnnouncement
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ANNOUNCEMENTSEQ = 1
  TYPE = 2
  CONTENTS = 3

  FIELDS = {
    ANNOUNCEMENTSEQ => {:type => ::Thrift::Types::I64, :name => 'announcementSeq'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::SquareChatAnnouncementType},
    CONTENTS => {:type => ::Thrift::Types::STRUCT, :name => 'contents', :class => ::SquareChatAnnouncementContents}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::SquareChatAnnouncementType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class Announcement
  include ::Thrift::Struct, ::Thrift::Struct_Union
  INDEX = 1
  FORCEUPDATE = 10
  TITLE = 11
  TEXT = 12
  CREATEDTIME = 13
  PICTUREURL = 14
  THUMBNAILURL = 15

  FIELDS = {
    INDEX => {:type => ::Thrift::Types::I32, :name => 'index'},
    FORCEUPDATE => {:type => ::Thrift::Types::BOOL, :name => 'forceUpdate'},
    TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
    TEXT => {:type => ::Thrift::Types::STRING, :name => 'text'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    PICTUREURL => {:type => ::Thrift::Types::STRING, :name => 'pictureUrl'},
    THUMBNAILURL => {:type => ::Thrift::Types::STRING, :name => 'thumbnailUrl'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelProvider
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NAME = 1

  FIELDS = {
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class E2EEPublicKey
  include ::Thrift::Struct, ::Thrift::Struct_Union
  VERSION = 1
  KEYID = 2
  KEYDATA = 4
  CREATEDTIME = 5

  FIELDS = {
    VERSION => {:type => ::Thrift::Types::I32, :name => 'version'},
    KEYID => {:type => ::Thrift::Types::I32, :name => 'keyId'},
    KEYDATA => {:type => ::Thrift::Types::STRING, :name => 'keyData', :binary => true},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelDomain
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HOST = 1
  REMOVED = 2

  FIELDS = {
    HOST => {:type => ::Thrift::Types::STRING, :name => 'host'},
    REMOVED => {:type => ::Thrift::Types::BOOL, :name => 'removed'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class E2EENegotiationResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ALLOWEDTYPES = 1
  PUBLICKEY = 2

  FIELDS = {
    ALLOWEDTYPES => {:type => ::Thrift::Types::SET, :name => 'allowedTypes', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ContentType}},
    PUBLICKEY => {:type => ::Thrift::Types::STRUCT, :name => 'publicKey', :class => ::E2EEPublicKey}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class OTPResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  OTPID = 1
  OTP = 2

  FIELDS = {
    OTPID => {:type => ::Thrift::Types::STRING, :name => 'otpId'},
    OTP => {:type => ::Thrift::Types::STRING, :name => 'otp'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Square
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  NAME = 2
  WELCOMEMESSAGE = 3
  PROFILEIMAGEOBSHASH = 4
  DESC = 5
  SEARCHABLE = 6
  TYPE = 7
  CATEGORYID = 8
  INVITATIONURL = 9
  REVISION = 10
  ABLETOUSEINVITATIONTICKET = 11
  STATE = 12

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    WELCOMEMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'welcomeMessage'},
    PROFILEIMAGEOBSHASH => {:type => ::Thrift::Types::STRING, :name => 'profileImageObsHash'},
    DESC => {:type => ::Thrift::Types::STRING, :name => 'desc'},
    SEARCHABLE => {:type => ::Thrift::Types::BOOL, :name => 'searchable'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::SquareType},
    CATEGORYID => {:type => ::Thrift::Types::I32, :name => 'categoryID'},
    INVITATIONURL => {:type => ::Thrift::Types::STRING, :name => 'invitationURL'},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    ABLETOUSEINVITATIONTICKET => {:type => ::Thrift::Types::BOOL, :name => 'ableToUseInvitationTicket'},
    STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => ::SquareState}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::SquareType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
    unless @state.nil? || ::SquareState::VALID_VALUES.include?(@state)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareAuthority
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 1
  UPDATESQUAREPROFILE = 2
  INVITENEWMEMBER = 3
  APPROVEJOINREQUEST = 4
  CREATEPOST = 5
  CREATEOPENSQUARECHAT = 6
  DELETESQUARECHATORPOST = 7
  REMOVESQUAREMEMBER = 8
  GRANTROLE = 9
  ENABLEINVITATIONTICKET = 10
  REVISION = 11

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    UPDATESQUAREPROFILE => {:type => ::Thrift::Types::I32, :name => 'updateSquareProfile', :enum_class => ::SquareMemberRole},
    INVITENEWMEMBER => {:type => ::Thrift::Types::I32, :name => 'inviteNewMember', :enum_class => ::SquareMemberRole},
    APPROVEJOINREQUEST => {:type => ::Thrift::Types::I32, :name => 'approveJoinRequest', :enum_class => ::SquareMemberRole},
    CREATEPOST => {:type => ::Thrift::Types::I32, :name => 'createPost', :enum_class => ::SquareMemberRole},
    CREATEOPENSQUARECHAT => {:type => ::Thrift::Types::I32, :name => 'createOpenSquareChat', :enum_class => ::SquareMemberRole},
    DELETESQUARECHATORPOST => {:type => ::Thrift::Types::I32, :name => 'deleteSquareChatOrPost', :enum_class => ::SquareMemberRole},
    REMOVESQUAREMEMBER => {:type => ::Thrift::Types::I32, :name => 'removeSquareMember', :enum_class => ::SquareMemberRole},
    GRANTROLE => {:type => ::Thrift::Types::I32, :name => 'grantRole', :enum_class => ::SquareMemberRole},
    ENABLEINVITATIONTICKET => {:type => ::Thrift::Types::I32, :name => 'enableInvitationTicket', :enum_class => ::SquareMemberRole},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @updateSquareProfile.nil? || ::SquareMemberRole::VALID_VALUES.include?(@updateSquareProfile)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field updateSquareProfile!')
    end
    unless @inviteNewMember.nil? || ::SquareMemberRole::VALID_VALUES.include?(@inviteNewMember)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field inviteNewMember!')
    end
    unless @approveJoinRequest.nil? || ::SquareMemberRole::VALID_VALUES.include?(@approveJoinRequest)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field approveJoinRequest!')
    end
    unless @createPost.nil? || ::SquareMemberRole::VALID_VALUES.include?(@createPost)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field createPost!')
    end
    unless @createOpenSquareChat.nil? || ::SquareMemberRole::VALID_VALUES.include?(@createOpenSquareChat)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field createOpenSquareChat!')
    end
    unless @deleteSquareChatOrPost.nil? || ::SquareMemberRole::VALID_VALUES.include?(@deleteSquareChatOrPost)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field deleteSquareChatOrPost!')
    end
    unless @removeSquareMember.nil? || ::SquareMemberRole::VALID_VALUES.include?(@removeSquareMember)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field removeSquareMember!')
    end
    unless @grantRole.nil? || ::SquareMemberRole::VALID_VALUES.include?(@grantRole)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field grantRole!')
    end
    unless @enableInvitationTicket.nil? || ::SquareMemberRole::VALID_VALUES.include?(@enableInvitationTicket)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field enableInvitationTicket!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SquarePreference
  include ::Thrift::Struct, ::Thrift::Struct_Union
  FAVORITETIMESTAMP = 1
  NOTIFORNEWJOINREQUEST = 2

  FIELDS = {
    FAVORITETIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'favoriteTimestamp'},
    NOTIFORNEWJOINREQUEST => {:type => ::Thrift::Types::BOOL, :name => 'notiForNewJoinRequest'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareMember
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMEMBERMID = 1
  SQUAREMID = 2
  DISPLAYNAME = 3
  PROFILEIMAGEOBSHASH = 4
  ABLETORECEIVEMESSAGE = 5
  MEMBERSHIPSTATE = 7
  ROLE = 8
  REVISION = 9
  PREFERENCE = 10
  JOINMESSAGE = 11

  FIELDS = {
    SQUAREMEMBERMID => {:type => ::Thrift::Types::STRING, :name => 'squareMemberMid'},
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    PROFILEIMAGEOBSHASH => {:type => ::Thrift::Types::STRING, :name => 'profileImageObsHash'},
    ABLETORECEIVEMESSAGE => {:type => ::Thrift::Types::BOOL, :name => 'ableToReceiveMessage'},
    MEMBERSHIPSTATE => {:type => ::Thrift::Types::I32, :name => 'membershipState', :enum_class => ::SquareMembershipState},
    ROLE => {:type => ::Thrift::Types::I32, :name => 'role', :enum_class => ::SquareMemberRole},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    PREFERENCE => {:type => ::Thrift::Types::STRUCT, :name => 'preference', :class => ::SquarePreference},
    JOINMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'joinMessage'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @membershipState.nil? || ::SquareMembershipState::VALID_VALUES.include?(@membershipState)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field membershipState!')
    end
    unless @role.nil? || ::SquareMemberRole::VALID_VALUES.include?(@role)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field role!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareMemberRelation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  STATE = 1
  REVISION = 2

  FIELDS = {
    STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => ::SquareMemberRelationState},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @state.nil? || ::SquareMemberRelationState::VALID_VALUES.include?(@state)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareFeature
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CONTROLSTATE = 1
  BOOLEANVALUE = 2

  FIELDS = {
    CONTROLSTATE => {:type => ::Thrift::Types::I32, :name => 'controlState', :enum_class => ::SquareFeatureControlState},
    BOOLEANVALUE => {:type => ::Thrift::Types::I32, :name => 'booleanValue', :enum_class => ::BooleanState}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @controlState.nil? || ::SquareFeatureControlState::VALID_VALUES.include?(@controlState)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field controlState!')
    end
    unless @booleanValue.nil? || ::BooleanState::VALID_VALUES.include?(@booleanValue)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field booleanValue!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareFeatureSet
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 1
  REVISION = 2
  CREATINGSECRETSQUARECHAT = 11
  INVITINGINTOOPENSQUARECHAT = 12

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    CREATINGSECRETSQUARECHAT => {:type => ::Thrift::Types::STRUCT, :name => 'creatingSecretSquareChat', :class => ::SquareFeature},
    INVITINGINTOOPENSQUARECHAT => {:type => ::Thrift::Types::STRUCT, :name => 'invitingIntoOpenSquareChat', :class => ::SquareFeature}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareStatus
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MEMBERCOUNT = 1
  JOINREQUESTCOUNT = 2
  LASTJOINREQUESTAT = 3
  OPENCHATCOUNT = 4

  FIELDS = {
    MEMBERCOUNT => {:type => ::Thrift::Types::I32, :name => 'memberCount'},
    JOINREQUESTCOUNT => {:type => ::Thrift::Types::I32, :name => 'joinRequestCount'},
    LASTJOINREQUESTAT => {:type => ::Thrift::Types::I64, :name => 'lastJoinRequestAt'},
    OPENCHATCOUNT => {:type => ::Thrift::Types::I32, :name => 'openChatCount'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareChat
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  SQUAREMID = 2
  TYPE = 3
  NAME = 4
  CHATIMAGEOBSHASH = 5
  SQUARECHATREVISION = 6
  MAXMEMBERCOUNT = 7
  STATE = 8

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::SquareChatType},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    CHATIMAGEOBSHASH => {:type => ::Thrift::Types::STRING, :name => 'chatImageObsHash'},
    SQUARECHATREVISION => {:type => ::Thrift::Types::I64, :name => 'squareChatRevision'},
    MAXMEMBERCOUNT => {:type => ::Thrift::Types::I32, :name => 'maxMemberCount'},
    STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => ::SquareChatState}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::SquareChatType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
    unless @state.nil? || ::SquareChatState::VALID_VALUES.include?(@state)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class NoteStatus
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NOTECOUNT = 1
  LATESTCREATEDAT = 2

  FIELDS = {
    NOTECOUNT => {:type => ::Thrift::Types::I32, :name => 'noteCount'},
    LATESTCREATEDAT => {:type => ::Thrift::Types::I64, :name => 'latestCreatedAt'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARE = 1
  SQUARESTATUS = 2
  SQUARENOTESTATUS = 3

  FIELDS = {
    SQUARE => {:type => ::Thrift::Types::STRUCT, :name => 'square', :class => ::Square},
    SQUARESTATUS => {:type => ::Thrift::Types::STRUCT, :name => 'squareStatus', :class => ::SquareStatus},
    SQUARENOTESTATUS => {:type => ::Thrift::Types::STRUCT, :name => 'squareNoteStatus', :class => ::NoteStatus}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class BotUseInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  BOTUSEAGREEMENTACCEPTED = 1
  BOTINFRIENDS = 2
  PRIMARYAPPLICATION = 3
  LOCALE = 4

  FIELDS = {
    BOTUSEAGREEMENTACCEPTED => {:type => ::Thrift::Types::BOOL, :name => 'botUseAgreementAccepted'},
    BOTINFRIENDS => {:type => ::Thrift::Types::BOOL, :name => 'botInFriends'},
    PRIMARYAPPLICATION => {:type => ::Thrift::Types::STRING, :name => 'primaryApplication'},
    LOCALE => {:type => ::Thrift::Types::STRING, :name => 'locale'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PaidCallAdCountry
  include ::Thrift::Struct, ::Thrift::Struct_Union
  COUNTRYCODE = 1
  RATEDIVISION = 2

  FIELDS = {
    COUNTRYCODE => {:type => ::Thrift::Types::STRING, :name => 'countryCode'},
    RATEDIVISION => {:type => ::Thrift::Types::STRING, :name => 'rateDivision'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PaidCallAdResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ADREMAINS = 1

  FIELDS = {
    ADREMAINS => {:type => ::Thrift::Types::I32, :name => 'adRemains'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PaidCallBalance
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PRODUCTTYPE = 1
  PRODUCTNAME = 2
  UNIT = 3
  LIMITEDPAIDBALANCE = 4
  LIMITEDFREEBALANCE = 5
  UNLIMITEDPAIDBALANCE = 6
  UNLIMITEDFREEBALANCE = 7
  STARTTIME = 8
  ENDTIME = 9
  AUTOPAYENABLED = 10

  FIELDS = {
    PRODUCTTYPE => {:type => ::Thrift::Types::I32, :name => 'productType', :enum_class => ::PaidCallProductType},
    PRODUCTNAME => {:type => ::Thrift::Types::STRING, :name => 'productName'},
    UNIT => {:type => ::Thrift::Types::STRING, :name => 'unit'},
    LIMITEDPAIDBALANCE => {:type => ::Thrift::Types::I32, :name => 'limitedPaidBalance'},
    LIMITEDFREEBALANCE => {:type => ::Thrift::Types::I32, :name => 'limitedFreeBalance'},
    UNLIMITEDPAIDBALANCE => {:type => ::Thrift::Types::I32, :name => 'unlimitedPaidBalance'},
    UNLIMITEDFREEBALANCE => {:type => ::Thrift::Types::I32, :name => 'unlimitedFreeBalance'},
    STARTTIME => {:type => ::Thrift::Types::I64, :name => 'startTime'},
    ENDTIME => {:type => ::Thrift::Types::I64, :name => 'endTime'},
    AUTOPAYENABLED => {:type => ::Thrift::Types::BOOL, :name => 'autopayEnabled'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @productType.nil? || ::PaidCallProductType::VALID_VALUES.include?(@productType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field productType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class PaidCallCurrencyExchangeRate
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CURRENCYCODE = 1
  CURRENCYNAME = 2
  CURRENCYSIGN = 3
  PREFERRED = 4
  COINRATE = 5
  CREDITRATE = 6

  FIELDS = {
    CURRENCYCODE => {:type => ::Thrift::Types::STRING, :name => 'currencyCode'},
    CURRENCYNAME => {:type => ::Thrift::Types::STRING, :name => 'currencyName'},
    CURRENCYSIGN => {:type => ::Thrift::Types::STRING, :name => 'currencySign'},
    PREFERRED => {:type => ::Thrift::Types::BOOL, :name => 'preferred'},
    COINRATE => {:type => ::Thrift::Types::STRING, :name => 'coinRate'},
    CREDITRATE => {:type => ::Thrift::Types::STRING, :name => 'creditRate'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ExtendedProfileBirthday
  include ::Thrift::Struct, ::Thrift::Struct_Union
  YEAR = 1
  YEARPRIVACYLEVELTYPE = 2
  YEARENABLED = 3
  DAY = 5
  DAYPRIVACYLEVELTYPE = 6
  DAYENABLED = 7

  FIELDS = {
    YEAR => {:type => ::Thrift::Types::STRING, :name => 'year'},
    YEARPRIVACYLEVELTYPE => {:type => ::Thrift::Types::I32, :name => 'yearPrivacyLevelType', :enum_class => ::PrivacyLevelType},
    YEARENABLED => {:type => ::Thrift::Types::BOOL, :name => 'yearEnabled'},
    DAY => {:type => ::Thrift::Types::STRING, :name => 'day'},
    DAYPRIVACYLEVELTYPE => {:type => ::Thrift::Types::I32, :name => 'dayPrivacyLevelType', :enum_class => ::PrivacyLevelType},
    DAYENABLED => {:type => ::Thrift::Types::BOOL, :name => 'dayEnabled'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @yearPrivacyLevelType.nil? || ::PrivacyLevelType::VALID_VALUES.include?(@yearPrivacyLevelType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field yearPrivacyLevelType!')
    end
    unless @dayPrivacyLevelType.nil? || ::PrivacyLevelType::VALID_VALUES.include?(@dayPrivacyLevelType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field dayPrivacyLevelType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ExtendedProfile
  include ::Thrift::Struct, ::Thrift::Struct_Union
  BIRTHDAY = 1

  FIELDS = {
    BIRTHDAY => {:type => ::Thrift::Types::STRUCT, :name => 'birthday', :class => ::ExtendedProfileBirthday}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PaidCallDialing
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TYPE = 1
  DIALEDNUMBER = 2
  SERVICEDOMAIN = 3
  PRODUCTTYPE = 4
  PRODUCTNAME = 5
  MULTIPLEPRODUCT = 6
  CALLERIDSTATUS = 7
  BALANCE = 10
  UNIT = 11
  RATE = 12
  DISPLAYCODE = 13
  CALLEDNUMBER = 14
  CALLEENATIONALNUMBER = 15
  CALLEECALLINGCODE = 16
  RATEDIVISION = 17
  ADMAXMIN = 20
  ADREMAINS = 21
  ADSESSIONID = 22

  FIELDS = {
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::PaidCallType},
    DIALEDNUMBER => {:type => ::Thrift::Types::STRING, :name => 'dialedNumber'},
    SERVICEDOMAIN => {:type => ::Thrift::Types::STRING, :name => 'serviceDomain'},
    PRODUCTTYPE => {:type => ::Thrift::Types::I32, :name => 'productType', :enum_class => ::PaidCallProductType},
    PRODUCTNAME => {:type => ::Thrift::Types::STRING, :name => 'productName'},
    MULTIPLEPRODUCT => {:type => ::Thrift::Types::BOOL, :name => 'multipleProduct'},
    CALLERIDSTATUS => {:type => ::Thrift::Types::I32, :name => 'callerIdStatus', :enum_class => ::PaidCallerIdStatus},
    BALANCE => {:type => ::Thrift::Types::I32, :name => 'balance'},
    UNIT => {:type => ::Thrift::Types::STRING, :name => 'unit'},
    RATE => {:type => ::Thrift::Types::I32, :name => 'rate'},
    DISPLAYCODE => {:type => ::Thrift::Types::STRING, :name => 'displayCode'},
    CALLEDNUMBER => {:type => ::Thrift::Types::STRING, :name => 'calledNumber'},
    CALLEENATIONALNUMBER => {:type => ::Thrift::Types::STRING, :name => 'calleeNationalNumber'},
    CALLEECALLINGCODE => {:type => ::Thrift::Types::STRING, :name => 'calleeCallingCode'},
    RATEDIVISION => {:type => ::Thrift::Types::STRING, :name => 'rateDivision'},
    ADMAXMIN => {:type => ::Thrift::Types::I32, :name => 'adMaxMin'},
    ADREMAINS => {:type => ::Thrift::Types::I32, :name => 'adRemains'},
    ADSESSIONID => {:type => ::Thrift::Types::STRING, :name => 'adSessionId'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::PaidCallType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
    unless @productType.nil? || ::PaidCallProductType::VALID_VALUES.include?(@productType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field productType!')
    end
    unless @callerIdStatus.nil? || ::PaidCallerIdStatus::VALID_VALUES.include?(@callerIdStatus)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field callerIdStatus!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SpotItem
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NAME = 2
  PHONE = 3
  CATEGORY = 4
  MID = 5
  COUNTRYAREACODE = 6
  FREEPHONECALLABLE = 10

  FIELDS = {
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    PHONE => {:type => ::Thrift::Types::STRING, :name => 'phone'},
    CATEGORY => {:type => ::Thrift::Types::I32, :name => 'category', :enum_class => ::SpotCategory},
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    COUNTRYAREACODE => {:type => ::Thrift::Types::STRING, :name => 'countryAreaCode'},
    FREEPHONECALLABLE => {:type => ::Thrift::Types::BOOL, :name => 'freePhoneCallable'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @category.nil? || ::SpotCategory::VALID_VALUES.include?(@category)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field category!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SpotNearbyItem
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SPOTITEM = 2
  LOCATION = 11

  FIELDS = {
    SPOTITEM => {:type => ::Thrift::Types::STRUCT, :name => 'spotItem', :class => ::SpotItem},
    LOCATION => {:type => ::Thrift::Types::STRUCT, :name => 'location', :class => ::Location}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SpotNearbyResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SPOTNEARBYITEMS = 1

  FIELDS = {
    SPOTNEARBYITEMS => {:type => ::Thrift::Types::LIST, :name => 'spotNearbyItems', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SpotNearbyItem}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SpotPhoneNumberResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SPOTITEMS = 1

  FIELDS = {
    SPOTITEMS => {:type => ::Thrift::Types::LIST, :name => 'spotItems', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SpotItem}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PaidCallHistory
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SEQ = 1
  TYPE = 2
  DIALEDNUMBER = 3
  CALLEDNUMBER = 4
  TOMID = 5
  TONAME = 6
  SETUPTIME = 7
  STARTTIME = 8
  ENDTIME = 9
  DURATION = 10
  TERMINATE = 11
  PRODUCTTYPE = 12
  CHARGE = 13
  UNIT = 14
  RESULT = 15

  FIELDS = {
    SEQ => {:type => ::Thrift::Types::I64, :name => 'seq'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::PaidCallType},
    DIALEDNUMBER => {:type => ::Thrift::Types::STRING, :name => 'dialedNumber'},
    CALLEDNUMBER => {:type => ::Thrift::Types::STRING, :name => 'calledNumber'},
    TOMID => {:type => ::Thrift::Types::STRING, :name => 'toMid'},
    TONAME => {:type => ::Thrift::Types::STRING, :name => 'toName'},
    SETUPTIME => {:type => ::Thrift::Types::I64, :name => 'setupTime'},
    STARTTIME => {:type => ::Thrift::Types::I64, :name => 'startTime'},
    ENDTIME => {:type => ::Thrift::Types::I64, :name => 'endTime'},
    DURATION => {:type => ::Thrift::Types::I64, :name => 'duration'},
    TERMINATE => {:type => ::Thrift::Types::I32, :name => 'terminate'},
    PRODUCTTYPE => {:type => ::Thrift::Types::I32, :name => 'productType', :enum_class => ::PaidCallProductType},
    CHARGE => {:type => ::Thrift::Types::I32, :name => 'charge'},
    UNIT => {:type => ::Thrift::Types::STRING, :name => 'unit'},
    RESULT => {:type => ::Thrift::Types::STRING, :name => 'result'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::PaidCallType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
    unless @productType.nil? || ::PaidCallProductType::VALID_VALUES.include?(@productType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field productType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class PaidCallHistoryResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HISTORYS = 1
  HASNEXT = 2

  FIELDS = {
    HISTORYS => {:type => ::Thrift::Types::LIST, :name => 'historys', :element => {:type => ::Thrift::Types::STRUCT, :class => ::PaidCallHistory}},
    HASNEXT => {:type => ::Thrift::Types::BOOL, :name => 'hasNext'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PaidCallMetadataResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CURRENCYEXCHANGERATES = 1
  RECOMMENDEDCOUNTRYCODES = 2
  ADCOUNTRIES = 3

  FIELDS = {
    CURRENCYEXCHANGERATES => {:type => ::Thrift::Types::LIST, :name => 'currencyExchangeRates', :element => {:type => ::Thrift::Types::STRUCT, :class => ::PaidCallCurrencyExchangeRate}},
    RECOMMENDEDCOUNTRYCODES => {:type => ::Thrift::Types::LIST, :name => 'recommendedCountryCodes', :element => {:type => ::Thrift::Types::STRING}},
    ADCOUNTRIES => {:type => ::Thrift::Types::LIST, :name => 'adCountries', :element => {:type => ::Thrift::Types::STRUCT, :class => ::PaidCallAdCountry}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PaidCallRedeemResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  EVENTNAME = 1
  EVENTAMOUNT = 2

  FIELDS = {
    EVENTNAME => {:type => ::Thrift::Types::STRING, :name => 'eventName'},
    EVENTAMOUNT => {:type => ::Thrift::Types::I32, :name => 'eventAmount'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PaidCallResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HOST = 1
  DIALING = 2
  TOKEN = 3
  SPOTITEMS = 4

  FIELDS = {
    HOST => {:type => ::Thrift::Types::STRUCT, :name => 'host', :class => ::CallHost},
    DIALING => {:type => ::Thrift::Types::STRUCT, :name => 'dialing', :class => ::PaidCallDialing},
    TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
    SPOTITEMS => {:type => ::Thrift::Types::LIST, :name => 'spotItems', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SpotItem}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PaidCallUserRate
  include ::Thrift::Struct, ::Thrift::Struct_Union
  COUNTRYCODE = 1
  RATE = 2
  RATEDIVISION = 3
  RATENAME = 4

  FIELDS = {
    COUNTRYCODE => {:type => ::Thrift::Types::STRING, :name => 'countryCode'},
    RATE => {:type => ::Thrift::Types::I32, :name => 'rate'},
    RATEDIVISION => {:type => ::Thrift::Types::STRING, :name => 'rateDivision'},
    RATENAME => {:type => ::Thrift::Types::STRING, :name => 'rateName'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELID = 1
  NAME = 3
  ENTRYPAGEURL = 4
  DESCRIPTIONTEXT = 5
  PROVIDER = 6
  PUBLICTYPE = 7
  ICONIMAGE = 8
  PERMISSIONS = 9
  ICONTHUMBNAILIMAGE = 11
  CHANNELCONFIGURATIONS = 12
  LCSALLAPIUSABLE = 13
  ALLOWEDPERMISSIONS = 14
  CHANNELDOMAINS = 15
  UPDATEDTIMESTAMP = 16

  FIELDS = {
    CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    ENTRYPAGEURL => {:type => ::Thrift::Types::STRING, :name => 'entryPageUrl'},
    DESCRIPTIONTEXT => {:type => ::Thrift::Types::STRING, :name => 'descriptionText'},
    PROVIDER => {:type => ::Thrift::Types::STRUCT, :name => 'provider', :class => ::ChannelProvider},
    PUBLICTYPE => {:type => ::Thrift::Types::I32, :name => 'publicType', :enum_class => ::PublicType},
    ICONIMAGE => {:type => ::Thrift::Types::STRING, :name => 'iconImage'},
    PERMISSIONS => {:type => ::Thrift::Types::LIST, :name => 'permissions', :element => {:type => ::Thrift::Types::STRING}},
    ICONTHUMBNAILIMAGE => {:type => ::Thrift::Types::STRING, :name => 'iconThumbnailImage'},
    CHANNELCONFIGURATIONS => {:type => ::Thrift::Types::LIST, :name => 'channelConfigurations', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ChannelConfiguration}},
    LCSALLAPIUSABLE => {:type => ::Thrift::Types::BOOL, :name => 'lcsAllApiUsable'},
    ALLOWEDPERMISSIONS => {:type => ::Thrift::Types::SET, :name => 'allowedPermissions', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ChannelPermission}},
    CHANNELDOMAINS => {:type => ::Thrift::Types::LIST, :name => 'channelDomains', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ChannelDomain}},
    UPDATEDTIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'updatedTimestamp'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @publicType.nil? || ::PublicType::VALID_VALUES.include?(@publicType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field publicType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ApprovedChannelInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELINFO = 1
  APPROVEDAT = 2

  FIELDS = {
    CHANNELINFO => {:type => ::Thrift::Types::STRUCT, :name => 'channelInfo', :class => ::ChannelInfo},
    APPROVEDAT => {:type => ::Thrift::Types::I64, :name => 'approvedAt'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ApprovedChannelInfos
  include ::Thrift::Struct, ::Thrift::Struct_Union
  APPROVEDCHANNELINFOS = 1
  REVISION = 2

  FIELDS = {
    APPROVEDCHANNELINFOS => {:type => ::Thrift::Types::LIST, :name => 'approvedChannelInfos', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ApprovedChannelInfo}},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class AuthQrcode
  include ::Thrift::Struct, ::Thrift::Struct_Union
  QRCODE = 1
  VERIFIER = 2
  CALLBACKURL = 3

  FIELDS = {
    QRCODE => {:type => ::Thrift::Types::STRING, :name => 'qrcode'},
    VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'},
    CALLBACKURL => {:type => ::Thrift::Types::STRING, :name => 'callbackUrl'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class AnalyticsInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  GASAMPLINGRATE = 1
  TMID = 2

  FIELDS = {
    GASAMPLINGRATE => {:type => ::Thrift::Types::DOUBLE, :name => 'gaSamplingRate'},
    TMID => {:type => ::Thrift::Types::STRING, :name => 'tmid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ContactTransition
  include ::Thrift::Struct, ::Thrift::Struct_Union
  OWNERMID = 1
  TARGETMID = 2
  PREVIOUSSTATUS = 3
  RESULTSTATUS = 4

  FIELDS = {
    OWNERMID => {:type => ::Thrift::Types::STRING, :name => 'ownerMid'},
    TARGETMID => {:type => ::Thrift::Types::STRING, :name => 'targetMid'},
    PREVIOUSSTATUS => {:type => ::Thrift::Types::I32, :name => 'previousStatus', :enum_class => ::ContactStatus},
    RESULTSTATUS => {:type => ::Thrift::Types::I32, :name => 'resultStatus', :enum_class => ::ContactStatus}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @previousStatus.nil? || ::ContactStatus::VALID_VALUES.include?(@previousStatus)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field previousStatus!')
    end
    unless @resultStatus.nil? || ::ContactStatus::VALID_VALUES.include?(@resultStatus)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field resultStatus!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class UserTicketResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  USERTICKET = 2

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    USERTICKET => {:type => ::Thrift::Types::STRING, :name => 'userTicket'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class BuddyBanner
  include ::Thrift::Struct, ::Thrift::Struct_Union
  BUDDYBANNERLINKTYPE = 1
  BUDDYBANNERLINK = 2
  BUDDYBANNERIMAGEURL = 3

  FIELDS = {
    BUDDYBANNERLINKTYPE => {:type => ::Thrift::Types::I32, :name => 'buddyBannerLinkType', :enum_class => ::BuddyBannerLinkType},
    BUDDYBANNERLINK => {:type => ::Thrift::Types::STRING, :name => 'buddyBannerLink'},
    BUDDYBANNERIMAGEURL => {:type => ::Thrift::Types::STRING, :name => 'buddyBannerImageUrl'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @buddyBannerLinkType.nil? || ::BuddyBannerLinkType::VALID_VALUES.include?(@buddyBannerLinkType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field buddyBannerLinkType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class BuddyDetail
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  MEMBERCOUNT = 2
  ONAIR = 3
  BUSINESSACCOUNT = 4
  ADDABLE = 5
  ACCEPTABLECONTENTTYPES = 6
  CAPABLEMYHOME = 7

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    MEMBERCOUNT => {:type => ::Thrift::Types::I64, :name => 'memberCount'},
    ONAIR => {:type => ::Thrift::Types::BOOL, :name => 'onAir'},
    BUSINESSACCOUNT => {:type => ::Thrift::Types::BOOL, :name => 'businessAccount'},
    ADDABLE => {:type => ::Thrift::Types::BOOL, :name => 'addable'},
    ACCEPTABLECONTENTTYPES => {:type => ::Thrift::Types::SET, :name => 'acceptableContentTypes', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ContentType}},
    CAPABLEMYHOME => {:type => ::Thrift::Types::BOOL, :name => 'capableMyhome'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Contact
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  CREATEDTIME = 2
  TYPE = 10
  STATUS = 11
  RELATION = 21
  DISPLAYNAME = 22
  PHONETICNAME = 23
  PICTURESTATUS = 24
  THUMBNAILURL = 25
  STATUSMESSAGE = 26
  DISPLAYNAMEOVERRIDDEN = 27
  FAVORITETIME = 28
  CAPABLEVOICECALL = 31
  CAPABLEVIDEOCALL = 32
  CAPABLEMYHOME = 33
  CAPABLEBUDDY = 34
  ATTRIBUTES = 35
  SETTINGS = 36
  PICTUREPATH = 37
  RECOMMENDPARAMS = 38
  FRIENDREQUESTSTATUS = 39
  MUSICPROFILE = 40
  VIDEOPROFILE = 42

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::ContactType},
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::ContactStatus},
    RELATION => {:type => ::Thrift::Types::I32, :name => 'relation', :enum_class => ::ContactRelation},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    PHONETICNAME => {:type => ::Thrift::Types::STRING, :name => 'phoneticName'},
    PICTURESTATUS => {:type => ::Thrift::Types::STRING, :name => 'pictureStatus'},
    THUMBNAILURL => {:type => ::Thrift::Types::STRING, :name => 'thumbnailUrl'},
    STATUSMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'statusMessage'},
    DISPLAYNAMEOVERRIDDEN => {:type => ::Thrift::Types::STRING, :name => 'displayNameOverridden'},
    FAVORITETIME => {:type => ::Thrift::Types::I64, :name => 'favoriteTime'},
    CAPABLEVOICECALL => {:type => ::Thrift::Types::BOOL, :name => 'capableVoiceCall'},
    CAPABLEVIDEOCALL => {:type => ::Thrift::Types::BOOL, :name => 'capableVideoCall'},
    CAPABLEMYHOME => {:type => ::Thrift::Types::BOOL, :name => 'capableMyhome'},
    CAPABLEBUDDY => {:type => ::Thrift::Types::BOOL, :name => 'capableBuddy'},
    ATTRIBUTES => {:type => ::Thrift::Types::I32, :name => 'attributes'},
    SETTINGS => {:type => ::Thrift::Types::I64, :name => 'settings'},
    PICTUREPATH => {:type => ::Thrift::Types::STRING, :name => 'picturePath'},
    RECOMMENDPARAMS => {:type => ::Thrift::Types::STRING, :name => 'recommendParams'},
    FRIENDREQUESTSTATUS => {:type => ::Thrift::Types::I32, :name => 'friendRequestStatus', :enum_class => ::FriendRequestStatus},
    MUSICPROFILE => {:type => ::Thrift::Types::STRING, :name => 'musicProfile'},
    VIDEOPROFILE => {:type => ::Thrift::Types::STRING, :name => 'videoProfile'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::ContactType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
    unless @status.nil? || ::ContactStatus::VALID_VALUES.include?(@status)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
    end
    unless @relation.nil? || ::ContactRelation::VALID_VALUES.include?(@relation)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field relation!')
    end
    unless @friendRequestStatus.nil? || ::FriendRequestStatus::VALID_VALUES.include?(@friendRequestStatus)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field friendRequestStatus!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class BuddyList
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CLASSIFICATION = 1
  DISPLAYNAME = 2
  TOTALBUDDYCOUNT = 3
  POPULARCONTACTS = 4

  FIELDS = {
    CLASSIFICATION => {:type => ::Thrift::Types::STRING, :name => 'classification'},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    TOTALBUDDYCOUNT => {:type => ::Thrift::Types::I32, :name => 'totalBuddyCount'},
    POPULARCONTACTS => {:type => ::Thrift::Types::LIST, :name => 'popularContacts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class RegisterWithPhoneNumberResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  AUTHTOKEN = 1
  RECOMMENDEMAILREGISTRATION = 2
  CERTIFICATE = 3

  FIELDS = {
    AUTHTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authToken'},
    RECOMMENDEMAILREGISTRATION => {:type => ::Thrift::Types::BOOL, :name => 'recommendEmailRegistration'},
    CERTIFICATE => {:type => ::Thrift::Types::STRING, :name => 'certificate'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class BuddyMessageRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CONTENTTYPE = 1
  TEXT = 2
  LOCATION = 3
  CONTENT = 4
  CONTENTMETADATA = 5

  FIELDS = {
    CONTENTTYPE => {:type => ::Thrift::Types::I32, :name => 'contentType', :enum_class => ::ContentType},
    TEXT => {:type => ::Thrift::Types::STRING, :name => 'text'},
    LOCATION => {:type => ::Thrift::Types::STRUCT, :name => 'location', :class => ::Location},
    CONTENT => {:type => ::Thrift::Types::STRING, :name => 'content', :binary => true},
    CONTENTMETADATA => {:type => ::Thrift::Types::MAP, :name => 'contentMetadata', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @contentType.nil? || ::ContentType::VALID_VALUES.include?(@contentType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field contentType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class BuddyOnAirUrls
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HLS = 1
  SMOOTHSTREAMING = 2

  FIELDS = {
    HLS => {:type => ::Thrift::Types::MAP, :name => 'hls', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
    SMOOTHSTREAMING => {:type => ::Thrift::Types::MAP, :name => 'smoothStreaming', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class BuddyOnAir
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  FRESHNESSLIFETIME = 3
  ONAIRID = 4
  ONAIR = 5
  TEXT = 11
  VIEWERCOUNT = 12
  TARGETCOUNT = 13
  ONAIRTYPE = 31
  ONAIRURLS = 32

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    FRESHNESSLIFETIME => {:type => ::Thrift::Types::I64, :name => 'freshnessLifetime'},
    ONAIRID => {:type => ::Thrift::Types::STRING, :name => 'onAirId'},
    ONAIR => {:type => ::Thrift::Types::BOOL, :name => 'onAir'},
    TEXT => {:type => ::Thrift::Types::STRING, :name => 'text'},
    VIEWERCOUNT => {:type => ::Thrift::Types::I64, :name => 'viewerCount'},
    TARGETCOUNT => {:type => ::Thrift::Types::I64, :name => 'targetCount'},
    ONAIRTYPE => {:type => ::Thrift::Types::I32, :name => 'onAirType', :enum_class => ::BuddyOnAirType},
    ONAIRURLS => {:type => ::Thrift::Types::STRUCT, :name => 'onAirUrls', :class => ::BuddyOnAirUrls}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @onAirType.nil? || ::BuddyOnAirType::VALID_VALUES.include?(@onAirType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field onAirType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class BuddyProfile
  include ::Thrift::Struct, ::Thrift::Struct_Union
  BUDDYID = 1
  MID = 2
  SEARCHID = 3
  DISPLAYNAME = 4
  STATUSMESSAGE = 5
  CONTACTCOUNT = 11

  FIELDS = {
    BUDDYID => {:type => ::Thrift::Types::STRING, :name => 'buddyId'},
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    SEARCHID => {:type => ::Thrift::Types::STRING, :name => 'searchId'},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    STATUSMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'statusMessage'},
    CONTACTCOUNT => {:type => ::Thrift::Types::I64, :name => 'contactCount'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CommitMessageResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MESSAGE = 1
  CODE = 2
  REASON = 3
  SUCCESSCOUNT = 4
  FAILCOUNT = 5
  UNREGISTERCOUNT = 6
  BLOCKCOUNT = 7

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::Message},
    CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::CommitMessageResultCode},
    REASON => {:type => ::Thrift::Types::STRING, :name => 'reason'},
    SUCCESSCOUNT => {:type => ::Thrift::Types::I64, :name => 'successCount'},
    FAILCOUNT => {:type => ::Thrift::Types::I64, :name => 'failCount'},
    UNREGISTERCOUNT => {:type => ::Thrift::Types::I64, :name => 'unregisterCount'},
    BLOCKCOUNT => {:type => ::Thrift::Types::I64, :name => 'blockCount'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @code.nil? || ::CommitMessageResultCode::VALID_VALUES.include?(@code)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class BuddySearchResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  DISPLAYNAME = 2
  PICTURESTATUS = 3
  PICTUREPATH = 4
  STATUSMESSAGE = 5
  BUSINESSACCOUNT = 6

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    PICTURESTATUS => {:type => ::Thrift::Types::STRING, :name => 'pictureStatus'},
    PICTUREPATH => {:type => ::Thrift::Types::STRING, :name => 'picturePath'},
    STATUSMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'statusMessage'},
    BUSINESSACCOUNT => {:type => ::Thrift::Types::BOOL, :name => 'businessAccount'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SyncParamMid
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  DIFF = 2
  REVISION = 3

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    DIFF => {:type => ::Thrift::Types::I32, :name => 'diff', :enum_class => ::Diff},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @diff.nil? || ::Diff::VALID_VALUES.include?(@diff)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field diff!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SIMInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PHONENUMBER = 1
  COUNTRYCODE = 2

  FIELDS = {
    PHONENUMBER => {:type => ::Thrift::Types::STRING, :name => 'phoneNumber'},
    COUNTRYCODE => {:type => ::Thrift::Types::STRING, :name => 'countryCode'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SyncParamContact
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SYNCPARAMMID = 1
  CONTACTSTATUS = 2

  FIELDS = {
    SYNCPARAMMID => {:type => ::Thrift::Types::STRUCT, :name => 'syncParamMid', :class => ::SyncParamMid},
    CONTACTSTATUS => {:type => ::Thrift::Types::I32, :name => 'contactStatus', :enum_class => ::ContactStatus}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @contactStatus.nil? || ::ContactStatus::VALID_VALUES.include?(@contactStatus)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field contactStatus!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelDomains
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELDOMAINS = 1
  REVISION = 2

  FIELDS = {
    CHANNELDOMAINS => {:type => ::Thrift::Types::LIST, :name => 'channelDomains', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ChannelDomain}},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ProductCategory
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PRODUCTCATEGORYID = 1
  TITLE = 2
  PRODUCTCOUNT = 3
  NEWFLAG = 4

  FIELDS = {
    PRODUCTCATEGORYID => {:type => ::Thrift::Types::I64, :name => 'productCategoryId'},
    TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
    PRODUCTCOUNT => {:type => ::Thrift::Types::I32, :name => 'productCount'},
    NEWFLAG => {:type => ::Thrift::Types::BOOL, :name => 'newFlag'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelInfos
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELINFOS = 1
  REVISION = 2

  FIELDS = {
    CHANNELINFOS => {:type => ::Thrift::Types::LIST, :name => 'channelInfos', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ChannelInfo}},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelNotificationSetting
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELID = 1
  NAME = 2
  NOTIFICATIONRECEIVABLE = 3
  MESSAGERECEIVABLE = 4
  SHOWDEFAULT = 5

  FIELDS = {
    CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    NOTIFICATIONRECEIVABLE => {:type => ::Thrift::Types::BOOL, :name => 'notificationReceivable'},
    MESSAGERECEIVABLE => {:type => ::Thrift::Types::BOOL, :name => 'messageReceivable'},
    SHOWDEFAULT => {:type => ::Thrift::Types::BOOL, :name => 'showDefault'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelSyncDatas
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELINFOS = 1
  CHANNELDOMAINS = 2
  REVISION = 3
  EXPIRES = 4

  FIELDS = {
    CHANNELINFOS => {:type => ::Thrift::Types::LIST, :name => 'channelInfos', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ChannelInfo}},
    CHANNELDOMAINS => {:type => ::Thrift::Types::LIST, :name => 'channelDomains', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ChannelDomain}},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    EXPIRES => {:type => ::Thrift::Types::I64, :name => 'expires'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class NotiCenterEventData
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  TO = 2
  FROM_ = 3
  TOCHANNEL = 4
  FROMCHANNEL = 5
  EVENTTYPE = 6
  CREATEDTIME = 7
  OPERATIONREVISION = 8
  CONTENT = 9
  PUSH = 10

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    TO => {:type => ::Thrift::Types::STRING, :name => 'to'},
    FROM_ => {:type => ::Thrift::Types::STRING, :name => 'from_'},
    TOCHANNEL => {:type => ::Thrift::Types::STRING, :name => 'toChannel'},
    FROMCHANNEL => {:type => ::Thrift::Types::STRING, :name => 'fromChannel'},
    EVENTTYPE => {:type => ::Thrift::Types::STRING, :name => 'eventType'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    OPERATIONREVISION => {:type => ::Thrift::Types::I64, :name => 'operationRevision'},
    CONTENT => {:type => ::Thrift::Types::MAP, :name => 'content', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
    PUSH => {:type => ::Thrift::Types::MAP, :name => 'push', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelToken
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TOKEN = 1
  OBSTOKEN = 2
  EXPIRATION = 3
  REFRESHTOKEN = 4
  CHANNELACCESSTOKEN = 5

  FIELDS = {
    TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
    OBSTOKEN => {:type => ::Thrift::Types::STRING, :name => 'obsToken'},
    EXPIRATION => {:type => ::Thrift::Types::I64, :name => 'expiration'},
    REFRESHTOKEN => {:type => ::Thrift::Types::STRING, :name => 'refreshToken'},
    CHANNELACCESSTOKEN => {:type => ::Thrift::Types::STRING, :name => 'channelAccessToken'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelSettings
  include ::Thrift::Struct, ::Thrift::Struct_Union
  UNAPPROVEDMESSAGERECEIVABLE = 1

  FIELDS = {
    UNAPPROVEDMESSAGERECEIVABLE => {:type => ::Thrift::Types::BOOL, :name => 'unapprovedMessageReceivable'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelIdWithLastUpdated
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELID = 1
  LASTUPDATED = 2

  FIELDS = {
    CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
    LASTUPDATED => {:type => ::Thrift::Types::I64, :name => 'lastUpdated'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Coin
  include ::Thrift::Struct, ::Thrift::Struct_Union
  FREECOINBALANCE = 1
  PAYEDCOINBALANCE = 2
  TOTALCOINBALANCE = 3
  REWARDCOINBALANCE = 4

  FIELDS = {
    FREECOINBALANCE => {:type => ::Thrift::Types::I32, :name => 'freeCoinBalance'},
    PAYEDCOINBALANCE => {:type => ::Thrift::Types::I32, :name => 'payedCoinBalance'},
    TOTALCOINBALANCE => {:type => ::Thrift::Types::I32, :name => 'totalCoinBalance'},
    REWARDCOINBALANCE => {:type => ::Thrift::Types::I32, :name => 'rewardCoinBalance'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinPayLoad
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PAYCOIN = 1
  FREECOIN = 2
  TYPE = 3
  REWARDCOIN = 4

  FIELDS = {
    PAYCOIN => {:type => ::Thrift::Types::I32, :name => 'payCoin'},
    FREECOIN => {:type => ::Thrift::Types::I32, :name => 'freeCoin'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::PayloadType},
    REWARDCOIN => {:type => ::Thrift::Types::I32, :name => 'rewardCoin'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::PayloadType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinHistory
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PAYDATE = 1
  COINBALANCE = 2
  COIN = 3
  PRICE = 4
  TITLE = 5
  REFUND = 6
  PAYSEQ = 7
  CURRENCY = 8
  CURRENCYSIGN = 9
  DISPLAYPRICE = 10
  PAYLOAD = 11
  CHANNELID = 12

  FIELDS = {
    PAYDATE => {:type => ::Thrift::Types::I64, :name => 'payDate'},
    COINBALANCE => {:type => ::Thrift::Types::I32, :name => 'coinBalance'},
    COIN => {:type => ::Thrift::Types::I32, :name => 'coin'},
    PRICE => {:type => ::Thrift::Types::STRING, :name => 'price'},
    TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
    REFUND => {:type => ::Thrift::Types::BOOL, :name => 'refund'},
    PAYSEQ => {:type => ::Thrift::Types::STRING, :name => 'paySeq'},
    CURRENCY => {:type => ::Thrift::Types::STRING, :name => 'currency'},
    CURRENCYSIGN => {:type => ::Thrift::Types::STRING, :name => 'currencySign'},
    DISPLAYPRICE => {:type => ::Thrift::Types::STRING, :name => 'displayPrice'},
    PAYLOAD => {:type => ::Thrift::Types::STRUCT, :name => 'payload', :class => ::CoinPayLoad},
    CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinHistoryCondition
  include ::Thrift::Struct, ::Thrift::Struct_Union
  START = 1
  SIZE = 2
  LANGUAGE = 3
  EDDT = 4
  APPSTORECODE = 5

  FIELDS = {
    START => {:type => ::Thrift::Types::I64, :name => 'start'},
    SIZE => {:type => ::Thrift::Types::I32, :name => 'size'},
    LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
    EDDT => {:type => ::Thrift::Types::STRING, :name => 'eddt'},
    APPSTORECODE => {:type => ::Thrift::Types::I32, :name => 'appStoreCode', :enum_class => ::PaymentType}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @appStoreCode.nil? || ::PaymentType::VALID_VALUES.include?(@appStoreCode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field appStoreCode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinHistoryResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HISTORYS = 1
  BALANCE = 2
  HASNEXT = 3

  FIELDS = {
    HISTORYS => {:type => ::Thrift::Types::LIST, :name => 'historys', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CoinHistory}},
    BALANCE => {:type => ::Thrift::Types::STRUCT, :name => 'balance', :class => ::Coin},
    HASNEXT => {:type => ::Thrift::Types::BOOL, :name => 'hasNext'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinProductItem
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ITEMID = 1
  COIN = 2
  FREECOIN = 3
  CURRENCY = 5
  PRICE = 6
  DISPLAYPRICE = 7
  NAME = 8
  DESC = 9

  FIELDS = {
    ITEMID => {:type => ::Thrift::Types::STRING, :name => 'itemId'},
    COIN => {:type => ::Thrift::Types::I32, :name => 'coin'},
    FREECOIN => {:type => ::Thrift::Types::I32, :name => 'freeCoin'},
    CURRENCY => {:type => ::Thrift::Types::STRING, :name => 'currency'},
    PRICE => {:type => ::Thrift::Types::STRING, :name => 'price'},
    DISPLAYPRICE => {:type => ::Thrift::Types::STRING, :name => 'displayPrice'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    DESC => {:type => ::Thrift::Types::STRING, :name => 'desc'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinPurchaseConfirm
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ORDERID = 1
  APPSTORECODE = 2
  RECEIPT = 3
  SIGNATURE = 4
  SELLER = 5
  REQUESTTYPE = 6
  IGNORERECEIPT = 7

  FIELDS = {
    ORDERID => {:type => ::Thrift::Types::STRING, :name => 'orderId'},
    APPSTORECODE => {:type => ::Thrift::Types::I32, :name => 'appStoreCode', :enum_class => ::PaymentType},
    RECEIPT => {:type => ::Thrift::Types::STRING, :name => 'receipt'},
    SIGNATURE => {:type => ::Thrift::Types::STRING, :name => 'signature'},
    SELLER => {:type => ::Thrift::Types::STRING, :name => 'seller'},
    REQUESTTYPE => {:type => ::Thrift::Types::STRING, :name => 'requestType'},
    IGNORERECEIPT => {:type => ::Thrift::Types::BOOL, :name => 'ignoreReceipt'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @appStoreCode.nil? || ::PaymentType::VALID_VALUES.include?(@appStoreCode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field appStoreCode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinPurchaseReservation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PRODUCTID = 1
  COUNTRY = 2
  CURRENCY = 3
  PRICE = 4
  APPSTORECODE = 5
  LANGUAGE = 6
  PGCODE = 7
  REDIRECTURL = 8

  FIELDS = {
    PRODUCTID => {:type => ::Thrift::Types::STRING, :name => 'productId'},
    COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'},
    CURRENCY => {:type => ::Thrift::Types::STRING, :name => 'currency'},
    PRICE => {:type => ::Thrift::Types::STRING, :name => 'price'},
    APPSTORECODE => {:type => ::Thrift::Types::I32, :name => 'appStoreCode', :enum_class => ::PaymentType},
    LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
    PGCODE => {:type => ::Thrift::Types::I32, :name => 'pgCode', :enum_class => ::PaymentPgType},
    REDIRECTURL => {:type => ::Thrift::Types::STRING, :name => 'redirectUrl'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @appStoreCode.nil? || ::PaymentType::VALID_VALUES.include?(@appStoreCode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field appStoreCode!')
    end
    unless @pgCode.nil? || ::PaymentPgType::VALID_VALUES.include?(@pgCode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field pgCode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinUseReservationItem
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ITEMID = 1
  ITEMNAME = 2
  AMOUNT = 3

  FIELDS = {
    ITEMID => {:type => ::Thrift::Types::STRING, :name => 'itemId'},
    ITEMNAME => {:type => ::Thrift::Types::STRING, :name => 'itemName'},
    AMOUNT => {:type => ::Thrift::Types::I32, :name => 'amount'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinUseReservation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELID = 1
  SHOPORDERID = 2
  APPSTORECODE = 3
  ITEMS = 4
  COUNTRY = 5

  FIELDS = {
    CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
    SHOPORDERID => {:type => ::Thrift::Types::STRING, :name => 'shopOrderId'},
    APPSTORECODE => {:type => ::Thrift::Types::I32, :name => 'appStoreCode', :enum_class => ::PaymentType},
    ITEMS => {:type => ::Thrift::Types::LIST, :name => 'items', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CoinUseReservationItem}},
    COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @appStoreCode.nil? || ::PaymentType::VALID_VALUES.include?(@appStoreCode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field appStoreCode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class CompactContact
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  CREATEDTIME = 2
  MODIFIEDTIME = 3
  STATUS = 4
  SETTINGS = 5
  DISPLAYNAMEOVERRIDDEN = 6

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    MODIFIEDTIME => {:type => ::Thrift::Types::I64, :name => 'modifiedTime'},
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::ContactStatus},
    SETTINGS => {:type => ::Thrift::Types::I64, :name => 'settings'},
    DISPLAYNAMEOVERRIDDEN => {:type => ::Thrift::Types::STRING, :name => 'displayNameOverridden'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @status.nil? || ::ContactStatus::VALID_VALUES.include?(@status)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ContactModification
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TYPE = 1
  LUID = 2
  PHONES = 11
  EMAILS = 12
  USERIDS = 13

  FIELDS = {
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::ModificationType},
    LUID => {:type => ::Thrift::Types::STRING, :name => 'luid'},
    PHONES => {:type => ::Thrift::Types::LIST, :name => 'phones', :element => {:type => ::Thrift::Types::STRING}},
    EMAILS => {:type => ::Thrift::Types::LIST, :name => 'emails', :element => {:type => ::Thrift::Types::STRING}},
    USERIDS => {:type => ::Thrift::Types::LIST, :name => 'userids', :element => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::ModificationType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ContactRegistration
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CONTACT = 1
  LUID = 10
  CONTACTTYPE = 11
  CONTACTKEY = 12

  FIELDS = {
    CONTACT => {:type => ::Thrift::Types::STRUCT, :name => 'contact', :class => ::Contact},
    LUID => {:type => ::Thrift::Types::STRING, :name => 'luid'},
    CONTACTTYPE => {:type => ::Thrift::Types::I32, :name => 'contactType', :enum_class => ::ContactType},
    CONTACTKEY => {:type => ::Thrift::Types::STRING, :name => 'contactKey'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @contactType.nil? || ::ContactType::VALID_VALUES.include?(@contactType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field contactType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ContactReport
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  EXISTS = 2
  CONTACT = 3

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    EXISTS => {:type => ::Thrift::Types::BOOL, :name => 'exists'},
    CONTACT => {:type => ::Thrift::Types::STRUCT, :name => 'contact', :class => ::Contact}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ContactReportResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  EXISTS = 2

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    EXISTS => {:type => ::Thrift::Types::BOOL, :name => 'exists'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class DeviceInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  DEVICENAME = 1
  SYSTEMNAME = 2
  SYSTEMVERSION = 3
  MODEL = 4
  CARRIERCODE = 10
  CARRIERNAME = 11
  APPLICATIONTYPE = 20

  FIELDS = {
    DEVICENAME => {:type => ::Thrift::Types::STRING, :name => 'deviceName'},
    SYSTEMNAME => {:type => ::Thrift::Types::STRING, :name => 'systemName'},
    SYSTEMVERSION => {:type => ::Thrift::Types::STRING, :name => 'systemVersion'},
    MODEL => {:type => ::Thrift::Types::STRING, :name => 'model'},
    CARRIERCODE => {:type => ::Thrift::Types::I32, :name => 'carrierCode', :enum_class => ::CarrierCode},
    CARRIERNAME => {:type => ::Thrift::Types::STRING, :name => 'carrierName'},
    APPLICATIONTYPE => {:type => ::Thrift::Types::I32, :name => 'applicationType', :enum_class => ::ApplicationType}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @carrierCode.nil? || ::CarrierCode::VALID_VALUES.include?(@carrierCode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field carrierCode!')
    end
    unless @applicationType.nil? || ::ApplicationType::VALID_VALUES.include?(@applicationType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field applicationType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class EmailConfirmation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  USEPASSWORDSET = 1
  EMAIL = 2
  PASSWORD = 3
  IGNOREDUPLICATION = 4

  FIELDS = {
    USEPASSWORDSET => {:type => ::Thrift::Types::BOOL, :name => 'usePasswordSet'},
    EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email'},
    PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'},
    IGNOREDUPLICATION => {:type => ::Thrift::Types::BOOL, :name => 'ignoreDuplication'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class EmailConfirmationSession
  include ::Thrift::Struct, ::Thrift::Struct_Union
  EMAILCONFIRMATIONTYPE = 1
  VERIFIER = 2
  TARGETEMAIL = 3

  FIELDS = {
    EMAILCONFIRMATIONTYPE => {:type => ::Thrift::Types::I32, :name => 'emailConfirmationType', :enum_class => ::EmailConfirmationType},
    VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'},
    TARGETEMAIL => {:type => ::Thrift::Types::STRING, :name => 'targetEmail'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @emailConfirmationType.nil? || ::EmailConfirmationType::VALID_VALUES.include?(@emailConfirmationType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field emailConfirmationType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class FriendChannelMatrix
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELID = 1
  REPRESENTMID = 2
  COUNT = 3
  POINT = 4

  FIELDS = {
    CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
    REPRESENTMID => {:type => ::Thrift::Types::STRING, :name => 'representMid'},
    COUNT => {:type => ::Thrift::Types::I32, :name => 'count'},
    POINT => {:type => ::Thrift::Types::I32, :name => 'point'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class FriendChannelMatricesResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  EXPIRES = 1
  MATRICES = 2

  FIELDS = {
    EXPIRES => {:type => ::Thrift::Types::I64, :name => 'expires'},
    MATRICES => {:type => ::Thrift::Types::LIST, :name => 'matrices', :element => {:type => ::Thrift::Types::STRUCT, :class => ::FriendChannelMatrix}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class FriendRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  EMID = 1
  MID = 2
  DIRECTION = 3
  METHOD = 4
  PARAM = 5
  TIMESTAMP = 6
  SEQID = 7
  DISPLAYNAME = 10
  PICTUREPATH = 11
  PICTURESTATUS = 12

  FIELDS = {
    EMID => {:type => ::Thrift::Types::STRING, :name => 'eMid'},
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    DIRECTION => {:type => ::Thrift::Types::I32, :name => 'direction', :enum_class => ::FriendRequestDirection},
    METHOD => {:type => ::Thrift::Types::I32, :name => 'method', :enum_class => ::FriendRequestMethod},
    PARAM => {:type => ::Thrift::Types::STRING, :name => 'param'},
    TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
    SEQID => {:type => ::Thrift::Types::I64, :name => 'seqId'},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    PICTUREPATH => {:type => ::Thrift::Types::STRING, :name => 'picturePath'},
    PICTURESTATUS => {:type => ::Thrift::Types::STRING, :name => 'pictureStatus'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @direction.nil? || ::FriendRequestDirection::VALID_VALUES.include?(@direction)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field direction!')
    end
    unless @method.nil? || ::FriendRequestMethod::VALID_VALUES.include?(@method)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field method!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class FriendRequestsInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TOTALINCOMINGCOUNT = 1
  TOTALOUTGOINGCOUNT = 2
  RECENTINCOMINGS = 3
  RECENTOUTGOINGS = 4
  TOTALINCOMINGLIMIT = 5
  TOTALOUTGOINGLIMIT = 6

  FIELDS = {
    TOTALINCOMINGCOUNT => {:type => ::Thrift::Types::I32, :name => 'totalIncomingCount'},
    TOTALOUTGOINGCOUNT => {:type => ::Thrift::Types::I32, :name => 'totalOutgoingCount'},
    RECENTINCOMINGS => {:type => ::Thrift::Types::LIST, :name => 'recentIncomings', :element => {:type => ::Thrift::Types::STRUCT, :class => ::FriendRequest}},
    RECENTOUTGOINGS => {:type => ::Thrift::Types::LIST, :name => 'recentOutgoings', :element => {:type => ::Thrift::Types::STRUCT, :class => ::FriendRequest}},
    TOTALINCOMINGLIMIT => {:type => ::Thrift::Types::I32, :name => 'totalIncomingLimit'},
    TOTALOUTGOINGLIMIT => {:type => ::Thrift::Types::I32, :name => 'totalOutgoingLimit'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Geolocation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  LONGITUDE = 1
  LATITUDE = 2

  FIELDS = {
    LONGITUDE => {:type => ::Thrift::Types::DOUBLE, :name => 'longitude'},
    LATITUDE => {:type => ::Thrift::Types::DOUBLE, :name => 'latitude'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class NotificationTarget
  include ::Thrift::Struct, ::Thrift::Struct_Union
  APPLICATIONTYPE = 1
  APPLICATIONVERSION = 2
  REGION = 3

  FIELDS = {
    APPLICATIONTYPE => {:type => ::Thrift::Types::STRING, :name => 'applicationType'},
    APPLICATIONVERSION => {:type => ::Thrift::Types::STRING, :name => 'applicationVersion'},
    REGION => {:type => ::Thrift::Types::STRING, :name => 'region'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GlobalEvent
  include ::Thrift::Struct, ::Thrift::Struct_Union
  KEY = 1
  TARGETS = 2
  CREATEDTIME = 3
  DATA = 4
  MAXDELAY = 5

  FIELDS = {
    KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
    TARGETS => {:type => ::Thrift::Types::LIST, :name => 'targets', :element => {:type => ::Thrift::Types::STRUCT, :class => ::NotificationTarget}},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    DATA => {:type => ::Thrift::Types::I64, :name => 'data'},
    MAXDELAY => {:type => ::Thrift::Types::I32, :name => 'maxDelay'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GroupPreference
  include ::Thrift::Struct, ::Thrift::Struct_Union
  INVITATIONTICKET = 1
  FAVORITETIMESTAMP = 2

  FIELDS = {
    INVITATIONTICKET => {:type => ::Thrift::Types::STRING, :name => 'invitationTicket'},
    FAVORITETIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'favoriteTimestamp'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Group
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  CREATEDTIME = 2
  NAME = 10
  PICTURESTATUS = 11
  PREVENTEDJOINBYTICKET = 12
  GROUPPREFERENCE = 13
  MEMBERS = 20
  CREATOR = 21
  INVITEE = 22
  NOTIFICATIONDISABLED = 31

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    PICTURESTATUS => {:type => ::Thrift::Types::STRING, :name => 'pictureStatus'},
    PREVENTEDJOINBYTICKET => {:type => ::Thrift::Types::BOOL, :name => 'preventedJoinByTicket'},
    GROUPPREFERENCE => {:type => ::Thrift::Types::STRUCT, :name => 'groupPreference', :class => ::GroupPreference},
    MEMBERS => {:type => ::Thrift::Types::LIST, :name => 'members', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
    CREATOR => {:type => ::Thrift::Types::STRUCT, :name => 'creator', :class => ::Contact},
    INVITEE => {:type => ::Thrift::Types::LIST, :name => 'invitee', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
    NOTIFICATIONDISABLED => {:type => ::Thrift::Types::BOOL, :name => 'notificationDisabled'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class IdentityCredential
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PROVIDER = 1
  IDENTIFIER = 2
  PASSWORD = 3

  FIELDS = {
    PROVIDER => {:type => ::Thrift::Types::I32, :name => 'provider', :enum_class => ::IdentityProvider},
    IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'identifier'},
    PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @provider.nil? || ::IdentityProvider::VALID_VALUES.include?(@provider)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field provider!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class LastReadMessageId
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  LASTREADMESSAGEID = 2

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    LASTREADMESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'lastReadMessageId'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class LastReadMessageIds
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHATID = 1
  LASTREADMESSAGEIDS = 2

  FIELDS = {
    CHATID => {:type => ::Thrift::Types::STRING, :name => 'chatId'},
    LASTREADMESSAGEIDS => {:type => ::Thrift::Types::LIST, :name => 'lastReadMessageIds', :element => {:type => ::Thrift::Types::STRUCT, :class => ::LastReadMessageId}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class VerificationSessionData
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SESSIONID = 1
  METHOD = 2
  CALLBACK = 3
  NORMALIZEDPHONE = 4
  COUNTRYCODE = 5
  NATIONALSIGNIFICANTNUMBER = 6
  AVAILABLEVERIFICATIONMETHODS = 7

  FIELDS = {
    SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'},
    METHOD => {:type => ::Thrift::Types::I32, :name => 'method', :enum_class => ::VerificationMethod},
    CALLBACK => {:type => ::Thrift::Types::STRING, :name => 'callback'},
    NORMALIZEDPHONE => {:type => ::Thrift::Types::STRING, :name => 'normalizedPhone'},
    COUNTRYCODE => {:type => ::Thrift::Types::STRING, :name => 'countryCode'},
    NATIONALSIGNIFICANTNUMBER => {:type => ::Thrift::Types::STRING, :name => 'nationalSignificantNumber'},
    AVAILABLEVERIFICATIONMETHODS => {:type => ::Thrift::Types::LIST, :name => 'availableVerificationMethods', :element => {:type => ::Thrift::Types::I32, :enum_class => ::VerificationMethod}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @method.nil? || ::VerificationMethod::VALID_VALUES.include?(@method)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field method!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class LoginResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  AUTHTOKEN = 1
  CERTIFICATE = 2
  VERIFIER = 3
  PINCODE = 4
  TYPE = 5
  LASTPRIMARYBINDTIME = 6
  DISPLAYMESSAGE = 7
  SESSIONFORSMSCONFIRM = 8

  FIELDS = {
    AUTHTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authToken'},
    CERTIFICATE => {:type => ::Thrift::Types::STRING, :name => 'certificate'},
    VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'},
    PINCODE => {:type => ::Thrift::Types::STRING, :name => 'pinCode'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::LoginResultType},
    LASTPRIMARYBINDTIME => {:type => ::Thrift::Types::I64, :name => 'lastPrimaryBindTime'},
    DISPLAYMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'displayMessage'},
    SESSIONFORSMSCONFIRM => {:type => ::Thrift::Types::STRUCT, :name => 'sessionForSMSConfirm', :class => ::VerificationSessionData}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::LoginResultType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class LoginRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TYPE = 1
  IDENTITYPROVIDER = 2
  IDENTIFIER = 3
  PASSWORD = 4
  KEEPLOGGEDIN = 5
  ACCESSLOCATION = 6
  SYSTEMNAME = 7
  CERTIFICATE = 8
  VERIFIER = 9
  SECRET = 10
  E2EEVERSION = 11

  FIELDS = {
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type'},
    IDENTITYPROVIDER => {:type => ::Thrift::Types::I32, :name => 'identityProvider'},
    IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'identifier'},
    PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'},
    KEEPLOGGEDIN => {:type => ::Thrift::Types::BOOL, :name => 'keepLoggedIn'},
    ACCESSLOCATION => {:type => ::Thrift::Types::STRING, :name => 'accessLocation'},
    SYSTEMNAME => {:type => ::Thrift::Types::STRING, :name => 'systemName'},
    CERTIFICATE => {:type => ::Thrift::Types::STRING, :name => 'certificate'},
    VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'},
    SECRET => {:type => ::Thrift::Types::STRING, :name => 'secret'},
    E2EEVERSION => {:type => ::Thrift::Types::I32, :name => 'e2eeVersion'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class LoginSession
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TOKENKEY = 1
  EXPIRATIONTIME = 3
  APPLICATIONTYPE = 11
  SYSTEMNAME = 12
  ACCESSLOCATION = 22

  FIELDS = {
    TOKENKEY => {:type => ::Thrift::Types::STRING, :name => 'tokenKey'},
    EXPIRATIONTIME => {:type => ::Thrift::Types::I64, :name => 'expirationTime'},
    APPLICATIONTYPE => {:type => ::Thrift::Types::I32, :name => 'applicationType', :enum_class => ::ApplicationType},
    SYSTEMNAME => {:type => ::Thrift::Types::STRING, :name => 'systemName'},
    ACCESSLOCATION => {:type => ::Thrift::Types::STRING, :name => 'accessLocation'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @applicationType.nil? || ::ApplicationType::VALID_VALUES.include?(@applicationType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field applicationType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class Message
  include ::Thrift::Struct, ::Thrift::Struct_Union
  _FROM = 1
  TO = 2
  TOTYPE = 3
  ID = 4
  CREATEDTIME = 5
  DELIVEREDTIME = 6
  TEXT = 10
  LOCATION = 11
  HASCONTENT = 14
  CONTENTTYPE = 15
  CONTENTPREVIEW = 17
  CONTENTMETADATA = 18
  SESSIONID = 19
  CHUNKS = 20
  RELATEDMESSAGEID = 21
  MESSAGERELATIONTYPE = 22
  READCOUNT = 23
  RELATEDMESSAGESERVICECODE = 24

  FIELDS = {
    _FROM => {:type => ::Thrift::Types::STRING, :name => '_from'},
    TO => {:type => ::Thrift::Types::STRING, :name => 'to'},
    TOTYPE => {:type => ::Thrift::Types::I32, :name => 'toType', :enum_class => ::MIDType},
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    DELIVEREDTIME => {:type => ::Thrift::Types::I64, :name => 'deliveredTime'},
    TEXT => {:type => ::Thrift::Types::STRING, :name => 'text'},
    LOCATION => {:type => ::Thrift::Types::STRUCT, :name => 'location', :class => ::Location},
    HASCONTENT => {:type => ::Thrift::Types::BOOL, :name => 'hasContent'},
    CONTENTTYPE => {:type => ::Thrift::Types::I32, :name => 'contentType', :enum_class => ::ContentType},
    CONTENTPREVIEW => {:type => ::Thrift::Types::STRING, :name => 'contentPreview', :binary => true},
    CONTENTMETADATA => {:type => ::Thrift::Types::MAP, :name => 'contentMetadata', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
    SESSIONID => {:type => ::Thrift::Types::BYTE, :name => 'sessionId'},
    CHUNKS => {:type => ::Thrift::Types::LIST, :name => 'chunks', :element => {:type => ::Thrift::Types::STRING, :binary => true}},
    RELATEDMESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'relatedMessageId'},
    MESSAGERELATIONTYPE => {:type => ::Thrift::Types::I32, :name => 'messageRelationType', :enum_class => ::MessageRelationType},
    READCOUNT => {:type => ::Thrift::Types::I64, :name => 'readCount'},
    RELATEDMESSAGESERVICECODE => {:type => ::Thrift::Types::I32, :name => 'relatedMessageServiceCode', :enum_class => ::ServiceCode}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @toType.nil? || ::MIDType::VALID_VALUES.include?(@toType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field toType!')
    end
    unless @contentType.nil? || ::ContentType::VALID_VALUES.include?(@contentType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field contentType!')
    end
    unless @messageRelationType.nil? || ::MessageRelationType::VALID_VALUES.include?(@messageRelationType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field messageRelationType!')
    end
    unless @relatedMessageServiceCode.nil? || ::ServiceCode::VALID_VALUES.include?(@relatedMessageServiceCode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field relatedMessageServiceCode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareMessage
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MESSAGE = 1
  FROMTYPE = 3
  SQUAREMESSAGEREVISION = 4

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::Message},
    FROMTYPE => {:type => ::Thrift::Types::I32, :name => 'fromType', :enum_class => ::MIDType},
    SQUAREMESSAGEREVISION => {:type => ::Thrift::Types::I64, :name => 'squareMessageRevision'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @fromType.nil? || ::MIDType::VALID_VALUES.include?(@fromType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field fromType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareChatStatusWithoutMessage
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MEMBERCOUNT = 1
  UNREADMESSAGECOUNT = 2

  FIELDS = {
    MEMBERCOUNT => {:type => ::Thrift::Types::I32, :name => 'memberCount'},
    UNREADMESSAGECOUNT => {:type => ::Thrift::Types::I32, :name => 'unreadMessageCount'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareChatStatus
  include ::Thrift::Struct, ::Thrift::Struct_Union
  LASTMESSAGE = 3
  SENDERDISPLAYNAME = 4
  OTHERSTATUS = 5

  FIELDS = {
    LASTMESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'lastMessage', :class => ::SquareMessage},
    SENDERDISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'senderDisplayName'},
    OTHERSTATUS => {:type => ::Thrift::Types::STRUCT, :name => 'otherStatus', :class => ::SquareChatStatusWithoutMessage}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareChatMember
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMEMBERMID = 1
  SQUARECHATMID = 2
  REVISION = 3
  MEMBERSHIPSTATE = 4
  NOTIFICATIONFORMESSAGE = 5

  FIELDS = {
    SQUAREMEMBERMID => {:type => ::Thrift::Types::STRING, :name => 'squareMemberMid'},
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    MEMBERSHIPSTATE => {:type => ::Thrift::Types::I32, :name => 'membershipState', :enum_class => ::SquareChatMembershipState},
    NOTIFICATIONFORMESSAGE => {:type => ::Thrift::Types::BOOL, :name => 'notificationForMessage'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @membershipState.nil? || ::SquareChatMembershipState::VALID_VALUES.include?(@membershipState)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field membershipState!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class MessageOperation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REVISION = 1
  CREATEDTIME = 2
  TYPE = 3
  REQSEQ = 4
  STATUS = 5
  PARAM1 = 10
  PARAM2 = 11
  PARAM3 = 12
  MESSAGE = 20

  FIELDS = {
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::MessageOperationType},
    REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::OpStatus},
    PARAM1 => {:type => ::Thrift::Types::STRING, :name => 'param1'},
    PARAM2 => {:type => ::Thrift::Types::STRING, :name => 'param2'},
    PARAM3 => {:type => ::Thrift::Types::STRING, :name => 'param3'},
    MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::Message}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::MessageOperationType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
    unless @status.nil? || ::OpStatus::VALID_VALUES.include?(@status)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class MessageOperations
  include ::Thrift::Struct, ::Thrift::Struct_Union
  OPERATIONS = 1
  ENDFLAG = 2

  FIELDS = {
    OPERATIONS => {:type => ::Thrift::Types::LIST, :name => 'operations', :element => {:type => ::Thrift::Types::STRUCT, :class => ::MessageOperation}},
    ENDFLAG => {:type => ::Thrift::Types::BOOL, :name => 'endFlag'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class MessageStoreResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REQUESTID = 1
  MESSAGEIDS = 2

  FIELDS = {
    REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
    MESSAGEIDS => {:type => ::Thrift::Types::LIST, :name => 'messageIds', :element => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class MetaProfile
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CREATETIME = 1
  REGIONCODE = 2
  IDENTITIES = 3

  FIELDS = {
    CREATETIME => {:type => ::Thrift::Types::I64, :name => 'createTime'},
    REGIONCODE => {:type => ::Thrift::Types::STRING, :name => 'regionCode'},
    IDENTITIES => {:type => ::Thrift::Types::MAP, :name => 'identities', :key => {:type => ::Thrift::Types::I32, :enum_class => ::RegistrationType}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class NotificationItem
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  _FROM = 2
  TO = 3
  FROMCHANNEL = 4
  TOCHANNEL = 5
  REVISION = 7
  CREATEDTIME = 8
  CONTENT = 9

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    _FROM => {:type => ::Thrift::Types::STRING, :name => '_from'},
    TO => {:type => ::Thrift::Types::STRING, :name => 'to'},
    FROMCHANNEL => {:type => ::Thrift::Types::STRING, :name => 'fromChannel'},
    TOCHANNEL => {:type => ::Thrift::Types::STRING, :name => 'toChannel'},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    CONTENT => {:type => ::Thrift::Types::MAP, :name => 'content', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class NotificationFetchResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  FETCHMODE = 1
  ITEMLIST = 2

  FIELDS = {
    FETCHMODE => {:type => ::Thrift::Types::I32, :name => 'fetchMode', :enum_class => ::NotificationItemFetchMode},
    ITEMLIST => {:type => ::Thrift::Types::LIST, :name => 'itemList', :element => {:type => ::Thrift::Types::STRUCT, :class => ::NotificationItem}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @fetchMode.nil? || ::NotificationItemFetchMode::VALID_VALUES.include?(@fetchMode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field fetchMode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class Operation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REVISION = 1
  CREATEDTIME = 2
  TYPE = 3
  REQSEQ = 4
  CHECKSUM = 5
  STATUS = 7
  PARAM1 = 10
  PARAM2 = 11
  PARAM3 = 12
  MESSAGE = 20

  FIELDS = {
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::OpType},
    REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
    CHECKSUM => {:type => ::Thrift::Types::STRING, :name => 'checksum'},
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::OpStatus},
    PARAM1 => {:type => ::Thrift::Types::STRING, :name => 'param1'},
    PARAM2 => {:type => ::Thrift::Types::STRING, :name => 'param2'},
    PARAM3 => {:type => ::Thrift::Types::STRING, :name => 'param3'},
    MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::Message}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::OpType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
    unless @status.nil? || ::OpStatus::VALID_VALUES.include?(@status)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class PaymentReservation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  RECEIVERMID = 1
  PRODUCTID = 2
  LANGUAGE = 3
  LOCATION = 4
  CURRENCY = 5
  PRICE = 6
  APPSTORECODE = 7
  MESSAGETEXT = 8
  MESSAGETEMPLATE = 9
  PACKAGEID = 10

  FIELDS = {
    RECEIVERMID => {:type => ::Thrift::Types::STRING, :name => 'receiverMid'},
    PRODUCTID => {:type => ::Thrift::Types::STRING, :name => 'productId'},
    LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
    LOCATION => {:type => ::Thrift::Types::STRING, :name => 'location'},
    CURRENCY => {:type => ::Thrift::Types::STRING, :name => 'currency'},
    PRICE => {:type => ::Thrift::Types::STRING, :name => 'price'},
    APPSTORECODE => {:type => ::Thrift::Types::I32, :name => 'appStoreCode', :enum_class => ::PaymentType},
    MESSAGETEXT => {:type => ::Thrift::Types::STRING, :name => 'messageText'},
    MESSAGETEMPLATE => {:type => ::Thrift::Types::I32, :name => 'messageTemplate'},
    PACKAGEID => {:type => ::Thrift::Types::I64, :name => 'packageId'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @appStoreCode.nil? || ::PaymentType::VALID_VALUES.include?(@appStoreCode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field appStoreCode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class PaymentReservationResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ORDERID = 1
  CONFIRMURL = 2
  EXTRAS = 3

  FIELDS = {
    ORDERID => {:type => ::Thrift::Types::STRING, :name => 'orderId'},
    CONFIRMURL => {:type => ::Thrift::Types::STRING, :name => 'confirmUrl'},
    EXTRAS => {:type => ::Thrift::Types::MAP, :name => 'extras', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Product
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PRODUCTID = 1
  PACKAGEID = 2
  VERSION = 3
  AUTHORNAME = 4
  ONSALE = 5
  VALIDDAYS = 6
  SALETYPE = 7
  COPYRIGHT = 8
  TITLE = 9
  DESCRIPTIONTEXT = 10
  SHOPORDERID = 11
  FROMMID = 12
  TOMID = 13
  VALIDUNTIL = 14
  PRICETIER = 15
  PRICE = 16
  CURRENCY = 17
  CURRENCYSYMBOL = 18
  PAYMENTTYPE = 19
  CREATEDATE = 20
  OWNFLAG = 21
  EVENTTYPE = 22
  URLSCHEMA = 23
  DOWNLOADURL = 24
  BUDDYMID = 25
  PUBLISHSINCE = 26
  NEWFLAG = 27
  MISSIONFLAG = 28
  CATEGORIES = 29
  MISSIONBUTTONTEXT = 30
  MISSIONSHORTDESCRIPTION = 31
  AUTHORID = 32
  GRANTEDBYDEFAULT = 41
  DISPLAYORDER = 42
  AVAILABLEFORPRESENT = 43
  AVAILABLEFORMYSELF = 44
  HASANIMATION = 51
  HASSOUND = 52
  RECOMMENDATIONSENABLED = 53
  STICKERRESOURCETYPE = 54

  FIELDS = {
    PRODUCTID => {:type => ::Thrift::Types::STRING, :name => 'productId'},
    PACKAGEID => {:type => ::Thrift::Types::I64, :name => 'packageId'},
    VERSION => {:type => ::Thrift::Types::I32, :name => 'version'},
    AUTHORNAME => {:type => ::Thrift::Types::STRING, :name => 'authorName'},
    ONSALE => {:type => ::Thrift::Types::BOOL, :name => 'onSale'},
    VALIDDAYS => {:type => ::Thrift::Types::I32, :name => 'validDays'},
    SALETYPE => {:type => ::Thrift::Types::I32, :name => 'saleType'},
    COPYRIGHT => {:type => ::Thrift::Types::STRING, :name => 'copyright'},
    TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
    DESCRIPTIONTEXT => {:type => ::Thrift::Types::STRING, :name => 'descriptionText'},
    SHOPORDERID => {:type => ::Thrift::Types::I64, :name => 'shopOrderId'},
    FROMMID => {:type => ::Thrift::Types::STRING, :name => 'fromMid'},
    TOMID => {:type => ::Thrift::Types::STRING, :name => 'toMid'},
    VALIDUNTIL => {:type => ::Thrift::Types::I64, :name => 'validUntil'},
    PRICETIER => {:type => ::Thrift::Types::I32, :name => 'priceTier'},
    PRICE => {:type => ::Thrift::Types::STRING, :name => 'price'},
    CURRENCY => {:type => ::Thrift::Types::STRING, :name => 'currency'},
    CURRENCYSYMBOL => {:type => ::Thrift::Types::STRING, :name => 'currencySymbol'},
    PAYMENTTYPE => {:type => ::Thrift::Types::I32, :name => 'paymentType', :enum_class => ::PaymentType},
    CREATEDATE => {:type => ::Thrift::Types::I64, :name => 'createDate'},
    OWNFLAG => {:type => ::Thrift::Types::BOOL, :name => 'ownFlag'},
    EVENTTYPE => {:type => ::Thrift::Types::I32, :name => 'eventType', :enum_class => ::ProductEventType},
    URLSCHEMA => {:type => ::Thrift::Types::STRING, :name => 'urlSchema'},
    DOWNLOADURL => {:type => ::Thrift::Types::STRING, :name => 'downloadUrl'},
    BUDDYMID => {:type => ::Thrift::Types::STRING, :name => 'buddyMid'},
    PUBLISHSINCE => {:type => ::Thrift::Types::I64, :name => 'publishSince'},
    NEWFLAG => {:type => ::Thrift::Types::BOOL, :name => 'newFlag'},
    MISSIONFLAG => {:type => ::Thrift::Types::BOOL, :name => 'missionFlag'},
    CATEGORIES => {:type => ::Thrift::Types::LIST, :name => 'categories', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ProductCategory}},
    MISSIONBUTTONTEXT => {:type => ::Thrift::Types::STRING, :name => 'missionButtonText'},
    MISSIONSHORTDESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'missionShortDescription'},
    AUTHORID => {:type => ::Thrift::Types::STRING, :name => 'authorId'},
    GRANTEDBYDEFAULT => {:type => ::Thrift::Types::BOOL, :name => 'grantedByDefault'},
    DISPLAYORDER => {:type => ::Thrift::Types::I32, :name => 'displayOrder'},
    AVAILABLEFORPRESENT => {:type => ::Thrift::Types::BOOL, :name => 'availableForPresent'},
    AVAILABLEFORMYSELF => {:type => ::Thrift::Types::BOOL, :name => 'availableForMyself'},
    HASANIMATION => {:type => ::Thrift::Types::BOOL, :name => 'hasAnimation'},
    HASSOUND => {:type => ::Thrift::Types::BOOL, :name => 'hasSound'},
    RECOMMENDATIONSENABLED => {:type => ::Thrift::Types::BOOL, :name => 'recommendationsEnabled'},
    STICKERRESOURCETYPE => {:type => ::Thrift::Types::I32, :name => 'stickerResourceType', :enum_class => ::StickerResourceType}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @paymentType.nil? || ::PaymentType::VALID_VALUES.include?(@paymentType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field paymentType!')
    end
    unless @eventType.nil? || ::ProductEventType::VALID_VALUES.include?(@eventType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field eventType!')
    end
    unless @stickerResourceType.nil? || ::StickerResourceType::VALID_VALUES.include?(@stickerResourceType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field stickerResourceType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ProductList
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HASNEXT = 1
  BANNERSEQUENCE = 4
  BANNERTARGETTYPE = 5
  BANNERTARGETPATH = 6
  PRODUCTLIST = 7
  BANNERLANG = 8

  FIELDS = {
    HASNEXT => {:type => ::Thrift::Types::BOOL, :name => 'hasNext'},
    BANNERSEQUENCE => {:type => ::Thrift::Types::I64, :name => 'bannerSequence'},
    BANNERTARGETTYPE => {:type => ::Thrift::Types::I32, :name => 'bannerTargetType', :enum_class => ::ProductBannerLinkType},
    BANNERTARGETPATH => {:type => ::Thrift::Types::STRING, :name => 'bannerTargetPath'},
    PRODUCTLIST => {:type => ::Thrift::Types::LIST, :name => 'productList', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Product}},
    BANNERLANG => {:type => ::Thrift::Types::STRING, :name => 'bannerLang'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @bannerTargetType.nil? || ::ProductBannerLinkType::VALID_VALUES.include?(@bannerTargetType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field bannerTargetType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class StickerIdRange
  include ::Thrift::Struct, ::Thrift::Struct_Union
  START = 1
  SIZE = 2

  FIELDS = {
    START => {:type => ::Thrift::Types::I64, :name => 'start'},
    SIZE => {:type => ::Thrift::Types::I32, :name => 'size'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ProductSimple
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PRODUCTID = 1
  PACKAGEID = 2
  VERSION = 3
  ONSALE = 4
  VALIDUNTIL = 5
  STICKERIDRANGES = 10
  GRANTEDBYDEFAULT = 41
  DISPLAYORDER = 42

  FIELDS = {
    PRODUCTID => {:type => ::Thrift::Types::STRING, :name => 'productId'},
    PACKAGEID => {:type => ::Thrift::Types::I64, :name => 'packageId'},
    VERSION => {:type => ::Thrift::Types::I32, :name => 'version'},
    ONSALE => {:type => ::Thrift::Types::BOOL, :name => 'onSale'},
    VALIDUNTIL => {:type => ::Thrift::Types::I64, :name => 'validUntil'},
    STICKERIDRANGES => {:type => ::Thrift::Types::LIST, :name => 'stickerIdRanges', :element => {:type => ::Thrift::Types::STRUCT, :class => ::StickerIdRange}},
    GRANTEDBYDEFAULT => {:type => ::Thrift::Types::BOOL, :name => 'grantedByDefault'},
    DISPLAYORDER => {:type => ::Thrift::Types::I32, :name => 'displayOrder'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ProductSimpleList
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HASNEXT = 1
  REINVOKEHOUR = 2
  LASTVERSIONSEQ = 3
  PRODUCTLIST = 4
  RECENTNEWRELEASEDATE = 5
  RECENTEVENTRELEASEDATE = 6

  FIELDS = {
    HASNEXT => {:type => ::Thrift::Types::BOOL, :name => 'hasNext'},
    REINVOKEHOUR => {:type => ::Thrift::Types::I32, :name => 'reinvokeHour'},
    LASTVERSIONSEQ => {:type => ::Thrift::Types::I64, :name => 'lastVersionSeq'},
    PRODUCTLIST => {:type => ::Thrift::Types::LIST, :name => 'productList', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ProductSimple}},
    RECENTNEWRELEASEDATE => {:type => ::Thrift::Types::I64, :name => 'recentNewReleaseDate'},
    RECENTEVENTRELEASEDATE => {:type => ::Thrift::Types::I64, :name => 'recentEventReleaseDate'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Profile
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  USERID = 3
  PHONE = 10
  EMAIL = 11
  REGIONCODE = 12
  DISPLAYNAME = 20
  PHONETICNAME = 21
  PICTURESTATUS = 22
  THUMBNAILURL = 23
  STATUSMESSAGE = 24
  ALLOWSEARCHBYUSERID = 31
  ALLOWSEARCHBYEMAIL = 32
  PICTUREPATH = 33
  MUSICPROFILE = 34
  VIDEOPROFILE = 35

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    USERID => {:type => ::Thrift::Types::STRING, :name => 'userid'},
    PHONE => {:type => ::Thrift::Types::STRING, :name => 'phone'},
    EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email'},
    REGIONCODE => {:type => ::Thrift::Types::STRING, :name => 'regionCode'},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    PHONETICNAME => {:type => ::Thrift::Types::STRING, :name => 'phoneticName'},
    PICTURESTATUS => {:type => ::Thrift::Types::STRING, :name => 'pictureStatus'},
    THUMBNAILURL => {:type => ::Thrift::Types::STRING, :name => 'thumbnailUrl'},
    STATUSMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'statusMessage'},
    ALLOWSEARCHBYUSERID => {:type => ::Thrift::Types::BOOL, :name => 'allowSearchByUserid'},
    ALLOWSEARCHBYEMAIL => {:type => ::Thrift::Types::BOOL, :name => 'allowSearchByEmail'},
    PICTUREPATH => {:type => ::Thrift::Types::STRING, :name => 'picturePath'},
    MUSICPROFILE => {:type => ::Thrift::Types::STRING, :name => 'musicProfile'},
    VIDEOPROFILE => {:type => ::Thrift::Types::STRING, :name => 'videoProfile'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ProximityMatchCandidateResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  USERS = 1
  BUDDIES = 2

  FIELDS = {
    USERS => {:type => ::Thrift::Types::LIST, :name => 'users', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
    BUDDIES => {:type => ::Thrift::Types::LIST, :name => 'buddies', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class RegisterWithSnsIdResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  AUTHTOKEN = 1
  USERCREATED = 2

  FIELDS = {
    AUTHTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authToken'},
    USERCREATED => {:type => ::Thrift::Types::BOOL, :name => 'userCreated'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class RequestTokenResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REQUESTTOKEN = 1
  RETURNURL = 2

  FIELDS = {
    REQUESTTOKEN => {:type => ::Thrift::Types::STRING, :name => 'requestToken'},
    RETURNURL => {:type => ::Thrift::Types::STRING, :name => 'returnUrl'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Room
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  CREATEDTIME = 2
  CONTACTS = 10
  NOTIFICATIONDISABLED = 31
  MEMBERMIDS = 40

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    CONTACTS => {:type => ::Thrift::Types::LIST, :name => 'contacts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
    NOTIFICATIONDISABLED => {:type => ::Thrift::Types::BOOL, :name => 'notificationDisabled'},
    MEMBERMIDS => {:type => ::Thrift::Types::LIST, :name => 'memberMids', :element => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SuggestDictionary
  include ::Thrift::Struct, ::Thrift::Struct_Union
  LANGUAGE = 1
  NAME = 2

  FIELDS = {
    LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SuggestItemDictionaryIncrement
  include ::Thrift::Struct, ::Thrift::Struct_Union
  STATUS = 1
  REVISION = 2
  SCHEME = 3
  DATA = 4

  FIELDS = {
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::SuggestDictionaryIncrementStatus},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    SCHEME => {:type => ::Thrift::Types::STRING, :name => 'scheme'},
    DATA => {:type => ::Thrift::Types::STRING, :name => 'data', :binary => true}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SuggestTagDictionaryIncrement
  include ::Thrift::Struct, ::Thrift::Struct_Union
  STATUS = 1
  LANGUAGE = 2
  REVISION = 3
  SCHEME = 4
  DATA = 5

  FIELDS = {
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::SuggestDictionaryIncrementStatus},
    LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    SCHEME => {:type => ::Thrift::Types::STRING, :name => 'scheme'},
    DATA => {:type => ::Thrift::Types::STRING, :name => 'data', :binary => true}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SuggestDictionaryIncrements
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ITEMINCREMENT = 1
  TAGINCREMENTS = 2

  FIELDS = {
    ITEMINCREMENT => {:type => ::Thrift::Types::STRUCT, :name => 'itemIncrement', :class => ::SuggestItemDictionaryIncrement},
    TAGINCREMENTS => {:type => ::Thrift::Types::LIST, :name => 'tagIncrements', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SuggestTagDictionaryIncrement}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SuggestItemDictionaryRevision
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REVISION = 1
  SCHEME = 2

  FIELDS = {
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    SCHEME => {:type => ::Thrift::Types::STRING, :name => 'scheme'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SuggestTagDictionaryRevision
  include ::Thrift::Struct, ::Thrift::Struct_Union
  LANGUAGE = 1
  REVISION = 2
  SCHEME = 3

  FIELDS = {
    LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    SCHEME => {:type => ::Thrift::Types::STRING, :name => 'scheme'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SuggestDictionaryRevisions
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ITEMREVISION = 1
  TAGREVISIONS = 2

  FIELDS = {
    ITEMREVISION => {:type => ::Thrift::Types::STRUCT, :name => 'itemRevision', :class => ::SuggestItemDictionaryRevision},
    TAGREVISIONS => {:type => ::Thrift::Types::LIST, :name => 'tagRevisions', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SuggestTagDictionaryRevision}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SuggestDictionarySettings
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REVISION = 1
  NEWREVISION = 2
  DICTIONARIES = 3
  PRELOADEDDICTIONARIES = 4

  FIELDS = {
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    NEWREVISION => {:type => ::Thrift::Types::I64, :name => 'newRevision'},
    DICTIONARIES => {:type => ::Thrift::Types::LIST, :name => 'dictionaries', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SuggestDictionary}},
    PRELOADEDDICTIONARIES => {:type => ::Thrift::Types::LIST, :name => 'preloadedDictionaries', :element => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PhoneInfoForChannel
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  NORMALIZEDPHONENUMBER = 2
  ALLOWEDTOSEARCHBYPHONENUMBER = 3
  ALLOWEDTORECEIVEMESSAGEFROMNONFRIEND = 4
  REGION = 5

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    NORMALIZEDPHONENUMBER => {:type => ::Thrift::Types::STRING, :name => 'normalizedPhoneNumber'},
    ALLOWEDTOSEARCHBYPHONENUMBER => {:type => ::Thrift::Types::BOOL, :name => 'allowedToSearchByPhoneNumber'},
    ALLOWEDTORECEIVEMESSAGEFROMNONFRIEND => {:type => ::Thrift::Types::BOOL, :name => 'allowedToReceiveMessageFromNonFriend'},
    REGION => {:type => ::Thrift::Types::STRING, :name => 'region'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PhoneVerificationResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  VERIFICATIONRESULT = 1
  ACCOUNTMIGRATIONCHECKTYPE = 2
  RECOMMENDADDFRIENDS = 3

  FIELDS = {
    VERIFICATIONRESULT => {:type => ::Thrift::Types::I32, :name => 'verificationResult', :enum_class => ::VerificationResult},
    ACCOUNTMIGRATIONCHECKTYPE => {:type => ::Thrift::Types::I32, :name => 'accountMigrationCheckType', :enum_class => ::AccountMigrationCheckType},
    RECOMMENDADDFRIENDS => {:type => ::Thrift::Types::BOOL, :name => 'recommendAddFriends'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @verificationResult.nil? || ::VerificationResult::VALID_VALUES.include?(@verificationResult)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field verificationResult!')
    end
    unless @accountMigrationCheckType.nil? || ::AccountMigrationCheckType::VALID_VALUES.include?(@accountMigrationCheckType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field accountMigrationCheckType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class PlaceSearchInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NAME = 1
  ADDRESS = 2
  LATITUDE = 3
  LONGITUDE = 4

  FIELDS = {
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    ADDRESS => {:type => ::Thrift::Types::STRING, :name => 'address'},
    LATITUDE => {:type => ::Thrift::Types::DOUBLE, :name => 'latitude'},
    LONGITUDE => {:type => ::Thrift::Types::DOUBLE, :name => 'longitude'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class RSAKey
  include ::Thrift::Struct, ::Thrift::Struct_Union
  KEYNM = 1
  NVALUE = 2
  EVALUE = 3
  SESSIONKEY = 4

  FIELDS = {
    KEYNM => {:type => ::Thrift::Types::STRING, :name => 'keynm'},
    NVALUE => {:type => ::Thrift::Types::STRING, :name => 'nvalue'},
    EVALUE => {:type => ::Thrift::Types::STRING, :name => 'evalue'},
    SESSIONKEY => {:type => ::Thrift::Types::STRING, :name => 'sessionKey'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SecurityCenterResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  URI = 1
  TOKEN = 2
  COOKIEPATH = 3
  SKIP = 4

  FIELDS = {
    URI => {:type => ::Thrift::Types::STRING, :name => 'uri'},
    TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
    COOKIEPATH => {:type => ::Thrift::Types::STRING, :name => 'cookiePath'},
    SKIP => {:type => ::Thrift::Types::BOOL, :name => 'skip'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SendBuddyMessageResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REQUESTID = 1
  STATE = 2
  MESSAGEID = 3
  EVENTNO = 4
  RECEIVERCOUNT = 11
  SUCCESSCOUNT = 12
  FAILCOUNT = 13
  CANCELCOUNT = 14
  BLOCKCOUNT = 15
  UNREGISTERCOUNT = 16
  TIMESTAMP = 21
  MESSAGE = 22

  FIELDS = {
    REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
    STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => ::BuddyResultState},
    MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'},
    EVENTNO => {:type => ::Thrift::Types::I32, :name => 'eventNo'},
    RECEIVERCOUNT => {:type => ::Thrift::Types::I64, :name => 'receiverCount'},
    SUCCESSCOUNT => {:type => ::Thrift::Types::I64, :name => 'successCount'},
    FAILCOUNT => {:type => ::Thrift::Types::I64, :name => 'failCount'},
    CANCELCOUNT => {:type => ::Thrift::Types::I64, :name => 'cancelCount'},
    BLOCKCOUNT => {:type => ::Thrift::Types::I64, :name => 'blockCount'},
    UNREGISTERCOUNT => {:type => ::Thrift::Types::I64, :name => 'unregisterCount'},
    TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @state.nil? || ::BuddyResultState::VALID_VALUES.include?(@state)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SetBuddyOnAirResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REQUESTID = 1
  STATE = 2
  EVENTNO = 3
  RECEIVERCOUNT = 11
  SUCCESSCOUNT = 12
  FAILCOUNT = 13
  CANCELCOUNT = 14
  UNREGISTERCOUNT = 15
  TIMESTAMP = 21
  MESSAGE = 22

  FIELDS = {
    REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
    STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => ::BuddyResultState},
    EVENTNO => {:type => ::Thrift::Types::I32, :name => 'eventNo'},
    RECEIVERCOUNT => {:type => ::Thrift::Types::I64, :name => 'receiverCount'},
    SUCCESSCOUNT => {:type => ::Thrift::Types::I64, :name => 'successCount'},
    FAILCOUNT => {:type => ::Thrift::Types::I64, :name => 'failCount'},
    CANCELCOUNT => {:type => ::Thrift::Types::I64, :name => 'cancelCount'},
    UNREGISTERCOUNT => {:type => ::Thrift::Types::I64, :name => 'unregisterCount'},
    TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @state.nil? || ::BuddyResultState::VALID_VALUES.include?(@state)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class Settings
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NOTIFICATIONENABLE = 10
  NOTIFICATIONMUTEEXPIRATION = 11
  NOTIFICATIONNEWMESSAGE = 12
  NOTIFICATIONGROUPINVITATION = 13
  NOTIFICATIONSHOWMESSAGE = 14
  NOTIFICATIONINCOMINGCALL = 15
  NOTIFICATIONSOUNDMESSAGE = 16
  NOTIFICATIONSOUNDGROUP = 17
  NOTIFICATIONDISABLEDWITHSUB = 18
  PRIVACYSYNCCONTACTS = 20
  PRIVACYSEARCHBYPHONENUMBER = 21
  PRIVACYSEARCHBYUSERID = 22
  PRIVACYSEARCHBYEMAIL = 23
  PRIVACYALLOWSECONDARYDEVICELOGIN = 24
  PRIVACYPROFILEIMAGEPOSTTOMYHOME = 25
  PRIVACYRECEIVEMESSAGESFROMNOTFRIEND = 26
  CONTACTMYTICKET = 30
  IDENTITYPROVIDER = 40
  IDENTITYIDENTIFIER = 41
  SNSACCOUNTS = 42
  PHONEREGISTRATION = 43
  EMAILCONFIRMATIONSTATUS = 44
  PREFERENCELOCALE = 50
  CUSTOMMODES = 60
  E2EEENABLE = 61
  HITOKOTOBACKUPREQUESTED = 62
  PRIVACYPROFILEMUSICPOSTTOMYHOME = 63
  PRIVACYALLOWNEARBY = 65
  AGREEMENTNEARBYTIME = 66
  AGREEMENTSQUARETIME = 67
  NOTIFICATIONMENTION = 68
  BOTUSEAGREEMENTACCEPTEDAT = 69

  FIELDS = {
    NOTIFICATIONENABLE => {:type => ::Thrift::Types::BOOL, :name => 'notificationEnable'},
    NOTIFICATIONMUTEEXPIRATION => {:type => ::Thrift::Types::I64, :name => 'notificationMuteExpiration'},
    NOTIFICATIONNEWMESSAGE => {:type => ::Thrift::Types::BOOL, :name => 'notificationNewMessage'},
    NOTIFICATIONGROUPINVITATION => {:type => ::Thrift::Types::BOOL, :name => 'notificationGroupInvitation'},
    NOTIFICATIONSHOWMESSAGE => {:type => ::Thrift::Types::BOOL, :name => 'notificationShowMessage'},
    NOTIFICATIONINCOMINGCALL => {:type => ::Thrift::Types::BOOL, :name => 'notificationIncomingCall'},
    NOTIFICATIONSOUNDMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'notificationSoundMessage'},
    NOTIFICATIONSOUNDGROUP => {:type => ::Thrift::Types::STRING, :name => 'notificationSoundGroup'},
    NOTIFICATIONDISABLEDWITHSUB => {:type => ::Thrift::Types::BOOL, :name => 'notificationDisabledWithSub'},
    PRIVACYSYNCCONTACTS => {:type => ::Thrift::Types::BOOL, :name => 'privacySyncContacts'},
    PRIVACYSEARCHBYPHONENUMBER => {:type => ::Thrift::Types::BOOL, :name => 'privacySearchByPhoneNumber'},
    PRIVACYSEARCHBYUSERID => {:type => ::Thrift::Types::BOOL, :name => 'privacySearchByUserid'},
    PRIVACYSEARCHBYEMAIL => {:type => ::Thrift::Types::BOOL, :name => 'privacySearchByEmail'},
    PRIVACYALLOWSECONDARYDEVICELOGIN => {:type => ::Thrift::Types::BOOL, :name => 'privacyAllowSecondaryDeviceLogin'},
    PRIVACYPROFILEIMAGEPOSTTOMYHOME => {:type => ::Thrift::Types::BOOL, :name => 'privacyProfileImagePostToMyhome'},
    PRIVACYRECEIVEMESSAGESFROMNOTFRIEND => {:type => ::Thrift::Types::BOOL, :name => 'privacyReceiveMessagesFromNotFriend'},
    CONTACTMYTICKET => {:type => ::Thrift::Types::STRING, :name => 'contactMyTicket'},
    IDENTITYPROVIDER => {:type => ::Thrift::Types::I32, :name => 'identityProvider', :enum_class => ::IdentityProvider},
    IDENTITYIDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'identityIdentifier'},
    SNSACCOUNTS => {:type => ::Thrift::Types::MAP, :name => 'snsAccounts', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SnsIdType}, :value => {:type => ::Thrift::Types::STRING}},
    PHONEREGISTRATION => {:type => ::Thrift::Types::BOOL, :name => 'phoneRegistration'},
    EMAILCONFIRMATIONSTATUS => {:type => ::Thrift::Types::I32, :name => 'emailConfirmationStatus', :enum_class => ::EmailConfirmationStatus},
    PREFERENCELOCALE => {:type => ::Thrift::Types::STRING, :name => 'preferenceLocale'},
    CUSTOMMODES => {:type => ::Thrift::Types::MAP, :name => 'customModes', :key => {:type => ::Thrift::Types::I32, :enum_class => ::CustomMode}, :value => {:type => ::Thrift::Types::STRING}},
    E2EEENABLE => {:type => ::Thrift::Types::BOOL, :name => 'e2eeEnable'},
    HITOKOTOBACKUPREQUESTED => {:type => ::Thrift::Types::BOOL, :name => 'hitokotoBackupRequested'},
    PRIVACYPROFILEMUSICPOSTTOMYHOME => {:type => ::Thrift::Types::BOOL, :name => 'privacyProfileMusicPostToMyhome'},
    PRIVACYALLOWNEARBY => {:type => ::Thrift::Types::BOOL, :name => 'privacyAllowNearby'},
    AGREEMENTNEARBYTIME => {:type => ::Thrift::Types::I64, :name => 'agreementNearbyTime'},
    AGREEMENTSQUARETIME => {:type => ::Thrift::Types::I64, :name => 'agreementSquareTime'},
    NOTIFICATIONMENTION => {:type => ::Thrift::Types::BOOL, :name => 'notificationMention'},
    BOTUSEAGREEMENTACCEPTEDAT => {:type => ::Thrift::Types::I64, :name => 'botUseAgreementAcceptedAt'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @identityProvider.nil? || ::IdentityProvider::VALID_VALUES.include?(@identityProvider)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field identityProvider!')
    end
    unless @emailConfirmationStatus.nil? || ::EmailConfirmationStatus::VALID_VALUES.include?(@emailConfirmationStatus)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field emailConfirmationStatus!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SimpleChannelClient
  include ::Thrift::Struct, ::Thrift::Struct_Union
  APPLICATIONTYPE = 1
  APPLICATIONVERSION = 2
  LOCALE = 3

  FIELDS = {
    APPLICATIONTYPE => {:type => ::Thrift::Types::STRING, :name => 'applicationType'},
    APPLICATIONVERSION => {:type => ::Thrift::Types::STRING, :name => 'applicationVersion'},
    LOCALE => {:type => ::Thrift::Types::STRING, :name => 'locale'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SimpleChannelContact
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  DISPLAYNAME = 2
  PICTURESTATUS = 3
  PICTUREPATH = 4
  STATUSMESSAGE = 5

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    PICTURESTATUS => {:type => ::Thrift::Types::STRING, :name => 'pictureStatus'},
    PICTUREPATH => {:type => ::Thrift::Types::STRING, :name => 'picturePath'},
    STATUSMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'statusMessage'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SnsFriend
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SNSUSERID = 1
  SNSUSERNAME = 2
  SNSIDTYPE = 3

  FIELDS = {
    SNSUSERID => {:type => ::Thrift::Types::STRING, :name => 'snsUserId'},
    SNSUSERNAME => {:type => ::Thrift::Types::STRING, :name => 'snsUserName'},
    SNSIDTYPE => {:type => ::Thrift::Types::I32, :name => 'snsIdType', :enum_class => ::SnsIdType}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @snsIdType.nil? || ::SnsIdType::VALID_VALUES.include?(@snsIdType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field snsIdType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SnsFriendContactRegistration
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CONTACT = 1
  SNSIDTYPE = 2
  SNSUSERID = 3

  FIELDS = {
    CONTACT => {:type => ::Thrift::Types::STRUCT, :name => 'contact', :class => ::Contact},
    SNSIDTYPE => {:type => ::Thrift::Types::I32, :name => 'snsIdType', :enum_class => ::SnsIdType},
    SNSUSERID => {:type => ::Thrift::Types::STRING, :name => 'snsUserId'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @snsIdType.nil? || ::SnsIdType::VALID_VALUES.include?(@snsIdType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field snsIdType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SnsFriendModification
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TYPE = 1
  SNSFRIEND = 2

  FIELDS = {
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::ModificationType},
    SNSFRIEND => {:type => ::Thrift::Types::STRUCT, :name => 'snsFriend', :class => ::SnsFriend}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::ModificationType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SnsFriends
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SNSFRIENDS = 1
  HASMORE = 2

  FIELDS = {
    SNSFRIENDS => {:type => ::Thrift::Types::LIST, :name => 'snsFriends', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SnsFriend}},
    HASMORE => {:type => ::Thrift::Types::BOOL, :name => 'hasMore'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SnsIdUserStatus
  include ::Thrift::Struct, ::Thrift::Struct_Union
  USEREXISTING = 1
  PHONENUMBERREGISTERED = 2
  SAMEDEVICE = 3

  FIELDS = {
    USEREXISTING => {:type => ::Thrift::Types::BOOL, :name => 'userExisting'},
    PHONENUMBERREGISTERED => {:type => ::Thrift::Types::BOOL, :name => 'phoneNumberRegistered'},
    SAMEDEVICE => {:type => ::Thrift::Types::BOOL, :name => 'sameDevice'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SnsProfile
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SNSUSERID = 1
  SNSUSERNAME = 2
  EMAIL = 3
  THUMBNAILURL = 4

  FIELDS = {
    SNSUSERID => {:type => ::Thrift::Types::STRING, :name => 'snsUserId'},
    SNSUSERNAME => {:type => ::Thrift::Types::STRING, :name => 'snsUserName'},
    EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email'},
    THUMBNAILURL => {:type => ::Thrift::Types::STRING, :name => 'thumbnailUrl'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SystemConfiguration
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ENDPOINT = 1
  ENDPOINTSSL = 2
  UPDATEURL = 3
  C2DMACCOUNT = 11
  NNISERVER = 12

  FIELDS = {
    ENDPOINT => {:type => ::Thrift::Types::STRING, :name => 'endpoint'},
    ENDPOINTSSL => {:type => ::Thrift::Types::STRING, :name => 'endpointSsl'},
    UPDATEURL => {:type => ::Thrift::Types::STRING, :name => 'updateUrl'},
    C2DMACCOUNT => {:type => ::Thrift::Types::STRING, :name => 'c2dmAccount'},
    NNISERVER => {:type => ::Thrift::Types::STRING, :name => 'nniServer'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Ticket
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  EXPIRATIONTIME = 10
  MAXUSECOUNT = 21

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    EXPIRATIONTIME => {:type => ::Thrift::Types::I64, :name => 'expirationTime'},
    MAXUSECOUNT => {:type => ::Thrift::Types::I32, :name => 'maxUseCount'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class TMessageBox
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  CHANNELID = 2
  LASTSEQ = 5
  UNREADCOUNT = 6
  LASTMODIFIEDTIME = 7
  STATUS = 8
  MIDTYPE = 9
  LASTMESSAGES = 10

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
    LASTSEQ => {:type => ::Thrift::Types::I64, :name => 'lastSeq'},
    UNREADCOUNT => {:type => ::Thrift::Types::I64, :name => 'unreadCount'},
    LASTMODIFIEDTIME => {:type => ::Thrift::Types::I64, :name => 'lastModifiedTime'},
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status'},
    MIDTYPE => {:type => ::Thrift::Types::I32, :name => 'midType', :enum_class => ::MIDType},
    LASTMESSAGES => {:type => ::Thrift::Types::LIST, :name => 'lastMessages', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Message}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @midType.nil? || ::MIDType::VALID_VALUES.include?(@midType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field midType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class TMessageBoxWrapUp
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MESSAGEBOX = 1
  NAME = 2
  CONTACTS = 3
  PICTUREREVISION = 4

  FIELDS = {
    MESSAGEBOX => {:type => ::Thrift::Types::STRUCT, :name => 'messageBox', :class => ::TMessageBox},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    CONTACTS => {:type => ::Thrift::Types::LIST, :name => 'contacts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
    PICTUREREVISION => {:type => ::Thrift::Types::STRING, :name => 'pictureRevision'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class TMessageBoxWrapUpResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MESSAGEBOXWRAPUPLIST = 1
  TOTALSIZE = 2

  FIELDS = {
    MESSAGEBOXWRAPUPLIST => {:type => ::Thrift::Types::LIST, :name => 'messageBoxWrapUpList', :element => {:type => ::Thrift::Types::STRUCT, :class => ::TMessageBoxWrapUp}},
    TOTALSIZE => {:type => ::Thrift::Types::I32, :name => 'totalSize'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class TMessageReadRangeEntry
  include ::Thrift::Struct, ::Thrift::Struct_Union
  STARTMESSAGEID = 1
  ENDMESSAGEID = 2
  STARTTIME = 3
  ENDTIME = 4

  FIELDS = {
    STARTMESSAGEID => {:type => ::Thrift::Types::I64, :name => 'startMessageId'},
    ENDMESSAGEID => {:type => ::Thrift::Types::I64, :name => 'endMessageId'},
    STARTTIME => {:type => ::Thrift::Types::I64, :name => 'startTime'},
    ENDTIME => {:type => ::Thrift::Types::I64, :name => 'endTime'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class TMessageReadRange
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHATID = 1
  RANGES = 2

  FIELDS = {
    CHATID => {:type => ::Thrift::Types::STRING, :name => 'chatId'},
    RANGES => {:type => ::Thrift::Types::MAP, :name => 'ranges', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TMessageReadRangeEntry}}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChatRoomAnnouncementContents
  include ::Thrift::Struct, ::Thrift::Struct_Union
  DISPLAYFIELDS = 1
  TEXT = 2
  LINK = 3
  THUMBNAIL = 4

  FIELDS = {
    DISPLAYFIELDS => {:type => ::Thrift::Types::I32, :name => 'displayFields'},
    TEXT => {:type => ::Thrift::Types::STRING, :name => 'text'},
    LINK => {:type => ::Thrift::Types::STRING, :name => 'link'},
    THUMBNAIL => {:type => ::Thrift::Types::STRING, :name => 'thumbnail'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChatRoomAnnouncement
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ANNOUNCEMENTSEQ = 1
  TYPE = 2
  CONTENTS = 3
  CREATORMID = 4
  CREATEDTIME = 5

  FIELDS = {
    ANNOUNCEMENTSEQ => {:type => ::Thrift::Types::I64, :name => 'announcementSeq'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::ChatRoomAnnouncementType},
    CONTENTS => {:type => ::Thrift::Types::STRUCT, :name => 'contents', :class => ::ChatRoomAnnouncementContents},
    CREATORMID => {:type => ::Thrift::Types::STRING, :name => 'creatorMid'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::ChatRoomAnnouncementType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ErrorExtraInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PRECONDITIONFAILEDEXTRAINFO = 1

  FIELDS = {
    PRECONDITIONFAILEDEXTRAINFO => {:type => ::Thrift::Types::I32, :name => 'preconditionFailedExtraInfo', :enum_class => ::PreconditionFailedExtraInfo}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @preconditionFailedExtraInfo.nil? || ::PreconditionFailedExtraInfo::VALID_VALUES.include?(@preconditionFailedExtraInfo)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field preconditionFailedExtraInfo!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SyncRelations
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SYNCALL = 1
  SYNCPARAMCONTACT = 2
  SYNCPARAMMID = 3

  FIELDS = {
    SYNCALL => {:type => ::Thrift::Types::BOOL, :name => 'syncAll'},
    SYNCPARAMCONTACT => {:type => ::Thrift::Types::LIST, :name => 'syncParamContact', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SyncParamContact}},
    SYNCPARAMMID => {:type => ::Thrift::Types::LIST, :name => 'syncParamMid', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SyncParamMid}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SyncScope
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SYNCPROFILE = 1
  SYNCSETTINGS = 2
  SYNCSTICKER = 3
  SYNCTHEMESHOP = 4
  CONTACT = 10
  GROUP = 11
  ROOM = 12
  CHAT = 13

  FIELDS = {
    SYNCPROFILE => {:type => ::Thrift::Types::BOOL, :name => 'syncProfile'},
    SYNCSETTINGS => {:type => ::Thrift::Types::BOOL, :name => 'syncSettings'},
    SYNCSTICKER => {:type => ::Thrift::Types::BOOL, :name => 'syncSticker'},
    SYNCTHEMESHOP => {:type => ::Thrift::Types::BOOL, :name => 'syncThemeShop'},
    CONTACT => {:type => ::Thrift::Types::STRUCT, :name => 'contact', :class => ::SyncRelations},
    GROUP => {:type => ::Thrift::Types::STRUCT, :name => 'group', :class => ::SyncRelations},
    ROOM => {:type => ::Thrift::Types::STRUCT, :name => 'room', :class => ::SyncRelations},
    CHAT => {:type => ::Thrift::Types::STRUCT, :name => 'chat', :class => ::SyncRelations}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class JoinSquareResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARE = 1
  SQUAREAUTHORITY = 2
  SQUARESTATUS = 3
  SQUAREMEMBER = 4
  SQUAREFEATURESET = 5
  NOTESTATUS = 6

  FIELDS = {
    SQUARE => {:type => ::Thrift::Types::STRUCT, :name => 'square', :class => ::Square},
    SQUAREAUTHORITY => {:type => ::Thrift::Types::STRUCT, :name => 'squareAuthority', :class => ::SquareAuthority},
    SQUARESTATUS => {:type => ::Thrift::Types::STRUCT, :name => 'squareStatus', :class => ::SquareStatus},
    SQUAREMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'squareMember', :class => ::SquareMember},
    SQUAREFEATURESET => {:type => ::Thrift::Types::STRUCT, :name => 'squareFeatureSet', :class => ::SquareFeatureSet},
    NOTESTATUS => {:type => ::Thrift::Types::STRUCT, :name => 'noteStatus', :class => ::NoteStatus}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class JoinSquareRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 2
  MEMBER = 3

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    MEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'member', :class => ::SquareMember}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class JoinSquareChatResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHAT = 1
  SQUARECHATSTATUS = 2
  SQUARECHATMEMBER = 3

  FIELDS = {
    SQUARECHAT => {:type => ::Thrift::Types::STRUCT, :name => 'squareChat', :class => ::SquareChat},
    SQUARECHATSTATUS => {:type => ::Thrift::Types::STRUCT, :name => 'squareChatStatus', :class => ::SquareChatStatus},
    SQUARECHATMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'squareChatMember', :class => ::SquareChatMember}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class JoinSquareChatRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SendMessageResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CREATEDSQUAREMESSAGE = 1

  FIELDS = {
    CREATEDSQUAREMESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'createdSquareMessage', :class => ::SquareMessage}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SendMessageRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REQSEQ = 1
  SQUARECHATMID = 2
  SQUAREMESSAGE = 3

  FIELDS = {
    REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    SQUAREMESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'squareMessage', :class => ::SquareMessage}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class MarkAsReadRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 2
  MESSAGEID = 4

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class MarkAsReadResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union

  FIELDS = {

  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SubscriptionState
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SUBSCRIPTIONID = 1
  TTLMILLIS = 2

  FIELDS = {
    SUBSCRIPTIONID => {:type => ::Thrift::Types::I64, :name => 'subscriptionId'},
    TTLMILLIS => {:type => ::Thrift::Types::I64, :name => 'ttlMillis'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ApproveSquareMembersResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  APPROVEDMEMBERS = 1
  STATUS = 2

  FIELDS = {
    APPROVEDMEMBERS => {:type => ::Thrift::Types::LIST, :name => 'approvedMembers', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SquareMember}},
    STATUS => {:type => ::Thrift::Types::STRUCT, :name => 'status', :class => ::SquareStatus}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ApproveSquareMembersRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 2
  REQUESTEDMEMBERMIDS = 3

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    REQUESTEDMEMBERMIDS => {:type => ::Thrift::Types::LIST, :name => 'requestedMemberMids', :element => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CreateSquareChatResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHAT = 1
  SQUARECHATSTATUS = 2
  SQUARECHATMEMBER = 3

  FIELDS = {
    SQUARECHAT => {:type => ::Thrift::Types::STRUCT, :name => 'squareChat', :class => ::SquareChat},
    SQUARECHATSTATUS => {:type => ::Thrift::Types::STRUCT, :name => 'squareChatStatus', :class => ::SquareChatStatus},
    SQUARECHATMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'squareChatMember', :class => ::SquareChatMember}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CreateSquareChatRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REQSEQ = 1
  SQUARECHAT = 2
  SQUAREMEMBERMIDS = 3

  FIELDS = {
    REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
    SQUARECHAT => {:type => ::Thrift::Types::STRUCT, :name => 'squareChat', :class => ::SquareChat},
    SQUAREMEMBERMIDS => {:type => ::Thrift::Types::LIST, :name => 'squareMemberMids', :element => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CreateSquareResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARE = 1
  CREATOR = 2
  AUTHORITY = 3
  STATUS = 4

  FIELDS = {
    SQUARE => {:type => ::Thrift::Types::STRUCT, :name => 'square', :class => ::Square},
    CREATOR => {:type => ::Thrift::Types::STRUCT, :name => 'creator', :class => ::SquareMember},
    AUTHORITY => {:type => ::Thrift::Types::STRUCT, :name => 'authority', :class => ::SquareAuthority},
    STATUS => {:type => ::Thrift::Types::STRUCT, :name => 'status', :class => ::SquareStatus}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CreateSquareRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REQSEQ = 1
  SQUARE = 2
  CREATOR = 3

  FIELDS = {
    REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
    SQUARE => {:type => ::Thrift::Types::STRUCT, :name => 'square', :class => ::Square},
    CREATOR => {:type => ::Thrift::Types::STRUCT, :name => 'creator', :class => ::SquareMember}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class DeleteSquareResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union

  FIELDS = {

  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class DeleteSquareRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 2
  REVISION = 3

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class DestroyMessageResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union

  FIELDS = {

  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class DestroyMessageRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 2
  MESSAGEID = 4

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareChatMembersRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  CONTINUATIONTOKEN = 2
  LIMIT = 3

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'},
    LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareChatMembersResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMEMBERS = 1
  CONTINUATIONTOKEN = 2

  FIELDS = {
    SQUARECHATMEMBERS => {:type => ::Thrift::Types::STRUCT, :name => 'squareChatMembers', :class => ::SquareMember},
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareChatStatusRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 2

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareChatStatusResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHATSTATUS = 1

  FIELDS = {
    CHATSTATUS => {:type => ::Thrift::Types::STRUCT, :name => 'chatStatus', :class => ::SquareChatStatus}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareChatRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareChatResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHAT = 1
  SQUARECHATMEMBER = 2
  SQUARECHATSTATUS = 3

  FIELDS = {
    SQUARECHAT => {:type => ::Thrift::Types::STRUCT, :name => 'squareChat', :class => ::SquareChat},
    SQUARECHATMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'squareChatMember', :class => ::SquareChatMember},
    SQUARECHATSTATUS => {:type => ::Thrift::Types::STRUCT, :name => 'squareChatStatus', :class => ::SquareChatStatus}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareAuthorityRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 1

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareAuthorityResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  AUTHORITY = 1

  FIELDS = {
    AUTHORITY => {:type => ::Thrift::Types::STRUCT, :name => 'authority', :class => ::SquareAuthority}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetJoinedSquaresRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CONTINUATIONTOKEN = 2
  LIMIT = 3

  FIELDS = {
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'},
    LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetJoinedSquaresResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARES = 1
  MEMBERS = 2
  AUTHORITIES = 3
  STATUSES = 4
  CONTINUATIONTOKEN = 5
  NOTESTATUSES = 6

  FIELDS = {
    SQUARES => {:type => ::Thrift::Types::LIST, :name => 'squares', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Square}},
    MEMBERS => {:type => ::Thrift::Types::MAP, :name => 'members', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::SquareMember}},
    AUTHORITIES => {:type => ::Thrift::Types::MAP, :name => 'authorities', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::SquareAuthority}},
    STATUSES => {:type => ::Thrift::Types::MAP, :name => 'statuses', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::SquareStatus}},
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'},
    NOTESTATUSES => {:type => ::Thrift::Types::MAP, :name => 'noteStatuses', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::NoteStatus}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetJoinableSquareChatsRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 1
  CONTINUATIONTOKEN = 10
  LIMIT = 11

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'},
    LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetJoinableSquareChatsResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATS = 1
  CONTINUATIONTOKEN = 2
  TOTALSQUARECHATCOUNT = 3
  SQUARECHATSTATUSES = 4

  FIELDS = {
    SQUARECHATS => {:type => ::Thrift::Types::LIST, :name => 'squareChats', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SquareChat}},
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'},
    TOTALSQUARECHATCOUNT => {:type => ::Thrift::Types::I32, :name => 'totalSquareChatCount'},
    SQUARECHATSTATUSES => {:type => ::Thrift::Types::MAP, :name => 'squareChatStatuses', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::SquareChatStatus}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetInvitationTicketUrlRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 2

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetInvitationTicketUrlResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  INVITATIONURL = 1

  FIELDS = {
    INVITATIONURL => {:type => ::Thrift::Types::STRING, :name => 'invitationURL'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class LeaveSquareRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 2

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class LeaveSquareResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union

  FIELDS = {

  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class LeaveSquareChatRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 2
  SAYGOODBYE = 3
  SQUARECHATMEMBERREVISION = 4

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    SAYGOODBYE => {:type => ::Thrift::Types::BOOL, :name => 'sayGoodbye'},
    SQUARECHATMEMBERREVISION => {:type => ::Thrift::Types::I64, :name => 'squareChatMemberRevision'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class LeaveSquareChatResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union

  FIELDS = {

  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareMemberSearchOption
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MEMBERSHIPSTATE = 1
  MEMBERROLES = 2
  DISPLAYNAME = 3
  ABLETORECEIVEMESSAGE = 4
  ABLETORECEIVEFRIENDREQUEST = 5
  CHATMIDTOEXCLUDEMEMBERS = 6
  INCLUDINGME = 7

  FIELDS = {
    MEMBERSHIPSTATE => {:type => ::Thrift::Types::I32, :name => 'membershipState', :enum_class => ::SquareMembershipState},
    MEMBERROLES => {:type => ::Thrift::Types::SET, :name => 'memberRoles', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquareMemberRole}},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    ABLETORECEIVEMESSAGE => {:type => ::Thrift::Types::I32, :name => 'ableToReceiveMessage', :enum_class => ::BooleanState},
    ABLETORECEIVEFRIENDREQUEST => {:type => ::Thrift::Types::I32, :name => 'ableToReceiveFriendRequest', :enum_class => ::BooleanState},
    CHATMIDTOEXCLUDEMEMBERS => {:type => ::Thrift::Types::STRING, :name => 'chatMidToExcludeMembers'},
    INCLUDINGME => {:type => ::Thrift::Types::BOOL, :name => 'includingMe'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @membershipState.nil? || ::SquareMembershipState::VALID_VALUES.include?(@membershipState)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field membershipState!')
    end
    unless @ableToReceiveMessage.nil? || ::BooleanState::VALID_VALUES.include?(@ableToReceiveMessage)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field ableToReceiveMessage!')
    end
    unless @ableToReceiveFriendRequest.nil? || ::BooleanState::VALID_VALUES.include?(@ableToReceiveFriendRequest)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field ableToReceiveFriendRequest!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SearchSquareMembersRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 2
  SEARCHOPTION = 3
  CONTINUATIONTOKEN = 4
  LIMIT = 5

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    SEARCHOPTION => {:type => ::Thrift::Types::STRUCT, :name => 'searchOption', :class => ::SquareMemberSearchOption},
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'},
    LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SearchSquareMembersResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MEMBERS = 1
  REVISION = 2
  CONTINUATIONTOKEN = 3
  TOTALCOUNT = 4

  FIELDS = {
    MEMBERS => {:type => ::Thrift::Types::LIST, :name => 'members', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SquareMember}},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'},
    TOTALCOUNT => {:type => ::Thrift::Types::I32, :name => 'totalCount'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class FindSquareByInvitationTicketRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  INVITATIONTICKET = 2

  FIELDS = {
    INVITATIONTICKET => {:type => ::Thrift::Types::STRING, :name => 'invitationTicket'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class FindSquareByInvitationTicketResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARE = 1
  MYMEMBERSHIP = 2
  SQUAREAUTHORITY = 3
  SQUARESTATUS = 4

  FIELDS = {
    SQUARE => {:type => ::Thrift::Types::STRUCT, :name => 'square', :class => ::Square},
    MYMEMBERSHIP => {:type => ::Thrift::Types::STRUCT, :name => 'myMembership', :class => ::SquareMember},
    SQUAREAUTHORITY => {:type => ::Thrift::Types::STRUCT, :name => 'squareAuthority', :class => ::SquareAuthority},
    SQUARESTATUS => {:type => ::Thrift::Types::STRUCT, :name => 'squareStatus', :class => ::SquareStatus}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventReceiveMessage
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  SQUAREMESSAGE = 2

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    SQUAREMESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'squareMessage', :class => ::SquareMessage}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventSendMessage
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  SQUAREMESSAGE = 2
  REQSEQ = 3

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    SQUAREMESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'squareMessage', :class => ::SquareMessage},
    REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedJoinSquareChat
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  JOINEDMEMBER = 2

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    JOINEDMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'joinedMember', :class => ::SquareMember}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedInviteIntoSquareChat
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  INVITEES = 2
  INVITOR = 3
  INVITORRELATION = 4

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    INVITEES => {:type => ::Thrift::Types::LIST, :name => 'invitees', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SquareMember}},
    INVITOR => {:type => ::Thrift::Types::STRUCT, :name => 'invitor', :class => ::SquareMember},
    INVITORRELATION => {:type => ::Thrift::Types::STRUCT, :name => 'invitorRelation', :class => ::SquareMemberRelation}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedLeaveSquareChat
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  SQUAREMEMBERMID = 2
  SAYGOODBYE = 3
  SQUAREMEMBER = 4

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    SQUAREMEMBERMID => {:type => ::Thrift::Types::STRING, :name => 'squareMemberMid'},
    SAYGOODBYE => {:type => ::Thrift::Types::BOOL, :name => 'sayGoodbye'},
    SQUAREMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'squareMember', :class => ::SquareMember}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedDestroyMessage
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  MESSAGEID = 3

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedMarkAsRead
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  SMEMBERMID = 2
  MESSAGEID = 4

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    SMEMBERMID => {:type => ::Thrift::Types::STRING, :name => 'sMemberMid'},
    MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedUpdateSquareMemberProfile
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  SQUAREMEMBER = 2

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    SQUAREMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'squareMember', :class => ::SquareMember}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedKickoutFromSquare
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  KICKEES = 2

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    KICKEES => {:type => ::Thrift::Types::LIST, :name => 'kickees', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SquareMember}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedShutdownSquare
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  SQUARE = 2

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    SQUARE => {:type => ::Thrift::Types::STRUCT, :name => 'square', :class => ::Square}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedDeleteSquareChat
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHAT = 1

  FIELDS = {
    SQUARECHAT => {:type => ::Thrift::Types::STRUCT, :name => 'squareChat', :class => ::SquareChat}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedUpdateSquareChatProfileName
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  EDITOR = 2
  UPDATEDCHATNAME = 3

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    EDITOR => {:type => ::Thrift::Types::STRUCT, :name => 'editor', :class => ::SquareMember},
    UPDATEDCHATNAME => {:type => ::Thrift::Types::STRING, :name => 'updatedChatName'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedUpdateSquareChatProfileImage
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  EDITOR = 2

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    EDITOR => {:type => ::Thrift::Types::STRUCT, :name => 'editor', :class => ::SquareMember}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedUpdateSquareChatStatus
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  STATUSWITHOUTMESSAGE = 2

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    STATUSWITHOUTMESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'statusWithoutMessage', :class => ::SquareChatStatusWithoutMessage}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedUpdateSquareStatus
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 1
  SQUARESTATUS = 2

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    SQUARESTATUS => {:type => ::Thrift::Types::STRUCT, :name => 'squareStatus', :class => ::SquareStatus}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedCreateSquareMember
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARE = 1
  SQUAREAUTHORITY = 2
  SQUARESTATUS = 3
  SQUAREMEMBER = 4
  SQUAREFEATURESET = 5

  FIELDS = {
    SQUARE => {:type => ::Thrift::Types::STRUCT, :name => 'square', :class => ::Square},
    SQUAREAUTHORITY => {:type => ::Thrift::Types::STRUCT, :name => 'squareAuthority', :class => ::SquareAuthority},
    SQUARESTATUS => {:type => ::Thrift::Types::STRUCT, :name => 'squareStatus', :class => ::SquareStatus},
    SQUAREMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'squareMember', :class => ::SquareMember},
    SQUAREFEATURESET => {:type => ::Thrift::Types::STRUCT, :name => 'squareFeatureSet', :class => ::SquareFeatureSet}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedCreateSquareChatMember
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  SQUAREMEMBERMID = 2
  SQUARECHATMEMBER = 3

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    SQUAREMEMBERMID => {:type => ::Thrift::Types::STRING, :name => 'squareMemberMid'},
    SQUARECHATMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'squareChatMember', :class => ::SquareChatMember}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedUpdateSquareMemberRelation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 1
  MYMEMBERMID = 2
  TARGETSQUAREMEMBERMID = 3
  SQUAREMEMBERRELATION = 4

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    MYMEMBERMID => {:type => ::Thrift::Types::STRING, :name => 'myMemberMid'},
    TARGETSQUAREMEMBERMID => {:type => ::Thrift::Types::STRING, :name => 'targetSquareMemberMid'},
    SQUAREMEMBERRELATION => {:type => ::Thrift::Types::STRUCT, :name => 'squareMemberRelation', :class => ::SquareMemberRelation}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedUpdateSquare
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 1
  SQUARE = 2

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    SQUARE => {:type => ::Thrift::Types::STRUCT, :name => 'square', :class => ::Square}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedUpdateSquareMember
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 1
  SQUAREMEMBERMID = 2
  SQUAREMEMBER = 3

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    SQUAREMEMBERMID => {:type => ::Thrift::Types::STRING, :name => 'squareMemberMid'},
    SQUAREMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'squareMember', :class => ::SquareMember}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedUpdateSquareChat
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 1
  SQUARECHATMID = 2
  SQUARECHAT = 3

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    SQUARECHAT => {:type => ::Thrift::Types::STRUCT, :name => 'squareChat', :class => ::SquareChat}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotificationJoinRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 1
  SQUARENAME = 2
  REQUESTMEMBERNAME = 3
  PROFILEIMAGEOBSHASH = 4

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    SQUARENAME => {:type => ::Thrift::Types::STRING, :name => 'squareName'},
    REQUESTMEMBERNAME => {:type => ::Thrift::Types::STRING, :name => 'requestMemberName'},
    PROFILEIMAGEOBSHASH => {:type => ::Thrift::Types::STRING, :name => 'profileImageObsHash'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotificationMemberUpdate
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 1
  SQUARENAME = 2
  PROFILEIMAGEOBSHASH = 3

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    SQUARENAME => {:type => ::Thrift::Types::STRING, :name => 'squareName'},
    PROFILEIMAGEOBSHASH => {:type => ::Thrift::Types::STRING, :name => 'profileImageObsHash'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotificationSquareDelete
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 1
  SQUARENAME = 2
  PROFILEIMAGEOBSHASH = 3

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    SQUARENAME => {:type => ::Thrift::Types::STRING, :name => 'squareName'},
    PROFILEIMAGEOBSHASH => {:type => ::Thrift::Types::STRING, :name => 'profileImageObsHash'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotificationSquareChatDelete
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  SQUARECHATNAME = 2
  PROFILEIMAGEOBSHASH = 3

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    SQUARECHATNAME => {:type => ::Thrift::Types::STRING, :name => 'squareChatName'},
    PROFILEIMAGEOBSHASH => {:type => ::Thrift::Types::STRING, :name => 'profileImageObsHash'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotificationMessage
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  SQUAREMESSAGE = 2
  SENDERDISPLAYNAME = 3
  UNREADCOUNT = 4
  REQUIREDTOFETCHCHATEVENTS = 5

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    SQUAREMESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'squareMessage', :class => ::SquareMessage},
    SENDERDISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'senderDisplayName'},
    UNREADCOUNT => {:type => ::Thrift::Types::I32, :name => 'unreadCount'},
    REQUIREDTOFETCHCHATEVENTS => {:type => ::Thrift::Types::BOOL, :name => 'requiredToFetchChatEvents'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedUpdateSquareChatMember
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1
  SQUAREMEMBERMID = 2
  SQUARECHATMEMBER = 3

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    SQUAREMEMBERMID => {:type => ::Thrift::Types::STRING, :name => 'squareMemberMid'},
    SQUARECHATMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'squareChatMember', :class => ::SquareChatMember}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedUpdateSquareAuthority
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 1
  SQUAREAUTHORITY = 2

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    SQUAREAUTHORITY => {:type => ::Thrift::Types::STRUCT, :name => 'squareAuthority', :class => ::SquareAuthority}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventNotifiedUpdateSquareFeatureSet
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREFEATURESET = 1

  FIELDS = {
    SQUAREFEATURESET => {:type => ::Thrift::Types::STRUCT, :name => 'squareFeatureSet', :class => ::SquareFeatureSet}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEventPayload
  include ::Thrift::Struct, ::Thrift::Struct_Union
  RECEIVEMESSAGE = 1
  SENDMESSAGE = 2
  NOTIFIEDJOINSQUARECHAT = 3
  NOTIFIEDINVITEINTOSQUARECHAT = 4
  NOTIFIEDLEAVESQUARECHAT = 5
  NOTIFIEDDESTROYMESSAGE = 6
  NOTIFIEDMARKASREAD = 7
  NOTIFIEDUPDATESQUAREMEMBERPROFILE = 8
  NOTIFIEDKICKOUTFROMSQUARE = 20
  NOTIFIEDSHUTDOWNSQUARE = 19
  NOTIFIEDDELETESQUARECHAT = 21
  NOTIFIEDUPDATESQUARECHATPROFILENAME = 31
  NOTIFIEDUPDATESQUARECHATPROFILEIMAGE = 32
  NOTIFIEDUPDATESQUARESTATUS = 14
  NOTIFIEDUPDATESQUARECHATSTATUS = 15
  NOTIFIEDCREATESQUAREMEMBER = 16
  NOTIFIEDCREATESQUARECHATMEMBER = 17
  NOTIFIEDUPDATESQUAREMEMBERRELATION = 18
  NOTIFIEDUPDATESQUARE = 9
  NOTIFIEDUPDATESQUAREMEMBER = 10
  NOTIFIEDUPDATESQUARECHAT = 11
  NOTIFICATIONJOINREQUEST = 22
  NOTIFICATIONJOINED = 23
  NOTIFICATIONPROMOTECOADMIN = 24
  NOTIFICATIONPROMOTEADMIN = 25
  NOTIFICATIONDEMOTEMEMBER = 26
  NOTIFICATIONKICKEDOUT = 27
  NOTIFICATIONSQUAREDELETE = 28
  NOTIFICATIONSQUARECHATDELETE = 29
  NOTIFICATIONMESSAGE = 30
  NOTIFIEDUPDATESQUARECHATMEMBER = 12
  NOTIFIEDUPDATESQUAREAUTHORITY = 13
  NOTIFIEDUPDATESQUAREFEATURESET = 33

  FIELDS = {
    RECEIVEMESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'receiveMessage', :class => ::SquareEventReceiveMessage},
    SENDMESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'sendMessage', :class => ::SquareEventSendMessage},
    NOTIFIEDJOINSQUARECHAT => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedJoinSquareChat', :class => ::SquareEventNotifiedJoinSquareChat},
    NOTIFIEDINVITEINTOSQUARECHAT => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedInviteIntoSquareChat', :class => ::SquareEventNotifiedInviteIntoSquareChat},
    NOTIFIEDLEAVESQUARECHAT => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedLeaveSquareChat', :class => ::SquareEventNotifiedLeaveSquareChat},
    NOTIFIEDDESTROYMESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedDestroyMessage', :class => ::SquareEventNotifiedDestroyMessage},
    NOTIFIEDMARKASREAD => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedMarkAsRead', :class => ::SquareEventNotifiedMarkAsRead},
    NOTIFIEDUPDATESQUAREMEMBERPROFILE => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedUpdateSquareMemberProfile', :class => ::SquareEventNotifiedUpdateSquareMemberProfile},
    NOTIFIEDKICKOUTFROMSQUARE => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedKickoutFromSquare', :class => ::SquareEventNotifiedKickoutFromSquare},
    NOTIFIEDSHUTDOWNSQUARE => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedShutdownSquare', :class => ::SquareEventNotifiedShutdownSquare},
    NOTIFIEDDELETESQUARECHAT => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedDeleteSquareChat', :class => ::SquareEventNotifiedDeleteSquareChat},
    NOTIFIEDUPDATESQUARECHATPROFILENAME => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedUpdateSquareChatProfileName', :class => ::SquareEventNotifiedUpdateSquareChatProfileName},
    NOTIFIEDUPDATESQUARECHATPROFILEIMAGE => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedUpdateSquareChatProfileImage', :class => ::SquareEventNotifiedUpdateSquareChatProfileImage},
    NOTIFIEDUPDATESQUARESTATUS => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedUpdateSquareStatus', :class => ::SquareEventNotifiedUpdateSquareStatus},
    NOTIFIEDUPDATESQUARECHATSTATUS => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedUpdateSquareChatStatus', :class => ::SquareEventNotifiedUpdateSquareChatStatus},
    NOTIFIEDCREATESQUAREMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedCreateSquareMember', :class => ::SquareEventNotifiedCreateSquareMember},
    NOTIFIEDCREATESQUARECHATMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedCreateSquareChatMember', :class => ::SquareEventNotifiedCreateSquareChatMember},
    NOTIFIEDUPDATESQUAREMEMBERRELATION => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedUpdateSquareMemberRelation', :class => ::SquareEventNotifiedUpdateSquareMemberRelation},
    NOTIFIEDUPDATESQUARE => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedUpdateSquare', :class => ::SquareEventNotifiedUpdateSquare},
    NOTIFIEDUPDATESQUAREMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedUpdateSquareMember', :class => ::SquareEventNotifiedUpdateSquareMember},
    NOTIFIEDUPDATESQUARECHAT => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedUpdateSquareChat', :class => ::SquareEventNotifiedUpdateSquareChat},
    NOTIFICATIONJOINREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'notificationJoinRequest', :class => ::SquareEventNotificationJoinRequest},
    NOTIFICATIONJOINED => {:type => ::Thrift::Types::STRUCT, :name => 'notificationJoined', :class => ::SquareEventNotificationMemberUpdate},
    NOTIFICATIONPROMOTECOADMIN => {:type => ::Thrift::Types::STRUCT, :name => 'notificationPromoteCoadmin', :class => ::SquareEventNotificationMemberUpdate},
    NOTIFICATIONPROMOTEADMIN => {:type => ::Thrift::Types::STRUCT, :name => 'notificationPromoteAdmin', :class => ::SquareEventNotificationMemberUpdate},
    NOTIFICATIONDEMOTEMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'notificationDemoteMember', :class => ::SquareEventNotificationMemberUpdate},
    NOTIFICATIONKICKEDOUT => {:type => ::Thrift::Types::STRUCT, :name => 'notificationKickedOut', :class => ::SquareEventNotificationMemberUpdate},
    NOTIFICATIONSQUAREDELETE => {:type => ::Thrift::Types::STRUCT, :name => 'notificationSquareDelete', :class => ::SquareEventNotificationSquareDelete},
    NOTIFICATIONSQUARECHATDELETE => {:type => ::Thrift::Types::STRUCT, :name => 'notificationSquareChatDelete', :class => ::SquareEventNotificationSquareChatDelete},
    NOTIFICATIONMESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'notificationMessage', :class => ::SquareEventNotificationMessage},
    NOTIFIEDUPDATESQUARECHATMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedUpdateSquareChatMember', :class => ::SquareEventNotifiedUpdateSquareChatMember},
    NOTIFIEDUPDATESQUAREAUTHORITY => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedUpdateSquareAuthority', :class => ::SquareEventNotifiedUpdateSquareAuthority},
    NOTIFIEDUPDATESQUAREFEATURESET => {:type => ::Thrift::Types::STRUCT, :name => 'notifiedUpdateSquareFeatureSet', :class => ::SquareEventNotifiedUpdateSquareFeatureSet}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareEvent
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CREATEDTIME = 2
  TYPE = 3
  PAYLOAD = 4
  SYNCTOKEN = 5
  EVENTSTATUS = 6

  FIELDS = {
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::SquareEventType},
    PAYLOAD => {:type => ::Thrift::Types::STRUCT, :name => 'payload', :class => ::SquareEventPayload},
    SYNCTOKEN => {:type => ::Thrift::Types::STRING, :name => 'syncToken'},
    EVENTSTATUS => {:type => ::Thrift::Types::I32, :name => 'eventStatus', :enum_class => ::SquareEventStatus}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::SquareEventType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
    unless @eventStatus.nil? || ::SquareEventStatus::VALID_VALUES.include?(@eventStatus)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field eventStatus!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class FetchMyEventsRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SUBSCRIPTIONID = 1
  SYNCTOKEN = 2
  LIMIT = 3
  CONTINUATIONTOKEN = 4

  FIELDS = {
    SUBSCRIPTIONID => {:type => ::Thrift::Types::I64, :name => 'subscriptionId'},
    SYNCTOKEN => {:type => ::Thrift::Types::STRING, :name => 'syncToken'},
    LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'},
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class FetchMyEventsResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SUBSCRIPTION = 1
  EVENTS = 2
  SYNCTOKEN = 3
  CONTINUATIONTOKEN = 4

  FIELDS = {
    SUBSCRIPTION => {:type => ::Thrift::Types::STRUCT, :name => 'subscription', :class => ::SubscriptionState},
    EVENTS => {:type => ::Thrift::Types::LIST, :name => 'events', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SquareEvent}},
    SYNCTOKEN => {:type => ::Thrift::Types::STRING, :name => 'syncToken'},
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class FetchSquareChatEventsRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SUBSCRIPTIONID = 1
  SQUARECHATMID = 2
  SYNCTOKEN = 3
  LIMIT = 4
  DIRECTION = 5

  FIELDS = {
    SUBSCRIPTIONID => {:type => ::Thrift::Types::I64, :name => 'subscriptionId'},
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    SYNCTOKEN => {:type => ::Thrift::Types::STRING, :name => 'syncToken'},
    LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'},
    DIRECTION => {:type => ::Thrift::Types::I32, :name => 'direction', :enum_class => ::FetchDirection}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @direction.nil? || ::FetchDirection::VALID_VALUES.include?(@direction)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field direction!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class FetchSquareChatEventsResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SUBSCRIPTION = 1
  EVENTS = 2
  SYNCTOKEN = 3
  CONTINUATIONTOKEN = 4

  FIELDS = {
    SUBSCRIPTION => {:type => ::Thrift::Types::STRUCT, :name => 'subscription', :class => ::SubscriptionState},
    EVENTS => {:type => ::Thrift::Types::LIST, :name => 'events', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SquareEvent}},
    SYNCTOKEN => {:type => ::Thrift::Types::STRING, :name => 'syncToken'},
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class InviteToSquareRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 2
  INVITEES = 3
  SQUARECHATMID = 4

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    INVITEES => {:type => ::Thrift::Types::LIST, :name => 'invitees', :element => {:type => ::Thrift::Types::STRING}},
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class InviteToSquareResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union

  FIELDS = {

  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class InviteToSquareChatRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  INVITEEMIDS = 1
  SQUARECHATMID = 2

  FIELDS = {
    INVITEEMIDS => {:type => ::Thrift::Types::LIST, :name => 'inviteeMids', :element => {:type => ::Thrift::Types::STRING}},
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class InviteToSquareChatResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  INVITEEMIDS = 1

  FIELDS = {
    INVITEEMIDS => {:type => ::Thrift::Types::LIST, :name => 'inviteeMids', :element => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareMemberRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMEMBERMID = 1

  FIELDS = {
    SQUAREMEMBERMID => {:type => ::Thrift::Types::STRING, :name => 'squareMemberMid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareMemberResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMEMBER = 1
  RELATION = 2
  ONEONONECHATMID = 3

  FIELDS = {
    SQUAREMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'squareMember', :class => ::SquareMember},
    RELATION => {:type => ::Thrift::Types::STRUCT, :name => 'relation', :class => ::SquareMemberRelation},
    ONEONONECHATMID => {:type => ::Thrift::Types::STRING, :name => 'oneOnOneChatMid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareMembersRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MIDS = 2

  FIELDS = {
    MIDS => {:type => ::Thrift::Types::SET, :name => 'mids', :element => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareMembersResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MEMBERS = 1

  FIELDS = {
    MEMBERS => {:type => ::Thrift::Types::STRUCT, :name => 'members', :class => ::SquareMember}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareMemberRelationsRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  STATE = 2
  CONTINUATIONTOKEN = 3
  LIMIT = 4

  FIELDS = {
    STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => ::SquareMemberRelationState},
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'},
    LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @state.nil? || ::SquareMemberRelationState::VALID_VALUES.include?(@state)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareMemberRelationsResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMEMBERS = 1
  RELATIONS = 2
  CONTINUATIONTOKEN = 3

  FIELDS = {
    SQUAREMEMBERS => {:type => ::Thrift::Types::LIST, :name => 'squareMembers', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SquareMember}},
    RELATIONS => {:type => ::Thrift::Types::MAP, :name => 'relations', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::SquareMemberRelation}},
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareMemberRelationRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 2
  TARGETSQUAREMEMBERMID = 3

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    TARGETSQUAREMEMBERMID => {:type => ::Thrift::Types::STRING, :name => 'targetSquareMemberMid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareMemberRelationResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 1
  TARGETSQUAREMEMBERMID = 2
  RELATION = 3

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    TARGETSQUAREMEMBERMID => {:type => ::Thrift::Types::STRING, :name => 'targetSquareMemberMid'},
    RELATION => {:type => ::Thrift::Types::STRUCT, :name => 'relation', :class => ::SquareMemberRelation}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Category
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  NAME = 2

  FIELDS = {
    ID => {:type => ::Thrift::Types::I32, :name => 'id'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareCategoriesRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union

  FIELDS = {

  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareCategoriesResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CATEGORYLIST = 1

  FIELDS = {
    CATEGORYLIST => {:type => ::Thrift::Types::LIST, :name => 'categoryList', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Category}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateSquareRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  UPDATEDATTRS = 2
  SQUARE = 3

  FIELDS = {
    UPDATEDATTRS => {:type => ::Thrift::Types::SET, :name => 'updatedAttrs', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquareAttribute}},
    SQUARE => {:type => ::Thrift::Types::STRUCT, :name => 'square', :class => ::Square}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateSquareResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  UPDATEDATTRS = 1
  SQUARE = 2

  FIELDS = {
    UPDATEDATTRS => {:type => ::Thrift::Types::SET, :name => 'updatedAttrs', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquareAttribute}},
    SQUARE => {:type => ::Thrift::Types::STRUCT, :name => 'square', :class => ::Square}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SearchSquaresRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  QUERY = 2
  CONTINUATIONTOKEN = 3
  LIMIT = 4

  FIELDS = {
    QUERY => {:type => ::Thrift::Types::STRING, :name => 'query'},
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'},
    LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SearchSquaresResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARES = 1
  SQUARESTATUSES = 2
  MYMEMBERSHIPS = 3
  CONTINUATIONTOKEN = 4
  NOTESTATUSES = 5

  FIELDS = {
    SQUARES => {:type => ::Thrift::Types::LIST, :name => 'squares', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Square}},
    SQUARESTATUSES => {:type => ::Thrift::Types::MAP, :name => 'squareStatuses', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::SquareStatus}},
    MYMEMBERSHIPS => {:type => ::Thrift::Types::MAP, :name => 'myMemberships', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::SquareMember}},
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'},
    NOTESTATUSES => {:type => ::Thrift::Types::MAP, :name => 'noteStatuses', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::NoteStatus}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareFeatureSetRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 2

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareFeatureSetResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREFEATURESET = 1

  FIELDS = {
    SQUAREFEATURESET => {:type => ::Thrift::Types::STRUCT, :name => 'squareFeatureSet', :class => ::SquareFeatureSet}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateSquareFeatureSetRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  UPDATEATTRIBUTES = 2
  SQUAREFEATURESET = 3

  FIELDS = {
    UPDATEATTRIBUTES => {:type => ::Thrift::Types::SET, :name => 'updateAttributes', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquareFeatureSetAttribute}},
    SQUAREFEATURESET => {:type => ::Thrift::Types::STRUCT, :name => 'squareFeatureSet', :class => ::SquareFeatureSet}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateSquareFeatureSetResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  UPDATEATTRIBUTES = 1
  SQUAREFEATURESET = 2

  FIELDS = {
    UPDATEATTRIBUTES => {:type => ::Thrift::Types::SET, :name => 'updateAttributes', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquareFeatureSetAttribute}},
    SQUAREFEATURESET => {:type => ::Thrift::Types::STRUCT, :name => 'squareFeatureSet', :class => ::SquareFeatureSet}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateSquareMemberRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  UPDATEDATTRS = 2
  UPDATEDPREFERENCEATTRS = 3
  SQUAREMEMBER = 4

  FIELDS = {
    UPDATEDATTRS => {:type => ::Thrift::Types::SET, :name => 'updatedAttrs', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquareMemberAttribute}},
    UPDATEDPREFERENCEATTRS => {:type => ::Thrift::Types::SET, :name => 'updatedPreferenceAttrs', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquarePreferenceAttribute}},
    SQUAREMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'squareMember', :class => ::SquareMember}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateSquareMemberResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  UPDATEDATTRS = 1
  SQUAREMEMBER = 2
  UPDATEDPREFERENCEATTRS = 3

  FIELDS = {
    UPDATEDATTRS => {:type => ::Thrift::Types::SET, :name => 'updatedAttrs', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquareMemberAttribute}},
    SQUAREMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'squareMember', :class => ::SquareMember},
    UPDATEDPREFERENCEATTRS => {:type => ::Thrift::Types::SET, :name => 'updatedPreferenceAttrs', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquarePreferenceAttribute}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateSquareMembersRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  UPDATEDATTRS = 2
  MEMBERS = 3

  FIELDS = {
    UPDATEDATTRS => {:type => ::Thrift::Types::SET, :name => 'updatedAttrs', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquareMemberAttribute}},
    MEMBERS => {:type => ::Thrift::Types::LIST, :name => 'members', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SquareMember}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateSquareMembersResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  UPDATEDATTRS = 1
  EDITOR = 2
  MEMBERS = 3

  FIELDS = {
    UPDATEDATTRS => {:type => ::Thrift::Types::SET, :name => 'updatedAttrs', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquareMemberAttribute}},
    EDITOR => {:type => ::Thrift::Types::STRUCT, :name => 'editor', :class => ::SquareMember},
    MEMBERS => {:type => ::Thrift::Types::MAP, :name => 'members', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::SquareMember}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class RejectSquareMembersRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 2
  REQUESTEDMEMBERMIDS = 3

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    REQUESTEDMEMBERMIDS => {:type => ::Thrift::Types::LIST, :name => 'requestedMemberMids', :element => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class RejectSquareMembersResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REJECTEDMEMBERS = 1
  STATUS = 2

  FIELDS = {
    REJECTEDMEMBERS => {:type => ::Thrift::Types::LIST, :name => 'rejectedMembers', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SquareMember}},
    STATUS => {:type => ::Thrift::Types::STRUCT, :name => 'status', :class => ::SquareStatus}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class RemoveSubscriptionsRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  UNSUBSCRIPTIONS = 2

  FIELDS = {
    UNSUBSCRIPTIONS => {:type => ::Thrift::Types::LIST, :name => 'unsubscriptions', :element => {:type => ::Thrift::Types::I64}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class RemoveSubscriptionsResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union

  FIELDS = {

  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class RefreshSubscriptionsRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SUBSCRIPTIONS = 2

  FIELDS = {
    SUBSCRIPTIONS => {:type => ::Thrift::Types::LIST, :name => 'subscriptions', :element => {:type => ::Thrift::Types::I64}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class RefreshSubscriptionsResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TTLMILLIS = 1
  SUBSCRIPTIONSTATES = 2

  FIELDS = {
    TTLMILLIS => {:type => ::Thrift::Types::I64, :name => 'ttlMillis'},
    SUBSCRIPTIONSTATES => {:type => ::Thrift::Types::MAP, :name => 'subscriptionStates', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::SubscriptionState}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateSquareChatRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  UPDATEDATTRS = 2
  SQUARECHAT = 3

  FIELDS = {
    UPDATEDATTRS => {:type => ::Thrift::Types::SET, :name => 'updatedAttrs', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquareChatAttribute}},
    SQUARECHAT => {:type => ::Thrift::Types::STRUCT, :name => 'squareChat', :class => ::SquareChat}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateSquareChatResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  UPDATEDATTRS = 1
  SQUARECHAT = 2

  FIELDS = {
    UPDATEDATTRS => {:type => ::Thrift::Types::SET, :name => 'updatedAttrs', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquareChatAttribute}},
    SQUARECHAT => {:type => ::Thrift::Types::STRUCT, :name => 'squareChat', :class => ::SquareChat}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class DeleteSquareChatRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 2
  REVISION = 3

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class DeleteSquareChatResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union

  FIELDS = {

  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateSquareChatMemberRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  UPDATEDATTRS = 2
  CHATMEMBER = 3

  FIELDS = {
    UPDATEDATTRS => {:type => ::Thrift::Types::SET, :name => 'updatedAttrs', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquareChatMemberAttribute}},
    CHATMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'chatMember', :class => ::SquareChatMember}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateSquareChatMemberResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  UPDATEDCHATMEMBER = 1

  FIELDS = {
    UPDATEDCHATMEMBER => {:type => ::Thrift::Types::STRUCT, :name => 'updatedChatMember', :class => ::SquareChatMember}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateSquareAuthorityRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  UPDATEATTRIBUTES = 2
  AUTHORITY = 3

  FIELDS = {
    UPDATEATTRIBUTES => {:type => ::Thrift::Types::SET, :name => 'updateAttributes', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquareAuthorityAttribute}},
    AUTHORITY => {:type => ::Thrift::Types::STRUCT, :name => 'authority', :class => ::SquareAuthority}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateSquareAuthorityResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  UPDATDATTRIBUTES = 1
  AUTHORITY = 2

  FIELDS = {
    UPDATDATTRIBUTES => {:type => ::Thrift::Types::SET, :name => 'updatdAttributes', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquareAuthorityAttribute}},
    AUTHORITY => {:type => ::Thrift::Types::STRUCT, :name => 'authority', :class => ::SquareAuthority}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateSquareMemberRelationRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 2
  TARGETSQUAREMEMBERMID = 3
  UPDATEDATTRS = 4
  RELATION = 5

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    TARGETSQUAREMEMBERMID => {:type => ::Thrift::Types::STRING, :name => 'targetSquareMemberMid'},
    UPDATEDATTRS => {:type => ::Thrift::Types::SET, :name => 'updatedAttrs', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquareMemberRelationAttribute}},
    RELATION => {:type => ::Thrift::Types::STRUCT, :name => 'relation', :class => ::SquareMemberRelation}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateSquareMemberRelationResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 1
  TARGETSQUAREMEMBERMID = 2
  UPDATEDATTRS = 3
  RELATION = 4

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    TARGETSQUAREMEMBERMID => {:type => ::Thrift::Types::STRING, :name => 'targetSquareMemberMid'},
    UPDATEDATTRS => {:type => ::Thrift::Types::SET, :name => 'updatedAttrs', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SquareMemberRelationAttribute}},
    RELATION => {:type => ::Thrift::Types::STRUCT, :name => 'relation', :class => ::SquareMemberRelation}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ReportSquareRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 2
  REPORTTYPE = 3
  OTHERREASON = 4

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    REPORTTYPE => {:type => ::Thrift::Types::I32, :name => 'reportType', :enum_class => ::ReportType},
    OTHERREASON => {:type => ::Thrift::Types::STRING, :name => 'otherReason'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @reportType.nil? || ::ReportType::VALID_VALUES.include?(@reportType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field reportType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ReportSquareResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union

  FIELDS = {

  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ReportSquareChatRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 2
  SQUARECHATMID = 3
  REPORTTYPE = 5
  OTHERREASON = 6

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    REPORTTYPE => {:type => ::Thrift::Types::I32, :name => 'reportType', :enum_class => ::ReportType},
    OTHERREASON => {:type => ::Thrift::Types::STRING, :name => 'otherReason'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @reportType.nil? || ::ReportType::VALID_VALUES.include?(@reportType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field reportType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ReportSquareChatResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union

  FIELDS = {

  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ReportSquareMessageRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 2
  SQUARECHATMID = 3
  SQUAREMESSAGEID = 4
  REPORTTYPE = 5
  OTHERREASON = 6

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    SQUAREMESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'squareMessageId'},
    REPORTTYPE => {:type => ::Thrift::Types::I32, :name => 'reportType', :enum_class => ::ReportType},
    OTHERREASON => {:type => ::Thrift::Types::STRING, :name => 'otherReason'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @reportType.nil? || ::ReportType::VALID_VALUES.include?(@reportType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field reportType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ReportSquareMessageResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union

  FIELDS = {

  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ReportSquareMemberRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMEMBERMID = 2
  REPORTTYPE = 3
  OTHERREASON = 4
  SQUARECHATMID = 5

  FIELDS = {
    SQUAREMEMBERMID => {:type => ::Thrift::Types::STRING, :name => 'squareMemberMid'},
    REPORTTYPE => {:type => ::Thrift::Types::I32, :name => 'reportType', :enum_class => ::ReportType},
    OTHERREASON => {:type => ::Thrift::Types::STRING, :name => 'otherReason'},
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @reportType.nil? || ::ReportType::VALID_VALUES.include?(@reportType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field reportType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ReportSquareMemberResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union

  FIELDS = {

  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 2

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARE = 1
  MYMEMBERSHIP = 2
  SQUAREAUTHORITY = 3
  SQUARESTATUS = 4
  SQUAREFEATURESET = 5
  NOTESTATUS = 6

  FIELDS = {
    SQUARE => {:type => ::Thrift::Types::STRUCT, :name => 'square', :class => ::Square},
    MYMEMBERSHIP => {:type => ::Thrift::Types::STRUCT, :name => 'myMembership', :class => ::SquareMember},
    SQUAREAUTHORITY => {:type => ::Thrift::Types::STRUCT, :name => 'squareAuthority', :class => ::SquareAuthority},
    SQUARESTATUS => {:type => ::Thrift::Types::STRUCT, :name => 'squareStatus', :class => ::SquareStatus},
    SQUAREFEATURESET => {:type => ::Thrift::Types::STRUCT, :name => 'squareFeatureSet', :class => ::SquareFeatureSet},
    NOTESTATUS => {:type => ::Thrift::Types::STRUCT, :name => 'noteStatus', :class => ::NoteStatus}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareStatusRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 2

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareStatusResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARESTATUS = 1

  FIELDS = {
    SQUARESTATUS => {:type => ::Thrift::Types::STRUCT, :name => 'squareStatus', :class => ::SquareStatus}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetNoteStatusRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 2

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetNoteStatusResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUAREMID = 1
  STATUS = 2

  FIELDS = {
    SQUAREMID => {:type => ::Thrift::Types::STRING, :name => 'squareMid'},
    STATUS => {:type => ::Thrift::Types::STRUCT, :name => 'status', :class => ::NoteStatus}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CreateSquareChatAnnouncementRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REQSEQ = 1
  SQUARECHATMID = 2
  SQUARECHATANNOUNCEMENT = 3

  FIELDS = {
    REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    SQUARECHATANNOUNCEMENT => {:type => ::Thrift::Types::STRUCT, :name => 'squareChatAnnouncement', :class => ::SquareChatAnnouncement}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CreateSquareChatAnnouncementResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ANNOUNCEMENT = 1

  FIELDS = {
    ANNOUNCEMENT => {:type => ::Thrift::Types::STRUCT, :name => 'announcement', :class => ::SquareChatAnnouncement}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class DeleteSquareChatAnnouncementRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 2
  ANNOUNCEMENTSEQ = 3

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'},
    ANNOUNCEMENTSEQ => {:type => ::Thrift::Types::I64, :name => 'announcementSeq'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class DeleteSquareChatAnnouncementResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union

  FIELDS = {

  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareChatAnnouncementsRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 2

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetSquareChatAnnouncementsResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ANNOUNCEMENTS = 1

  FIELDS = {
    ANNOUNCEMENTS => {:type => ::Thrift::Types::LIST, :name => 'announcements', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SquareChatAnnouncement}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetJoinedSquareChatsRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CONTINUATIONTOKEN = 2
  LIMIT = 3

  FIELDS = {
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'},
    LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetJoinedSquareChatsResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHATS = 1
  CHATMEMBERS = 2
  STATUSES = 3
  CONTINUATIONTOKEN = 4

  FIELDS = {
    CHATS => {:type => ::Thrift::Types::LIST, :name => 'chats', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SquareChat}},
    CHATMEMBERS => {:type => ::Thrift::Types::MAP, :name => 'chatMembers', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::SquareChatMember}},
    STATUSES => {:type => ::Thrift::Types::MAP, :name => 'statuses', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::SquareChatStatus}},
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class TalkException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CODE = 1
  REASON = 2
  PARAMETERMAP = 3

  FIELDS = {
    CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::ErrorCode},
    REASON => {:type => ::Thrift::Types::STRING, :name => 'reason'},
    PARAMETERMAP => {:type => ::Thrift::Types::MAP, :name => 'parameterMap', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @code.nil? || ::ErrorCode::VALID_VALUES.include?(@code)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ShouldSyncException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SYNCOPREVISION = 1
  SYNCSCOPE = 2
  SYNCREASON = 3
  MESSAGE = 4

  FIELDS = {
    SYNCOPREVISION => {:type => ::Thrift::Types::I64, :name => 'syncOpRevision'},
    SYNCSCOPE => {:type => ::Thrift::Types::STRUCT, :name => 'syncScope', :class => ::SyncScope},
    SYNCREASON => {:type => ::Thrift::Types::I32, :name => 'syncReason', :enum_class => ::SyncTriggerReason},
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @syncReason.nil? || ::SyncTriggerReason::VALID_VALUES.include?(@syncReason)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field syncReason!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class PointException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CODE = 1
  REASON = 2
  EXTRA = 3

  FIELDS = {
    CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::PointErrorCode},
    REASON => {:type => ::Thrift::Types::STRING, :name => 'reason'},
    EXTRA => {:type => ::Thrift::Types::MAP, :name => 'extra', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @code.nil? || ::PointErrorCode::VALID_VALUES.include?(@code)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CODE = 1
  REASON = 2
  PARAMETERMAP = 3

  FIELDS = {
    CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::ChannelErrorCode},
    REASON => {:type => ::Thrift::Types::STRING, :name => 'reason'},
    PARAMETERMAP => {:type => ::Thrift::Types::MAP, :name => 'parameterMap', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @code.nil? || ::ChannelErrorCode::VALID_VALUES.include?(@code)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ERRORCODE = 1
  ERROREXTRAINFO = 2
  REASON = 3

  FIELDS = {
    ERRORCODE => {:type => ::Thrift::Types::I32, :name => 'errorCode', :enum_class => ::SQErrorCode},
    ERROREXTRAINFO => {:type => ::Thrift::Types::STRUCT, :name => 'errorExtraInfo', :class => ::ErrorExtraInfo},
    REASON => {:type => ::Thrift::Types::STRING, :name => 'reason'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @errorCode.nil? || ::SQErrorCode::VALID_VALUES.include?(@errorCode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field errorCode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class UniversalNotificationServiceException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CODE = 1
  REASON = 2
  PARAMETERMAP = 3

  FIELDS = {
    CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::UniversalNotificationServiceErrorCode},
    REASON => {:type => ::Thrift::Types::STRING, :name => 'reason'},
    PARAMETERMAP => {:type => ::Thrift::Types::MAP, :name => 'parameterMap', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @code.nil? || ::UniversalNotificationServiceErrorCode::VALID_VALUES.include?(@code)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateBuddyProfileResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REQUESTID = 1
  STATE = 2
  EVENTNO = 3
  RECEIVERCOUNT = 11
  SUCCESSCOUNT = 12
  FAILCOUNT = 13
  CANCELCOUNT = 14
  UNREGISTERCOUNT = 15
  TIMESTAMP = 21
  MESSAGE = 22

  FIELDS = {
    REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
    STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => ::BuddyResultState},
    EVENTNO => {:type => ::Thrift::Types::I32, :name => 'eventNo'},
    RECEIVERCOUNT => {:type => ::Thrift::Types::I64, :name => 'receiverCount'},
    SUCCESSCOUNT => {:type => ::Thrift::Types::I64, :name => 'successCount'},
    FAILCOUNT => {:type => ::Thrift::Types::I64, :name => 'failCount'},
    CANCELCOUNT => {:type => ::Thrift::Types::I64, :name => 'cancelCount'},
    UNREGISTERCOUNT => {:type => ::Thrift::Types::I64, :name => 'unregisterCount'},
    TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @state.nil? || ::BuddyResultState::VALID_VALUES.include?(@state)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class UserAuthStatus
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PHONENUMBERREGISTERED = 1
  REGISTEREDSNSIDTYPES = 2

  FIELDS = {
    PHONENUMBERREGISTERED => {:type => ::Thrift::Types::BOOL, :name => 'phoneNumberRegistered'},
    REGISTEREDSNSIDTYPES => {:type => ::Thrift::Types::LIST, :name => 'registeredSnsIdTypes', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SnsIdType}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class WapInvitation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TYPE = 1
  INVITEEEMAIL = 10
  INVITERMID = 11
  ROOMMID = 12

  FIELDS = {
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::WapInvitationType},
    INVITEEEMAIL => {:type => ::Thrift::Types::STRING, :name => 'inviteeEmail'},
    INVITERMID => {:type => ::Thrift::Types::STRING, :name => 'inviterMid'},
    ROOMMID => {:type => ::Thrift::Types::STRING, :name => 'roomMid'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::WapInvitationType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class GroupCall
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ONLINE = 1
  CHATMID = 2
  HOSTMIDS = 3
  MEMBERMIDS = 4
  STARTED = 5
  MEDIATYPE = 6

  FIELDS = {
    ONLINE => {:type => ::Thrift::Types::BOOL, :name => 'online'},
    CHATMID => {:type => ::Thrift::Types::STRING, :name => 'chatMid'},
    HOSTMIDS => {:type => ::Thrift::Types::STRING, :name => 'hostMids'},
    MEMBERMIDS => {:type => ::Thrift::Types::LIST, :name => 'memberMids', :element => {:type => ::Thrift::Types::STRING}},
    STARTED => {:type => ::Thrift::Types::I64, :name => 'started'},
    MEDIATYPE => {:type => ::Thrift::Types::I32, :name => 'mediaType', :enum_class => ::GroupCallMediaType}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @mediaType.nil? || ::GroupCallMediaType::VALID_VALUES.include?(@mediaType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field mediaType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class GroupCallRoute
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TOKEN = 1
  CSCF = 2
  MIX = 3

  FIELDS = {
    TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
    CSCF => {:type => ::Thrift::Types::STRUCT, :name => 'cscf', :class => ::CallHost},
    MIX => {:type => ::Thrift::Types::STRUCT, :name => 'mix', :class => ::CallHost}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

