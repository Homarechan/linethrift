#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'line_types'

module AccountSupervisorService
  class Client
    include ::Thrift::Client

    def getRSAKey()
      send_getRSAKey()
      return recv_getRSAKey()
    end

    def send_getRSAKey()
      send_message('getRSAKey', GetRSAKey_args)
    end

    def recv_getRSAKey()
      result = receive_message(GetRSAKey_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getRSAKey failed: unknown result')
    end

    def notifyEmailConfirmationResult(parameterMap)
      send_notifyEmailConfirmationResult(parameterMap)
      recv_notifyEmailConfirmationResult()
    end

    def send_notifyEmailConfirmationResult(parameterMap)
      send_message('notifyEmailConfirmationResult', NotifyEmailConfirmationResult_args, :parameterMap => parameterMap)
    end

    def recv_notifyEmailConfirmationResult()
      result = receive_message(NotifyEmailConfirmationResult_result)
      raise result.e unless result.e.nil?
      return
    end

    def registerVirtualAccount(locale, encryptedVirtualUserId, encryptedPassword)
      send_registerVirtualAccount(locale, encryptedVirtualUserId, encryptedPassword)
      return recv_registerVirtualAccount()
    end

    def send_registerVirtualAccount(locale, encryptedVirtualUserId, encryptedPassword)
      send_message('registerVirtualAccount', RegisterVirtualAccount_args, :locale => locale, :encryptedVirtualUserId => encryptedVirtualUserId, :encryptedPassword => encryptedPassword)
    end

    def recv_registerVirtualAccount()
      result = receive_message(RegisterVirtualAccount_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerVirtualAccount failed: unknown result')
    end

    def requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword)
      send_requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword)
      recv_requestVirtualAccountPasswordChange()
    end

    def send_requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword)
      send_message('requestVirtualAccountPasswordChange', RequestVirtualAccountPasswordChange_args, :virtualMid => virtualMid, :encryptedVirtualUserId => encryptedVirtualUserId, :encryptedOldPassword => encryptedOldPassword, :encryptedNewPassword => encryptedNewPassword)
    end

    def recv_requestVirtualAccountPasswordChange()
      result = receive_message(RequestVirtualAccountPasswordChange_result)
      raise result.e unless result.e.nil?
      return
    end

    def requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword)
      send_requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword)
      recv_requestVirtualAccountPasswordSet()
    end

    def send_requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword)
      send_message('requestVirtualAccountPasswordSet', RequestVirtualAccountPasswordSet_args, :virtualMid => virtualMid, :encryptedVirtualUserId => encryptedVirtualUserId, :encryptedNewPassword => encryptedNewPassword)
    end

    def recv_requestVirtualAccountPasswordSet()
      result = receive_message(RequestVirtualAccountPasswordSet_result)
      raise result.e unless result.e.nil?
      return
    end

    def unregisterVirtualAccount(virtualMid)
      send_unregisterVirtualAccount(virtualMid)
      recv_unregisterVirtualAccount()
    end

    def send_unregisterVirtualAccount(virtualMid)
      send_message('unregisterVirtualAccount', UnregisterVirtualAccount_args, :virtualMid => virtualMid)
    end

    def recv_unregisterVirtualAccount()
      result = receive_message(UnregisterVirtualAccount_result)
      raise result.e unless result.e.nil?
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_getRSAKey(seqid, iprot, oprot)
      args = read_args(iprot, GetRSAKey_args)
      result = GetRSAKey_result.new()
      begin
        result.success = @handler.getRSAKey()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getRSAKey', seqid)
    end

    def process_notifyEmailConfirmationResult(seqid, iprot, oprot)
      args = read_args(iprot, NotifyEmailConfirmationResult_args)
      result = NotifyEmailConfirmationResult_result.new()
      begin
        @handler.notifyEmailConfirmationResult(args.parameterMap)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'notifyEmailConfirmationResult', seqid)
    end

    def process_registerVirtualAccount(seqid, iprot, oprot)
      args = read_args(iprot, RegisterVirtualAccount_args)
      result = RegisterVirtualAccount_result.new()
      begin
        result.success = @handler.registerVirtualAccount(args.locale, args.encryptedVirtualUserId, args.encryptedPassword)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerVirtualAccount', seqid)
    end

    def process_requestVirtualAccountPasswordChange(seqid, iprot, oprot)
      args = read_args(iprot, RequestVirtualAccountPasswordChange_args)
      result = RequestVirtualAccountPasswordChange_result.new()
      begin
        @handler.requestVirtualAccountPasswordChange(args.virtualMid, args.encryptedVirtualUserId, args.encryptedOldPassword, args.encryptedNewPassword)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'requestVirtualAccountPasswordChange', seqid)
    end

    def process_requestVirtualAccountPasswordSet(seqid, iprot, oprot)
      args = read_args(iprot, RequestVirtualAccountPasswordSet_args)
      result = RequestVirtualAccountPasswordSet_result.new()
      begin
        @handler.requestVirtualAccountPasswordSet(args.virtualMid, args.encryptedVirtualUserId, args.encryptedNewPassword)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'requestVirtualAccountPasswordSet', seqid)
    end

    def process_unregisterVirtualAccount(seqid, iprot, oprot)
      args = read_args(iprot, UnregisterVirtualAccount_args)
      result = UnregisterVirtualAccount_result.new()
      begin
        @handler.unregisterVirtualAccount(args.virtualMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'unregisterVirtualAccount', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class GetRSAKey_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRSAKey_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::RSAKey},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyEmailConfirmationResult_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PARAMETERMAP = 2

    FIELDS = {
      PARAMETERMAP => {:type => ::Thrift::Types::MAP, :name => 'parameterMap', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyEmailConfirmationResult_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterVirtualAccount_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LOCALE = 2
    ENCRYPTEDVIRTUALUSERID = 3
    ENCRYPTEDPASSWORD = 4

    FIELDS = {
      LOCALE => {:type => ::Thrift::Types::STRING, :name => 'locale'},
      ENCRYPTEDVIRTUALUSERID => {:type => ::Thrift::Types::STRING, :name => 'encryptedVirtualUserId'},
      ENCRYPTEDPASSWORD => {:type => ::Thrift::Types::STRING, :name => 'encryptedPassword'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterVirtualAccount_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RequestVirtualAccountPasswordChange_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VIRTUALMID = 2
    ENCRYPTEDVIRTUALUSERID = 3
    ENCRYPTEDOLDPASSWORD = 4
    ENCRYPTEDNEWPASSWORD = 5

    FIELDS = {
      VIRTUALMID => {:type => ::Thrift::Types::STRING, :name => 'virtualMid'},
      ENCRYPTEDVIRTUALUSERID => {:type => ::Thrift::Types::STRING, :name => 'encryptedVirtualUserId'},
      ENCRYPTEDOLDPASSWORD => {:type => ::Thrift::Types::STRING, :name => 'encryptedOldPassword'},
      ENCRYPTEDNEWPASSWORD => {:type => ::Thrift::Types::STRING, :name => 'encryptedNewPassword'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RequestVirtualAccountPasswordChange_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RequestVirtualAccountPasswordSet_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VIRTUALMID = 2
    ENCRYPTEDVIRTUALUSERID = 3
    ENCRYPTEDNEWPASSWORD = 4

    FIELDS = {
      VIRTUALMID => {:type => ::Thrift::Types::STRING, :name => 'virtualMid'},
      ENCRYPTEDVIRTUALUSERID => {:type => ::Thrift::Types::STRING, :name => 'encryptedVirtualUserId'},
      ENCRYPTEDNEWPASSWORD => {:type => ::Thrift::Types::STRING, :name => 'encryptedNewPassword'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RequestVirtualAccountPasswordSet_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnregisterVirtualAccount_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VIRTUALMID = 2

    FIELDS = {
      VIRTUALMID => {:type => ::Thrift::Types::STRING, :name => 'virtualMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnregisterVirtualAccount_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

