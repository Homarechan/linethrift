#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'line_types'

module BuddyManagementService
  class Client
    include ::Thrift::Client

    def addBuddyMember(requestId, userMid)
      send_addBuddyMember(requestId, userMid)
      recv_addBuddyMember()
    end

    def send_addBuddyMember(requestId, userMid)
      send_message('addBuddyMember', AddBuddyMember_args, :requestId => requestId, :userMid => userMid)
    end

    def recv_addBuddyMember()
      result = receive_message(AddBuddyMember_result)
      raise result.e unless result.e.nil?
      return
    end

    def addBuddyMembers(requestId, userMids)
      send_addBuddyMembers(requestId, userMids)
      recv_addBuddyMembers()
    end

    def send_addBuddyMembers(requestId, userMids)
      send_message('addBuddyMembers', AddBuddyMembers_args, :requestId => requestId, :userMids => userMids)
    end

    def recv_addBuddyMembers()
      result = receive_message(AddBuddyMembers_result)
      raise result.e unless result.e.nil?
      return
    end

    def blockBuddyMember(requestId, mid)
      send_blockBuddyMember(requestId, mid)
      recv_blockBuddyMember()
    end

    def send_blockBuddyMember(requestId, mid)
      send_message('blockBuddyMember', BlockBuddyMember_args, :requestId => requestId, :mid => mid)
    end

    def recv_blockBuddyMember()
      result = receive_message(BlockBuddyMember_result)
      raise result.e unless result.e.nil?
      return
    end

    def commitSendMessagesToAll(requestIdList)
      send_commitSendMessagesToAll(requestIdList)
      return recv_commitSendMessagesToAll()
    end

    def send_commitSendMessagesToAll(requestIdList)
      send_message('commitSendMessagesToAll', CommitSendMessagesToAll_args, :requestIdList => requestIdList)
    end

    def recv_commitSendMessagesToAll()
      result = receive_message(CommitSendMessagesToAll_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'commitSendMessagesToAll failed: unknown result')
    end

    def commitSendMessagesToMids(requestIdList, mids)
      send_commitSendMessagesToMids(requestIdList, mids)
      return recv_commitSendMessagesToMids()
    end

    def send_commitSendMessagesToMids(requestIdList, mids)
      send_message('commitSendMessagesToMids', CommitSendMessagesToMids_args, :requestIdList => requestIdList, :mids => mids)
    end

    def recv_commitSendMessagesToMids()
      result = receive_message(CommitSendMessagesToMids_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'commitSendMessagesToMids failed: unknown result')
    end

    def containsBuddyMember(requestId, userMid)
      send_containsBuddyMember(requestId, userMid)
      return recv_containsBuddyMember()
    end

    def send_containsBuddyMember(requestId, userMid)
      send_message('containsBuddyMember', ContainsBuddyMember_args, :requestId => requestId, :userMid => userMid)
    end

    def recv_containsBuddyMember()
      result = receive_message(ContainsBuddyMember_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'containsBuddyMember failed: unknown result')
    end

    def downloadMessageContent(requestId, messageId)
      send_downloadMessageContent(requestId, messageId)
      return recv_downloadMessageContent()
    end

    def send_downloadMessageContent(requestId, messageId)
      send_message('downloadMessageContent', DownloadMessageContent_args, :requestId => requestId, :messageId => messageId)
    end

    def recv_downloadMessageContent()
      result = receive_message(DownloadMessageContent_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'downloadMessageContent failed: unknown result')
    end

    def downloadMessageContentPreview(requestId, messageId)
      send_downloadMessageContentPreview(requestId, messageId)
      return recv_downloadMessageContentPreview()
    end

    def send_downloadMessageContentPreview(requestId, messageId)
      send_message('downloadMessageContentPreview', DownloadMessageContentPreview_args, :requestId => requestId, :messageId => messageId)
    end

    def recv_downloadMessageContentPreview()
      result = receive_message(DownloadMessageContentPreview_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'downloadMessageContentPreview failed: unknown result')
    end

    def downloadProfileImage(requestId)
      send_downloadProfileImage(requestId)
      return recv_downloadProfileImage()
    end

    def send_downloadProfileImage(requestId)
      send_message('downloadProfileImage', DownloadProfileImage_args, :requestId => requestId)
    end

    def recv_downloadProfileImage()
      result = receive_message(DownloadProfileImage_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'downloadProfileImage failed: unknown result')
    end

    def downloadProfileImagePreview(requestId)
      send_downloadProfileImagePreview(requestId)
      return recv_downloadProfileImagePreview()
    end

    def send_downloadProfileImagePreview(requestId)
      send_message('downloadProfileImagePreview', DownloadProfileImagePreview_args, :requestId => requestId)
    end

    def recv_downloadProfileImagePreview()
      result = receive_message(DownloadProfileImagePreview_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'downloadProfileImagePreview failed: unknown result')
    end

    def getActiveMemberCountByBuddyMid(buddyMid)
      send_getActiveMemberCountByBuddyMid(buddyMid)
      return recv_getActiveMemberCountByBuddyMid()
    end

    def send_getActiveMemberCountByBuddyMid(buddyMid)
      send_message('getActiveMemberCountByBuddyMid', GetActiveMemberCountByBuddyMid_args, :buddyMid => buddyMid)
    end

    def recv_getActiveMemberCountByBuddyMid()
      result = receive_message(GetActiveMemberCountByBuddyMid_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getActiveMemberCountByBuddyMid failed: unknown result')
    end

    def getActiveMemberMidsByBuddyMid(buddyMid)
      send_getActiveMemberMidsByBuddyMid(buddyMid)
      return recv_getActiveMemberMidsByBuddyMid()
    end

    def send_getActiveMemberMidsByBuddyMid(buddyMid)
      send_message('getActiveMemberMidsByBuddyMid', GetActiveMemberMidsByBuddyMid_args, :buddyMid => buddyMid)
    end

    def recv_getActiveMemberMidsByBuddyMid()
      result = receive_message(GetActiveMemberMidsByBuddyMid_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getActiveMemberMidsByBuddyMid failed: unknown result')
    end

    def getAllBuddyMembers()
      send_getAllBuddyMembers()
      return recv_getAllBuddyMembers()
    end

    def send_getAllBuddyMembers()
      send_message('getAllBuddyMembers', GetAllBuddyMembers_args)
    end

    def recv_getAllBuddyMembers()
      result = receive_message(GetAllBuddyMembers_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllBuddyMembers failed: unknown result')
    end

    def getBlockedBuddyMembers()
      send_getBlockedBuddyMembers()
      return recv_getBlockedBuddyMembers()
    end

    def send_getBlockedBuddyMembers()
      send_message('getBlockedBuddyMembers', GetBlockedBuddyMembers_args)
    end

    def recv_getBlockedBuddyMembers()
      result = receive_message(GetBlockedBuddyMembers_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getBlockedBuddyMembers failed: unknown result')
    end

    def getBlockerCountByBuddyMid(buddyMid)
      send_getBlockerCountByBuddyMid(buddyMid)
      return recv_getBlockerCountByBuddyMid()
    end

    def send_getBlockerCountByBuddyMid(buddyMid)
      send_message('getBlockerCountByBuddyMid', GetBlockerCountByBuddyMid_args, :buddyMid => buddyMid)
    end

    def recv_getBlockerCountByBuddyMid()
      result = receive_message(GetBlockerCountByBuddyMid_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getBlockerCountByBuddyMid failed: unknown result')
    end

    def getBuddyDetailByMid(buddyMid)
      send_getBuddyDetailByMid(buddyMid)
      return recv_getBuddyDetailByMid()
    end

    def send_getBuddyDetailByMid(buddyMid)
      send_message('getBuddyDetailByMid', GetBuddyDetailByMid_args, :buddyMid => buddyMid)
    end

    def recv_getBuddyDetailByMid()
      result = receive_message(GetBuddyDetailByMid_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getBuddyDetailByMid failed: unknown result')
    end

    def getBuddyProfile()
      send_getBuddyProfile()
      return recv_getBuddyProfile()
    end

    def send_getBuddyProfile()
      send_message('getBuddyProfile', GetBuddyProfile_args)
    end

    def recv_getBuddyProfile()
      result = receive_message(GetBuddyProfile_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getBuddyProfile failed: unknown result')
    end

    def getContactTicket()
      send_getContactTicket()
      return recv_getContactTicket()
    end

    def send_getContactTicket()
      send_message('getContactTicket', GetContactTicket_args)
    end

    def recv_getContactTicket()
      result = receive_message(GetContactTicket_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getContactTicket failed: unknown result')
    end

    def getMemberCountByBuddyMid(buddyMid)
      send_getMemberCountByBuddyMid(buddyMid)
      return recv_getMemberCountByBuddyMid()
    end

    def send_getMemberCountByBuddyMid(buddyMid)
      send_message('getMemberCountByBuddyMid', GetMemberCountByBuddyMid_args, :buddyMid => buddyMid)
    end

    def recv_getMemberCountByBuddyMid()
      result = receive_message(GetMemberCountByBuddyMid_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMemberCountByBuddyMid failed: unknown result')
    end

    def getSendBuddyMessageResult(sendBuddyMessageRequestId)
      send_getSendBuddyMessageResult(sendBuddyMessageRequestId)
      return recv_getSendBuddyMessageResult()
    end

    def send_getSendBuddyMessageResult(sendBuddyMessageRequestId)
      send_message('getSendBuddyMessageResult', GetSendBuddyMessageResult_args, :sendBuddyMessageRequestId => sendBuddyMessageRequestId)
    end

    def recv_getSendBuddyMessageResult()
      result = receive_message(GetSendBuddyMessageResult_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSendBuddyMessageResult failed: unknown result')
    end

    def getSetBuddyOnAirResult(setBuddyOnAirRequestId)
      send_getSetBuddyOnAirResult(setBuddyOnAirRequestId)
      return recv_getSetBuddyOnAirResult()
    end

    def send_getSetBuddyOnAirResult(setBuddyOnAirRequestId)
      send_message('getSetBuddyOnAirResult', GetSetBuddyOnAirResult_args, :setBuddyOnAirRequestId => setBuddyOnAirRequestId)
    end

    def recv_getSetBuddyOnAirResult()
      result = receive_message(GetSetBuddyOnAirResult_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSetBuddyOnAirResult failed: unknown result')
    end

    def getUpdateBuddyProfileResult(updateBuddyProfileRequestId)
      send_getUpdateBuddyProfileResult(updateBuddyProfileRequestId)
      return recv_getUpdateBuddyProfileResult()
    end

    def send_getUpdateBuddyProfileResult(updateBuddyProfileRequestId)
      send_message('getUpdateBuddyProfileResult', GetUpdateBuddyProfileResult_args, :updateBuddyProfileRequestId => updateBuddyProfileRequestId)
    end

    def recv_getUpdateBuddyProfileResult()
      result = receive_message(GetUpdateBuddyProfileResult_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUpdateBuddyProfileResult failed: unknown result')
    end

    def isBuddyOnAirByMid(buddyMid)
      send_isBuddyOnAirByMid(buddyMid)
      return recv_isBuddyOnAirByMid()
    end

    def send_isBuddyOnAirByMid(buddyMid)
      send_message('isBuddyOnAirByMid', IsBuddyOnAirByMid_args, :buddyMid => buddyMid)
    end

    def recv_isBuddyOnAirByMid()
      result = receive_message(IsBuddyOnAirByMid_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isBuddyOnAirByMid failed: unknown result')
    end

    def linkAndSendBuddyContentMessageToAllAsync(requestId, msg, sourceContentId)
      send_linkAndSendBuddyContentMessageToAllAsync(requestId, msg, sourceContentId)
      return recv_linkAndSendBuddyContentMessageToAllAsync()
    end

    def send_linkAndSendBuddyContentMessageToAllAsync(requestId, msg, sourceContentId)
      send_message('linkAndSendBuddyContentMessageToAllAsync', LinkAndSendBuddyContentMessageToAllAsync_args, :requestId => requestId, :msg => msg, :sourceContentId => sourceContentId)
    end

    def recv_linkAndSendBuddyContentMessageToAllAsync()
      result = receive_message(LinkAndSendBuddyContentMessageToAllAsync_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'linkAndSendBuddyContentMessageToAllAsync failed: unknown result')
    end

    def linkAndSendBuddyContentMessageToMids(requestId, msg, sourceContentId, mids)
      send_linkAndSendBuddyContentMessageToMids(requestId, msg, sourceContentId, mids)
      return recv_linkAndSendBuddyContentMessageToMids()
    end

    def send_linkAndSendBuddyContentMessageToMids(requestId, msg, sourceContentId, mids)
      send_message('linkAndSendBuddyContentMessageToMids', LinkAndSendBuddyContentMessageToMids_args, :requestId => requestId, :msg => msg, :sourceContentId => sourceContentId, :mids => mids)
    end

    def recv_linkAndSendBuddyContentMessageToMids()
      result = receive_message(LinkAndSendBuddyContentMessageToMids_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'linkAndSendBuddyContentMessageToMids failed: unknown result')
    end

    def notifyBuddyBlocked(buddyMid, blockerMid)
      send_notifyBuddyBlocked(buddyMid, blockerMid)
      recv_notifyBuddyBlocked()
    end

    def send_notifyBuddyBlocked(buddyMid, blockerMid)
      send_message('notifyBuddyBlocked', NotifyBuddyBlocked_args, :buddyMid => buddyMid, :blockerMid => blockerMid)
    end

    def recv_notifyBuddyBlocked()
      result = receive_message(NotifyBuddyBlocked_result)
      raise result.e unless result.e.nil?
      return
    end

    def notifyBuddyUnblocked(buddyMid, blockerMid)
      send_notifyBuddyUnblocked(buddyMid, blockerMid)
      recv_notifyBuddyUnblocked()
    end

    def send_notifyBuddyUnblocked(buddyMid, blockerMid)
      send_message('notifyBuddyUnblocked', NotifyBuddyUnblocked_args, :buddyMid => buddyMid, :blockerMid => blockerMid)
    end

    def recv_notifyBuddyUnblocked()
      result = receive_message(NotifyBuddyUnblocked_result)
      raise result.e unless result.e.nil?
      return
    end

    def registerBuddy(buddyId, searchId, displayName, statusMeessage, picture, settings)
      send_registerBuddy(buddyId, searchId, displayName, statusMeessage, picture, settings)
      return recv_registerBuddy()
    end

    def send_registerBuddy(buddyId, searchId, displayName, statusMeessage, picture, settings)
      send_message('registerBuddy', RegisterBuddy_args, :buddyId => buddyId, :searchId => searchId, :displayName => displayName, :statusMeessage => statusMeessage, :picture => picture, :settings => settings)
    end

    def recv_registerBuddy()
      result = receive_message(RegisterBuddy_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerBuddy failed: unknown result')
    end

    def registerBuddyAdmin(buddyId, searchId, displayName, statusMessage, picture)
      send_registerBuddyAdmin(buddyId, searchId, displayName, statusMessage, picture)
      return recv_registerBuddyAdmin()
    end

    def send_registerBuddyAdmin(buddyId, searchId, displayName, statusMessage, picture)
      send_message('registerBuddyAdmin', RegisterBuddyAdmin_args, :buddyId => buddyId, :searchId => searchId, :displayName => displayName, :statusMessage => statusMessage, :picture => picture)
    end

    def recv_registerBuddyAdmin()
      result = receive_message(RegisterBuddyAdmin_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerBuddyAdmin failed: unknown result')
    end

    def reissueContactTicket(expirationTime, maxUseCount)
      send_reissueContactTicket(expirationTime, maxUseCount)
      return recv_reissueContactTicket()
    end

    def send_reissueContactTicket(expirationTime, maxUseCount)
      send_message('reissueContactTicket', ReissueContactTicket_args, :expirationTime => expirationTime, :maxUseCount => maxUseCount)
    end

    def recv_reissueContactTicket()
      result = receive_message(ReissueContactTicket_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'reissueContactTicket failed: unknown result')
    end

    def removeBuddyMember(requestId, userMid)
      send_removeBuddyMember(requestId, userMid)
      recv_removeBuddyMember()
    end

    def send_removeBuddyMember(requestId, userMid)
      send_message('removeBuddyMember', RemoveBuddyMember_args, :requestId => requestId, :userMid => userMid)
    end

    def recv_removeBuddyMember()
      result = receive_message(RemoveBuddyMember_result)
      raise result.e unless result.e.nil?
      return
    end

    def removeBuddyMembers(requestId, userMids)
      send_removeBuddyMembers(requestId, userMids)
      recv_removeBuddyMembers()
    end

    def send_removeBuddyMembers(requestId, userMids)
      send_message('removeBuddyMembers', RemoveBuddyMembers_args, :requestId => requestId, :userMids => userMids)
    end

    def recv_removeBuddyMembers()
      result = receive_message(RemoveBuddyMembers_result)
      raise result.e unless result.e.nil?
      return
    end

    def sendBuddyContentMessageToAll(requestId, msg, content)
      send_sendBuddyContentMessageToAll(requestId, msg, content)
      return recv_sendBuddyContentMessageToAll()
    end

    def send_sendBuddyContentMessageToAll(requestId, msg, content)
      send_message('sendBuddyContentMessageToAll', SendBuddyContentMessageToAll_args, :requestId => requestId, :msg => msg, :content => content)
    end

    def recv_sendBuddyContentMessageToAll()
      result = receive_message(SendBuddyContentMessageToAll_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendBuddyContentMessageToAll failed: unknown result')
    end

    def sendBuddyContentMessageToAllAsync(requestId, msg, content)
      send_sendBuddyContentMessageToAllAsync(requestId, msg, content)
      return recv_sendBuddyContentMessageToAllAsync()
    end

    def send_sendBuddyContentMessageToAllAsync(requestId, msg, content)
      send_message('sendBuddyContentMessageToAllAsync', SendBuddyContentMessageToAllAsync_args, :requestId => requestId, :msg => msg, :content => content)
    end

    def recv_sendBuddyContentMessageToAllAsync()
      result = receive_message(SendBuddyContentMessageToAllAsync_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendBuddyContentMessageToAllAsync failed: unknown result')
    end

    def sendBuddyContentMessageToMids(requestId, msg, content, mids)
      send_sendBuddyContentMessageToMids(requestId, msg, content, mids)
      return recv_sendBuddyContentMessageToMids()
    end

    def send_sendBuddyContentMessageToMids(requestId, msg, content, mids)
      send_message('sendBuddyContentMessageToMids', SendBuddyContentMessageToMids_args, :requestId => requestId, :msg => msg, :content => content, :mids => mids)
    end

    def recv_sendBuddyContentMessageToMids()
      result = receive_message(SendBuddyContentMessageToMids_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendBuddyContentMessageToMids failed: unknown result')
    end

    def sendBuddyContentMessageToMidsAsync(requestId, msg, content, mids)
      send_sendBuddyContentMessageToMidsAsync(requestId, msg, content, mids)
      return recv_sendBuddyContentMessageToMidsAsync()
    end

    def send_sendBuddyContentMessageToMidsAsync(requestId, msg, content, mids)
      send_message('sendBuddyContentMessageToMidsAsync', SendBuddyContentMessageToMidsAsync_args, :requestId => requestId, :msg => msg, :content => content, :mids => mids)
    end

    def recv_sendBuddyContentMessageToMidsAsync()
      result = receive_message(SendBuddyContentMessageToMidsAsync_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendBuddyContentMessageToMidsAsync failed: unknown result')
    end

    def sendBuddyMessageToAll(requestId, msg)
      send_sendBuddyMessageToAll(requestId, msg)
      return recv_sendBuddyMessageToAll()
    end

    def send_sendBuddyMessageToAll(requestId, msg)
      send_message('sendBuddyMessageToAll', SendBuddyMessageToAll_args, :requestId => requestId, :msg => msg)
    end

    def recv_sendBuddyMessageToAll()
      result = receive_message(SendBuddyMessageToAll_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendBuddyMessageToAll failed: unknown result')
    end

    def sendBuddyMessageToAllAsync(requestId, msg)
      send_sendBuddyMessageToAllAsync(requestId, msg)
      return recv_sendBuddyMessageToAllAsync()
    end

    def send_sendBuddyMessageToAllAsync(requestId, msg)
      send_message('sendBuddyMessageToAllAsync', SendBuddyMessageToAllAsync_args, :requestId => requestId, :msg => msg)
    end

    def recv_sendBuddyMessageToAllAsync()
      result = receive_message(SendBuddyMessageToAllAsync_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendBuddyMessageToAllAsync failed: unknown result')
    end

    def sendBuddyMessageToMids(requestId, msg, mids)
      send_sendBuddyMessageToMids(requestId, msg, mids)
      return recv_sendBuddyMessageToMids()
    end

    def send_sendBuddyMessageToMids(requestId, msg, mids)
      send_message('sendBuddyMessageToMids', SendBuddyMessageToMids_args, :requestId => requestId, :msg => msg, :mids => mids)
    end

    def recv_sendBuddyMessageToMids()
      result = receive_message(SendBuddyMessageToMids_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendBuddyMessageToMids failed: unknown result')
    end

    def sendBuddyMessageToMidsAsync(requestId, msg, mids)
      send_sendBuddyMessageToMidsAsync(requestId, msg, mids)
      return recv_sendBuddyMessageToMidsAsync()
    end

    def send_sendBuddyMessageToMidsAsync(requestId, msg, mids)
      send_message('sendBuddyMessageToMidsAsync', SendBuddyMessageToMidsAsync_args, :requestId => requestId, :msg => msg, :mids => mids)
    end

    def recv_sendBuddyMessageToMidsAsync()
      result = receive_message(SendBuddyMessageToMidsAsync_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendBuddyMessageToMidsAsync failed: unknown result')
    end

    def sendIndividualEventToAllAsync(requestId, buddyMid, notificationStatus)
      send_sendIndividualEventToAllAsync(requestId, buddyMid, notificationStatus)
      recv_sendIndividualEventToAllAsync()
    end

    def send_sendIndividualEventToAllAsync(requestId, buddyMid, notificationStatus)
      send_message('sendIndividualEventToAllAsync', SendIndividualEventToAllAsync_args, :requestId => requestId, :buddyMid => buddyMid, :notificationStatus => notificationStatus)
    end

    def recv_sendIndividualEventToAllAsync()
      result = receive_message(SendIndividualEventToAllAsync_result)
      raise result.e unless result.e.nil?
      return
    end

    def setBuddyOnAir(requestId, onAir)
      send_setBuddyOnAir(requestId, onAir)
      return recv_setBuddyOnAir()
    end

    def send_setBuddyOnAir(requestId, onAir)
      send_message('setBuddyOnAir', SetBuddyOnAir_args, :requestId => requestId, :onAir => onAir)
    end

    def recv_setBuddyOnAir()
      result = receive_message(SetBuddyOnAir_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'setBuddyOnAir failed: unknown result')
    end

    def setBuddyOnAirAsync(requestId, onAir)
      send_setBuddyOnAirAsync(requestId, onAir)
      return recv_setBuddyOnAirAsync()
    end

    def send_setBuddyOnAirAsync(requestId, onAir)
      send_message('setBuddyOnAirAsync', SetBuddyOnAirAsync_args, :requestId => requestId, :onAir => onAir)
    end

    def recv_setBuddyOnAirAsync()
      result = receive_message(SetBuddyOnAirAsync_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'setBuddyOnAirAsync failed: unknown result')
    end

    def storeMessage(requestId, messageRequest)
      send_storeMessage(requestId, messageRequest)
      return recv_storeMessage()
    end

    def send_storeMessage(requestId, messageRequest)
      send_message('storeMessage', StoreMessage_args, :requestId => requestId, :messageRequest => messageRequest)
    end

    def recv_storeMessage()
      result = receive_message(StoreMessage_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'storeMessage failed: unknown result')
    end

    def unblockBuddyMember(requestId, mid)
      send_unblockBuddyMember(requestId, mid)
      recv_unblockBuddyMember()
    end

    def send_unblockBuddyMember(requestId, mid)
      send_message('unblockBuddyMember', UnblockBuddyMember_args, :requestId => requestId, :mid => mid)
    end

    def recv_unblockBuddyMember()
      result = receive_message(UnblockBuddyMember_result)
      raise result.e unless result.e.nil?
      return
    end

    def unregisterBuddy(requestId)
      send_unregisterBuddy(requestId)
      recv_unregisterBuddy()
    end

    def send_unregisterBuddy(requestId)
      send_message('unregisterBuddy', UnregisterBuddy_args, :requestId => requestId)
    end

    def recv_unregisterBuddy()
      result = receive_message(UnregisterBuddy_result)
      raise result.e unless result.e.nil?
      return
    end

    def unregisterBuddyAdmin(requestId)
      send_unregisterBuddyAdmin(requestId)
      recv_unregisterBuddyAdmin()
    end

    def send_unregisterBuddyAdmin(requestId)
      send_message('unregisterBuddyAdmin', UnregisterBuddyAdmin_args, :requestId => requestId)
    end

    def recv_unregisterBuddyAdmin()
      result = receive_message(UnregisterBuddyAdmin_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateBuddyAdminProfileAttribute(requestId, attributes)
      send_updateBuddyAdminProfileAttribute(requestId, attributes)
      recv_updateBuddyAdminProfileAttribute()
    end

    def send_updateBuddyAdminProfileAttribute(requestId, attributes)
      send_message('updateBuddyAdminProfileAttribute', UpdateBuddyAdminProfileAttribute_args, :requestId => requestId, :attributes => attributes)
    end

    def recv_updateBuddyAdminProfileAttribute()
      result = receive_message(UpdateBuddyAdminProfileAttribute_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateBuddyAdminProfileImage(requestId, picture)
      send_updateBuddyAdminProfileImage(requestId, picture)
      recv_updateBuddyAdminProfileImage()
    end

    def send_updateBuddyAdminProfileImage(requestId, picture)
      send_message('updateBuddyAdminProfileImage', UpdateBuddyAdminProfileImage_args, :requestId => requestId, :picture => picture)
    end

    def recv_updateBuddyAdminProfileImage()
      result = receive_message(UpdateBuddyAdminProfileImage_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateBuddyProfileAttributes(requestId, attributes)
      send_updateBuddyProfileAttributes(requestId, attributes)
      return recv_updateBuddyProfileAttributes()
    end

    def send_updateBuddyProfileAttributes(requestId, attributes)
      send_message('updateBuddyProfileAttributes', UpdateBuddyProfileAttributes_args, :requestId => requestId, :attributes => attributes)
    end

    def recv_updateBuddyProfileAttributes()
      result = receive_message(UpdateBuddyProfileAttributes_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateBuddyProfileAttributes failed: unknown result')
    end

    def updateBuddyProfileAttributesAsync(requestId, attributes)
      send_updateBuddyProfileAttributesAsync(requestId, attributes)
      return recv_updateBuddyProfileAttributesAsync()
    end

    def send_updateBuddyProfileAttributesAsync(requestId, attributes)
      send_message('updateBuddyProfileAttributesAsync', UpdateBuddyProfileAttributesAsync_args, :requestId => requestId, :attributes => attributes)
    end

    def recv_updateBuddyProfileAttributesAsync()
      result = receive_message(UpdateBuddyProfileAttributesAsync_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateBuddyProfileAttributesAsync failed: unknown result')
    end

    def updateBuddyProfileImage(requestId, image)
      send_updateBuddyProfileImage(requestId, image)
      return recv_updateBuddyProfileImage()
    end

    def send_updateBuddyProfileImage(requestId, image)
      send_message('updateBuddyProfileImage', UpdateBuddyProfileImage_args, :requestId => requestId, :image => image)
    end

    def recv_updateBuddyProfileImage()
      result = receive_message(UpdateBuddyProfileImage_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateBuddyProfileImage failed: unknown result')
    end

    def updateBuddyProfileImageAsync(requestId, image)
      send_updateBuddyProfileImageAsync(requestId, image)
      return recv_updateBuddyProfileImageAsync()
    end

    def send_updateBuddyProfileImageAsync(requestId, image)
      send_message('updateBuddyProfileImageAsync', UpdateBuddyProfileImageAsync_args, :requestId => requestId, :image => image)
    end

    def recv_updateBuddyProfileImageAsync()
      result = receive_message(UpdateBuddyProfileImageAsync_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateBuddyProfileImageAsync failed: unknown result')
    end

    def updateBuddySearchId(requestId, searchId)
      send_updateBuddySearchId(requestId, searchId)
      recv_updateBuddySearchId()
    end

    def send_updateBuddySearchId(requestId, searchId)
      send_message('updateBuddySearchId', UpdateBuddySearchId_args, :requestId => requestId, :searchId => searchId)
    end

    def recv_updateBuddySearchId()
      result = receive_message(UpdateBuddySearchId_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateBuddySettings(settings)
      send_updateBuddySettings(settings)
      recv_updateBuddySettings()
    end

    def send_updateBuddySettings(settings)
      send_message('updateBuddySettings', UpdateBuddySettings_args, :settings => settings)
    end

    def recv_updateBuddySettings()
      result = receive_message(UpdateBuddySettings_result)
      raise result.e unless result.e.nil?
      return
    end

    def uploadBuddyContent(contentType, content)
      send_uploadBuddyContent(contentType, content)
      return recv_uploadBuddyContent()
    end

    def send_uploadBuddyContent(contentType, content)
      send_message('uploadBuddyContent', UploadBuddyContent_args, :contentType => contentType, :content => content)
    end

    def recv_uploadBuddyContent()
      result = receive_message(UploadBuddyContent_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'uploadBuddyContent failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_addBuddyMember(seqid, iprot, oprot)
      args = read_args(iprot, AddBuddyMember_args)
      result = AddBuddyMember_result.new()
      begin
        @handler.addBuddyMember(args.requestId, args.userMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'addBuddyMember', seqid)
    end

    def process_addBuddyMembers(seqid, iprot, oprot)
      args = read_args(iprot, AddBuddyMembers_args)
      result = AddBuddyMembers_result.new()
      begin
        @handler.addBuddyMembers(args.requestId, args.userMids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'addBuddyMembers', seqid)
    end

    def process_blockBuddyMember(seqid, iprot, oprot)
      args = read_args(iprot, BlockBuddyMember_args)
      result = BlockBuddyMember_result.new()
      begin
        @handler.blockBuddyMember(args.requestId, args.mid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'blockBuddyMember', seqid)
    end

    def process_commitSendMessagesToAll(seqid, iprot, oprot)
      args = read_args(iprot, CommitSendMessagesToAll_args)
      result = CommitSendMessagesToAll_result.new()
      begin
        result.success = @handler.commitSendMessagesToAll(args.requestIdList)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'commitSendMessagesToAll', seqid)
    end

    def process_commitSendMessagesToMids(seqid, iprot, oprot)
      args = read_args(iprot, CommitSendMessagesToMids_args)
      result = CommitSendMessagesToMids_result.new()
      begin
        result.success = @handler.commitSendMessagesToMids(args.requestIdList, args.mids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'commitSendMessagesToMids', seqid)
    end

    def process_containsBuddyMember(seqid, iprot, oprot)
      args = read_args(iprot, ContainsBuddyMember_args)
      result = ContainsBuddyMember_result.new()
      begin
        result.success = @handler.containsBuddyMember(args.requestId, args.userMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'containsBuddyMember', seqid)
    end

    def process_downloadMessageContent(seqid, iprot, oprot)
      args = read_args(iprot, DownloadMessageContent_args)
      result = DownloadMessageContent_result.new()
      begin
        result.success = @handler.downloadMessageContent(args.requestId, args.messageId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'downloadMessageContent', seqid)
    end

    def process_downloadMessageContentPreview(seqid, iprot, oprot)
      args = read_args(iprot, DownloadMessageContentPreview_args)
      result = DownloadMessageContentPreview_result.new()
      begin
        result.success = @handler.downloadMessageContentPreview(args.requestId, args.messageId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'downloadMessageContentPreview', seqid)
    end

    def process_downloadProfileImage(seqid, iprot, oprot)
      args = read_args(iprot, DownloadProfileImage_args)
      result = DownloadProfileImage_result.new()
      begin
        result.success = @handler.downloadProfileImage(args.requestId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'downloadProfileImage', seqid)
    end

    def process_downloadProfileImagePreview(seqid, iprot, oprot)
      args = read_args(iprot, DownloadProfileImagePreview_args)
      result = DownloadProfileImagePreview_result.new()
      begin
        result.success = @handler.downloadProfileImagePreview(args.requestId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'downloadProfileImagePreview', seqid)
    end

    def process_getActiveMemberCountByBuddyMid(seqid, iprot, oprot)
      args = read_args(iprot, GetActiveMemberCountByBuddyMid_args)
      result = GetActiveMemberCountByBuddyMid_result.new()
      begin
        result.success = @handler.getActiveMemberCountByBuddyMid(args.buddyMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getActiveMemberCountByBuddyMid', seqid)
    end

    def process_getActiveMemberMidsByBuddyMid(seqid, iprot, oprot)
      args = read_args(iprot, GetActiveMemberMidsByBuddyMid_args)
      result = GetActiveMemberMidsByBuddyMid_result.new()
      begin
        result.success = @handler.getActiveMemberMidsByBuddyMid(args.buddyMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getActiveMemberMidsByBuddyMid', seqid)
    end

    def process_getAllBuddyMembers(seqid, iprot, oprot)
      args = read_args(iprot, GetAllBuddyMembers_args)
      result = GetAllBuddyMembers_result.new()
      begin
        result.success = @handler.getAllBuddyMembers()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getAllBuddyMembers', seqid)
    end

    def process_getBlockedBuddyMembers(seqid, iprot, oprot)
      args = read_args(iprot, GetBlockedBuddyMembers_args)
      result = GetBlockedBuddyMembers_result.new()
      begin
        result.success = @handler.getBlockedBuddyMembers()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getBlockedBuddyMembers', seqid)
    end

    def process_getBlockerCountByBuddyMid(seqid, iprot, oprot)
      args = read_args(iprot, GetBlockerCountByBuddyMid_args)
      result = GetBlockerCountByBuddyMid_result.new()
      begin
        result.success = @handler.getBlockerCountByBuddyMid(args.buddyMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getBlockerCountByBuddyMid', seqid)
    end

    def process_getBuddyDetailByMid(seqid, iprot, oprot)
      args = read_args(iprot, GetBuddyDetailByMid_args)
      result = GetBuddyDetailByMid_result.new()
      begin
        result.success = @handler.getBuddyDetailByMid(args.buddyMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getBuddyDetailByMid', seqid)
    end

    def process_getBuddyProfile(seqid, iprot, oprot)
      args = read_args(iprot, GetBuddyProfile_args)
      result = GetBuddyProfile_result.new()
      begin
        result.success = @handler.getBuddyProfile()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getBuddyProfile', seqid)
    end

    def process_getContactTicket(seqid, iprot, oprot)
      args = read_args(iprot, GetContactTicket_args)
      result = GetContactTicket_result.new()
      begin
        result.success = @handler.getContactTicket()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getContactTicket', seqid)
    end

    def process_getMemberCountByBuddyMid(seqid, iprot, oprot)
      args = read_args(iprot, GetMemberCountByBuddyMid_args)
      result = GetMemberCountByBuddyMid_result.new()
      begin
        result.success = @handler.getMemberCountByBuddyMid(args.buddyMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getMemberCountByBuddyMid', seqid)
    end

    def process_getSendBuddyMessageResult(seqid, iprot, oprot)
      args = read_args(iprot, GetSendBuddyMessageResult_args)
      result = GetSendBuddyMessageResult_result.new()
      begin
        result.success = @handler.getSendBuddyMessageResult(args.sendBuddyMessageRequestId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getSendBuddyMessageResult', seqid)
    end

    def process_getSetBuddyOnAirResult(seqid, iprot, oprot)
      args = read_args(iprot, GetSetBuddyOnAirResult_args)
      result = GetSetBuddyOnAirResult_result.new()
      begin
        result.success = @handler.getSetBuddyOnAirResult(args.setBuddyOnAirRequestId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getSetBuddyOnAirResult', seqid)
    end

    def process_getUpdateBuddyProfileResult(seqid, iprot, oprot)
      args = read_args(iprot, GetUpdateBuddyProfileResult_args)
      result = GetUpdateBuddyProfileResult_result.new()
      begin
        result.success = @handler.getUpdateBuddyProfileResult(args.updateBuddyProfileRequestId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getUpdateBuddyProfileResult', seqid)
    end

    def process_isBuddyOnAirByMid(seqid, iprot, oprot)
      args = read_args(iprot, IsBuddyOnAirByMid_args)
      result = IsBuddyOnAirByMid_result.new()
      begin
        result.success = @handler.isBuddyOnAirByMid(args.buddyMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'isBuddyOnAirByMid', seqid)
    end

    def process_linkAndSendBuddyContentMessageToAllAsync(seqid, iprot, oprot)
      args = read_args(iprot, LinkAndSendBuddyContentMessageToAllAsync_args)
      result = LinkAndSendBuddyContentMessageToAllAsync_result.new()
      begin
        result.success = @handler.linkAndSendBuddyContentMessageToAllAsync(args.requestId, args.msg, args.sourceContentId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'linkAndSendBuddyContentMessageToAllAsync', seqid)
    end

    def process_linkAndSendBuddyContentMessageToMids(seqid, iprot, oprot)
      args = read_args(iprot, LinkAndSendBuddyContentMessageToMids_args)
      result = LinkAndSendBuddyContentMessageToMids_result.new()
      begin
        result.success = @handler.linkAndSendBuddyContentMessageToMids(args.requestId, args.msg, args.sourceContentId, args.mids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'linkAndSendBuddyContentMessageToMids', seqid)
    end

    def process_notifyBuddyBlocked(seqid, iprot, oprot)
      args = read_args(iprot, NotifyBuddyBlocked_args)
      result = NotifyBuddyBlocked_result.new()
      begin
        @handler.notifyBuddyBlocked(args.buddyMid, args.blockerMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'notifyBuddyBlocked', seqid)
    end

    def process_notifyBuddyUnblocked(seqid, iprot, oprot)
      args = read_args(iprot, NotifyBuddyUnblocked_args)
      result = NotifyBuddyUnblocked_result.new()
      begin
        @handler.notifyBuddyUnblocked(args.buddyMid, args.blockerMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'notifyBuddyUnblocked', seqid)
    end

    def process_registerBuddy(seqid, iprot, oprot)
      args = read_args(iprot, RegisterBuddy_args)
      result = RegisterBuddy_result.new()
      begin
        result.success = @handler.registerBuddy(args.buddyId, args.searchId, args.displayName, args.statusMeessage, args.picture, args.settings)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerBuddy', seqid)
    end

    def process_registerBuddyAdmin(seqid, iprot, oprot)
      args = read_args(iprot, RegisterBuddyAdmin_args)
      result = RegisterBuddyAdmin_result.new()
      begin
        result.success = @handler.registerBuddyAdmin(args.buddyId, args.searchId, args.displayName, args.statusMessage, args.picture)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerBuddyAdmin', seqid)
    end

    def process_reissueContactTicket(seqid, iprot, oprot)
      args = read_args(iprot, ReissueContactTicket_args)
      result = ReissueContactTicket_result.new()
      begin
        result.success = @handler.reissueContactTicket(args.expirationTime, args.maxUseCount)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'reissueContactTicket', seqid)
    end

    def process_removeBuddyMember(seqid, iprot, oprot)
      args = read_args(iprot, RemoveBuddyMember_args)
      result = RemoveBuddyMember_result.new()
      begin
        @handler.removeBuddyMember(args.requestId, args.userMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'removeBuddyMember', seqid)
    end

    def process_removeBuddyMembers(seqid, iprot, oprot)
      args = read_args(iprot, RemoveBuddyMembers_args)
      result = RemoveBuddyMembers_result.new()
      begin
        @handler.removeBuddyMembers(args.requestId, args.userMids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'removeBuddyMembers', seqid)
    end

    def process_sendBuddyContentMessageToAll(seqid, iprot, oprot)
      args = read_args(iprot, SendBuddyContentMessageToAll_args)
      result = SendBuddyContentMessageToAll_result.new()
      begin
        result.success = @handler.sendBuddyContentMessageToAll(args.requestId, args.msg, args.content)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendBuddyContentMessageToAll', seqid)
    end

    def process_sendBuddyContentMessageToAllAsync(seqid, iprot, oprot)
      args = read_args(iprot, SendBuddyContentMessageToAllAsync_args)
      result = SendBuddyContentMessageToAllAsync_result.new()
      begin
        result.success = @handler.sendBuddyContentMessageToAllAsync(args.requestId, args.msg, args.content)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendBuddyContentMessageToAllAsync', seqid)
    end

    def process_sendBuddyContentMessageToMids(seqid, iprot, oprot)
      args = read_args(iprot, SendBuddyContentMessageToMids_args)
      result = SendBuddyContentMessageToMids_result.new()
      begin
        result.success = @handler.sendBuddyContentMessageToMids(args.requestId, args.msg, args.content, args.mids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendBuddyContentMessageToMids', seqid)
    end

    def process_sendBuddyContentMessageToMidsAsync(seqid, iprot, oprot)
      args = read_args(iprot, SendBuddyContentMessageToMidsAsync_args)
      result = SendBuddyContentMessageToMidsAsync_result.new()
      begin
        result.success = @handler.sendBuddyContentMessageToMidsAsync(args.requestId, args.msg, args.content, args.mids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendBuddyContentMessageToMidsAsync', seqid)
    end

    def process_sendBuddyMessageToAll(seqid, iprot, oprot)
      args = read_args(iprot, SendBuddyMessageToAll_args)
      result = SendBuddyMessageToAll_result.new()
      begin
        result.success = @handler.sendBuddyMessageToAll(args.requestId, args.msg)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendBuddyMessageToAll', seqid)
    end

    def process_sendBuddyMessageToAllAsync(seqid, iprot, oprot)
      args = read_args(iprot, SendBuddyMessageToAllAsync_args)
      result = SendBuddyMessageToAllAsync_result.new()
      begin
        result.success = @handler.sendBuddyMessageToAllAsync(args.requestId, args.msg)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendBuddyMessageToAllAsync', seqid)
    end

    def process_sendBuddyMessageToMids(seqid, iprot, oprot)
      args = read_args(iprot, SendBuddyMessageToMids_args)
      result = SendBuddyMessageToMids_result.new()
      begin
        result.success = @handler.sendBuddyMessageToMids(args.requestId, args.msg, args.mids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendBuddyMessageToMids', seqid)
    end

    def process_sendBuddyMessageToMidsAsync(seqid, iprot, oprot)
      args = read_args(iprot, SendBuddyMessageToMidsAsync_args)
      result = SendBuddyMessageToMidsAsync_result.new()
      begin
        result.success = @handler.sendBuddyMessageToMidsAsync(args.requestId, args.msg, args.mids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendBuddyMessageToMidsAsync', seqid)
    end

    def process_sendIndividualEventToAllAsync(seqid, iprot, oprot)
      args = read_args(iprot, SendIndividualEventToAllAsync_args)
      result = SendIndividualEventToAllAsync_result.new()
      begin
        @handler.sendIndividualEventToAllAsync(args.requestId, args.buddyMid, args.notificationStatus)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendIndividualEventToAllAsync', seqid)
    end

    def process_setBuddyOnAir(seqid, iprot, oprot)
      args = read_args(iprot, SetBuddyOnAir_args)
      result = SetBuddyOnAir_result.new()
      begin
        result.success = @handler.setBuddyOnAir(args.requestId, args.onAir)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'setBuddyOnAir', seqid)
    end

    def process_setBuddyOnAirAsync(seqid, iprot, oprot)
      args = read_args(iprot, SetBuddyOnAirAsync_args)
      result = SetBuddyOnAirAsync_result.new()
      begin
        result.success = @handler.setBuddyOnAirAsync(args.requestId, args.onAir)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'setBuddyOnAirAsync', seqid)
    end

    def process_storeMessage(seqid, iprot, oprot)
      args = read_args(iprot, StoreMessage_args)
      result = StoreMessage_result.new()
      begin
        result.success = @handler.storeMessage(args.requestId, args.messageRequest)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'storeMessage', seqid)
    end

    def process_unblockBuddyMember(seqid, iprot, oprot)
      args = read_args(iprot, UnblockBuddyMember_args)
      result = UnblockBuddyMember_result.new()
      begin
        @handler.unblockBuddyMember(args.requestId, args.mid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'unblockBuddyMember', seqid)
    end

    def process_unregisterBuddy(seqid, iprot, oprot)
      args = read_args(iprot, UnregisterBuddy_args)
      result = UnregisterBuddy_result.new()
      begin
        @handler.unregisterBuddy(args.requestId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'unregisterBuddy', seqid)
    end

    def process_unregisterBuddyAdmin(seqid, iprot, oprot)
      args = read_args(iprot, UnregisterBuddyAdmin_args)
      result = UnregisterBuddyAdmin_result.new()
      begin
        @handler.unregisterBuddyAdmin(args.requestId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'unregisterBuddyAdmin', seqid)
    end

    def process_updateBuddyAdminProfileAttribute(seqid, iprot, oprot)
      args = read_args(iprot, UpdateBuddyAdminProfileAttribute_args)
      result = UpdateBuddyAdminProfileAttribute_result.new()
      begin
        @handler.updateBuddyAdminProfileAttribute(args.requestId, args.attributes)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateBuddyAdminProfileAttribute', seqid)
    end

    def process_updateBuddyAdminProfileImage(seqid, iprot, oprot)
      args = read_args(iprot, UpdateBuddyAdminProfileImage_args)
      result = UpdateBuddyAdminProfileImage_result.new()
      begin
        @handler.updateBuddyAdminProfileImage(args.requestId, args.picture)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateBuddyAdminProfileImage', seqid)
    end

    def process_updateBuddyProfileAttributes(seqid, iprot, oprot)
      args = read_args(iprot, UpdateBuddyProfileAttributes_args)
      result = UpdateBuddyProfileAttributes_result.new()
      begin
        result.success = @handler.updateBuddyProfileAttributes(args.requestId, args.attributes)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateBuddyProfileAttributes', seqid)
    end

    def process_updateBuddyProfileAttributesAsync(seqid, iprot, oprot)
      args = read_args(iprot, UpdateBuddyProfileAttributesAsync_args)
      result = UpdateBuddyProfileAttributesAsync_result.new()
      begin
        result.success = @handler.updateBuddyProfileAttributesAsync(args.requestId, args.attributes)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateBuddyProfileAttributesAsync', seqid)
    end

    def process_updateBuddyProfileImage(seqid, iprot, oprot)
      args = read_args(iprot, UpdateBuddyProfileImage_args)
      result = UpdateBuddyProfileImage_result.new()
      begin
        result.success = @handler.updateBuddyProfileImage(args.requestId, args.image)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateBuddyProfileImage', seqid)
    end

    def process_updateBuddyProfileImageAsync(seqid, iprot, oprot)
      args = read_args(iprot, UpdateBuddyProfileImageAsync_args)
      result = UpdateBuddyProfileImageAsync_result.new()
      begin
        result.success = @handler.updateBuddyProfileImageAsync(args.requestId, args.image)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateBuddyProfileImageAsync', seqid)
    end

    def process_updateBuddySearchId(seqid, iprot, oprot)
      args = read_args(iprot, UpdateBuddySearchId_args)
      result = UpdateBuddySearchId_result.new()
      begin
        @handler.updateBuddySearchId(args.requestId, args.searchId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateBuddySearchId', seqid)
    end

    def process_updateBuddySettings(seqid, iprot, oprot)
      args = read_args(iprot, UpdateBuddySettings_args)
      result = UpdateBuddySettings_result.new()
      begin
        @handler.updateBuddySettings(args.settings)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateBuddySettings', seqid)
    end

    def process_uploadBuddyContent(seqid, iprot, oprot)
      args = read_args(iprot, UploadBuddyContent_args)
      result = UploadBuddyContent_result.new()
      begin
        result.success = @handler.uploadBuddyContent(args.contentType, args.content)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'uploadBuddyContent', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class AddBuddyMember_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    USERMID = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      USERMID => {:type => ::Thrift::Types::STRING, :name => 'userMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddBuddyMember_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddBuddyMembers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    USERMIDS = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      USERMIDS => {:type => ::Thrift::Types::LIST, :name => 'userMids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddBuddyMembers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BlockBuddyMember_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    MID = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BlockBuddyMember_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CommitSendMessagesToAll_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTIDLIST = 1

    FIELDS = {
      REQUESTIDLIST => {:type => ::Thrift::Types::LIST, :name => 'requestIdList', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CommitSendMessagesToAll_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SendBuddyMessageResult}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CommitSendMessagesToMids_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTIDLIST = 1
    MIDS = 2

    FIELDS = {
      REQUESTIDLIST => {:type => ::Thrift::Types::LIST, :name => 'requestIdList', :element => {:type => ::Thrift::Types::STRING}},
      MIDS => {:type => ::Thrift::Types::LIST, :name => 'mids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CommitSendMessagesToMids_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SendBuddyMessageResult}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ContainsBuddyMember_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    USERMID = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      USERMID => {:type => ::Thrift::Types::STRING, :name => 'userMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ContainsBuddyMember_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DownloadMessageContent_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    MESSAGEID = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DownloadMessageContent_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DownloadMessageContentPreview_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    MESSAGEID = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DownloadMessageContentPreview_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DownloadProfileImage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DownloadProfileImage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DownloadProfileImagePreview_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DownloadProfileImagePreview_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetActiveMemberCountByBuddyMid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BUDDYMID = 2

    FIELDS = {
      BUDDYMID => {:type => ::Thrift::Types::STRING, :name => 'buddyMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetActiveMemberCountByBuddyMid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetActiveMemberMidsByBuddyMid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BUDDYMID = 2

    FIELDS = {
      BUDDYMID => {:type => ::Thrift::Types::STRING, :name => 'buddyMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetActiveMemberMidsByBuddyMid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllBuddyMembers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllBuddyMembers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBlockedBuddyMembers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBlockedBuddyMembers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBlockerCountByBuddyMid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BUDDYMID = 2

    FIELDS = {
      BUDDYMID => {:type => ::Thrift::Types::STRING, :name => 'buddyMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBlockerCountByBuddyMid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBuddyDetailByMid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BUDDYMID = 2

    FIELDS = {
      BUDDYMID => {:type => ::Thrift::Types::STRING, :name => 'buddyMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBuddyDetailByMid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::BuddyDetail},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBuddyProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBuddyProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::BuddyProfile},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContactTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContactTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Ticket},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMemberCountByBuddyMid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BUDDYMID = 2

    FIELDS = {
      BUDDYMID => {:type => ::Thrift::Types::STRING, :name => 'buddyMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMemberCountByBuddyMid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSendBuddyMessageResult_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SENDBUDDYMESSAGEREQUESTID = 1

    FIELDS = {
      SENDBUDDYMESSAGEREQUESTID => {:type => ::Thrift::Types::STRING, :name => 'sendBuddyMessageRequestId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSendBuddyMessageResult_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SendBuddyMessageResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSetBuddyOnAirResult_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SETBUDDYONAIRREQUESTID = 1

    FIELDS = {
      SETBUDDYONAIRREQUESTID => {:type => ::Thrift::Types::STRING, :name => 'setBuddyOnAirRequestId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSetBuddyOnAirResult_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SetBuddyOnAirResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUpdateBuddyProfileResult_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    UPDATEBUDDYPROFILEREQUESTID = 1

    FIELDS = {
      UPDATEBUDDYPROFILEREQUESTID => {:type => ::Thrift::Types::STRING, :name => 'updateBuddyProfileRequestId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUpdateBuddyProfileResult_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UpdateBuddyProfileResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsBuddyOnAirByMid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BUDDYMID = 2

    FIELDS = {
      BUDDYMID => {:type => ::Thrift::Types::STRING, :name => 'buddyMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsBuddyOnAirByMid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LinkAndSendBuddyContentMessageToAllAsync_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    MSG = 2
    SOURCECONTENTID = 3

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      MSG => {:type => ::Thrift::Types::STRUCT, :name => 'msg', :class => ::Message},
      SOURCECONTENTID => {:type => ::Thrift::Types::STRING, :name => 'sourceContentId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LinkAndSendBuddyContentMessageToAllAsync_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LinkAndSendBuddyContentMessageToMids_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    MSG = 2
    SOURCECONTENTID = 3
    MIDS = 4

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      MSG => {:type => ::Thrift::Types::STRUCT, :name => 'msg', :class => ::Message},
      SOURCECONTENTID => {:type => ::Thrift::Types::STRING, :name => 'sourceContentId'},
      MIDS => {:type => ::Thrift::Types::LIST, :name => 'mids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LinkAndSendBuddyContentMessageToMids_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SendBuddyMessageResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyBuddyBlocked_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BUDDYMID = 1
    BLOCKERMID = 2

    FIELDS = {
      BUDDYMID => {:type => ::Thrift::Types::STRING, :name => 'buddyMid'},
      BLOCKERMID => {:type => ::Thrift::Types::STRING, :name => 'blockerMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyBuddyBlocked_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyBuddyUnblocked_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BUDDYMID = 1
    BLOCKERMID = 2

    FIELDS = {
      BUDDYMID => {:type => ::Thrift::Types::STRING, :name => 'buddyMid'},
      BLOCKERMID => {:type => ::Thrift::Types::STRING, :name => 'blockerMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyBuddyUnblocked_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterBuddy_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BUDDYID = 2
    SEARCHID = 3
    DISPLAYNAME = 4
    STATUSMEESSAGE = 5
    PICTURE = 6
    SETTINGS = 7

    FIELDS = {
      BUDDYID => {:type => ::Thrift::Types::STRING, :name => 'buddyId'},
      SEARCHID => {:type => ::Thrift::Types::STRING, :name => 'searchId'},
      DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
      STATUSMEESSAGE => {:type => ::Thrift::Types::STRING, :name => 'statusMeessage'},
      PICTURE => {:type => ::Thrift::Types::STRING, :name => 'picture', :binary => true},
      SETTINGS => {:type => ::Thrift::Types::MAP, :name => 'settings', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterBuddy_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterBuddyAdmin_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BUDDYID = 2
    SEARCHID = 3
    DISPLAYNAME = 4
    STATUSMESSAGE = 5
    PICTURE = 6

    FIELDS = {
      BUDDYID => {:type => ::Thrift::Types::STRING, :name => 'buddyId'},
      SEARCHID => {:type => ::Thrift::Types::STRING, :name => 'searchId'},
      DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
      STATUSMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'statusMessage'},
      PICTURE => {:type => ::Thrift::Types::STRING, :name => 'picture', :binary => true}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterBuddyAdmin_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReissueContactTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EXPIRATIONTIME = 3
    MAXUSECOUNT = 4

    FIELDS = {
      EXPIRATIONTIME => {:type => ::Thrift::Types::I64, :name => 'expirationTime'},
      MAXUSECOUNT => {:type => ::Thrift::Types::I32, :name => 'maxUseCount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReissueContactTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveBuddyMember_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    USERMID = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      USERMID => {:type => ::Thrift::Types::STRING, :name => 'userMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveBuddyMember_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveBuddyMembers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    USERMIDS = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      USERMIDS => {:type => ::Thrift::Types::LIST, :name => 'userMids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveBuddyMembers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendBuddyContentMessageToAll_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    MSG = 2
    CONTENT = 3

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      MSG => {:type => ::Thrift::Types::STRUCT, :name => 'msg', :class => ::Message},
      CONTENT => {:type => ::Thrift::Types::STRING, :name => 'content', :binary => true}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendBuddyContentMessageToAll_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SendBuddyMessageResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendBuddyContentMessageToAllAsync_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    MSG = 2
    CONTENT = 3

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      MSG => {:type => ::Thrift::Types::STRUCT, :name => 'msg', :class => ::Message},
      CONTENT => {:type => ::Thrift::Types::STRING, :name => 'content', :binary => true}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendBuddyContentMessageToAllAsync_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendBuddyContentMessageToMids_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    MSG = 2
    CONTENT = 3
    MIDS = 4

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      MSG => {:type => ::Thrift::Types::STRUCT, :name => 'msg', :class => ::Message},
      CONTENT => {:type => ::Thrift::Types::STRING, :name => 'content', :binary => true},
      MIDS => {:type => ::Thrift::Types::LIST, :name => 'mids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendBuddyContentMessageToMids_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SendBuddyMessageResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendBuddyContentMessageToMidsAsync_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    MSG = 2
    CONTENT = 3
    MIDS = 4

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      MSG => {:type => ::Thrift::Types::STRUCT, :name => 'msg', :class => ::Message},
      CONTENT => {:type => ::Thrift::Types::STRING, :name => 'content', :binary => true},
      MIDS => {:type => ::Thrift::Types::LIST, :name => 'mids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendBuddyContentMessageToMidsAsync_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendBuddyMessageToAll_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    MSG = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      MSG => {:type => ::Thrift::Types::STRUCT, :name => 'msg', :class => ::Message}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendBuddyMessageToAll_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SendBuddyMessageResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendBuddyMessageToAllAsync_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    MSG = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      MSG => {:type => ::Thrift::Types::STRUCT, :name => 'msg', :class => ::Message}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendBuddyMessageToAllAsync_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendBuddyMessageToMids_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    MSG = 2
    MIDS = 3

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      MSG => {:type => ::Thrift::Types::STRUCT, :name => 'msg', :class => ::Message},
      MIDS => {:type => ::Thrift::Types::LIST, :name => 'mids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendBuddyMessageToMids_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SendBuddyMessageResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendBuddyMessageToMidsAsync_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    MSG = 2
    MIDS = 3

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      MSG => {:type => ::Thrift::Types::STRUCT, :name => 'msg', :class => ::Message},
      MIDS => {:type => ::Thrift::Types::LIST, :name => 'mids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendBuddyMessageToMidsAsync_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendIndividualEventToAllAsync_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    BUDDYMID = 2
    NOTIFICATIONSTATUS = 3

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      BUDDYMID => {:type => ::Thrift::Types::STRING, :name => 'buddyMid'},
      NOTIFICATIONSTATUS => {:type => ::Thrift::Types::I32, :name => 'notificationStatus', :enum_class => ::NotificationStatus}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @notificationStatus.nil? || ::NotificationStatus::VALID_VALUES.include?(@notificationStatus)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field notificationStatus!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendIndividualEventToAllAsync_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetBuddyOnAir_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    ONAIR = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      ONAIR => {:type => ::Thrift::Types::BOOL, :name => 'onAir'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetBuddyOnAir_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SetBuddyOnAirResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetBuddyOnAirAsync_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    ONAIR = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      ONAIR => {:type => ::Thrift::Types::BOOL, :name => 'onAir'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetBuddyOnAirAsync_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class StoreMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    MESSAGEREQUEST = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      MESSAGEREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'messageRequest', :class => ::BuddyMessageRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class StoreMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SendBuddyMessageResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnblockBuddyMember_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    MID = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnblockBuddyMember_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnregisterBuddy_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnregisterBuddy_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnregisterBuddyAdmin_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnregisterBuddyAdmin_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddyAdminProfileAttribute_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    ATTRIBUTES = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      ATTRIBUTES => {:type => ::Thrift::Types::MAP, :name => 'attributes', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddyAdminProfileAttribute_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddyAdminProfileImage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    PICTURE = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      PICTURE => {:type => ::Thrift::Types::STRING, :name => 'picture', :binary => true}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddyAdminProfileImage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddyProfileAttributes_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    ATTRIBUTES = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      ATTRIBUTES => {:type => ::Thrift::Types::MAP, :name => 'attributes', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddyProfileAttributes_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UpdateBuddyProfileResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddyProfileAttributesAsync_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    ATTRIBUTES = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      ATTRIBUTES => {:type => ::Thrift::Types::MAP, :name => 'attributes', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddyProfileAttributesAsync_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddyProfileImage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    IMAGE = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      IMAGE => {:type => ::Thrift::Types::STRING, :name => 'image', :binary => true}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddyProfileImage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UpdateBuddyProfileResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddyProfileImageAsync_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    IMAGE = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      IMAGE => {:type => ::Thrift::Types::STRING, :name => 'image', :binary => true}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddyProfileImageAsync_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddySearchId_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUESTID = 1
    SEARCHID = 2

    FIELDS = {
      REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
      SEARCHID => {:type => ::Thrift::Types::STRING, :name => 'searchId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddySearchId_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddySettings_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SETTINGS = 2

    FIELDS = {
      SETTINGS => {:type => ::Thrift::Types::MAP, :name => 'settings', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddySettings_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UploadBuddyContent_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CONTENTTYPE = 2
    CONTENT = 3

    FIELDS = {
      CONTENTTYPE => {:type => ::Thrift::Types::I32, :name => 'contentType', :enum_class => ::ContentType},
      CONTENT => {:type => ::Thrift::Types::STRING, :name => 'content', :binary => true}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @contentType.nil? || ::ContentType::VALID_VALUES.include?(@contentType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field contentType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UploadBuddyContent_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

