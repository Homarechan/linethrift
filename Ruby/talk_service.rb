#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'line_types'

module TalkService
  class Client
    include ::Thrift::Client

    def getChatRoomAnnouncementsBulk(chatRoomMids)
      send_getChatRoomAnnouncementsBulk(chatRoomMids)
      return recv_getChatRoomAnnouncementsBulk()
    end

    def send_getChatRoomAnnouncementsBulk(chatRoomMids)
      send_message('getChatRoomAnnouncementsBulk', GetChatRoomAnnouncementsBulk_args, :chatRoomMids => chatRoomMids)
    end

    def recv_getChatRoomAnnouncementsBulk()
      result = receive_message(GetChatRoomAnnouncementsBulk_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getChatRoomAnnouncementsBulk failed: unknown result')
    end

    def getChatRoomAnnouncements(chatRoomMid)
      send_getChatRoomAnnouncements(chatRoomMid)
      return recv_getChatRoomAnnouncements()
    end

    def send_getChatRoomAnnouncements(chatRoomMid)
      send_message('getChatRoomAnnouncements', GetChatRoomAnnouncements_args, :chatRoomMid => chatRoomMid)
    end

    def recv_getChatRoomAnnouncements()
      result = receive_message(GetChatRoomAnnouncements_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getChatRoomAnnouncements failed: unknown result')
    end

    def createChatRoomAnnouncement(reqSeq, chatRoomMid, type, contents)
      send_createChatRoomAnnouncement(reqSeq, chatRoomMid, type, contents)
      return recv_createChatRoomAnnouncement()
    end

    def send_createChatRoomAnnouncement(reqSeq, chatRoomMid, type, contents)
      send_message('createChatRoomAnnouncement', CreateChatRoomAnnouncement_args, :reqSeq => reqSeq, :chatRoomMid => chatRoomMid, :type => type, :contents => contents)
    end

    def recv_createChatRoomAnnouncement()
      result = receive_message(CreateChatRoomAnnouncement_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createChatRoomAnnouncement failed: unknown result')
    end

    def removeChatRoomAnnouncement(reqSeq, chatRoomMid, announcementSeq)
      send_removeChatRoomAnnouncement(reqSeq, chatRoomMid, announcementSeq)
      recv_removeChatRoomAnnouncement()
    end

    def send_removeChatRoomAnnouncement(reqSeq, chatRoomMid, announcementSeq)
      send_message('removeChatRoomAnnouncement', RemoveChatRoomAnnouncement_args, :reqSeq => reqSeq, :chatRoomMid => chatRoomMid, :announcementSeq => announcementSeq)
    end

    def recv_removeChatRoomAnnouncement()
      result = receive_message(RemoveChatRoomAnnouncement_result)
      raise result.e unless result.e.nil?
      return
    end

    def unsendMessage(seq, messageId)
      send_unsendMessage(seq, messageId)
      recv_unsendMessage()
    end

    def send_unsendMessage(seq, messageId)
      send_message('unsendMessage', UnsendMessage_args, :seq => seq, :messageId => messageId)
    end

    def recv_unsendMessage()
      result = receive_message(UnsendMessage_result)
      raise result.e unless result.e.nil?
      return
    end

    def getGroupWithoutMembers(groupId)
      send_getGroupWithoutMembers(groupId)
      return recv_getGroupWithoutMembers()
    end

    def send_getGroupWithoutMembers(groupId)
      send_message('getGroupWithoutMembers', GetGroupWithoutMembers_args, :groupId => groupId)
    end

    def recv_getGroupWithoutMembers()
      result = receive_message(GetGroupWithoutMembers_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupWithoutMembers failed: unknown result')
    end

    def requestResendMessage(reqSeq, senderMid, messageId)
      send_requestResendMessage(reqSeq, senderMid, messageId)
      recv_requestResendMessage()
    end

    def send_requestResendMessage(reqSeq, senderMid, messageId)
      send_message('requestResendMessage', RequestResendMessage_args, :reqSeq => reqSeq, :senderMid => senderMid, :messageId => messageId)
    end

    def recv_requestResendMessage()
      result = receive_message(RequestResendMessage_result)
      raise result.e unless result.e.nil?
      return
    end

    def respondResendMessage(reqSeq, receiverMid, originalMessageId, resendMessage, errorCode)
      send_respondResendMessage(reqSeq, receiverMid, originalMessageId, resendMessage, errorCode)
      recv_respondResendMessage()
    end

    def send_respondResendMessage(reqSeq, receiverMid, originalMessageId, resendMessage, errorCode)
      send_message('respondResendMessage', RespondResendMessage_args, :reqSeq => reqSeq, :receiverMid => receiverMid, :originalMessageId => originalMessageId, :resendMessage => resendMessage, :errorCode => errorCode)
    end

    def recv_respondResendMessage()
      result = receive_message(RespondResendMessage_result)
      raise result.e unless result.e.nil?
      return
    end

    def acceptGroupInvitation(reqSeq, groupId)
      send_acceptGroupInvitation(reqSeq, groupId)
      recv_acceptGroupInvitation()
    end

    def send_acceptGroupInvitation(reqSeq, groupId)
      send_message('acceptGroupInvitation', AcceptGroupInvitation_args, :reqSeq => reqSeq, :groupId => groupId)
    end

    def recv_acceptGroupInvitation()
      result = receive_message(AcceptGroupInvitation_result)
      raise result.e unless result.e.nil?
      return
    end

    def acceptGroupInvitationByTicket(reqSeq, GroupMid, ticketId)
      send_acceptGroupInvitationByTicket(reqSeq, GroupMid, ticketId)
      recv_acceptGroupInvitationByTicket()
    end

    def send_acceptGroupInvitationByTicket(reqSeq, GroupMid, ticketId)
      send_message('acceptGroupInvitationByTicket', AcceptGroupInvitationByTicket_args, :reqSeq => reqSeq, :GroupMid => GroupMid, :ticketId => ticketId)
    end

    def recv_acceptGroupInvitationByTicket()
      result = receive_message(AcceptGroupInvitationByTicket_result)
      raise result.e unless result.e.nil?
      return
    end

    def acceptProximityMatches(sessionId, ids)
      send_acceptProximityMatches(sessionId, ids)
      recv_acceptProximityMatches()
    end

    def send_acceptProximityMatches(sessionId, ids)
      send_message('acceptProximityMatches', AcceptProximityMatches_args, :sessionId => sessionId, :ids => ids)
    end

    def recv_acceptProximityMatches()
      result = receive_message(AcceptProximityMatches_result)
      raise result.e unless result.e.nil?
      return
    end

    def acquireCallRoute(to)
      send_acquireCallRoute(to)
      return recv_acquireCallRoute()
    end

    def send_acquireCallRoute(to)
      send_message('acquireCallRoute', AcquireCallRoute_args, :to => to)
    end

    def recv_acquireCallRoute()
      result = receive_message(AcquireCallRoute_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'acquireCallRoute failed: unknown result')
    end

    def acquireCallTicket(to)
      send_acquireCallTicket(to)
      return recv_acquireCallTicket()
    end

    def send_acquireCallTicket(to)
      send_message('acquireCallTicket', AcquireCallTicket_args, :to => to)
    end

    def recv_acquireCallTicket()
      result = receive_message(AcquireCallTicket_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'acquireCallTicket failed: unknown result')
    end

    def acquireEncryptedAccessToken(featureType)
      send_acquireEncryptedAccessToken(featureType)
      return recv_acquireEncryptedAccessToken()
    end

    def send_acquireEncryptedAccessToken(featureType)
      send_message('acquireEncryptedAccessToken', AcquireEncryptedAccessToken_args, :featureType => featureType)
    end

    def recv_acquireEncryptedAccessToken()
      result = receive_message(AcquireEncryptedAccessToken_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'acquireEncryptedAccessToken failed: unknown result')
    end

    def addSnsId(snsIdType, snsAccessToken)
      send_addSnsId(snsIdType, snsAccessToken)
      return recv_addSnsId()
    end

    def send_addSnsId(snsIdType, snsAccessToken)
      send_message('addSnsId', AddSnsId_args, :snsIdType => snsIdType, :snsAccessToken => snsAccessToken)
    end

    def recv_addSnsId()
      result = receive_message(AddSnsId_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addSnsId failed: unknown result')
    end

    def blockContact(reqSeq, id)
      send_blockContact(reqSeq, id)
      recv_blockContact()
    end

    def send_blockContact(reqSeq, id)
      send_message('blockContact', BlockContact_args, :reqSeq => reqSeq, :id => id)
    end

    def recv_blockContact()
      result = receive_message(BlockContact_result)
      raise result.e unless result.e.nil?
      return
    end

    def blockRecommendation(reqSeq, id)
      send_blockRecommendation(reqSeq, id)
      recv_blockRecommendation()
    end

    def send_blockRecommendation(reqSeq, id)
      send_message('blockRecommendation', BlockRecommendation_args, :reqSeq => reqSeq, :id => id)
    end

    def recv_blockRecommendation()
      result = receive_message(BlockRecommendation_result)
      raise result.e unless result.e.nil?
      return
    end

    def cancelGroupInvitation(reqSeq, groupId, contactIds)
      send_cancelGroupInvitation(reqSeq, groupId, contactIds)
      recv_cancelGroupInvitation()
    end

    def send_cancelGroupInvitation(reqSeq, groupId, contactIds)
      send_message('cancelGroupInvitation', CancelGroupInvitation_args, :reqSeq => reqSeq, :groupId => groupId, :contactIds => contactIds)
    end

    def recv_cancelGroupInvitation()
      result = receive_message(CancelGroupInvitation_result)
      raise result.e unless result.e.nil?
      return
    end

    def changeVerificationMethod(sessionId, method)
      send_changeVerificationMethod(sessionId, method)
      return recv_changeVerificationMethod()
    end

    def send_changeVerificationMethod(sessionId, method)
      send_message('changeVerificationMethod', ChangeVerificationMethod_args, :sessionId => sessionId, :method => method)
    end

    def recv_changeVerificationMethod()
      result = receive_message(ChangeVerificationMethod_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'changeVerificationMethod failed: unknown result')
    end

    def clearIdentityCredential()
      send_clearIdentityCredential()
      recv_clearIdentityCredential()
    end

    def send_clearIdentityCredential()
      send_message('clearIdentityCredential', ClearIdentityCredential_args)
    end

    def recv_clearIdentityCredential()
      result = receive_message(ClearIdentityCredential_result)
      raise result.e unless result.e.nil?
      return
    end

    def clearMessageBox(channelId, messageBoxId)
      send_clearMessageBox(channelId, messageBoxId)
      recv_clearMessageBox()
    end

    def send_clearMessageBox(channelId, messageBoxId)
      send_message('clearMessageBox', ClearMessageBox_args, :channelId => channelId, :messageBoxId => messageBoxId)
    end

    def recv_clearMessageBox()
      result = receive_message(ClearMessageBox_result)
      raise result.e unless result.e.nil?
      return
    end

    def closeProximityMatch(sessionId)
      send_closeProximityMatch(sessionId)
      recv_closeProximityMatch()
    end

    def send_closeProximityMatch(sessionId)
      send_message('closeProximityMatch', CloseProximityMatch_args, :sessionId => sessionId)
    end

    def recv_closeProximityMatch()
      result = receive_message(CloseProximityMatch_result)
      raise result.e unless result.e.nil?
      return
    end

    def commitSendMessage(seq, messageId, receiverMids)
      send_commitSendMessage(seq, messageId, receiverMids)
      return recv_commitSendMessage()
    end

    def send_commitSendMessage(seq, messageId, receiverMids)
      send_message('commitSendMessage', CommitSendMessage_args, :seq => seq, :messageId => messageId, :receiverMids => receiverMids)
    end

    def recv_commitSendMessage()
      result = receive_message(CommitSendMessage_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'commitSendMessage failed: unknown result')
    end

    def commitSendMessages(seq, messageIds, receiverMids)
      send_commitSendMessages(seq, messageIds, receiverMids)
      return recv_commitSendMessages()
    end

    def send_commitSendMessages(seq, messageIds, receiverMids)
      send_message('commitSendMessages', CommitSendMessages_args, :seq => seq, :messageIds => messageIds, :receiverMids => receiverMids)
    end

    def recv_commitSendMessages()
      result = receive_message(CommitSendMessages_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'commitSendMessages failed: unknown result')
    end

    def commitUpdateProfile(seq, attrs, receiverMids)
      send_commitUpdateProfile(seq, attrs, receiverMids)
      return recv_commitUpdateProfile()
    end

    def send_commitUpdateProfile(seq, attrs, receiverMids)
      send_message('commitUpdateProfile', CommitUpdateProfile_args, :seq => seq, :attrs => attrs, :receiverMids => receiverMids)
    end

    def recv_commitUpdateProfile()
      result = receive_message(CommitUpdateProfile_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'commitUpdateProfile failed: unknown result')
    end

    def confirmEmail(verifier, pinCode)
      send_confirmEmail(verifier, pinCode)
      recv_confirmEmail()
    end

    def send_confirmEmail(verifier, pinCode)
      send_message('confirmEmail', ConfirmEmail_args, :verifier => verifier, :pinCode => pinCode)
    end

    def recv_confirmEmail()
      result = receive_message(ConfirmEmail_result)
      raise result.e unless result.e.nil?
      return
    end

    def createGroup(seq, name, contactIds)
      send_createGroup(seq, name, contactIds)
      return recv_createGroup()
    end

    def send_createGroup(seq, name, contactIds)
      send_message('createGroup', CreateGroup_args, :seq => seq, :name => name, :contactIds => contactIds)
    end

    def recv_createGroup()
      result = receive_message(CreateGroup_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createGroup failed: unknown result')
    end

    def createQrcodeBase64Image(url, characterSet, imageSize, x, y, width, height)
      send_createQrcodeBase64Image(url, characterSet, imageSize, x, y, width, height)
      return recv_createQrcodeBase64Image()
    end

    def send_createQrcodeBase64Image(url, characterSet, imageSize, x, y, width, height)
      send_message('createQrcodeBase64Image', CreateQrcodeBase64Image_args, :url => url, :characterSet => characterSet, :imageSize => imageSize, :x => x, :y => y, :width => width, :height => height)
    end

    def recv_createQrcodeBase64Image()
      result = receive_message(CreateQrcodeBase64Image_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createQrcodeBase64Image failed: unknown result')
    end

    def createRoom(reqSeq, contactIds)
      send_createRoom(reqSeq, contactIds)
      return recv_createRoom()
    end

    def send_createRoom(reqSeq, contactIds)
      send_message('createRoom', CreateRoom_args, :reqSeq => reqSeq, :contactIds => contactIds)
    end

    def recv_createRoom()
      result = receive_message(CreateRoom_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createRoom failed: unknown result')
    end

    def createSession()
      send_createSession()
      return recv_createSession()
    end

    def send_createSession()
      send_message('createSession', CreateSession_args)
    end

    def recv_createSession()
      result = receive_message(CreateSession_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createSession failed: unknown result')
    end

    def fetchAnnouncements(lastFetchedIndex)
      send_fetchAnnouncements(lastFetchedIndex)
      return recv_fetchAnnouncements()
    end

    def send_fetchAnnouncements(lastFetchedIndex)
      send_message('fetchAnnouncements', FetchAnnouncements_args, :lastFetchedIndex => lastFetchedIndex)
    end

    def recv_fetchAnnouncements()
      result = receive_message(FetchAnnouncements_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'fetchAnnouncements failed: unknown result')
    end

    def fetchMessages(localTs, count)
      send_fetchMessages(localTs, count)
      return recv_fetchMessages()
    end

    def send_fetchMessages(localTs, count)
      send_message('fetchMessages', FetchMessages_args, :localTs => localTs, :count => count)
    end

    def recv_fetchMessages()
      result = receive_message(FetchMessages_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'fetchMessages failed: unknown result')
    end

    def fetchOperations(localRev, count)
      send_fetchOperations(localRev, count)
      return recv_fetchOperations()
    end

    def send_fetchOperations(localRev, count)
      send_message('fetchOperations', FetchOperations_args, :localRev => localRev, :count => count)
    end

    def recv_fetchOperations()
      result = receive_message(FetchOperations_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'fetchOperations failed: unknown result')
    end

    def fetchOps(localRev, count, globalRev, individualRev)
      send_fetchOps(localRev, count, globalRev, individualRev)
      return recv_fetchOps()
    end

    def send_fetchOps(localRev, count, globalRev, individualRev)
      send_message('fetchOps', FetchOps_args, :localRev => localRev, :count => count, :globalRev => globalRev, :individualRev => individualRev)
    end

    def recv_fetchOps()
      result = receive_message(FetchOps_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'fetchOps failed: unknown result')
    end

    def findAndAddContactsByEmail(reqSeq, emails)
      send_findAndAddContactsByEmail(reqSeq, emails)
      return recv_findAndAddContactsByEmail()
    end

    def send_findAndAddContactsByEmail(reqSeq, emails)
      send_message('findAndAddContactsByEmail', FindAndAddContactsByEmail_args, :reqSeq => reqSeq, :emails => emails)
    end

    def recv_findAndAddContactsByEmail()
      result = receive_message(FindAndAddContactsByEmail_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findAndAddContactsByEmail failed: unknown result')
    end

    def findAndAddContactsByMid(reqSeq, mid, type, reference)
      send_findAndAddContactsByMid(reqSeq, mid, type, reference)
      return recv_findAndAddContactsByMid()
    end

    def send_findAndAddContactsByMid(reqSeq, mid, type, reference)
      send_message('findAndAddContactsByMid', FindAndAddContactsByMid_args, :reqSeq => reqSeq, :mid => mid, :type => type, :reference => reference)
    end

    def recv_findAndAddContactsByMid()
      result = receive_message(FindAndAddContactsByMid_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findAndAddContactsByMid failed: unknown result')
    end

    def findGroupByTicketV2(ticketId)
      send_findGroupByTicketV2(ticketId)
      return recv_findGroupByTicketV2()
    end

    def send_findGroupByTicketV2(ticketId)
      send_message('findGroupByTicketV2', FindGroupByTicketV2_args, :ticketId => ticketId)
    end

    def recv_findGroupByTicketV2()
      result = receive_message(FindGroupByTicketV2_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findGroupByTicketV2 failed: unknown result')
    end

    def findAndAddContactsByPhone(reqSeq, phones)
      send_findAndAddContactsByPhone(reqSeq, phones)
      return recv_findAndAddContactsByPhone()
    end

    def send_findAndAddContactsByPhone(reqSeq, phones)
      send_message('findAndAddContactsByPhone', FindAndAddContactsByPhone_args, :reqSeq => reqSeq, :phones => phones)
    end

    def recv_findAndAddContactsByPhone()
      result = receive_message(FindAndAddContactsByPhone_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findAndAddContactsByPhone failed: unknown result')
    end

    def getFriendRequests(direction, lastSeenSeqId)
      send_getFriendRequests(direction, lastSeenSeqId)
      return recv_getFriendRequests()
    end

    def send_getFriendRequests(direction, lastSeenSeqId)
      send_message('getFriendRequests', GetFriendRequests_args, :direction => direction, :lastSeenSeqId => lastSeenSeqId)
    end

    def recv_getFriendRequests()
      result = receive_message(GetFriendRequests_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getFriendRequests failed: unknown result')
    end

    def removeFriendRequest(direction, midOrEMid)
      send_removeFriendRequest(direction, midOrEMid)
      recv_removeFriendRequest()
    end

    def send_removeFriendRequest(direction, midOrEMid)
      send_message('removeFriendRequest', RemoveFriendRequest_args, :direction => direction, :midOrEMid => midOrEMid)
    end

    def recv_removeFriendRequest()
      result = receive_message(RemoveFriendRequest_result)
      raise result.e unless result.e.nil?
      return
    end

    def findAndAddContactsByUserid(reqSeq, userid)
      send_findAndAddContactsByUserid(reqSeq, userid)
      return recv_findAndAddContactsByUserid()
    end

    def send_findAndAddContactsByUserid(reqSeq, userid)
      send_message('findAndAddContactsByUserid', FindAndAddContactsByUserid_args, :reqSeq => reqSeq, :userid => userid)
    end

    def recv_findAndAddContactsByUserid()
      result = receive_message(FindAndAddContactsByUserid_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findAndAddContactsByUserid failed: unknown result')
    end

    def findContactByUserid(userid)
      send_findContactByUserid(userid)
      return recv_findContactByUserid()
    end

    def send_findContactByUserid(userid)
      send_message('findContactByUserid', FindContactByUserid_args, :userid => userid)
    end

    def recv_findContactByUserid()
      result = receive_message(FindContactByUserid_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findContactByUserid failed: unknown result')
    end

    def findContactByUserTicket(ticketIdWithTag)
      send_findContactByUserTicket(ticketIdWithTag)
      return recv_findContactByUserTicket()
    end

    def send_findContactByUserTicket(ticketIdWithTag)
      send_message('findContactByUserTicket', FindContactByUserTicket_args, :ticketIdWithTag => ticketIdWithTag)
    end

    def recv_findContactByUserTicket()
      result = receive_message(FindContactByUserTicket_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findContactByUserTicket failed: unknown result')
    end

    def findContactsByEmail(emails)
      send_findContactsByEmail(emails)
      return recv_findContactsByEmail()
    end

    def send_findContactsByEmail(emails)
      send_message('findContactsByEmail', FindContactsByEmail_args, :emails => emails)
    end

    def recv_findContactsByEmail()
      result = receive_message(FindContactsByEmail_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findContactsByEmail failed: unknown result')
    end

    def findContactsByPhone(phones)
      send_findContactsByPhone(phones)
      return recv_findContactsByPhone()
    end

    def send_findContactsByPhone(phones)
      send_message('findContactsByPhone', FindContactsByPhone_args, :phones => phones)
    end

    def recv_findContactsByPhone()
      result = receive_message(FindContactsByPhone_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findContactsByPhone failed: unknown result')
    end

    def findSnsIdUserStatus(snsIdType, snsAccessToken, udidHash)
      send_findSnsIdUserStatus(snsIdType, snsAccessToken, udidHash)
      return recv_findSnsIdUserStatus()
    end

    def send_findSnsIdUserStatus(snsIdType, snsAccessToken, udidHash)
      send_message('findSnsIdUserStatus', FindSnsIdUserStatus_args, :snsIdType => snsIdType, :snsAccessToken => snsAccessToken, :udidHash => udidHash)
    end

    def recv_findSnsIdUserStatus()
      result = receive_message(FindSnsIdUserStatus_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findSnsIdUserStatus failed: unknown result')
    end

    def finishUpdateVerification(sessionId)
      send_finishUpdateVerification(sessionId)
      recv_finishUpdateVerification()
    end

    def send_finishUpdateVerification(sessionId)
      send_message('finishUpdateVerification', FinishUpdateVerification_args, :sessionId => sessionId)
    end

    def recv_finishUpdateVerification()
      result = receive_message(FinishUpdateVerification_result)
      raise result.e unless result.e.nil?
      return
    end

    def generateUserTicket(expirationTime, maxUseCount)
      send_generateUserTicket(expirationTime, maxUseCount)
      return recv_generateUserTicket()
    end

    def send_generateUserTicket(expirationTime, maxUseCount)
      send_message('generateUserTicket', GenerateUserTicket_args, :expirationTime => expirationTime, :maxUseCount => maxUseCount)
    end

    def recv_generateUserTicket()
      result = receive_message(GenerateUserTicket_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'generateUserTicket failed: unknown result')
    end

    def destroyMessage(seq, chatId, messageId, sessionId)
      send_destroyMessage(seq, chatId, messageId, sessionId)
      recv_destroyMessage()
    end

    def send_destroyMessage(seq, chatId, messageId, sessionId)
      send_message('destroyMessage', DestroyMessage_args, :seq => seq, :chatId => chatId, :messageId => messageId, :sessionId => sessionId)
    end

    def recv_destroyMessage()
      result = receive_message(DestroyMessage_result)
      raise result.e unless result.e.nil?
      return
    end

    def getAcceptedProximityMatches(sessionId)
      send_getAcceptedProximityMatches(sessionId)
      return recv_getAcceptedProximityMatches()
    end

    def send_getAcceptedProximityMatches(sessionId)
      send_message('getAcceptedProximityMatches', GetAcceptedProximityMatches_args, :sessionId => sessionId)
    end

    def recv_getAcceptedProximityMatches()
      result = receive_message(GetAcceptedProximityMatches_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAcceptedProximityMatches failed: unknown result')
    end

    def getActiveBuddySubscriberIds()
      send_getActiveBuddySubscriberIds()
      return recv_getActiveBuddySubscriberIds()
    end

    def send_getActiveBuddySubscriberIds()
      send_message('getActiveBuddySubscriberIds', GetActiveBuddySubscriberIds_args)
    end

    def recv_getActiveBuddySubscriberIds()
      result = receive_message(GetActiveBuddySubscriberIds_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getActiveBuddySubscriberIds failed: unknown result')
    end

    def getAllContactIds()
      send_getAllContactIds()
      return recv_getAllContactIds()
    end

    def send_getAllContactIds()
      send_message('getAllContactIds', GetAllContactIds_args)
    end

    def recv_getAllContactIds()
      result = receive_message(GetAllContactIds_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllContactIds failed: unknown result')
    end

    def getAuthQrcode(keepLoggedIn, systemName)
      send_getAuthQrcode(keepLoggedIn, systemName)
      return recv_getAuthQrcode()
    end

    def send_getAuthQrcode(keepLoggedIn, systemName)
      send_message('getAuthQrcode', GetAuthQrcode_args, :keepLoggedIn => keepLoggedIn, :systemName => systemName)
    end

    def recv_getAuthQrcode()
      result = receive_message(GetAuthQrcode_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAuthQrcode failed: unknown result')
    end

    def getBlockedContactIds()
      send_getBlockedContactIds()
      return recv_getBlockedContactIds()
    end

    def send_getBlockedContactIds()
      send_message('getBlockedContactIds', GetBlockedContactIds_args)
    end

    def recv_getBlockedContactIds()
      result = receive_message(GetBlockedContactIds_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getBlockedContactIds failed: unknown result')
    end

    def registerWithPhoneNumber(sessionId, migrationPincodeSessionId)
      send_registerWithPhoneNumber(sessionId, migrationPincodeSessionId)
      return recv_registerWithPhoneNumber()
    end

    def send_registerWithPhoneNumber(sessionId, migrationPincodeSessionId)
      send_message('registerWithPhoneNumber', RegisterWithPhoneNumber_args, :sessionId => sessionId, :migrationPincodeSessionId => migrationPincodeSessionId)
    end

    def recv_registerWithPhoneNumber()
      result = receive_message(RegisterWithPhoneNumber_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerWithPhoneNumber failed: unknown result')
    end

    def registerWithPhoneNumberAndPassword(sessionId, keynm, encrypted)
      send_registerWithPhoneNumberAndPassword(sessionId, keynm, encrypted)
      return recv_registerWithPhoneNumberAndPassword()
    end

    def send_registerWithPhoneNumberAndPassword(sessionId, keynm, encrypted)
      send_message('registerWithPhoneNumberAndPassword', RegisterWithPhoneNumberAndPassword_args, :sessionId => sessionId, :keynm => keynm, :encrypted => encrypted)
    end

    def recv_registerWithPhoneNumberAndPassword()
      result = receive_message(RegisterWithPhoneNumberAndPassword_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerWithPhoneNumberAndPassword failed: unknown result')
    end

    def getAnalyticsInfo()
      send_getAnalyticsInfo()
      return recv_getAnalyticsInfo()
    end

    def send_getAnalyticsInfo()
      send_message('getAnalyticsInfo', GetAnalyticsInfo_args)
    end

    def recv_getAnalyticsInfo()
      result = receive_message(GetAnalyticsInfo_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAnalyticsInfo failed: unknown result')
    end

    def reportClientStatistics(reqSeq, category, count)
      send_reportClientStatistics(reqSeq, category, count)
      recv_reportClientStatistics()
    end

    def send_reportClientStatistics(reqSeq, category, count)
      send_message('reportClientStatistics', ReportClientStatistics_args, :reqSeq => reqSeq, :category => category, :count => count)
    end

    def recv_reportClientStatistics()
      result = receive_message(ReportClientStatistics_result)
      raise result.e unless result.e.nil?
      return
    end

    def verifyPhoneNumberForLogin(verifierFromPhone, pinCodeForPhone, verifierFromLogin)
      send_verifyPhoneNumberForLogin(verifierFromPhone, pinCodeForPhone, verifierFromLogin)
      return recv_verifyPhoneNumberForLogin()
    end

    def send_verifyPhoneNumberForLogin(verifierFromPhone, pinCodeForPhone, verifierFromLogin)
      send_message('verifyPhoneNumberForLogin', VerifyPhoneNumberForLogin_args, :verifierFromPhone => verifierFromPhone, :pinCodeForPhone => pinCodeForPhone, :verifierFromLogin => verifierFromLogin)
    end

    def recv_verifyPhoneNumberForLogin()
      result = receive_message(VerifyPhoneNumberForLogin_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'verifyPhoneNumberForLogin failed: unknown result')
    end

    def verifyPhoneNumber(sessionId, pinCode, udidHash, migrationPincodeSessionId, oldUdidHash)
      send_verifyPhoneNumber(sessionId, pinCode, udidHash, migrationPincodeSessionId, oldUdidHash)
      return recv_verifyPhoneNumber()
    end

    def send_verifyPhoneNumber(sessionId, pinCode, udidHash, migrationPincodeSessionId, oldUdidHash)
      send_message('verifyPhoneNumber', VerifyPhoneNumber_args, :sessionId => sessionId, :pinCode => pinCode, :udidHash => udidHash, :migrationPincodeSessionId => migrationPincodeSessionId, :oldUdidHash => oldUdidHash)
    end

    def recv_verifyPhoneNumber()
      result = receive_message(VerifyPhoneNumber_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'verifyPhoneNumber failed: unknown result')
    end

    def getBlockedContactIdsByRange(start, count)
      send_getBlockedContactIdsByRange(start, count)
      return recv_getBlockedContactIdsByRange()
    end

    def send_getBlockedContactIdsByRange(start, count)
      send_message('getBlockedContactIdsByRange', GetBlockedContactIdsByRange_args, :start => start, :count => count)
    end

    def recv_getBlockedContactIdsByRange()
      result = receive_message(GetBlockedContactIdsByRange_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getBlockedContactIdsByRange failed: unknown result')
    end

    def getBlockedRecommendationIds()
      send_getBlockedRecommendationIds()
      return recv_getBlockedRecommendationIds()
    end

    def send_getBlockedRecommendationIds()
      send_message('getBlockedRecommendationIds', GetBlockedRecommendationIds_args)
    end

    def recv_getBlockedRecommendationIds()
      result = receive_message(GetBlockedRecommendationIds_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getBlockedRecommendationIds failed: unknown result')
    end

    def getBuddyBlockerIds()
      send_getBuddyBlockerIds()
      return recv_getBuddyBlockerIds()
    end

    def send_getBuddyBlockerIds()
      send_message('getBuddyBlockerIds', GetBuddyBlockerIds_args)
    end

    def recv_getBuddyBlockerIds()
      result = receive_message(GetBuddyBlockerIds_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getBuddyBlockerIds failed: unknown result')
    end

    def getBuddyLocation(mid, index)
      send_getBuddyLocation(mid, index)
      return recv_getBuddyLocation()
    end

    def send_getBuddyLocation(mid, index)
      send_message('getBuddyLocation', GetBuddyLocation_args, :mid => mid, :index => index)
    end

    def recv_getBuddyLocation()
      result = receive_message(GetBuddyLocation_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getBuddyLocation failed: unknown result')
    end

    def getCompactContactsModifiedSince(timestamp)
      send_getCompactContactsModifiedSince(timestamp)
      return recv_getCompactContactsModifiedSince()
    end

    def send_getCompactContactsModifiedSince(timestamp)
      send_message('getCompactContactsModifiedSince', GetCompactContactsModifiedSince_args, :timestamp => timestamp)
    end

    def recv_getCompactContactsModifiedSince()
      result = receive_message(GetCompactContactsModifiedSince_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCompactContactsModifiedSince failed: unknown result')
    end

    def getCompactGroup(groupId)
      send_getCompactGroup(groupId)
      return recv_getCompactGroup()
    end

    def send_getCompactGroup(groupId)
      send_message('getCompactGroup', GetCompactGroup_args, :groupId => groupId)
    end

    def recv_getCompactGroup()
      result = receive_message(GetCompactGroup_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCompactGroup failed: unknown result')
    end

    def getCompactRoom(roomId)
      send_getCompactRoom(roomId)
      return recv_getCompactRoom()
    end

    def send_getCompactRoom(roomId)
      send_message('getCompactRoom', GetCompactRoom_args, :roomId => roomId)
    end

    def recv_getCompactRoom()
      result = receive_message(GetCompactRoom_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCompactRoom failed: unknown result')
    end

    def getContact(id)
      send_getContact(id)
      return recv_getContact()
    end

    def send_getContact(id)
      send_message('getContact', GetContact_args, :id => id)
    end

    def recv_getContact()
      result = receive_message(GetContact_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getContact failed: unknown result')
    end

    def getContacts(ids)
      send_getContacts(ids)
      return recv_getContacts()
    end

    def send_getContacts(ids)
      send_message('getContacts', GetContacts_args, :ids => ids)
    end

    def recv_getContacts()
      result = receive_message(GetContacts_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getContacts failed: unknown result')
    end

    def getContactWithFriendRequestStatus(id)
      send_getContactWithFriendRequestStatus(id)
      return recv_getContactWithFriendRequestStatus()
    end

    def send_getContactWithFriendRequestStatus(id)
      send_message('getContactWithFriendRequestStatus', GetContactWithFriendRequestStatus_args, :id => id)
    end

    def recv_getContactWithFriendRequestStatus()
      result = receive_message(GetContactWithFriendRequestStatus_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getContactWithFriendRequestStatus failed: unknown result')
    end

    def getCountryWithRequestIp()
      send_getCountryWithRequestIp()
      return recv_getCountryWithRequestIp()
    end

    def send_getCountryWithRequestIp()
      send_message('getCountryWithRequestIp', GetCountryWithRequestIp_args)
    end

    def recv_getCountryWithRequestIp()
      result = receive_message(GetCountryWithRequestIp_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCountryWithRequestIp failed: unknown result')
    end

    def getFavoriteMids()
      send_getFavoriteMids()
      return recv_getFavoriteMids()
    end

    def send_getFavoriteMids()
      send_message('getFavoriteMids', GetFavoriteMids_args)
    end

    def recv_getFavoriteMids()
      result = receive_message(GetFavoriteMids_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getFavoriteMids failed: unknown result')
    end

    def getGroup(groupId)
      send_getGroup(groupId)
      return recv_getGroup()
    end

    def send_getGroup(groupId)
      send_message('getGroup', GetGroup_args, :groupId => groupId)
    end

    def recv_getGroup()
      result = receive_message(GetGroup_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroup failed: unknown result')
    end

    def getGroupIdsInvited()
      send_getGroupIdsInvited()
      return recv_getGroupIdsInvited()
    end

    def send_getGroupIdsInvited()
      send_message('getGroupIdsInvited', GetGroupIdsInvited_args)
    end

    def recv_getGroupIdsInvited()
      result = receive_message(GetGroupIdsInvited_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupIdsInvited failed: unknown result')
    end

    def getGroupIdsJoined()
      send_getGroupIdsJoined()
      return recv_getGroupIdsJoined()
    end

    def send_getGroupIdsJoined()
      send_message('getGroupIdsJoined', GetGroupIdsJoined_args)
    end

    def recv_getGroupIdsJoined()
      result = receive_message(GetGroupIdsJoined_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupIdsJoined failed: unknown result')
    end

    def getGroups(groupIds)
      send_getGroups(groupIds)
      return recv_getGroups()
    end

    def send_getGroups(groupIds)
      send_message('getGroups', GetGroups_args, :groupIds => groupIds)
    end

    def recv_getGroups()
      result = receive_message(GetGroups_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroups failed: unknown result')
    end

    def getHiddenContactMids()
      send_getHiddenContactMids()
      return recv_getHiddenContactMids()
    end

    def send_getHiddenContactMids()
      send_message('getHiddenContactMids', GetHiddenContactMids_args)
    end

    def recv_getHiddenContactMids()
      result = receive_message(GetHiddenContactMids_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getHiddenContactMids failed: unknown result')
    end

    def getIdentityIdentifier()
      send_getIdentityIdentifier()
      return recv_getIdentityIdentifier()
    end

    def send_getIdentityIdentifier()
      send_message('getIdentityIdentifier', GetIdentityIdentifier_args)
    end

    def recv_getIdentityIdentifier()
      result = receive_message(GetIdentityIdentifier_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getIdentityIdentifier failed: unknown result')
    end

    def getLastAnnouncementIndex()
      send_getLastAnnouncementIndex()
      return recv_getLastAnnouncementIndex()
    end

    def send_getLastAnnouncementIndex()
      send_message('getLastAnnouncementIndex', GetLastAnnouncementIndex_args)
    end

    def recv_getLastAnnouncementIndex()
      result = receive_message(GetLastAnnouncementIndex_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getLastAnnouncementIndex failed: unknown result')
    end

    def getLastOpRevision()
      send_getLastOpRevision()
      return recv_getLastOpRevision()
    end

    def send_getLastOpRevision()
      send_message('getLastOpRevision', GetLastOpRevision_args)
    end

    def recv_getLastOpRevision()
      result = receive_message(GetLastOpRevision_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getLastOpRevision failed: unknown result')
    end

    def getSuggestRevisions()
      send_getSuggestRevisions()
      return recv_getSuggestRevisions()
    end

    def send_getSuggestRevisions()
      send_message('getSuggestRevisions', GetSuggestRevisions_args)
    end

    def recv_getSuggestRevisions()
      result = receive_message(GetSuggestRevisions_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSuggestRevisions failed: unknown result')
    end

    def getPreviousMessagesV2WithReadCount(messageBoxId, endMessageId, messagesCount)
      send_getPreviousMessagesV2WithReadCount(messageBoxId, endMessageId, messagesCount)
      return recv_getPreviousMessagesV2WithReadCount()
    end

    def send_getPreviousMessagesV2WithReadCount(messageBoxId, endMessageId, messagesCount)
      send_message('getPreviousMessagesV2WithReadCount', GetPreviousMessagesV2WithReadCount_args, :messageBoxId => messageBoxId, :endMessageId => endMessageId, :messagesCount => messagesCount)
    end

    def recv_getPreviousMessagesV2WithReadCount()
      result = receive_message(GetPreviousMessagesV2WithReadCount_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPreviousMessagesV2WithReadCount failed: unknown result')
    end

    def getMessageBox(channelId, messageBoxId, lastMessagesCount)
      send_getMessageBox(channelId, messageBoxId, lastMessagesCount)
      return recv_getMessageBox()
    end

    def send_getMessageBox(channelId, messageBoxId, lastMessagesCount)
      send_message('getMessageBox', GetMessageBox_args, :channelId => channelId, :messageBoxId => messageBoxId, :lastMessagesCount => lastMessagesCount)
    end

    def recv_getMessageBox()
      result = receive_message(GetMessageBox_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMessageBox failed: unknown result')
    end

    def getMessageBoxCompactWrapUp(mid)
      send_getMessageBoxCompactWrapUp(mid)
      return recv_getMessageBoxCompactWrapUp()
    end

    def send_getMessageBoxCompactWrapUp(mid)
      send_message('getMessageBoxCompactWrapUp', GetMessageBoxCompactWrapUp_args, :mid => mid)
    end

    def recv_getMessageBoxCompactWrapUp()
      result = receive_message(GetMessageBoxCompactWrapUp_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMessageBoxCompactWrapUp failed: unknown result')
    end

    def getMessageBoxCompactWrapUpList(start, messageBoxCount)
      send_getMessageBoxCompactWrapUpList(start, messageBoxCount)
      return recv_getMessageBoxCompactWrapUpList()
    end

    def send_getMessageBoxCompactWrapUpList(start, messageBoxCount)
      send_message('getMessageBoxCompactWrapUpList', GetMessageBoxCompactWrapUpList_args, :start => start, :messageBoxCount => messageBoxCount)
    end

    def recv_getMessageBoxCompactWrapUpList()
      result = receive_message(GetMessageBoxCompactWrapUpList_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMessageBoxCompactWrapUpList failed: unknown result')
    end

    def getMessageBoxList(channelId, lastMessagesCount)
      send_getMessageBoxList(channelId, lastMessagesCount)
      return recv_getMessageBoxList()
    end

    def send_getMessageBoxList(channelId, lastMessagesCount)
      send_message('getMessageBoxList', GetMessageBoxList_args, :channelId => channelId, :lastMessagesCount => lastMessagesCount)
    end

    def recv_getMessageBoxList()
      result = receive_message(GetMessageBoxList_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMessageBoxList failed: unknown result')
    end

    def getMessageBoxListByStatus(channelId, lastMessagesCount, status)
      send_getMessageBoxListByStatus(channelId, lastMessagesCount, status)
      return recv_getMessageBoxListByStatus()
    end

    def send_getMessageBoxListByStatus(channelId, lastMessagesCount, status)
      send_message('getMessageBoxListByStatus', GetMessageBoxListByStatus_args, :channelId => channelId, :lastMessagesCount => lastMessagesCount, :status => status)
    end

    def recv_getMessageBoxListByStatus()
      result = receive_message(GetMessageBoxListByStatus_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMessageBoxListByStatus failed: unknown result')
    end

    def getMessageBoxWrapUp(mid)
      send_getMessageBoxWrapUp(mid)
      return recv_getMessageBoxWrapUp()
    end

    def send_getMessageBoxWrapUp(mid)
      send_message('getMessageBoxWrapUp', GetMessageBoxWrapUp_args, :mid => mid)
    end

    def recv_getMessageBoxWrapUp()
      result = receive_message(GetMessageBoxWrapUp_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMessageBoxWrapUp failed: unknown result')
    end

    def getMessageBoxWrapUpList(start, messageBoxCount)
      send_getMessageBoxWrapUpList(start, messageBoxCount)
      return recv_getMessageBoxWrapUpList()
    end

    def send_getMessageBoxWrapUpList(start, messageBoxCount)
      send_message('getMessageBoxWrapUpList', GetMessageBoxWrapUpList_args, :start => start, :messageBoxCount => messageBoxCount)
    end

    def recv_getMessageBoxWrapUpList()
      result = receive_message(GetMessageBoxWrapUpList_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMessageBoxWrapUpList failed: unknown result')
    end

    def getMessagesBySequenceNumber(channelId, messageBoxId, startSeq, endSeq)
      send_getMessagesBySequenceNumber(channelId, messageBoxId, startSeq, endSeq)
      return recv_getMessagesBySequenceNumber()
    end

    def send_getMessagesBySequenceNumber(channelId, messageBoxId, startSeq, endSeq)
      send_message('getMessagesBySequenceNumber', GetMessagesBySequenceNumber_args, :channelId => channelId, :messageBoxId => messageBoxId, :startSeq => startSeq, :endSeq => endSeq)
    end

    def recv_getMessagesBySequenceNumber()
      result = receive_message(GetMessagesBySequenceNumber_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMessagesBySequenceNumber failed: unknown result')
    end

    def getNextMessages(messageBoxId, startSeq, messagesCount)
      send_getNextMessages(messageBoxId, startSeq, messagesCount)
      return recv_getNextMessages()
    end

    def send_getNextMessages(messageBoxId, startSeq, messagesCount)
      send_message('getNextMessages', GetNextMessages_args, :messageBoxId => messageBoxId, :startSeq => startSeq, :messagesCount => messagesCount)
    end

    def recv_getNextMessages()
      result = receive_message(GetNextMessages_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getNextMessages failed: unknown result')
    end

    def getNotificationPolicy(carrier)
      send_getNotificationPolicy(carrier)
      return recv_getNotificationPolicy()
    end

    def send_getNotificationPolicy(carrier)
      send_message('getNotificationPolicy', GetNotificationPolicy_args, :carrier => carrier)
    end

    def recv_getNotificationPolicy()
      result = receive_message(GetNotificationPolicy_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getNotificationPolicy failed: unknown result')
    end

    def getPreviousMessages(messageBoxId, endSeq, messagesCount)
      send_getPreviousMessages(messageBoxId, endSeq, messagesCount)
      return recv_getPreviousMessages()
    end

    def send_getPreviousMessages(messageBoxId, endSeq, messagesCount)
      send_message('getPreviousMessages', GetPreviousMessages_args, :messageBoxId => messageBoxId, :endSeq => endSeq, :messagesCount => messagesCount)
    end

    def recv_getPreviousMessages()
      result = receive_message(GetPreviousMessages_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPreviousMessages failed: unknown result')
    end

    def getProfile()
      send_getProfile()
      return recv_getProfile()
    end

    def send_getProfile()
      send_message('getProfile', GetProfile_args)
    end

    def recv_getProfile()
      result = receive_message(GetProfile_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProfile failed: unknown result')
    end

    def getProximityMatchCandidateList(sessionId)
      send_getProximityMatchCandidateList(sessionId)
      return recv_getProximityMatchCandidateList()
    end

    def send_getProximityMatchCandidateList(sessionId)
      send_message('getProximityMatchCandidateList', GetProximityMatchCandidateList_args, :sessionId => sessionId)
    end

    def recv_getProximityMatchCandidateList()
      result = receive_message(GetProximityMatchCandidateList_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProximityMatchCandidateList failed: unknown result')
    end

    def getProximityMatchCandidates(sessionId)
      send_getProximityMatchCandidates(sessionId)
      return recv_getProximityMatchCandidates()
    end

    def send_getProximityMatchCandidates(sessionId)
      send_message('getProximityMatchCandidates', GetProximityMatchCandidates_args, :sessionId => sessionId)
    end

    def recv_getProximityMatchCandidates()
      result = receive_message(GetProximityMatchCandidates_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProximityMatchCandidates failed: unknown result')
    end

    def getRecentMessages(messageBoxId, messagesCount)
      send_getRecentMessages(messageBoxId, messagesCount)
      return recv_getRecentMessages()
    end

    def send_getRecentMessages(messageBoxId, messagesCount)
      send_message('getRecentMessages', GetRecentMessages_args, :messageBoxId => messageBoxId, :messagesCount => messagesCount)
    end

    def recv_getRecentMessages()
      result = receive_message(GetRecentMessages_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getRecentMessages failed: unknown result')
    end

    def getRecommendationIds()
      send_getRecommendationIds()
      return recv_getRecommendationIds()
    end

    def send_getRecommendationIds()
      send_message('getRecommendationIds', GetRecommendationIds_args)
    end

    def recv_getRecommendationIds()
      result = receive_message(GetRecommendationIds_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getRecommendationIds failed: unknown result')
    end

    def getRoom(roomId)
      send_getRoom(roomId)
      return recv_getRoom()
    end

    def send_getRoom(roomId)
      send_message('getRoom', GetRoom_args, :roomId => roomId)
    end

    def recv_getRoom()
      result = receive_message(GetRoom_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getRoom failed: unknown result')
    end

    def getRSAKeyInfo(provider)
      send_getRSAKeyInfo(provider)
      return recv_getRSAKeyInfo()
    end

    def send_getRSAKeyInfo(provider)
      send_message('getRSAKeyInfo', GetRSAKeyInfo_args, :provider => provider)
    end

    def recv_getRSAKeyInfo()
      result = receive_message(GetRSAKeyInfo_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getRSAKeyInfo failed: unknown result')
    end

    def getServerTime()
      send_getServerTime()
      return recv_getServerTime()
    end

    def send_getServerTime()
      send_message('getServerTime', GetServerTime_args)
    end

    def recv_getServerTime()
      result = receive_message(GetServerTime_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getServerTime failed: unknown result')
    end

    def getSessions()
      send_getSessions()
      return recv_getSessions()
    end

    def send_getSessions()
      send_message('getSessions', GetSessions_args)
    end

    def recv_getSessions()
      result = receive_message(GetSessions_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSessions failed: unknown result')
    end

    def getSettings()
      send_getSettings()
      return recv_getSettings()
    end

    def send_getSettings()
      send_message('getSettings', GetSettings_args)
    end

    def recv_getSettings()
      result = receive_message(GetSettings_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSettings failed: unknown result')
    end

    def getGroupsV2(groupIds)
      send_getGroupsV2(groupIds)
      return recv_getGroupsV2()
    end

    def send_getGroupsV2(groupIds)
      send_message('getGroupsV2', GetGroupsV2_args, :groupIds => groupIds)
    end

    def recv_getGroupsV2()
      result = receive_message(GetGroupsV2_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupsV2 failed: unknown result')
    end

    def getSettingsAttributes(attrBitset)
      send_getSettingsAttributes(attrBitset)
      return recv_getSettingsAttributes()
    end

    def send_getSettingsAttributes(attrBitset)
      send_message('getSettingsAttributes', GetSettingsAttributes_args, :attrBitset => attrBitset)
    end

    def recv_getSettingsAttributes()
      result = receive_message(GetSettingsAttributes_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSettingsAttributes failed: unknown result')
    end

    def getSystemConfiguration()
      send_getSystemConfiguration()
      return recv_getSystemConfiguration()
    end

    def send_getSystemConfiguration()
      send_message('getSystemConfiguration', GetSystemConfiguration_args)
    end

    def recv_getSystemConfiguration()
      result = receive_message(GetSystemConfiguration_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSystemConfiguration failed: unknown result')
    end

    def getUserTicket()
      send_getUserTicket()
      return recv_getUserTicket()
    end

    def send_getUserTicket()
      send_message('getUserTicket', GetUserTicket_args)
    end

    def recv_getUserTicket()
      result = receive_message(GetUserTicket_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserTicket failed: unknown result')
    end

    def getWapInvitation(invitationHash)
      send_getWapInvitation(invitationHash)
      return recv_getWapInvitation()
    end

    def send_getWapInvitation(invitationHash)
      send_message('getWapInvitation', GetWapInvitation_args, :invitationHash => invitationHash)
    end

    def recv_getWapInvitation()
      result = receive_message(GetWapInvitation_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getWapInvitation failed: unknown result')
    end

    def invalidateUserTicket()
      send_invalidateUserTicket()
      recv_invalidateUserTicket()
    end

    def send_invalidateUserTicket()
      send_message('invalidateUserTicket', InvalidateUserTicket_args)
    end

    def recv_invalidateUserTicket()
      result = receive_message(InvalidateUserTicket_result)
      raise result.e unless result.e.nil?
      return
    end

    def inviteFriendsBySms(phoneNumberList)
      send_inviteFriendsBySms(phoneNumberList)
      recv_inviteFriendsBySms()
    end

    def send_inviteFriendsBySms(phoneNumberList)
      send_message('inviteFriendsBySms', InviteFriendsBySms_args, :phoneNumberList => phoneNumberList)
    end

    def recv_inviteFriendsBySms()
      result = receive_message(InviteFriendsBySms_result)
      raise result.e unless result.e.nil?
      return
    end

    def inviteIntoGroup(reqSeq, groupId, contactIds)
      send_inviteIntoGroup(reqSeq, groupId, contactIds)
      recv_inviteIntoGroup()
    end

    def send_inviteIntoGroup(reqSeq, groupId, contactIds)
      send_message('inviteIntoGroup', InviteIntoGroup_args, :reqSeq => reqSeq, :groupId => groupId, :contactIds => contactIds)
    end

    def recv_inviteIntoGroup()
      result = receive_message(InviteIntoGroup_result)
      raise result.e unless result.e.nil?
      return
    end

    def inviteIntoRoom(reqSeq, roomId, contactIds)
      send_inviteIntoRoom(reqSeq, roomId, contactIds)
      recv_inviteIntoRoom()
    end

    def send_inviteIntoRoom(reqSeq, roomId, contactIds)
      send_message('inviteIntoRoom', InviteIntoRoom_args, :reqSeq => reqSeq, :roomId => roomId, :contactIds => contactIds)
    end

    def recv_inviteIntoRoom()
      result = receive_message(InviteIntoRoom_result)
      raise result.e unless result.e.nil?
      return
    end

    def inviteViaEmail(reqSeq, email, name)
      send_inviteViaEmail(reqSeq, email, name)
      recv_inviteViaEmail()
    end

    def send_inviteViaEmail(reqSeq, email, name)
      send_message('inviteViaEmail', InviteViaEmail_args, :reqSeq => reqSeq, :email => email, :name => name)
    end

    def recv_inviteViaEmail()
      result = receive_message(InviteViaEmail_result)
      raise result.e unless result.e.nil?
      return
    end

    def isIdentityIdentifierAvailable(provider, identifier)
      send_isIdentityIdentifierAvailable(provider, identifier)
      return recv_isIdentityIdentifierAvailable()
    end

    def send_isIdentityIdentifierAvailable(provider, identifier)
      send_message('isIdentityIdentifierAvailable', IsIdentityIdentifierAvailable_args, :provider => provider, :identifier => identifier)
    end

    def recv_isIdentityIdentifierAvailable()
      result = receive_message(IsIdentityIdentifierAvailable_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isIdentityIdentifierAvailable failed: unknown result')
    end

    def isUseridAvailable(userid)
      send_isUseridAvailable(userid)
      return recv_isUseridAvailable()
    end

    def send_isUseridAvailable(userid)
      send_message('isUseridAvailable', IsUseridAvailable_args, :userid => userid)
    end

    def recv_isUseridAvailable()
      result = receive_message(IsUseridAvailable_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isUseridAvailable failed: unknown result')
    end

    def kickoutFromGroup(reqSeq, groupId, contactIds)
      send_kickoutFromGroup(reqSeq, groupId, contactIds)
      recv_kickoutFromGroup()
    end

    def send_kickoutFromGroup(reqSeq, groupId, contactIds)
      send_message('kickoutFromGroup', KickoutFromGroup_args, :reqSeq => reqSeq, :groupId => groupId, :contactIds => contactIds)
    end

    def recv_kickoutFromGroup()
      result = receive_message(KickoutFromGroup_result)
      raise result.e unless result.e.nil?
      return
    end

    def reissueGroupTicket(groupMid)
      send_reissueGroupTicket(groupMid)
      return recv_reissueGroupTicket()
    end

    def send_reissueGroupTicket(groupMid)
      send_message('reissueGroupTicket', ReissueGroupTicket_args, :groupMid => groupMid)
    end

    def recv_reissueGroupTicket()
      result = receive_message(ReissueGroupTicket_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'reissueGroupTicket failed: unknown result')
    end

    def findGroupByTicket(ticketId)
      send_findGroupByTicket(ticketId)
      return recv_findGroupByTicket()
    end

    def send_findGroupByTicket(ticketId)
      send_message('findGroupByTicket', FindGroupByTicket_args, :ticketId => ticketId)
    end

    def recv_findGroupByTicket()
      result = receive_message(FindGroupByTicket_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findGroupByTicket failed: unknown result')
    end

    def leaveGroup(reqSeq, groupId)
      send_leaveGroup(reqSeq, groupId)
      recv_leaveGroup()
    end

    def send_leaveGroup(reqSeq, groupId)
      send_message('leaveGroup', LeaveGroup_args, :reqSeq => reqSeq, :groupId => groupId)
    end

    def recv_leaveGroup()
      result = receive_message(LeaveGroup_result)
      raise result.e unless result.e.nil?
      return
    end

    def leaveRoom(reqSeq, roomId)
      send_leaveRoom(reqSeq, roomId)
      recv_leaveRoom()
    end

    def send_leaveRoom(reqSeq, roomId)
      send_message('leaveRoom', LeaveRoom_args, :reqSeq => reqSeq, :roomId => roomId)
    end

    def recv_leaveRoom()
      result = receive_message(LeaveRoom_result)
      raise result.e unless result.e.nil?
      return
    end

    def loginWithIdentityCredential(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate)
      send_loginWithIdentityCredential(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate)
      return recv_loginWithIdentityCredential()
    end

    def send_loginWithIdentityCredential(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate)
      send_message('loginWithIdentityCredential', LoginWithIdentityCredential_args, :identityProvider => identityProvider, :identifier => identifier, :password => password, :keepLoggedIn => keepLoggedIn, :accessLocation => accessLocation, :systemName => systemName, :certificate => certificate)
    end

    def recv_loginWithIdentityCredential()
      result = receive_message(LoginWithIdentityCredential_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'loginWithIdentityCredential failed: unknown result')
    end

    def loginWithIdentityCredentialForCertificate(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate)
      send_loginWithIdentityCredentialForCertificate(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate)
      return recv_loginWithIdentityCredentialForCertificate()
    end

    def send_loginWithIdentityCredentialForCertificate(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate)
      send_message('loginWithIdentityCredentialForCertificate', LoginWithIdentityCredentialForCertificate_args, :identityProvider => identityProvider, :identifier => identifier, :password => password, :keepLoggedIn => keepLoggedIn, :accessLocation => accessLocation, :systemName => systemName, :certificate => certificate)
    end

    def recv_loginWithIdentityCredentialForCertificate()
      result = receive_message(LoginWithIdentityCredentialForCertificate_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'loginWithIdentityCredentialForCertificate failed: unknown result')
    end

    def loginWithVerifier(verifier)
      send_loginWithVerifier(verifier)
      return recv_loginWithVerifier()
    end

    def send_loginWithVerifier(verifier)
      send_message('loginWithVerifier', LoginWithVerifier_args, :verifier => verifier)
    end

    def recv_loginWithVerifier()
      result = receive_message(LoginWithVerifier_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'loginWithVerifier failed: unknown result')
    end

    def loginWithVerifierForCerificate(verifier)
      send_loginWithVerifierForCerificate(verifier)
      return recv_loginWithVerifierForCerificate()
    end

    def send_loginWithVerifierForCerificate(verifier)
      send_message('loginWithVerifierForCerificate', LoginWithVerifierForCerificate_args, :verifier => verifier)
    end

    def recv_loginWithVerifierForCerificate()
      result = receive_message(LoginWithVerifierForCerificate_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'loginWithVerifierForCerificate failed: unknown result')
    end

    def loginWithVerifierForCertificate(verifier)
      send_loginWithVerifierForCertificate(verifier)
      return recv_loginWithVerifierForCertificate()
    end

    def send_loginWithVerifierForCertificate(verifier)
      send_message('loginWithVerifierForCertificate', LoginWithVerifierForCertificate_args, :verifier => verifier)
    end

    def recv_loginWithVerifierForCertificate()
      result = receive_message(LoginWithVerifierForCertificate_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'loginWithVerifierForCertificate failed: unknown result')
    end

    def logout()
      send_logout()
      recv_logout()
    end

    def send_logout()
      send_message('logout', Logout_args)
    end

    def recv_logout()
      result = receive_message(Logout_result)
      raise result.e unless result.e.nil?
      return
    end

    def logoutSession(tokenKey)
      send_logoutSession(tokenKey)
      recv_logoutSession()
    end

    def send_logoutSession(tokenKey)
      send_message('logoutSession', LogoutSession_args, :tokenKey => tokenKey)
    end

    def recv_logoutSession()
      result = receive_message(LogoutSession_result)
      raise result.e unless result.e.nil?
      return
    end

    def noop()
      send_noop()
      recv_noop()
    end

    def send_noop()
      send_message('noop', Noop_args)
    end

    def recv_noop()
      result = receive_message(Noop_result)
      raise result.e unless result.e.nil?
      return
    end

    def notifiedRedirect(paramMap)
      send_notifiedRedirect(paramMap)
      recv_notifiedRedirect()
    end

    def send_notifiedRedirect(paramMap)
      send_message('notifiedRedirect', NotifiedRedirect_args, :paramMap => paramMap)
    end

    def recv_notifiedRedirect()
      result = receive_message(NotifiedRedirect_result)
      raise result.e unless result.e.nil?
      return
    end

    def notifyBuddyOnAir(seq, receiverMids)
      send_notifyBuddyOnAir(seq, receiverMids)
      return recv_notifyBuddyOnAir()
    end

    def send_notifyBuddyOnAir(seq, receiverMids)
      send_message('notifyBuddyOnAir', NotifyBuddyOnAir_args, :seq => seq, :receiverMids => receiverMids)
    end

    def recv_notifyBuddyOnAir()
      result = receive_message(NotifyBuddyOnAir_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'notifyBuddyOnAir failed: unknown result')
    end

    def notifyIndividualEvent(notificationStatus, receiverMids)
      send_notifyIndividualEvent(notificationStatus, receiverMids)
      recv_notifyIndividualEvent()
    end

    def send_notifyIndividualEvent(notificationStatus, receiverMids)
      send_message('notifyIndividualEvent', NotifyIndividualEvent_args, :notificationStatus => notificationStatus, :receiverMids => receiverMids)
    end

    def recv_notifyIndividualEvent()
      result = receive_message(NotifyIndividualEvent_result)
      raise result.e unless result.e.nil?
      return
    end

    def notifyInstalled(udidHash, applicationTypeWithExtensions)
      send_notifyInstalled(udidHash, applicationTypeWithExtensions)
      recv_notifyInstalled()
    end

    def send_notifyInstalled(udidHash, applicationTypeWithExtensions)
      send_message('notifyInstalled', NotifyInstalled_args, :udidHash => udidHash, :applicationTypeWithExtensions => applicationTypeWithExtensions)
    end

    def recv_notifyInstalled()
      result = receive_message(NotifyInstalled_result)
      raise result.e unless result.e.nil?
      return
    end

    def notifyRegistrationComplete(udidHash, applicationTypeWithExtensions)
      send_notifyRegistrationComplete(udidHash, applicationTypeWithExtensions)
      recv_notifyRegistrationComplete()
    end

    def send_notifyRegistrationComplete(udidHash, applicationTypeWithExtensions)
      send_message('notifyRegistrationComplete', NotifyRegistrationComplete_args, :udidHash => udidHash, :applicationTypeWithExtensions => applicationTypeWithExtensions)
    end

    def recv_notifyRegistrationComplete()
      result = receive_message(NotifyRegistrationComplete_result)
      raise result.e unless result.e.nil?
      return
    end

    def notifySleep(lastRev, badge)
      send_notifySleep(lastRev, badge)
      recv_notifySleep()
    end

    def send_notifySleep(lastRev, badge)
      send_message('notifySleep', NotifySleep_args, :lastRev => lastRev, :badge => badge)
    end

    def recv_notifySleep()
      result = receive_message(NotifySleep_result)
      raise result.e unless result.e.nil?
      return
    end

    def notifyUpdated(lastRev, deviceInfo)
      send_notifyUpdated(lastRev, deviceInfo)
      recv_notifyUpdated()
    end

    def send_notifyUpdated(lastRev, deviceInfo)
      send_message('notifyUpdated', NotifyUpdated_args, :lastRev => lastRev, :deviceInfo => deviceInfo)
    end

    def recv_notifyUpdated()
      result = receive_message(NotifyUpdated_result)
      raise result.e unless result.e.nil?
      return
    end

    def openProximityMatch(location)
      send_openProximityMatch(location)
      return recv_openProximityMatch()
    end

    def send_openProximityMatch(location)
      send_message('openProximityMatch', OpenProximityMatch_args, :location => location)
    end

    def recv_openProximityMatch()
      result = receive_message(OpenProximityMatch_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'openProximityMatch failed: unknown result')
    end

    def registerBuddyUser(buddyId, registrarPassword)
      send_registerBuddyUser(buddyId, registrarPassword)
      return recv_registerBuddyUser()
    end

    def send_registerBuddyUser(buddyId, registrarPassword)
      send_message('registerBuddyUser', RegisterBuddyUser_args, :buddyId => buddyId, :registrarPassword => registrarPassword)
    end

    def recv_registerBuddyUser()
      result = receive_message(RegisterBuddyUser_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerBuddyUser failed: unknown result')
    end

    def registerBuddyUserid(seq, userid)
      send_registerBuddyUserid(seq, userid)
      recv_registerBuddyUserid()
    end

    def send_registerBuddyUserid(seq, userid)
      send_message('registerBuddyUserid', RegisterBuddyUserid_args, :seq => seq, :userid => userid)
    end

    def recv_registerBuddyUserid()
      result = receive_message(RegisterBuddyUserid_result)
      raise result.e unless result.e.nil?
      return
    end

    def registerDevice(sessionId)
      send_registerDevice(sessionId)
      return recv_registerDevice()
    end

    def send_registerDevice(sessionId)
      send_message('registerDevice', RegisterDevice_args, :sessionId => sessionId)
    end

    def recv_registerDevice()
      result = receive_message(RegisterDevice_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerDevice failed: unknown result')
    end

    def registerDeviceWithIdentityCredential(sessionId, provider, identifier, verifier)
      send_registerDeviceWithIdentityCredential(sessionId, provider, identifier, verifier)
      return recv_registerDeviceWithIdentityCredential()
    end

    def send_registerDeviceWithIdentityCredential(sessionId, provider, identifier, verifier)
      send_message('registerDeviceWithIdentityCredential', RegisterDeviceWithIdentityCredential_args, :sessionId => sessionId, :provider => provider, :identifier => identifier, :verifier => verifier)
    end

    def recv_registerDeviceWithIdentityCredential()
      result = receive_message(RegisterDeviceWithIdentityCredential_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerDeviceWithIdentityCredential failed: unknown result')
    end

    def registerDeviceWithoutPhoneNumber(region, udidHash, deviceInfo)
      send_registerDeviceWithoutPhoneNumber(region, udidHash, deviceInfo)
      return recv_registerDeviceWithoutPhoneNumber()
    end

    def send_registerDeviceWithoutPhoneNumber(region, udidHash, deviceInfo)
      send_message('registerDeviceWithoutPhoneNumber', RegisterDeviceWithoutPhoneNumber_args, :region => region, :udidHash => udidHash, :deviceInfo => deviceInfo)
    end

    def recv_registerDeviceWithoutPhoneNumber()
      result = receive_message(RegisterDeviceWithoutPhoneNumber_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerDeviceWithoutPhoneNumber failed: unknown result')
    end

    def registerDeviceWithoutPhoneNumberWithIdentityCredential(region, udidHash, deviceInfo, provider, identifier, verifier, mid, migrationPincodeSessionId)
      send_registerDeviceWithoutPhoneNumberWithIdentityCredential(region, udidHash, deviceInfo, provider, identifier, verifier, mid, migrationPincodeSessionId)
      return recv_registerDeviceWithoutPhoneNumberWithIdentityCredential()
    end

    def send_registerDeviceWithoutPhoneNumberWithIdentityCredential(region, udidHash, deviceInfo, provider, identifier, verifier, mid, migrationPincodeSessionId)
      send_message('registerDeviceWithoutPhoneNumberWithIdentityCredential', RegisterDeviceWithoutPhoneNumberWithIdentityCredential_args, :region => region, :udidHash => udidHash, :deviceInfo => deviceInfo, :provider => provider, :identifier => identifier, :verifier => verifier, :mid => mid, :migrationPincodeSessionId => migrationPincodeSessionId)
    end

    def recv_registerDeviceWithoutPhoneNumberWithIdentityCredential()
      result = receive_message(RegisterDeviceWithoutPhoneNumberWithIdentityCredential_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerDeviceWithoutPhoneNumberWithIdentityCredential failed: unknown result')
    end

    def registerUserid(reqSeq, userid)
      send_registerUserid(reqSeq, userid)
      return recv_registerUserid()
    end

    def send_registerUserid(reqSeq, userid)
      send_message('registerUserid', RegisterUserid_args, :reqSeq => reqSeq, :userid => userid)
    end

    def recv_registerUserid()
      result = receive_message(RegisterUserid_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerUserid failed: unknown result')
    end

    def registerWapDevice(invitationHash, guidHash, email, deviceInfo)
      send_registerWapDevice(invitationHash, guidHash, email, deviceInfo)
      return recv_registerWapDevice()
    end

    def send_registerWapDevice(invitationHash, guidHash, email, deviceInfo)
      send_message('registerWapDevice', RegisterWapDevice_args, :invitationHash => invitationHash, :guidHash => guidHash, :email => email, :deviceInfo => deviceInfo)
    end

    def recv_registerWapDevice()
      result = receive_message(RegisterWapDevice_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerWapDevice failed: unknown result')
    end

    def registerWithExistingSnsIdAndIdentityCredential(identityCredential, region, udidHash, deviceInfo)
      send_registerWithExistingSnsIdAndIdentityCredential(identityCredential, region, udidHash, deviceInfo)
      return recv_registerWithExistingSnsIdAndIdentityCredential()
    end

    def send_registerWithExistingSnsIdAndIdentityCredential(identityCredential, region, udidHash, deviceInfo)
      send_message('registerWithExistingSnsIdAndIdentityCredential', RegisterWithExistingSnsIdAndIdentityCredential_args, :identityCredential => identityCredential, :region => region, :udidHash => udidHash, :deviceInfo => deviceInfo)
    end

    def recv_registerWithExistingSnsIdAndIdentityCredential()
      result = receive_message(RegisterWithExistingSnsIdAndIdentityCredential_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerWithExistingSnsIdAndIdentityCredential failed: unknown result')
    end

    def registerWithSnsId(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid)
      send_registerWithSnsId(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid)
      return recv_registerWithSnsId()
    end

    def send_registerWithSnsId(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid)
      send_message('registerWithSnsId', RegisterWithSnsId_args, :snsIdType => snsIdType, :snsAccessToken => snsAccessToken, :region => region, :udidHash => udidHash, :deviceInfo => deviceInfo, :mid => mid)
    end

    def recv_registerWithSnsId()
      result = receive_message(RegisterWithSnsId_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerWithSnsId failed: unknown result')
    end

    def registerWithSnsIdAndIdentityCredential(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo)
      send_registerWithSnsIdAndIdentityCredential(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo)
      return recv_registerWithSnsIdAndIdentityCredential()
    end

    def send_registerWithSnsIdAndIdentityCredential(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo)
      send_message('registerWithSnsIdAndIdentityCredential', RegisterWithSnsIdAndIdentityCredential_args, :snsIdType => snsIdType, :snsAccessToken => snsAccessToken, :identityCredential => identityCredential, :region => region, :udidHash => udidHash, :deviceInfo => deviceInfo)
    end

    def recv_registerWithSnsIdAndIdentityCredential()
      result = receive_message(RegisterWithSnsIdAndIdentityCredential_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerWithSnsIdAndIdentityCredential failed: unknown result')
    end

    def reissueDeviceCredential()
      send_reissueDeviceCredential()
      return recv_reissueDeviceCredential()
    end

    def send_reissueDeviceCredential()
      send_message('reissueDeviceCredential', ReissueDeviceCredential_args)
    end

    def recv_reissueDeviceCredential()
      result = receive_message(ReissueDeviceCredential_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'reissueDeviceCredential failed: unknown result')
    end

    def reissueUserTicket(expirationTime, maxUseCount)
      send_reissueUserTicket(expirationTime, maxUseCount)
      return recv_reissueUserTicket()
    end

    def send_reissueUserTicket(expirationTime, maxUseCount)
      send_message('reissueUserTicket', ReissueUserTicket_args, :expirationTime => expirationTime, :maxUseCount => maxUseCount)
    end

    def recv_reissueUserTicket()
      result = receive_message(ReissueUserTicket_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'reissueUserTicket failed: unknown result')
    end

    def getMessageReadRange(chatIds)
      send_getMessageReadRange(chatIds)
      return recv_getMessageReadRange()
    end

    def send_getMessageReadRange(chatIds)
      send_message('getMessageReadRange', GetMessageReadRange_args, :chatIds => chatIds)
    end

    def recv_getMessageReadRange()
      result = receive_message(GetMessageReadRange_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMessageReadRange failed: unknown result')
    end

    def rejectGroupInvitation(reqSeq, groupId)
      send_rejectGroupInvitation(reqSeq, groupId)
      recv_rejectGroupInvitation()
    end

    def send_rejectGroupInvitation(reqSeq, groupId)
      send_message('rejectGroupInvitation', RejectGroupInvitation_args, :reqSeq => reqSeq, :groupId => groupId)
    end

    def recv_rejectGroupInvitation()
      result = receive_message(RejectGroupInvitation_result)
      raise result.e unless result.e.nil?
      return
    end

    def releaseSession()
      send_releaseSession()
      recv_releaseSession()
    end

    def send_releaseSession()
      send_message('releaseSession', ReleaseSession_args)
    end

    def recv_releaseSession()
      result = receive_message(ReleaseSession_result)
      raise result.e unless result.e.nil?
      return
    end

    def removeAllMessages(seq, lastMessageId)
      send_removeAllMessages(seq, lastMessageId)
      recv_removeAllMessages()
    end

    def send_removeAllMessages(seq, lastMessageId)
      send_message('removeAllMessages', RemoveAllMessages_args, :seq => seq, :lastMessageId => lastMessageId)
    end

    def recv_removeAllMessages()
      result = receive_message(RemoveAllMessages_result)
      raise result.e unless result.e.nil?
      return
    end

    def removeBuddyLocation(mid, index)
      send_removeBuddyLocation(mid, index)
      recv_removeBuddyLocation()
    end

    def send_removeBuddyLocation(mid, index)
      send_message('removeBuddyLocation', RemoveBuddyLocation_args, :mid => mid, :index => index)
    end

    def recv_removeBuddyLocation()
      result = receive_message(RemoveBuddyLocation_result)
      raise result.e unless result.e.nil?
      return
    end

    def removeMessage(messageId)
      send_removeMessage(messageId)
      return recv_removeMessage()
    end

    def send_removeMessage(messageId)
      send_message('removeMessage', RemoveMessage_args, :messageId => messageId)
    end

    def recv_removeMessage()
      result = receive_message(RemoveMessage_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'removeMessage failed: unknown result')
    end

    def makeUserAddMyselfAsContact(contactOwnerMid)
      send_makeUserAddMyselfAsContact(contactOwnerMid)
      return recv_makeUserAddMyselfAsContact()
    end

    def send_makeUserAddMyselfAsContact(contactOwnerMid)
      send_message('makeUserAddMyselfAsContact', MakeUserAddMyselfAsContact_args, :contactOwnerMid => contactOwnerMid)
    end

    def recv_makeUserAddMyselfAsContact()
      result = receive_message(MakeUserAddMyselfAsContact_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'makeUserAddMyselfAsContact failed: unknown result')
    end

    def removeMessageFromMyHome(messageId)
      send_removeMessageFromMyHome(messageId)
      return recv_removeMessageFromMyHome()
    end

    def send_removeMessageFromMyHome(messageId)
      send_message('removeMessageFromMyHome', RemoveMessageFromMyHome_args, :messageId => messageId)
    end

    def recv_removeMessageFromMyHome()
      result = receive_message(RemoveMessageFromMyHome_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'removeMessageFromMyHome failed: unknown result')
    end

    def removeSnsId(snsIdType)
      send_removeSnsId(snsIdType)
      return recv_removeSnsId()
    end

    def send_removeSnsId(snsIdType)
      send_message('removeSnsId', RemoveSnsId_args, :snsIdType => snsIdType)
    end

    def recv_removeSnsId()
      result = receive_message(RemoveSnsId_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'removeSnsId failed: unknown result')
    end

    def report(syncOpRevision, category, report)
      send_report(syncOpRevision, category, report)
      recv_report()
    end

    def send_report(syncOpRevision, category, report)
      send_message('report', Report_args, :syncOpRevision => syncOpRevision, :category => category, :report => report)
    end

    def recv_report()
      result = receive_message(Report_result)
      raise result.e unless result.e.nil?
      return
    end

    def reportContacts(syncOpRevision, category, contactReports, actionType)
      send_reportContacts(syncOpRevision, category, contactReports, actionType)
      return recv_reportContacts()
    end

    def send_reportContacts(syncOpRevision, category, contactReports, actionType)
      send_message('reportContacts', ReportContacts_args, :syncOpRevision => syncOpRevision, :category => category, :contactReports => contactReports, :actionType => actionType)
    end

    def recv_reportContacts()
      result = receive_message(ReportContacts_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'reportContacts failed: unknown result')
    end

    def reportGroups(syncOpRevision, groups)
      send_reportGroups(syncOpRevision, groups)
      recv_reportGroups()
    end

    def send_reportGroups(syncOpRevision, groups)
      send_message('reportGroups', ReportGroups_args, :syncOpRevision => syncOpRevision, :groups => groups)
    end

    def recv_reportGroups()
      result = receive_message(ReportGroups_result)
      raise result.e unless result.e.nil?
      return
    end

    def reportProfile(syncOpRevision, profile)
      send_reportProfile(syncOpRevision, profile)
      recv_reportProfile()
    end

    def send_reportProfile(syncOpRevision, profile)
      send_message('reportProfile', ReportProfile_args, :syncOpRevision => syncOpRevision, :profile => profile)
    end

    def recv_reportProfile()
      result = receive_message(ReportProfile_result)
      raise result.e unless result.e.nil?
      return
    end

    def reportRooms(syncOpRevision, rooms)
      send_reportRooms(syncOpRevision, rooms)
      recv_reportRooms()
    end

    def send_reportRooms(syncOpRevision, rooms)
      send_message('reportRooms', ReportRooms_args, :syncOpRevision => syncOpRevision, :rooms => rooms)
    end

    def recv_reportRooms()
      result = receive_message(ReportRooms_result)
      raise result.e unless result.e.nil?
      return
    end

    def findAndAddContactByMetaTag(reqSeq, userid, reference)
      send_findAndAddContactByMetaTag(reqSeq, userid, reference)
      return recv_findAndAddContactByMetaTag()
    end

    def send_findAndAddContactByMetaTag(reqSeq, userid, reference)
      send_message('findAndAddContactByMetaTag', FindAndAddContactByMetaTag_args, :reqSeq => reqSeq, :userid => userid, :reference => reference)
    end

    def recv_findAndAddContactByMetaTag()
      result = receive_message(FindAndAddContactByMetaTag_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findAndAddContactByMetaTag failed: unknown result')
    end

    def reportSettings(syncOpRevision, settings)
      send_reportSettings(syncOpRevision, settings)
      recv_reportSettings()
    end

    def send_reportSettings(syncOpRevision, settings)
      send_message('reportSettings', ReportSettings_args, :syncOpRevision => syncOpRevision, :settings => settings)
    end

    def recv_reportSettings()
      result = receive_message(ReportSettings_result)
      raise result.e unless result.e.nil?
      return
    end

    def reportSpam(chatMid, memberMids, spammerReasons, senderMids, spamMessageIds, spamMessages)
      send_reportSpam(chatMid, memberMids, spammerReasons, senderMids, spamMessageIds, spamMessages)
      recv_reportSpam()
    end

    def send_reportSpam(chatMid, memberMids, spammerReasons, senderMids, spamMessageIds, spamMessages)
      send_message('reportSpam', ReportSpam_args, :chatMid => chatMid, :memberMids => memberMids, :spammerReasons => spammerReasons, :senderMids => senderMids, :spamMessageIds => spamMessageIds, :spamMessages => spamMessages)
    end

    def recv_reportSpam()
      result = receive_message(ReportSpam_result)
      raise result.e unless result.e.nil?
      return
    end

    def reportSpammer(spammerMid, spammerReasons, spamMessageIds)
      send_reportSpammer(spammerMid, spammerReasons, spamMessageIds)
      recv_reportSpammer()
    end

    def send_reportSpammer(spammerMid, spammerReasons, spamMessageIds)
      send_message('reportSpammer', ReportSpammer_args, :spammerMid => spammerMid, :spammerReasons => spammerReasons, :spamMessageIds => spamMessageIds)
    end

    def recv_reportSpammer()
      result = receive_message(ReportSpammer_result)
      raise result.e unless result.e.nil?
      return
    end

    def requestAccountPasswordReset(provider, identifier, locale)
      send_requestAccountPasswordReset(provider, identifier, locale)
      recv_requestAccountPasswordReset()
    end

    def send_requestAccountPasswordReset(provider, identifier, locale)
      send_message('requestAccountPasswordReset', RequestAccountPasswordReset_args, :provider => provider, :identifier => identifier, :locale => locale)
    end

    def recv_requestAccountPasswordReset()
      result = receive_message(RequestAccountPasswordReset_result)
      raise result.e unless result.e.nil?
      return
    end

    def requestEmailConfirmation(emailConfirmation)
      send_requestEmailConfirmation(emailConfirmation)
      return recv_requestEmailConfirmation()
    end

    def send_requestEmailConfirmation(emailConfirmation)
      send_message('requestEmailConfirmation', RequestEmailConfirmation_args, :emailConfirmation => emailConfirmation)
    end

    def recv_requestEmailConfirmation()
      result = receive_message(RequestEmailConfirmation_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'requestEmailConfirmation failed: unknown result')
    end

    def requestIdentityUnbind(provider, identifier)
      send_requestIdentityUnbind(provider, identifier)
      recv_requestIdentityUnbind()
    end

    def send_requestIdentityUnbind(provider, identifier)
      send_message('requestIdentityUnbind', RequestIdentityUnbind_args, :provider => provider, :identifier => identifier)
    end

    def recv_requestIdentityUnbind()
      result = receive_message(RequestIdentityUnbind_result)
      raise result.e unless result.e.nil?
      return
    end

    def resendEmailConfirmation(verifier)
      send_resendEmailConfirmation(verifier)
      return recv_resendEmailConfirmation()
    end

    def send_resendEmailConfirmation(verifier)
      send_message('resendEmailConfirmation', ResendEmailConfirmation_args, :verifier => verifier)
    end

    def recv_resendEmailConfirmation()
      result = receive_message(ResendEmailConfirmation_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resendEmailConfirmation failed: unknown result')
    end

    def resendPinCode(sessionId)
      send_resendPinCode(sessionId)
      recv_resendPinCode()
    end

    def send_resendPinCode(sessionId)
      send_message('resendPinCode', ResendPinCode_args, :sessionId => sessionId)
    end

    def recv_resendPinCode()
      result = receive_message(ResendPinCode_result)
      raise result.e unless result.e.nil?
      return
    end

    def resendPinCodeBySMS(sessionId)
      send_resendPinCodeBySMS(sessionId)
      recv_resendPinCodeBySMS()
    end

    def send_resendPinCodeBySMS(sessionId)
      send_message('resendPinCodeBySMS', ResendPinCodeBySMS_args, :sessionId => sessionId)
    end

    def recv_resendPinCodeBySMS()
      result = receive_message(ResendPinCodeBySMS_result)
      raise result.e unless result.e.nil?
      return
    end

    def sendChatChecked(seq, consumer, lastMessageId)
      send_sendChatChecked(seq, consumer, lastMessageId)
      recv_sendChatChecked()
    end

    def send_sendChatChecked(seq, consumer, lastMessageId)
      send_message('sendChatChecked', SendChatChecked_args, :seq => seq, :consumer => consumer, :lastMessageId => lastMessageId)
    end

    def recv_sendChatChecked()
      result = receive_message(SendChatChecked_result)
      raise result.e unless result.e.nil?
      return
    end

    def sendMessageAwaitCommit(seq, message)
      send_sendMessageAwaitCommit(seq, message)
      return recv_sendMessageAwaitCommit()
    end

    def send_sendMessageAwaitCommit(seq, message)
      send_message('sendMessageAwaitCommit', SendMessageAwaitCommit_args, :seq => seq, :message => message)
    end

    def recv_sendMessageAwaitCommit()
      result = receive_message(SendMessageAwaitCommit_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendMessageAwaitCommit failed: unknown result')
    end

    def sendChatRemoved(seq, consumer, lastMessageId)
      send_sendChatRemoved(seq, consumer, lastMessageId)
      recv_sendChatRemoved()
    end

    def send_sendChatRemoved(seq, consumer, lastMessageId)
      send_message('sendChatRemoved', SendChatRemoved_args, :seq => seq, :consumer => consumer, :lastMessageId => lastMessageId)
    end

    def recv_sendChatRemoved()
      result = receive_message(SendChatRemoved_result)
      raise result.e unless result.e.nil?
      return
    end

    def sendContentPreviewUpdated(esq, messageId, receiverMids)
      send_sendContentPreviewUpdated(esq, messageId, receiverMids)
      return recv_sendContentPreviewUpdated()
    end

    def send_sendContentPreviewUpdated(esq, messageId, receiverMids)
      send_message('sendContentPreviewUpdated', SendContentPreviewUpdated_args, :esq => esq, :messageId => messageId, :receiverMids => receiverMids)
    end

    def recv_sendContentPreviewUpdated()
      result = receive_message(SendContentPreviewUpdated_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendContentPreviewUpdated failed: unknown result')
    end

    def sendContentReceipt(seq, consumer, messageId)
      send_sendContentReceipt(seq, consumer, messageId)
      recv_sendContentReceipt()
    end

    def send_sendContentReceipt(seq, consumer, messageId)
      send_message('sendContentReceipt', SendContentReceipt_args, :seq => seq, :consumer => consumer, :messageId => messageId)
    end

    def recv_sendContentReceipt()
      result = receive_message(SendContentReceipt_result)
      raise result.e unless result.e.nil?
      return
    end

    def sendDummyPush()
      send_sendDummyPush()
      recv_sendDummyPush()
    end

    def send_sendDummyPush()
      send_message('sendDummyPush', SendDummyPush_args)
    end

    def recv_sendDummyPush()
      result = receive_message(SendDummyPush_result)
      raise result.e unless result.e.nil?
      return
    end

    def removeE2EEPublicKey(publicKey)
      send_removeE2EEPublicKey(publicKey)
      recv_removeE2EEPublicKey()
    end

    def send_removeE2EEPublicKey(publicKey)
      send_message('removeE2EEPublicKey', RemoveE2EEPublicKey_args, :publicKey => publicKey)
    end

    def recv_removeE2EEPublicKey()
      result = receive_message(RemoveE2EEPublicKey_result)
      raise result.e unless result.e.nil?
      return
    end

    def negotiateE2EEPublicKey(mid)
      send_negotiateE2EEPublicKey(mid)
      return recv_negotiateE2EEPublicKey()
    end

    def send_negotiateE2EEPublicKey(mid)
      send_message('negotiateE2EEPublicKey', NegotiateE2EEPublicKey_args, :mid => mid)
    end

    def recv_negotiateE2EEPublicKey()
      result = receive_message(NegotiateE2EEPublicKey_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'negotiateE2EEPublicKey failed: unknown result')
    end

    def getE2EEPublicKey(mid, version, keyId)
      send_getE2EEPublicKey(mid, version, keyId)
      return recv_getE2EEPublicKey()
    end

    def send_getE2EEPublicKey(mid, version, keyId)
      send_message('getE2EEPublicKey', GetE2EEPublicKey_args, :mid => mid, :version => version, :keyId => keyId)
    end

    def recv_getE2EEPublicKey()
      result = receive_message(GetE2EEPublicKey_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getE2EEPublicKey failed: unknown result')
    end

    def requestE2EEKeyExchange(reqSeq, temporalPublicKey, publicKey, verifier)
      send_requestE2EEKeyExchange(reqSeq, temporalPublicKey, publicKey, verifier)
      recv_requestE2EEKeyExchange()
    end

    def send_requestE2EEKeyExchange(reqSeq, temporalPublicKey, publicKey, verifier)
      send_message('requestE2EEKeyExchange', RequestE2EEKeyExchange_args, :reqSeq => reqSeq, :temporalPublicKey => temporalPublicKey, :publicKey => publicKey, :verifier => verifier)
    end

    def recv_requestE2EEKeyExchange()
      result = receive_message(RequestE2EEKeyExchange_result)
      raise result.e unless result.e.nil?
      return
    end

    def getLastE2EEPublicKeys(chatMid)
      send_getLastE2EEPublicKeys(chatMid)
      return recv_getLastE2EEPublicKeys()
    end

    def send_getLastE2EEPublicKeys(chatMid)
      send_message('getLastE2EEPublicKeys', GetLastE2EEPublicKeys_args, :chatMid => chatMid)
    end

    def recv_getLastE2EEPublicKeys()
      result = receive_message(GetLastE2EEPublicKeys_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getLastE2EEPublicKeys failed: unknown result')
    end

    def registerE2EEPublicKey(reqSeq, publicKey)
      send_registerE2EEPublicKey(reqSeq, publicKey)
      return recv_registerE2EEPublicKey()
    end

    def send_registerE2EEPublicKey(reqSeq, publicKey)
      send_message('registerE2EEPublicKey', RegisterE2EEPublicKey_args, :reqSeq => reqSeq, :publicKey => publicKey)
    end

    def recv_registerE2EEPublicKey()
      result = receive_message(RegisterE2EEPublicKey_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerE2EEPublicKey failed: unknown result')
    end

    def getE2EEPublicKeys()
      send_getE2EEPublicKeys()
      return recv_getE2EEPublicKeys()
    end

    def send_getE2EEPublicKeys()
      send_message('getE2EEPublicKeys', GetE2EEPublicKeys_args)
    end

    def recv_getE2EEPublicKeys()
      result = receive_message(GetE2EEPublicKeys_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getE2EEPublicKeys failed: unknown result')
    end

    def getE2EEPublicKeysEx(ignoreE2EEStatus)
      send_getE2EEPublicKeysEx(ignoreE2EEStatus)
      return recv_getE2EEPublicKeysEx()
    end

    def send_getE2EEPublicKeysEx(ignoreE2EEStatus)
      send_message('getE2EEPublicKeysEx', GetE2EEPublicKeysEx_args, :ignoreE2EEStatus => ignoreE2EEStatus)
    end

    def recv_getE2EEPublicKeysEx()
      result = receive_message(GetE2EEPublicKeysEx_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getE2EEPublicKeysEx failed: unknown result')
    end

    def getReadMessageOpsInBulk(chatIds)
      send_getReadMessageOpsInBulk(chatIds)
      return recv_getReadMessageOpsInBulk()
    end

    def send_getReadMessageOpsInBulk(chatIds)
      send_message('getReadMessageOpsInBulk', GetReadMessageOpsInBulk_args, :chatIds => chatIds)
    end

    def recv_getReadMessageOpsInBulk()
      result = receive_message(GetReadMessageOpsInBulk_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getReadMessageOpsInBulk failed: unknown result')
    end

    def sendEvent(seq, message)
      send_sendEvent(seq, message)
      return recv_sendEvent()
    end

    def send_sendEvent(seq, message)
      send_message('sendEvent', SendEvent_args, :seq => seq, :message => message)
    end

    def recv_sendEvent()
      result = receive_message(SendEvent_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendEvent failed: unknown result')
    end

    def sendMessage(seq, message)
      send_sendMessage(seq, message)
      return recv_sendMessage()
    end

    def send_sendMessage(seq, message)
      send_message('sendMessage', SendMessage_args, :seq => seq, :message => message)
    end

    def recv_sendMessage()
      result = receive_message(SendMessage_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendMessage failed: unknown result')
    end

    def sendMessageIgnored(seq, consumer, messageIds)
      send_sendMessageIgnored(seq, consumer, messageIds)
      recv_sendMessageIgnored()
    end

    def send_sendMessageIgnored(seq, consumer, messageIds)
      send_message('sendMessageIgnored', SendMessageIgnored_args, :seq => seq, :consumer => consumer, :messageIds => messageIds)
    end

    def recv_sendMessageIgnored()
      result = receive_message(SendMessageIgnored_result)
      raise result.e unless result.e.nil?
      return
    end

    def sendMessageReceipt(seq, consumer, messageIds)
      send_sendMessageReceipt(seq, consumer, messageIds)
      recv_sendMessageReceipt()
    end

    def send_sendMessageReceipt(seq, consumer, messageIds)
      send_message('sendMessageReceipt', SendMessageReceipt_args, :seq => seq, :consumer => consumer, :messageIds => messageIds)
    end

    def recv_sendMessageReceipt()
      result = receive_message(SendMessageReceipt_result)
      raise result.e unless result.e.nil?
      return
    end

    def findContactByMetaTag(userid, reference)
      send_findContactByMetaTag(userid, reference)
      return recv_findContactByMetaTag()
    end

    def send_findContactByMetaTag(userid, reference)
      send_message('findContactByMetaTag', FindContactByMetaTag_args, :userid => userid, :reference => reference)
    end

    def recv_findContactByMetaTag()
      result = receive_message(FindContactByMetaTag_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findContactByMetaTag failed: unknown result')
    end

    def sendMessageToMyHome(seq, message)
      send_sendMessageToMyHome(seq, message)
      return recv_sendMessageToMyHome()
    end

    def send_sendMessageToMyHome(seq, message)
      send_message('sendMessageToMyHome', SendMessageToMyHome_args, :seq => seq, :message => message)
    end

    def recv_sendMessageToMyHome()
      result = receive_message(SendMessageToMyHome_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendMessageToMyHome failed: unknown result')
    end

    def setBuddyLocation(mid, index, location)
      send_setBuddyLocation(mid, index, location)
      recv_setBuddyLocation()
    end

    def send_setBuddyLocation(mid, index, location)
      send_message('setBuddyLocation', SetBuddyLocation_args, :mid => mid, :index => index, :location => location)
    end

    def recv_setBuddyLocation()
      result = receive_message(SetBuddyLocation_result)
      raise result.e unless result.e.nil?
      return
    end

    def setIdentityCredential(identifier, verifier, provider)
      send_setIdentityCredential(identifier, verifier, provider)
      recv_setIdentityCredential()
    end

    def send_setIdentityCredential(identifier, verifier, provider)
      send_message('setIdentityCredential', SetIdentityCredential_args, :identifier => identifier, :verifier => verifier, :provider => provider)
    end

    def recv_setIdentityCredential()
      result = receive_message(SetIdentityCredential_result)
      raise result.e unless result.e.nil?
      return
    end

    def setNotificationsEnabled(reqSeq, type, target, enablement)
      send_setNotificationsEnabled(reqSeq, type, target, enablement)
      recv_setNotificationsEnabled()
    end

    def send_setNotificationsEnabled(reqSeq, type, target, enablement)
      send_message('setNotificationsEnabled', SetNotificationsEnabled_args, :reqSeq => reqSeq, :type => type, :target => target, :enablement => enablement)
    end

    def recv_setNotificationsEnabled()
      result = receive_message(SetNotificationsEnabled_result)
      raise result.e unless result.e.nil?
      return
    end

    def startUpdateVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, locale)
      send_startUpdateVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, locale)
      return recv_startUpdateVerification()
    end

    def send_startUpdateVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, locale)
      send_message('startUpdateVerification', StartUpdateVerification_args, :region => region, :carrier => carrier, :phone => phone, :udidHash => udidHash, :deviceInfo => deviceInfo, :networkCode => networkCode, :locale => locale)
    end

    def recv_startUpdateVerification()
      result = receive_message(StartUpdateVerification_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'startUpdateVerification failed: unknown result')
    end

    def startVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale, simInfo, oldUdidHash)
      send_startVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale, simInfo, oldUdidHash)
      return recv_startVerification()
    end

    def send_startVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale, simInfo, oldUdidHash)
      send_message('startVerification', StartVerification_args, :region => region, :carrier => carrier, :phone => phone, :udidHash => udidHash, :deviceInfo => deviceInfo, :networkCode => networkCode, :mid => mid, :locale => locale, :simInfo => simInfo, :oldUdidHash => oldUdidHash)
    end

    def recv_startVerification()
      result = receive_message(StartVerification_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'startVerification failed: unknown result')
    end

    def updateGroupPreferenceAttribute(reqSeq, groupMid, updatedAttrs)
      send_updateGroupPreferenceAttribute(reqSeq, groupMid, updatedAttrs)
      recv_updateGroupPreferenceAttribute()
    end

    def send_updateGroupPreferenceAttribute(reqSeq, groupMid, updatedAttrs)
      send_message('updateGroupPreferenceAttribute', UpdateGroupPreferenceAttribute_args, :reqSeq => reqSeq, :groupMid => groupMid, :updatedAttrs => updatedAttrs)
    end

    def recv_updateGroupPreferenceAttribute()
      result = receive_message(UpdateGroupPreferenceAttribute_result)
      raise result.e unless result.e.nil?
      return
    end

    def createRoomV2(reqSeq, contactIds)
      send_createRoomV2(reqSeq, contactIds)
      return recv_createRoomV2()
    end

    def send_createRoomV2(reqSeq, contactIds)
      send_message('createRoomV2', CreateRoomV2_args, :reqSeq => reqSeq, :contactIds => contactIds)
    end

    def recv_createRoomV2()
      result = receive_message(CreateRoomV2_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createRoomV2 failed: unknown result')
    end

    def storeUpdateProfileAttribute(seq, profileAttribute, value)
      send_storeUpdateProfileAttribute(seq, profileAttribute, value)
      recv_storeUpdateProfileAttribute()
    end

    def send_storeUpdateProfileAttribute(seq, profileAttribute, value)
      send_message('storeUpdateProfileAttribute', StoreUpdateProfileAttribute_args, :seq => seq, :profileAttribute => profileAttribute, :value => value)
    end

    def recv_storeUpdateProfileAttribute()
      result = receive_message(StoreUpdateProfileAttribute_result)
      raise result.e unless result.e.nil?
      return
    end

    def syncContactBySnsIds(reqSeq, modifications)
      send_syncContactBySnsIds(reqSeq, modifications)
      return recv_syncContactBySnsIds()
    end

    def send_syncContactBySnsIds(reqSeq, modifications)
      send_message('syncContactBySnsIds', SyncContactBySnsIds_args, :reqSeq => reqSeq, :modifications => modifications)
    end

    def recv_syncContactBySnsIds()
      result = receive_message(SyncContactBySnsIds_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'syncContactBySnsIds failed: unknown result')
    end

    def syncContacts(reqSeq, localContacts)
      send_syncContacts(reqSeq, localContacts)
      return recv_syncContacts()
    end

    def send_syncContacts(reqSeq, localContacts)
      send_message('syncContacts', SyncContacts_args, :reqSeq => reqSeq, :localContacts => localContacts)
    end

    def recv_syncContacts()
      result = receive_message(SyncContacts_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'syncContacts failed: unknown result')
    end

    def trySendMessage(seq, message)
      send_trySendMessage(seq, message)
      return recv_trySendMessage()
    end

    def send_trySendMessage(seq, message)
      send_message('trySendMessage', TrySendMessage_args, :seq => seq, :message => message)
    end

    def recv_trySendMessage()
      result = receive_message(TrySendMessage_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'trySendMessage failed: unknown result')
    end

    def getNextMessagesV2(messageBoxId, startMessageId, messagesCount)
      send_getNextMessagesV2(messageBoxId, startMessageId, messagesCount)
      return recv_getNextMessagesV2()
    end

    def send_getNextMessagesV2(messageBoxId, startMessageId, messagesCount)
      send_message('getNextMessagesV2', GetNextMessagesV2_args, :messageBoxId => messageBoxId, :startMessageId => startMessageId, :messagesCount => messagesCount)
    end

    def recv_getNextMessagesV2()
      result = receive_message(GetNextMessagesV2_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getNextMessagesV2 failed: unknown result')
    end

    def getMessageBoxCompactWrapUpV2(messageBoxId)
      send_getMessageBoxCompactWrapUpV2(messageBoxId)
      return recv_getMessageBoxCompactWrapUpV2()
    end

    def send_getMessageBoxCompactWrapUpV2(messageBoxId)
      send_message('getMessageBoxCompactWrapUpV2', GetMessageBoxCompactWrapUpV2_args, :messageBoxId => messageBoxId)
    end

    def recv_getMessageBoxCompactWrapUpV2()
      result = receive_message(GetMessageBoxCompactWrapUpV2_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMessageBoxCompactWrapUpV2 failed: unknown result')
    end

    def getRecentMessagesV2(messageBoxId, messagesCount)
      send_getRecentMessagesV2(messageBoxId, messagesCount)
      return recv_getRecentMessagesV2()
    end

    def send_getRecentMessagesV2(messageBoxId, messagesCount)
      send_message('getRecentMessagesV2', GetRecentMessagesV2_args, :messageBoxId => messageBoxId, :messagesCount => messagesCount)
    end

    def recv_getRecentMessagesV2()
      result = receive_message(GetRecentMessagesV2_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getRecentMessagesV2 failed: unknown result')
    end

    def validateContactsOnBot(contacts)
      send_validateContactsOnBot(contacts)
      return recv_validateContactsOnBot()
    end

    def send_validateContactsOnBot(contacts)
      send_message('validateContactsOnBot', ValidateContactsOnBot_args, :contacts => contacts)
    end

    def recv_validateContactsOnBot()
      result = receive_message(ValidateContactsOnBot_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'validateContactsOnBot failed: unknown result')
    end

    def tryFriendRequest(midOrEMid, method, friendRequestParams)
      send_tryFriendRequest(midOrEMid, method, friendRequestParams)
      recv_tryFriendRequest()
    end

    def send_tryFriendRequest(midOrEMid, method, friendRequestParams)
      send_message('tryFriendRequest', TryFriendRequest_args, :midOrEMid => midOrEMid, :method => method, :friendRequestParams => friendRequestParams)
    end

    def recv_tryFriendRequest()
      result = receive_message(TryFriendRequest_result)
      raise result.e unless result.e.nil?
      return
    end

    def unblockContact(reqSeq, id)
      send_unblockContact(reqSeq, id)
      recv_unblockContact()
    end

    def send_unblockContact(reqSeq, id)
      send_message('unblockContact', UnblockContact_args, :reqSeq => reqSeq, :id => id)
    end

    def recv_unblockContact()
      result = receive_message(UnblockContact_result)
      raise result.e unless result.e.nil?
      return
    end

    def unblockRecommendation(reqSeq, id)
      send_unblockRecommendation(reqSeq, id)
      recv_unblockRecommendation()
    end

    def send_unblockRecommendation(reqSeq, id)
      send_message('unblockRecommendation', UnblockRecommendation_args, :reqSeq => reqSeq, :id => id)
    end

    def recv_unblockRecommendation()
      result = receive_message(UnblockRecommendation_result)
      raise result.e unless result.e.nil?
      return
    end

    def unregisterUserAndDevice()
      send_unregisterUserAndDevice()
      return recv_unregisterUserAndDevice()
    end

    def send_unregisterUserAndDevice()
      send_message('unregisterUserAndDevice', UnregisterUserAndDevice_args)
    end

    def recv_unregisterUserAndDevice()
      result = receive_message(UnregisterUserAndDevice_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'unregisterUserAndDevice failed: unknown result')
    end

    def updateApnsDeviceToken(apnsDeviceToken)
      send_updateApnsDeviceToken(apnsDeviceToken)
      recv_updateApnsDeviceToken()
    end

    def send_updateApnsDeviceToken(apnsDeviceToken)
      send_message('updateApnsDeviceToken', UpdateApnsDeviceToken_args, :apnsDeviceToken => apnsDeviceToken)
    end

    def recv_updateApnsDeviceToken()
      result = receive_message(UpdateApnsDeviceToken_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateBuddySetting(key, value)
      send_updateBuddySetting(key, value)
      recv_updateBuddySetting()
    end

    def send_updateBuddySetting(key, value)
      send_message('updateBuddySetting', UpdateBuddySetting_args, :key => key, :value => value)
    end

    def recv_updateBuddySetting()
      result = receive_message(UpdateBuddySetting_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateC2DMRegistrationId(registrationId)
      send_updateC2DMRegistrationId(registrationId)
      recv_updateC2DMRegistrationId()
    end

    def send_updateC2DMRegistrationId(registrationId)
      send_message('updateC2DMRegistrationId', UpdateC2DMRegistrationId_args, :registrationId => registrationId)
    end

    def recv_updateC2DMRegistrationId()
      result = receive_message(UpdateC2DMRegistrationId_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateContactSetting(reqSeq, mid, flag, value)
      send_updateContactSetting(reqSeq, mid, flag, value)
      recv_updateContactSetting()
    end

    def send_updateContactSetting(reqSeq, mid, flag, value)
      send_message('updateContactSetting', UpdateContactSetting_args, :reqSeq => reqSeq, :mid => mid, :flag => flag, :value => value)
    end

    def recv_updateContactSetting()
      result = receive_message(UpdateContactSetting_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateCustomModeSettings(customMode, paramMap)
      send_updateCustomModeSettings(customMode, paramMap)
      recv_updateCustomModeSettings()
    end

    def send_updateCustomModeSettings(customMode, paramMap)
      send_message('updateCustomModeSettings', UpdateCustomModeSettings_args, :customMode => customMode, :paramMap => paramMap)
    end

    def recv_updateCustomModeSettings()
      result = receive_message(UpdateCustomModeSettings_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateDeviceInfo(deviceUid, deviceInfo)
      send_updateDeviceInfo(deviceUid, deviceInfo)
      recv_updateDeviceInfo()
    end

    def send_updateDeviceInfo(deviceUid, deviceInfo)
      send_message('updateDeviceInfo', UpdateDeviceInfo_args, :deviceUid => deviceUid, :deviceInfo => deviceInfo)
    end

    def recv_updateDeviceInfo()
      result = receive_message(UpdateDeviceInfo_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateGroup(reqSeq, group)
      send_updateGroup(reqSeq, group)
      recv_updateGroup()
    end

    def send_updateGroup(reqSeq, group)
      send_message('updateGroup', UpdateGroup_args, :reqSeq => reqSeq, :group => group)
    end

    def recv_updateGroup()
      result = receive_message(UpdateGroup_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateNotificationToken(type, token)
      send_updateNotificationToken(type, token)
      recv_updateNotificationToken()
    end

    def send_updateNotificationToken(type, token)
      send_message('updateNotificationToken', UpdateNotificationToken_args, :type => type, :token => token)
    end

    def recv_updateNotificationToken()
      result = receive_message(UpdateNotificationToken_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateNotificationTokenWithBytes(type, token)
      send_updateNotificationTokenWithBytes(type, token)
      recv_updateNotificationTokenWithBytes()
    end

    def send_updateNotificationTokenWithBytes(type, token)
      send_message('updateNotificationTokenWithBytes', UpdateNotificationTokenWithBytes_args, :type => type, :token => token)
    end

    def recv_updateNotificationTokenWithBytes()
      result = receive_message(UpdateNotificationTokenWithBytes_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateProfile(reqSeq, profile)
      send_updateProfile(reqSeq, profile)
      recv_updateProfile()
    end

    def send_updateProfile(reqSeq, profile)
      send_message('updateProfile', UpdateProfile_args, :reqSeq => reqSeq, :profile => profile)
    end

    def recv_updateProfile()
      result = receive_message(UpdateProfile_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateProfileAttribute(reqSeq, attr, value)
      send_updateProfileAttribute(reqSeq, attr, value)
      recv_updateProfileAttribute()
    end

    def send_updateProfileAttribute(reqSeq, attr, value)
      send_message('updateProfileAttribute', UpdateProfileAttribute_args, :reqSeq => reqSeq, :attr => attr, :value => value)
    end

    def recv_updateProfileAttribute()
      result = receive_message(UpdateProfileAttribute_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateRegion(region)
      send_updateRegion(region)
      recv_updateRegion()
    end

    def send_updateRegion(region)
      send_message('updateRegion', UpdateRegion_args, :region => region)
    end

    def recv_updateRegion()
      result = receive_message(UpdateRegion_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateSettings(reqSeq, settings)
      send_updateSettings(reqSeq, settings)
      recv_updateSettings()
    end

    def send_updateSettings(reqSeq, settings)
      send_message('updateSettings', UpdateSettings_args, :reqSeq => reqSeq, :settings => settings)
    end

    def recv_updateSettings()
      result = receive_message(UpdateSettings_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateSettings2(reqSeq, settings)
      send_updateSettings2(reqSeq, settings)
      return recv_updateSettings2()
    end

    def send_updateSettings2(reqSeq, settings)
      send_message('updateSettings2', UpdateSettings2_args, :reqSeq => reqSeq, :settings => settings)
    end

    def recv_updateSettings2()
      result = receive_message(UpdateSettings2_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateSettings2 failed: unknown result')
    end

    def updateSettingsAttribute(reqSeq, attr, value)
      send_updateSettingsAttribute(reqSeq, attr, value)
      recv_updateSettingsAttribute()
    end

    def send_updateSettingsAttribute(reqSeq, attr, value)
      send_message('updateSettingsAttribute', UpdateSettingsAttribute_args, :reqSeq => reqSeq, :attr => attr, :value => value)
    end

    def recv_updateSettingsAttribute()
      result = receive_message(UpdateSettingsAttribute_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateSettingsAttributes(reqSeq, attrBitset, settings)
      send_updateSettingsAttributes(reqSeq, attrBitset, settings)
      return recv_updateSettingsAttributes()
    end

    def send_updateSettingsAttributes(reqSeq, attrBitset, settings)
      send_message('updateSettingsAttributes', UpdateSettingsAttributes_args, :reqSeq => reqSeq, :attrBitset => attrBitset, :settings => settings)
    end

    def recv_updateSettingsAttributes()
      result = receive_message(UpdateSettingsAttributes_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateSettingsAttributes failed: unknown result')
    end

    def verifyIdentityCredential(identityProvider, identifier, password)
      send_verifyIdentityCredential(identityProvider, identifier, password)
      recv_verifyIdentityCredential()
    end

    def send_verifyIdentityCredential(identityProvider, identifier, password)
      send_message('verifyIdentityCredential', VerifyIdentityCredential_args, :identityProvider => identityProvider, :identifier => identifier, :password => password)
    end

    def recv_verifyIdentityCredential()
      result = receive_message(VerifyIdentityCredential_result)
      raise result.e unless result.e.nil?
      return
    end

    def verifyIdentityCredentialWithResult(identityCredential)
      send_verifyIdentityCredentialWithResult(identityCredential)
      return recv_verifyIdentityCredentialWithResult()
    end

    def send_verifyIdentityCredentialWithResult(identityCredential)
      send_message('verifyIdentityCredentialWithResult', VerifyIdentityCredentialWithResult_args, :identityCredential => identityCredential)
    end

    def recv_verifyIdentityCredentialWithResult()
      result = receive_message(VerifyIdentityCredentialWithResult_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'verifyIdentityCredentialWithResult failed: unknown result')
    end

    def verifyPhone(sessionId, pinCode, udidHash)
      send_verifyPhone(sessionId, pinCode, udidHash)
      return recv_verifyPhone()
    end

    def send_verifyPhone(sessionId, pinCode, udidHash)
      send_message('verifyPhone', VerifyPhone_args, :sessionId => sessionId, :pinCode => pinCode, :udidHash => udidHash)
    end

    def recv_verifyPhone()
      result = receive_message(VerifyPhone_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'verifyPhone failed: unknown result')
    end

    def verifyQrcode(verifier, pinCode)
      send_verifyQrcode(verifier, pinCode)
      return recv_verifyQrcode()
    end

    def send_verifyQrcode(verifier, pinCode)
      send_message('verifyQrcode', VerifyQrcode_args, :verifier => verifier, :pinCode => pinCode)
    end

    def recv_verifyQrcode()
      result = receive_message(VerifyQrcode_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'verifyQrcode failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_getChatRoomAnnouncementsBulk(seqid, iprot, oprot)
      args = read_args(iprot, GetChatRoomAnnouncementsBulk_args)
      result = GetChatRoomAnnouncementsBulk_result.new()
      begin
        result.success = @handler.getChatRoomAnnouncementsBulk(args.chatRoomMids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getChatRoomAnnouncementsBulk', seqid)
    end

    def process_getChatRoomAnnouncements(seqid, iprot, oprot)
      args = read_args(iprot, GetChatRoomAnnouncements_args)
      result = GetChatRoomAnnouncements_result.new()
      begin
        result.success = @handler.getChatRoomAnnouncements(args.chatRoomMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getChatRoomAnnouncements', seqid)
    end

    def process_createChatRoomAnnouncement(seqid, iprot, oprot)
      args = read_args(iprot, CreateChatRoomAnnouncement_args)
      result = CreateChatRoomAnnouncement_result.new()
      begin
        result.success = @handler.createChatRoomAnnouncement(args.reqSeq, args.chatRoomMid, args.type, args.contents)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'createChatRoomAnnouncement', seqid)
    end

    def process_removeChatRoomAnnouncement(seqid, iprot, oprot)
      args = read_args(iprot, RemoveChatRoomAnnouncement_args)
      result = RemoveChatRoomAnnouncement_result.new()
      begin
        @handler.removeChatRoomAnnouncement(args.reqSeq, args.chatRoomMid, args.announcementSeq)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'removeChatRoomAnnouncement', seqid)
    end

    def process_unsendMessage(seqid, iprot, oprot)
      args = read_args(iprot, UnsendMessage_args)
      result = UnsendMessage_result.new()
      begin
        @handler.unsendMessage(args.seq, args.messageId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'unsendMessage', seqid)
    end

    def process_getGroupWithoutMembers(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupWithoutMembers_args)
      result = GetGroupWithoutMembers_result.new()
      begin
        result.success = @handler.getGroupWithoutMembers(args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroupWithoutMembers', seqid)
    end

    def process_requestResendMessage(seqid, iprot, oprot)
      args = read_args(iprot, RequestResendMessage_args)
      result = RequestResendMessage_result.new()
      begin
        @handler.requestResendMessage(args.reqSeq, args.senderMid, args.messageId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'requestResendMessage', seqid)
    end

    def process_respondResendMessage(seqid, iprot, oprot)
      args = read_args(iprot, RespondResendMessage_args)
      result = RespondResendMessage_result.new()
      begin
        @handler.respondResendMessage(args.reqSeq, args.receiverMid, args.originalMessageId, args.resendMessage, args.errorCode)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'respondResendMessage', seqid)
    end

    def process_acceptGroupInvitation(seqid, iprot, oprot)
      args = read_args(iprot, AcceptGroupInvitation_args)
      result = AcceptGroupInvitation_result.new()
      begin
        @handler.acceptGroupInvitation(args.reqSeq, args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'acceptGroupInvitation', seqid)
    end

    def process_acceptGroupInvitationByTicket(seqid, iprot, oprot)
      args = read_args(iprot, AcceptGroupInvitationByTicket_args)
      result = AcceptGroupInvitationByTicket_result.new()
      begin
        @handler.acceptGroupInvitationByTicket(args.reqSeq, args.GroupMid, args.ticketId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'acceptGroupInvitationByTicket', seqid)
    end

    def process_acceptProximityMatches(seqid, iprot, oprot)
      args = read_args(iprot, AcceptProximityMatches_args)
      result = AcceptProximityMatches_result.new()
      begin
        @handler.acceptProximityMatches(args.sessionId, args.ids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'acceptProximityMatches', seqid)
    end

    def process_acquireCallRoute(seqid, iprot, oprot)
      args = read_args(iprot, AcquireCallRoute_args)
      result = AcquireCallRoute_result.new()
      begin
        result.success = @handler.acquireCallRoute(args.to)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'acquireCallRoute', seqid)
    end

    def process_acquireCallTicket(seqid, iprot, oprot)
      args = read_args(iprot, AcquireCallTicket_args)
      result = AcquireCallTicket_result.new()
      begin
        result.success = @handler.acquireCallTicket(args.to)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'acquireCallTicket', seqid)
    end

    def process_acquireEncryptedAccessToken(seqid, iprot, oprot)
      args = read_args(iprot, AcquireEncryptedAccessToken_args)
      result = AcquireEncryptedAccessToken_result.new()
      begin
        result.success = @handler.acquireEncryptedAccessToken(args.featureType)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'acquireEncryptedAccessToken', seqid)
    end

    def process_addSnsId(seqid, iprot, oprot)
      args = read_args(iprot, AddSnsId_args)
      result = AddSnsId_result.new()
      begin
        result.success = @handler.addSnsId(args.snsIdType, args.snsAccessToken)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'addSnsId', seqid)
    end

    def process_blockContact(seqid, iprot, oprot)
      args = read_args(iprot, BlockContact_args)
      result = BlockContact_result.new()
      begin
        @handler.blockContact(args.reqSeq, args.id)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'blockContact', seqid)
    end

    def process_blockRecommendation(seqid, iprot, oprot)
      args = read_args(iprot, BlockRecommendation_args)
      result = BlockRecommendation_result.new()
      begin
        @handler.blockRecommendation(args.reqSeq, args.id)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'blockRecommendation', seqid)
    end

    def process_cancelGroupInvitation(seqid, iprot, oprot)
      args = read_args(iprot, CancelGroupInvitation_args)
      result = CancelGroupInvitation_result.new()
      begin
        @handler.cancelGroupInvitation(args.reqSeq, args.groupId, args.contactIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'cancelGroupInvitation', seqid)
    end

    def process_changeVerificationMethod(seqid, iprot, oprot)
      args = read_args(iprot, ChangeVerificationMethod_args)
      result = ChangeVerificationMethod_result.new()
      begin
        result.success = @handler.changeVerificationMethod(args.sessionId, args.method)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'changeVerificationMethod', seqid)
    end

    def process_clearIdentityCredential(seqid, iprot, oprot)
      args = read_args(iprot, ClearIdentityCredential_args)
      result = ClearIdentityCredential_result.new()
      begin
        @handler.clearIdentityCredential()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'clearIdentityCredential', seqid)
    end

    def process_clearMessageBox(seqid, iprot, oprot)
      args = read_args(iprot, ClearMessageBox_args)
      result = ClearMessageBox_result.new()
      begin
        @handler.clearMessageBox(args.channelId, args.messageBoxId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'clearMessageBox', seqid)
    end

    def process_closeProximityMatch(seqid, iprot, oprot)
      args = read_args(iprot, CloseProximityMatch_args)
      result = CloseProximityMatch_result.new()
      begin
        @handler.closeProximityMatch(args.sessionId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'closeProximityMatch', seqid)
    end

    def process_commitSendMessage(seqid, iprot, oprot)
      args = read_args(iprot, CommitSendMessage_args)
      result = CommitSendMessage_result.new()
      begin
        result.success = @handler.commitSendMessage(args.seq, args.messageId, args.receiverMids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'commitSendMessage', seqid)
    end

    def process_commitSendMessages(seqid, iprot, oprot)
      args = read_args(iprot, CommitSendMessages_args)
      result = CommitSendMessages_result.new()
      begin
        result.success = @handler.commitSendMessages(args.seq, args.messageIds, args.receiverMids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'commitSendMessages', seqid)
    end

    def process_commitUpdateProfile(seqid, iprot, oprot)
      args = read_args(iprot, CommitUpdateProfile_args)
      result = CommitUpdateProfile_result.new()
      begin
        result.success = @handler.commitUpdateProfile(args.seq, args.attrs, args.receiverMids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'commitUpdateProfile', seqid)
    end

    def process_confirmEmail(seqid, iprot, oprot)
      args = read_args(iprot, ConfirmEmail_args)
      result = ConfirmEmail_result.new()
      begin
        @handler.confirmEmail(args.verifier, args.pinCode)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'confirmEmail', seqid)
    end

    def process_createGroup(seqid, iprot, oprot)
      args = read_args(iprot, CreateGroup_args)
      result = CreateGroup_result.new()
      begin
        result.success = @handler.createGroup(args.seq, args.name, args.contactIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'createGroup', seqid)
    end

    def process_createQrcodeBase64Image(seqid, iprot, oprot)
      args = read_args(iprot, CreateQrcodeBase64Image_args)
      result = CreateQrcodeBase64Image_result.new()
      begin
        result.success = @handler.createQrcodeBase64Image(args.url, args.characterSet, args.imageSize, args.x, args.y, args.width, args.height)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'createQrcodeBase64Image', seqid)
    end

    def process_createRoom(seqid, iprot, oprot)
      args = read_args(iprot, CreateRoom_args)
      result = CreateRoom_result.new()
      begin
        result.success = @handler.createRoom(args.reqSeq, args.contactIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'createRoom', seqid)
    end

    def process_createSession(seqid, iprot, oprot)
      args = read_args(iprot, CreateSession_args)
      result = CreateSession_result.new()
      begin
        result.success = @handler.createSession()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'createSession', seqid)
    end

    def process_fetchAnnouncements(seqid, iprot, oprot)
      args = read_args(iprot, FetchAnnouncements_args)
      result = FetchAnnouncements_result.new()
      begin
        result.success = @handler.fetchAnnouncements(args.lastFetchedIndex)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'fetchAnnouncements', seqid)
    end

    def process_fetchMessages(seqid, iprot, oprot)
      args = read_args(iprot, FetchMessages_args)
      result = FetchMessages_result.new()
      begin
        result.success = @handler.fetchMessages(args.localTs, args.count)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'fetchMessages', seqid)
    end

    def process_fetchOperations(seqid, iprot, oprot)
      args = read_args(iprot, FetchOperations_args)
      result = FetchOperations_result.new()
      begin
        result.success = @handler.fetchOperations(args.localRev, args.count)
      rescue ::ShouldSyncException => e
        result.e = e
      end
      write_result(result, oprot, 'fetchOperations', seqid)
    end

    def process_fetchOps(seqid, iprot, oprot)
      args = read_args(iprot, FetchOps_args)
      result = FetchOps_result.new()
      begin
        result.success = @handler.fetchOps(args.localRev, args.count, args.globalRev, args.individualRev)
      rescue ::ShouldSyncException => e
        result.e = e
      end
      write_result(result, oprot, 'fetchOps', seqid)
    end

    def process_findAndAddContactsByEmail(seqid, iprot, oprot)
      args = read_args(iprot, FindAndAddContactsByEmail_args)
      result = FindAndAddContactsByEmail_result.new()
      begin
        result.success = @handler.findAndAddContactsByEmail(args.reqSeq, args.emails)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findAndAddContactsByEmail', seqid)
    end

    def process_findAndAddContactsByMid(seqid, iprot, oprot)
      args = read_args(iprot, FindAndAddContactsByMid_args)
      result = FindAndAddContactsByMid_result.new()
      begin
        result.success = @handler.findAndAddContactsByMid(args.reqSeq, args.mid, args.type, args.reference)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findAndAddContactsByMid', seqid)
    end

    def process_findGroupByTicketV2(seqid, iprot, oprot)
      args = read_args(iprot, FindGroupByTicketV2_args)
      result = FindGroupByTicketV2_result.new()
      begin
        result.success = @handler.findGroupByTicketV2(args.ticketId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findGroupByTicketV2', seqid)
    end

    def process_findAndAddContactsByPhone(seqid, iprot, oprot)
      args = read_args(iprot, FindAndAddContactsByPhone_args)
      result = FindAndAddContactsByPhone_result.new()
      begin
        result.success = @handler.findAndAddContactsByPhone(args.reqSeq, args.phones)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findAndAddContactsByPhone', seqid)
    end

    def process_getFriendRequests(seqid, iprot, oprot)
      args = read_args(iprot, GetFriendRequests_args)
      result = GetFriendRequests_result.new()
      begin
        result.success = @handler.getFriendRequests(args.direction, args.lastSeenSeqId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getFriendRequests', seqid)
    end

    def process_removeFriendRequest(seqid, iprot, oprot)
      args = read_args(iprot, RemoveFriendRequest_args)
      result = RemoveFriendRequest_result.new()
      begin
        @handler.removeFriendRequest(args.direction, args.midOrEMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'removeFriendRequest', seqid)
    end

    def process_findAndAddContactsByUserid(seqid, iprot, oprot)
      args = read_args(iprot, FindAndAddContactsByUserid_args)
      result = FindAndAddContactsByUserid_result.new()
      begin
        result.success = @handler.findAndAddContactsByUserid(args.reqSeq, args.userid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findAndAddContactsByUserid', seqid)
    end

    def process_findContactByUserid(seqid, iprot, oprot)
      args = read_args(iprot, FindContactByUserid_args)
      result = FindContactByUserid_result.new()
      begin
        result.success = @handler.findContactByUserid(args.userid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findContactByUserid', seqid)
    end

    def process_findContactByUserTicket(seqid, iprot, oprot)
      args = read_args(iprot, FindContactByUserTicket_args)
      result = FindContactByUserTicket_result.new()
      begin
        result.success = @handler.findContactByUserTicket(args.ticketIdWithTag)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findContactByUserTicket', seqid)
    end

    def process_findContactsByEmail(seqid, iprot, oprot)
      args = read_args(iprot, FindContactsByEmail_args)
      result = FindContactsByEmail_result.new()
      begin
        result.success = @handler.findContactsByEmail(args.emails)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findContactsByEmail', seqid)
    end

    def process_findContactsByPhone(seqid, iprot, oprot)
      args = read_args(iprot, FindContactsByPhone_args)
      result = FindContactsByPhone_result.new()
      begin
        result.success = @handler.findContactsByPhone(args.phones)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findContactsByPhone', seqid)
    end

    def process_findSnsIdUserStatus(seqid, iprot, oprot)
      args = read_args(iprot, FindSnsIdUserStatus_args)
      result = FindSnsIdUserStatus_result.new()
      begin
        result.success = @handler.findSnsIdUserStatus(args.snsIdType, args.snsAccessToken, args.udidHash)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findSnsIdUserStatus', seqid)
    end

    def process_finishUpdateVerification(seqid, iprot, oprot)
      args = read_args(iprot, FinishUpdateVerification_args)
      result = FinishUpdateVerification_result.new()
      begin
        @handler.finishUpdateVerification(args.sessionId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'finishUpdateVerification', seqid)
    end

    def process_generateUserTicket(seqid, iprot, oprot)
      args = read_args(iprot, GenerateUserTicket_args)
      result = GenerateUserTicket_result.new()
      begin
        result.success = @handler.generateUserTicket(args.expirationTime, args.maxUseCount)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'generateUserTicket', seqid)
    end

    def process_destroyMessage(seqid, iprot, oprot)
      args = read_args(iprot, DestroyMessage_args)
      result = DestroyMessage_result.new()
      begin
        @handler.destroyMessage(args.seq, args.chatId, args.messageId, args.sessionId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'destroyMessage', seqid)
    end

    def process_getAcceptedProximityMatches(seqid, iprot, oprot)
      args = read_args(iprot, GetAcceptedProximityMatches_args)
      result = GetAcceptedProximityMatches_result.new()
      begin
        result.success = @handler.getAcceptedProximityMatches(args.sessionId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getAcceptedProximityMatches', seqid)
    end

    def process_getActiveBuddySubscriberIds(seqid, iprot, oprot)
      args = read_args(iprot, GetActiveBuddySubscriberIds_args)
      result = GetActiveBuddySubscriberIds_result.new()
      begin
        result.success = @handler.getActiveBuddySubscriberIds()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getActiveBuddySubscriberIds', seqid)
    end

    def process_getAllContactIds(seqid, iprot, oprot)
      args = read_args(iprot, GetAllContactIds_args)
      result = GetAllContactIds_result.new()
      begin
        result.success = @handler.getAllContactIds()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getAllContactIds', seqid)
    end

    def process_getAuthQrcode(seqid, iprot, oprot)
      args = read_args(iprot, GetAuthQrcode_args)
      result = GetAuthQrcode_result.new()
      begin
        result.success = @handler.getAuthQrcode(args.keepLoggedIn, args.systemName)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getAuthQrcode', seqid)
    end

    def process_getBlockedContactIds(seqid, iprot, oprot)
      args = read_args(iprot, GetBlockedContactIds_args)
      result = GetBlockedContactIds_result.new()
      begin
        result.success = @handler.getBlockedContactIds()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getBlockedContactIds', seqid)
    end

    def process_registerWithPhoneNumber(seqid, iprot, oprot)
      args = read_args(iprot, RegisterWithPhoneNumber_args)
      result = RegisterWithPhoneNumber_result.new()
      begin
        result.success = @handler.registerWithPhoneNumber(args.sessionId, args.migrationPincodeSessionId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerWithPhoneNumber', seqid)
    end

    def process_registerWithPhoneNumberAndPassword(seqid, iprot, oprot)
      args = read_args(iprot, RegisterWithPhoneNumberAndPassword_args)
      result = RegisterWithPhoneNumberAndPassword_result.new()
      begin
        result.success = @handler.registerWithPhoneNumberAndPassword(args.sessionId, args.keynm, args.encrypted)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerWithPhoneNumberAndPassword', seqid)
    end

    def process_getAnalyticsInfo(seqid, iprot, oprot)
      args = read_args(iprot, GetAnalyticsInfo_args)
      result = GetAnalyticsInfo_result.new()
      begin
        result.success = @handler.getAnalyticsInfo()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getAnalyticsInfo', seqid)
    end

    def process_reportClientStatistics(seqid, iprot, oprot)
      args = read_args(iprot, ReportClientStatistics_args)
      result = ReportClientStatistics_result.new()
      begin
        @handler.reportClientStatistics(args.reqSeq, args.category, args.count)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'reportClientStatistics', seqid)
    end

    def process_verifyPhoneNumberForLogin(seqid, iprot, oprot)
      args = read_args(iprot, VerifyPhoneNumberForLogin_args)
      result = VerifyPhoneNumberForLogin_result.new()
      begin
        result.success = @handler.verifyPhoneNumberForLogin(args.verifierFromPhone, args.pinCodeForPhone, args.verifierFromLogin)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'verifyPhoneNumberForLogin', seqid)
    end

    def process_verifyPhoneNumber(seqid, iprot, oprot)
      args = read_args(iprot, VerifyPhoneNumber_args)
      result = VerifyPhoneNumber_result.new()
      begin
        result.success = @handler.verifyPhoneNumber(args.sessionId, args.pinCode, args.udidHash, args.migrationPincodeSessionId, args.oldUdidHash)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'verifyPhoneNumber', seqid)
    end

    def process_getBlockedContactIdsByRange(seqid, iprot, oprot)
      args = read_args(iprot, GetBlockedContactIdsByRange_args)
      result = GetBlockedContactIdsByRange_result.new()
      begin
        result.success = @handler.getBlockedContactIdsByRange(args.start, args.count)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getBlockedContactIdsByRange', seqid)
    end

    def process_getBlockedRecommendationIds(seqid, iprot, oprot)
      args = read_args(iprot, GetBlockedRecommendationIds_args)
      result = GetBlockedRecommendationIds_result.new()
      begin
        result.success = @handler.getBlockedRecommendationIds()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getBlockedRecommendationIds', seqid)
    end

    def process_getBuddyBlockerIds(seqid, iprot, oprot)
      args = read_args(iprot, GetBuddyBlockerIds_args)
      result = GetBuddyBlockerIds_result.new()
      begin
        result.success = @handler.getBuddyBlockerIds()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getBuddyBlockerIds', seqid)
    end

    def process_getBuddyLocation(seqid, iprot, oprot)
      args = read_args(iprot, GetBuddyLocation_args)
      result = GetBuddyLocation_result.new()
      begin
        result.success = @handler.getBuddyLocation(args.mid, args.index)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getBuddyLocation', seqid)
    end

    def process_getCompactContactsModifiedSince(seqid, iprot, oprot)
      args = read_args(iprot, GetCompactContactsModifiedSince_args)
      result = GetCompactContactsModifiedSince_result.new()
      begin
        result.success = @handler.getCompactContactsModifiedSince(args.timestamp)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getCompactContactsModifiedSince', seqid)
    end

    def process_getCompactGroup(seqid, iprot, oprot)
      args = read_args(iprot, GetCompactGroup_args)
      result = GetCompactGroup_result.new()
      begin
        result.success = @handler.getCompactGroup(args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getCompactGroup', seqid)
    end

    def process_getCompactRoom(seqid, iprot, oprot)
      args = read_args(iprot, GetCompactRoom_args)
      result = GetCompactRoom_result.new()
      begin
        result.success = @handler.getCompactRoom(args.roomId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getCompactRoom', seqid)
    end

    def process_getContact(seqid, iprot, oprot)
      args = read_args(iprot, GetContact_args)
      result = GetContact_result.new()
      begin
        result.success = @handler.getContact(args.id)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getContact', seqid)
    end

    def process_getContacts(seqid, iprot, oprot)
      args = read_args(iprot, GetContacts_args)
      result = GetContacts_result.new()
      begin
        result.success = @handler.getContacts(args.ids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getContacts', seqid)
    end

    def process_getContactWithFriendRequestStatus(seqid, iprot, oprot)
      args = read_args(iprot, GetContactWithFriendRequestStatus_args)
      result = GetContactWithFriendRequestStatus_result.new()
      begin
        result.success = @handler.getContactWithFriendRequestStatus(args.id)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getContactWithFriendRequestStatus', seqid)
    end

    def process_getCountryWithRequestIp(seqid, iprot, oprot)
      args = read_args(iprot, GetCountryWithRequestIp_args)
      result = GetCountryWithRequestIp_result.new()
      begin
        result.success = @handler.getCountryWithRequestIp()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getCountryWithRequestIp', seqid)
    end

    def process_getFavoriteMids(seqid, iprot, oprot)
      args = read_args(iprot, GetFavoriteMids_args)
      result = GetFavoriteMids_result.new()
      begin
        result.success = @handler.getFavoriteMids()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getFavoriteMids', seqid)
    end

    def process_getGroup(seqid, iprot, oprot)
      args = read_args(iprot, GetGroup_args)
      result = GetGroup_result.new()
      begin
        result.success = @handler.getGroup(args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroup', seqid)
    end

    def process_getGroupIdsInvited(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupIdsInvited_args)
      result = GetGroupIdsInvited_result.new()
      begin
        result.success = @handler.getGroupIdsInvited()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroupIdsInvited', seqid)
    end

    def process_getGroupIdsJoined(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupIdsJoined_args)
      result = GetGroupIdsJoined_result.new()
      begin
        result.success = @handler.getGroupIdsJoined()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroupIdsJoined', seqid)
    end

    def process_getGroups(seqid, iprot, oprot)
      args = read_args(iprot, GetGroups_args)
      result = GetGroups_result.new()
      begin
        result.success = @handler.getGroups(args.groupIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroups', seqid)
    end

    def process_getHiddenContactMids(seqid, iprot, oprot)
      args = read_args(iprot, GetHiddenContactMids_args)
      result = GetHiddenContactMids_result.new()
      begin
        result.success = @handler.getHiddenContactMids()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getHiddenContactMids', seqid)
    end

    def process_getIdentityIdentifier(seqid, iprot, oprot)
      args = read_args(iprot, GetIdentityIdentifier_args)
      result = GetIdentityIdentifier_result.new()
      begin
        result.success = @handler.getIdentityIdentifier()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getIdentityIdentifier', seqid)
    end

    def process_getLastAnnouncementIndex(seqid, iprot, oprot)
      args = read_args(iprot, GetLastAnnouncementIndex_args)
      result = GetLastAnnouncementIndex_result.new()
      begin
        result.success = @handler.getLastAnnouncementIndex()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getLastAnnouncementIndex', seqid)
    end

    def process_getLastOpRevision(seqid, iprot, oprot)
      args = read_args(iprot, GetLastOpRevision_args)
      result = GetLastOpRevision_result.new()
      begin
        result.success = @handler.getLastOpRevision()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getLastOpRevision', seqid)
    end

    def process_getSuggestRevisions(seqid, iprot, oprot)
      args = read_args(iprot, GetSuggestRevisions_args)
      result = GetSuggestRevisions_result.new()
      begin
        result.success = @handler.getSuggestRevisions()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getSuggestRevisions', seqid)
    end

    def process_getPreviousMessagesV2WithReadCount(seqid, iprot, oprot)
      args = read_args(iprot, GetPreviousMessagesV2WithReadCount_args)
      result = GetPreviousMessagesV2WithReadCount_result.new()
      begin
        result.success = @handler.getPreviousMessagesV2WithReadCount(args.messageBoxId, args.endMessageId, args.messagesCount)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPreviousMessagesV2WithReadCount', seqid)
    end

    def process_getMessageBox(seqid, iprot, oprot)
      args = read_args(iprot, GetMessageBox_args)
      result = GetMessageBox_result.new()
      begin
        result.success = @handler.getMessageBox(args.channelId, args.messageBoxId, args.lastMessagesCount)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getMessageBox', seqid)
    end

    def process_getMessageBoxCompactWrapUp(seqid, iprot, oprot)
      args = read_args(iprot, GetMessageBoxCompactWrapUp_args)
      result = GetMessageBoxCompactWrapUp_result.new()
      begin
        result.success = @handler.getMessageBoxCompactWrapUp(args.mid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getMessageBoxCompactWrapUp', seqid)
    end

    def process_getMessageBoxCompactWrapUpList(seqid, iprot, oprot)
      args = read_args(iprot, GetMessageBoxCompactWrapUpList_args)
      result = GetMessageBoxCompactWrapUpList_result.new()
      begin
        result.success = @handler.getMessageBoxCompactWrapUpList(args.start, args.messageBoxCount)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getMessageBoxCompactWrapUpList', seqid)
    end

    def process_getMessageBoxList(seqid, iprot, oprot)
      args = read_args(iprot, GetMessageBoxList_args)
      result = GetMessageBoxList_result.new()
      begin
        result.success = @handler.getMessageBoxList(args.channelId, args.lastMessagesCount)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getMessageBoxList', seqid)
    end

    def process_getMessageBoxListByStatus(seqid, iprot, oprot)
      args = read_args(iprot, GetMessageBoxListByStatus_args)
      result = GetMessageBoxListByStatus_result.new()
      begin
        result.success = @handler.getMessageBoxListByStatus(args.channelId, args.lastMessagesCount, args.status)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getMessageBoxListByStatus', seqid)
    end

    def process_getMessageBoxWrapUp(seqid, iprot, oprot)
      args = read_args(iprot, GetMessageBoxWrapUp_args)
      result = GetMessageBoxWrapUp_result.new()
      begin
        result.success = @handler.getMessageBoxWrapUp(args.mid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getMessageBoxWrapUp', seqid)
    end

    def process_getMessageBoxWrapUpList(seqid, iprot, oprot)
      args = read_args(iprot, GetMessageBoxWrapUpList_args)
      result = GetMessageBoxWrapUpList_result.new()
      begin
        result.success = @handler.getMessageBoxWrapUpList(args.start, args.messageBoxCount)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getMessageBoxWrapUpList', seqid)
    end

    def process_getMessagesBySequenceNumber(seqid, iprot, oprot)
      args = read_args(iprot, GetMessagesBySequenceNumber_args)
      result = GetMessagesBySequenceNumber_result.new()
      begin
        result.success = @handler.getMessagesBySequenceNumber(args.channelId, args.messageBoxId, args.startSeq, args.endSeq)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getMessagesBySequenceNumber', seqid)
    end

    def process_getNextMessages(seqid, iprot, oprot)
      args = read_args(iprot, GetNextMessages_args)
      result = GetNextMessages_result.new()
      begin
        result.success = @handler.getNextMessages(args.messageBoxId, args.startSeq, args.messagesCount)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getNextMessages', seqid)
    end

    def process_getNotificationPolicy(seqid, iprot, oprot)
      args = read_args(iprot, GetNotificationPolicy_args)
      result = GetNotificationPolicy_result.new()
      begin
        result.success = @handler.getNotificationPolicy(args.carrier)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getNotificationPolicy', seqid)
    end

    def process_getPreviousMessages(seqid, iprot, oprot)
      args = read_args(iprot, GetPreviousMessages_args)
      result = GetPreviousMessages_result.new()
      begin
        result.success = @handler.getPreviousMessages(args.messageBoxId, args.endSeq, args.messagesCount)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPreviousMessages', seqid)
    end

    def process_getProfile(seqid, iprot, oprot)
      args = read_args(iprot, GetProfile_args)
      result = GetProfile_result.new()
      begin
        result.success = @handler.getProfile()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getProfile', seqid)
    end

    def process_getProximityMatchCandidateList(seqid, iprot, oprot)
      args = read_args(iprot, GetProximityMatchCandidateList_args)
      result = GetProximityMatchCandidateList_result.new()
      begin
        result.success = @handler.getProximityMatchCandidateList(args.sessionId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getProximityMatchCandidateList', seqid)
    end

    def process_getProximityMatchCandidates(seqid, iprot, oprot)
      args = read_args(iprot, GetProximityMatchCandidates_args)
      result = GetProximityMatchCandidates_result.new()
      begin
        result.success = @handler.getProximityMatchCandidates(args.sessionId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getProximityMatchCandidates', seqid)
    end

    def process_getRecentMessages(seqid, iprot, oprot)
      args = read_args(iprot, GetRecentMessages_args)
      result = GetRecentMessages_result.new()
      begin
        result.success = @handler.getRecentMessages(args.messageBoxId, args.messagesCount)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getRecentMessages', seqid)
    end

    def process_getRecommendationIds(seqid, iprot, oprot)
      args = read_args(iprot, GetRecommendationIds_args)
      result = GetRecommendationIds_result.new()
      begin
        result.success = @handler.getRecommendationIds()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getRecommendationIds', seqid)
    end

    def process_getRoom(seqid, iprot, oprot)
      args = read_args(iprot, GetRoom_args)
      result = GetRoom_result.new()
      begin
        result.success = @handler.getRoom(args.roomId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getRoom', seqid)
    end

    def process_getRSAKeyInfo(seqid, iprot, oprot)
      args = read_args(iprot, GetRSAKeyInfo_args)
      result = GetRSAKeyInfo_result.new()
      begin
        result.success = @handler.getRSAKeyInfo(args.provider)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getRSAKeyInfo', seqid)
    end

    def process_getServerTime(seqid, iprot, oprot)
      args = read_args(iprot, GetServerTime_args)
      result = GetServerTime_result.new()
      begin
        result.success = @handler.getServerTime()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getServerTime', seqid)
    end

    def process_getSessions(seqid, iprot, oprot)
      args = read_args(iprot, GetSessions_args)
      result = GetSessions_result.new()
      begin
        result.success = @handler.getSessions()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getSessions', seqid)
    end

    def process_getSettings(seqid, iprot, oprot)
      args = read_args(iprot, GetSettings_args)
      result = GetSettings_result.new()
      begin
        result.success = @handler.getSettings()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getSettings', seqid)
    end

    def process_getGroupsV2(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupsV2_args)
      result = GetGroupsV2_result.new()
      begin
        result.success = @handler.getGroupsV2(args.groupIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroupsV2', seqid)
    end

    def process_getSettingsAttributes(seqid, iprot, oprot)
      args = read_args(iprot, GetSettingsAttributes_args)
      result = GetSettingsAttributes_result.new()
      begin
        result.success = @handler.getSettingsAttributes(args.attrBitset)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getSettingsAttributes', seqid)
    end

    def process_getSystemConfiguration(seqid, iprot, oprot)
      args = read_args(iprot, GetSystemConfiguration_args)
      result = GetSystemConfiguration_result.new()
      begin
        result.success = @handler.getSystemConfiguration()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getSystemConfiguration', seqid)
    end

    def process_getUserTicket(seqid, iprot, oprot)
      args = read_args(iprot, GetUserTicket_args)
      result = GetUserTicket_result.new()
      begin
        result.success = @handler.getUserTicket()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getUserTicket', seqid)
    end

    def process_getWapInvitation(seqid, iprot, oprot)
      args = read_args(iprot, GetWapInvitation_args)
      result = GetWapInvitation_result.new()
      begin
        result.success = @handler.getWapInvitation(args.invitationHash)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getWapInvitation', seqid)
    end

    def process_invalidateUserTicket(seqid, iprot, oprot)
      args = read_args(iprot, InvalidateUserTicket_args)
      result = InvalidateUserTicket_result.new()
      begin
        @handler.invalidateUserTicket()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'invalidateUserTicket', seqid)
    end

    def process_inviteFriendsBySms(seqid, iprot, oprot)
      args = read_args(iprot, InviteFriendsBySms_args)
      result = InviteFriendsBySms_result.new()
      begin
        @handler.inviteFriendsBySms(args.phoneNumberList)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'inviteFriendsBySms', seqid)
    end

    def process_inviteIntoGroup(seqid, iprot, oprot)
      args = read_args(iprot, InviteIntoGroup_args)
      result = InviteIntoGroup_result.new()
      begin
        @handler.inviteIntoGroup(args.reqSeq, args.groupId, args.contactIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'inviteIntoGroup', seqid)
    end

    def process_inviteIntoRoom(seqid, iprot, oprot)
      args = read_args(iprot, InviteIntoRoom_args)
      result = InviteIntoRoom_result.new()
      begin
        @handler.inviteIntoRoom(args.reqSeq, args.roomId, args.contactIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'inviteIntoRoom', seqid)
    end

    def process_inviteViaEmail(seqid, iprot, oprot)
      args = read_args(iprot, InviteViaEmail_args)
      result = InviteViaEmail_result.new()
      begin
        @handler.inviteViaEmail(args.reqSeq, args.email, args.name)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'inviteViaEmail', seqid)
    end

    def process_isIdentityIdentifierAvailable(seqid, iprot, oprot)
      args = read_args(iprot, IsIdentityIdentifierAvailable_args)
      result = IsIdentityIdentifierAvailable_result.new()
      begin
        result.success = @handler.isIdentityIdentifierAvailable(args.provider, args.identifier)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'isIdentityIdentifierAvailable', seqid)
    end

    def process_isUseridAvailable(seqid, iprot, oprot)
      args = read_args(iprot, IsUseridAvailable_args)
      result = IsUseridAvailable_result.new()
      begin
        result.success = @handler.isUseridAvailable(args.userid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'isUseridAvailable', seqid)
    end

    def process_kickoutFromGroup(seqid, iprot, oprot)
      args = read_args(iprot, KickoutFromGroup_args)
      result = KickoutFromGroup_result.new()
      begin
        @handler.kickoutFromGroup(args.reqSeq, args.groupId, args.contactIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'kickoutFromGroup', seqid)
    end

    def process_reissueGroupTicket(seqid, iprot, oprot)
      args = read_args(iprot, ReissueGroupTicket_args)
      result = ReissueGroupTicket_result.new()
      begin
        result.success = @handler.reissueGroupTicket(args.groupMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'reissueGroupTicket', seqid)
    end

    def process_findGroupByTicket(seqid, iprot, oprot)
      args = read_args(iprot, FindGroupByTicket_args)
      result = FindGroupByTicket_result.new()
      begin
        result.success = @handler.findGroupByTicket(args.ticketId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findGroupByTicket', seqid)
    end

    def process_leaveGroup(seqid, iprot, oprot)
      args = read_args(iprot, LeaveGroup_args)
      result = LeaveGroup_result.new()
      begin
        @handler.leaveGroup(args.reqSeq, args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'leaveGroup', seqid)
    end

    def process_leaveRoom(seqid, iprot, oprot)
      args = read_args(iprot, LeaveRoom_args)
      result = LeaveRoom_result.new()
      begin
        @handler.leaveRoom(args.reqSeq, args.roomId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'leaveRoom', seqid)
    end

    def process_loginWithIdentityCredential(seqid, iprot, oprot)
      args = read_args(iprot, LoginWithIdentityCredential_args)
      result = LoginWithIdentityCredential_result.new()
      begin
        result.success = @handler.loginWithIdentityCredential(args.identityProvider, args.identifier, args.password, args.keepLoggedIn, args.accessLocation, args.systemName, args.certificate)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'loginWithIdentityCredential', seqid)
    end

    def process_loginWithIdentityCredentialForCertificate(seqid, iprot, oprot)
      args = read_args(iprot, LoginWithIdentityCredentialForCertificate_args)
      result = LoginWithIdentityCredentialForCertificate_result.new()
      begin
        result.success = @handler.loginWithIdentityCredentialForCertificate(args.identityProvider, args.identifier, args.password, args.keepLoggedIn, args.accessLocation, args.systemName, args.certificate)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'loginWithIdentityCredentialForCertificate', seqid)
    end

    def process_loginWithVerifier(seqid, iprot, oprot)
      args = read_args(iprot, LoginWithVerifier_args)
      result = LoginWithVerifier_result.new()
      begin
        result.success = @handler.loginWithVerifier(args.verifier)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'loginWithVerifier', seqid)
    end

    def process_loginWithVerifierForCerificate(seqid, iprot, oprot)
      args = read_args(iprot, LoginWithVerifierForCerificate_args)
      result = LoginWithVerifierForCerificate_result.new()
      begin
        result.success = @handler.loginWithVerifierForCerificate(args.verifier)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'loginWithVerifierForCerificate', seqid)
    end

    def process_loginWithVerifierForCertificate(seqid, iprot, oprot)
      args = read_args(iprot, LoginWithVerifierForCertificate_args)
      result = LoginWithVerifierForCertificate_result.new()
      begin
        result.success = @handler.loginWithVerifierForCertificate(args.verifier)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'loginWithVerifierForCertificate', seqid)
    end

    def process_logout(seqid, iprot, oprot)
      args = read_args(iprot, Logout_args)
      result = Logout_result.new()
      begin
        @handler.logout()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'logout', seqid)
    end

    def process_logoutSession(seqid, iprot, oprot)
      args = read_args(iprot, LogoutSession_args)
      result = LogoutSession_result.new()
      begin
        @handler.logoutSession(args.tokenKey)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'logoutSession', seqid)
    end

    def process_noop(seqid, iprot, oprot)
      args = read_args(iprot, Noop_args)
      result = Noop_result.new()
      begin
        @handler.noop()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'noop', seqid)
    end

    def process_notifiedRedirect(seqid, iprot, oprot)
      args = read_args(iprot, NotifiedRedirect_args)
      result = NotifiedRedirect_result.new()
      begin
        @handler.notifiedRedirect(args.paramMap)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'notifiedRedirect', seqid)
    end

    def process_notifyBuddyOnAir(seqid, iprot, oprot)
      args = read_args(iprot, NotifyBuddyOnAir_args)
      result = NotifyBuddyOnAir_result.new()
      begin
        result.success = @handler.notifyBuddyOnAir(args.seq, args.receiverMids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'notifyBuddyOnAir', seqid)
    end

    def process_notifyIndividualEvent(seqid, iprot, oprot)
      args = read_args(iprot, NotifyIndividualEvent_args)
      result = NotifyIndividualEvent_result.new()
      begin
        @handler.notifyIndividualEvent(args.notificationStatus, args.receiverMids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'notifyIndividualEvent', seqid)
    end

    def process_notifyInstalled(seqid, iprot, oprot)
      args = read_args(iprot, NotifyInstalled_args)
      result = NotifyInstalled_result.new()
      begin
        @handler.notifyInstalled(args.udidHash, args.applicationTypeWithExtensions)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'notifyInstalled', seqid)
    end

    def process_notifyRegistrationComplete(seqid, iprot, oprot)
      args = read_args(iprot, NotifyRegistrationComplete_args)
      result = NotifyRegistrationComplete_result.new()
      begin
        @handler.notifyRegistrationComplete(args.udidHash, args.applicationTypeWithExtensions)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'notifyRegistrationComplete', seqid)
    end

    def process_notifySleep(seqid, iprot, oprot)
      args = read_args(iprot, NotifySleep_args)
      result = NotifySleep_result.new()
      begin
        @handler.notifySleep(args.lastRev, args.badge)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'notifySleep', seqid)
    end

    def process_notifyUpdated(seqid, iprot, oprot)
      args = read_args(iprot, NotifyUpdated_args)
      result = NotifyUpdated_result.new()
      begin
        @handler.notifyUpdated(args.lastRev, args.deviceInfo)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'notifyUpdated', seqid)
    end

    def process_openProximityMatch(seqid, iprot, oprot)
      args = read_args(iprot, OpenProximityMatch_args)
      result = OpenProximityMatch_result.new()
      begin
        result.success = @handler.openProximityMatch(args.location)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'openProximityMatch', seqid)
    end

    def process_registerBuddyUser(seqid, iprot, oprot)
      args = read_args(iprot, RegisterBuddyUser_args)
      result = RegisterBuddyUser_result.new()
      begin
        result.success = @handler.registerBuddyUser(args.buddyId, args.registrarPassword)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerBuddyUser', seqid)
    end

    def process_registerBuddyUserid(seqid, iprot, oprot)
      args = read_args(iprot, RegisterBuddyUserid_args)
      result = RegisterBuddyUserid_result.new()
      begin
        @handler.registerBuddyUserid(args.seq, args.userid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerBuddyUserid', seqid)
    end

    def process_registerDevice(seqid, iprot, oprot)
      args = read_args(iprot, RegisterDevice_args)
      result = RegisterDevice_result.new()
      begin
        result.success = @handler.registerDevice(args.sessionId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerDevice', seqid)
    end

    def process_registerDeviceWithIdentityCredential(seqid, iprot, oprot)
      args = read_args(iprot, RegisterDeviceWithIdentityCredential_args)
      result = RegisterDeviceWithIdentityCredential_result.new()
      begin
        result.success = @handler.registerDeviceWithIdentityCredential(args.sessionId, args.provider, args.identifier, args.verifier)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerDeviceWithIdentityCredential', seqid)
    end

    def process_registerDeviceWithoutPhoneNumber(seqid, iprot, oprot)
      args = read_args(iprot, RegisterDeviceWithoutPhoneNumber_args)
      result = RegisterDeviceWithoutPhoneNumber_result.new()
      begin
        result.success = @handler.registerDeviceWithoutPhoneNumber(args.region, args.udidHash, args.deviceInfo)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerDeviceWithoutPhoneNumber', seqid)
    end

    def process_registerDeviceWithoutPhoneNumberWithIdentityCredential(seqid, iprot, oprot)
      args = read_args(iprot, RegisterDeviceWithoutPhoneNumberWithIdentityCredential_args)
      result = RegisterDeviceWithoutPhoneNumberWithIdentityCredential_result.new()
      begin
        result.success = @handler.registerDeviceWithoutPhoneNumberWithIdentityCredential(args.region, args.udidHash, args.deviceInfo, args.provider, args.identifier, args.verifier, args.mid, args.migrationPincodeSessionId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerDeviceWithoutPhoneNumberWithIdentityCredential', seqid)
    end

    def process_registerUserid(seqid, iprot, oprot)
      args = read_args(iprot, RegisterUserid_args)
      result = RegisterUserid_result.new()
      begin
        result.success = @handler.registerUserid(args.reqSeq, args.userid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerUserid', seqid)
    end

    def process_registerWapDevice(seqid, iprot, oprot)
      args = read_args(iprot, RegisterWapDevice_args)
      result = RegisterWapDevice_result.new()
      begin
        result.success = @handler.registerWapDevice(args.invitationHash, args.guidHash, args.email, args.deviceInfo)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerWapDevice', seqid)
    end

    def process_registerWithExistingSnsIdAndIdentityCredential(seqid, iprot, oprot)
      args = read_args(iprot, RegisterWithExistingSnsIdAndIdentityCredential_args)
      result = RegisterWithExistingSnsIdAndIdentityCredential_result.new()
      begin
        result.success = @handler.registerWithExistingSnsIdAndIdentityCredential(args.identityCredential, args.region, args.udidHash, args.deviceInfo)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerWithExistingSnsIdAndIdentityCredential', seqid)
    end

    def process_registerWithSnsId(seqid, iprot, oprot)
      args = read_args(iprot, RegisterWithSnsId_args)
      result = RegisterWithSnsId_result.new()
      begin
        result.success = @handler.registerWithSnsId(args.snsIdType, args.snsAccessToken, args.region, args.udidHash, args.deviceInfo, args.mid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerWithSnsId', seqid)
    end

    def process_registerWithSnsIdAndIdentityCredential(seqid, iprot, oprot)
      args = read_args(iprot, RegisterWithSnsIdAndIdentityCredential_args)
      result = RegisterWithSnsIdAndIdentityCredential_result.new()
      begin
        result.success = @handler.registerWithSnsIdAndIdentityCredential(args.snsIdType, args.snsAccessToken, args.identityCredential, args.region, args.udidHash, args.deviceInfo)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerWithSnsIdAndIdentityCredential', seqid)
    end

    def process_reissueDeviceCredential(seqid, iprot, oprot)
      args = read_args(iprot, ReissueDeviceCredential_args)
      result = ReissueDeviceCredential_result.new()
      begin
        result.success = @handler.reissueDeviceCredential()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'reissueDeviceCredential', seqid)
    end

    def process_reissueUserTicket(seqid, iprot, oprot)
      args = read_args(iprot, ReissueUserTicket_args)
      result = ReissueUserTicket_result.new()
      begin
        result.success = @handler.reissueUserTicket(args.expirationTime, args.maxUseCount)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'reissueUserTicket', seqid)
    end

    def process_getMessageReadRange(seqid, iprot, oprot)
      args = read_args(iprot, GetMessageReadRange_args)
      result = GetMessageReadRange_result.new()
      begin
        result.success = @handler.getMessageReadRange(args.chatIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getMessageReadRange', seqid)
    end

    def process_rejectGroupInvitation(seqid, iprot, oprot)
      args = read_args(iprot, RejectGroupInvitation_args)
      result = RejectGroupInvitation_result.new()
      begin
        @handler.rejectGroupInvitation(args.reqSeq, args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'rejectGroupInvitation', seqid)
    end

    def process_releaseSession(seqid, iprot, oprot)
      args = read_args(iprot, ReleaseSession_args)
      result = ReleaseSession_result.new()
      begin
        @handler.releaseSession()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'releaseSession', seqid)
    end

    def process_removeAllMessages(seqid, iprot, oprot)
      args = read_args(iprot, RemoveAllMessages_args)
      result = RemoveAllMessages_result.new()
      begin
        @handler.removeAllMessages(args.seq, args.lastMessageId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'removeAllMessages', seqid)
    end

    def process_removeBuddyLocation(seqid, iprot, oprot)
      args = read_args(iprot, RemoveBuddyLocation_args)
      result = RemoveBuddyLocation_result.new()
      begin
        @handler.removeBuddyLocation(args.mid, args.index)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'removeBuddyLocation', seqid)
    end

    def process_removeMessage(seqid, iprot, oprot)
      args = read_args(iprot, RemoveMessage_args)
      result = RemoveMessage_result.new()
      begin
        result.success = @handler.removeMessage(args.messageId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'removeMessage', seqid)
    end

    def process_makeUserAddMyselfAsContact(seqid, iprot, oprot)
      args = read_args(iprot, MakeUserAddMyselfAsContact_args)
      result = MakeUserAddMyselfAsContact_result.new()
      begin
        result.success = @handler.makeUserAddMyselfAsContact(args.contactOwnerMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'makeUserAddMyselfAsContact', seqid)
    end

    def process_removeMessageFromMyHome(seqid, iprot, oprot)
      args = read_args(iprot, RemoveMessageFromMyHome_args)
      result = RemoveMessageFromMyHome_result.new()
      begin
        result.success = @handler.removeMessageFromMyHome(args.messageId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'removeMessageFromMyHome', seqid)
    end

    def process_removeSnsId(seqid, iprot, oprot)
      args = read_args(iprot, RemoveSnsId_args)
      result = RemoveSnsId_result.new()
      begin
        result.success = @handler.removeSnsId(args.snsIdType)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'removeSnsId', seqid)
    end

    def process_report(seqid, iprot, oprot)
      args = read_args(iprot, Report_args)
      result = Report_result.new()
      begin
        @handler.report(args.syncOpRevision, args.category, args.report)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'report', seqid)
    end

    def process_reportContacts(seqid, iprot, oprot)
      args = read_args(iprot, ReportContacts_args)
      result = ReportContacts_result.new()
      begin
        result.success = @handler.reportContacts(args.syncOpRevision, args.category, args.contactReports, args.actionType)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'reportContacts', seqid)
    end

    def process_reportGroups(seqid, iprot, oprot)
      args = read_args(iprot, ReportGroups_args)
      result = ReportGroups_result.new()
      begin
        @handler.reportGroups(args.syncOpRevision, args.groups)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'reportGroups', seqid)
    end

    def process_reportProfile(seqid, iprot, oprot)
      args = read_args(iprot, ReportProfile_args)
      result = ReportProfile_result.new()
      begin
        @handler.reportProfile(args.syncOpRevision, args.profile)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'reportProfile', seqid)
    end

    def process_reportRooms(seqid, iprot, oprot)
      args = read_args(iprot, ReportRooms_args)
      result = ReportRooms_result.new()
      begin
        @handler.reportRooms(args.syncOpRevision, args.rooms)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'reportRooms', seqid)
    end

    def process_findAndAddContactByMetaTag(seqid, iprot, oprot)
      args = read_args(iprot, FindAndAddContactByMetaTag_args)
      result = FindAndAddContactByMetaTag_result.new()
      begin
        result.success = @handler.findAndAddContactByMetaTag(args.reqSeq, args.userid, args.reference)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findAndAddContactByMetaTag', seqid)
    end

    def process_reportSettings(seqid, iprot, oprot)
      args = read_args(iprot, ReportSettings_args)
      result = ReportSettings_result.new()
      begin
        @handler.reportSettings(args.syncOpRevision, args.settings)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'reportSettings', seqid)
    end

    def process_reportSpam(seqid, iprot, oprot)
      args = read_args(iprot, ReportSpam_args)
      result = ReportSpam_result.new()
      begin
        @handler.reportSpam(args.chatMid, args.memberMids, args.spammerReasons, args.senderMids, args.spamMessageIds, args.spamMessages)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'reportSpam', seqid)
    end

    def process_reportSpammer(seqid, iprot, oprot)
      args = read_args(iprot, ReportSpammer_args)
      result = ReportSpammer_result.new()
      begin
        @handler.reportSpammer(args.spammerMid, args.spammerReasons, args.spamMessageIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'reportSpammer', seqid)
    end

    def process_requestAccountPasswordReset(seqid, iprot, oprot)
      args = read_args(iprot, RequestAccountPasswordReset_args)
      result = RequestAccountPasswordReset_result.new()
      begin
        @handler.requestAccountPasswordReset(args.provider, args.identifier, args.locale)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'requestAccountPasswordReset', seqid)
    end

    def process_requestEmailConfirmation(seqid, iprot, oprot)
      args = read_args(iprot, RequestEmailConfirmation_args)
      result = RequestEmailConfirmation_result.new()
      begin
        result.success = @handler.requestEmailConfirmation(args.emailConfirmation)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'requestEmailConfirmation', seqid)
    end

    def process_requestIdentityUnbind(seqid, iprot, oprot)
      args = read_args(iprot, RequestIdentityUnbind_args)
      result = RequestIdentityUnbind_result.new()
      begin
        @handler.requestIdentityUnbind(args.provider, args.identifier)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'requestIdentityUnbind', seqid)
    end

    def process_resendEmailConfirmation(seqid, iprot, oprot)
      args = read_args(iprot, ResendEmailConfirmation_args)
      result = ResendEmailConfirmation_result.new()
      begin
        result.success = @handler.resendEmailConfirmation(args.verifier)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'resendEmailConfirmation', seqid)
    end

    def process_resendPinCode(seqid, iprot, oprot)
      args = read_args(iprot, ResendPinCode_args)
      result = ResendPinCode_result.new()
      begin
        @handler.resendPinCode(args.sessionId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'resendPinCode', seqid)
    end

    def process_resendPinCodeBySMS(seqid, iprot, oprot)
      args = read_args(iprot, ResendPinCodeBySMS_args)
      result = ResendPinCodeBySMS_result.new()
      begin
        @handler.resendPinCodeBySMS(args.sessionId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'resendPinCodeBySMS', seqid)
    end

    def process_sendChatChecked(seqid, iprot, oprot)
      args = read_args(iprot, SendChatChecked_args)
      result = SendChatChecked_result.new()
      begin
        @handler.sendChatChecked(args.seq, args.consumer, args.lastMessageId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendChatChecked', seqid)
    end

    def process_sendMessageAwaitCommit(seqid, iprot, oprot)
      args = read_args(iprot, SendMessageAwaitCommit_args)
      result = SendMessageAwaitCommit_result.new()
      begin
        result.success = @handler.sendMessageAwaitCommit(args.seq, args.message)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendMessageAwaitCommit', seqid)
    end

    def process_sendChatRemoved(seqid, iprot, oprot)
      args = read_args(iprot, SendChatRemoved_args)
      result = SendChatRemoved_result.new()
      begin
        @handler.sendChatRemoved(args.seq, args.consumer, args.lastMessageId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendChatRemoved', seqid)
    end

    def process_sendContentPreviewUpdated(seqid, iprot, oprot)
      args = read_args(iprot, SendContentPreviewUpdated_args)
      result = SendContentPreviewUpdated_result.new()
      begin
        result.success = @handler.sendContentPreviewUpdated(args.esq, args.messageId, args.receiverMids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendContentPreviewUpdated', seqid)
    end

    def process_sendContentReceipt(seqid, iprot, oprot)
      args = read_args(iprot, SendContentReceipt_args)
      result = SendContentReceipt_result.new()
      begin
        @handler.sendContentReceipt(args.seq, args.consumer, args.messageId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendContentReceipt', seqid)
    end

    def process_sendDummyPush(seqid, iprot, oprot)
      args = read_args(iprot, SendDummyPush_args)
      result = SendDummyPush_result.new()
      begin
        @handler.sendDummyPush()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendDummyPush', seqid)
    end

    def process_removeE2EEPublicKey(seqid, iprot, oprot)
      args = read_args(iprot, RemoveE2EEPublicKey_args)
      result = RemoveE2EEPublicKey_result.new()
      begin
        @handler.removeE2EEPublicKey(args.publicKey)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'removeE2EEPublicKey', seqid)
    end

    def process_negotiateE2EEPublicKey(seqid, iprot, oprot)
      args = read_args(iprot, NegotiateE2EEPublicKey_args)
      result = NegotiateE2EEPublicKey_result.new()
      begin
        result.success = @handler.negotiateE2EEPublicKey(args.mid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'negotiateE2EEPublicKey', seqid)
    end

    def process_getE2EEPublicKey(seqid, iprot, oprot)
      args = read_args(iprot, GetE2EEPublicKey_args)
      result = GetE2EEPublicKey_result.new()
      begin
        result.success = @handler.getE2EEPublicKey(args.mid, args.version, args.keyId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getE2EEPublicKey', seqid)
    end

    def process_requestE2EEKeyExchange(seqid, iprot, oprot)
      args = read_args(iprot, RequestE2EEKeyExchange_args)
      result = RequestE2EEKeyExchange_result.new()
      begin
        @handler.requestE2EEKeyExchange(args.reqSeq, args.temporalPublicKey, args.publicKey, args.verifier)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'requestE2EEKeyExchange', seqid)
    end

    def process_getLastE2EEPublicKeys(seqid, iprot, oprot)
      args = read_args(iprot, GetLastE2EEPublicKeys_args)
      result = GetLastE2EEPublicKeys_result.new()
      begin
        result.success = @handler.getLastE2EEPublicKeys(args.chatMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getLastE2EEPublicKeys', seqid)
    end

    def process_registerE2EEPublicKey(seqid, iprot, oprot)
      args = read_args(iprot, RegisterE2EEPublicKey_args)
      result = RegisterE2EEPublicKey_result.new()
      begin
        result.success = @handler.registerE2EEPublicKey(args.reqSeq, args.publicKey)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerE2EEPublicKey', seqid)
    end

    def process_getE2EEPublicKeys(seqid, iprot, oprot)
      args = read_args(iprot, GetE2EEPublicKeys_args)
      result = GetE2EEPublicKeys_result.new()
      begin
        result.success = @handler.getE2EEPublicKeys()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getE2EEPublicKeys', seqid)
    end

    def process_getE2EEPublicKeysEx(seqid, iprot, oprot)
      args = read_args(iprot, GetE2EEPublicKeysEx_args)
      result = GetE2EEPublicKeysEx_result.new()
      begin
        result.success = @handler.getE2EEPublicKeysEx(args.ignoreE2EEStatus)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getE2EEPublicKeysEx', seqid)
    end

    def process_getReadMessageOpsInBulk(seqid, iprot, oprot)
      args = read_args(iprot, GetReadMessageOpsInBulk_args)
      result = GetReadMessageOpsInBulk_result.new()
      begin
        result.success = @handler.getReadMessageOpsInBulk(args.chatIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getReadMessageOpsInBulk', seqid)
    end

    def process_sendEvent(seqid, iprot, oprot)
      args = read_args(iprot, SendEvent_args)
      result = SendEvent_result.new()
      begin
        result.success = @handler.sendEvent(args.seq, args.message)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendEvent', seqid)
    end

    def process_sendMessage(seqid, iprot, oprot)
      args = read_args(iprot, SendMessage_args)
      result = SendMessage_result.new()
      begin
        result.success = @handler.sendMessage(args.seq, args.message)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendMessage', seqid)
    end

    def process_sendMessageIgnored(seqid, iprot, oprot)
      args = read_args(iprot, SendMessageIgnored_args)
      result = SendMessageIgnored_result.new()
      begin
        @handler.sendMessageIgnored(args.seq, args.consumer, args.messageIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendMessageIgnored', seqid)
    end

    def process_sendMessageReceipt(seqid, iprot, oprot)
      args = read_args(iprot, SendMessageReceipt_args)
      result = SendMessageReceipt_result.new()
      begin
        @handler.sendMessageReceipt(args.seq, args.consumer, args.messageIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendMessageReceipt', seqid)
    end

    def process_findContactByMetaTag(seqid, iprot, oprot)
      args = read_args(iprot, FindContactByMetaTag_args)
      result = FindContactByMetaTag_result.new()
      begin
        result.success = @handler.findContactByMetaTag(args.userid, args.reference)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findContactByMetaTag', seqid)
    end

    def process_sendMessageToMyHome(seqid, iprot, oprot)
      args = read_args(iprot, SendMessageToMyHome_args)
      result = SendMessageToMyHome_result.new()
      begin
        result.success = @handler.sendMessageToMyHome(args.seq, args.message)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendMessageToMyHome', seqid)
    end

    def process_setBuddyLocation(seqid, iprot, oprot)
      args = read_args(iprot, SetBuddyLocation_args)
      result = SetBuddyLocation_result.new()
      begin
        @handler.setBuddyLocation(args.mid, args.index, args.location)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'setBuddyLocation', seqid)
    end

    def process_setIdentityCredential(seqid, iprot, oprot)
      args = read_args(iprot, SetIdentityCredential_args)
      result = SetIdentityCredential_result.new()
      begin
        @handler.setIdentityCredential(args.identifier, args.verifier, args.provider)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'setIdentityCredential', seqid)
    end

    def process_setNotificationsEnabled(seqid, iprot, oprot)
      args = read_args(iprot, SetNotificationsEnabled_args)
      result = SetNotificationsEnabled_result.new()
      begin
        @handler.setNotificationsEnabled(args.reqSeq, args.type, args.target, args.enablement)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'setNotificationsEnabled', seqid)
    end

    def process_startUpdateVerification(seqid, iprot, oprot)
      args = read_args(iprot, StartUpdateVerification_args)
      result = StartUpdateVerification_result.new()
      begin
        result.success = @handler.startUpdateVerification(args.region, args.carrier, args.phone, args.udidHash, args.deviceInfo, args.networkCode, args.locale)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'startUpdateVerification', seqid)
    end

    def process_startVerification(seqid, iprot, oprot)
      args = read_args(iprot, StartVerification_args)
      result = StartVerification_result.new()
      begin
        result.success = @handler.startVerification(args.region, args.carrier, args.phone, args.udidHash, args.deviceInfo, args.networkCode, args.mid, args.locale, args.simInfo, args.oldUdidHash)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'startVerification', seqid)
    end

    def process_updateGroupPreferenceAttribute(seqid, iprot, oprot)
      args = read_args(iprot, UpdateGroupPreferenceAttribute_args)
      result = UpdateGroupPreferenceAttribute_result.new()
      begin
        @handler.updateGroupPreferenceAttribute(args.reqSeq, args.groupMid, args.updatedAttrs)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateGroupPreferenceAttribute', seqid)
    end

    def process_createRoomV2(seqid, iprot, oprot)
      args = read_args(iprot, CreateRoomV2_args)
      result = CreateRoomV2_result.new()
      begin
        result.success = @handler.createRoomV2(args.reqSeq, args.contactIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'createRoomV2', seqid)
    end

    def process_storeUpdateProfileAttribute(seqid, iprot, oprot)
      args = read_args(iprot, StoreUpdateProfileAttribute_args)
      result = StoreUpdateProfileAttribute_result.new()
      begin
        @handler.storeUpdateProfileAttribute(args.seq, args.profileAttribute, args.value)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'storeUpdateProfileAttribute', seqid)
    end

    def process_syncContactBySnsIds(seqid, iprot, oprot)
      args = read_args(iprot, SyncContactBySnsIds_args)
      result = SyncContactBySnsIds_result.new()
      begin
        result.success = @handler.syncContactBySnsIds(args.reqSeq, args.modifications)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'syncContactBySnsIds', seqid)
    end

    def process_syncContacts(seqid, iprot, oprot)
      args = read_args(iprot, SyncContacts_args)
      result = SyncContacts_result.new()
      begin
        result.success = @handler.syncContacts(args.reqSeq, args.localContacts)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'syncContacts', seqid)
    end

    def process_trySendMessage(seqid, iprot, oprot)
      args = read_args(iprot, TrySendMessage_args)
      result = TrySendMessage_result.new()
      begin
        result.success = @handler.trySendMessage(args.seq, args.message)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'trySendMessage', seqid)
    end

    def process_getNextMessagesV2(seqid, iprot, oprot)
      args = read_args(iprot, GetNextMessagesV2_args)
      result = GetNextMessagesV2_result.new()
      begin
        result.success = @handler.getNextMessagesV2(args.messageBoxId, args.startMessageId, args.messagesCount)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getNextMessagesV2', seqid)
    end

    def process_getMessageBoxCompactWrapUpV2(seqid, iprot, oprot)
      args = read_args(iprot, GetMessageBoxCompactWrapUpV2_args)
      result = GetMessageBoxCompactWrapUpV2_result.new()
      begin
        result.success = @handler.getMessageBoxCompactWrapUpV2(args.messageBoxId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getMessageBoxCompactWrapUpV2', seqid)
    end

    def process_getRecentMessagesV2(seqid, iprot, oprot)
      args = read_args(iprot, GetRecentMessagesV2_args)
      result = GetRecentMessagesV2_result.new()
      begin
        result.success = @handler.getRecentMessagesV2(args.messageBoxId, args.messagesCount)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getRecentMessagesV2', seqid)
    end

    def process_validateContactsOnBot(seqid, iprot, oprot)
      args = read_args(iprot, ValidateContactsOnBot_args)
      result = ValidateContactsOnBot_result.new()
      begin
        result.success = @handler.validateContactsOnBot(args.contacts)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'validateContactsOnBot', seqid)
    end

    def process_tryFriendRequest(seqid, iprot, oprot)
      args = read_args(iprot, TryFriendRequest_args)
      result = TryFriendRequest_result.new()
      begin
        @handler.tryFriendRequest(args.midOrEMid, args.method, args.friendRequestParams)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'tryFriendRequest', seqid)
    end

    def process_unblockContact(seqid, iprot, oprot)
      args = read_args(iprot, UnblockContact_args)
      result = UnblockContact_result.new()
      begin
        @handler.unblockContact(args.reqSeq, args.id)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'unblockContact', seqid)
    end

    def process_unblockRecommendation(seqid, iprot, oprot)
      args = read_args(iprot, UnblockRecommendation_args)
      result = UnblockRecommendation_result.new()
      begin
        @handler.unblockRecommendation(args.reqSeq, args.id)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'unblockRecommendation', seqid)
    end

    def process_unregisterUserAndDevice(seqid, iprot, oprot)
      args = read_args(iprot, UnregisterUserAndDevice_args)
      result = UnregisterUserAndDevice_result.new()
      begin
        result.success = @handler.unregisterUserAndDevice()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'unregisterUserAndDevice', seqid)
    end

    def process_updateApnsDeviceToken(seqid, iprot, oprot)
      args = read_args(iprot, UpdateApnsDeviceToken_args)
      result = UpdateApnsDeviceToken_result.new()
      begin
        @handler.updateApnsDeviceToken(args.apnsDeviceToken)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateApnsDeviceToken', seqid)
    end

    def process_updateBuddySetting(seqid, iprot, oprot)
      args = read_args(iprot, UpdateBuddySetting_args)
      result = UpdateBuddySetting_result.new()
      begin
        @handler.updateBuddySetting(args.key, args.value)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateBuddySetting', seqid)
    end

    def process_updateC2DMRegistrationId(seqid, iprot, oprot)
      args = read_args(iprot, UpdateC2DMRegistrationId_args)
      result = UpdateC2DMRegistrationId_result.new()
      begin
        @handler.updateC2DMRegistrationId(args.registrationId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateC2DMRegistrationId', seqid)
    end

    def process_updateContactSetting(seqid, iprot, oprot)
      args = read_args(iprot, UpdateContactSetting_args)
      result = UpdateContactSetting_result.new()
      begin
        @handler.updateContactSetting(args.reqSeq, args.mid, args.flag, args.value)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateContactSetting', seqid)
    end

    def process_updateCustomModeSettings(seqid, iprot, oprot)
      args = read_args(iprot, UpdateCustomModeSettings_args)
      result = UpdateCustomModeSettings_result.new()
      begin
        @handler.updateCustomModeSettings(args.customMode, args.paramMap)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateCustomModeSettings', seqid)
    end

    def process_updateDeviceInfo(seqid, iprot, oprot)
      args = read_args(iprot, UpdateDeviceInfo_args)
      result = UpdateDeviceInfo_result.new()
      begin
        @handler.updateDeviceInfo(args.deviceUid, args.deviceInfo)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateDeviceInfo', seqid)
    end

    def process_updateGroup(seqid, iprot, oprot)
      args = read_args(iprot, UpdateGroup_args)
      result = UpdateGroup_result.new()
      begin
        @handler.updateGroup(args.reqSeq, args.group)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateGroup', seqid)
    end

    def process_updateNotificationToken(seqid, iprot, oprot)
      args = read_args(iprot, UpdateNotificationToken_args)
      result = UpdateNotificationToken_result.new()
      begin
        @handler.updateNotificationToken(args.type, args.token)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateNotificationToken', seqid)
    end

    def process_updateNotificationTokenWithBytes(seqid, iprot, oprot)
      args = read_args(iprot, UpdateNotificationTokenWithBytes_args)
      result = UpdateNotificationTokenWithBytes_result.new()
      begin
        @handler.updateNotificationTokenWithBytes(args.type, args.token)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateNotificationTokenWithBytes', seqid)
    end

    def process_updateProfile(seqid, iprot, oprot)
      args = read_args(iprot, UpdateProfile_args)
      result = UpdateProfile_result.new()
      begin
        @handler.updateProfile(args.reqSeq, args.profile)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateProfile', seqid)
    end

    def process_updateProfileAttribute(seqid, iprot, oprot)
      args = read_args(iprot, UpdateProfileAttribute_args)
      result = UpdateProfileAttribute_result.new()
      begin
        @handler.updateProfileAttribute(args.reqSeq, args.attr, args.value)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateProfileAttribute', seqid)
    end

    def process_updateRegion(seqid, iprot, oprot)
      args = read_args(iprot, UpdateRegion_args)
      result = UpdateRegion_result.new()
      begin
        @handler.updateRegion(args.region)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateRegion', seqid)
    end

    def process_updateSettings(seqid, iprot, oprot)
      args = read_args(iprot, UpdateSettings_args)
      result = UpdateSettings_result.new()
      begin
        @handler.updateSettings(args.reqSeq, args.settings)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateSettings', seqid)
    end

    def process_updateSettings2(seqid, iprot, oprot)
      args = read_args(iprot, UpdateSettings2_args)
      result = UpdateSettings2_result.new()
      begin
        result.success = @handler.updateSettings2(args.reqSeq, args.settings)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateSettings2', seqid)
    end

    def process_updateSettingsAttribute(seqid, iprot, oprot)
      args = read_args(iprot, UpdateSettingsAttribute_args)
      result = UpdateSettingsAttribute_result.new()
      begin
        @handler.updateSettingsAttribute(args.reqSeq, args.attr, args.value)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateSettingsAttribute', seqid)
    end

    def process_updateSettingsAttributes(seqid, iprot, oprot)
      args = read_args(iprot, UpdateSettingsAttributes_args)
      result = UpdateSettingsAttributes_result.new()
      begin
        result.success = @handler.updateSettingsAttributes(args.reqSeq, args.attrBitset, args.settings)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateSettingsAttributes', seqid)
    end

    def process_verifyIdentityCredential(seqid, iprot, oprot)
      args = read_args(iprot, VerifyIdentityCredential_args)
      result = VerifyIdentityCredential_result.new()
      begin
        @handler.verifyIdentityCredential(args.identityProvider, args.identifier, args.password)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'verifyIdentityCredential', seqid)
    end

    def process_verifyIdentityCredentialWithResult(seqid, iprot, oprot)
      args = read_args(iprot, VerifyIdentityCredentialWithResult_args)
      result = VerifyIdentityCredentialWithResult_result.new()
      begin
        result.success = @handler.verifyIdentityCredentialWithResult(args.identityCredential)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'verifyIdentityCredentialWithResult', seqid)
    end

    def process_verifyPhone(seqid, iprot, oprot)
      args = read_args(iprot, VerifyPhone_args)
      result = VerifyPhone_result.new()
      begin
        result.success = @handler.verifyPhone(args.sessionId, args.pinCode, args.udidHash)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'verifyPhone', seqid)
    end

    def process_verifyQrcode(seqid, iprot, oprot)
      args = read_args(iprot, VerifyQrcode_args)
      result = VerifyQrcode_result.new()
      begin
        result.success = @handler.verifyQrcode(args.verifier, args.pinCode)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'verifyQrcode', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class GetChatRoomAnnouncementsBulk_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHATROOMMIDS = 2

    FIELDS = {
      CHATROOMMIDS => {:type => ::Thrift::Types::LIST, :name => 'chatRoomMids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChatRoomAnnouncementsBulk_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::ChatRoomAnnouncement}}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChatRoomAnnouncements_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHATROOMMID = 2

    FIELDS = {
      CHATROOMMID => {:type => ::Thrift::Types::STRING, :name => 'chatRoomMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChatRoomAnnouncements_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ChatRoomAnnouncement}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateChatRoomAnnouncement_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    CHATROOMMID = 2
    TYPE = 3
    CONTENTS = 4

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      CHATROOMMID => {:type => ::Thrift::Types::STRING, :name => 'chatRoomMid'},
      TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::ChatRoomAnnouncementType},
      CONTENTS => {:type => ::Thrift::Types::STRUCT, :name => 'contents', :class => ::ChatRoomAnnouncementContents}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @type.nil? || ::ChatRoomAnnouncementType::VALID_VALUES.include?(@type)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateChatRoomAnnouncement_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ChatRoomAnnouncement},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveChatRoomAnnouncement_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    CHATROOMMID = 2
    ANNOUNCEMENTSEQ = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      CHATROOMMID => {:type => ::Thrift::Types::STRING, :name => 'chatRoomMid'},
      ANNOUNCEMENTSEQ => {:type => ::Thrift::Types::I64, :name => 'announcementSeq'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveChatRoomAnnouncement_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnsendMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    MESSAGEID = 2

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnsendMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupWithoutMembers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPID = 2

    FIELDS = {
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupWithoutMembers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Group},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RequestResendMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    SENDERMID = 2
    MESSAGEID = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      SENDERMID => {:type => ::Thrift::Types::STRING, :name => 'senderMid'},
      MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RequestResendMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RespondResendMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    RECEIVERMID = 2
    ORIGINALMESSAGEID = 3
    RESENDMESSAGE = 4
    ERRORCODE = 5

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      RECEIVERMID => {:type => ::Thrift::Types::STRING, :name => 'receiverMid'},
      ORIGINALMESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'originalMessageId'},
      RESENDMESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'resendMessage', :class => ::Message},
      ERRORCODE => {:type => ::Thrift::Types::I32, :name => 'errorCode', :enum_class => ::ErrorCode}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @errorCode.nil? || ::ErrorCode::VALID_VALUES.include?(@errorCode)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field errorCode!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RespondResendMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcceptGroupInvitation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUPID = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcceptGroupInvitation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcceptGroupInvitationByTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUPMID = 2
    TICKETID = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUPMID => {:type => ::Thrift::Types::STRING, :name => 'GroupMid'},
      TICKETID => {:type => ::Thrift::Types::STRING, :name => 'ticketId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcceptGroupInvitationByTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcceptProximityMatches_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SESSIONID = 2
    IDS = 3

    FIELDS = {
      SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'},
      IDS => {:type => ::Thrift::Types::SET, :name => 'ids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcceptProximityMatches_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcquireCallRoute_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TO = 2

    FIELDS = {
      TO => {:type => ::Thrift::Types::STRING, :name => 'to'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcquireCallRoute_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcquireCallTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TO = 2

    FIELDS = {
      TO => {:type => ::Thrift::Types::STRING, :name => 'to'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcquireCallTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcquireEncryptedAccessToken_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FEATURETYPE = 2

    FIELDS = {
      FEATURETYPE => {:type => ::Thrift::Types::I32, :name => 'featureType', :enum_class => ::FeatureType}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @featureType.nil? || ::FeatureType::VALID_VALUES.include?(@featureType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field featureType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcquireEncryptedAccessToken_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddSnsId_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SNSIDTYPE = 2
    SNSACCESSTOKEN = 3

    FIELDS = {
      SNSIDTYPE => {:type => ::Thrift::Types::I32, :name => 'snsIdType', :enum_class => ::SnsIdType},
      SNSACCESSTOKEN => {:type => ::Thrift::Types::STRING, :name => 'snsAccessToken'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @snsIdType.nil? || ::SnsIdType::VALID_VALUES.include?(@snsIdType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field snsIdType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddSnsId_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BlockContact_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ID = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BlockContact_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BlockRecommendation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ID = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BlockRecommendation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CancelGroupInvitation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUPID = 2
    CONTACTIDS = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'},
      CONTACTIDS => {:type => ::Thrift::Types::LIST, :name => 'contactIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CancelGroupInvitation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ChangeVerificationMethod_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SESSIONID = 2
    METHOD = 3

    FIELDS = {
      SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'},
      METHOD => {:type => ::Thrift::Types::I32, :name => 'method', :enum_class => ::VerificationMethod}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @method.nil? || ::VerificationMethod::VALID_VALUES.include?(@method)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field method!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ChangeVerificationMethod_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::VerificationSessionData},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ClearIdentityCredential_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ClearIdentityCredential_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ClearMessageBox_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELID = 2
    MESSAGEBOXID = 3

    FIELDS = {
      CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
      MESSAGEBOXID => {:type => ::Thrift::Types::STRING, :name => 'messageBoxId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ClearMessageBox_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CloseProximityMatch_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SESSIONID = 2

    FIELDS = {
      SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CloseProximityMatch_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CommitSendMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    MESSAGEID = 2
    RECEIVERMIDS = 3

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'},
      RECEIVERMIDS => {:type => ::Thrift::Types::LIST, :name => 'receiverMids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CommitSendMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CommitSendMessages_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    MESSAGEIDS = 2
    RECEIVERMIDS = 3

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      MESSAGEIDS => {:type => ::Thrift::Types::LIST, :name => 'messageIds', :element => {:type => ::Thrift::Types::STRING}},
      RECEIVERMIDS => {:type => ::Thrift::Types::LIST, :name => 'receiverMids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CommitSendMessages_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CommitUpdateProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    ATTRS = 2
    RECEIVERMIDS = 3

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      ATTRS => {:type => ::Thrift::Types::LIST, :name => 'attrs', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ProfileAttribute}},
      RECEIVERMIDS => {:type => ::Thrift::Types::LIST, :name => 'receiverMids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CommitUpdateProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConfirmEmail_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VERIFIER = 2
    PINCODE = 3

    FIELDS = {
      VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'},
      PINCODE => {:type => ::Thrift::Types::STRING, :name => 'pinCode'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConfirmEmail_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateGroup_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    NAME = 2
    CONTACTIDS = 3

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
      CONTACTIDS => {:type => ::Thrift::Types::LIST, :name => 'contactIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateGroup_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Group},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateQrcodeBase64Image_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    URL = 2
    CHARACTERSET = 3
    IMAGESIZE = 4
    X = 5
    Y = 6
    WIDTH = 7
    HEIGHT = 8

    FIELDS = {
      URL => {:type => ::Thrift::Types::STRING, :name => 'url'},
      CHARACTERSET => {:type => ::Thrift::Types::STRING, :name => 'characterSet'},
      IMAGESIZE => {:type => ::Thrift::Types::I32, :name => 'imageSize'},
      X => {:type => ::Thrift::Types::I32, :name => 'x'},
      Y => {:type => ::Thrift::Types::I32, :name => 'y'},
      WIDTH => {:type => ::Thrift::Types::I32, :name => 'width'},
      HEIGHT => {:type => ::Thrift::Types::I32, :name => 'height'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateQrcodeBase64Image_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateRoom_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    CONTACTIDS = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      CONTACTIDS => {:type => ::Thrift::Types::LIST, :name => 'contactIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateRoom_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Room},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateSession_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateSession_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchAnnouncements_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LASTFETCHEDINDEX = 2

    FIELDS = {
      LASTFETCHEDINDEX => {:type => ::Thrift::Types::I32, :name => 'lastFetchedIndex'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchAnnouncements_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Announcement}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchMessages_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LOCALTS = 2
    COUNT = 3

    FIELDS = {
      LOCALTS => {:type => ::Thrift::Types::I64, :name => 'localTs'},
      COUNT => {:type => ::Thrift::Types::I32, :name => 'count'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchMessages_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Message}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchOperations_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LOCALREV = 2
    COUNT = 3

    FIELDS = {
      LOCALREV => {:type => ::Thrift::Types::I64, :name => 'localRev'},
      COUNT => {:type => ::Thrift::Types::I32, :name => 'count'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchOperations_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Operation}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ShouldSyncException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchOps_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LOCALREV = 2
    COUNT = 3
    GLOBALREV = 4
    INDIVIDUALREV = 5

    FIELDS = {
      LOCALREV => {:type => ::Thrift::Types::I64, :name => 'localRev'},
      COUNT => {:type => ::Thrift::Types::I32, :name => 'count'},
      GLOBALREV => {:type => ::Thrift::Types::I64, :name => 'globalRev'},
      INDIVIDUALREV => {:type => ::Thrift::Types::I64, :name => 'individualRev'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchOps_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Operation}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ShouldSyncException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByEmail_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    EMAILS = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      EMAILS => {:type => ::Thrift::Types::SET, :name => 'emails', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByEmail_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByMid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    MID = 2
    TYPE = 3
    REFERENCE = 4

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
      TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::ContactType},
      REFERENCE => {:type => ::Thrift::Types::STRING, :name => 'reference'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @type.nil? || ::ContactType::VALID_VALUES.include?(@type)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByMid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindGroupByTicketV2_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TICKETID = 1

    FIELDS = {
      TICKETID => {:type => ::Thrift::Types::STRING, :name => 'ticketId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindGroupByTicketV2_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Group},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByPhone_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    PHONES = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      PHONES => {:type => ::Thrift::Types::SET, :name => 'phones', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByPhone_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFriendRequests_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DIRECTION = 1
    LASTSEENSEQID = 2

    FIELDS = {
      DIRECTION => {:type => ::Thrift::Types::I32, :name => 'direction', :enum_class => ::FriendRequestDirection},
      LASTSEENSEQID => {:type => ::Thrift::Types::I64, :name => 'lastSeenSeqId'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @direction.nil? || ::FriendRequestDirection::VALID_VALUES.include?(@direction)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field direction!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFriendRequests_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::FriendRequest}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveFriendRequest_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DIRECTION = 1
    MIDOREMID = 2

    FIELDS = {
      DIRECTION => {:type => ::Thrift::Types::I32, :name => 'direction', :enum_class => ::FriendRequestDirection},
      MIDOREMID => {:type => ::Thrift::Types::STRING, :name => 'midOrEMid'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @direction.nil? || ::FriendRequestDirection::VALID_VALUES.include?(@direction)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field direction!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveFriendRequest_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByUserid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    USERID = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByUserid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindContactByUserid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERID = 2

    FIELDS = {
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindContactByUserid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Contact},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindContactByUserTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TICKETIDWITHTAG = 2

    FIELDS = {
      TICKETIDWITHTAG => {:type => ::Thrift::Types::STRING, :name => 'ticketIdWithTag'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindContactByUserTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Contact},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindContactsByEmail_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EMAILS = 2

    FIELDS = {
      EMAILS => {:type => ::Thrift::Types::SET, :name => 'emails', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindContactsByEmail_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindContactsByPhone_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PHONES = 2

    FIELDS = {
      PHONES => {:type => ::Thrift::Types::SET, :name => 'phones', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindContactsByPhone_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindSnsIdUserStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SNSIDTYPE = 2
    SNSACCESSTOKEN = 3
    UDIDHASH = 4

    FIELDS = {
      SNSIDTYPE => {:type => ::Thrift::Types::I32, :name => 'snsIdType', :enum_class => ::SnsIdType},
      SNSACCESSTOKEN => {:type => ::Thrift::Types::STRING, :name => 'snsAccessToken'},
      UDIDHASH => {:type => ::Thrift::Types::STRING, :name => 'udidHash'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @snsIdType.nil? || ::SnsIdType::VALID_VALUES.include?(@snsIdType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field snsIdType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindSnsIdUserStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SnsIdUserStatus},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FinishUpdateVerification_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SESSIONID = 2

    FIELDS = {
      SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FinishUpdateVerification_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GenerateUserTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EXPIRATIONTIME = 3
    MAXUSECOUNT = 4

    FIELDS = {
      EXPIRATIONTIME => {:type => ::Thrift::Types::I64, :name => 'expirationTime'},
      MAXUSECOUNT => {:type => ::Thrift::Types::I32, :name => 'maxUseCount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GenerateUserTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Ticket},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DestroyMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    CHATID = 2
    MESSAGEID = 3
    SESSIONID = 4

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      CHATID => {:type => ::Thrift::Types::STRING, :name => 'chatId'},
      MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'},
      SESSIONID => {:type => ::Thrift::Types::BYTE, :name => 'sessionId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DestroyMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAcceptedProximityMatches_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SESSIONID = 2

    FIELDS = {
      SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAcceptedProximityMatches_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetActiveBuddySubscriberIds_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetActiveBuddySubscriberIds_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllContactIds_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllContactIds_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAuthQrcode_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEEPLOGGEDIN = 2
    SYSTEMNAME = 3

    FIELDS = {
      KEEPLOGGEDIN => {:type => ::Thrift::Types::BOOL, :name => 'keepLoggedIn'},
      SYSTEMNAME => {:type => ::Thrift::Types::STRING, :name => 'systemName'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAuthQrcode_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::AuthQrcode},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBlockedContactIds_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBlockedContactIds_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterWithPhoneNumber_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SESSIONID = 2
    MIGRATIONPINCODESESSIONID = 3

    FIELDS = {
      SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'},
      MIGRATIONPINCODESESSIONID => {:type => ::Thrift::Types::STRING, :name => 'migrationPincodeSessionId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterWithPhoneNumber_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::RegisterWithPhoneNumberResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterWithPhoneNumberAndPassword_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SESSIONID = 2
    KEYNM = 3
    ENCRYPTED = 4

    FIELDS = {
      SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'},
      KEYNM => {:type => ::Thrift::Types::STRING, :name => 'keynm'},
      ENCRYPTED => {:type => ::Thrift::Types::STRING, :name => 'encrypted'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterWithPhoneNumberAndPassword_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::RegisterWithPhoneNumberResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAnalyticsInfo_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAnalyticsInfo_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::AnalyticsInfo},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportClientStatistics_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    CATEGORY = 2
    COUNT = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      CATEGORY => {:type => ::Thrift::Types::I32, :name => 'category', :enum_class => ::ReportCategory},
      COUNT => {:type => ::Thrift::Types::I32, :name => 'count'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @category.nil? || ::ReportCategory::VALID_VALUES.include?(@category)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field category!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportClientStatistics_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyPhoneNumberForLogin_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VERIFIERFROMPHONE = 2
    PINCODEFORPHONE = 3
    VERIFIERFROMLOGIN = 4

    FIELDS = {
      VERIFIERFROMPHONE => {:type => ::Thrift::Types::STRING, :name => 'verifierFromPhone'},
      PINCODEFORPHONE => {:type => ::Thrift::Types::STRING, :name => 'pinCodeForPhone'},
      VERIFIERFROMLOGIN => {:type => ::Thrift::Types::STRING, :name => 'verifierFromLogin'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyPhoneNumberForLogin_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyPhoneNumber_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SESSIONID = 2
    PINCODE = 3
    UDIDHASH = 4
    MIGRATIONPINCODESESSIONID = 5
    OLDUDIDHASH = 6

    FIELDS = {
      SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'},
      PINCODE => {:type => ::Thrift::Types::STRING, :name => 'pinCode'},
      UDIDHASH => {:type => ::Thrift::Types::STRING, :name => 'udidHash'},
      MIGRATIONPINCODESESSIONID => {:type => ::Thrift::Types::STRING, :name => 'migrationPincodeSessionId'},
      OLDUDIDHASH => {:type => ::Thrift::Types::STRING, :name => 'oldUdidHash'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyPhoneNumber_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PhoneVerificationResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBlockedContactIdsByRange_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    START = 2
    COUNT = 3

    FIELDS = {
      START => {:type => ::Thrift::Types::I32, :name => 'start'},
      COUNT => {:type => ::Thrift::Types::I32, :name => 'count'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBlockedContactIdsByRange_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBlockedRecommendationIds_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBlockedRecommendationIds_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBuddyBlockerIds_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBuddyBlockerIds_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBuddyLocation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MID = 2
    INDEX = 3

    FIELDS = {
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
      INDEX => {:type => ::Thrift::Types::I32, :name => 'index'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBuddyLocation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Geolocation},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCompactContactsModifiedSince_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TIMESTAMP = 2

    FIELDS = {
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCompactContactsModifiedSince_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CompactContact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCompactGroup_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPID = 2

    FIELDS = {
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCompactGroup_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Group},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCompactRoom_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ROOMID = 2

    FIELDS = {
      ROOMID => {:type => ::Thrift::Types::STRING, :name => 'roomId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCompactRoom_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Room},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContact_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 2

    FIELDS = {
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContact_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Contact},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContacts_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDS = 2

    FIELDS = {
      IDS => {:type => ::Thrift::Types::LIST, :name => 'ids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContacts_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContactWithFriendRequestStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 2

    FIELDS = {
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContactWithFriendRequestStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Contact},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCountryWithRequestIp_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCountryWithRequestIp_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFavoriteMids_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFavoriteMids_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroup_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPID = 2

    FIELDS = {
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroup_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Group},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupIdsInvited_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupIdsInvited_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupIdsJoined_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupIdsJoined_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroups_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPIDS = 2

    FIELDS = {
      GROUPIDS => {:type => ::Thrift::Types::LIST, :name => 'groupIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroups_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Group}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetHiddenContactMids_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetHiddenContactMids_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetIdentityIdentifier_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetIdentityIdentifier_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLastAnnouncementIndex_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLastAnnouncementIndex_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLastOpRevision_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLastOpRevision_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSuggestRevisions_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSuggestRevisions_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SuggestDictionaryRevisions},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPreviousMessagesV2WithReadCount_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MESSAGEBOXID = 2
    ENDMESSAGEID = 3
    MESSAGESCOUNT = 4

    FIELDS = {
      MESSAGEBOXID => {:type => ::Thrift::Types::STRING, :name => 'messageBoxId'},
      ENDMESSAGEID => {:type => ::Thrift::Types::STRUCT, :name => 'endMessageId', :class => ::MessageBoxV2MessageId},
      MESSAGESCOUNT => {:type => ::Thrift::Types::I32, :name => 'messagesCount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPreviousMessagesV2WithReadCount_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Message}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageBox_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELID = 2
    MESSAGEBOXID = 3
    LASTMESSAGESCOUNT = 4

    FIELDS = {
      CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
      MESSAGEBOXID => {:type => ::Thrift::Types::STRING, :name => 'messageBoxId'},
      LASTMESSAGESCOUNT => {:type => ::Thrift::Types::I32, :name => 'lastMessagesCount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageBox_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TMessageBox},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageBoxCompactWrapUp_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MID = 2

    FIELDS = {
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageBoxCompactWrapUp_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TMessageBoxWrapUp},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageBoxCompactWrapUpList_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    START = 2
    MESSAGEBOXCOUNT = 3

    FIELDS = {
      START => {:type => ::Thrift::Types::I32, :name => 'start'},
      MESSAGEBOXCOUNT => {:type => ::Thrift::Types::I32, :name => 'messageBoxCount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageBoxCompactWrapUpList_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TMessageBoxWrapUpResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageBoxList_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELID = 2
    LASTMESSAGESCOUNT = 3

    FIELDS = {
      CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
      LASTMESSAGESCOUNT => {:type => ::Thrift::Types::I32, :name => 'lastMessagesCount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageBoxList_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::TMessageBox}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageBoxListByStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELID = 2
    LASTMESSAGESCOUNT = 3
    STATUS = 4

    FIELDS = {
      CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
      LASTMESSAGESCOUNT => {:type => ::Thrift::Types::I32, :name => 'lastMessagesCount'},
      STATUS => {:type => ::Thrift::Types::I32, :name => 'status'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageBoxListByStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::TMessageBox}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageBoxWrapUp_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MID = 2

    FIELDS = {
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageBoxWrapUp_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TMessageBoxWrapUp},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageBoxWrapUpList_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    START = 2
    MESSAGEBOXCOUNT = 3

    FIELDS = {
      START => {:type => ::Thrift::Types::I32, :name => 'start'},
      MESSAGEBOXCOUNT => {:type => ::Thrift::Types::I32, :name => 'messageBoxCount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageBoxWrapUpList_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TMessageBoxWrapUpResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessagesBySequenceNumber_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELID = 2
    MESSAGEBOXID = 3
    STARTSEQ = 4
    ENDSEQ = 5

    FIELDS = {
      CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
      MESSAGEBOXID => {:type => ::Thrift::Types::STRING, :name => 'messageBoxId'},
      STARTSEQ => {:type => ::Thrift::Types::I64, :name => 'startSeq'},
      ENDSEQ => {:type => ::Thrift::Types::I64, :name => 'endSeq'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessagesBySequenceNumber_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Message}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNextMessages_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MESSAGEBOXID = 2
    STARTSEQ = 3
    MESSAGESCOUNT = 4

    FIELDS = {
      MESSAGEBOXID => {:type => ::Thrift::Types::STRING, :name => 'messageBoxId'},
      STARTSEQ => {:type => ::Thrift::Types::I64, :name => 'startSeq'},
      MESSAGESCOUNT => {:type => ::Thrift::Types::I32, :name => 'messagesCount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNextMessages_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Message}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNotificationPolicy_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CARRIER = 2

    FIELDS = {
      CARRIER => {:type => ::Thrift::Types::I32, :name => 'carrier', :enum_class => ::CarrierCode}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @carrier.nil? || ::CarrierCode::VALID_VALUES.include?(@carrier)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field carrier!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNotificationPolicy_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I32, :enum_class => ::NotificationType}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPreviousMessages_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MESSAGEBOXID = 2
    ENDSEQ = 3
    MESSAGESCOUNT = 4

    FIELDS = {
      MESSAGEBOXID => {:type => ::Thrift::Types::STRING, :name => 'messageBoxId'},
      ENDSEQ => {:type => ::Thrift::Types::I64, :name => 'endSeq'},
      MESSAGESCOUNT => {:type => ::Thrift::Types::I32, :name => 'messagesCount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPreviousMessages_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Message}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Profile},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProximityMatchCandidateList_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SESSIONID = 2

    FIELDS = {
      SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProximityMatchCandidateList_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ProximityMatchCandidateResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProximityMatchCandidates_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SESSIONID = 2

    FIELDS = {
      SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProximityMatchCandidates_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRecentMessages_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MESSAGEBOXID = 2
    MESSAGESCOUNT = 3

    FIELDS = {
      MESSAGEBOXID => {:type => ::Thrift::Types::STRING, :name => 'messageBoxId'},
      MESSAGESCOUNT => {:type => ::Thrift::Types::I32, :name => 'messagesCount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRecentMessages_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Message}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRecommendationIds_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRecommendationIds_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRoom_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ROOMID = 2

    FIELDS = {
      ROOMID => {:type => ::Thrift::Types::STRING, :name => 'roomId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRoom_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Room},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRSAKeyInfo_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PROVIDER = 2

    FIELDS = {
      PROVIDER => {:type => ::Thrift::Types::I32, :name => 'provider', :enum_class => ::IdentityProvider}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @provider.nil? || ::IdentityProvider::VALID_VALUES.include?(@provider)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field provider!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRSAKeyInfo_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::RSAKey},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetServerTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetServerTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSessions_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSessions_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::LoginSession}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSettings_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSettings_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Settings},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupsV2_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPIDS = 2

    FIELDS = {
      GROUPIDS => {:type => ::Thrift::Types::LIST, :name => 'groupIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupsV2_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Group}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSettingsAttributes_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ATTRBITSET = 2

    FIELDS = {
      ATTRBITSET => {:type => ::Thrift::Types::I32, :name => 'attrBitset'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSettingsAttributes_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Settings},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSystemConfiguration_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSystemConfiguration_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SystemConfiguration},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Ticket},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetWapInvitation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INVITATIONHASH = 2

    FIELDS = {
      INVITATIONHASH => {:type => ::Thrift::Types::STRING, :name => 'invitationHash'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetWapInvitation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::WapInvitation},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InvalidateUserTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InvalidateUserTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteFriendsBySms_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PHONENUMBERLIST = 2

    FIELDS = {
      PHONENUMBERLIST => {:type => ::Thrift::Types::LIST, :name => 'phoneNumberList', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteFriendsBySms_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteIntoGroup_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUPID = 2
    CONTACTIDS = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'},
      CONTACTIDS => {:type => ::Thrift::Types::LIST, :name => 'contactIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteIntoGroup_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteIntoRoom_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ROOMID = 2
    CONTACTIDS = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ROOMID => {:type => ::Thrift::Types::STRING, :name => 'roomId'},
      CONTACTIDS => {:type => ::Thrift::Types::LIST, :name => 'contactIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteIntoRoom_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteViaEmail_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    EMAIL = 2
    NAME = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email'},
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteViaEmail_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsIdentityIdentifierAvailable_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PROVIDER = 3
    IDENTIFIER = 2

    FIELDS = {
      PROVIDER => {:type => ::Thrift::Types::I32, :name => 'provider', :enum_class => ::IdentityProvider},
      IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'identifier'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @provider.nil? || ::IdentityProvider::VALID_VALUES.include?(@provider)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field provider!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsIdentityIdentifierAvailable_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsUseridAvailable_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERID = 2

    FIELDS = {
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsUseridAvailable_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class KickoutFromGroup_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUPID = 2
    CONTACTIDS = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'},
      CONTACTIDS => {:type => ::Thrift::Types::LIST, :name => 'contactIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class KickoutFromGroup_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReissueGroupTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPMID = 1

    FIELDS = {
      GROUPMID => {:type => ::Thrift::Types::STRING, :name => 'groupMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReissueGroupTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindGroupByTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TICKETID = 1

    FIELDS = {
      TICKETID => {:type => ::Thrift::Types::STRING, :name => 'ticketId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindGroupByTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Group},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LeaveGroup_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUPID = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LeaveGroup_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LeaveRoom_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ROOMID = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ROOMID => {:type => ::Thrift::Types::STRING, :name => 'roomId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LeaveRoom_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LoginWithIdentityCredential_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDENTITYPROVIDER = 8
    IDENTIFIER = 3
    PASSWORD = 4
    KEEPLOGGEDIN = 5
    ACCESSLOCATION = 6
    SYSTEMNAME = 7
    CERTIFICATE = 9

    FIELDS = {
      IDENTITYPROVIDER => {:type => ::Thrift::Types::I32, :name => 'identityProvider', :enum_class => ::IdentityProvider},
      IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'identifier'},
      PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'},
      KEEPLOGGEDIN => {:type => ::Thrift::Types::BOOL, :name => 'keepLoggedIn'},
      ACCESSLOCATION => {:type => ::Thrift::Types::STRING, :name => 'accessLocation'},
      SYSTEMNAME => {:type => ::Thrift::Types::STRING, :name => 'systemName'},
      CERTIFICATE => {:type => ::Thrift::Types::STRING, :name => 'certificate'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @identityProvider.nil? || ::IdentityProvider::VALID_VALUES.include?(@identityProvider)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field identityProvider!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LoginWithIdentityCredential_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LoginWithIdentityCredentialForCertificate_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDENTITYPROVIDER = 8
    IDENTIFIER = 3
    PASSWORD = 4
    KEEPLOGGEDIN = 5
    ACCESSLOCATION = 6
    SYSTEMNAME = 7
    CERTIFICATE = 9

    FIELDS = {
      IDENTITYPROVIDER => {:type => ::Thrift::Types::I32, :name => 'identityProvider', :enum_class => ::IdentityProvider},
      IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'identifier'},
      PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'},
      KEEPLOGGEDIN => {:type => ::Thrift::Types::BOOL, :name => 'keepLoggedIn'},
      ACCESSLOCATION => {:type => ::Thrift::Types::STRING, :name => 'accessLocation'},
      SYSTEMNAME => {:type => ::Thrift::Types::STRING, :name => 'systemName'},
      CERTIFICATE => {:type => ::Thrift::Types::STRING, :name => 'certificate'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @identityProvider.nil? || ::IdentityProvider::VALID_VALUES.include?(@identityProvider)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field identityProvider!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LoginWithIdentityCredentialForCertificate_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::LoginResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LoginWithVerifier_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VERIFIER = 3

    FIELDS = {
      VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LoginWithVerifier_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LoginWithVerifierForCerificate_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VERIFIER = 3

    FIELDS = {
      VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LoginWithVerifierForCerificate_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::LoginResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LoginWithVerifierForCertificate_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VERIFIER = 3

    FIELDS = {
      VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LoginWithVerifierForCertificate_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::LoginResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Logout_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Logout_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LogoutSession_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TOKENKEY = 2

    FIELDS = {
      TOKENKEY => {:type => ::Thrift::Types::STRING, :name => 'tokenKey'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LogoutSession_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Noop_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Noop_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifiedRedirect_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PARAMMAP = 2

    FIELDS = {
      PARAMMAP => {:type => ::Thrift::Types::MAP, :name => 'paramMap', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifiedRedirect_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyBuddyOnAir_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    RECEIVERMIDS = 2

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      RECEIVERMIDS => {:type => ::Thrift::Types::LIST, :name => 'receiverMids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyBuddyOnAir_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyIndividualEvent_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NOTIFICATIONSTATUS = 2
    RECEIVERMIDS = 3

    FIELDS = {
      NOTIFICATIONSTATUS => {:type => ::Thrift::Types::I32, :name => 'notificationStatus', :enum_class => ::NotificationStatus},
      RECEIVERMIDS => {:type => ::Thrift::Types::LIST, :name => 'receiverMids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @notificationStatus.nil? || ::NotificationStatus::VALID_VALUES.include?(@notificationStatus)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field notificationStatus!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyIndividualEvent_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyInstalled_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    UDIDHASH = 2
    APPLICATIONTYPEWITHEXTENSIONS = 3

    FIELDS = {
      UDIDHASH => {:type => ::Thrift::Types::STRING, :name => 'udidHash'},
      APPLICATIONTYPEWITHEXTENSIONS => {:type => ::Thrift::Types::STRING, :name => 'applicationTypeWithExtensions'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyInstalled_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyRegistrationComplete_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    UDIDHASH = 2
    APPLICATIONTYPEWITHEXTENSIONS = 3

    FIELDS = {
      UDIDHASH => {:type => ::Thrift::Types::STRING, :name => 'udidHash'},
      APPLICATIONTYPEWITHEXTENSIONS => {:type => ::Thrift::Types::STRING, :name => 'applicationTypeWithExtensions'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyRegistrationComplete_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifySleep_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LASTREV = 2
    BADGE = 3

    FIELDS = {
      LASTREV => {:type => ::Thrift::Types::I64, :name => 'lastRev'},
      BADGE => {:type => ::Thrift::Types::I32, :name => 'badge'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifySleep_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyUpdated_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LASTREV = 2
    DEVICEINFO = 3

    FIELDS = {
      LASTREV => {:type => ::Thrift::Types::I64, :name => 'lastRev'},
      DEVICEINFO => {:type => ::Thrift::Types::STRUCT, :name => 'deviceInfo', :class => ::DeviceInfo}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyUpdated_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class OpenProximityMatch_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LOCATION = 2

    FIELDS = {
      LOCATION => {:type => ::Thrift::Types::STRUCT, :name => 'location', :class => ::Location}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class OpenProximityMatch_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterBuddyUser_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BUDDYID = 2
    REGISTRARPASSWORD = 3

    FIELDS = {
      BUDDYID => {:type => ::Thrift::Types::STRING, :name => 'buddyId'},
      REGISTRARPASSWORD => {:type => ::Thrift::Types::STRING, :name => 'registrarPassword'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterBuddyUser_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterBuddyUserid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 2
    USERID = 3

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterBuddyUserid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterDevice_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SESSIONID = 2

    FIELDS = {
      SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterDevice_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterDeviceWithIdentityCredential_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SESSIONID = 2
    PROVIDER = 5
    IDENTIFIER = 3
    VERIFIER = 4

    FIELDS = {
      SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'},
      PROVIDER => {:type => ::Thrift::Types::I32, :name => 'provider', :enum_class => ::IdentityProvider},
      IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'identifier'},
      VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @provider.nil? || ::IdentityProvider::VALID_VALUES.include?(@provider)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field provider!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterDeviceWithIdentityCredential_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterDeviceWithoutPhoneNumber_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REGION = 2
    UDIDHASH = 3
    DEVICEINFO = 4

    FIELDS = {
      REGION => {:type => ::Thrift::Types::STRING, :name => 'region'},
      UDIDHASH => {:type => ::Thrift::Types::STRING, :name => 'udidHash'},
      DEVICEINFO => {:type => ::Thrift::Types::STRUCT, :name => 'deviceInfo', :class => ::DeviceInfo}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterDeviceWithoutPhoneNumber_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterDeviceWithoutPhoneNumberWithIdentityCredential_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REGION = 2
    UDIDHASH = 3
    DEVICEINFO = 4
    PROVIDER = 5
    IDENTIFIER = 6
    VERIFIER = 7
    MID = 8
    MIGRATIONPINCODESESSIONID = 9

    FIELDS = {
      REGION => {:type => ::Thrift::Types::STRING, :name => 'region'},
      UDIDHASH => {:type => ::Thrift::Types::STRING, :name => 'udidHash'},
      DEVICEINFO => {:type => ::Thrift::Types::STRUCT, :name => 'deviceInfo', :class => ::DeviceInfo},
      PROVIDER => {:type => ::Thrift::Types::I32, :name => 'provider', :enum_class => ::IdentityProvider},
      IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'identifier'},
      VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'},
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
      MIGRATIONPINCODESESSIONID => {:type => ::Thrift::Types::STRING, :name => 'migrationPincodeSessionId'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @provider.nil? || ::IdentityProvider::VALID_VALUES.include?(@provider)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field provider!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterDeviceWithoutPhoneNumberWithIdentityCredential_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterUserid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    USERID = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterUserid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterWapDevice_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INVITATIONHASH = 2
    GUIDHASH = 3
    EMAIL = 4
    DEVICEINFO = 5

    FIELDS = {
      INVITATIONHASH => {:type => ::Thrift::Types::STRING, :name => 'invitationHash'},
      GUIDHASH => {:type => ::Thrift::Types::STRING, :name => 'guidHash'},
      EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email'},
      DEVICEINFO => {:type => ::Thrift::Types::STRUCT, :name => 'deviceInfo', :class => ::DeviceInfo}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterWapDevice_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterWithExistingSnsIdAndIdentityCredential_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDENTITYCREDENTIAL = 2
    REGION = 3
    UDIDHASH = 4
    DEVICEINFO = 5

    FIELDS = {
      IDENTITYCREDENTIAL => {:type => ::Thrift::Types::STRUCT, :name => 'identityCredential', :class => ::IdentityCredential},
      REGION => {:type => ::Thrift::Types::STRING, :name => 'region'},
      UDIDHASH => {:type => ::Thrift::Types::STRING, :name => 'udidHash'},
      DEVICEINFO => {:type => ::Thrift::Types::STRUCT, :name => 'deviceInfo', :class => ::DeviceInfo}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterWithExistingSnsIdAndIdentityCredential_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterWithSnsId_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SNSIDTYPE = 2
    SNSACCESSTOKEN = 3
    REGION = 4
    UDIDHASH = 5
    DEVICEINFO = 6
    MID = 7

    FIELDS = {
      SNSIDTYPE => {:type => ::Thrift::Types::I32, :name => 'snsIdType', :enum_class => ::SnsIdType},
      SNSACCESSTOKEN => {:type => ::Thrift::Types::STRING, :name => 'snsAccessToken'},
      REGION => {:type => ::Thrift::Types::STRING, :name => 'region'},
      UDIDHASH => {:type => ::Thrift::Types::STRING, :name => 'udidHash'},
      DEVICEINFO => {:type => ::Thrift::Types::STRUCT, :name => 'deviceInfo', :class => ::DeviceInfo},
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @snsIdType.nil? || ::SnsIdType::VALID_VALUES.include?(@snsIdType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field snsIdType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterWithSnsId_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::RegisterWithSnsIdResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterWithSnsIdAndIdentityCredential_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SNSIDTYPE = 2
    SNSACCESSTOKEN = 3
    IDENTITYCREDENTIAL = 4
    REGION = 5
    UDIDHASH = 6
    DEVICEINFO = 7

    FIELDS = {
      SNSIDTYPE => {:type => ::Thrift::Types::I32, :name => 'snsIdType', :enum_class => ::SnsIdType},
      SNSACCESSTOKEN => {:type => ::Thrift::Types::STRING, :name => 'snsAccessToken'},
      IDENTITYCREDENTIAL => {:type => ::Thrift::Types::STRUCT, :name => 'identityCredential', :class => ::IdentityCredential},
      REGION => {:type => ::Thrift::Types::STRING, :name => 'region'},
      UDIDHASH => {:type => ::Thrift::Types::STRING, :name => 'udidHash'},
      DEVICEINFO => {:type => ::Thrift::Types::STRUCT, :name => 'deviceInfo', :class => ::DeviceInfo}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @snsIdType.nil? || ::SnsIdType::VALID_VALUES.include?(@snsIdType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field snsIdType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterWithSnsIdAndIdentityCredential_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReissueDeviceCredential_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReissueDeviceCredential_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReissueUserTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EXPIRATIONTIME = 3
    MAXUSECOUNT = 4

    FIELDS = {
      EXPIRATIONTIME => {:type => ::Thrift::Types::I64, :name => 'expirationTime'},
      MAXUSECOUNT => {:type => ::Thrift::Types::I32, :name => 'maxUseCount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReissueUserTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageReadRange_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHATIDS = 2

    FIELDS = {
      CHATIDS => {:type => ::Thrift::Types::LIST, :name => 'chatIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageReadRange_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::TMessageReadRange}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RejectGroupInvitation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUPID = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RejectGroupInvitation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReleaseSession_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReleaseSession_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveAllMessages_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    LASTMESSAGEID = 2

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      LASTMESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'lastMessageId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveAllMessages_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveBuddyLocation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MID = 2
    INDEX = 3

    FIELDS = {
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
      INDEX => {:type => ::Thrift::Types::I32, :name => 'index'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveBuddyLocation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MESSAGEID = 2

    FIELDS = {
      MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MakeUserAddMyselfAsContact_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CONTACTOWNERMID = 1

    FIELDS = {
      CONTACTOWNERMID => {:type => ::Thrift::Types::STRING, :name => 'contactOwnerMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MakeUserAddMyselfAsContact_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ContactTransition},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveMessageFromMyHome_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MESSAGEID = 2

    FIELDS = {
      MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveMessageFromMyHome_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveSnsId_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SNSIDTYPE = 2

    FIELDS = {
      SNSIDTYPE => {:type => ::Thrift::Types::I32, :name => 'snsIdType', :enum_class => ::SnsIdType}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @snsIdType.nil? || ::SnsIdType::VALID_VALUES.include?(@snsIdType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field snsIdType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveSnsId_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Report_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SYNCOPREVISION = 2
    CATEGORY = 3
    REPORT = 4

    FIELDS = {
      SYNCOPREVISION => {:type => ::Thrift::Types::I64, :name => 'syncOpRevision'},
      CATEGORY => {:type => ::Thrift::Types::I32, :name => 'category', :enum_class => ::SyncCategory},
      REPORT => {:type => ::Thrift::Types::STRING, :name => 'report'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @category.nil? || ::SyncCategory::VALID_VALUES.include?(@category)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field category!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Report_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportContacts_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SYNCOPREVISION = 2
    CATEGORY = 3
    CONTACTREPORTS = 4
    ACTIONTYPE = 5

    FIELDS = {
      SYNCOPREVISION => {:type => ::Thrift::Types::I64, :name => 'syncOpRevision'},
      CATEGORY => {:type => ::Thrift::Types::I32, :name => 'category', :enum_class => ::SyncCategory},
      CONTACTREPORTS => {:type => ::Thrift::Types::LIST, :name => 'contactReports', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ContactReport}},
      ACTIONTYPE => {:type => ::Thrift::Types::I32, :name => 'actionType', :enum_class => ::SyncActionType}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @category.nil? || ::SyncCategory::VALID_VALUES.include?(@category)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field category!')
      end
      unless @actionType.nil? || ::SyncActionType::VALID_VALUES.include?(@actionType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field actionType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportContacts_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ContactReportResult}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportGroups_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SYNCOPREVISION = 2
    GROUPS = 3

    FIELDS = {
      SYNCOPREVISION => {:type => ::Thrift::Types::I64, :name => 'syncOpRevision'},
      GROUPS => {:type => ::Thrift::Types::LIST, :name => 'groups', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Group}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportGroups_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SYNCOPREVISION = 2
    PROFILE = 3

    FIELDS = {
      SYNCOPREVISION => {:type => ::Thrift::Types::I64, :name => 'syncOpRevision'},
      PROFILE => {:type => ::Thrift::Types::STRUCT, :name => 'profile', :class => ::Profile}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportRooms_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SYNCOPREVISION = 2
    ROOMS = 3

    FIELDS = {
      SYNCOPREVISION => {:type => ::Thrift::Types::I64, :name => 'syncOpRevision'},
      ROOMS => {:type => ::Thrift::Types::LIST, :name => 'rooms', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Room}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportRooms_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactByMetaTag_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    USERID = 2
    REFERENCE = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userid'},
      REFERENCE => {:type => ::Thrift::Types::STRING, :name => 'reference'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactByMetaTag_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Contact},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportSettings_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SYNCOPREVISION = 2
    SETTINGS = 3

    FIELDS = {
      SYNCOPREVISION => {:type => ::Thrift::Types::I64, :name => 'syncOpRevision'},
      SETTINGS => {:type => ::Thrift::Types::STRUCT, :name => 'settings', :class => ::Settings}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportSettings_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportSpam_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHATMID = 2
    MEMBERMIDS = 3
    SPAMMERREASONS = 4
    SENDERMIDS = 5
    SPAMMESSAGEIDS = 6
    SPAMMESSAGES = 7

    FIELDS = {
      CHATMID => {:type => ::Thrift::Types::STRING, :name => 'chatMid'},
      MEMBERMIDS => {:type => ::Thrift::Types::LIST, :name => 'memberMids', :element => {:type => ::Thrift::Types::STRING}},
      SPAMMERREASONS => {:type => ::Thrift::Types::LIST, :name => 'spammerReasons', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SpammerReason}},
      SENDERMIDS => {:type => ::Thrift::Types::LIST, :name => 'senderMids', :element => {:type => ::Thrift::Types::STRING}},
      SPAMMESSAGEIDS => {:type => ::Thrift::Types::LIST, :name => 'spamMessageIds', :element => {:type => ::Thrift::Types::STRING}},
      SPAMMESSAGES => {:type => ::Thrift::Types::LIST, :name => 'spamMessages', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportSpam_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportSpammer_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SPAMMERMID = 2
    SPAMMERREASONS = 3
    SPAMMESSAGEIDS = 4

    FIELDS = {
      SPAMMERMID => {:type => ::Thrift::Types::STRING, :name => 'spammerMid'},
      SPAMMERREASONS => {:type => ::Thrift::Types::LIST, :name => 'spammerReasons', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SpammerReason}},
      SPAMMESSAGEIDS => {:type => ::Thrift::Types::LIST, :name => 'spamMessageIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReportSpammer_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RequestAccountPasswordReset_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PROVIDER = 4
    IDENTIFIER = 2
    LOCALE = 5

    FIELDS = {
      PROVIDER => {:type => ::Thrift::Types::I32, :name => 'provider', :enum_class => ::IdentityProvider},
      IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'identifier'},
      LOCALE => {:type => ::Thrift::Types::STRING, :name => 'locale'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @provider.nil? || ::IdentityProvider::VALID_VALUES.include?(@provider)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field provider!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RequestAccountPasswordReset_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RequestEmailConfirmation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EMAILCONFIRMATION = 2

    FIELDS = {
      EMAILCONFIRMATION => {:type => ::Thrift::Types::STRUCT, :name => 'emailConfirmation', :class => ::EmailConfirmation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RequestEmailConfirmation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::EmailConfirmationSession},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RequestIdentityUnbind_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PROVIDER = 4
    IDENTIFIER = 2

    FIELDS = {
      PROVIDER => {:type => ::Thrift::Types::I32, :name => 'provider', :enum_class => ::IdentityProvider},
      IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'identifier'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @provider.nil? || ::IdentityProvider::VALID_VALUES.include?(@provider)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field provider!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RequestIdentityUnbind_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ResendEmailConfirmation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VERIFIER = 2

    FIELDS = {
      VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ResendEmailConfirmation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::EmailConfirmationSession},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ResendPinCode_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SESSIONID = 2

    FIELDS = {
      SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ResendPinCode_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ResendPinCodeBySMS_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SESSIONID = 2

    FIELDS = {
      SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ResendPinCodeBySMS_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendChatChecked_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    CONSUMER = 2
    LASTMESSAGEID = 3

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      CONSUMER => {:type => ::Thrift::Types::STRING, :name => 'consumer'},
      LASTMESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'lastMessageId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendChatChecked_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessageAwaitCommit_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    MESSAGE = 2

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::Message}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessageAwaitCommit_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CommitMessageResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendChatRemoved_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    CONSUMER = 2
    LASTMESSAGEID = 3

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      CONSUMER => {:type => ::Thrift::Types::STRING, :name => 'consumer'},
      LASTMESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'lastMessageId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendChatRemoved_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendContentPreviewUpdated_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ESQ = 1
    MESSAGEID = 2
    RECEIVERMIDS = 3

    FIELDS = {
      ESQ => {:type => ::Thrift::Types::I32, :name => 'esq'},
      MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'},
      RECEIVERMIDS => {:type => ::Thrift::Types::LIST, :name => 'receiverMids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendContentPreviewUpdated_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendContentReceipt_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    CONSUMER = 2
    MESSAGEID = 3

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      CONSUMER => {:type => ::Thrift::Types::STRING, :name => 'consumer'},
      MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendContentReceipt_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendDummyPush_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendDummyPush_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveE2EEPublicKey_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PUBLICKEY = 2

    FIELDS = {
      PUBLICKEY => {:type => ::Thrift::Types::STRUCT, :name => 'publicKey', :class => ::E2EEPublicKey}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveE2EEPublicKey_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NegotiateE2EEPublicKey_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MID = 2

    FIELDS = {
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NegotiateE2EEPublicKey_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::E2EENegotiationResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetE2EEPublicKey_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MID = 2
    VERSION = 3
    KEYID = 4

    FIELDS = {
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
      VERSION => {:type => ::Thrift::Types::I32, :name => 'version'},
      KEYID => {:type => ::Thrift::Types::I32, :name => 'keyId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetE2EEPublicKey_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::E2EEPublicKey},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RequestE2EEKeyExchange_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    TEMPORALPUBLICKEY = 2
    PUBLICKEY = 3
    VERIFIER = 4

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      TEMPORALPUBLICKEY => {:type => ::Thrift::Types::STRING, :name => 'temporalPublicKey', :binary => true},
      PUBLICKEY => {:type => ::Thrift::Types::STRUCT, :name => 'publicKey', :class => ::E2EEPublicKey},
      VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier', :binary => true}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RequestE2EEKeyExchange_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLastE2EEPublicKeys_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHATMID = 2

    FIELDS = {
      CHATMID => {:type => ::Thrift::Types::STRING, :name => 'chatMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLastE2EEPublicKeys_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::E2EEPublicKey}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterE2EEPublicKey_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    PUBLICKEY = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      PUBLICKEY => {:type => ::Thrift::Types::STRUCT, :name => 'publicKey', :class => ::E2EEPublicKey}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterE2EEPublicKey_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::E2EEPublicKey},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetE2EEPublicKeys_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetE2EEPublicKeys_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::E2EEPublicKey}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetE2EEPublicKeysEx_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IGNOREE2EESTATUS = 2

    FIELDS = {
      IGNOREE2EESTATUS => {:type => ::Thrift::Types::BOOL, :name => 'ignoreE2EEStatus'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetE2EEPublicKeysEx_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::E2EEPublicKey}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetReadMessageOpsInBulk_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHATIDS = 2

    FIELDS = {
      CHATIDS => {:type => ::Thrift::Types::LIST, :name => 'chatIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetReadMessageOpsInBulk_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Operation}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendEvent_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    MESSAGE = 2

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::Message}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendEvent_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Message},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    MESSAGE = 2

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::Message}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Message},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessageIgnored_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    CONSUMER = 2
    MESSAGEIDS = 3

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      CONSUMER => {:type => ::Thrift::Types::STRING, :name => 'consumer'},
      MESSAGEIDS => {:type => ::Thrift::Types::LIST, :name => 'messageIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessageIgnored_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessageReceipt_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    CONSUMER = 2
    MESSAGEIDS = 3

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      CONSUMER => {:type => ::Thrift::Types::STRING, :name => 'consumer'},
      MESSAGEIDS => {:type => ::Thrift::Types::LIST, :name => 'messageIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessageReceipt_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindContactByMetaTag_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERID = 2
    REFERENCE = 3

    FIELDS = {
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userid'},
      REFERENCE => {:type => ::Thrift::Types::STRING, :name => 'reference'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindContactByMetaTag_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Contact},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessageToMyHome_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    MESSAGE = 2

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::Message}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessageToMyHome_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Message},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetBuddyLocation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MID = 2
    INDEX = 3
    LOCATION = 4

    FIELDS = {
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
      INDEX => {:type => ::Thrift::Types::I32, :name => 'index'},
      LOCATION => {:type => ::Thrift::Types::STRUCT, :name => 'location', :class => ::Geolocation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetBuddyLocation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetIdentityCredential_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDENTIFIER = 2
    VERIFIER = 3
    PROVIDER = 4

    FIELDS = {
      IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'identifier'},
      VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'},
      PROVIDER => {:type => ::Thrift::Types::I32, :name => 'provider', :enum_class => ::IdentityProvider}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @provider.nil? || ::IdentityProvider::VALID_VALUES.include?(@provider)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field provider!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetIdentityCredential_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetNotificationsEnabled_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    TYPE = 2
    TARGET = 3
    ENABLEMENT = 4

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::MIDType},
      TARGET => {:type => ::Thrift::Types::STRING, :name => 'target'},
      ENABLEMENT => {:type => ::Thrift::Types::BOOL, :name => 'enablement'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @type.nil? || ::MIDType::VALID_VALUES.include?(@type)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetNotificationsEnabled_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class StartUpdateVerification_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REGION = 2
    CARRIER = 3
    PHONE = 4
    UDIDHASH = 5
    DEVICEINFO = 6
    NETWORKCODE = 7
    LOCALE = 8

    FIELDS = {
      REGION => {:type => ::Thrift::Types::STRING, :name => 'region'},
      CARRIER => {:type => ::Thrift::Types::I32, :name => 'carrier', :enum_class => ::CarrierCode},
      PHONE => {:type => ::Thrift::Types::STRING, :name => 'phone'},
      UDIDHASH => {:type => ::Thrift::Types::STRING, :name => 'udidHash'},
      DEVICEINFO => {:type => ::Thrift::Types::STRUCT, :name => 'deviceInfo', :class => ::DeviceInfo},
      NETWORKCODE => {:type => ::Thrift::Types::STRING, :name => 'networkCode'},
      LOCALE => {:type => ::Thrift::Types::STRING, :name => 'locale'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @carrier.nil? || ::CarrierCode::VALID_VALUES.include?(@carrier)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field carrier!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class StartUpdateVerification_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::VerificationSessionData},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class StartVerification_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REGION = 2
    CARRIER = 3
    PHONE = 4
    UDIDHASH = 5
    DEVICEINFO = 6
    NETWORKCODE = 7
    MID = 8
    LOCALE = 9
    SIMINFO = 10
    OLDUDIDHASH = 11

    FIELDS = {
      REGION => {:type => ::Thrift::Types::STRING, :name => 'region'},
      CARRIER => {:type => ::Thrift::Types::I32, :name => 'carrier', :enum_class => ::CarrierCode},
      PHONE => {:type => ::Thrift::Types::STRING, :name => 'phone'},
      UDIDHASH => {:type => ::Thrift::Types::STRING, :name => 'udidHash'},
      DEVICEINFO => {:type => ::Thrift::Types::STRUCT, :name => 'deviceInfo', :class => ::DeviceInfo},
      NETWORKCODE => {:type => ::Thrift::Types::STRING, :name => 'networkCode'},
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
      LOCALE => {:type => ::Thrift::Types::STRING, :name => 'locale'},
      SIMINFO => {:type => ::Thrift::Types::STRUCT, :name => 'simInfo', :class => ::SIMInfo},
      OLDUDIDHASH => {:type => ::Thrift::Types::STRING, :name => 'oldUdidHash'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @carrier.nil? || ::CarrierCode::VALID_VALUES.include?(@carrier)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field carrier!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class StartVerification_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::VerificationSessionData},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGroupPreferenceAttribute_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUPMID = 2
    UPDATEDATTRS = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUPMID => {:type => ::Thrift::Types::STRING, :name => 'groupMid'},
      UPDATEDATTRS => {:type => ::Thrift::Types::MAP, :name => 'updatedAttrs', :key => {:type => ::Thrift::Types::I32, :enum_class => ::GroupPreferenceAttribute}, :value => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGroupPreferenceAttribute_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateRoomV2_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    CONTACTIDS = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      CONTACTIDS => {:type => ::Thrift::Types::LIST, :name => 'contactIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateRoomV2_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Room},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class StoreUpdateProfileAttribute_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    PROFILEATTRIBUTE = 2
    VALUE = 3

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      PROFILEATTRIBUTE => {:type => ::Thrift::Types::I32, :name => 'profileAttribute', :enum_class => ::ProfileAttribute},
      VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @profileAttribute.nil? || ::ProfileAttribute::VALID_VALUES.include?(@profileAttribute)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field profileAttribute!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class StoreUpdateProfileAttribute_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SyncContactBySnsIds_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    MODIFICATIONS = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      MODIFICATIONS => {:type => ::Thrift::Types::LIST, :name => 'modifications', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SnsFriendModification}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SyncContactBySnsIds_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SnsFriendContactRegistration}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SyncContacts_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    LOCALCONTACTS = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      LOCALCONTACTS => {:type => ::Thrift::Types::LIST, :name => 'localContacts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ContactModification}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SyncContacts_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::ContactRegistration}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TrySendMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    MESSAGE = 2

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::Message}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TrySendMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Message},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNextMessagesV2_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MESSAGEBOXID = 2
    STARTMESSAGEID = 3
    MESSAGESCOUNT = 4

    FIELDS = {
      MESSAGEBOXID => {:type => ::Thrift::Types::STRING, :name => 'messageBoxId'},
      STARTMESSAGEID => {:type => ::Thrift::Types::STRUCT, :name => 'startMessageId', :class => ::MessageBoxV2MessageId},
      MESSAGESCOUNT => {:type => ::Thrift::Types::I32, :name => 'messagesCount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNextMessagesV2_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Message}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageBoxCompactWrapUpV2_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MESSAGEBOXID = 2

    FIELDS = {
      MESSAGEBOXID => {:type => ::Thrift::Types::STRING, :name => 'messageBoxId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMessageBoxCompactWrapUpV2_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TMessageBoxWrapUp},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRecentMessagesV2_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MESSAGEBOXID = 2
    MESSAGESCOUNT = 3

    FIELDS = {
      MESSAGEBOXID => {:type => ::Thrift::Types::STRING, :name => 'messageBoxId'},
      MESSAGESCOUNT => {:type => ::Thrift::Types::I32, :name => 'messagesCount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRecentMessagesV2_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Message}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ValidateContactsOnBot_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CONTACTS = 2

    FIELDS = {
      CONTACTS => {:type => ::Thrift::Types::LIST, :name => 'contacts', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ValidateContactsOnBot_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TryFriendRequest_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MIDOREMID = 1
    METHOD = 2
    FRIENDREQUESTPARAMS = 3

    FIELDS = {
      MIDOREMID => {:type => ::Thrift::Types::STRING, :name => 'midOrEMid'},
      METHOD => {:type => ::Thrift::Types::I32, :name => 'method', :enum_class => ::FriendRequestMethod},
      FRIENDREQUESTPARAMS => {:type => ::Thrift::Types::STRING, :name => 'friendRequestParams'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @method.nil? || ::FriendRequestMethod::VALID_VALUES.include?(@method)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field method!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TryFriendRequest_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnblockContact_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ID = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnblockContact_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnblockRecommendation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ID = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnblockRecommendation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnregisterUserAndDevice_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnregisterUserAndDevice_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateApnsDeviceToken_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    APNSDEVICETOKEN = 2

    FIELDS = {
      APNSDEVICETOKEN => {:type => ::Thrift::Types::STRING, :name => 'apnsDeviceToken', :binary => true}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateApnsDeviceToken_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddySetting_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 2
    VALUE = 3

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateBuddySetting_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateC2DMRegistrationId_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REGISTRATIONID = 2

    FIELDS = {
      REGISTRATIONID => {:type => ::Thrift::Types::STRING, :name => 'registrationId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateC2DMRegistrationId_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateContactSetting_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    MID = 2
    FLAG = 3
    VALUE = 4

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
      FLAG => {:type => ::Thrift::Types::I32, :name => 'flag', :enum_class => ::ContactSetting},
      VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @flag.nil? || ::ContactSetting::VALID_VALUES.include?(@flag)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field flag!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateContactSetting_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateCustomModeSettings_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CUSTOMMODE = 2
    PARAMMAP = 3

    FIELDS = {
      CUSTOMMODE => {:type => ::Thrift::Types::I32, :name => 'customMode', :enum_class => ::CustomMode},
      PARAMMAP => {:type => ::Thrift::Types::MAP, :name => 'paramMap', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @customMode.nil? || ::CustomMode::VALID_VALUES.include?(@customMode)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field customMode!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateCustomModeSettings_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateDeviceInfo_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DEVICEUID = 2
    DEVICEINFO = 3

    FIELDS = {
      DEVICEUID => {:type => ::Thrift::Types::STRING, :name => 'deviceUid'},
      DEVICEINFO => {:type => ::Thrift::Types::STRUCT, :name => 'deviceInfo', :class => ::DeviceInfo}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateDeviceInfo_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGroup_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUP = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUP => {:type => ::Thrift::Types::STRUCT, :name => 'group', :class => ::Group}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGroup_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateNotificationToken_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TYPE = 3
    TOKEN = 2

    FIELDS = {
      TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::NotificationType},
      TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @type.nil? || ::NotificationType::VALID_VALUES.include?(@type)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateNotificationToken_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateNotificationTokenWithBytes_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TYPE = 3
    TOKEN = 2

    FIELDS = {
      TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::NotificationType},
      TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token', :binary => true}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @type.nil? || ::NotificationType::VALID_VALUES.include?(@type)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateNotificationTokenWithBytes_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    PROFILE = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      PROFILE => {:type => ::Thrift::Types::STRUCT, :name => 'profile', :class => ::Profile}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProfileAttribute_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ATTR = 2
    VALUE = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ATTR => {:type => ::Thrift::Types::I32, :name => 'attr', :enum_class => ::ProfileAttribute},
      VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @attr.nil? || ::ProfileAttribute::VALID_VALUES.include?(@attr)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field attr!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProfileAttribute_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateRegion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REGION = 2

    FIELDS = {
      REGION => {:type => ::Thrift::Types::STRING, :name => 'region'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateRegion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSettings_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    SETTINGS = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      SETTINGS => {:type => ::Thrift::Types::STRUCT, :name => 'settings', :class => ::Settings}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSettings_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSettings2_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    SETTINGS = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      SETTINGS => {:type => ::Thrift::Types::STRUCT, :name => 'settings', :class => ::Settings}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSettings2_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSettingsAttribute_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ATTR = 2
    VALUE = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ATTR => {:type => ::Thrift::Types::I32, :name => 'attr', :enum_class => ::SettingsAttribute},
      VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @attr.nil? || ::SettingsAttribute::VALID_VALUES.include?(@attr)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field attr!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSettingsAttribute_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSettingsAttributes_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ATTRBITSET = 2
    SETTINGS = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ATTRBITSET => {:type => ::Thrift::Types::I32, :name => 'attrBitset'},
      SETTINGS => {:type => ::Thrift::Types::STRUCT, :name => 'settings', :class => ::Settings}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSettingsAttributes_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyIdentityCredential_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDENTITYPROVIDER = 8
    IDENTIFIER = 3
    PASSWORD = 4

    FIELDS = {
      IDENTITYPROVIDER => {:type => ::Thrift::Types::I32, :name => 'identityProvider', :enum_class => ::IdentityProvider},
      IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'identifier'},
      PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @identityProvider.nil? || ::IdentityProvider::VALID_VALUES.include?(@identityProvider)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field identityProvider!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyIdentityCredential_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyIdentityCredentialWithResult_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDENTITYCREDENTIAL = 2

    FIELDS = {
      IDENTITYCREDENTIAL => {:type => ::Thrift::Types::STRUCT, :name => 'identityCredential', :class => ::IdentityCredential}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyIdentityCredentialWithResult_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UserAuthStatus},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyPhone_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SESSIONID = 2
    PINCODE = 3
    UDIDHASH = 4

    FIELDS = {
      SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'},
      PINCODE => {:type => ::Thrift::Types::STRING, :name => 'pinCode'},
      UDIDHASH => {:type => ::Thrift::Types::STRING, :name => 'udidHash'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyPhone_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::VerificationResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @success.nil? || ::VerificationResult::VALID_VALUES.include?(@success)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyQrcode_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VERIFIER = 2
    PINCODE = 3

    FIELDS = {
      VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'},
      PINCODE => {:type => ::Thrift::Types::STRING, :name => 'pinCode'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyQrcode_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

