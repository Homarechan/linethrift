#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'line_types'

module ChannelApplicationProvidedService
  class Client
    include ::Thrift::Client

    def activeBuddySubscriberCount()
      send_activeBuddySubscriberCount()
      return recv_activeBuddySubscriberCount()
    end

    def send_activeBuddySubscriberCount()
      send_message('activeBuddySubscriberCount', ActiveBuddySubscriberCount_args)
    end

    def recv_activeBuddySubscriberCount()
      result = receive_message(ActiveBuddySubscriberCount_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'activeBuddySubscriberCount failed: unknown result')
    end

    def addOperationForChannel(opType, param1, param2, param3)
      send_addOperationForChannel(opType, param1, param2, param3)
      recv_addOperationForChannel()
    end

    def send_addOperationForChannel(opType, param1, param2, param3)
      send_message('addOperationForChannel', AddOperationForChannel_args, :opType => opType, :param1 => param1, :param2 => param2, :param3 => param3)
    end

    def recv_addOperationForChannel()
      result = receive_message(AddOperationForChannel_result)
      raise result.e unless result.e.nil?
      return
    end

    def displayBuddySubscriberCount()
      send_displayBuddySubscriberCount()
      return recv_displayBuddySubscriberCount()
    end

    def send_displayBuddySubscriberCount()
      send_message('displayBuddySubscriberCount', DisplayBuddySubscriberCount_args)
    end

    def recv_displayBuddySubscriberCount()
      result = receive_message(DisplayBuddySubscriberCount_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'displayBuddySubscriberCount failed: unknown result')
    end

    def findContactByUseridWithoutAbuseBlockForChannel(userid)
      send_findContactByUseridWithoutAbuseBlockForChannel(userid)
      return recv_findContactByUseridWithoutAbuseBlockForChannel()
    end

    def send_findContactByUseridWithoutAbuseBlockForChannel(userid)
      send_message('findContactByUseridWithoutAbuseBlockForChannel', FindContactByUseridWithoutAbuseBlockForChannel_args, :userid => userid)
    end

    def recv_findContactByUseridWithoutAbuseBlockForChannel()
      result = receive_message(FindContactByUseridWithoutAbuseBlockForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findContactByUseridWithoutAbuseBlockForChannel failed: unknown result')
    end

    def getAllContactIdsForChannel()
      send_getAllContactIdsForChannel()
      return recv_getAllContactIdsForChannel()
    end

    def send_getAllContactIdsForChannel()
      send_message('getAllContactIdsForChannel', GetAllContactIdsForChannel_args)
    end

    def recv_getAllContactIdsForChannel()
      result = receive_message(GetAllContactIdsForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllContactIdsForChannel failed: unknown result')
    end

    def getCompactContacts(lastModifiedTimestamp)
      send_getCompactContacts(lastModifiedTimestamp)
      return recv_getCompactContacts()
    end

    def send_getCompactContacts(lastModifiedTimestamp)
      send_message('getCompactContacts', GetCompactContacts_args, :lastModifiedTimestamp => lastModifiedTimestamp)
    end

    def recv_getCompactContacts()
      result = receive_message(GetCompactContacts_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCompactContacts failed: unknown result')
    end

    def getContactsForChannel(ids)
      send_getContactsForChannel(ids)
      return recv_getContactsForChannel()
    end

    def send_getContactsForChannel(ids)
      send_message('getContactsForChannel', GetContactsForChannel_args, :ids => ids)
    end

    def recv_getContactsForChannel()
      result = receive_message(GetContactsForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getContactsForChannel failed: unknown result')
    end

    def getDisplayName(mid)
      send_getDisplayName(mid)
      return recv_getDisplayName()
    end

    def send_getDisplayName(mid)
      send_message('getDisplayName', GetDisplayName_args, :mid => mid)
    end

    def recv_getDisplayName()
      result = receive_message(GetDisplayName_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getDisplayName failed: unknown result')
    end

    def getFavoriteMidsForChannel()
      send_getFavoriteMidsForChannel()
      return recv_getFavoriteMidsForChannel()
    end

    def send_getFavoriteMidsForChannel()
      send_message('getFavoriteMidsForChannel', GetFavoriteMidsForChannel_args)
    end

    def recv_getFavoriteMidsForChannel()
      result = receive_message(GetFavoriteMidsForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getFavoriteMidsForChannel failed: unknown result')
    end

    def getFriendMids()
      send_getFriendMids()
      return recv_getFriendMids()
    end

    def send_getFriendMids()
      send_message('getFriendMids', GetFriendMids_args)
    end

    def recv_getFriendMids()
      result = receive_message(GetFriendMids_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getFriendMids failed: unknown result')
    end

    def getGroupMemberMids(groupId)
      send_getGroupMemberMids(groupId)
      return recv_getGroupMemberMids()
    end

    def send_getGroupMemberMids(groupId)
      send_message('getGroupMemberMids', GetGroupMemberMids_args, :groupId => groupId)
    end

    def recv_getGroupMemberMids()
      result = receive_message(GetGroupMemberMids_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupMemberMids failed: unknown result')
    end

    def getGroupsForChannel(groupIds)
      send_getGroupsForChannel(groupIds)
      return recv_getGroupsForChannel()
    end

    def send_getGroupsForChannel(groupIds)
      send_message('getGroupsForChannel', GetGroupsForChannel_args, :groupIds => groupIds)
    end

    def recv_getGroupsForChannel()
      result = receive_message(GetGroupsForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupsForChannel failed: unknown result')
    end

    def getIdentityCredential()
      send_getIdentityCredential()
      return recv_getIdentityCredential()
    end

    def send_getIdentityCredential()
      send_message('getIdentityCredential', GetIdentityCredential_args)
    end

    def recv_getIdentityCredential()
      result = receive_message(GetIdentityCredential_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getIdentityCredential failed: unknown result')
    end

    def getJoinedGroupIdsForChannel()
      send_getJoinedGroupIdsForChannel()
      return recv_getJoinedGroupIdsForChannel()
    end

    def send_getJoinedGroupIdsForChannel()
      send_message('getJoinedGroupIdsForChannel', GetJoinedGroupIdsForChannel_args)
    end

    def recv_getJoinedGroupIdsForChannel()
      result = receive_message(GetJoinedGroupIdsForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getJoinedGroupIdsForChannel failed: unknown result')
    end

    def getMetaProfile()
      send_getMetaProfile()
      return recv_getMetaProfile()
    end

    def send_getMetaProfile()
      send_message('getMetaProfile', GetMetaProfile_args)
    end

    def recv_getMetaProfile()
      result = receive_message(GetMetaProfile_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMetaProfile failed: unknown result')
    end

    def getMid()
      send_getMid()
      return recv_getMid()
    end

    def send_getMid()
      send_message('getMid', GetMid_args)
    end

    def recv_getMid()
      result = receive_message(GetMid_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMid failed: unknown result')
    end

    def getPrimaryClientForChannel()
      send_getPrimaryClientForChannel()
      return recv_getPrimaryClientForChannel()
    end

    def send_getPrimaryClientForChannel()
      send_message('getPrimaryClientForChannel', GetPrimaryClientForChannel_args)
    end

    def recv_getPrimaryClientForChannel()
      result = receive_message(GetPrimaryClientForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPrimaryClientForChannel failed: unknown result')
    end

    def getProfileForChannel()
      send_getProfileForChannel()
      return recv_getProfileForChannel()
    end

    def send_getProfileForChannel()
      send_message('getProfileForChannel', GetProfileForChannel_args)
    end

    def recv_getProfileForChannel()
      result = receive_message(GetProfileForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProfileForChannel failed: unknown result')
    end

    def getSimpleChannelContacts(ids)
      send_getSimpleChannelContacts(ids)
      return recv_getSimpleChannelContacts()
    end

    def send_getSimpleChannelContacts(ids)
      send_message('getSimpleChannelContacts', GetSimpleChannelContacts_args, :ids => ids)
    end

    def recv_getSimpleChannelContacts()
      result = receive_message(GetSimpleChannelContacts_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSimpleChannelContacts failed: unknown result')
    end

    def getUserCountryForBilling(country, remoteIp)
      send_getUserCountryForBilling(country, remoteIp)
      return recv_getUserCountryForBilling()
    end

    def send_getUserCountryForBilling(country, remoteIp)
      send_message('getUserCountryForBilling', GetUserCountryForBilling_args, :country => country, :remoteIp => remoteIp)
    end

    def recv_getUserCountryForBilling()
      result = receive_message(GetUserCountryForBilling_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserCountryForBilling failed: unknown result')
    end

    def getUserCreateTime()
      send_getUserCreateTime()
      return recv_getUserCreateTime()
    end

    def send_getUserCreateTime()
      send_message('getUserCreateTime', GetUserCreateTime_args)
    end

    def recv_getUserCreateTime()
      result = receive_message(GetUserCreateTime_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserCreateTime failed: unknown result')
    end

    def getUserIdentities()
      send_getUserIdentities()
      return recv_getUserIdentities()
    end

    def send_getUserIdentities()
      send_message('getUserIdentities', GetUserIdentities_args)
    end

    def recv_getUserIdentities()
      result = receive_message(GetUserIdentities_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserIdentities failed: unknown result')
    end

    def getUserLanguage()
      send_getUserLanguage()
      return recv_getUserLanguage()
    end

    def send_getUserLanguage()
      send_message('getUserLanguage', GetUserLanguage_args)
    end

    def recv_getUserLanguage()
      result = receive_message(GetUserLanguage_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserLanguage failed: unknown result')
    end

    def getUserMidsWhoAddedMe()
      send_getUserMidsWhoAddedMe()
      return recv_getUserMidsWhoAddedMe()
    end

    def send_getUserMidsWhoAddedMe()
      send_message('getUserMidsWhoAddedMe', GetUserMidsWhoAddedMe_args)
    end

    def recv_getUserMidsWhoAddedMe()
      result = receive_message(GetUserMidsWhoAddedMe_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserMidsWhoAddedMe failed: unknown result')
    end

    def isGroupMember(groupId)
      send_isGroupMember(groupId)
      return recv_isGroupMember()
    end

    def send_isGroupMember(groupId)
      send_message('isGroupMember', IsGroupMember_args, :groupId => groupId)
    end

    def recv_isGroupMember()
      result = receive_message(IsGroupMember_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isGroupMember failed: unknown result')
    end

    def isInContact(mid)
      send_isInContact(mid)
      return recv_isInContact()
    end

    def send_isInContact(mid)
      send_message('isInContact', IsInContact_args, :mid => mid)
    end

    def recv_isInContact()
      result = receive_message(IsInContact_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isInContact failed: unknown result')
    end

    def registerChannelCP(cpId, registerPassword)
      send_registerChannelCP(cpId, registerPassword)
      return recv_registerChannelCP()
    end

    def send_registerChannelCP(cpId, registerPassword)
      send_message('registerChannelCP', RegisterChannelCP_args, :cpId => cpId, :registerPassword => registerPassword)
    end

    def recv_registerChannelCP()
      result = receive_message(RegisterChannelCP_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerChannelCP failed: unknown result')
    end

    def removeNotificationStatus(notificationStatus)
      send_removeNotificationStatus(notificationStatus)
      recv_removeNotificationStatus()
    end

    def send_removeNotificationStatus(notificationStatus)
      send_message('removeNotificationStatus', RemoveNotificationStatus_args, :notificationStatus => notificationStatus)
    end

    def recv_removeNotificationStatus()
      result = receive_message(RemoveNotificationStatus_result)
      raise result.e unless result.e.nil?
      return
    end

    def sendMessageForChannel(message)
      send_sendMessageForChannel(message)
      return recv_sendMessageForChannel()
    end

    def send_sendMessageForChannel(message)
      send_message('sendMessageForChannel', SendMessageForChannel_args, :message => message)
    end

    def recv_sendMessageForChannel()
      result = receive_message(SendMessageForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendMessageForChannel failed: unknown result')
    end

    def sendPinCodeOperation(verifier)
      send_sendPinCodeOperation(verifier)
      recv_sendPinCodeOperation()
    end

    def send_sendPinCodeOperation(verifier)
      send_message('sendPinCodeOperation', SendPinCodeOperation_args, :verifier => verifier)
    end

    def recv_sendPinCodeOperation()
      result = receive_message(SendPinCodeOperation_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateProfileAttributeForChannel(profileAttribute, value)
      send_updateProfileAttributeForChannel(profileAttribute, value)
      recv_updateProfileAttributeForChannel()
    end

    def send_updateProfileAttributeForChannel(profileAttribute, value)
      send_message('updateProfileAttributeForChannel', UpdateProfileAttributeForChannel_args, :profileAttribute => profileAttribute, :value => value)
    end

    def recv_updateProfileAttributeForChannel()
      result = receive_message(UpdateProfileAttributeForChannel_result)
      raise result.e unless result.e.nil?
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_activeBuddySubscriberCount(seqid, iprot, oprot)
      args = read_args(iprot, ActiveBuddySubscriberCount_args)
      result = ActiveBuddySubscriberCount_result.new()
      begin
        result.success = @handler.activeBuddySubscriberCount()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'activeBuddySubscriberCount', seqid)
    end

    def process_addOperationForChannel(seqid, iprot, oprot)
      args = read_args(iprot, AddOperationForChannel_args)
      result = AddOperationForChannel_result.new()
      begin
        @handler.addOperationForChannel(args.opType, args.param1, args.param2, args.param3)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'addOperationForChannel', seqid)
    end

    def process_displayBuddySubscriberCount(seqid, iprot, oprot)
      args = read_args(iprot, DisplayBuddySubscriberCount_args)
      result = DisplayBuddySubscriberCount_result.new()
      begin
        result.success = @handler.displayBuddySubscriberCount()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'displayBuddySubscriberCount', seqid)
    end

    def process_findContactByUseridWithoutAbuseBlockForChannel(seqid, iprot, oprot)
      args = read_args(iprot, FindContactByUseridWithoutAbuseBlockForChannel_args)
      result = FindContactByUseridWithoutAbuseBlockForChannel_result.new()
      begin
        result.success = @handler.findContactByUseridWithoutAbuseBlockForChannel(args.userid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findContactByUseridWithoutAbuseBlockForChannel', seqid)
    end

    def process_getAllContactIdsForChannel(seqid, iprot, oprot)
      args = read_args(iprot, GetAllContactIdsForChannel_args)
      result = GetAllContactIdsForChannel_result.new()
      begin
        result.success = @handler.getAllContactIdsForChannel()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getAllContactIdsForChannel', seqid)
    end

    def process_getCompactContacts(seqid, iprot, oprot)
      args = read_args(iprot, GetCompactContacts_args)
      result = GetCompactContacts_result.new()
      begin
        result.success = @handler.getCompactContacts(args.lastModifiedTimestamp)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getCompactContacts', seqid)
    end

    def process_getContactsForChannel(seqid, iprot, oprot)
      args = read_args(iprot, GetContactsForChannel_args)
      result = GetContactsForChannel_result.new()
      begin
        result.success = @handler.getContactsForChannel(args.ids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getContactsForChannel', seqid)
    end

    def process_getDisplayName(seqid, iprot, oprot)
      args = read_args(iprot, GetDisplayName_args)
      result = GetDisplayName_result.new()
      begin
        result.success = @handler.getDisplayName(args.mid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getDisplayName', seqid)
    end

    def process_getFavoriteMidsForChannel(seqid, iprot, oprot)
      args = read_args(iprot, GetFavoriteMidsForChannel_args)
      result = GetFavoriteMidsForChannel_result.new()
      begin
        result.success = @handler.getFavoriteMidsForChannel()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getFavoriteMidsForChannel', seqid)
    end

    def process_getFriendMids(seqid, iprot, oprot)
      args = read_args(iprot, GetFriendMids_args)
      result = GetFriendMids_result.new()
      begin
        result.success = @handler.getFriendMids()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getFriendMids', seqid)
    end

    def process_getGroupMemberMids(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupMemberMids_args)
      result = GetGroupMemberMids_result.new()
      begin
        result.success = @handler.getGroupMemberMids(args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroupMemberMids', seqid)
    end

    def process_getGroupsForChannel(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupsForChannel_args)
      result = GetGroupsForChannel_result.new()
      begin
        result.success = @handler.getGroupsForChannel(args.groupIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroupsForChannel', seqid)
    end

    def process_getIdentityCredential(seqid, iprot, oprot)
      args = read_args(iprot, GetIdentityCredential_args)
      result = GetIdentityCredential_result.new()
      begin
        result.success = @handler.getIdentityCredential()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getIdentityCredential', seqid)
    end

    def process_getJoinedGroupIdsForChannel(seqid, iprot, oprot)
      args = read_args(iprot, GetJoinedGroupIdsForChannel_args)
      result = GetJoinedGroupIdsForChannel_result.new()
      begin
        result.success = @handler.getJoinedGroupIdsForChannel()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getJoinedGroupIdsForChannel', seqid)
    end

    def process_getMetaProfile(seqid, iprot, oprot)
      args = read_args(iprot, GetMetaProfile_args)
      result = GetMetaProfile_result.new()
      begin
        result.success = @handler.getMetaProfile()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getMetaProfile', seqid)
    end

    def process_getMid(seqid, iprot, oprot)
      args = read_args(iprot, GetMid_args)
      result = GetMid_result.new()
      begin
        result.success = @handler.getMid()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getMid', seqid)
    end

    def process_getPrimaryClientForChannel(seqid, iprot, oprot)
      args = read_args(iprot, GetPrimaryClientForChannel_args)
      result = GetPrimaryClientForChannel_result.new()
      begin
        result.success = @handler.getPrimaryClientForChannel()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPrimaryClientForChannel', seqid)
    end

    def process_getProfileForChannel(seqid, iprot, oprot)
      args = read_args(iprot, GetProfileForChannel_args)
      result = GetProfileForChannel_result.new()
      begin
        result.success = @handler.getProfileForChannel()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getProfileForChannel', seqid)
    end

    def process_getSimpleChannelContacts(seqid, iprot, oprot)
      args = read_args(iprot, GetSimpleChannelContacts_args)
      result = GetSimpleChannelContacts_result.new()
      begin
        result.success = @handler.getSimpleChannelContacts(args.ids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getSimpleChannelContacts', seqid)
    end

    def process_getUserCountryForBilling(seqid, iprot, oprot)
      args = read_args(iprot, GetUserCountryForBilling_args)
      result = GetUserCountryForBilling_result.new()
      begin
        result.success = @handler.getUserCountryForBilling(args.country, args.remoteIp)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getUserCountryForBilling', seqid)
    end

    def process_getUserCreateTime(seqid, iprot, oprot)
      args = read_args(iprot, GetUserCreateTime_args)
      result = GetUserCreateTime_result.new()
      begin
        result.success = @handler.getUserCreateTime()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getUserCreateTime', seqid)
    end

    def process_getUserIdentities(seqid, iprot, oprot)
      args = read_args(iprot, GetUserIdentities_args)
      result = GetUserIdentities_result.new()
      begin
        result.success = @handler.getUserIdentities()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getUserIdentities', seqid)
    end

    def process_getUserLanguage(seqid, iprot, oprot)
      args = read_args(iprot, GetUserLanguage_args)
      result = GetUserLanguage_result.new()
      begin
        result.success = @handler.getUserLanguage()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getUserLanguage', seqid)
    end

    def process_getUserMidsWhoAddedMe(seqid, iprot, oprot)
      args = read_args(iprot, GetUserMidsWhoAddedMe_args)
      result = GetUserMidsWhoAddedMe_result.new()
      begin
        result.success = @handler.getUserMidsWhoAddedMe()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getUserMidsWhoAddedMe', seqid)
    end

    def process_isGroupMember(seqid, iprot, oprot)
      args = read_args(iprot, IsGroupMember_args)
      result = IsGroupMember_result.new()
      begin
        result.success = @handler.isGroupMember(args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'isGroupMember', seqid)
    end

    def process_isInContact(seqid, iprot, oprot)
      args = read_args(iprot, IsInContact_args)
      result = IsInContact_result.new()
      begin
        result.success = @handler.isInContact(args.mid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'isInContact', seqid)
    end

    def process_registerChannelCP(seqid, iprot, oprot)
      args = read_args(iprot, RegisterChannelCP_args)
      result = RegisterChannelCP_result.new()
      begin
        result.success = @handler.registerChannelCP(args.cpId, args.registerPassword)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerChannelCP', seqid)
    end

    def process_removeNotificationStatus(seqid, iprot, oprot)
      args = read_args(iprot, RemoveNotificationStatus_args)
      result = RemoveNotificationStatus_result.new()
      begin
        @handler.removeNotificationStatus(args.notificationStatus)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'removeNotificationStatus', seqid)
    end

    def process_sendMessageForChannel(seqid, iprot, oprot)
      args = read_args(iprot, SendMessageForChannel_args)
      result = SendMessageForChannel_result.new()
      begin
        result.success = @handler.sendMessageForChannel(args.message)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendMessageForChannel', seqid)
    end

    def process_sendPinCodeOperation(seqid, iprot, oprot)
      args = read_args(iprot, SendPinCodeOperation_args)
      result = SendPinCodeOperation_result.new()
      begin
        @handler.sendPinCodeOperation(args.verifier)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendPinCodeOperation', seqid)
    end

    def process_updateProfileAttributeForChannel(seqid, iprot, oprot)
      args = read_args(iprot, UpdateProfileAttributeForChannel_args)
      result = UpdateProfileAttributeForChannel_result.new()
      begin
        @handler.updateProfileAttributeForChannel(args.profileAttribute, args.value)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateProfileAttributeForChannel', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class ActiveBuddySubscriberCount_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActiveBuddySubscriberCount_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddOperationForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OPTYPE = 1
    PARAM1 = 2
    PARAM2 = 3
    PARAM3 = 4

    FIELDS = {
      OPTYPE => {:type => ::Thrift::Types::I32, :name => 'opType', :enum_class => ::OpType},
      PARAM1 => {:type => ::Thrift::Types::STRING, :name => 'param1'},
      PARAM2 => {:type => ::Thrift::Types::STRING, :name => 'param2'},
      PARAM3 => {:type => ::Thrift::Types::STRING, :name => 'param3'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @opType.nil? || ::OpType::VALID_VALUES.include?(@opType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field opType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddOperationForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DisplayBuddySubscriberCount_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DisplayBuddySubscriberCount_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindContactByUseridWithoutAbuseBlockForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERID = 2

    FIELDS = {
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindContactByUseridWithoutAbuseBlockForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Contact},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllContactIdsForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllContactIdsForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCompactContacts_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LASTMODIFIEDTIMESTAMP = 2

    FIELDS = {
      LASTMODIFIEDTIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'lastModifiedTimestamp'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCompactContacts_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CompactContact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContactsForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDS = 2

    FIELDS = {
      IDS => {:type => ::Thrift::Types::LIST, :name => 'ids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContactsForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDisplayName_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MID = 2

    FIELDS = {
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDisplayName_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFavoriteMidsForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFavoriteMidsForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFriendMids_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFriendMids_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupMemberMids_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPID = 1

    FIELDS = {
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupMemberMids_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupsForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPIDS = 1

    FIELDS = {
      GROUPIDS => {:type => ::Thrift::Types::LIST, :name => 'groupIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupsForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Group}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetIdentityCredential_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetIdentityCredential_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::IdentityCredential},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetJoinedGroupIdsForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetJoinedGroupIdsForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMetaProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMetaProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::MetaProfile},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPrimaryClientForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPrimaryClientForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SimpleChannelClient},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfileForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfileForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Profile},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSimpleChannelContacts_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDS = 1

    FIELDS = {
      IDS => {:type => ::Thrift::Types::LIST, :name => 'ids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSimpleChannelContacts_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SimpleChannelContact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserCountryForBilling_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    COUNTRY = 2
    REMOTEIP = 3

    FIELDS = {
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'},
      REMOTEIP => {:type => ::Thrift::Types::STRING, :name => 'remoteIp'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserCountryForBilling_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserCreateTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserCreateTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserIdentities_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserIdentities_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I32, :enum_class => ::RegistrationType}, :value => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserLanguage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserLanguage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserMidsWhoAddedMe_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserMidsWhoAddedMe_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsGroupMember_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPID = 1

    FIELDS = {
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsGroupMember_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsInContact_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MID = 2

    FIELDS = {
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsInContact_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterChannelCP_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CPID = 2
    REGISTERPASSWORD = 3

    FIELDS = {
      CPID => {:type => ::Thrift::Types::STRING, :name => 'cpId'},
      REGISTERPASSWORD => {:type => ::Thrift::Types::STRING, :name => 'registerPassword'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterChannelCP_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveNotificationStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NOTIFICATIONSTATUS = 2

    FIELDS = {
      NOTIFICATIONSTATUS => {:type => ::Thrift::Types::I32, :name => 'notificationStatus', :enum_class => ::NotificationStatus}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @notificationStatus.nil? || ::NotificationStatus::VALID_VALUES.include?(@notificationStatus)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field notificationStatus!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveNotificationStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessageForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MESSAGE = 2

    FIELDS = {
      MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::Message}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessageForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Message},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendPinCodeOperation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VERIFIER = 1

    FIELDS = {
      VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendPinCodeOperation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProfileAttributeForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PROFILEATTRIBUTE = 2
    VALUE = 3

    FIELDS = {
      PROFILEATTRIBUTE => {:type => ::Thrift::Types::I32, :name => 'profileAttribute', :enum_class => ::ProfileAttribute},
      VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @profileAttribute.nil? || ::ProfileAttribute::VALID_VALUES.include?(@profileAttribute)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field profileAttribute!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProfileAttributeForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

