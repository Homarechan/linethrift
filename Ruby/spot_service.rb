#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'line_types'

module SpotService
  class Client
    include ::Thrift::Client

    def lookupByPhoneNumber(countryAreaCode, phoneNumber)
      send_lookupByPhoneNumber(countryAreaCode, phoneNumber)
      return recv_lookupByPhoneNumber()
    end

    def send_lookupByPhoneNumber(countryAreaCode, phoneNumber)
      send_message('lookupByPhoneNumber', LookupByPhoneNumber_args, :countryAreaCode => countryAreaCode, :phoneNumber => phoneNumber)
    end

    def recv_lookupByPhoneNumber()
      result = receive_message(LookupByPhoneNumber_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'lookupByPhoneNumber failed: unknown result')
    end

    def lookupNearby(location, category, query, countryAreaCode)
      send_lookupNearby(location, category, query, countryAreaCode)
      return recv_lookupNearby()
    end

    def send_lookupNearby(location, category, query, countryAreaCode)
      send_message('lookupNearby', LookupNearby_args, :location => location, :category => category, :query => query, :countryAreaCode => countryAreaCode)
    end

    def recv_lookupNearby()
      result = receive_message(LookupNearby_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'lookupNearby failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_lookupByPhoneNumber(seqid, iprot, oprot)
      args = read_args(iprot, LookupByPhoneNumber_args)
      result = LookupByPhoneNumber_result.new()
      begin
        result.success = @handler.lookupByPhoneNumber(args.countryAreaCode, args.phoneNumber)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'lookupByPhoneNumber', seqid)
    end

    def process_lookupNearby(seqid, iprot, oprot)
      args = read_args(iprot, LookupNearby_args)
      result = LookupNearby_result.new()
      begin
        result.success = @handler.lookupNearby(args.location, args.category, args.query, args.countryAreaCode)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'lookupNearby', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class LookupByPhoneNumber_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    COUNTRYAREACODE = 2
    PHONENUMBER = 3

    FIELDS = {
      COUNTRYAREACODE => {:type => ::Thrift::Types::STRING, :name => 'countryAreaCode'},
      PHONENUMBER => {:type => ::Thrift::Types::STRING, :name => 'phoneNumber'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LookupByPhoneNumber_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SpotPhoneNumberResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LookupNearby_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LOCATION = 2
    CATEGORY = 3
    QUERY = 4
    COUNTRYAREACODE = 5

    FIELDS = {
      LOCATION => {:type => ::Thrift::Types::STRUCT, :name => 'location', :class => ::Location},
      CATEGORY => {:type => ::Thrift::Types::I32, :name => 'category', :enum_class => ::SpotCategory},
      QUERY => {:type => ::Thrift::Types::STRING, :name => 'query'},
      COUNTRYAREACODE => {:type => ::Thrift::Types::STRING, :name => 'countryAreaCode'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @category.nil? || ::SpotCategory::VALID_VALUES.include?(@category)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field category!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LookupNearby_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SpotNearbyResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

