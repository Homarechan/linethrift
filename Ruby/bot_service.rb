#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'line_types'

module BotService
  class Client
    include ::Thrift::Client

    def notifyLeaveGroup(groupMid)
      send_notifyLeaveGroup(groupMid)
      recv_notifyLeaveGroup()
    end

    def send_notifyLeaveGroup(groupMid)
      send_message('notifyLeaveGroup', NotifyLeaveGroup_args, :groupMid => groupMid)
    end

    def recv_notifyLeaveGroup()
      result = receive_message(NotifyLeaveGroup_result)
      raise result.e unless result.e.nil?
      return
    end

    def notifyLeaveRoom(roomMid)
      send_notifyLeaveRoom(roomMid)
      recv_notifyLeaveRoom()
    end

    def send_notifyLeaveRoom(roomMid)
      send_message('notifyLeaveRoom', NotifyLeaveRoom_args, :roomMid => roomMid)
    end

    def recv_notifyLeaveRoom()
      result = receive_message(NotifyLeaveRoom_result)
      raise result.e unless result.e.nil?
      return
    end

    def getBotUseInfo(botMid)
      send_getBotUseInfo(botMid)
      return recv_getBotUseInfo()
    end

    def send_getBotUseInfo(botMid)
      send_message('getBotUseInfo', GetBotUseInfo_args, :botMid => botMid)
    end

    def recv_getBotUseInfo()
      result = receive_message(GetBotUseInfo_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getBotUseInfo failed: unknown result')
    end

    def sendChatCheckedByWatermark(seq, mid, watermark, sessionId)
      send_sendChatCheckedByWatermark(seq, mid, watermark, sessionId)
      recv_sendChatCheckedByWatermark()
    end

    def send_sendChatCheckedByWatermark(seq, mid, watermark, sessionId)
      send_message('sendChatCheckedByWatermark', SendChatCheckedByWatermark_args, :seq => seq, :mid => mid, :watermark => watermark, :sessionId => sessionId)
    end

    def recv_sendChatCheckedByWatermark()
      result = receive_message(SendChatCheckedByWatermark_result)
      raise result.e unless result.e.nil?
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_notifyLeaveGroup(seqid, iprot, oprot)
      args = read_args(iprot, NotifyLeaveGroup_args)
      result = NotifyLeaveGroup_result.new()
      begin
        @handler.notifyLeaveGroup(args.groupMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'notifyLeaveGroup', seqid)
    end

    def process_notifyLeaveRoom(seqid, iprot, oprot)
      args = read_args(iprot, NotifyLeaveRoom_args)
      result = NotifyLeaveRoom_result.new()
      begin
        @handler.notifyLeaveRoom(args.roomMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'notifyLeaveRoom', seqid)
    end

    def process_getBotUseInfo(seqid, iprot, oprot)
      args = read_args(iprot, GetBotUseInfo_args)
      result = GetBotUseInfo_result.new()
      begin
        result.success = @handler.getBotUseInfo(args.botMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getBotUseInfo', seqid)
    end

    def process_sendChatCheckedByWatermark(seqid, iprot, oprot)
      args = read_args(iprot, SendChatCheckedByWatermark_args)
      result = SendChatCheckedByWatermark_result.new()
      begin
        @handler.sendChatCheckedByWatermark(args.seq, args.mid, args.watermark, args.sessionId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendChatCheckedByWatermark', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class NotifyLeaveGroup_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPMID = 1

    FIELDS = {
      GROUPMID => {:type => ::Thrift::Types::STRING, :name => 'groupMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyLeaveGroup_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyLeaveRoom_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ROOMMID = 1

    FIELDS = {
      ROOMMID => {:type => ::Thrift::Types::STRING, :name => 'roomMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyLeaveRoom_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBotUseInfo_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BOTMID = 2

    FIELDS = {
      BOTMID => {:type => ::Thrift::Types::STRING, :name => 'botMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBotUseInfo_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::BotUseInfo},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendChatCheckedByWatermark_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    MID = 2
    WATERMARK = 3
    SESSIONID = 4

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
      WATERMARK => {:type => ::Thrift::Types::I64, :name => 'watermark'},
      SESSIONID => {:type => ::Thrift::Types::BYTE, :name => 'sessionId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendChatCheckedByWatermark_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

