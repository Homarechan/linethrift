#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'line_types'

module ShopService
  class Client
    include ::Thrift::Client

    def buyCoinProduct(paymentReservation)
      send_buyCoinProduct(paymentReservation)
      recv_buyCoinProduct()
    end

    def send_buyCoinProduct(paymentReservation)
      send_message('buyCoinProduct', BuyCoinProduct_args, :paymentReservation => paymentReservation)
    end

    def recv_buyCoinProduct()
      result = receive_message(BuyCoinProduct_result)
      raise result.e unless result.e.nil?
      return
    end

    def buyFreeProduct(receiverMid, productId, messageTemplate, language, country, packageId)
      send_buyFreeProduct(receiverMid, productId, messageTemplate, language, country, packageId)
      recv_buyFreeProduct()
    end

    def send_buyFreeProduct(receiverMid, productId, messageTemplate, language, country, packageId)
      send_message('buyFreeProduct', BuyFreeProduct_args, :receiverMid => receiverMid, :productId => productId, :messageTemplate => messageTemplate, :language => language, :country => country, :packageId => packageId)
    end

    def recv_buyFreeProduct()
      result = receive_message(BuyFreeProduct_result)
      raise result.e unless result.e.nil?
      return
    end

    def buyMustbuyProduct(receiverMid, productId, messageTemplate, language, country, packageId, serialNumber)
      send_buyMustbuyProduct(receiverMid, productId, messageTemplate, language, country, packageId, serialNumber)
      recv_buyMustbuyProduct()
    end

    def send_buyMustbuyProduct(receiverMid, productId, messageTemplate, language, country, packageId, serialNumber)
      send_message('buyMustbuyProduct', BuyMustbuyProduct_args, :receiverMid => receiverMid, :productId => productId, :messageTemplate => messageTemplate, :language => language, :country => country, :packageId => packageId, :serialNumber => serialNumber)
    end

    def recv_buyMustbuyProduct()
      result = receive_message(BuyMustbuyProduct_result)
      raise result.e unless result.e.nil?
      return
    end

    def checkCanReceivePresent(recipientMid, packageId, language, country)
      send_checkCanReceivePresent(recipientMid, packageId, language, country)
      recv_checkCanReceivePresent()
    end

    def send_checkCanReceivePresent(recipientMid, packageId, language, country)
      send_message('checkCanReceivePresent', CheckCanReceivePresent_args, :recipientMid => recipientMid, :packageId => packageId, :language => language, :country => country)
    end

    def recv_checkCanReceivePresent()
      result = receive_message(CheckCanReceivePresent_result)
      raise result.e unless result.e.nil?
      return
    end

    def getActivePurchases(start, size, language, country)
      send_getActivePurchases(start, size, language, country)
      return recv_getActivePurchases()
    end

    def send_getActivePurchases(start, size, language, country)
      send_message('getActivePurchases', GetActivePurchases_args, :start => start, :size => size, :language => language, :country => country)
    end

    def recv_getActivePurchases()
      result = receive_message(GetActivePurchases_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getActivePurchases failed: unknown result')
    end

    def getActivePurchaseVersions(start, size, language, country)
      send_getActivePurchaseVersions(start, size, language, country)
      return recv_getActivePurchaseVersions()
    end

    def send_getActivePurchaseVersions(start, size, language, country)
      send_message('getActivePurchaseVersions', GetActivePurchaseVersions_args, :start => start, :size => size, :language => language, :country => country)
    end

    def recv_getActivePurchaseVersions()
      result = receive_message(GetActivePurchaseVersions_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getActivePurchaseVersions failed: unknown result')
    end

    def getCoinProducts(appStoreCode, country, language)
      send_getCoinProducts(appStoreCode, country, language)
      return recv_getCoinProducts()
    end

    def send_getCoinProducts(appStoreCode, country, language)
      send_message('getCoinProducts', GetCoinProducts_args, :appStoreCode => appStoreCode, :country => country, :language => language)
    end

    def recv_getCoinProducts()
      result = receive_message(GetCoinProducts_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCoinProducts failed: unknown result')
    end

    def getCoinProductsByPgCode(appStoreCode, pgCode, country, language)
      send_getCoinProductsByPgCode(appStoreCode, pgCode, country, language)
      return recv_getCoinProductsByPgCode()
    end

    def send_getCoinProductsByPgCode(appStoreCode, pgCode, country, language)
      send_message('getCoinProductsByPgCode', GetCoinProductsByPgCode_args, :appStoreCode => appStoreCode, :pgCode => pgCode, :country => country, :language => language)
    end

    def recv_getCoinProductsByPgCode()
      result = receive_message(GetCoinProductsByPgCode_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCoinProductsByPgCode failed: unknown result')
    end

    def getCoinPurchaseHistory(request)
      send_getCoinPurchaseHistory(request)
      return recv_getCoinPurchaseHistory()
    end

    def send_getCoinPurchaseHistory(request)
      send_message('getCoinPurchaseHistory', GetCoinPurchaseHistory_args, :request => request)
    end

    def recv_getCoinPurchaseHistory()
      result = receive_message(GetCoinPurchaseHistory_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCoinPurchaseHistory failed: unknown result')
    end

    def getCoinUseAndRefundHistory(request)
      send_getCoinUseAndRefundHistory(request)
      return recv_getCoinUseAndRefundHistory()
    end

    def send_getCoinUseAndRefundHistory(request)
      send_message('getCoinUseAndRefundHistory', GetCoinUseAndRefundHistory_args, :request => request)
    end

    def recv_getCoinUseAndRefundHistory()
      result = receive_message(GetCoinUseAndRefundHistory_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCoinUseAndRefundHistory failed: unknown result')
    end

    def getDownloads(start, size, language, country)
      send_getDownloads(start, size, language, country)
      return recv_getDownloads()
    end

    def send_getDownloads(start, size, language, country)
      send_message('getDownloads', GetDownloads_args, :start => start, :size => size, :language => language, :country => country)
    end

    def recv_getDownloads()
      result = receive_message(GetDownloads_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getDownloads failed: unknown result')
    end

    def getEventPackages(start, size, language, country)
      send_getEventPackages(start, size, language, country)
      return recv_getEventPackages()
    end

    def send_getEventPackages(start, size, language, country)
      send_message('getEventPackages', GetEventPackages_args, :start => start, :size => size, :language => language, :country => country)
    end

    def recv_getEventPackages()
      result = receive_message(GetEventPackages_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getEventPackages failed: unknown result')
    end

    def getNewlyReleasedPackages(start, size, language, country)
      send_getNewlyReleasedPackages(start, size, language, country)
      return recv_getNewlyReleasedPackages()
    end

    def send_getNewlyReleasedPackages(start, size, language, country)
      send_message('getNewlyReleasedPackages', GetNewlyReleasedPackages_args, :start => start, :size => size, :language => language, :country => country)
    end

    def recv_getNewlyReleasedPackages()
      result = receive_message(GetNewlyReleasedPackages_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getNewlyReleasedPackages failed: unknown result')
    end

    def getPopularPackages(start, size, language, country)
      send_getPopularPackages(start, size, language, country)
      return recv_getPopularPackages()
    end

    def send_getPopularPackages(start, size, language, country)
      send_message('getPopularPackages', GetPopularPackages_args, :start => start, :size => size, :language => language, :country => country)
    end

    def recv_getPopularPackages()
      result = receive_message(GetPopularPackages_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPopularPackages failed: unknown result')
    end

    def getPresentsReceived(start, size, language, country)
      send_getPresentsReceived(start, size, language, country)
      return recv_getPresentsReceived()
    end

    def send_getPresentsReceived(start, size, language, country)
      send_message('getPresentsReceived', GetPresentsReceived_args, :start => start, :size => size, :language => language, :country => country)
    end

    def recv_getPresentsReceived()
      result = receive_message(GetPresentsReceived_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPresentsReceived failed: unknown result')
    end

    def getPresentsSent(start, size, language, country)
      send_getPresentsSent(start, size, language, country)
      return recv_getPresentsSent()
    end

    def send_getPresentsSent(start, size, language, country)
      send_message('getPresentsSent', GetPresentsSent_args, :start => start, :size => size, :language => language, :country => country)
    end

    def recv_getPresentsSent()
      result = receive_message(GetPresentsSent_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPresentsSent failed: unknown result')
    end

    def getProduct(packageID, language, country)
      send_getProduct(packageID, language, country)
      return recv_getProduct()
    end

    def send_getProduct(packageID, language, country)
      send_message('getProduct', GetProduct_args, :packageID => packageID, :language => language, :country => country)
    end

    def recv_getProduct()
      result = receive_message(GetProduct_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProduct failed: unknown result')
    end

    def getProductList(productIdList, language, country)
      send_getProductList(productIdList, language, country)
      return recv_getProductList()
    end

    def send_getProductList(productIdList, language, country)
      send_message('getProductList', GetProductList_args, :productIdList => productIdList, :language => language, :country => country)
    end

    def recv_getProductList()
      result = receive_message(GetProductList_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProductList failed: unknown result')
    end

    def getProductListWithCarrier(productIdList, language, country, carrierCode)
      send_getProductListWithCarrier(productIdList, language, country, carrierCode)
      return recv_getProductListWithCarrier()
    end

    def send_getProductListWithCarrier(productIdList, language, country, carrierCode)
      send_message('getProductListWithCarrier', GetProductListWithCarrier_args, :productIdList => productIdList, :language => language, :country => country, :carrierCode => carrierCode)
    end

    def recv_getProductListWithCarrier()
      result = receive_message(GetProductListWithCarrier_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProductListWithCarrier failed: unknown result')
    end

    def getProductWithCarrier(packageID, language, country, carrierCode)
      send_getProductWithCarrier(packageID, language, country, carrierCode)
      return recv_getProductWithCarrier()
    end

    def send_getProductWithCarrier(packageID, language, country, carrierCode)
      send_message('getProductWithCarrier', GetProductWithCarrier_args, :packageID => packageID, :language => language, :country => country, :carrierCode => carrierCode)
    end

    def recv_getProductWithCarrier()
      result = receive_message(GetProductWithCarrier_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProductWithCarrier failed: unknown result')
    end

    def getPurchaseHistory(start, size, language, country)
      send_getPurchaseHistory(start, size, language, country)
      return recv_getPurchaseHistory()
    end

    def send_getPurchaseHistory(start, size, language, country)
      send_message('getPurchaseHistory', GetPurchaseHistory_args, :start => start, :size => size, :language => language, :country => country)
    end

    def recv_getPurchaseHistory()
      result = receive_message(GetPurchaseHistory_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPurchaseHistory failed: unknown result')
    end

    def getTotalBalance(appStoreCode)
      send_getTotalBalance(appStoreCode)
      return recv_getTotalBalance()
    end

    def send_getTotalBalance(appStoreCode)
      send_message('getTotalBalance', GetTotalBalance_args, :appStoreCode => appStoreCode)
    end

    def recv_getTotalBalance()
      result = receive_message(GetTotalBalance_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getTotalBalance failed: unknown result')
    end

    def notifyDownloaded(packageId, language)
      send_notifyDownloaded(packageId, language)
      return recv_notifyDownloaded()
    end

    def send_notifyDownloaded(packageId, language)
      send_message('notifyDownloaded', NotifyDownloaded_args, :packageId => packageId, :language => language)
    end

    def recv_notifyDownloaded()
      result = receive_message(NotifyDownloaded_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'notifyDownloaded failed: unknown result')
    end

    def reserveCoinPurchase(request)
      send_reserveCoinPurchase(request)
      return recv_reserveCoinPurchase()
    end

    def send_reserveCoinPurchase(request)
      send_message('reserveCoinPurchase', ReserveCoinPurchase_args, :request => request)
    end

    def recv_reserveCoinPurchase()
      result = receive_message(ReserveCoinPurchase_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'reserveCoinPurchase failed: unknown result')
    end

    def reservePayment(paymentReservation)
      send_reservePayment(paymentReservation)
      return recv_reservePayment()
    end

    def send_reservePayment(paymentReservation)
      send_message('reservePayment', ReservePayment_args, :paymentReservation => paymentReservation)
    end

    def recv_reservePayment()
      result = receive_message(ReservePayment_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'reservePayment failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_buyCoinProduct(seqid, iprot, oprot)
      args = read_args(iprot, BuyCoinProduct_args)
      result = BuyCoinProduct_result.new()
      begin
        @handler.buyCoinProduct(args.paymentReservation)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'buyCoinProduct', seqid)
    end

    def process_buyFreeProduct(seqid, iprot, oprot)
      args = read_args(iprot, BuyFreeProduct_args)
      result = BuyFreeProduct_result.new()
      begin
        @handler.buyFreeProduct(args.receiverMid, args.productId, args.messageTemplate, args.language, args.country, args.packageId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'buyFreeProduct', seqid)
    end

    def process_buyMustbuyProduct(seqid, iprot, oprot)
      args = read_args(iprot, BuyMustbuyProduct_args)
      result = BuyMustbuyProduct_result.new()
      begin
        @handler.buyMustbuyProduct(args.receiverMid, args.productId, args.messageTemplate, args.language, args.country, args.packageId, args.serialNumber)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'buyMustbuyProduct', seqid)
    end

    def process_checkCanReceivePresent(seqid, iprot, oprot)
      args = read_args(iprot, CheckCanReceivePresent_args)
      result = CheckCanReceivePresent_result.new()
      begin
        @handler.checkCanReceivePresent(args.recipientMid, args.packageId, args.language, args.country)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'checkCanReceivePresent', seqid)
    end

    def process_getActivePurchases(seqid, iprot, oprot)
      args = read_args(iprot, GetActivePurchases_args)
      result = GetActivePurchases_result.new()
      begin
        result.success = @handler.getActivePurchases(args.start, args.size, args.language, args.country)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getActivePurchases', seqid)
    end

    def process_getActivePurchaseVersions(seqid, iprot, oprot)
      args = read_args(iprot, GetActivePurchaseVersions_args)
      result = GetActivePurchaseVersions_result.new()
      begin
        result.success = @handler.getActivePurchaseVersions(args.start, args.size, args.language, args.country)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getActivePurchaseVersions', seqid)
    end

    def process_getCoinProducts(seqid, iprot, oprot)
      args = read_args(iprot, GetCoinProducts_args)
      result = GetCoinProducts_result.new()
      begin
        result.success = @handler.getCoinProducts(args.appStoreCode, args.country, args.language)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getCoinProducts', seqid)
    end

    def process_getCoinProductsByPgCode(seqid, iprot, oprot)
      args = read_args(iprot, GetCoinProductsByPgCode_args)
      result = GetCoinProductsByPgCode_result.new()
      begin
        result.success = @handler.getCoinProductsByPgCode(args.appStoreCode, args.pgCode, args.country, args.language)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getCoinProductsByPgCode', seqid)
    end

    def process_getCoinPurchaseHistory(seqid, iprot, oprot)
      args = read_args(iprot, GetCoinPurchaseHistory_args)
      result = GetCoinPurchaseHistory_result.new()
      begin
        result.success = @handler.getCoinPurchaseHistory(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getCoinPurchaseHistory', seqid)
    end

    def process_getCoinUseAndRefundHistory(seqid, iprot, oprot)
      args = read_args(iprot, GetCoinUseAndRefundHistory_args)
      result = GetCoinUseAndRefundHistory_result.new()
      begin
        result.success = @handler.getCoinUseAndRefundHistory(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getCoinUseAndRefundHistory', seqid)
    end

    def process_getDownloads(seqid, iprot, oprot)
      args = read_args(iprot, GetDownloads_args)
      result = GetDownloads_result.new()
      begin
        result.success = @handler.getDownloads(args.start, args.size, args.language, args.country)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getDownloads', seqid)
    end

    def process_getEventPackages(seqid, iprot, oprot)
      args = read_args(iprot, GetEventPackages_args)
      result = GetEventPackages_result.new()
      begin
        result.success = @handler.getEventPackages(args.start, args.size, args.language, args.country)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getEventPackages', seqid)
    end

    def process_getNewlyReleasedPackages(seqid, iprot, oprot)
      args = read_args(iprot, GetNewlyReleasedPackages_args)
      result = GetNewlyReleasedPackages_result.new()
      begin
        result.success = @handler.getNewlyReleasedPackages(args.start, args.size, args.language, args.country)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getNewlyReleasedPackages', seqid)
    end

    def process_getPopularPackages(seqid, iprot, oprot)
      args = read_args(iprot, GetPopularPackages_args)
      result = GetPopularPackages_result.new()
      begin
        result.success = @handler.getPopularPackages(args.start, args.size, args.language, args.country)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPopularPackages', seqid)
    end

    def process_getPresentsReceived(seqid, iprot, oprot)
      args = read_args(iprot, GetPresentsReceived_args)
      result = GetPresentsReceived_result.new()
      begin
        result.success = @handler.getPresentsReceived(args.start, args.size, args.language, args.country)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPresentsReceived', seqid)
    end

    def process_getPresentsSent(seqid, iprot, oprot)
      args = read_args(iprot, GetPresentsSent_args)
      result = GetPresentsSent_result.new()
      begin
        result.success = @handler.getPresentsSent(args.start, args.size, args.language, args.country)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPresentsSent', seqid)
    end

    def process_getProduct(seqid, iprot, oprot)
      args = read_args(iprot, GetProduct_args)
      result = GetProduct_result.new()
      begin
        result.success = @handler.getProduct(args.packageID, args.language, args.country)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getProduct', seqid)
    end

    def process_getProductList(seqid, iprot, oprot)
      args = read_args(iprot, GetProductList_args)
      result = GetProductList_result.new()
      begin
        result.success = @handler.getProductList(args.productIdList, args.language, args.country)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getProductList', seqid)
    end

    def process_getProductListWithCarrier(seqid, iprot, oprot)
      args = read_args(iprot, GetProductListWithCarrier_args)
      result = GetProductListWithCarrier_result.new()
      begin
        result.success = @handler.getProductListWithCarrier(args.productIdList, args.language, args.country, args.carrierCode)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getProductListWithCarrier', seqid)
    end

    def process_getProductWithCarrier(seqid, iprot, oprot)
      args = read_args(iprot, GetProductWithCarrier_args)
      result = GetProductWithCarrier_result.new()
      begin
        result.success = @handler.getProductWithCarrier(args.packageID, args.language, args.country, args.carrierCode)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getProductWithCarrier', seqid)
    end

    def process_getPurchaseHistory(seqid, iprot, oprot)
      args = read_args(iprot, GetPurchaseHistory_args)
      result = GetPurchaseHistory_result.new()
      begin
        result.success = @handler.getPurchaseHistory(args.start, args.size, args.language, args.country)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPurchaseHistory', seqid)
    end

    def process_getTotalBalance(seqid, iprot, oprot)
      args = read_args(iprot, GetTotalBalance_args)
      result = GetTotalBalance_result.new()
      begin
        result.success = @handler.getTotalBalance(args.appStoreCode)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getTotalBalance', seqid)
    end

    def process_notifyDownloaded(seqid, iprot, oprot)
      args = read_args(iprot, NotifyDownloaded_args)
      result = NotifyDownloaded_result.new()
      begin
        result.success = @handler.notifyDownloaded(args.packageId, args.language)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'notifyDownloaded', seqid)
    end

    def process_reserveCoinPurchase(seqid, iprot, oprot)
      args = read_args(iprot, ReserveCoinPurchase_args)
      result = ReserveCoinPurchase_result.new()
      begin
        result.success = @handler.reserveCoinPurchase(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'reserveCoinPurchase', seqid)
    end

    def process_reservePayment(seqid, iprot, oprot)
      args = read_args(iprot, ReservePayment_args)
      result = ReservePayment_result.new()
      begin
        result.success = @handler.reservePayment(args.paymentReservation)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'reservePayment', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class BuyCoinProduct_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PAYMENTRESERVATION = 2

    FIELDS = {
      PAYMENTRESERVATION => {:type => ::Thrift::Types::STRUCT, :name => 'paymentReservation', :class => ::PaymentReservation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BuyCoinProduct_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BuyFreeProduct_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECEIVERMID = 2
    PRODUCTID = 3
    MESSAGETEMPLATE = 4
    LANGUAGE = 5
    COUNTRY = 6
    PACKAGEID = 7

    FIELDS = {
      RECEIVERMID => {:type => ::Thrift::Types::STRING, :name => 'receiverMid'},
      PRODUCTID => {:type => ::Thrift::Types::STRING, :name => 'productId'},
      MESSAGETEMPLATE => {:type => ::Thrift::Types::I32, :name => 'messageTemplate'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'},
      PACKAGEID => {:type => ::Thrift::Types::I64, :name => 'packageId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BuyFreeProduct_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BuyMustbuyProduct_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECEIVERMID = 2
    PRODUCTID = 3
    MESSAGETEMPLATE = 4
    LANGUAGE = 5
    COUNTRY = 6
    PACKAGEID = 7
    SERIALNUMBER = 8

    FIELDS = {
      RECEIVERMID => {:type => ::Thrift::Types::STRING, :name => 'receiverMid'},
      PRODUCTID => {:type => ::Thrift::Types::STRING, :name => 'productId'},
      MESSAGETEMPLATE => {:type => ::Thrift::Types::I32, :name => 'messageTemplate'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'},
      PACKAGEID => {:type => ::Thrift::Types::I64, :name => 'packageId'},
      SERIALNUMBER => {:type => ::Thrift::Types::STRING, :name => 'serialNumber'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BuyMustbuyProduct_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CheckCanReceivePresent_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECIPIENTMID = 2
    PACKAGEID = 3
    LANGUAGE = 4
    COUNTRY = 5

    FIELDS = {
      RECIPIENTMID => {:type => ::Thrift::Types::STRING, :name => 'recipientMid'},
      PACKAGEID => {:type => ::Thrift::Types::I64, :name => 'packageId'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CheckCanReceivePresent_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetActivePurchases_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    START = 2
    SIZE = 3
    LANGUAGE = 4
    COUNTRY = 5

    FIELDS = {
      START => {:type => ::Thrift::Types::I64, :name => 'start'},
      SIZE => {:type => ::Thrift::Types::I32, :name => 'size'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetActivePurchases_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ProductList},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetActivePurchaseVersions_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    START = 2
    SIZE = 3
    LANGUAGE = 4
    COUNTRY = 5

    FIELDS = {
      START => {:type => ::Thrift::Types::I64, :name => 'start'},
      SIZE => {:type => ::Thrift::Types::I32, :name => 'size'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetActivePurchaseVersions_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ProductSimpleList},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCoinProducts_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    APPSTORECODE = 2
    COUNTRY = 3
    LANGUAGE = 4

    FIELDS = {
      APPSTORECODE => {:type => ::Thrift::Types::I32, :name => 'appStoreCode', :enum_class => ::PaymentType},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @appStoreCode.nil? || ::PaymentType::VALID_VALUES.include?(@appStoreCode)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field appStoreCode!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCoinProducts_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CoinProductItem}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCoinProductsByPgCode_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    APPSTORECODE = 2
    PGCODE = 3
    COUNTRY = 4
    LANGUAGE = 5

    FIELDS = {
      APPSTORECODE => {:type => ::Thrift::Types::I32, :name => 'appStoreCode', :enum_class => ::PaymentType},
      PGCODE => {:type => ::Thrift::Types::I32, :name => 'pgCode', :enum_class => ::PaymentPgType},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @appStoreCode.nil? || ::PaymentType::VALID_VALUES.include?(@appStoreCode)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field appStoreCode!')
      end
      unless @pgCode.nil? || ::PaymentPgType::VALID_VALUES.include?(@pgCode)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field pgCode!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCoinProductsByPgCode_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CoinProductItem}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCoinPurchaseHistory_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 2

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CoinHistoryCondition}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCoinPurchaseHistory_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CoinHistoryResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCoinUseAndRefundHistory_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 2

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CoinHistoryCondition}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCoinUseAndRefundHistory_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CoinHistoryResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDownloads_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    START = 2
    SIZE = 3
    LANGUAGE = 4
    COUNTRY = 5

    FIELDS = {
      START => {:type => ::Thrift::Types::I64, :name => 'start'},
      SIZE => {:type => ::Thrift::Types::I32, :name => 'size'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDownloads_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ProductList},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetEventPackages_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    START = 2
    SIZE = 3
    LANGUAGE = 4
    COUNTRY = 5

    FIELDS = {
      START => {:type => ::Thrift::Types::I64, :name => 'start'},
      SIZE => {:type => ::Thrift::Types::I32, :name => 'size'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetEventPackages_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ProductList},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNewlyReleasedPackages_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    START = 2
    SIZE = 3
    LANGUAGE = 4
    COUNTRY = 5

    FIELDS = {
      START => {:type => ::Thrift::Types::I64, :name => 'start'},
      SIZE => {:type => ::Thrift::Types::I32, :name => 'size'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNewlyReleasedPackages_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ProductList},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPopularPackages_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    START = 2
    SIZE = 3
    LANGUAGE = 4
    COUNTRY = 5

    FIELDS = {
      START => {:type => ::Thrift::Types::I64, :name => 'start'},
      SIZE => {:type => ::Thrift::Types::I32, :name => 'size'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPopularPackages_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ProductList},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPresentsReceived_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    START = 2
    SIZE = 3
    LANGUAGE = 4
    COUNTRY = 5

    FIELDS = {
      START => {:type => ::Thrift::Types::I64, :name => 'start'},
      SIZE => {:type => ::Thrift::Types::I32, :name => 'size'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPresentsReceived_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ProductList},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPresentsSent_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    START = 2
    SIZE = 3
    LANGUAGE = 4
    COUNTRY = 5

    FIELDS = {
      START => {:type => ::Thrift::Types::I64, :name => 'start'},
      SIZE => {:type => ::Thrift::Types::I32, :name => 'size'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPresentsSent_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ProductList},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProduct_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PACKAGEID = 2
    LANGUAGE = 3
    COUNTRY = 4

    FIELDS = {
      PACKAGEID => {:type => ::Thrift::Types::I64, :name => 'packageID'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProduct_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Product},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProductList_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PRODUCTIDLIST = 2
    LANGUAGE = 3
    COUNTRY = 4

    FIELDS = {
      PRODUCTIDLIST => {:type => ::Thrift::Types::LIST, :name => 'productIdList', :element => {:type => ::Thrift::Types::STRING}},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProductList_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ProductList},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProductListWithCarrier_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PRODUCTIDLIST = 2
    LANGUAGE = 3
    COUNTRY = 4
    CARRIERCODE = 5

    FIELDS = {
      PRODUCTIDLIST => {:type => ::Thrift::Types::LIST, :name => 'productIdList', :element => {:type => ::Thrift::Types::STRING}},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'},
      CARRIERCODE => {:type => ::Thrift::Types::STRING, :name => 'carrierCode'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProductListWithCarrier_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ProductList},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProductWithCarrier_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PACKAGEID = 2
    LANGUAGE = 3
    COUNTRY = 4
    CARRIERCODE = 5

    FIELDS = {
      PACKAGEID => {:type => ::Thrift::Types::I64, :name => 'packageID'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'},
      CARRIERCODE => {:type => ::Thrift::Types::STRING, :name => 'carrierCode'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProductWithCarrier_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Product},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPurchaseHistory_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    START = 2
    SIZE = 3
    LANGUAGE = 4
    COUNTRY = 5

    FIELDS = {
      START => {:type => ::Thrift::Types::I64, :name => 'start'},
      SIZE => {:type => ::Thrift::Types::I32, :name => 'size'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPurchaseHistory_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ProductList},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetTotalBalance_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    APPSTORECODE = 2

    FIELDS = {
      APPSTORECODE => {:type => ::Thrift::Types::I32, :name => 'appStoreCode', :enum_class => ::PaymentType}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @appStoreCode.nil? || ::PaymentType::VALID_VALUES.include?(@appStoreCode)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field appStoreCode!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetTotalBalance_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Coin},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyDownloaded_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PACKAGEID = 2
    LANGUAGE = 3

    FIELDS = {
      PACKAGEID => {:type => ::Thrift::Types::I64, :name => 'packageId'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyDownloaded_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReserveCoinPurchase_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 2

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CoinPurchaseReservation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReserveCoinPurchase_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PaymentReservationResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReservePayment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PAYMENTRESERVATION = 2

    FIELDS = {
      PAYMENTRESERVATION => {:type => ::Thrift::Types::STRUCT, :name => 'paymentReservation', :class => ::PaymentReservation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReservePayment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PaymentReservationResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

