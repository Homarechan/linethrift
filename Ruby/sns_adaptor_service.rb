#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'line_types'

module SnsAdaptorService
  class Client
    include ::Thrift::Client

    def getSnsFriends(snsIdType, snsAccessToken, startIdx, limit)
      send_getSnsFriends(snsIdType, snsAccessToken, startIdx, limit)
      return recv_getSnsFriends()
    end

    def send_getSnsFriends(snsIdType, snsAccessToken, startIdx, limit)
      send_message('getSnsFriends', GetSnsFriends_args, :snsIdType => snsIdType, :snsAccessToken => snsAccessToken, :startIdx => startIdx, :limit => limit)
    end

    def recv_getSnsFriends()
      result = receive_message(GetSnsFriends_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSnsFriends failed: unknown result')
    end

    def getSnsMyProfile(snsIdType, snsAccessToken)
      send_getSnsMyProfile(snsIdType, snsAccessToken)
      return recv_getSnsMyProfile()
    end

    def send_getSnsMyProfile(snsIdType, snsAccessToken)
      send_message('getSnsMyProfile', GetSnsMyProfile_args, :snsIdType => snsIdType, :snsAccessToken => snsAccessToken)
    end

    def recv_getSnsMyProfile()
      result = receive_message(GetSnsMyProfile_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSnsMyProfile failed: unknown result')
    end

    def postSnsInvitationMessage(snsIdType, snsAccessToken, toSnsUserId)
      send_postSnsInvitationMessage(snsIdType, snsAccessToken, toSnsUserId)
      recv_postSnsInvitationMessage()
    end

    def send_postSnsInvitationMessage(snsIdType, snsAccessToken, toSnsUserId)
      send_message('postSnsInvitationMessage', PostSnsInvitationMessage_args, :snsIdType => snsIdType, :snsAccessToken => snsAccessToken, :toSnsUserId => toSnsUserId)
    end

    def recv_postSnsInvitationMessage()
      result = receive_message(PostSnsInvitationMessage_result)
      raise result.e unless result.e.nil?
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_getSnsFriends(seqid, iprot, oprot)
      args = read_args(iprot, GetSnsFriends_args)
      result = GetSnsFriends_result.new()
      begin
        result.success = @handler.getSnsFriends(args.snsIdType, args.snsAccessToken, args.startIdx, args.limit)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getSnsFriends', seqid)
    end

    def process_getSnsMyProfile(seqid, iprot, oprot)
      args = read_args(iprot, GetSnsMyProfile_args)
      result = GetSnsMyProfile_result.new()
      begin
        result.success = @handler.getSnsMyProfile(args.snsIdType, args.snsAccessToken)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getSnsMyProfile', seqid)
    end

    def process_postSnsInvitationMessage(seqid, iprot, oprot)
      args = read_args(iprot, PostSnsInvitationMessage_args)
      result = PostSnsInvitationMessage_result.new()
      begin
        @handler.postSnsInvitationMessage(args.snsIdType, args.snsAccessToken, args.toSnsUserId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'postSnsInvitationMessage', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class GetSnsFriends_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SNSIDTYPE = 2
    SNSACCESSTOKEN = 3
    STARTIDX = 4
    LIMIT = 5

    FIELDS = {
      SNSIDTYPE => {:type => ::Thrift::Types::I32, :name => 'snsIdType', :enum_class => ::SnsIdType},
      SNSACCESSTOKEN => {:type => ::Thrift::Types::STRING, :name => 'snsAccessToken'},
      STARTIDX => {:type => ::Thrift::Types::I32, :name => 'startIdx'},
      LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @snsIdType.nil? || ::SnsIdType::VALID_VALUES.include?(@snsIdType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field snsIdType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSnsFriends_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SnsFriends},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSnsMyProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SNSIDTYPE = 2
    SNSACCESSTOKEN = 3

    FIELDS = {
      SNSIDTYPE => {:type => ::Thrift::Types::I32, :name => 'snsIdType', :enum_class => ::SnsIdType},
      SNSACCESSTOKEN => {:type => ::Thrift::Types::STRING, :name => 'snsAccessToken'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @snsIdType.nil? || ::SnsIdType::VALID_VALUES.include?(@snsIdType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field snsIdType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSnsMyProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SnsProfile},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class PostSnsInvitationMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SNSIDTYPE = 2
    SNSACCESSTOKEN = 3
    TOSNSUSERID = 4

    FIELDS = {
      SNSIDTYPE => {:type => ::Thrift::Types::I32, :name => 'snsIdType', :enum_class => ::SnsIdType},
      SNSACCESSTOKEN => {:type => ::Thrift::Types::STRING, :name => 'snsAccessToken'},
      TOSNSUSERID => {:type => ::Thrift::Types::STRING, :name => 'toSnsUserId'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @snsIdType.nil? || ::SnsIdType::VALID_VALUES.include?(@snsIdType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field snsIdType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class PostSnsInvitationMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

