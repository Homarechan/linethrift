#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'line_types'

module CallService
  class Client
    include ::Thrift::Client

    def getUserStatus(mid)
      send_getUserStatus(mid)
      return recv_getUserStatus()
    end

    def send_getUserStatus(mid)
      send_message('getUserStatus', GetUserStatus_args, :mid => mid)
    end

    def recv_getUserStatus()
      result = receive_message(GetUserStatus_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserStatus failed: unknown result')
    end

    def updateProfileAttributeForChannel(profileAttribute, value)
      send_updateProfileAttributeForChannel(profileAttribute, value)
      recv_updateProfileAttributeForChannel()
    end

    def send_updateProfileAttributeForChannel(profileAttribute, value)
      send_message('updateProfileAttributeForChannel', UpdateProfileAttributeForChannel_args, :profileAttribute => profileAttribute, :value => value)
    end

    def recv_updateProfileAttributeForChannel()
      result = receive_message(UpdateProfileAttributeForChannel_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateExtendedProfileAttribute(attr, extendedProfile)
      send_updateExtendedProfileAttribute(attr, extendedProfile)
      recv_updateExtendedProfileAttribute()
    end

    def send_updateExtendedProfileAttribute(attr, extendedProfile)
      send_message('updateExtendedProfileAttribute', UpdateExtendedProfileAttribute_args, :attr => attr, :extendedProfile => extendedProfile)
    end

    def recv_updateExtendedProfileAttribute()
      result = receive_message(UpdateExtendedProfileAttribute_result)
      raise result.e unless result.e.nil?
      return
    end

    def getAllSimpleChannelContacts(statusSticonFallbackDisabled)
      send_getAllSimpleChannelContacts(statusSticonFallbackDisabled)
      return recv_getAllSimpleChannelContacts()
    end

    def send_getAllSimpleChannelContacts(statusSticonFallbackDisabled)
      send_message('getAllSimpleChannelContacts', GetAllSimpleChannelContacts_args, :statusSticonFallbackDisabled => statusSticonFallbackDisabled)
    end

    def recv_getAllSimpleChannelContacts()
      result = receive_message(GetAllSimpleChannelContacts_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllSimpleChannelContacts failed: unknown result')
    end

    def getUserIdentities()
      send_getUserIdentities()
      return recv_getUserIdentities()
    end

    def send_getUserIdentities()
      send_message('getUserIdentities', GetUserIdentities_args)
    end

    def recv_getUserIdentities()
      result = receive_message(GetUserIdentities_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserIdentities failed: unknown result')
    end

    def markPaidCallAd(dialedNumber, language, disableCallerId)
      send_markPaidCallAd(dialedNumber, language, disableCallerId)
      return recv_markPaidCallAd()
    end

    def send_markPaidCallAd(dialedNumber, language, disableCallerId)
      send_message('markPaidCallAd', MarkPaidCallAd_args, :dialedNumber => dialedNumber, :language => language, :disableCallerId => disableCallerId)
    end

    def recv_markPaidCallAd()
      result = receive_message(MarkPaidCallAd_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'markPaidCallAd failed: unknown result')
    end

    def isGroupMember(groupId)
      send_isGroupMember(groupId)
      return recv_isGroupMember()
    end

    def send_isGroupMember(groupId)
      send_message('isGroupMember', IsGroupMember_args, :groupId => groupId)
    end

    def recv_isGroupMember()
      result = receive_message(IsGroupMember_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isGroupMember failed: unknown result')
    end

    def getPhoneInfoFromPhoneNumber(region, phoneNumber)
      send_getPhoneInfoFromPhoneNumber(region, phoneNumber)
      return recv_getPhoneInfoFromPhoneNumber()
    end

    def send_getPhoneInfoFromPhoneNumber(region, phoneNumber)
      send_message('getPhoneInfoFromPhoneNumber', GetPhoneInfoFromPhoneNumber_args, :region => region, :phoneNumber => phoneNumber)
    end

    def recv_getPhoneInfoFromPhoneNumber()
      result = receive_message(GetPhoneInfoFromPhoneNumber_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPhoneInfoFromPhoneNumber failed: unknown result')
    end

    def redeemPaidCallVoucher(serial, language)
      send_redeemPaidCallVoucher(serial, language)
      return recv_redeemPaidCallVoucher()
    end

    def send_redeemPaidCallVoucher(serial, language)
      send_message('redeemPaidCallVoucher', RedeemPaidCallVoucher_args, :serial => serial, :language => language)
    end

    def recv_redeemPaidCallVoucher()
      result = receive_message(RedeemPaidCallVoucher_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'redeemPaidCallVoucher failed: unknown result')
    end

    def getPreferredDisplayName(mids)
      send_getPreferredDisplayName(mids)
      return recv_getPreferredDisplayName()
    end

    def send_getPreferredDisplayName(mids)
      send_message('getPreferredDisplayName', GetPreferredDisplayName_args, :mids => mids)
    end

    def recv_getPreferredDisplayName()
      result = receive_message(GetPreferredDisplayName_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPreferredDisplayName failed: unknown result')
    end

    def getContactsForChannel(ids)
      send_getContactsForChannel(ids)
      return recv_getContactsForChannel()
    end

    def send_getContactsForChannel(ids)
      send_message('getContactsForChannel', GetContactsForChannel_args, :ids => ids)
    end

    def recv_getContactsForChannel()
      result = receive_message(GetContactsForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getContactsForChannel failed: unknown result')
    end

    def getCallCreditProducts(appStoreCode, pgCode, country, language)
      send_getCallCreditProducts(appStoreCode, pgCode, country, language)
      return recv_getCallCreditProducts()
    end

    def send_getCallCreditProducts(appStoreCode, pgCode, country, language)
      send_message('getCallCreditProducts', GetCallCreditProducts_args, :appStoreCode => appStoreCode, :pgCode => pgCode, :country => country, :language => language)
    end

    def recv_getCallCreditProducts()
      result = receive_message(GetCallCreditProducts_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCallCreditProducts failed: unknown result')
    end

    def getCompactContacts(lastModifiedTimestamp)
      send_getCompactContacts(lastModifiedTimestamp)
      return recv_getCompactContacts()
    end

    def send_getCompactContacts(lastModifiedTimestamp)
      send_message('getCompactContacts', GetCompactContacts_args, :lastModifiedTimestamp => lastModifiedTimestamp)
    end

    def recv_getCompactContacts()
      result = receive_message(GetCompactContacts_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCompactContacts failed: unknown result')
    end

    def notifyNotiCenterEvent(event)
      send_notifyNotiCenterEvent(event)
      recv_notifyNotiCenterEvent()
    end

    def send_notifyNotiCenterEvent(event)
      send_message('notifyNotiCenterEvent', NotifyNotiCenterEvent_args, :event => event)
    end

    def recv_notifyNotiCenterEvent()
      result = receive_message(NotifyNotiCenterEvent_result)
      raise result.e unless result.e.nil?
      return
    end

    def isInContact(mid)
      send_isInContact(mid)
      return recv_isInContact()
    end

    def send_isInContact(mid)
      send_message('isInContact', IsInContact_args, :mid => mid)
    end

    def recv_isInContact()
      result = receive_message(IsInContact_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isInContact failed: unknown result')
    end

    def lookupGroupMembers(groupId, mids)
      send_lookupGroupMembers(groupId, mids)
      return recv_lookupGroupMembers()
    end

    def send_lookupGroupMembers(groupId, mids)
      send_message('lookupGroupMembers', LookupGroupMembers_args, :groupId => groupId, :mids => mids)
    end

    def recv_lookupGroupMembers()
      result = receive_message(LookupGroupMembers_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'lookupGroupMembers failed: unknown result')
    end

    def getRoomInformation(roomMid)
      send_getRoomInformation(roomMid)
      return recv_getRoomInformation()
    end

    def send_getRoomInformation(roomMid)
      send_message('getRoomInformation', GetRoomInformation_args, :roomMid => roomMid)
    end

    def recv_getRoomInformation()
      result = receive_message(GetRoomInformation_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getRoomInformation failed: unknown result')
    end

    def getGroupCall(chatMid)
      send_getGroupCall(chatMid)
      return recv_getGroupCall()
    end

    def send_getGroupCall(chatMid)
      send_message('getGroupCall', GetGroupCall_args, :chatMid => chatMid)
    end

    def recv_getGroupCall()
      result = receive_message(GetGroupCall_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupCall failed: unknown result')
    end

    def isAllowSecondaryDeviceLogin()
      send_isAllowSecondaryDeviceLogin()
      return recv_isAllowSecondaryDeviceLogin()
    end

    def send_isAllowSecondaryDeviceLogin()
      send_message('isAllowSecondaryDeviceLogin', IsAllowSecondaryDeviceLogin_args)
    end

    def recv_isAllowSecondaryDeviceLogin()
      result = receive_message(IsAllowSecondaryDeviceLogin_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isAllowSecondaryDeviceLogin failed: unknown result')
    end

    def getPrimaryClientForChannel()
      send_getPrimaryClientForChannel()
      return recv_getPrimaryClientForChannel()
    end

    def send_getPrimaryClientForChannel()
      send_message('getPrimaryClientForChannel', GetPrimaryClientForChannel_args)
    end

    def recv_getPrimaryClientForChannel()
      result = receive_message(GetPrimaryClientForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPrimaryClientForChannel failed: unknown result')
    end

    def createRoomWithBuddy(reqSeq, buddyMid, contactIds)
      send_createRoomWithBuddy(reqSeq, buddyMid, contactIds)
      return recv_createRoomWithBuddy()
    end

    def send_createRoomWithBuddy(reqSeq, buddyMid, contactIds)
      send_message('createRoomWithBuddy', CreateRoomWithBuddy_args, :reqSeq => reqSeq, :buddyMid => buddyMid, :contactIds => contactIds)
    end

    def recv_createRoomWithBuddy()
      result = receive_message(CreateRoomWithBuddy_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createRoomWithBuddy failed: unknown result')
    end

    def getDisplayName(mid)
      send_getDisplayName(mid)
      return recv_getDisplayName()
    end

    def send_getDisplayName(mid)
      send_message('getDisplayName', GetDisplayName_args, :mid => mid)
    end

    def recv_getDisplayName()
      result = receive_message(GetDisplayName_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getDisplayName failed: unknown result')
    end

    def getPaidCallMetadata(language)
      send_getPaidCallMetadata(language)
      return recv_getPaidCallMetadata()
    end

    def send_getPaidCallMetadata(language)
      send_message('getPaidCallMetadata', GetPaidCallMetadata_args, :language => language)
    end

    def recv_getPaidCallMetadata()
      result = receive_message(GetPaidCallMetadata_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPaidCallMetadata failed: unknown result')
    end

    def getMid()
      send_getMid()
      return recv_getMid()
    end

    def send_getMid()
      send_message('getMid', GetMid_args)
    end

    def recv_getMid()
      result = receive_message(GetMid_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMid failed: unknown result')
    end

    def getUserCountryForBilling(country, remoteIp)
      send_getUserCountryForBilling(country, remoteIp)
      return recv_getUserCountryForBilling()
    end

    def send_getUserCountryForBilling(country, remoteIp)
      send_message('getUserCountryForBilling', GetUserCountryForBilling_args, :country => country, :remoteIp => remoteIp)
    end

    def recv_getUserCountryForBilling()
      result = receive_message(GetUserCountryForBilling_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserCountryForBilling failed: unknown result')
    end

    def getFavoriteGroupIdsForChannel()
      send_getFavoriteGroupIdsForChannel()
      return recv_getFavoriteGroupIdsForChannel()
    end

    def send_getFavoriteGroupIdsForChannel()
      send_message('getFavoriteGroupIdsForChannel', GetFavoriteGroupIdsForChannel_args)
    end

    def recv_getFavoriteGroupIdsForChannel()
      result = receive_message(GetFavoriteGroupIdsForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getFavoriteGroupIdsForChannel failed: unknown result')
    end

    def getPaidCallHistory(start, size, language)
      send_getPaidCallHistory(start, size, language)
      return recv_getPaidCallHistory()
    end

    def send_getPaidCallHistory(start, size, language)
      send_message('getPaidCallHistory', GetPaidCallHistory_args, :start => start, :size => size, :language => language)
    end

    def recv_getPaidCallHistory()
      result = receive_message(GetPaidCallHistory_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPaidCallHistory failed: unknown result')
    end

    def sendPinCodeOperation(verifier)
      send_sendPinCodeOperation(verifier)
      recv_sendPinCodeOperation()
    end

    def send_sendPinCodeOperation(verifier)
      send_message('sendPinCodeOperation', SendPinCodeOperation_args, :verifier => verifier)
    end

    def recv_sendPinCodeOperation()
      result = receive_message(SendPinCodeOperation_result)
      raise result.e unless result.e.nil?
      return
    end

    def inviteIntoGroupCall(chatMid, memberMids, mediaType)
      send_inviteIntoGroupCall(chatMid, memberMids, mediaType)
      recv_inviteIntoGroupCall()
    end

    def send_inviteIntoGroupCall(chatMid, memberMids, mediaType)
      send_message('inviteIntoGroupCall', InviteIntoGroupCall_args, :chatMid => chatMid, :memberMids => memberMids, :mediaType => mediaType)
    end

    def recv_inviteIntoGroupCall()
      result = receive_message(InviteIntoGroupCall_result)
      raise result.e unless result.e.nil?
      return
    end

    def getFriendMids()
      send_getFriendMids()
      return recv_getFriendMids()
    end

    def send_getFriendMids()
      send_message('getFriendMids', GetFriendMids_args)
    end

    def recv_getFriendMids()
      result = receive_message(GetFriendMids_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getFriendMids failed: unknown result')
    end

    def getMetaProfile()
      send_getMetaProfile()
      return recv_getMetaProfile()
    end

    def send_getMetaProfile()
      send_message('getMetaProfile', GetMetaProfile_args)
    end

    def recv_getMetaProfile()
      result = receive_message(GetMetaProfile_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMetaProfile failed: unknown result')
    end

    def sendMessageForChannel(message)
      send_sendMessageForChannel(message)
      return recv_sendMessageForChannel()
    end

    def send_sendMessageForChannel(message)
      send_message('sendMessageForChannel', SendMessageForChannel_args, :message => message)
    end

    def recv_sendMessageForChannel()
      result = receive_message(SendMessageForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendMessageForChannel failed: unknown result')
    end

    def activeBuddySubscriberCount()
      send_activeBuddySubscriberCount()
      return recv_activeBuddySubscriberCount()
    end

    def send_activeBuddySubscriberCount()
      send_message('activeBuddySubscriberCount', ActiveBuddySubscriberCount_args)
    end

    def recv_activeBuddySubscriberCount()
      result = receive_message(ActiveBuddySubscriberCount_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'activeBuddySubscriberCount failed: unknown result')
    end

    def getCallCreditPurchaseHistory(request)
      send_getCallCreditPurchaseHistory(request)
      return recv_getCallCreditPurchaseHistory()
    end

    def send_getCallCreditPurchaseHistory(request)
      send_message('getCallCreditPurchaseHistory', GetCallCreditPurchaseHistory_args, :request => request)
    end

    def recv_getCallCreditPurchaseHistory()
      result = receive_message(GetCallCreditPurchaseHistory_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCallCreditPurchaseHistory failed: unknown result')
    end

    def isRoomMember(roomId)
      send_isRoomMember(roomId)
      return recv_isRoomMember()
    end

    def send_isRoomMember(roomId)
      send_message('isRoomMember', IsRoomMember_args, :roomId => roomId)
    end

    def recv_isRoomMember()
      result = receive_message(IsRoomMember_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isRoomMember failed: unknown result')
    end

    def sendSystemOAMessage(message)
      send_sendSystemOAMessage(message)
      return recv_sendSystemOAMessage()
    end

    def send_sendSystemOAMessage(message)
      send_message('sendSystemOAMessage', SendSystemOAMessage_args, :message => message)
    end

    def recv_sendSystemOAMessage()
      result = receive_message(SendSystemOAMessage_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendSystemOAMessage failed: unknown result')
    end

    def acquirePaidCallRoute(paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId)
      send_acquirePaidCallRoute(paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId)
      return recv_acquirePaidCallRoute()
    end

    def send_acquirePaidCallRoute(paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId)
      send_message('acquirePaidCallRoute', AcquirePaidCallRoute_args, :paidCallType => paidCallType, :dialedNumber => dialedNumber, :language => language, :networkCode => networkCode, :disableCallerId => disableCallerId, :referer => referer, :adSessionId => adSessionId)
    end

    def recv_acquirePaidCallRoute()
      result = receive_message(AcquirePaidCallRoute_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'acquirePaidCallRoute failed: unknown result')
    end

    def getGroupsForChannel(groupIds)
      send_getGroupsForChannel(groupIds)
      return recv_getGroupsForChannel()
    end

    def send_getGroupsForChannel(groupIds)
      send_message('getGroupsForChannel', GetGroupsForChannel_args, :groupIds => groupIds)
    end

    def recv_getGroupsForChannel()
      result = receive_message(GetGroupsForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupsForChannel failed: unknown result')
    end

    def getUserCreateTime()
      send_getUserCreateTime()
      return recv_getUserCreateTime()
    end

    def send_getUserCreateTime()
      send_message('getUserCreateTime', GetUserCreateTime_args)
    end

    def recv_getUserCreateTime()
      result = receive_message(GetUserCreateTime_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserCreateTime failed: unknown result')
    end

    def registerChannelCP(cpId, registerPassword)
      send_registerChannelCP(cpId, registerPassword)
      return recv_registerChannelCP()
    end

    def send_registerChannelCP(cpId, registerPassword)
      send_message('registerChannelCP', RegisterChannelCP_args, :cpId => cpId, :registerPassword => registerPassword)
    end

    def recv_registerChannelCP()
      result = receive_message(RegisterChannelCP_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerChannelCP failed: unknown result')
    end

    def reserveCallCreditPurchase(request)
      send_reserveCallCreditPurchase(request)
      return recv_reserveCallCreditPurchase()
    end

    def send_reserveCallCreditPurchase(request)
      send_message('reserveCallCreditPurchase', ReserveCallCreditPurchase_args, :request => request)
    end

    def recv_reserveCallCreditPurchase()
      result = receive_message(ReserveCallCreditPurchase_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'reserveCallCreditPurchase failed: unknown result')
    end

    def acquirePaidCallCurrencyExchangeRate(language)
      send_acquirePaidCallCurrencyExchangeRate(language)
      return recv_acquirePaidCallCurrencyExchangeRate()
    end

    def send_acquirePaidCallCurrencyExchangeRate(language)
      send_message('acquirePaidCallCurrencyExchangeRate', AcquirePaidCallCurrencyExchangeRate_args, :language => language)
    end

    def recv_acquirePaidCallCurrencyExchangeRate()
      result = receive_message(AcquirePaidCallCurrencyExchangeRate_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'acquirePaidCallCurrencyExchangeRate failed: unknown result')
    end

    def getRoomMemberMidsForAppPlatform(roomId)
      send_getRoomMemberMidsForAppPlatform(roomId)
      return recv_getRoomMemberMidsForAppPlatform()
    end

    def send_getRoomMemberMidsForAppPlatform(roomId)
      send_message('getRoomMemberMidsForAppPlatform', GetRoomMemberMidsForAppPlatform_args, :roomId => roomId)
    end

    def recv_getRoomMemberMidsForAppPlatform()
      result = receive_message(GetRoomMemberMidsForAppPlatform_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getRoomMemberMidsForAppPlatform failed: unknown result')
    end

    def getPaidCallBalanceList(language)
      send_getPaidCallBalanceList(language)
      return recv_getPaidCallBalanceList()
    end

    def send_getPaidCallBalanceList(language)
      send_message('getPaidCallBalanceList', GetPaidCallBalanceList_args, :language => language)
    end

    def recv_getPaidCallBalanceList()
      result = receive_message(GetPaidCallBalanceList_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPaidCallBalanceList failed: unknown result')
    end

    def getPersonalInfos(requiredPersonalInfos)
      send_getPersonalInfos(requiredPersonalInfos)
      return recv_getPersonalInfos()
    end

    def send_getPersonalInfos(requiredPersonalInfos)
      send_message('getPersonalInfos', GetPersonalInfos_args, :requiredPersonalInfos => requiredPersonalInfos)
    end

    def recv_getPersonalInfos()
      result = receive_message(GetPersonalInfos_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPersonalInfos failed: unknown result')
    end

    def getPrimaryClientsForChannel(userMids)
      send_getPrimaryClientsForChannel(userMids)
      return recv_getPrimaryClientsForChannel()
    end

    def send_getPrimaryClientsForChannel(userMids)
      send_message('getPrimaryClientsForChannel', GetPrimaryClientsForChannel_args, :userMids => userMids)
    end

    def recv_getPrimaryClientsForChannel()
      result = receive_message(GetPrimaryClientsForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPrimaryClientsForChannel failed: unknown result')
    end

    def addBuddyToContact(buddyMid)
      send_addBuddyToContact(buddyMid)
      return recv_addBuddyToContact()
    end

    def send_addBuddyToContact(buddyMid)
      send_message('addBuddyToContact', AddBuddyToContact_args, :buddyMid => buddyMid)
    end

    def recv_addBuddyToContact()
      result = receive_message(AddBuddyToContact_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addBuddyToContact failed: unknown result')
    end

    def getGroupMemberMidsForAppPlatform(groupId)
      send_getGroupMemberMidsForAppPlatform(groupId)
      return recv_getGroupMemberMidsForAppPlatform()
    end

    def send_getGroupMemberMidsForAppPlatform(groupId)
      send_message('getGroupMemberMidsForAppPlatform', GetGroupMemberMidsForAppPlatform_args, :groupId => groupId)
    end

    def recv_getGroupMemberMidsForAppPlatform()
      result = receive_message(GetGroupMemberMidsForAppPlatform_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupMemberMidsForAppPlatform failed: unknown result')
    end

    def getUserLanguage()
      send_getUserLanguage()
      return recv_getUserLanguage()
    end

    def send_getUserLanguage()
      send_message('getUserLanguage', GetUserLanguage_args)
    end

    def recv_getUserLanguage()
      result = receive_message(GetUserLanguage_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserLanguage failed: unknown result')
    end

    def lookupPaidCall(dialedNumber, language, referer)
      send_lookupPaidCall(dialedNumber, language, referer)
      return recv_lookupPaidCall()
    end

    def send_lookupPaidCall(dialedNumber, language, referer)
      send_message('lookupPaidCall', LookupPaidCall_args, :dialedNumber => dialedNumber, :language => language, :referer => referer)
    end

    def recv_lookupPaidCall()
      result = receive_message(LookupPaidCall_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'lookupPaidCall failed: unknown result')
    end

    def getExtendedProfile()
      send_getExtendedProfile()
      return recv_getExtendedProfile()
    end

    def send_getExtendedProfile()
      send_message('getExtendedProfile', GetExtendedProfile_args)
    end

    def recv_getExtendedProfile()
      result = receive_message(GetExtendedProfile_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getExtendedProfile failed: unknown result')
    end

    def getReverseCompactContacts(ids)
      send_getReverseCompactContacts(ids)
      return recv_getReverseCompactContacts()
    end

    def send_getReverseCompactContacts(ids)
      send_message('getReverseCompactContacts', GetReverseCompactContacts_args, :ids => ids)
    end

    def recv_getReverseCompactContacts()
      result = receive_message(GetReverseCompactContacts_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getReverseCompactContacts failed: unknown result')
    end

    def getPaidCallAdStatus()
      send_getPaidCallAdStatus()
      return recv_getPaidCallAdStatus()
    end

    def send_getPaidCallAdStatus()
      send_message('getPaidCallAdStatus', GetPaidCallAdStatus_args)
    end

    def recv_getPaidCallAdStatus()
      result = receive_message(GetPaidCallAdStatus_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPaidCallAdStatus failed: unknown result')
    end

    def findContactByUseridWithoutAbuseBlockForChannel(userid)
      send_findContactByUseridWithoutAbuseBlockForChannel(userid)
      return recv_findContactByUseridWithoutAbuseBlockForChannel()
    end

    def send_findContactByUseridWithoutAbuseBlockForChannel(userid)
      send_message('findContactByUseridWithoutAbuseBlockForChannel', FindContactByUseridWithoutAbuseBlockForChannel_args, :userid => userid)
    end

    def recv_findContactByUseridWithoutAbuseBlockForChannel()
      result = receive_message(FindContactByUseridWithoutAbuseBlockForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findContactByUseridWithoutAbuseBlockForChannel failed: unknown result')
    end

    def getGroupMemberMids(groupId)
      send_getGroupMemberMids(groupId)
      return recv_getGroupMemberMids()
    end

    def send_getGroupMemberMids(groupId)
      send_message('getGroupMemberMids', GetGroupMemberMids_args, :groupId => groupId)
    end

    def recv_getGroupMemberMids()
      result = receive_message(GetGroupMemberMids_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupMemberMids failed: unknown result')
    end

    def sendMessageWithoutRelationship(message)
      send_sendMessageWithoutRelationship(message)
      return recv_sendMessageWithoutRelationship()
    end

    def send_sendMessageWithoutRelationship(message)
      send_message('sendMessageWithoutRelationship', SendMessageWithoutRelationship_args, :message => message)
    end

    def recv_sendMessageWithoutRelationship()
      result = receive_message(SendMessageWithoutRelationship_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendMessageWithoutRelationship failed: unknown result')
    end

    def displayBuddySubscriberCountInBulk(mids)
      send_displayBuddySubscriberCountInBulk(mids)
      return recv_displayBuddySubscriberCountInBulk()
    end

    def send_displayBuddySubscriberCountInBulk(mids)
      send_message('displayBuddySubscriberCountInBulk', DisplayBuddySubscriberCountInBulk_args, :mids => mids)
    end

    def recv_displayBuddySubscriberCountInBulk()
      result = receive_message(DisplayBuddySubscriberCountInBulk_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'displayBuddySubscriberCountInBulk failed: unknown result')
    end

    def lookupRoomMembers(roomId, mids)
      send_lookupRoomMembers(roomId, mids)
      return recv_lookupRoomMembers()
    end

    def send_lookupRoomMembers(roomId, mids)
      send_message('lookupRoomMembers', LookupRoomMembers_args, :roomId => roomId, :mids => mids)
    end

    def recv_lookupRoomMembers()
      result = receive_message(LookupRoomMembers_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'lookupRoomMembers failed: unknown result')
    end

    def getFavoriteMidsForChannel()
      send_getFavoriteMidsForChannel()
      return recv_getFavoriteMidsForChannel()
    end

    def send_getFavoriteMidsForChannel()
      send_message('getFavoriteMidsForChannel', GetFavoriteMidsForChannel_args)
    end

    def recv_getFavoriteMidsForChannel()
      result = receive_message(GetFavoriteMidsForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getFavoriteMidsForChannel failed: unknown result')
    end

    def getAllContactIdsForChannel()
      send_getAllContactIdsForChannel()
      return recv_getAllContactIdsForChannel()
    end

    def send_getAllContactIdsForChannel()
      send_message('getAllContactIdsForChannel', GetAllContactIdsForChannel_args)
    end

    def recv_getAllContactIdsForChannel()
      result = receive_message(GetAllContactIdsForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllContactIdsForChannel failed: unknown result')
    end

    def displayBuddySubscriberCount()
      send_displayBuddySubscriberCount()
      return recv_displayBuddySubscriberCount()
    end

    def send_displayBuddySubscriberCount()
      send_message('displayBuddySubscriberCount', DisplayBuddySubscriberCount_args)
    end

    def recv_displayBuddySubscriberCount()
      result = receive_message(DisplayBuddySubscriberCount_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'displayBuddySubscriberCount failed: unknown result')
    end

    def getProfileForChannel()
      send_getProfileForChannel()
      return recv_getProfileForChannel()
    end

    def send_getProfileForChannel()
      send_message('getProfileForChannel', GetProfileForChannel_args)
    end

    def recv_getProfileForChannel()
      result = receive_message(GetProfileForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProfileForChannel failed: unknown result')
    end

    def getUserTickets(userMids)
      send_getUserTickets(userMids)
      return recv_getUserTickets()
    end

    def send_getUserTickets(userMids)
      send_message('getUserTickets', GetUserTickets_args, :userMids => userMids)
    end

    def recv_getUserTickets()
      result = receive_message(GetUserTickets_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserTickets failed: unknown result')
    end

    def getOAFriendMids()
      send_getOAFriendMids()
      return recv_getOAFriendMids()
    end

    def send_getOAFriendMids()
      send_message('getOAFriendMids', GetOAFriendMids_args)
    end

    def recv_getOAFriendMids()
      result = receive_message(GetOAFriendMids_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getOAFriendMids failed: unknown result')
    end

    def searchPaidCallUserRate(countryCode, language)
      send_searchPaidCallUserRate(countryCode, language)
      return recv_searchPaidCallUserRate()
    end

    def send_searchPaidCallUserRate(countryCode, language)
      send_message('searchPaidCallUserRate', SearchPaidCallUserRate_args, :countryCode => countryCode, :language => language)
    end

    def recv_searchPaidCallUserRate()
      result = receive_message(SearchPaidCallUserRate_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'searchPaidCallUserRate failed: unknown result')
    end

    def getJoinedGroupIdsForChannel()
      send_getJoinedGroupIdsForChannel()
      return recv_getJoinedGroupIdsForChannel()
    end

    def send_getJoinedGroupIdsForChannel()
      send_message('getJoinedGroupIdsForChannel', GetJoinedGroupIdsForChannel_args)
    end

    def recv_getJoinedGroupIdsForChannel()
      result = receive_message(GetJoinedGroupIdsForChannel_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getJoinedGroupIdsForChannel failed: unknown result')
    end

    def acquireGroupCallRoute(chatMid, mediaType)
      send_acquireGroupCallRoute(chatMid, mediaType)
      return recv_acquireGroupCallRoute()
    end

    def send_acquireGroupCallRoute(chatMid, mediaType)
      send_message('acquireGroupCallRoute', AcquireGroupCallRoute_args, :chatMid => chatMid, :mediaType => mediaType)
    end

    def recv_acquireGroupCallRoute()
      result = receive_message(AcquireGroupCallRoute_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'acquireGroupCallRoute failed: unknown result')
    end

    def getUserMidsWhoAddedMe()
      send_getUserMidsWhoAddedMe()
      return recv_getUserMidsWhoAddedMe()
    end

    def send_getUserMidsWhoAddedMe()
      send_message('getUserMidsWhoAddedMe', GetUserMidsWhoAddedMe_args)
    end

    def recv_getUserMidsWhoAddedMe()
      result = receive_message(GetUserMidsWhoAddedMe_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserMidsWhoAddedMe failed: unknown result')
    end

    def getIdentityCredential()
      send_getIdentityCredential()
      return recv_getIdentityCredential()
    end

    def send_getIdentityCredential()
      send_message('getIdentityCredential', GetIdentityCredential_args)
    end

    def recv_getIdentityCredential()
      result = receive_message(GetIdentityCredential_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getIdentityCredential failed: unknown result')
    end

    def addOperationForChannel(opType, param1, param2, param3)
      send_addOperationForChannel(opType, param1, param2, param3)
      recv_addOperationForChannel()
    end

    def send_addOperationForChannel(opType, param1, param2, param3)
      send_message('addOperationForChannel', AddOperationForChannel_args, :opType => opType, :param1 => param1, :param2 => param2, :param3 => param3)
    end

    def recv_addOperationForChannel()
      result = receive_message(AddOperationForChannel_result)
      raise result.e unless result.e.nil?
      return
    end

    def getSimpleChannelContacts(ids, statusSticonFallbackDisabled)
      send_getSimpleChannelContacts(ids, statusSticonFallbackDisabled)
      return recv_getSimpleChannelContacts()
    end

    def send_getSimpleChannelContacts(ids, statusSticonFallbackDisabled)
      send_message('getSimpleChannelContacts', GetSimpleChannelContacts_args, :ids => ids, :statusSticonFallbackDisabled => statusSticonFallbackDisabled)
    end

    def recv_getSimpleChannelContacts()
      result = receive_message(GetSimpleChannelContacts_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSimpleChannelContacts failed: unknown result')
    end

    def getUserLastSentMessageTimeStamp(mid)
      send_getUserLastSentMessageTimeStamp(mid)
      return recv_getUserLastSentMessageTimeStamp()
    end

    def send_getUserLastSentMessageTimeStamp(mid)
      send_message('getUserLastSentMessageTimeStamp', GetUserLastSentMessageTimeStamp_args, :mid => mid)
    end

    def recv_getUserLastSentMessageTimeStamp()
      result = receive_message(GetUserLastSentMessageTimeStamp_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserLastSentMessageTimeStamp failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_getUserStatus(seqid, iprot, oprot)
      args = read_args(iprot, GetUserStatus_args)
      result = GetUserStatus_result.new()
      begin
        result.success = @handler.getUserStatus(args.mid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getUserStatus', seqid)
    end

    def process_updateProfileAttributeForChannel(seqid, iprot, oprot)
      args = read_args(iprot, UpdateProfileAttributeForChannel_args)
      result = UpdateProfileAttributeForChannel_result.new()
      begin
        @handler.updateProfileAttributeForChannel(args.profileAttribute, args.value)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateProfileAttributeForChannel', seqid)
    end

    def process_updateExtendedProfileAttribute(seqid, iprot, oprot)
      args = read_args(iprot, UpdateExtendedProfileAttribute_args)
      result = UpdateExtendedProfileAttribute_result.new()
      begin
        @handler.updateExtendedProfileAttribute(args.attr, args.extendedProfile)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateExtendedProfileAttribute', seqid)
    end

    def process_getAllSimpleChannelContacts(seqid, iprot, oprot)
      args = read_args(iprot, GetAllSimpleChannelContacts_args)
      result = GetAllSimpleChannelContacts_result.new()
      begin
        result.success = @handler.getAllSimpleChannelContacts(args.statusSticonFallbackDisabled)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getAllSimpleChannelContacts', seqid)
    end

    def process_getUserIdentities(seqid, iprot, oprot)
      args = read_args(iprot, GetUserIdentities_args)
      result = GetUserIdentities_result.new()
      begin
        result.success = @handler.getUserIdentities()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getUserIdentities', seqid)
    end

    def process_markPaidCallAd(seqid, iprot, oprot)
      args = read_args(iprot, MarkPaidCallAd_args)
      result = MarkPaidCallAd_result.new()
      begin
        result.success = @handler.markPaidCallAd(args.dialedNumber, args.language, args.disableCallerId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'markPaidCallAd', seqid)
    end

    def process_isGroupMember(seqid, iprot, oprot)
      args = read_args(iprot, IsGroupMember_args)
      result = IsGroupMember_result.new()
      begin
        result.success = @handler.isGroupMember(args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'isGroupMember', seqid)
    end

    def process_getPhoneInfoFromPhoneNumber(seqid, iprot, oprot)
      args = read_args(iprot, GetPhoneInfoFromPhoneNumber_args)
      result = GetPhoneInfoFromPhoneNumber_result.new()
      begin
        result.success = @handler.getPhoneInfoFromPhoneNumber(args.region, args.phoneNumber)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPhoneInfoFromPhoneNumber', seqid)
    end

    def process_redeemPaidCallVoucher(seqid, iprot, oprot)
      args = read_args(iprot, RedeemPaidCallVoucher_args)
      result = RedeemPaidCallVoucher_result.new()
      begin
        result.success = @handler.redeemPaidCallVoucher(args.serial, args.language)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'redeemPaidCallVoucher', seqid)
    end

    def process_getPreferredDisplayName(seqid, iprot, oprot)
      args = read_args(iprot, GetPreferredDisplayName_args)
      result = GetPreferredDisplayName_result.new()
      begin
        result.success = @handler.getPreferredDisplayName(args.mids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPreferredDisplayName', seqid)
    end

    def process_getContactsForChannel(seqid, iprot, oprot)
      args = read_args(iprot, GetContactsForChannel_args)
      result = GetContactsForChannel_result.new()
      begin
        result.success = @handler.getContactsForChannel(args.ids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getContactsForChannel', seqid)
    end

    def process_getCallCreditProducts(seqid, iprot, oprot)
      args = read_args(iprot, GetCallCreditProducts_args)
      result = GetCallCreditProducts_result.new()
      begin
        result.success = @handler.getCallCreditProducts(args.appStoreCode, args.pgCode, args.country, args.language)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getCallCreditProducts', seqid)
    end

    def process_getCompactContacts(seqid, iprot, oprot)
      args = read_args(iprot, GetCompactContacts_args)
      result = GetCompactContacts_result.new()
      begin
        result.success = @handler.getCompactContacts(args.lastModifiedTimestamp)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getCompactContacts', seqid)
    end

    def process_notifyNotiCenterEvent(seqid, iprot, oprot)
      args = read_args(iprot, NotifyNotiCenterEvent_args)
      result = NotifyNotiCenterEvent_result.new()
      begin
        @handler.notifyNotiCenterEvent(args.event)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'notifyNotiCenterEvent', seqid)
    end

    def process_isInContact(seqid, iprot, oprot)
      args = read_args(iprot, IsInContact_args)
      result = IsInContact_result.new()
      begin
        result.success = @handler.isInContact(args.mid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'isInContact', seqid)
    end

    def process_lookupGroupMembers(seqid, iprot, oprot)
      args = read_args(iprot, LookupGroupMembers_args)
      result = LookupGroupMembers_result.new()
      begin
        result.success = @handler.lookupGroupMembers(args.groupId, args.mids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'lookupGroupMembers', seqid)
    end

    def process_getRoomInformation(seqid, iprot, oprot)
      args = read_args(iprot, GetRoomInformation_args)
      result = GetRoomInformation_result.new()
      begin
        result.success = @handler.getRoomInformation(args.roomMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getRoomInformation', seqid)
    end

    def process_getGroupCall(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupCall_args)
      result = GetGroupCall_result.new()
      begin
        result.success = @handler.getGroupCall(args.chatMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroupCall', seqid)
    end

    def process_isAllowSecondaryDeviceLogin(seqid, iprot, oprot)
      args = read_args(iprot, IsAllowSecondaryDeviceLogin_args)
      result = IsAllowSecondaryDeviceLogin_result.new()
      begin
        result.success = @handler.isAllowSecondaryDeviceLogin()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'isAllowSecondaryDeviceLogin', seqid)
    end

    def process_getPrimaryClientForChannel(seqid, iprot, oprot)
      args = read_args(iprot, GetPrimaryClientForChannel_args)
      result = GetPrimaryClientForChannel_result.new()
      begin
        result.success = @handler.getPrimaryClientForChannel()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPrimaryClientForChannel', seqid)
    end

    def process_createRoomWithBuddy(seqid, iprot, oprot)
      args = read_args(iprot, CreateRoomWithBuddy_args)
      result = CreateRoomWithBuddy_result.new()
      begin
        result.success = @handler.createRoomWithBuddy(args.reqSeq, args.buddyMid, args.contactIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'createRoomWithBuddy', seqid)
    end

    def process_getDisplayName(seqid, iprot, oprot)
      args = read_args(iprot, GetDisplayName_args)
      result = GetDisplayName_result.new()
      begin
        result.success = @handler.getDisplayName(args.mid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getDisplayName', seqid)
    end

    def process_getPaidCallMetadata(seqid, iprot, oprot)
      args = read_args(iprot, GetPaidCallMetadata_args)
      result = GetPaidCallMetadata_result.new()
      begin
        result.success = @handler.getPaidCallMetadata(args.language)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPaidCallMetadata', seqid)
    end

    def process_getMid(seqid, iprot, oprot)
      args = read_args(iprot, GetMid_args)
      result = GetMid_result.new()
      begin
        result.success = @handler.getMid()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getMid', seqid)
    end

    def process_getUserCountryForBilling(seqid, iprot, oprot)
      args = read_args(iprot, GetUserCountryForBilling_args)
      result = GetUserCountryForBilling_result.new()
      begin
        result.success = @handler.getUserCountryForBilling(args.country, args.remoteIp)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getUserCountryForBilling', seqid)
    end

    def process_getFavoriteGroupIdsForChannel(seqid, iprot, oprot)
      args = read_args(iprot, GetFavoriteGroupIdsForChannel_args)
      result = GetFavoriteGroupIdsForChannel_result.new()
      begin
        result.success = @handler.getFavoriteGroupIdsForChannel()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getFavoriteGroupIdsForChannel', seqid)
    end

    def process_getPaidCallHistory(seqid, iprot, oprot)
      args = read_args(iprot, GetPaidCallHistory_args)
      result = GetPaidCallHistory_result.new()
      begin
        result.success = @handler.getPaidCallHistory(args.start, args.size, args.language)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPaidCallHistory', seqid)
    end

    def process_sendPinCodeOperation(seqid, iprot, oprot)
      args = read_args(iprot, SendPinCodeOperation_args)
      result = SendPinCodeOperation_result.new()
      begin
        @handler.sendPinCodeOperation(args.verifier)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendPinCodeOperation', seqid)
    end

    def process_inviteIntoGroupCall(seqid, iprot, oprot)
      args = read_args(iprot, InviteIntoGroupCall_args)
      result = InviteIntoGroupCall_result.new()
      begin
        @handler.inviteIntoGroupCall(args.chatMid, args.memberMids, args.mediaType)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'inviteIntoGroupCall', seqid)
    end

    def process_getFriendMids(seqid, iprot, oprot)
      args = read_args(iprot, GetFriendMids_args)
      result = GetFriendMids_result.new()
      begin
        result.success = @handler.getFriendMids()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getFriendMids', seqid)
    end

    def process_getMetaProfile(seqid, iprot, oprot)
      args = read_args(iprot, GetMetaProfile_args)
      result = GetMetaProfile_result.new()
      begin
        result.success = @handler.getMetaProfile()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getMetaProfile', seqid)
    end

    def process_sendMessageForChannel(seqid, iprot, oprot)
      args = read_args(iprot, SendMessageForChannel_args)
      result = SendMessageForChannel_result.new()
      begin
        result.success = @handler.sendMessageForChannel(args.message)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendMessageForChannel', seqid)
    end

    def process_activeBuddySubscriberCount(seqid, iprot, oprot)
      args = read_args(iprot, ActiveBuddySubscriberCount_args)
      result = ActiveBuddySubscriberCount_result.new()
      begin
        result.success = @handler.activeBuddySubscriberCount()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'activeBuddySubscriberCount', seqid)
    end

    def process_getCallCreditPurchaseHistory(seqid, iprot, oprot)
      args = read_args(iprot, GetCallCreditPurchaseHistory_args)
      result = GetCallCreditPurchaseHistory_result.new()
      begin
        result.success = @handler.getCallCreditPurchaseHistory(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getCallCreditPurchaseHistory', seqid)
    end

    def process_isRoomMember(seqid, iprot, oprot)
      args = read_args(iprot, IsRoomMember_args)
      result = IsRoomMember_result.new()
      begin
        result.success = @handler.isRoomMember(args.roomId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'isRoomMember', seqid)
    end

    def process_sendSystemOAMessage(seqid, iprot, oprot)
      args = read_args(iprot, SendSystemOAMessage_args)
      result = SendSystemOAMessage_result.new()
      begin
        result.success = @handler.sendSystemOAMessage(args.message)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendSystemOAMessage', seqid)
    end

    def process_acquirePaidCallRoute(seqid, iprot, oprot)
      args = read_args(iprot, AcquirePaidCallRoute_args)
      result = AcquirePaidCallRoute_result.new()
      begin
        result.success = @handler.acquirePaidCallRoute(args.paidCallType, args.dialedNumber, args.language, args.networkCode, args.disableCallerId, args.referer, args.adSessionId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'acquirePaidCallRoute', seqid)
    end

    def process_getGroupsForChannel(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupsForChannel_args)
      result = GetGroupsForChannel_result.new()
      begin
        result.success = @handler.getGroupsForChannel(args.groupIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroupsForChannel', seqid)
    end

    def process_getUserCreateTime(seqid, iprot, oprot)
      args = read_args(iprot, GetUserCreateTime_args)
      result = GetUserCreateTime_result.new()
      begin
        result.success = @handler.getUserCreateTime()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getUserCreateTime', seqid)
    end

    def process_registerChannelCP(seqid, iprot, oprot)
      args = read_args(iprot, RegisterChannelCP_args)
      result = RegisterChannelCP_result.new()
      begin
        result.success = @handler.registerChannelCP(args.cpId, args.registerPassword)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'registerChannelCP', seqid)
    end

    def process_reserveCallCreditPurchase(seqid, iprot, oprot)
      args = read_args(iprot, ReserveCallCreditPurchase_args)
      result = ReserveCallCreditPurchase_result.new()
      begin
        result.success = @handler.reserveCallCreditPurchase(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'reserveCallCreditPurchase', seqid)
    end

    def process_acquirePaidCallCurrencyExchangeRate(seqid, iprot, oprot)
      args = read_args(iprot, AcquirePaidCallCurrencyExchangeRate_args)
      result = AcquirePaidCallCurrencyExchangeRate_result.new()
      begin
        result.success = @handler.acquirePaidCallCurrencyExchangeRate(args.language)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'acquirePaidCallCurrencyExchangeRate', seqid)
    end

    def process_getRoomMemberMidsForAppPlatform(seqid, iprot, oprot)
      args = read_args(iprot, GetRoomMemberMidsForAppPlatform_args)
      result = GetRoomMemberMidsForAppPlatform_result.new()
      begin
        result.success = @handler.getRoomMemberMidsForAppPlatform(args.roomId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getRoomMemberMidsForAppPlatform', seqid)
    end

    def process_getPaidCallBalanceList(seqid, iprot, oprot)
      args = read_args(iprot, GetPaidCallBalanceList_args)
      result = GetPaidCallBalanceList_result.new()
      begin
        result.success = @handler.getPaidCallBalanceList(args.language)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPaidCallBalanceList', seqid)
    end

    def process_getPersonalInfos(seqid, iprot, oprot)
      args = read_args(iprot, GetPersonalInfos_args)
      result = GetPersonalInfos_result.new()
      begin
        result.success = @handler.getPersonalInfos(args.requiredPersonalInfos)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPersonalInfos', seqid)
    end

    def process_getPrimaryClientsForChannel(seqid, iprot, oprot)
      args = read_args(iprot, GetPrimaryClientsForChannel_args)
      result = GetPrimaryClientsForChannel_result.new()
      begin
        result.success = @handler.getPrimaryClientsForChannel(args.userMids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPrimaryClientsForChannel', seqid)
    end

    def process_addBuddyToContact(seqid, iprot, oprot)
      args = read_args(iprot, AddBuddyToContact_args)
      result = AddBuddyToContact_result.new()
      begin
        result.success = @handler.addBuddyToContact(args.buddyMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'addBuddyToContact', seqid)
    end

    def process_getGroupMemberMidsForAppPlatform(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupMemberMidsForAppPlatform_args)
      result = GetGroupMemberMidsForAppPlatform_result.new()
      begin
        result.success = @handler.getGroupMemberMidsForAppPlatform(args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroupMemberMidsForAppPlatform', seqid)
    end

    def process_getUserLanguage(seqid, iprot, oprot)
      args = read_args(iprot, GetUserLanguage_args)
      result = GetUserLanguage_result.new()
      begin
        result.success = @handler.getUserLanguage()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getUserLanguage', seqid)
    end

    def process_lookupPaidCall(seqid, iprot, oprot)
      args = read_args(iprot, LookupPaidCall_args)
      result = LookupPaidCall_result.new()
      begin
        result.success = @handler.lookupPaidCall(args.dialedNumber, args.language, args.referer)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'lookupPaidCall', seqid)
    end

    def process_getExtendedProfile(seqid, iprot, oprot)
      args = read_args(iprot, GetExtendedProfile_args)
      result = GetExtendedProfile_result.new()
      begin
        result.success = @handler.getExtendedProfile()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getExtendedProfile', seqid)
    end

    def process_getReverseCompactContacts(seqid, iprot, oprot)
      args = read_args(iprot, GetReverseCompactContacts_args)
      result = GetReverseCompactContacts_result.new()
      begin
        result.success = @handler.getReverseCompactContacts(args.ids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getReverseCompactContacts', seqid)
    end

    def process_getPaidCallAdStatus(seqid, iprot, oprot)
      args = read_args(iprot, GetPaidCallAdStatus_args)
      result = GetPaidCallAdStatus_result.new()
      begin
        result.success = @handler.getPaidCallAdStatus()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPaidCallAdStatus', seqid)
    end

    def process_findContactByUseridWithoutAbuseBlockForChannel(seqid, iprot, oprot)
      args = read_args(iprot, FindContactByUseridWithoutAbuseBlockForChannel_args)
      result = FindContactByUseridWithoutAbuseBlockForChannel_result.new()
      begin
        result.success = @handler.findContactByUseridWithoutAbuseBlockForChannel(args.userid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findContactByUseridWithoutAbuseBlockForChannel', seqid)
    end

    def process_getGroupMemberMids(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupMemberMids_args)
      result = GetGroupMemberMids_result.new()
      begin
        result.success = @handler.getGroupMemberMids(args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroupMemberMids', seqid)
    end

    def process_sendMessageWithoutRelationship(seqid, iprot, oprot)
      args = read_args(iprot, SendMessageWithoutRelationship_args)
      result = SendMessageWithoutRelationship_result.new()
      begin
        result.success = @handler.sendMessageWithoutRelationship(args.message)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendMessageWithoutRelationship', seqid)
    end

    def process_displayBuddySubscriberCountInBulk(seqid, iprot, oprot)
      args = read_args(iprot, DisplayBuddySubscriberCountInBulk_args)
      result = DisplayBuddySubscriberCountInBulk_result.new()
      begin
        result.success = @handler.displayBuddySubscriberCountInBulk(args.mids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'displayBuddySubscriberCountInBulk', seqid)
    end

    def process_lookupRoomMembers(seqid, iprot, oprot)
      args = read_args(iprot, LookupRoomMembers_args)
      result = LookupRoomMembers_result.new()
      begin
        result.success = @handler.lookupRoomMembers(args.roomId, args.mids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'lookupRoomMembers', seqid)
    end

    def process_getFavoriteMidsForChannel(seqid, iprot, oprot)
      args = read_args(iprot, GetFavoriteMidsForChannel_args)
      result = GetFavoriteMidsForChannel_result.new()
      begin
        result.success = @handler.getFavoriteMidsForChannel()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getFavoriteMidsForChannel', seqid)
    end

    def process_getAllContactIdsForChannel(seqid, iprot, oprot)
      args = read_args(iprot, GetAllContactIdsForChannel_args)
      result = GetAllContactIdsForChannel_result.new()
      begin
        result.success = @handler.getAllContactIdsForChannel()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getAllContactIdsForChannel', seqid)
    end

    def process_displayBuddySubscriberCount(seqid, iprot, oprot)
      args = read_args(iprot, DisplayBuddySubscriberCount_args)
      result = DisplayBuddySubscriberCount_result.new()
      begin
        result.success = @handler.displayBuddySubscriberCount()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'displayBuddySubscriberCount', seqid)
    end

    def process_getProfileForChannel(seqid, iprot, oprot)
      args = read_args(iprot, GetProfileForChannel_args)
      result = GetProfileForChannel_result.new()
      begin
        result.success = @handler.getProfileForChannel()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getProfileForChannel', seqid)
    end

    def process_getUserTickets(seqid, iprot, oprot)
      args = read_args(iprot, GetUserTickets_args)
      result = GetUserTickets_result.new()
      begin
        result.success = @handler.getUserTickets(args.userMids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getUserTickets', seqid)
    end

    def process_getOAFriendMids(seqid, iprot, oprot)
      args = read_args(iprot, GetOAFriendMids_args)
      result = GetOAFriendMids_result.new()
      begin
        result.success = @handler.getOAFriendMids()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getOAFriendMids', seqid)
    end

    def process_searchPaidCallUserRate(seqid, iprot, oprot)
      args = read_args(iprot, SearchPaidCallUserRate_args)
      result = SearchPaidCallUserRate_result.new()
      begin
        result.success = @handler.searchPaidCallUserRate(args.countryCode, args.language)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'searchPaidCallUserRate', seqid)
    end

    def process_getJoinedGroupIdsForChannel(seqid, iprot, oprot)
      args = read_args(iprot, GetJoinedGroupIdsForChannel_args)
      result = GetJoinedGroupIdsForChannel_result.new()
      begin
        result.success = @handler.getJoinedGroupIdsForChannel()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getJoinedGroupIdsForChannel', seqid)
    end

    def process_acquireGroupCallRoute(seqid, iprot, oprot)
      args = read_args(iprot, AcquireGroupCallRoute_args)
      result = AcquireGroupCallRoute_result.new()
      begin
        result.success = @handler.acquireGroupCallRoute(args.chatMid, args.mediaType)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'acquireGroupCallRoute', seqid)
    end

    def process_getUserMidsWhoAddedMe(seqid, iprot, oprot)
      args = read_args(iprot, GetUserMidsWhoAddedMe_args)
      result = GetUserMidsWhoAddedMe_result.new()
      begin
        result.success = @handler.getUserMidsWhoAddedMe()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getUserMidsWhoAddedMe', seqid)
    end

    def process_getIdentityCredential(seqid, iprot, oprot)
      args = read_args(iprot, GetIdentityCredential_args)
      result = GetIdentityCredential_result.new()
      begin
        result.success = @handler.getIdentityCredential()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getIdentityCredential', seqid)
    end

    def process_addOperationForChannel(seqid, iprot, oprot)
      args = read_args(iprot, AddOperationForChannel_args)
      result = AddOperationForChannel_result.new()
      begin
        @handler.addOperationForChannel(args.opType, args.param1, args.param2, args.param3)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'addOperationForChannel', seqid)
    end

    def process_getSimpleChannelContacts(seqid, iprot, oprot)
      args = read_args(iprot, GetSimpleChannelContacts_args)
      result = GetSimpleChannelContacts_result.new()
      begin
        result.success = @handler.getSimpleChannelContacts(args.ids, args.statusSticonFallbackDisabled)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getSimpleChannelContacts', seqid)
    end

    def process_getUserLastSentMessageTimeStamp(seqid, iprot, oprot)
      args = read_args(iprot, GetUserLastSentMessageTimeStamp_args)
      result = GetUserLastSentMessageTimeStamp_result.new()
      begin
        result.success = @handler.getUserLastSentMessageTimeStamp(args.mid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getUserLastSentMessageTimeStamp', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class GetUserStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MID = 1

    FIELDS = {
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::UserStatus},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @success.nil? || ::UserStatus::VALID_VALUES.include?(@success)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProfileAttributeForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PROFILEATTRIBUTE = 2
    VALUE = 3

    FIELDS = {
      PROFILEATTRIBUTE => {:type => ::Thrift::Types::I32, :name => 'profileAttribute', :enum_class => ::ProfileAttribute},
      VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @profileAttribute.nil? || ::ProfileAttribute::VALID_VALUES.include?(@profileAttribute)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field profileAttribute!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProfileAttributeForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateExtendedProfileAttribute_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ATTR = 1
    EXTENDEDPROFILE = 2

    FIELDS = {
      ATTR => {:type => ::Thrift::Types::I32, :name => 'attr', :enum_class => ::ExtendedProfileAttribute},
      EXTENDEDPROFILE => {:type => ::Thrift::Types::STRUCT, :name => 'extendedProfile', :class => ::ExtendedProfile}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @attr.nil? || ::ExtendedProfileAttribute::VALID_VALUES.include?(@attr)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field attr!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateExtendedProfileAttribute_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllSimpleChannelContacts_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    STATUSSTICONFALLBACKDISABLED = 1

    FIELDS = {
      STATUSSTICONFALLBACKDISABLED => {:type => ::Thrift::Types::BOOL, :name => 'statusSticonFallbackDisabled'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllSimpleChannelContacts_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SimpleChannelContact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserIdentities_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserIdentities_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I32, :enum_class => ::RegistrationType}, :value => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MarkPaidCallAd_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DIALEDNUMBER = 2
    LANGUAGE = 3
    DISABLECALLERID = 4

    FIELDS = {
      DIALEDNUMBER => {:type => ::Thrift::Types::STRING, :name => 'dialedNumber'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      DISABLECALLERID => {:type => ::Thrift::Types::BOOL, :name => 'disableCallerId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MarkPaidCallAd_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PaidCallDialing},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsGroupMember_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPID = 1

    FIELDS = {
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsGroupMember_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPhoneInfoFromPhoneNumber_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REGION = 1
    PHONENUMBER = 2

    FIELDS = {
      REGION => {:type => ::Thrift::Types::STRING, :name => 'region'},
      PHONENUMBER => {:type => ::Thrift::Types::STRING, :name => 'phoneNumber'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPhoneInfoFromPhoneNumber_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PhoneInfoForChannel},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RedeemPaidCallVoucher_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SERIAL = 2
    LANGUAGE = 3

    FIELDS = {
      SERIAL => {:type => ::Thrift::Types::STRING, :name => 'serial'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RedeemPaidCallVoucher_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PaidCallRedeemResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPreferredDisplayName_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MIDS = 1

    FIELDS = {
      MIDS => {:type => ::Thrift::Types::LIST, :name => 'mids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPreferredDisplayName_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContactsForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDS = 2

    FIELDS = {
      IDS => {:type => ::Thrift::Types::LIST, :name => 'ids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContactsForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCallCreditProducts_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    APPSTORECODE = 2
    PGCODE = 3
    COUNTRY = 4
    LANGUAGE = 5

    FIELDS = {
      APPSTORECODE => {:type => ::Thrift::Types::I32, :name => 'appStoreCode', :enum_class => ::PaymentType},
      PGCODE => {:type => ::Thrift::Types::I32, :name => 'pgCode', :enum_class => ::PaymentPgType},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @appStoreCode.nil? || ::PaymentType::VALID_VALUES.include?(@appStoreCode)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field appStoreCode!')
      end
      unless @pgCode.nil? || ::PaymentPgType::VALID_VALUES.include?(@pgCode)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field pgCode!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCallCreditProducts_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CoinProductItem}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCompactContacts_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LASTMODIFIEDTIMESTAMP = 2

    FIELDS = {
      LASTMODIFIEDTIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'lastModifiedTimestamp'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCompactContacts_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CompactContact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyNotiCenterEvent_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EVENT = 1

    FIELDS = {
      EVENT => {:type => ::Thrift::Types::STRUCT, :name => 'event', :class => ::NotiCenterEventData}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NotifyNotiCenterEvent_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsInContact_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MID = 2

    FIELDS = {
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsInContact_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LookupGroupMembers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPID = 1
    MIDS = 2

    FIELDS = {
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'},
      MIDS => {:type => ::Thrift::Types::LIST, :name => 'mids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LookupGroupMembers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SimpleChannelContact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRoomInformation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ROOMMID = 1

    FIELDS = {
      ROOMMID => {:type => ::Thrift::Types::STRING, :name => 'roomMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRoomInformation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Room},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupCall_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHATMID = 2

    FIELDS = {
      CHATMID => {:type => ::Thrift::Types::STRING, :name => 'chatMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupCall_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GroupCall},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsAllowSecondaryDeviceLogin_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsAllowSecondaryDeviceLogin_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPrimaryClientForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPrimaryClientForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SimpleChannelClient},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateRoomWithBuddy_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    BUDDYMID = 2
    CONTACTIDS = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      BUDDYMID => {:type => ::Thrift::Types::STRING, :name => 'buddyMid'},
      CONTACTIDS => {:type => ::Thrift::Types::LIST, :name => 'contactIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateRoomWithBuddy_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Room},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDisplayName_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MID = 2

    FIELDS = {
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDisplayName_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPaidCallMetadata_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LANGUAGE = 2

    FIELDS = {
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPaidCallMetadata_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PaidCallMetadataResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserCountryForBilling_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    COUNTRY = 2
    REMOTEIP = 3

    FIELDS = {
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'},
      REMOTEIP => {:type => ::Thrift::Types::STRING, :name => 'remoteIp'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserCountryForBilling_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFavoriteGroupIdsForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFavoriteGroupIdsForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPaidCallHistory_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    START = 2
    SIZE = 3
    LANGUAGE = 4

    FIELDS = {
      START => {:type => ::Thrift::Types::I64, :name => 'start'},
      SIZE => {:type => ::Thrift::Types::I32, :name => 'size'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPaidCallHistory_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PaidCallHistoryResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendPinCodeOperation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VERIFIER = 1

    FIELDS = {
      VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendPinCodeOperation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteIntoGroupCall_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHATMID = 2
    MEMBERMIDS = 3
    MEDIATYPE = 4

    FIELDS = {
      CHATMID => {:type => ::Thrift::Types::STRING, :name => 'chatMid'},
      MEMBERMIDS => {:type => ::Thrift::Types::LIST, :name => 'memberMids', :element => {:type => ::Thrift::Types::STRING}},
      MEDIATYPE => {:type => ::Thrift::Types::I32, :name => 'mediaType', :enum_class => ::GroupCallMediaType}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @mediaType.nil? || ::GroupCallMediaType::VALID_VALUES.include?(@mediaType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field mediaType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteIntoGroupCall_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFriendMids_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFriendMids_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMetaProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMetaProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::MetaProfile},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessageForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MESSAGE = 2

    FIELDS = {
      MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::Message}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessageForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Message},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActiveBuddySubscriberCount_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActiveBuddySubscriberCount_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCallCreditPurchaseHistory_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 2

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CoinHistoryCondition}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCallCreditPurchaseHistory_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CoinHistoryResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsRoomMember_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ROOMID = 1

    FIELDS = {
      ROOMID => {:type => ::Thrift::Types::STRING, :name => 'roomId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsRoomMember_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendSystemOAMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MESSAGE = 1

    FIELDS = {
      MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::Message}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendSystemOAMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Message},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcquirePaidCallRoute_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PAIDCALLTYPE = 2
    DIALEDNUMBER = 3
    LANGUAGE = 4
    NETWORKCODE = 5
    DISABLECALLERID = 6
    REFERER = 7
    ADSESSIONID = 8

    FIELDS = {
      PAIDCALLTYPE => {:type => ::Thrift::Types::I32, :name => 'paidCallType', :enum_class => ::PaidCallType},
      DIALEDNUMBER => {:type => ::Thrift::Types::STRING, :name => 'dialedNumber'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      NETWORKCODE => {:type => ::Thrift::Types::STRING, :name => 'networkCode'},
      DISABLECALLERID => {:type => ::Thrift::Types::BOOL, :name => 'disableCallerId'},
      REFERER => {:type => ::Thrift::Types::STRING, :name => 'referer'},
      ADSESSIONID => {:type => ::Thrift::Types::STRING, :name => 'adSessionId'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @paidCallType.nil? || ::PaidCallType::VALID_VALUES.include?(@paidCallType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field paidCallType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcquirePaidCallRoute_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PaidCallResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupsForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPIDS = 1

    FIELDS = {
      GROUPIDS => {:type => ::Thrift::Types::LIST, :name => 'groupIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupsForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Group}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserCreateTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserCreateTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterChannelCP_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CPID = 2
    REGISTERPASSWORD = 3

    FIELDS = {
      CPID => {:type => ::Thrift::Types::STRING, :name => 'cpId'},
      REGISTERPASSWORD => {:type => ::Thrift::Types::STRING, :name => 'registerPassword'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterChannelCP_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReserveCallCreditPurchase_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 2

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CoinPurchaseReservation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReserveCallCreditPurchase_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PaymentReservationResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcquirePaidCallCurrencyExchangeRate_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LANGUAGE = 2

    FIELDS = {
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcquirePaidCallCurrencyExchangeRate_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::PaidCallCurrencyExchangeRate}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRoomMemberMidsForAppPlatform_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ROOMID = 1

    FIELDS = {
      ROOMID => {:type => ::Thrift::Types::STRING, :name => 'roomId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRoomMemberMidsForAppPlatform_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPaidCallBalanceList_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LANGUAGE = 2

    FIELDS = {
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPaidCallBalanceList_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::PaidCallBalance}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPersonalInfos_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUIREDPERSONALINFOS = 1

    FIELDS = {
      REQUIREDPERSONALINFOS => {:type => ::Thrift::Types::SET, :name => 'requiredPersonalInfos', :element => {:type => ::Thrift::Types::I32, :enum_class => ::PersonalInfo}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPersonalInfos_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I32, :enum_class => ::PersonalInfo}, :value => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPrimaryClientsForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERMIDS = 1

    FIELDS = {
      USERMIDS => {:type => ::Thrift::Types::LIST, :name => 'userMids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPrimaryClientsForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SimpleChannelClient}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddBuddyToContact_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BUDDYMID = 1

    FIELDS = {
      BUDDYMID => {:type => ::Thrift::Types::STRING, :name => 'buddyMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddBuddyToContact_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ContactTransition},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupMemberMidsForAppPlatform_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPID = 1

    FIELDS = {
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupMemberMidsForAppPlatform_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserLanguage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserLanguage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LookupPaidCall_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DIALEDNUMBER = 2
    LANGUAGE = 3
    REFERER = 4

    FIELDS = {
      DIALEDNUMBER => {:type => ::Thrift::Types::STRING, :name => 'dialedNumber'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      REFERER => {:type => ::Thrift::Types::STRING, :name => 'referer'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LookupPaidCall_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PaidCallResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetExtendedProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetExtendedProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ExtendedProfile},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetReverseCompactContacts_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDS = 1

    FIELDS = {
      IDS => {:type => ::Thrift::Types::LIST, :name => 'ids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetReverseCompactContacts_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::CompactContact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPaidCallAdStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPaidCallAdStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PaidCallAdResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindContactByUseridWithoutAbuseBlockForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERID = 2

    FIELDS = {
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindContactByUseridWithoutAbuseBlockForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Contact},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupMemberMids_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPID = 1

    FIELDS = {
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupMemberMids_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessageWithoutRelationship_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MESSAGE = 2

    FIELDS = {
      MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::Message}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessageWithoutRelationship_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Message},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DisplayBuddySubscriberCountInBulk_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MIDS = 1

    FIELDS = {
      MIDS => {:type => ::Thrift::Types::LIST, :name => 'mids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DisplayBuddySubscriberCountInBulk_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I64}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LookupRoomMembers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ROOMID = 1
    MIDS = 2

    FIELDS = {
      ROOMID => {:type => ::Thrift::Types::STRING, :name => 'roomId'},
      MIDS => {:type => ::Thrift::Types::LIST, :name => 'mids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LookupRoomMembers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SimpleChannelContact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFavoriteMidsForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFavoriteMidsForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllContactIdsForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllContactIdsForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DisplayBuddySubscriberCount_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DisplayBuddySubscriberCount_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfileForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfileForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Profile},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserTickets_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERMIDS = 1

    FIELDS = {
      USERMIDS => {:type => ::Thrift::Types::LIST, :name => 'userMids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserTickets_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::UserTicketResponse}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetOAFriendMids_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetOAFriendMids_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SearchPaidCallUserRate_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    COUNTRYCODE = 2
    LANGUAGE = 3

    FIELDS = {
      COUNTRYCODE => {:type => ::Thrift::Types::STRING, :name => 'countryCode'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SearchPaidCallUserRate_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::PaidCallUserRate}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetJoinedGroupIdsForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetJoinedGroupIdsForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcquireGroupCallRoute_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHATMID = 2
    MEDIATYPE = 3

    FIELDS = {
      CHATMID => {:type => ::Thrift::Types::STRING, :name => 'chatMid'},
      MEDIATYPE => {:type => ::Thrift::Types::I32, :name => 'mediaType', :enum_class => ::GroupCallMediaType}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @mediaType.nil? || ::GroupCallMediaType::VALID_VALUES.include?(@mediaType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field mediaType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcquireGroupCallRoute_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GroupCallRoute},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserMidsWhoAddedMe_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserMidsWhoAddedMe_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetIdentityCredential_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetIdentityCredential_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::IdentityCredential},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddOperationForChannel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OPTYPE = 1
    PARAM1 = 2
    PARAM2 = 3
    PARAM3 = 4

    FIELDS = {
      OPTYPE => {:type => ::Thrift::Types::I32, :name => 'opType', :enum_class => ::OpType},
      PARAM1 => {:type => ::Thrift::Types::STRING, :name => 'param1'},
      PARAM2 => {:type => ::Thrift::Types::STRING, :name => 'param2'},
      PARAM3 => {:type => ::Thrift::Types::STRING, :name => 'param3'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @opType.nil? || ::OpType::VALID_VALUES.include?(@opType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field opType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddOperationForChannel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSimpleChannelContacts_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDS = 1
    STATUSSTICONFALLBACKDISABLED = 2

    FIELDS = {
      IDS => {:type => ::Thrift::Types::LIST, :name => 'ids', :element => {:type => ::Thrift::Types::STRING}},
      STATUSSTICONFALLBACKDISABLED => {:type => ::Thrift::Types::BOOL, :name => 'statusSticonFallbackDisabled'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSimpleChannelContacts_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SimpleChannelContact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserLastSentMessageTimeStamp_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MID = 1

    FIELDS = {
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserLastSentMessageTimeStamp_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

