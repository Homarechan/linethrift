//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

BuddyManagementService_addBuddyMember_args = function(args) {
  this.requestId = null;
  this.userMid = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.userMid !== undefined && args.userMid !== null) {
      this.userMid = args.userMid;
    }
  }
};
BuddyManagementService_addBuddyMember_args.prototype = {};
BuddyManagementService_addBuddyMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_addBuddyMember_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_addBuddyMember_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.userMid !== null && this.userMid !== undefined) {
    output.writeFieldBegin('userMid', Thrift.Type.STRING, 2);
    output.writeString(this.userMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_addBuddyMember_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_addBuddyMember_result.prototype = {};
BuddyManagementService_addBuddyMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_addBuddyMember_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_addBuddyMember_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_addBuddyMembers_args = function(args) {
  this.requestId = null;
  this.userMids = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.userMids !== undefined && args.userMids !== null) {
      this.userMids = Thrift.copyList(args.userMids, [null]);
    }
  }
};
BuddyManagementService_addBuddyMembers_args.prototype = {};
BuddyManagementService_addBuddyMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1276 = 0;
        var _rtmp31280;
        this.userMids = [];
        var _etype1279 = 0;
        _rtmp31280 = input.readListBegin();
        _etype1279 = _rtmp31280.etype;
        _size1276 = _rtmp31280.size;
        for (var _i1281 = 0; _i1281 < _size1276; ++_i1281)
        {
          var elem1282 = null;
          elem1282 = input.readString().value;
          this.userMids.push(elem1282);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_addBuddyMembers_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_addBuddyMembers_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.userMids !== null && this.userMids !== undefined) {
    output.writeFieldBegin('userMids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.userMids.length);
    for (var iter1283 in this.userMids)
    {
      if (this.userMids.hasOwnProperty(iter1283))
      {
        iter1283 = this.userMids[iter1283];
        output.writeString(iter1283);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_addBuddyMembers_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_addBuddyMembers_result.prototype = {};
BuddyManagementService_addBuddyMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_addBuddyMembers_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_addBuddyMembers_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_blockBuddyMember_args = function(args) {
  this.requestId = null;
  this.mid = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
BuddyManagementService_blockBuddyMember_args.prototype = {};
BuddyManagementService_blockBuddyMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_blockBuddyMember_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_blockBuddyMember_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_blockBuddyMember_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_blockBuddyMember_result.prototype = {};
BuddyManagementService_blockBuddyMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_blockBuddyMember_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_blockBuddyMember_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_commitSendMessagesToAll_args = function(args) {
  this.requestIdList = null;
  if (args) {
    if (args.requestIdList !== undefined && args.requestIdList !== null) {
      this.requestIdList = Thrift.copyList(args.requestIdList, [null]);
    }
  }
};
BuddyManagementService_commitSendMessagesToAll_args.prototype = {};
BuddyManagementService_commitSendMessagesToAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size1284 = 0;
        var _rtmp31288;
        this.requestIdList = [];
        var _etype1287 = 0;
        _rtmp31288 = input.readListBegin();
        _etype1287 = _rtmp31288.etype;
        _size1284 = _rtmp31288.size;
        for (var _i1289 = 0; _i1289 < _size1284; ++_i1289)
        {
          var elem1290 = null;
          elem1290 = input.readString().value;
          this.requestIdList.push(elem1290);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_commitSendMessagesToAll_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_commitSendMessagesToAll_args');
  if (this.requestIdList !== null && this.requestIdList !== undefined) {
    output.writeFieldBegin('requestIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.requestIdList.length);
    for (var iter1291 in this.requestIdList)
    {
      if (this.requestIdList.hasOwnProperty(iter1291))
      {
        iter1291 = this.requestIdList[iter1291];
        output.writeString(iter1291);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_commitSendMessagesToAll_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SendBuddyMessageResult]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_commitSendMessagesToAll_result.prototype = {};
BuddyManagementService_commitSendMessagesToAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1292 = 0;
        var _rtmp31296;
        this.success = [];
        var _etype1295 = 0;
        _rtmp31296 = input.readListBegin();
        _etype1295 = _rtmp31296.etype;
        _size1292 = _rtmp31296.size;
        for (var _i1297 = 0; _i1297 < _size1292; ++_i1297)
        {
          var elem1298 = null;
          elem1298 = new SendBuddyMessageResult();
          elem1298.read(input);
          this.success.push(elem1298);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_commitSendMessagesToAll_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_commitSendMessagesToAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1299 in this.success)
    {
      if (this.success.hasOwnProperty(iter1299))
      {
        iter1299 = this.success[iter1299];
        iter1299.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_commitSendMessagesToMids_args = function(args) {
  this.requestIdList = null;
  this.mids = null;
  if (args) {
    if (args.requestIdList !== undefined && args.requestIdList !== null) {
      this.requestIdList = Thrift.copyList(args.requestIdList, [null]);
    }
    if (args.mids !== undefined && args.mids !== null) {
      this.mids = Thrift.copyList(args.mids, [null]);
    }
  }
};
BuddyManagementService_commitSendMessagesToMids_args.prototype = {};
BuddyManagementService_commitSendMessagesToMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size1300 = 0;
        var _rtmp31304;
        this.requestIdList = [];
        var _etype1303 = 0;
        _rtmp31304 = input.readListBegin();
        _etype1303 = _rtmp31304.etype;
        _size1300 = _rtmp31304.size;
        for (var _i1305 = 0; _i1305 < _size1300; ++_i1305)
        {
          var elem1306 = null;
          elem1306 = input.readString().value;
          this.requestIdList.push(elem1306);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1307 = 0;
        var _rtmp31311;
        this.mids = [];
        var _etype1310 = 0;
        _rtmp31311 = input.readListBegin();
        _etype1310 = _rtmp31311.etype;
        _size1307 = _rtmp31311.size;
        for (var _i1312 = 0; _i1312 < _size1307; ++_i1312)
        {
          var elem1313 = null;
          elem1313 = input.readString().value;
          this.mids.push(elem1313);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_commitSendMessagesToMids_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_commitSendMessagesToMids_args');
  if (this.requestIdList !== null && this.requestIdList !== undefined) {
    output.writeFieldBegin('requestIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.requestIdList.length);
    for (var iter1314 in this.requestIdList)
    {
      if (this.requestIdList.hasOwnProperty(iter1314))
      {
        iter1314 = this.requestIdList[iter1314];
        output.writeString(iter1314);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mids !== null && this.mids !== undefined) {
    output.writeFieldBegin('mids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter1315 in this.mids)
    {
      if (this.mids.hasOwnProperty(iter1315))
      {
        iter1315 = this.mids[iter1315];
        output.writeString(iter1315);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_commitSendMessagesToMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SendBuddyMessageResult]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_commitSendMessagesToMids_result.prototype = {};
BuddyManagementService_commitSendMessagesToMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1316 = 0;
        var _rtmp31320;
        this.success = [];
        var _etype1319 = 0;
        _rtmp31320 = input.readListBegin();
        _etype1319 = _rtmp31320.etype;
        _size1316 = _rtmp31320.size;
        for (var _i1321 = 0; _i1321 < _size1316; ++_i1321)
        {
          var elem1322 = null;
          elem1322 = new SendBuddyMessageResult();
          elem1322.read(input);
          this.success.push(elem1322);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_commitSendMessagesToMids_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_commitSendMessagesToMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1323 in this.success)
    {
      if (this.success.hasOwnProperty(iter1323))
      {
        iter1323 = this.success[iter1323];
        iter1323.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_containsBuddyMember_args = function(args) {
  this.requestId = null;
  this.userMid = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.userMid !== undefined && args.userMid !== null) {
      this.userMid = args.userMid;
    }
  }
};
BuddyManagementService_containsBuddyMember_args.prototype = {};
BuddyManagementService_containsBuddyMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_containsBuddyMember_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_containsBuddyMember_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.userMid !== null && this.userMid !== undefined) {
    output.writeFieldBegin('userMid', Thrift.Type.STRING, 2);
    output.writeString(this.userMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_containsBuddyMember_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_containsBuddyMember_result.prototype = {};
BuddyManagementService_containsBuddyMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_containsBuddyMember_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_containsBuddyMember_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_downloadMessageContent_args = function(args) {
  this.requestId = null;
  this.messageId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
BuddyManagementService_downloadMessageContent_args.prototype = {};
BuddyManagementService_downloadMessageContent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_downloadMessageContent_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_downloadMessageContent_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_downloadMessageContent_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_downloadMessageContent_result.prototype = {};
BuddyManagementService_downloadMessageContent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_downloadMessageContent_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_downloadMessageContent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_downloadMessageContentPreview_args = function(args) {
  this.requestId = null;
  this.messageId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
BuddyManagementService_downloadMessageContentPreview_args.prototype = {};
BuddyManagementService_downloadMessageContentPreview_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_downloadMessageContentPreview_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_downloadMessageContentPreview_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_downloadMessageContentPreview_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_downloadMessageContentPreview_result.prototype = {};
BuddyManagementService_downloadMessageContentPreview_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_downloadMessageContentPreview_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_downloadMessageContentPreview_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_downloadProfileImage_args = function(args) {
  this.requestId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
  }
};
BuddyManagementService_downloadProfileImage_args.prototype = {};
BuddyManagementService_downloadProfileImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_downloadProfileImage_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_downloadProfileImage_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_downloadProfileImage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_downloadProfileImage_result.prototype = {};
BuddyManagementService_downloadProfileImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_downloadProfileImage_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_downloadProfileImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_downloadProfileImagePreview_args = function(args) {
  this.requestId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
  }
};
BuddyManagementService_downloadProfileImagePreview_args.prototype = {};
BuddyManagementService_downloadProfileImagePreview_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_downloadProfileImagePreview_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_downloadProfileImagePreview_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_downloadProfileImagePreview_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_downloadProfileImagePreview_result.prototype = {};
BuddyManagementService_downloadProfileImagePreview_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_downloadProfileImagePreview_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_downloadProfileImagePreview_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getActiveMemberCountByBuddyMid_args = function(args) {
  this.buddyMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
  }
};
BuddyManagementService_getActiveMemberCountByBuddyMid_args.prototype = {};
BuddyManagementService_getActiveMemberCountByBuddyMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getActiveMemberCountByBuddyMid_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getActiveMemberCountByBuddyMid_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getActiveMemberCountByBuddyMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_getActiveMemberCountByBuddyMid_result.prototype = {};
BuddyManagementService_getActiveMemberCountByBuddyMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getActiveMemberCountByBuddyMid_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getActiveMemberCountByBuddyMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getActiveMemberMidsByBuddyMid_args = function(args) {
  this.buddyMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
  }
};
BuddyManagementService_getActiveMemberMidsByBuddyMid_args.prototype = {};
BuddyManagementService_getActiveMemberMidsByBuddyMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getActiveMemberMidsByBuddyMid_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getActiveMemberMidsByBuddyMid_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getActiveMemberMidsByBuddyMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_getActiveMemberMidsByBuddyMid_result.prototype = {};
BuddyManagementService_getActiveMemberMidsByBuddyMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1324 = 0;
        var _rtmp31328;
        this.success = [];
        var _etype1327 = 0;
        _rtmp31328 = input.readListBegin();
        _etype1327 = _rtmp31328.etype;
        _size1324 = _rtmp31328.size;
        for (var _i1329 = 0; _i1329 < _size1324; ++_i1329)
        {
          var elem1330 = null;
          elem1330 = input.readString().value;
          this.success.push(elem1330);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getActiveMemberMidsByBuddyMid_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getActiveMemberMidsByBuddyMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1331 in this.success)
    {
      if (this.success.hasOwnProperty(iter1331))
      {
        iter1331 = this.success[iter1331];
        output.writeString(iter1331);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getAllBuddyMembers_args = function(args) {
};
BuddyManagementService_getAllBuddyMembers_args.prototype = {};
BuddyManagementService_getAllBuddyMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getAllBuddyMembers_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getAllBuddyMembers_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getAllBuddyMembers_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_getAllBuddyMembers_result.prototype = {};
BuddyManagementService_getAllBuddyMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1332 = 0;
        var _rtmp31336;
        this.success = [];
        var _etype1335 = 0;
        _rtmp31336 = input.readListBegin();
        _etype1335 = _rtmp31336.etype;
        _size1332 = _rtmp31336.size;
        for (var _i1337 = 0; _i1337 < _size1332; ++_i1337)
        {
          var elem1338 = null;
          elem1338 = input.readString().value;
          this.success.push(elem1338);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getAllBuddyMembers_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getAllBuddyMembers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1339 in this.success)
    {
      if (this.success.hasOwnProperty(iter1339))
      {
        iter1339 = this.success[iter1339];
        output.writeString(iter1339);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getBlockedBuddyMembers_args = function(args) {
};
BuddyManagementService_getBlockedBuddyMembers_args.prototype = {};
BuddyManagementService_getBlockedBuddyMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getBlockedBuddyMembers_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getBlockedBuddyMembers_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getBlockedBuddyMembers_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_getBlockedBuddyMembers_result.prototype = {};
BuddyManagementService_getBlockedBuddyMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1340 = 0;
        var _rtmp31344;
        this.success = [];
        var _etype1343 = 0;
        _rtmp31344 = input.readListBegin();
        _etype1343 = _rtmp31344.etype;
        _size1340 = _rtmp31344.size;
        for (var _i1345 = 0; _i1345 < _size1340; ++_i1345)
        {
          var elem1346 = null;
          elem1346 = input.readString().value;
          this.success.push(elem1346);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getBlockedBuddyMembers_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getBlockedBuddyMembers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1347 in this.success)
    {
      if (this.success.hasOwnProperty(iter1347))
      {
        iter1347 = this.success[iter1347];
        output.writeString(iter1347);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getBlockerCountByBuddyMid_args = function(args) {
  this.buddyMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
  }
};
BuddyManagementService_getBlockerCountByBuddyMid_args.prototype = {};
BuddyManagementService_getBlockerCountByBuddyMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getBlockerCountByBuddyMid_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getBlockerCountByBuddyMid_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getBlockerCountByBuddyMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_getBlockerCountByBuddyMid_result.prototype = {};
BuddyManagementService_getBlockerCountByBuddyMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getBlockerCountByBuddyMid_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getBlockerCountByBuddyMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getBuddyDetailByMid_args = function(args) {
  this.buddyMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
  }
};
BuddyManagementService_getBuddyDetailByMid_args.prototype = {};
BuddyManagementService_getBuddyDetailByMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getBuddyDetailByMid_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getBuddyDetailByMid_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getBuddyDetailByMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new BuddyDetail(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_getBuddyDetailByMid_result.prototype = {};
BuddyManagementService_getBuddyDetailByMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BuddyDetail();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getBuddyDetailByMid_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getBuddyDetailByMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getBuddyProfile_args = function(args) {
};
BuddyManagementService_getBuddyProfile_args.prototype = {};
BuddyManagementService_getBuddyProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getBuddyProfile_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getBuddyProfile_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getBuddyProfile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new BuddyProfile(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_getBuddyProfile_result.prototype = {};
BuddyManagementService_getBuddyProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BuddyProfile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getBuddyProfile_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getBuddyProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getContactTicket_args = function(args) {
};
BuddyManagementService_getContactTicket_args.prototype = {};
BuddyManagementService_getContactTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getContactTicket_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getContactTicket_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getContactTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Ticket(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_getContactTicket_result.prototype = {};
BuddyManagementService_getContactTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Ticket();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getContactTicket_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getContactTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getMemberCountByBuddyMid_args = function(args) {
  this.buddyMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
  }
};
BuddyManagementService_getMemberCountByBuddyMid_args.prototype = {};
BuddyManagementService_getMemberCountByBuddyMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getMemberCountByBuddyMid_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getMemberCountByBuddyMid_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getMemberCountByBuddyMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_getMemberCountByBuddyMid_result.prototype = {};
BuddyManagementService_getMemberCountByBuddyMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getMemberCountByBuddyMid_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getMemberCountByBuddyMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getSendBuddyMessageResult_args = function(args) {
  this.sendBuddyMessageRequestId = null;
  if (args) {
    if (args.sendBuddyMessageRequestId !== undefined && args.sendBuddyMessageRequestId !== null) {
      this.sendBuddyMessageRequestId = args.sendBuddyMessageRequestId;
    }
  }
};
BuddyManagementService_getSendBuddyMessageResult_args.prototype = {};
BuddyManagementService_getSendBuddyMessageResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sendBuddyMessageRequestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getSendBuddyMessageResult_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getSendBuddyMessageResult_args');
  if (this.sendBuddyMessageRequestId !== null && this.sendBuddyMessageRequestId !== undefined) {
    output.writeFieldBegin('sendBuddyMessageRequestId', Thrift.Type.STRING, 1);
    output.writeString(this.sendBuddyMessageRequestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getSendBuddyMessageResult_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SendBuddyMessageResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_getSendBuddyMessageResult_result.prototype = {};
BuddyManagementService_getSendBuddyMessageResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SendBuddyMessageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getSendBuddyMessageResult_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getSendBuddyMessageResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getSetBuddyOnAirResult_args = function(args) {
  this.setBuddyOnAirRequestId = null;
  if (args) {
    if (args.setBuddyOnAirRequestId !== undefined && args.setBuddyOnAirRequestId !== null) {
      this.setBuddyOnAirRequestId = args.setBuddyOnAirRequestId;
    }
  }
};
BuddyManagementService_getSetBuddyOnAirResult_args.prototype = {};
BuddyManagementService_getSetBuddyOnAirResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.setBuddyOnAirRequestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getSetBuddyOnAirResult_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getSetBuddyOnAirResult_args');
  if (this.setBuddyOnAirRequestId !== null && this.setBuddyOnAirRequestId !== undefined) {
    output.writeFieldBegin('setBuddyOnAirRequestId', Thrift.Type.STRING, 1);
    output.writeString(this.setBuddyOnAirRequestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getSetBuddyOnAirResult_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SetBuddyOnAirResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_getSetBuddyOnAirResult_result.prototype = {};
BuddyManagementService_getSetBuddyOnAirResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SetBuddyOnAirResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getSetBuddyOnAirResult_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getSetBuddyOnAirResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getUpdateBuddyProfileResult_args = function(args) {
  this.updateBuddyProfileRequestId = null;
  if (args) {
    if (args.updateBuddyProfileRequestId !== undefined && args.updateBuddyProfileRequestId !== null) {
      this.updateBuddyProfileRequestId = args.updateBuddyProfileRequestId;
    }
  }
};
BuddyManagementService_getUpdateBuddyProfileResult_args.prototype = {};
BuddyManagementService_getUpdateBuddyProfileResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.updateBuddyProfileRequestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getUpdateBuddyProfileResult_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getUpdateBuddyProfileResult_args');
  if (this.updateBuddyProfileRequestId !== null && this.updateBuddyProfileRequestId !== undefined) {
    output.writeFieldBegin('updateBuddyProfileRequestId', Thrift.Type.STRING, 1);
    output.writeString(this.updateBuddyProfileRequestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_getUpdateBuddyProfileResult_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new UpdateBuddyProfileResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_getUpdateBuddyProfileResult_result.prototype = {};
BuddyManagementService_getUpdateBuddyProfileResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UpdateBuddyProfileResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_getUpdateBuddyProfileResult_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_getUpdateBuddyProfileResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_isBuddyOnAirByMid_args = function(args) {
  this.buddyMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
  }
};
BuddyManagementService_isBuddyOnAirByMid_args.prototype = {};
BuddyManagementService_isBuddyOnAirByMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_isBuddyOnAirByMid_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_isBuddyOnAirByMid_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_isBuddyOnAirByMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_isBuddyOnAirByMid_result.prototype = {};
BuddyManagementService_isBuddyOnAirByMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_isBuddyOnAirByMid_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_isBuddyOnAirByMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_args = function(args) {
  this.requestId = null;
  this.msg = null;
  this.sourceContentId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new Message(args.msg);
    }
    if (args.sourceContentId !== undefined && args.sourceContentId !== null) {
      this.sourceContentId = args.sourceContentId;
    }
  }
};
BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_args.prototype = {};
BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sourceContentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  if (this.sourceContentId !== null && this.sourceContentId !== undefined) {
    output.writeFieldBegin('sourceContentId', Thrift.Type.STRING, 3);
    output.writeString(this.sourceContentId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result.prototype = {};
BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_linkAndSendBuddyContentMessageToMids_args = function(args) {
  this.requestId = null;
  this.msg = null;
  this.sourceContentId = null;
  this.mids = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new Message(args.msg);
    }
    if (args.sourceContentId !== undefined && args.sourceContentId !== null) {
      this.sourceContentId = args.sourceContentId;
    }
    if (args.mids !== undefined && args.mids !== null) {
      this.mids = Thrift.copyList(args.mids, [null]);
    }
  }
};
BuddyManagementService_linkAndSendBuddyContentMessageToMids_args.prototype = {};
BuddyManagementService_linkAndSendBuddyContentMessageToMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sourceContentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size1348 = 0;
        var _rtmp31352;
        this.mids = [];
        var _etype1351 = 0;
        _rtmp31352 = input.readListBegin();
        _etype1351 = _rtmp31352.etype;
        _size1348 = _rtmp31352.size;
        for (var _i1353 = 0; _i1353 < _size1348; ++_i1353)
        {
          var elem1354 = null;
          elem1354 = input.readString().value;
          this.mids.push(elem1354);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_linkAndSendBuddyContentMessageToMids_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_linkAndSendBuddyContentMessageToMids_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  if (this.sourceContentId !== null && this.sourceContentId !== undefined) {
    output.writeFieldBegin('sourceContentId', Thrift.Type.STRING, 3);
    output.writeString(this.sourceContentId);
    output.writeFieldEnd();
  }
  if (this.mids !== null && this.mids !== undefined) {
    output.writeFieldBegin('mids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter1355 in this.mids)
    {
      if (this.mids.hasOwnProperty(iter1355))
      {
        iter1355 = this.mids[iter1355];
        output.writeString(iter1355);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_linkAndSendBuddyContentMessageToMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SendBuddyMessageResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_linkAndSendBuddyContentMessageToMids_result.prototype = {};
BuddyManagementService_linkAndSendBuddyContentMessageToMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SendBuddyMessageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_linkAndSendBuddyContentMessageToMids_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_linkAndSendBuddyContentMessageToMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_notifyBuddyBlocked_args = function(args) {
  this.buddyMid = null;
  this.blockerMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
    if (args.blockerMid !== undefined && args.blockerMid !== null) {
      this.blockerMid = args.blockerMid;
    }
  }
};
BuddyManagementService_notifyBuddyBlocked_args.prototype = {};
BuddyManagementService_notifyBuddyBlocked_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.blockerMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_notifyBuddyBlocked_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_notifyBuddyBlocked_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 1);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  if (this.blockerMid !== null && this.blockerMid !== undefined) {
    output.writeFieldBegin('blockerMid', Thrift.Type.STRING, 2);
    output.writeString(this.blockerMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_notifyBuddyBlocked_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_notifyBuddyBlocked_result.prototype = {};
BuddyManagementService_notifyBuddyBlocked_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_notifyBuddyBlocked_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_notifyBuddyBlocked_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_notifyBuddyUnblocked_args = function(args) {
  this.buddyMid = null;
  this.blockerMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
    if (args.blockerMid !== undefined && args.blockerMid !== null) {
      this.blockerMid = args.blockerMid;
    }
  }
};
BuddyManagementService_notifyBuddyUnblocked_args.prototype = {};
BuddyManagementService_notifyBuddyUnblocked_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.blockerMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_notifyBuddyUnblocked_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_notifyBuddyUnblocked_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 1);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  if (this.blockerMid !== null && this.blockerMid !== undefined) {
    output.writeFieldBegin('blockerMid', Thrift.Type.STRING, 2);
    output.writeString(this.blockerMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_notifyBuddyUnblocked_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_notifyBuddyUnblocked_result.prototype = {};
BuddyManagementService_notifyBuddyUnblocked_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_notifyBuddyUnblocked_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_notifyBuddyUnblocked_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_registerBuddy_args = function(args) {
  this.buddyId = null;
  this.searchId = null;
  this.displayName = null;
  this.statusMeessage = null;
  this.picture = null;
  this.settings = null;
  if (args) {
    if (args.buddyId !== undefined && args.buddyId !== null) {
      this.buddyId = args.buddyId;
    }
    if (args.searchId !== undefined && args.searchId !== null) {
      this.searchId = args.searchId;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.statusMeessage !== undefined && args.statusMeessage !== null) {
      this.statusMeessage = args.statusMeessage;
    }
    if (args.picture !== undefined && args.picture !== null) {
      this.picture = args.picture;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = Thrift.copyMap(args.settings, [null]);
    }
  }
};
BuddyManagementService_registerBuddy_args.prototype = {};
BuddyManagementService_registerBuddy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.searchId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.statusMeessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.picture = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size1356 = 0;
        var _rtmp31360;
        this.settings = {};
        var _ktype1357 = 0;
        var _vtype1358 = 0;
        _rtmp31360 = input.readMapBegin();
        _ktype1357 = _rtmp31360.ktype;
        _vtype1358 = _rtmp31360.vtype;
        _size1356 = _rtmp31360.size;
        for (var _i1361 = 0; _i1361 < _size1356; ++_i1361)
        {
          if (_i1361 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1362 = null;
          var val1363 = null;
          key1362 = input.readString().value;
          val1363 = input.readString().value;
          this.settings[key1362] = val1363;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_registerBuddy_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_registerBuddy_args');
  if (this.buddyId !== null && this.buddyId !== undefined) {
    output.writeFieldBegin('buddyId', Thrift.Type.STRING, 2);
    output.writeString(this.buddyId);
    output.writeFieldEnd();
  }
  if (this.searchId !== null && this.searchId !== undefined) {
    output.writeFieldBegin('searchId', Thrift.Type.STRING, 3);
    output.writeString(this.searchId);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 4);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.statusMeessage !== null && this.statusMeessage !== undefined) {
    output.writeFieldBegin('statusMeessage', Thrift.Type.STRING, 5);
    output.writeString(this.statusMeessage);
    output.writeFieldEnd();
  }
  if (this.picture !== null && this.picture !== undefined) {
    output.writeFieldBegin('picture', Thrift.Type.STRING, 6);
    output.writeBinary(this.picture);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.settings));
    for (var kiter1364 in this.settings)
    {
      if (this.settings.hasOwnProperty(kiter1364))
      {
        var viter1365 = this.settings[kiter1364];
        output.writeString(kiter1364);
        output.writeString(viter1365);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_registerBuddy_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_registerBuddy_result.prototype = {};
BuddyManagementService_registerBuddy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_registerBuddy_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_registerBuddy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_registerBuddyAdmin_args = function(args) {
  this.buddyId = null;
  this.searchId = null;
  this.displayName = null;
  this.statusMessage = null;
  this.picture = null;
  if (args) {
    if (args.buddyId !== undefined && args.buddyId !== null) {
      this.buddyId = args.buddyId;
    }
    if (args.searchId !== undefined && args.searchId !== null) {
      this.searchId = args.searchId;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.picture !== undefined && args.picture !== null) {
      this.picture = args.picture;
    }
  }
};
BuddyManagementService_registerBuddyAdmin_args.prototype = {};
BuddyManagementService_registerBuddyAdmin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.searchId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.picture = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_registerBuddyAdmin_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_registerBuddyAdmin_args');
  if (this.buddyId !== null && this.buddyId !== undefined) {
    output.writeFieldBegin('buddyId', Thrift.Type.STRING, 2);
    output.writeString(this.buddyId);
    output.writeFieldEnd();
  }
  if (this.searchId !== null && this.searchId !== undefined) {
    output.writeFieldBegin('searchId', Thrift.Type.STRING, 3);
    output.writeString(this.searchId);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 4);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 5);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.picture !== null && this.picture !== undefined) {
    output.writeFieldBegin('picture', Thrift.Type.STRING, 6);
    output.writeBinary(this.picture);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_registerBuddyAdmin_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_registerBuddyAdmin_result.prototype = {};
BuddyManagementService_registerBuddyAdmin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_registerBuddyAdmin_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_registerBuddyAdmin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_reissueContactTicket_args = function(args) {
  this.expirationTime = null;
  this.maxUseCount = null;
  if (args) {
    if (args.expirationTime !== undefined && args.expirationTime !== null) {
      this.expirationTime = args.expirationTime;
    }
    if (args.maxUseCount !== undefined && args.maxUseCount !== null) {
      this.maxUseCount = args.maxUseCount;
    }
  }
};
BuddyManagementService_reissueContactTicket_args.prototype = {};
BuddyManagementService_reissueContactTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expirationTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxUseCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_reissueContactTicket_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_reissueContactTicket_args');
  if (this.expirationTime !== null && this.expirationTime !== undefined) {
    output.writeFieldBegin('expirationTime', Thrift.Type.I64, 3);
    output.writeI64(this.expirationTime);
    output.writeFieldEnd();
  }
  if (this.maxUseCount !== null && this.maxUseCount !== undefined) {
    output.writeFieldBegin('maxUseCount', Thrift.Type.I32, 4);
    output.writeI32(this.maxUseCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_reissueContactTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_reissueContactTicket_result.prototype = {};
BuddyManagementService_reissueContactTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_reissueContactTicket_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_reissueContactTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_removeBuddyMember_args = function(args) {
  this.requestId = null;
  this.userMid = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.userMid !== undefined && args.userMid !== null) {
      this.userMid = args.userMid;
    }
  }
};
BuddyManagementService_removeBuddyMember_args.prototype = {};
BuddyManagementService_removeBuddyMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_removeBuddyMember_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_removeBuddyMember_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.userMid !== null && this.userMid !== undefined) {
    output.writeFieldBegin('userMid', Thrift.Type.STRING, 2);
    output.writeString(this.userMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_removeBuddyMember_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_removeBuddyMember_result.prototype = {};
BuddyManagementService_removeBuddyMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_removeBuddyMember_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_removeBuddyMember_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_removeBuddyMembers_args = function(args) {
  this.requestId = null;
  this.userMids = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.userMids !== undefined && args.userMids !== null) {
      this.userMids = Thrift.copyList(args.userMids, [null]);
    }
  }
};
BuddyManagementService_removeBuddyMembers_args.prototype = {};
BuddyManagementService_removeBuddyMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1366 = 0;
        var _rtmp31370;
        this.userMids = [];
        var _etype1369 = 0;
        _rtmp31370 = input.readListBegin();
        _etype1369 = _rtmp31370.etype;
        _size1366 = _rtmp31370.size;
        for (var _i1371 = 0; _i1371 < _size1366; ++_i1371)
        {
          var elem1372 = null;
          elem1372 = input.readString().value;
          this.userMids.push(elem1372);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_removeBuddyMembers_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_removeBuddyMembers_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.userMids !== null && this.userMids !== undefined) {
    output.writeFieldBegin('userMids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.userMids.length);
    for (var iter1373 in this.userMids)
    {
      if (this.userMids.hasOwnProperty(iter1373))
      {
        iter1373 = this.userMids[iter1373];
        output.writeString(iter1373);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_removeBuddyMembers_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_removeBuddyMembers_result.prototype = {};
BuddyManagementService_removeBuddyMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_removeBuddyMembers_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_removeBuddyMembers_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendBuddyContentMessageToAll_args = function(args) {
  this.requestId = null;
  this.msg = null;
  this.content = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new Message(args.msg);
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
  }
};
BuddyManagementService_sendBuddyContentMessageToAll_args.prototype = {};
BuddyManagementService_sendBuddyContentMessageToAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendBuddyContentMessageToAll_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendBuddyContentMessageToAll_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendBuddyContentMessageToAll_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SendBuddyMessageResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_sendBuddyContentMessageToAll_result.prototype = {};
BuddyManagementService_sendBuddyContentMessageToAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SendBuddyMessageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendBuddyContentMessageToAll_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendBuddyContentMessageToAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendBuddyContentMessageToAllAsync_args = function(args) {
  this.requestId = null;
  this.msg = null;
  this.content = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new Message(args.msg);
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
  }
};
BuddyManagementService_sendBuddyContentMessageToAllAsync_args.prototype = {};
BuddyManagementService_sendBuddyContentMessageToAllAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendBuddyContentMessageToAllAsync_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendBuddyContentMessageToAllAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendBuddyContentMessageToAllAsync_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_sendBuddyContentMessageToAllAsync_result.prototype = {};
BuddyManagementService_sendBuddyContentMessageToAllAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendBuddyContentMessageToAllAsync_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendBuddyContentMessageToAllAsync_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendBuddyContentMessageToMids_args = function(args) {
  this.requestId = null;
  this.msg = null;
  this.content = null;
  this.mids = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new Message(args.msg);
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
    if (args.mids !== undefined && args.mids !== null) {
      this.mids = Thrift.copyList(args.mids, [null]);
    }
  }
};
BuddyManagementService_sendBuddyContentMessageToMids_args.prototype = {};
BuddyManagementService_sendBuddyContentMessageToMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size1374 = 0;
        var _rtmp31378;
        this.mids = [];
        var _etype1377 = 0;
        _rtmp31378 = input.readListBegin();
        _etype1377 = _rtmp31378.etype;
        _size1374 = _rtmp31378.size;
        for (var _i1379 = 0; _i1379 < _size1374; ++_i1379)
        {
          var elem1380 = null;
          elem1380 = input.readString().value;
          this.mids.push(elem1380);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendBuddyContentMessageToMids_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendBuddyContentMessageToMids_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  if (this.mids !== null && this.mids !== undefined) {
    output.writeFieldBegin('mids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter1381 in this.mids)
    {
      if (this.mids.hasOwnProperty(iter1381))
      {
        iter1381 = this.mids[iter1381];
        output.writeString(iter1381);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendBuddyContentMessageToMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SendBuddyMessageResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_sendBuddyContentMessageToMids_result.prototype = {};
BuddyManagementService_sendBuddyContentMessageToMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SendBuddyMessageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendBuddyContentMessageToMids_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendBuddyContentMessageToMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendBuddyContentMessageToMidsAsync_args = function(args) {
  this.requestId = null;
  this.msg = null;
  this.content = null;
  this.mids = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new Message(args.msg);
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
    if (args.mids !== undefined && args.mids !== null) {
      this.mids = Thrift.copyList(args.mids, [null]);
    }
  }
};
BuddyManagementService_sendBuddyContentMessageToMidsAsync_args.prototype = {};
BuddyManagementService_sendBuddyContentMessageToMidsAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size1382 = 0;
        var _rtmp31386;
        this.mids = [];
        var _etype1385 = 0;
        _rtmp31386 = input.readListBegin();
        _etype1385 = _rtmp31386.etype;
        _size1382 = _rtmp31386.size;
        for (var _i1387 = 0; _i1387 < _size1382; ++_i1387)
        {
          var elem1388 = null;
          elem1388 = input.readString().value;
          this.mids.push(elem1388);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendBuddyContentMessageToMidsAsync_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendBuddyContentMessageToMidsAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  if (this.mids !== null && this.mids !== undefined) {
    output.writeFieldBegin('mids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter1389 in this.mids)
    {
      if (this.mids.hasOwnProperty(iter1389))
      {
        iter1389 = this.mids[iter1389];
        output.writeString(iter1389);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendBuddyContentMessageToMidsAsync_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_sendBuddyContentMessageToMidsAsync_result.prototype = {};
BuddyManagementService_sendBuddyContentMessageToMidsAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendBuddyContentMessageToMidsAsync_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendBuddyContentMessageToMidsAsync_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendBuddyMessageToAll_args = function(args) {
  this.requestId = null;
  this.msg = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new Message(args.msg);
    }
  }
};
BuddyManagementService_sendBuddyMessageToAll_args.prototype = {};
BuddyManagementService_sendBuddyMessageToAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendBuddyMessageToAll_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendBuddyMessageToAll_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendBuddyMessageToAll_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SendBuddyMessageResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_sendBuddyMessageToAll_result.prototype = {};
BuddyManagementService_sendBuddyMessageToAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SendBuddyMessageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendBuddyMessageToAll_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendBuddyMessageToAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendBuddyMessageToAllAsync_args = function(args) {
  this.requestId = null;
  this.msg = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new Message(args.msg);
    }
  }
};
BuddyManagementService_sendBuddyMessageToAllAsync_args.prototype = {};
BuddyManagementService_sendBuddyMessageToAllAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendBuddyMessageToAllAsync_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendBuddyMessageToAllAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendBuddyMessageToAllAsync_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_sendBuddyMessageToAllAsync_result.prototype = {};
BuddyManagementService_sendBuddyMessageToAllAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendBuddyMessageToAllAsync_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendBuddyMessageToAllAsync_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendBuddyMessageToMids_args = function(args) {
  this.requestId = null;
  this.msg = null;
  this.mids = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new Message(args.msg);
    }
    if (args.mids !== undefined && args.mids !== null) {
      this.mids = Thrift.copyList(args.mids, [null]);
    }
  }
};
BuddyManagementService_sendBuddyMessageToMids_args.prototype = {};
BuddyManagementService_sendBuddyMessageToMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1390 = 0;
        var _rtmp31394;
        this.mids = [];
        var _etype1393 = 0;
        _rtmp31394 = input.readListBegin();
        _etype1393 = _rtmp31394.etype;
        _size1390 = _rtmp31394.size;
        for (var _i1395 = 0; _i1395 < _size1390; ++_i1395)
        {
          var elem1396 = null;
          elem1396 = input.readString().value;
          this.mids.push(elem1396);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendBuddyMessageToMids_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendBuddyMessageToMids_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  if (this.mids !== null && this.mids !== undefined) {
    output.writeFieldBegin('mids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter1397 in this.mids)
    {
      if (this.mids.hasOwnProperty(iter1397))
      {
        iter1397 = this.mids[iter1397];
        output.writeString(iter1397);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendBuddyMessageToMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SendBuddyMessageResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_sendBuddyMessageToMids_result.prototype = {};
BuddyManagementService_sendBuddyMessageToMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SendBuddyMessageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendBuddyMessageToMids_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendBuddyMessageToMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendBuddyMessageToMidsAsync_args = function(args) {
  this.requestId = null;
  this.msg = null;
  this.mids = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new Message(args.msg);
    }
    if (args.mids !== undefined && args.mids !== null) {
      this.mids = Thrift.copyList(args.mids, [null]);
    }
  }
};
BuddyManagementService_sendBuddyMessageToMidsAsync_args.prototype = {};
BuddyManagementService_sendBuddyMessageToMidsAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1398 = 0;
        var _rtmp31402;
        this.mids = [];
        var _etype1401 = 0;
        _rtmp31402 = input.readListBegin();
        _etype1401 = _rtmp31402.etype;
        _size1398 = _rtmp31402.size;
        for (var _i1403 = 0; _i1403 < _size1398; ++_i1403)
        {
          var elem1404 = null;
          elem1404 = input.readString().value;
          this.mids.push(elem1404);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendBuddyMessageToMidsAsync_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendBuddyMessageToMidsAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  if (this.mids !== null && this.mids !== undefined) {
    output.writeFieldBegin('mids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter1405 in this.mids)
    {
      if (this.mids.hasOwnProperty(iter1405))
      {
        iter1405 = this.mids[iter1405];
        output.writeString(iter1405);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendBuddyMessageToMidsAsync_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_sendBuddyMessageToMidsAsync_result.prototype = {};
BuddyManagementService_sendBuddyMessageToMidsAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendBuddyMessageToMidsAsync_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendBuddyMessageToMidsAsync_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendIndividualEventToAllAsync_args = function(args) {
  this.requestId = null;
  this.buddyMid = null;
  this.notificationStatus = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
    if (args.notificationStatus !== undefined && args.notificationStatus !== null) {
      this.notificationStatus = args.notificationStatus;
    }
  }
};
BuddyManagementService_sendIndividualEventToAllAsync_args.prototype = {};
BuddyManagementService_sendIndividualEventToAllAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.notificationStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendIndividualEventToAllAsync_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendIndividualEventToAllAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  if (this.notificationStatus !== null && this.notificationStatus !== undefined) {
    output.writeFieldBegin('notificationStatus', Thrift.Type.I32, 3);
    output.writeI32(this.notificationStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_sendIndividualEventToAllAsync_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_sendIndividualEventToAllAsync_result.prototype = {};
BuddyManagementService_sendIndividualEventToAllAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_sendIndividualEventToAllAsync_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_sendIndividualEventToAllAsync_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_setBuddyOnAir_args = function(args) {
  this.requestId = null;
  this.onAir = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.onAir !== undefined && args.onAir !== null) {
      this.onAir = args.onAir;
    }
  }
};
BuddyManagementService_setBuddyOnAir_args.prototype = {};
BuddyManagementService_setBuddyOnAir_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.onAir = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_setBuddyOnAir_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_setBuddyOnAir_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.onAir !== null && this.onAir !== undefined) {
    output.writeFieldBegin('onAir', Thrift.Type.BOOL, 2);
    output.writeBool(this.onAir);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_setBuddyOnAir_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SetBuddyOnAirResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_setBuddyOnAir_result.prototype = {};
BuddyManagementService_setBuddyOnAir_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SetBuddyOnAirResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_setBuddyOnAir_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_setBuddyOnAir_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_setBuddyOnAirAsync_args = function(args) {
  this.requestId = null;
  this.onAir = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.onAir !== undefined && args.onAir !== null) {
      this.onAir = args.onAir;
    }
  }
};
BuddyManagementService_setBuddyOnAirAsync_args.prototype = {};
BuddyManagementService_setBuddyOnAirAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.onAir = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_setBuddyOnAirAsync_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_setBuddyOnAirAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.onAir !== null && this.onAir !== undefined) {
    output.writeFieldBegin('onAir', Thrift.Type.BOOL, 2);
    output.writeBool(this.onAir);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_setBuddyOnAirAsync_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_setBuddyOnAirAsync_result.prototype = {};
BuddyManagementService_setBuddyOnAirAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_setBuddyOnAirAsync_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_setBuddyOnAirAsync_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_storeMessage_args = function(args) {
  this.requestId = null;
  this.messageRequest = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.messageRequest !== undefined && args.messageRequest !== null) {
      this.messageRequest = new BuddyMessageRequest(args.messageRequest);
    }
  }
};
BuddyManagementService_storeMessage_args.prototype = {};
BuddyManagementService_storeMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.messageRequest = new BuddyMessageRequest();
        this.messageRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_storeMessage_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_storeMessage_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.messageRequest !== null && this.messageRequest !== undefined) {
    output.writeFieldBegin('messageRequest', Thrift.Type.STRUCT, 2);
    this.messageRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_storeMessage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SendBuddyMessageResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_storeMessage_result.prototype = {};
BuddyManagementService_storeMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SendBuddyMessageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_storeMessage_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_storeMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_unblockBuddyMember_args = function(args) {
  this.requestId = null;
  this.mid = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
BuddyManagementService_unblockBuddyMember_args.prototype = {};
BuddyManagementService_unblockBuddyMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_unblockBuddyMember_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_unblockBuddyMember_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_unblockBuddyMember_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_unblockBuddyMember_result.prototype = {};
BuddyManagementService_unblockBuddyMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_unblockBuddyMember_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_unblockBuddyMember_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_unregisterBuddy_args = function(args) {
  this.requestId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
  }
};
BuddyManagementService_unregisterBuddy_args.prototype = {};
BuddyManagementService_unregisterBuddy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_unregisterBuddy_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_unregisterBuddy_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_unregisterBuddy_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_unregisterBuddy_result.prototype = {};
BuddyManagementService_unregisterBuddy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_unregisterBuddy_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_unregisterBuddy_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_unregisterBuddyAdmin_args = function(args) {
  this.requestId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
  }
};
BuddyManagementService_unregisterBuddyAdmin_args.prototype = {};
BuddyManagementService_unregisterBuddyAdmin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_unregisterBuddyAdmin_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_unregisterBuddyAdmin_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_unregisterBuddyAdmin_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_unregisterBuddyAdmin_result.prototype = {};
BuddyManagementService_unregisterBuddyAdmin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_unregisterBuddyAdmin_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_unregisterBuddyAdmin_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_updateBuddyAdminProfileAttribute_args = function(args) {
  this.requestId = null;
  this.attributes = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
BuddyManagementService_updateBuddyAdminProfileAttribute_args.prototype = {};
BuddyManagementService_updateBuddyAdminProfileAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size1406 = 0;
        var _rtmp31410;
        this.attributes = {};
        var _ktype1407 = 0;
        var _vtype1408 = 0;
        _rtmp31410 = input.readMapBegin();
        _ktype1407 = _rtmp31410.ktype;
        _vtype1408 = _rtmp31410.vtype;
        _size1406 = _rtmp31410.size;
        for (var _i1411 = 0; _i1411 < _size1406; ++_i1411)
        {
          if (_i1411 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1412 = null;
          var val1413 = null;
          key1412 = input.readString().value;
          val1413 = input.readString().value;
          this.attributes[key1412] = val1413;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_updateBuddyAdminProfileAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_updateBuddyAdminProfileAttribute_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter1414 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter1414))
      {
        var viter1415 = this.attributes[kiter1414];
        output.writeString(kiter1414);
        output.writeString(viter1415);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_updateBuddyAdminProfileAttribute_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_updateBuddyAdminProfileAttribute_result.prototype = {};
BuddyManagementService_updateBuddyAdminProfileAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_updateBuddyAdminProfileAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_updateBuddyAdminProfileAttribute_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_updateBuddyAdminProfileImage_args = function(args) {
  this.requestId = null;
  this.picture = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.picture !== undefined && args.picture !== null) {
      this.picture = args.picture;
    }
  }
};
BuddyManagementService_updateBuddyAdminProfileImage_args.prototype = {};
BuddyManagementService_updateBuddyAdminProfileImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.picture = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_updateBuddyAdminProfileImage_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_updateBuddyAdminProfileImage_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.picture !== null && this.picture !== undefined) {
    output.writeFieldBegin('picture', Thrift.Type.STRING, 2);
    output.writeBinary(this.picture);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_updateBuddyAdminProfileImage_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_updateBuddyAdminProfileImage_result.prototype = {};
BuddyManagementService_updateBuddyAdminProfileImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_updateBuddyAdminProfileImage_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_updateBuddyAdminProfileImage_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_updateBuddyProfileAttributes_args = function(args) {
  this.requestId = null;
  this.attributes = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
BuddyManagementService_updateBuddyProfileAttributes_args.prototype = {};
BuddyManagementService_updateBuddyProfileAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size1416 = 0;
        var _rtmp31420;
        this.attributes = {};
        var _ktype1417 = 0;
        var _vtype1418 = 0;
        _rtmp31420 = input.readMapBegin();
        _ktype1417 = _rtmp31420.ktype;
        _vtype1418 = _rtmp31420.vtype;
        _size1416 = _rtmp31420.size;
        for (var _i1421 = 0; _i1421 < _size1416; ++_i1421)
        {
          if (_i1421 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1422 = null;
          var val1423 = null;
          key1422 = input.readString().value;
          val1423 = input.readString().value;
          this.attributes[key1422] = val1423;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_updateBuddyProfileAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_updateBuddyProfileAttributes_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter1424 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter1424))
      {
        var viter1425 = this.attributes[kiter1424];
        output.writeString(kiter1424);
        output.writeString(viter1425);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_updateBuddyProfileAttributes_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new UpdateBuddyProfileResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_updateBuddyProfileAttributes_result.prototype = {};
BuddyManagementService_updateBuddyProfileAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UpdateBuddyProfileResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_updateBuddyProfileAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_updateBuddyProfileAttributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_updateBuddyProfileAttributesAsync_args = function(args) {
  this.requestId = null;
  this.attributes = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
BuddyManagementService_updateBuddyProfileAttributesAsync_args.prototype = {};
BuddyManagementService_updateBuddyProfileAttributesAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size1426 = 0;
        var _rtmp31430;
        this.attributes = {};
        var _ktype1427 = 0;
        var _vtype1428 = 0;
        _rtmp31430 = input.readMapBegin();
        _ktype1427 = _rtmp31430.ktype;
        _vtype1428 = _rtmp31430.vtype;
        _size1426 = _rtmp31430.size;
        for (var _i1431 = 0; _i1431 < _size1426; ++_i1431)
        {
          if (_i1431 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1432 = null;
          var val1433 = null;
          key1432 = input.readString().value;
          val1433 = input.readString().value;
          this.attributes[key1432] = val1433;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_updateBuddyProfileAttributesAsync_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_updateBuddyProfileAttributesAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter1434 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter1434))
      {
        var viter1435 = this.attributes[kiter1434];
        output.writeString(kiter1434);
        output.writeString(viter1435);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_updateBuddyProfileAttributesAsync_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_updateBuddyProfileAttributesAsync_result.prototype = {};
BuddyManagementService_updateBuddyProfileAttributesAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_updateBuddyProfileAttributesAsync_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_updateBuddyProfileAttributesAsync_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_updateBuddyProfileImage_args = function(args) {
  this.requestId = null;
  this.image = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
  }
};
BuddyManagementService_updateBuddyProfileImage_args.prototype = {};
BuddyManagementService_updateBuddyProfileImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_updateBuddyProfileImage_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_updateBuddyProfileImage_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 2);
    output.writeBinary(this.image);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_updateBuddyProfileImage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new UpdateBuddyProfileResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_updateBuddyProfileImage_result.prototype = {};
BuddyManagementService_updateBuddyProfileImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UpdateBuddyProfileResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_updateBuddyProfileImage_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_updateBuddyProfileImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_updateBuddyProfileImageAsync_args = function(args) {
  this.requestId = null;
  this.image = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
  }
};
BuddyManagementService_updateBuddyProfileImageAsync_args.prototype = {};
BuddyManagementService_updateBuddyProfileImageAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_updateBuddyProfileImageAsync_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_updateBuddyProfileImageAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 2);
    output.writeBinary(this.image);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_updateBuddyProfileImageAsync_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_updateBuddyProfileImageAsync_result.prototype = {};
BuddyManagementService_updateBuddyProfileImageAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_updateBuddyProfileImageAsync_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_updateBuddyProfileImageAsync_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_updateBuddySearchId_args = function(args) {
  this.requestId = null;
  this.searchId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.searchId !== undefined && args.searchId !== null) {
      this.searchId = args.searchId;
    }
  }
};
BuddyManagementService_updateBuddySearchId_args.prototype = {};
BuddyManagementService_updateBuddySearchId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.searchId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_updateBuddySearchId_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_updateBuddySearchId_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.searchId !== null && this.searchId !== undefined) {
    output.writeFieldBegin('searchId', Thrift.Type.STRING, 2);
    output.writeString(this.searchId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_updateBuddySearchId_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_updateBuddySearchId_result.prototype = {};
BuddyManagementService_updateBuddySearchId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_updateBuddySearchId_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_updateBuddySearchId_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_updateBuddySettings_args = function(args) {
  this.settings = null;
  if (args) {
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = Thrift.copyMap(args.settings, [null]);
    }
  }
};
BuddyManagementService_updateBuddySettings_args.prototype = {};
BuddyManagementService_updateBuddySettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size1436 = 0;
        var _rtmp31440;
        this.settings = {};
        var _ktype1437 = 0;
        var _vtype1438 = 0;
        _rtmp31440 = input.readMapBegin();
        _ktype1437 = _rtmp31440.ktype;
        _vtype1438 = _rtmp31440.vtype;
        _size1436 = _rtmp31440.size;
        for (var _i1441 = 0; _i1441 < _size1436; ++_i1441)
        {
          if (_i1441 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1442 = null;
          var val1443 = null;
          key1442 = input.readString().value;
          val1443 = input.readString().value;
          this.settings[key1442] = val1443;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_updateBuddySettings_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_updateBuddySettings_args');
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.settings));
    for (var kiter1444 in this.settings)
    {
      if (this.settings.hasOwnProperty(kiter1444))
      {
        var viter1445 = this.settings[kiter1444];
        output.writeString(kiter1444);
        output.writeString(viter1445);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_updateBuddySettings_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_updateBuddySettings_result.prototype = {};
BuddyManagementService_updateBuddySettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_updateBuddySettings_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_updateBuddySettings_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_uploadBuddyContent_args = function(args) {
  this.contentType = null;
  this.content = null;
  if (args) {
    if (args.contentType !== undefined && args.contentType !== null) {
      this.contentType = args.contentType;
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
  }
};
BuddyManagementService_uploadBuddyContent_args.prototype = {};
BuddyManagementService_uploadBuddyContent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.contentType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_uploadBuddyContent_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_uploadBuddyContent_args');
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.I32, 2);
    output.writeI32(this.contentType);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementService_uploadBuddyContent_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyManagementService_uploadBuddyContent_result.prototype = {};
BuddyManagementService_uploadBuddyContent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyManagementService_uploadBuddyContent_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyManagementService_uploadBuddyContent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyManagementServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
BuddyManagementServiceClient.prototype = {};
BuddyManagementServiceClient.prototype.addBuddyMember = function(requestId, userMid, callback) {
  this.send_addBuddyMember(requestId, userMid, callback); 
  if (!callback) {
  this.recv_addBuddyMember();
  }
};

BuddyManagementServiceClient.prototype.send_addBuddyMember = function(requestId, userMid, callback) {
  this.output.writeMessageBegin('addBuddyMember', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    userMid: userMid
  };
  var args = new BuddyManagementService_addBuddyMember_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addBuddyMember();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_addBuddyMember = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_addBuddyMember_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BuddyManagementServiceClient.prototype.addBuddyMembers = function(requestId, userMids, callback) {
  this.send_addBuddyMembers(requestId, userMids, callback); 
  if (!callback) {
  this.recv_addBuddyMembers();
  }
};

BuddyManagementServiceClient.prototype.send_addBuddyMembers = function(requestId, userMids, callback) {
  this.output.writeMessageBegin('addBuddyMembers', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    userMids: userMids
  };
  var args = new BuddyManagementService_addBuddyMembers_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addBuddyMembers();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_addBuddyMembers = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_addBuddyMembers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BuddyManagementServiceClient.prototype.blockBuddyMember = function(requestId, mid, callback) {
  this.send_blockBuddyMember(requestId, mid, callback); 
  if (!callback) {
  this.recv_blockBuddyMember();
  }
};

BuddyManagementServiceClient.prototype.send_blockBuddyMember = function(requestId, mid, callback) {
  this.output.writeMessageBegin('blockBuddyMember', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    mid: mid
  };
  var args = new BuddyManagementService_blockBuddyMember_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_blockBuddyMember();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_blockBuddyMember = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_blockBuddyMember_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BuddyManagementServiceClient.prototype.commitSendMessagesToAll = function(requestIdList, callback) {
  this.send_commitSendMessagesToAll(requestIdList, callback); 
  if (!callback) {
    return this.recv_commitSendMessagesToAll();
  }
};

BuddyManagementServiceClient.prototype.send_commitSendMessagesToAll = function(requestIdList, callback) {
  this.output.writeMessageBegin('commitSendMessagesToAll', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestIdList: requestIdList
  };
  var args = new BuddyManagementService_commitSendMessagesToAll_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_commitSendMessagesToAll();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_commitSendMessagesToAll = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_commitSendMessagesToAll_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'commitSendMessagesToAll failed: unknown result';
};
BuddyManagementServiceClient.prototype.commitSendMessagesToMids = function(requestIdList, mids, callback) {
  this.send_commitSendMessagesToMids(requestIdList, mids, callback); 
  if (!callback) {
    return this.recv_commitSendMessagesToMids();
  }
};

BuddyManagementServiceClient.prototype.send_commitSendMessagesToMids = function(requestIdList, mids, callback) {
  this.output.writeMessageBegin('commitSendMessagesToMids', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestIdList: requestIdList,
    mids: mids
  };
  var args = new BuddyManagementService_commitSendMessagesToMids_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_commitSendMessagesToMids();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_commitSendMessagesToMids = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_commitSendMessagesToMids_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'commitSendMessagesToMids failed: unknown result';
};
BuddyManagementServiceClient.prototype.containsBuddyMember = function(requestId, userMid, callback) {
  this.send_containsBuddyMember(requestId, userMid, callback); 
  if (!callback) {
    return this.recv_containsBuddyMember();
  }
};

BuddyManagementServiceClient.prototype.send_containsBuddyMember = function(requestId, userMid, callback) {
  this.output.writeMessageBegin('containsBuddyMember', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    userMid: userMid
  };
  var args = new BuddyManagementService_containsBuddyMember_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_containsBuddyMember();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_containsBuddyMember = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_containsBuddyMember_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'containsBuddyMember failed: unknown result';
};
BuddyManagementServiceClient.prototype.downloadMessageContent = function(requestId, messageId, callback) {
  this.send_downloadMessageContent(requestId, messageId, callback); 
  if (!callback) {
    return this.recv_downloadMessageContent();
  }
};

BuddyManagementServiceClient.prototype.send_downloadMessageContent = function(requestId, messageId, callback) {
  this.output.writeMessageBegin('downloadMessageContent', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    messageId: messageId
  };
  var args = new BuddyManagementService_downloadMessageContent_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_downloadMessageContent();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_downloadMessageContent = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_downloadMessageContent_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'downloadMessageContent failed: unknown result';
};
BuddyManagementServiceClient.prototype.downloadMessageContentPreview = function(requestId, messageId, callback) {
  this.send_downloadMessageContentPreview(requestId, messageId, callback); 
  if (!callback) {
    return this.recv_downloadMessageContentPreview();
  }
};

BuddyManagementServiceClient.prototype.send_downloadMessageContentPreview = function(requestId, messageId, callback) {
  this.output.writeMessageBegin('downloadMessageContentPreview', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    messageId: messageId
  };
  var args = new BuddyManagementService_downloadMessageContentPreview_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_downloadMessageContentPreview();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_downloadMessageContentPreview = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_downloadMessageContentPreview_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'downloadMessageContentPreview failed: unknown result';
};
BuddyManagementServiceClient.prototype.downloadProfileImage = function(requestId, callback) {
  this.send_downloadProfileImage(requestId, callback); 
  if (!callback) {
    return this.recv_downloadProfileImage();
  }
};

BuddyManagementServiceClient.prototype.send_downloadProfileImage = function(requestId, callback) {
  this.output.writeMessageBegin('downloadProfileImage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId
  };
  var args = new BuddyManagementService_downloadProfileImage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_downloadProfileImage();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_downloadProfileImage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_downloadProfileImage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'downloadProfileImage failed: unknown result';
};
BuddyManagementServiceClient.prototype.downloadProfileImagePreview = function(requestId, callback) {
  this.send_downloadProfileImagePreview(requestId, callback); 
  if (!callback) {
    return this.recv_downloadProfileImagePreview();
  }
};

BuddyManagementServiceClient.prototype.send_downloadProfileImagePreview = function(requestId, callback) {
  this.output.writeMessageBegin('downloadProfileImagePreview', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId
  };
  var args = new BuddyManagementService_downloadProfileImagePreview_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_downloadProfileImagePreview();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_downloadProfileImagePreview = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_downloadProfileImagePreview_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'downloadProfileImagePreview failed: unknown result';
};
BuddyManagementServiceClient.prototype.getActiveMemberCountByBuddyMid = function(buddyMid, callback) {
  this.send_getActiveMemberCountByBuddyMid(buddyMid, callback); 
  if (!callback) {
    return this.recv_getActiveMemberCountByBuddyMid();
  }
};

BuddyManagementServiceClient.prototype.send_getActiveMemberCountByBuddyMid = function(buddyMid, callback) {
  this.output.writeMessageBegin('getActiveMemberCountByBuddyMid', Thrift.MessageType.CALL, this.seqid);
  var params = {
    buddyMid: buddyMid
  };
  var args = new BuddyManagementService_getActiveMemberCountByBuddyMid_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getActiveMemberCountByBuddyMid();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_getActiveMemberCountByBuddyMid = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_getActiveMemberCountByBuddyMid_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getActiveMemberCountByBuddyMid failed: unknown result';
};
BuddyManagementServiceClient.prototype.getActiveMemberMidsByBuddyMid = function(buddyMid, callback) {
  this.send_getActiveMemberMidsByBuddyMid(buddyMid, callback); 
  if (!callback) {
    return this.recv_getActiveMemberMidsByBuddyMid();
  }
};

BuddyManagementServiceClient.prototype.send_getActiveMemberMidsByBuddyMid = function(buddyMid, callback) {
  this.output.writeMessageBegin('getActiveMemberMidsByBuddyMid', Thrift.MessageType.CALL, this.seqid);
  var params = {
    buddyMid: buddyMid
  };
  var args = new BuddyManagementService_getActiveMemberMidsByBuddyMid_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getActiveMemberMidsByBuddyMid();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_getActiveMemberMidsByBuddyMid = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_getActiveMemberMidsByBuddyMid_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getActiveMemberMidsByBuddyMid failed: unknown result';
};
BuddyManagementServiceClient.prototype.getAllBuddyMembers = function(callback) {
  this.send_getAllBuddyMembers(callback); 
  if (!callback) {
    return this.recv_getAllBuddyMembers();
  }
};

BuddyManagementServiceClient.prototype.send_getAllBuddyMembers = function(callback) {
  this.output.writeMessageBegin('getAllBuddyMembers', Thrift.MessageType.CALL, this.seqid);
  var args = new BuddyManagementService_getAllBuddyMembers_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getAllBuddyMembers();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_getAllBuddyMembers = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_getAllBuddyMembers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllBuddyMembers failed: unknown result';
};
BuddyManagementServiceClient.prototype.getBlockedBuddyMembers = function(callback) {
  this.send_getBlockedBuddyMembers(callback); 
  if (!callback) {
    return this.recv_getBlockedBuddyMembers();
  }
};

BuddyManagementServiceClient.prototype.send_getBlockedBuddyMembers = function(callback) {
  this.output.writeMessageBegin('getBlockedBuddyMembers', Thrift.MessageType.CALL, this.seqid);
  var args = new BuddyManagementService_getBlockedBuddyMembers_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getBlockedBuddyMembers();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_getBlockedBuddyMembers = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_getBlockedBuddyMembers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getBlockedBuddyMembers failed: unknown result';
};
BuddyManagementServiceClient.prototype.getBlockerCountByBuddyMid = function(buddyMid, callback) {
  this.send_getBlockerCountByBuddyMid(buddyMid, callback); 
  if (!callback) {
    return this.recv_getBlockerCountByBuddyMid();
  }
};

BuddyManagementServiceClient.prototype.send_getBlockerCountByBuddyMid = function(buddyMid, callback) {
  this.output.writeMessageBegin('getBlockerCountByBuddyMid', Thrift.MessageType.CALL, this.seqid);
  var params = {
    buddyMid: buddyMid
  };
  var args = new BuddyManagementService_getBlockerCountByBuddyMid_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getBlockerCountByBuddyMid();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_getBlockerCountByBuddyMid = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_getBlockerCountByBuddyMid_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getBlockerCountByBuddyMid failed: unknown result';
};
BuddyManagementServiceClient.prototype.getBuddyDetailByMid = function(buddyMid, callback) {
  this.send_getBuddyDetailByMid(buddyMid, callback); 
  if (!callback) {
    return this.recv_getBuddyDetailByMid();
  }
};

BuddyManagementServiceClient.prototype.send_getBuddyDetailByMid = function(buddyMid, callback) {
  this.output.writeMessageBegin('getBuddyDetailByMid', Thrift.MessageType.CALL, this.seqid);
  var params = {
    buddyMid: buddyMid
  };
  var args = new BuddyManagementService_getBuddyDetailByMid_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getBuddyDetailByMid();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_getBuddyDetailByMid = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_getBuddyDetailByMid_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getBuddyDetailByMid failed: unknown result';
};
BuddyManagementServiceClient.prototype.getBuddyProfile = function(callback) {
  this.send_getBuddyProfile(callback); 
  if (!callback) {
    return this.recv_getBuddyProfile();
  }
};

BuddyManagementServiceClient.prototype.send_getBuddyProfile = function(callback) {
  this.output.writeMessageBegin('getBuddyProfile', Thrift.MessageType.CALL, this.seqid);
  var args = new BuddyManagementService_getBuddyProfile_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getBuddyProfile();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_getBuddyProfile = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_getBuddyProfile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getBuddyProfile failed: unknown result';
};
BuddyManagementServiceClient.prototype.getContactTicket = function(callback) {
  this.send_getContactTicket(callback); 
  if (!callback) {
    return this.recv_getContactTicket();
  }
};

BuddyManagementServiceClient.prototype.send_getContactTicket = function(callback) {
  this.output.writeMessageBegin('getContactTicket', Thrift.MessageType.CALL, this.seqid);
  var args = new BuddyManagementService_getContactTicket_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getContactTicket();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_getContactTicket = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_getContactTicket_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getContactTicket failed: unknown result';
};
BuddyManagementServiceClient.prototype.getMemberCountByBuddyMid = function(buddyMid, callback) {
  this.send_getMemberCountByBuddyMid(buddyMid, callback); 
  if (!callback) {
    return this.recv_getMemberCountByBuddyMid();
  }
};

BuddyManagementServiceClient.prototype.send_getMemberCountByBuddyMid = function(buddyMid, callback) {
  this.output.writeMessageBegin('getMemberCountByBuddyMid', Thrift.MessageType.CALL, this.seqid);
  var params = {
    buddyMid: buddyMid
  };
  var args = new BuddyManagementService_getMemberCountByBuddyMid_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getMemberCountByBuddyMid();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_getMemberCountByBuddyMid = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_getMemberCountByBuddyMid_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMemberCountByBuddyMid failed: unknown result';
};
BuddyManagementServiceClient.prototype.getSendBuddyMessageResult = function(sendBuddyMessageRequestId, callback) {
  this.send_getSendBuddyMessageResult(sendBuddyMessageRequestId, callback); 
  if (!callback) {
    return this.recv_getSendBuddyMessageResult();
  }
};

BuddyManagementServiceClient.prototype.send_getSendBuddyMessageResult = function(sendBuddyMessageRequestId, callback) {
  this.output.writeMessageBegin('getSendBuddyMessageResult', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sendBuddyMessageRequestId: sendBuddyMessageRequestId
  };
  var args = new BuddyManagementService_getSendBuddyMessageResult_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getSendBuddyMessageResult();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_getSendBuddyMessageResult = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_getSendBuddyMessageResult_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSendBuddyMessageResult failed: unknown result';
};
BuddyManagementServiceClient.prototype.getSetBuddyOnAirResult = function(setBuddyOnAirRequestId, callback) {
  this.send_getSetBuddyOnAirResult(setBuddyOnAirRequestId, callback); 
  if (!callback) {
    return this.recv_getSetBuddyOnAirResult();
  }
};

BuddyManagementServiceClient.prototype.send_getSetBuddyOnAirResult = function(setBuddyOnAirRequestId, callback) {
  this.output.writeMessageBegin('getSetBuddyOnAirResult', Thrift.MessageType.CALL, this.seqid);
  var params = {
    setBuddyOnAirRequestId: setBuddyOnAirRequestId
  };
  var args = new BuddyManagementService_getSetBuddyOnAirResult_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getSetBuddyOnAirResult();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_getSetBuddyOnAirResult = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_getSetBuddyOnAirResult_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSetBuddyOnAirResult failed: unknown result';
};
BuddyManagementServiceClient.prototype.getUpdateBuddyProfileResult = function(updateBuddyProfileRequestId, callback) {
  this.send_getUpdateBuddyProfileResult(updateBuddyProfileRequestId, callback); 
  if (!callback) {
    return this.recv_getUpdateBuddyProfileResult();
  }
};

BuddyManagementServiceClient.prototype.send_getUpdateBuddyProfileResult = function(updateBuddyProfileRequestId, callback) {
  this.output.writeMessageBegin('getUpdateBuddyProfileResult', Thrift.MessageType.CALL, this.seqid);
  var params = {
    updateBuddyProfileRequestId: updateBuddyProfileRequestId
  };
  var args = new BuddyManagementService_getUpdateBuddyProfileResult_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getUpdateBuddyProfileResult();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_getUpdateBuddyProfileResult = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_getUpdateBuddyProfileResult_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUpdateBuddyProfileResult failed: unknown result';
};
BuddyManagementServiceClient.prototype.isBuddyOnAirByMid = function(buddyMid, callback) {
  this.send_isBuddyOnAirByMid(buddyMid, callback); 
  if (!callback) {
    return this.recv_isBuddyOnAirByMid();
  }
};

BuddyManagementServiceClient.prototype.send_isBuddyOnAirByMid = function(buddyMid, callback) {
  this.output.writeMessageBegin('isBuddyOnAirByMid', Thrift.MessageType.CALL, this.seqid);
  var params = {
    buddyMid: buddyMid
  };
  var args = new BuddyManagementService_isBuddyOnAirByMid_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_isBuddyOnAirByMid();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_isBuddyOnAirByMid = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_isBuddyOnAirByMid_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isBuddyOnAirByMid failed: unknown result';
};
BuddyManagementServiceClient.prototype.linkAndSendBuddyContentMessageToAllAsync = function(requestId, msg, sourceContentId, callback) {
  this.send_linkAndSendBuddyContentMessageToAllAsync(requestId, msg, sourceContentId, callback); 
  if (!callback) {
    return this.recv_linkAndSendBuddyContentMessageToAllAsync();
  }
};

BuddyManagementServiceClient.prototype.send_linkAndSendBuddyContentMessageToAllAsync = function(requestId, msg, sourceContentId, callback) {
  this.output.writeMessageBegin('linkAndSendBuddyContentMessageToAllAsync', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    msg: msg,
    sourceContentId: sourceContentId
  };
  var args = new BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_linkAndSendBuddyContentMessageToAllAsync();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_linkAndSendBuddyContentMessageToAllAsync = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'linkAndSendBuddyContentMessageToAllAsync failed: unknown result';
};
BuddyManagementServiceClient.prototype.linkAndSendBuddyContentMessageToMids = function(requestId, msg, sourceContentId, mids, callback) {
  this.send_linkAndSendBuddyContentMessageToMids(requestId, msg, sourceContentId, mids, callback); 
  if (!callback) {
    return this.recv_linkAndSendBuddyContentMessageToMids();
  }
};

BuddyManagementServiceClient.prototype.send_linkAndSendBuddyContentMessageToMids = function(requestId, msg, sourceContentId, mids, callback) {
  this.output.writeMessageBegin('linkAndSendBuddyContentMessageToMids', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    msg: msg,
    sourceContentId: sourceContentId,
    mids: mids
  };
  var args = new BuddyManagementService_linkAndSendBuddyContentMessageToMids_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_linkAndSendBuddyContentMessageToMids();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_linkAndSendBuddyContentMessageToMids = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_linkAndSendBuddyContentMessageToMids_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'linkAndSendBuddyContentMessageToMids failed: unknown result';
};
BuddyManagementServiceClient.prototype.notifyBuddyBlocked = function(buddyMid, blockerMid, callback) {
  this.send_notifyBuddyBlocked(buddyMid, blockerMid, callback); 
  if (!callback) {
  this.recv_notifyBuddyBlocked();
  }
};

BuddyManagementServiceClient.prototype.send_notifyBuddyBlocked = function(buddyMid, blockerMid, callback) {
  this.output.writeMessageBegin('notifyBuddyBlocked', Thrift.MessageType.CALL, this.seqid);
  var params = {
    buddyMid: buddyMid,
    blockerMid: blockerMid
  };
  var args = new BuddyManagementService_notifyBuddyBlocked_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_notifyBuddyBlocked();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_notifyBuddyBlocked = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_notifyBuddyBlocked_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BuddyManagementServiceClient.prototype.notifyBuddyUnblocked = function(buddyMid, blockerMid, callback) {
  this.send_notifyBuddyUnblocked(buddyMid, blockerMid, callback); 
  if (!callback) {
  this.recv_notifyBuddyUnblocked();
  }
};

BuddyManagementServiceClient.prototype.send_notifyBuddyUnblocked = function(buddyMid, blockerMid, callback) {
  this.output.writeMessageBegin('notifyBuddyUnblocked', Thrift.MessageType.CALL, this.seqid);
  var params = {
    buddyMid: buddyMid,
    blockerMid: blockerMid
  };
  var args = new BuddyManagementService_notifyBuddyUnblocked_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_notifyBuddyUnblocked();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_notifyBuddyUnblocked = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_notifyBuddyUnblocked_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BuddyManagementServiceClient.prototype.registerBuddy = function(buddyId, searchId, displayName, statusMeessage, picture, settings, callback) {
  this.send_registerBuddy(buddyId, searchId, displayName, statusMeessage, picture, settings, callback); 
  if (!callback) {
    return this.recv_registerBuddy();
  }
};

BuddyManagementServiceClient.prototype.send_registerBuddy = function(buddyId, searchId, displayName, statusMeessage, picture, settings, callback) {
  this.output.writeMessageBegin('registerBuddy', Thrift.MessageType.CALL, this.seqid);
  var params = {
    buddyId: buddyId,
    searchId: searchId,
    displayName: displayName,
    statusMeessage: statusMeessage,
    picture: picture,
    settings: settings
  };
  var args = new BuddyManagementService_registerBuddy_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerBuddy();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_registerBuddy = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_registerBuddy_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerBuddy failed: unknown result';
};
BuddyManagementServiceClient.prototype.registerBuddyAdmin = function(buddyId, searchId, displayName, statusMessage, picture, callback) {
  this.send_registerBuddyAdmin(buddyId, searchId, displayName, statusMessage, picture, callback); 
  if (!callback) {
    return this.recv_registerBuddyAdmin();
  }
};

BuddyManagementServiceClient.prototype.send_registerBuddyAdmin = function(buddyId, searchId, displayName, statusMessage, picture, callback) {
  this.output.writeMessageBegin('registerBuddyAdmin', Thrift.MessageType.CALL, this.seqid);
  var params = {
    buddyId: buddyId,
    searchId: searchId,
    displayName: displayName,
    statusMessage: statusMessage,
    picture: picture
  };
  var args = new BuddyManagementService_registerBuddyAdmin_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerBuddyAdmin();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_registerBuddyAdmin = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_registerBuddyAdmin_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerBuddyAdmin failed: unknown result';
};
BuddyManagementServiceClient.prototype.reissueContactTicket = function(expirationTime, maxUseCount, callback) {
  this.send_reissueContactTicket(expirationTime, maxUseCount, callback); 
  if (!callback) {
    return this.recv_reissueContactTicket();
  }
};

BuddyManagementServiceClient.prototype.send_reissueContactTicket = function(expirationTime, maxUseCount, callback) {
  this.output.writeMessageBegin('reissueContactTicket', Thrift.MessageType.CALL, this.seqid);
  var params = {
    expirationTime: expirationTime,
    maxUseCount: maxUseCount
  };
  var args = new BuddyManagementService_reissueContactTicket_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_reissueContactTicket();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_reissueContactTicket = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_reissueContactTicket_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reissueContactTicket failed: unknown result';
};
BuddyManagementServiceClient.prototype.removeBuddyMember = function(requestId, userMid, callback) {
  this.send_removeBuddyMember(requestId, userMid, callback); 
  if (!callback) {
  this.recv_removeBuddyMember();
  }
};

BuddyManagementServiceClient.prototype.send_removeBuddyMember = function(requestId, userMid, callback) {
  this.output.writeMessageBegin('removeBuddyMember', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    userMid: userMid
  };
  var args = new BuddyManagementService_removeBuddyMember_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeBuddyMember();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_removeBuddyMember = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_removeBuddyMember_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BuddyManagementServiceClient.prototype.removeBuddyMembers = function(requestId, userMids, callback) {
  this.send_removeBuddyMembers(requestId, userMids, callback); 
  if (!callback) {
  this.recv_removeBuddyMembers();
  }
};

BuddyManagementServiceClient.prototype.send_removeBuddyMembers = function(requestId, userMids, callback) {
  this.output.writeMessageBegin('removeBuddyMembers', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    userMids: userMids
  };
  var args = new BuddyManagementService_removeBuddyMembers_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeBuddyMembers();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_removeBuddyMembers = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_removeBuddyMembers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BuddyManagementServiceClient.prototype.sendBuddyContentMessageToAll = function(requestId, msg, content, callback) {
  this.send_sendBuddyContentMessageToAll(requestId, msg, content, callback); 
  if (!callback) {
    return this.recv_sendBuddyContentMessageToAll();
  }
};

BuddyManagementServiceClient.prototype.send_sendBuddyContentMessageToAll = function(requestId, msg, content, callback) {
  this.output.writeMessageBegin('sendBuddyContentMessageToAll', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    msg: msg,
    content: content
  };
  var args = new BuddyManagementService_sendBuddyContentMessageToAll_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendBuddyContentMessageToAll();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_sendBuddyContentMessageToAll = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_sendBuddyContentMessageToAll_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendBuddyContentMessageToAll failed: unknown result';
};
BuddyManagementServiceClient.prototype.sendBuddyContentMessageToAllAsync = function(requestId, msg, content, callback) {
  this.send_sendBuddyContentMessageToAllAsync(requestId, msg, content, callback); 
  if (!callback) {
    return this.recv_sendBuddyContentMessageToAllAsync();
  }
};

BuddyManagementServiceClient.prototype.send_sendBuddyContentMessageToAllAsync = function(requestId, msg, content, callback) {
  this.output.writeMessageBegin('sendBuddyContentMessageToAllAsync', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    msg: msg,
    content: content
  };
  var args = new BuddyManagementService_sendBuddyContentMessageToAllAsync_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendBuddyContentMessageToAllAsync();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_sendBuddyContentMessageToAllAsync = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_sendBuddyContentMessageToAllAsync_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendBuddyContentMessageToAllAsync failed: unknown result';
};
BuddyManagementServiceClient.prototype.sendBuddyContentMessageToMids = function(requestId, msg, content, mids, callback) {
  this.send_sendBuddyContentMessageToMids(requestId, msg, content, mids, callback); 
  if (!callback) {
    return this.recv_sendBuddyContentMessageToMids();
  }
};

BuddyManagementServiceClient.prototype.send_sendBuddyContentMessageToMids = function(requestId, msg, content, mids, callback) {
  this.output.writeMessageBegin('sendBuddyContentMessageToMids', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    msg: msg,
    content: content,
    mids: mids
  };
  var args = new BuddyManagementService_sendBuddyContentMessageToMids_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendBuddyContentMessageToMids();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_sendBuddyContentMessageToMids = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_sendBuddyContentMessageToMids_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendBuddyContentMessageToMids failed: unknown result';
};
BuddyManagementServiceClient.prototype.sendBuddyContentMessageToMidsAsync = function(requestId, msg, content, mids, callback) {
  this.send_sendBuddyContentMessageToMidsAsync(requestId, msg, content, mids, callback); 
  if (!callback) {
    return this.recv_sendBuddyContentMessageToMidsAsync();
  }
};

BuddyManagementServiceClient.prototype.send_sendBuddyContentMessageToMidsAsync = function(requestId, msg, content, mids, callback) {
  this.output.writeMessageBegin('sendBuddyContentMessageToMidsAsync', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    msg: msg,
    content: content,
    mids: mids
  };
  var args = new BuddyManagementService_sendBuddyContentMessageToMidsAsync_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendBuddyContentMessageToMidsAsync();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_sendBuddyContentMessageToMidsAsync = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_sendBuddyContentMessageToMidsAsync_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendBuddyContentMessageToMidsAsync failed: unknown result';
};
BuddyManagementServiceClient.prototype.sendBuddyMessageToAll = function(requestId, msg, callback) {
  this.send_sendBuddyMessageToAll(requestId, msg, callback); 
  if (!callback) {
    return this.recv_sendBuddyMessageToAll();
  }
};

BuddyManagementServiceClient.prototype.send_sendBuddyMessageToAll = function(requestId, msg, callback) {
  this.output.writeMessageBegin('sendBuddyMessageToAll', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    msg: msg
  };
  var args = new BuddyManagementService_sendBuddyMessageToAll_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendBuddyMessageToAll();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_sendBuddyMessageToAll = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_sendBuddyMessageToAll_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendBuddyMessageToAll failed: unknown result';
};
BuddyManagementServiceClient.prototype.sendBuddyMessageToAllAsync = function(requestId, msg, callback) {
  this.send_sendBuddyMessageToAllAsync(requestId, msg, callback); 
  if (!callback) {
    return this.recv_sendBuddyMessageToAllAsync();
  }
};

BuddyManagementServiceClient.prototype.send_sendBuddyMessageToAllAsync = function(requestId, msg, callback) {
  this.output.writeMessageBegin('sendBuddyMessageToAllAsync', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    msg: msg
  };
  var args = new BuddyManagementService_sendBuddyMessageToAllAsync_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendBuddyMessageToAllAsync();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_sendBuddyMessageToAllAsync = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_sendBuddyMessageToAllAsync_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendBuddyMessageToAllAsync failed: unknown result';
};
BuddyManagementServiceClient.prototype.sendBuddyMessageToMids = function(requestId, msg, mids, callback) {
  this.send_sendBuddyMessageToMids(requestId, msg, mids, callback); 
  if (!callback) {
    return this.recv_sendBuddyMessageToMids();
  }
};

BuddyManagementServiceClient.prototype.send_sendBuddyMessageToMids = function(requestId, msg, mids, callback) {
  this.output.writeMessageBegin('sendBuddyMessageToMids', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    msg: msg,
    mids: mids
  };
  var args = new BuddyManagementService_sendBuddyMessageToMids_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendBuddyMessageToMids();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_sendBuddyMessageToMids = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_sendBuddyMessageToMids_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendBuddyMessageToMids failed: unknown result';
};
BuddyManagementServiceClient.prototype.sendBuddyMessageToMidsAsync = function(requestId, msg, mids, callback) {
  this.send_sendBuddyMessageToMidsAsync(requestId, msg, mids, callback); 
  if (!callback) {
    return this.recv_sendBuddyMessageToMidsAsync();
  }
};

BuddyManagementServiceClient.prototype.send_sendBuddyMessageToMidsAsync = function(requestId, msg, mids, callback) {
  this.output.writeMessageBegin('sendBuddyMessageToMidsAsync', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    msg: msg,
    mids: mids
  };
  var args = new BuddyManagementService_sendBuddyMessageToMidsAsync_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendBuddyMessageToMidsAsync();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_sendBuddyMessageToMidsAsync = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_sendBuddyMessageToMidsAsync_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendBuddyMessageToMidsAsync failed: unknown result';
};
BuddyManagementServiceClient.prototype.sendIndividualEventToAllAsync = function(requestId, buddyMid, notificationStatus, callback) {
  this.send_sendIndividualEventToAllAsync(requestId, buddyMid, notificationStatus, callback); 
  if (!callback) {
  this.recv_sendIndividualEventToAllAsync();
  }
};

BuddyManagementServiceClient.prototype.send_sendIndividualEventToAllAsync = function(requestId, buddyMid, notificationStatus, callback) {
  this.output.writeMessageBegin('sendIndividualEventToAllAsync', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    buddyMid: buddyMid,
    notificationStatus: notificationStatus
  };
  var args = new BuddyManagementService_sendIndividualEventToAllAsync_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendIndividualEventToAllAsync();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_sendIndividualEventToAllAsync = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_sendIndividualEventToAllAsync_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BuddyManagementServiceClient.prototype.setBuddyOnAir = function(requestId, onAir, callback) {
  this.send_setBuddyOnAir(requestId, onAir, callback); 
  if (!callback) {
    return this.recv_setBuddyOnAir();
  }
};

BuddyManagementServiceClient.prototype.send_setBuddyOnAir = function(requestId, onAir, callback) {
  this.output.writeMessageBegin('setBuddyOnAir', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    onAir: onAir
  };
  var args = new BuddyManagementService_setBuddyOnAir_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_setBuddyOnAir();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_setBuddyOnAir = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_setBuddyOnAir_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'setBuddyOnAir failed: unknown result';
};
BuddyManagementServiceClient.prototype.setBuddyOnAirAsync = function(requestId, onAir, callback) {
  this.send_setBuddyOnAirAsync(requestId, onAir, callback); 
  if (!callback) {
    return this.recv_setBuddyOnAirAsync();
  }
};

BuddyManagementServiceClient.prototype.send_setBuddyOnAirAsync = function(requestId, onAir, callback) {
  this.output.writeMessageBegin('setBuddyOnAirAsync', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    onAir: onAir
  };
  var args = new BuddyManagementService_setBuddyOnAirAsync_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_setBuddyOnAirAsync();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_setBuddyOnAirAsync = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_setBuddyOnAirAsync_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'setBuddyOnAirAsync failed: unknown result';
};
BuddyManagementServiceClient.prototype.storeMessage = function(requestId, messageRequest, callback) {
  this.send_storeMessage(requestId, messageRequest, callback); 
  if (!callback) {
    return this.recv_storeMessage();
  }
};

BuddyManagementServiceClient.prototype.send_storeMessage = function(requestId, messageRequest, callback) {
  this.output.writeMessageBegin('storeMessage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    messageRequest: messageRequest
  };
  var args = new BuddyManagementService_storeMessage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_storeMessage();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_storeMessage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_storeMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'storeMessage failed: unknown result';
};
BuddyManagementServiceClient.prototype.unblockBuddyMember = function(requestId, mid, callback) {
  this.send_unblockBuddyMember(requestId, mid, callback); 
  if (!callback) {
  this.recv_unblockBuddyMember();
  }
};

BuddyManagementServiceClient.prototype.send_unblockBuddyMember = function(requestId, mid, callback) {
  this.output.writeMessageBegin('unblockBuddyMember', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    mid: mid
  };
  var args = new BuddyManagementService_unblockBuddyMember_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_unblockBuddyMember();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_unblockBuddyMember = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_unblockBuddyMember_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BuddyManagementServiceClient.prototype.unregisterBuddy = function(requestId, callback) {
  this.send_unregisterBuddy(requestId, callback); 
  if (!callback) {
  this.recv_unregisterBuddy();
  }
};

BuddyManagementServiceClient.prototype.send_unregisterBuddy = function(requestId, callback) {
  this.output.writeMessageBegin('unregisterBuddy', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId
  };
  var args = new BuddyManagementService_unregisterBuddy_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_unregisterBuddy();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_unregisterBuddy = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_unregisterBuddy_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BuddyManagementServiceClient.prototype.unregisterBuddyAdmin = function(requestId, callback) {
  this.send_unregisterBuddyAdmin(requestId, callback); 
  if (!callback) {
  this.recv_unregisterBuddyAdmin();
  }
};

BuddyManagementServiceClient.prototype.send_unregisterBuddyAdmin = function(requestId, callback) {
  this.output.writeMessageBegin('unregisterBuddyAdmin', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId
  };
  var args = new BuddyManagementService_unregisterBuddyAdmin_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_unregisterBuddyAdmin();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_unregisterBuddyAdmin = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_unregisterBuddyAdmin_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BuddyManagementServiceClient.prototype.updateBuddyAdminProfileAttribute = function(requestId, attributes, callback) {
  this.send_updateBuddyAdminProfileAttribute(requestId, attributes, callback); 
  if (!callback) {
  this.recv_updateBuddyAdminProfileAttribute();
  }
};

BuddyManagementServiceClient.prototype.send_updateBuddyAdminProfileAttribute = function(requestId, attributes, callback) {
  this.output.writeMessageBegin('updateBuddyAdminProfileAttribute', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    attributes: attributes
  };
  var args = new BuddyManagementService_updateBuddyAdminProfileAttribute_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateBuddyAdminProfileAttribute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_updateBuddyAdminProfileAttribute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_updateBuddyAdminProfileAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BuddyManagementServiceClient.prototype.updateBuddyAdminProfileImage = function(requestId, picture, callback) {
  this.send_updateBuddyAdminProfileImage(requestId, picture, callback); 
  if (!callback) {
  this.recv_updateBuddyAdminProfileImage();
  }
};

BuddyManagementServiceClient.prototype.send_updateBuddyAdminProfileImage = function(requestId, picture, callback) {
  this.output.writeMessageBegin('updateBuddyAdminProfileImage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    picture: picture
  };
  var args = new BuddyManagementService_updateBuddyAdminProfileImage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateBuddyAdminProfileImage();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_updateBuddyAdminProfileImage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_updateBuddyAdminProfileImage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BuddyManagementServiceClient.prototype.updateBuddyProfileAttributes = function(requestId, attributes, callback) {
  this.send_updateBuddyProfileAttributes(requestId, attributes, callback); 
  if (!callback) {
    return this.recv_updateBuddyProfileAttributes();
  }
};

BuddyManagementServiceClient.prototype.send_updateBuddyProfileAttributes = function(requestId, attributes, callback) {
  this.output.writeMessageBegin('updateBuddyProfileAttributes', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    attributes: attributes
  };
  var args = new BuddyManagementService_updateBuddyProfileAttributes_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateBuddyProfileAttributes();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_updateBuddyProfileAttributes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_updateBuddyProfileAttributes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateBuddyProfileAttributes failed: unknown result';
};
BuddyManagementServiceClient.prototype.updateBuddyProfileAttributesAsync = function(requestId, attributes, callback) {
  this.send_updateBuddyProfileAttributesAsync(requestId, attributes, callback); 
  if (!callback) {
    return this.recv_updateBuddyProfileAttributesAsync();
  }
};

BuddyManagementServiceClient.prototype.send_updateBuddyProfileAttributesAsync = function(requestId, attributes, callback) {
  this.output.writeMessageBegin('updateBuddyProfileAttributesAsync', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    attributes: attributes
  };
  var args = new BuddyManagementService_updateBuddyProfileAttributesAsync_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateBuddyProfileAttributesAsync();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_updateBuddyProfileAttributesAsync = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_updateBuddyProfileAttributesAsync_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateBuddyProfileAttributesAsync failed: unknown result';
};
BuddyManagementServiceClient.prototype.updateBuddyProfileImage = function(requestId, image, callback) {
  this.send_updateBuddyProfileImage(requestId, image, callback); 
  if (!callback) {
    return this.recv_updateBuddyProfileImage();
  }
};

BuddyManagementServiceClient.prototype.send_updateBuddyProfileImage = function(requestId, image, callback) {
  this.output.writeMessageBegin('updateBuddyProfileImage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    image: image
  };
  var args = new BuddyManagementService_updateBuddyProfileImage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateBuddyProfileImage();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_updateBuddyProfileImage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_updateBuddyProfileImage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateBuddyProfileImage failed: unknown result';
};
BuddyManagementServiceClient.prototype.updateBuddyProfileImageAsync = function(requestId, image, callback) {
  this.send_updateBuddyProfileImageAsync(requestId, image, callback); 
  if (!callback) {
    return this.recv_updateBuddyProfileImageAsync();
  }
};

BuddyManagementServiceClient.prototype.send_updateBuddyProfileImageAsync = function(requestId, image, callback) {
  this.output.writeMessageBegin('updateBuddyProfileImageAsync', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    image: image
  };
  var args = new BuddyManagementService_updateBuddyProfileImageAsync_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateBuddyProfileImageAsync();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_updateBuddyProfileImageAsync = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_updateBuddyProfileImageAsync_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateBuddyProfileImageAsync failed: unknown result';
};
BuddyManagementServiceClient.prototype.updateBuddySearchId = function(requestId, searchId, callback) {
  this.send_updateBuddySearchId(requestId, searchId, callback); 
  if (!callback) {
  this.recv_updateBuddySearchId();
  }
};

BuddyManagementServiceClient.prototype.send_updateBuddySearchId = function(requestId, searchId, callback) {
  this.output.writeMessageBegin('updateBuddySearchId', Thrift.MessageType.CALL, this.seqid);
  var params = {
    requestId: requestId,
    searchId: searchId
  };
  var args = new BuddyManagementService_updateBuddySearchId_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateBuddySearchId();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_updateBuddySearchId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_updateBuddySearchId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BuddyManagementServiceClient.prototype.updateBuddySettings = function(settings, callback) {
  this.send_updateBuddySettings(settings, callback); 
  if (!callback) {
  this.recv_updateBuddySettings();
  }
};

BuddyManagementServiceClient.prototype.send_updateBuddySettings = function(settings, callback) {
  this.output.writeMessageBegin('updateBuddySettings', Thrift.MessageType.CALL, this.seqid);
  var params = {
    settings: settings
  };
  var args = new BuddyManagementService_updateBuddySettings_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateBuddySettings();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_updateBuddySettings = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_updateBuddySettings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BuddyManagementServiceClient.prototype.uploadBuddyContent = function(contentType, content, callback) {
  this.send_uploadBuddyContent(contentType, content, callback); 
  if (!callback) {
    return this.recv_uploadBuddyContent();
  }
};

BuddyManagementServiceClient.prototype.send_uploadBuddyContent = function(contentType, content, callback) {
  this.output.writeMessageBegin('uploadBuddyContent', Thrift.MessageType.CALL, this.seqid);
  var params = {
    contentType: contentType,
    content: content
  };
  var args = new BuddyManagementService_uploadBuddyContent_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_uploadBuddyContent();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

BuddyManagementServiceClient.prototype.recv_uploadBuddyContent = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyManagementService_uploadBuddyContent_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'uploadBuddyContent failed: unknown result';
};
