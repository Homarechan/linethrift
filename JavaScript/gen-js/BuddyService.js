//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

BuddyService_findBuddyContactsByQuery_args = function(args) {
  this.language = null;
  this.country = null;
  this.query = null;
  this.fromIndex = null;
  this.count = null;
  this.requestSource = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.fromIndex !== undefined && args.fromIndex !== null) {
      this.fromIndex = args.fromIndex;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.requestSource !== undefined && args.requestSource !== null) {
      this.requestSource = args.requestSource;
    }
  }
};
BuddyService_findBuddyContactsByQuery_args.prototype = {};
BuddyService_findBuddyContactsByQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.fromIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.requestSource = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_findBuddyContactsByQuery_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_findBuddyContactsByQuery_args');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 4);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.fromIndex !== null && this.fromIndex !== undefined) {
    output.writeFieldBegin('fromIndex', Thrift.Type.I32, 5);
    output.writeI32(this.fromIndex);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 6);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.requestSource !== null && this.requestSource !== undefined) {
    output.writeFieldBegin('requestSource', Thrift.Type.I32, 7);
    output.writeI32(this.requestSource);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyService_findBuddyContactsByQuery_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [BuddySearchResult]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyService_findBuddyContactsByQuery_result.prototype = {};
BuddyService_findBuddyContactsByQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3821 = input.readListBegin();
        var _size820 = _rtmp3821.size || 0;
        for (var _i822 = 0; _i822 < _size820; ++_i822) {
          var elem823 = null;
          elem823 = new BuddySearchResult();
          elem823.read(input);
          this.success.push(elem823);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_findBuddyContactsByQuery_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_findBuddyContactsByQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter824 in this.success) {
      if (this.success.hasOwnProperty(iter824)) {
        iter824 = this.success[iter824];
        iter824.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyService_getBuddyContacts_args = function(args) {
  this.language = null;
  this.country = null;
  this.classification = null;
  this.fromIndex = null;
  this.count = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.classification !== undefined && args.classification !== null) {
      this.classification = args.classification;
    }
    if (args.fromIndex !== undefined && args.fromIndex !== null) {
      this.fromIndex = args.fromIndex;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
BuddyService_getBuddyContacts_args.prototype = {};
BuddyService_getBuddyContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.classification = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.fromIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_getBuddyContacts_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_getBuddyContacts_args');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.classification !== null && this.classification !== undefined) {
    output.writeFieldBegin('classification', Thrift.Type.STRING, 4);
    output.writeString(this.classification);
    output.writeFieldEnd();
  }
  if (this.fromIndex !== null && this.fromIndex !== undefined) {
    output.writeFieldBegin('fromIndex', Thrift.Type.I32, 5);
    output.writeI32(this.fromIndex);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 6);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyService_getBuddyContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyService_getBuddyContacts_result.prototype = {};
BuddyService_getBuddyContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3826 = input.readListBegin();
        var _size825 = _rtmp3826.size || 0;
        for (var _i827 = 0; _i827 < _size825; ++_i827) {
          var elem828 = null;
          elem828 = new Contact();
          elem828.read(input);
          this.success.push(elem828);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_getBuddyContacts_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_getBuddyContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter829 in this.success) {
      if (this.success.hasOwnProperty(iter829)) {
        iter829 = this.success[iter829];
        iter829.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyService_getBuddyDetail_args = function(args) {
  this.buddyMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
  }
};
BuddyService_getBuddyDetail_args.prototype = {};
BuddyService_getBuddyDetail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_getBuddyDetail_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_getBuddyDetail_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 4);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyService_getBuddyDetail_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new BuddyDetail(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyService_getBuddyDetail_result.prototype = {};
BuddyService_getBuddyDetail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BuddyDetail();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_getBuddyDetail_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_getBuddyDetail_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyService_getBuddyOnAir_args = function(args) {
  this.buddyMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
  }
};
BuddyService_getBuddyOnAir_args.prototype = {};
BuddyService_getBuddyOnAir_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_getBuddyOnAir_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_getBuddyOnAir_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 4);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyService_getBuddyOnAir_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new BuddyOnAir(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyService_getBuddyOnAir_result.prototype = {};
BuddyService_getBuddyOnAir_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BuddyOnAir();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_getBuddyOnAir_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_getBuddyOnAir_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyService_getCountriesHavingBuddy_args = function(args) {
};
BuddyService_getCountriesHavingBuddy_args.prototype = {};
BuddyService_getCountriesHavingBuddy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_getCountriesHavingBuddy_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_getCountriesHavingBuddy_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyService_getCountriesHavingBuddy_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyService_getCountriesHavingBuddy_result.prototype = {};
BuddyService_getCountriesHavingBuddy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3831 = input.readListBegin();
        var _size830 = _rtmp3831.size || 0;
        for (var _i832 = 0; _i832 < _size830; ++_i832) {
          var elem833 = null;
          elem833 = input.readString().value;
          this.success.push(elem833);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_getCountriesHavingBuddy_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_getCountriesHavingBuddy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter834 in this.success) {
      if (this.success.hasOwnProperty(iter834)) {
        iter834 = this.success[iter834];
        output.writeString(iter834);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyService_getNewlyReleasedBuddyIds_args = function(args) {
  this.country = null;
  if (args) {
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
BuddyService_getNewlyReleasedBuddyIds_args.prototype = {};
BuddyService_getNewlyReleasedBuddyIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_getNewlyReleasedBuddyIds_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_getNewlyReleasedBuddyIds_args');
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyService_getNewlyReleasedBuddyIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyService_getNewlyReleasedBuddyIds_result.prototype = {};
BuddyService_getNewlyReleasedBuddyIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp3836 = input.readMapBegin();
        var _size835 = _rtmp3836.size || 0;
        for (var _i837 = 0; _i837 < _size835; ++_i837) {
          if (_i837 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key838 = null;
          var val839 = null;
          key838 = input.readString().value;
          val839 = input.readI64().value;
          this.success[key838] = val839;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_getNewlyReleasedBuddyIds_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_getNewlyReleasedBuddyIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter840 in this.success) {
      if (this.success.hasOwnProperty(kiter840)) {
        var viter841 = this.success[kiter840];
        output.writeString(kiter840);
        output.writeI64(viter841);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyService_getPopularBuddyBanner_args = function(args) {
  this.language = null;
  this.country = null;
  this.applicationType = null;
  this.resourceSpecification = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.applicationType !== undefined && args.applicationType !== null) {
      this.applicationType = args.applicationType;
    }
    if (args.resourceSpecification !== undefined && args.resourceSpecification !== null) {
      this.resourceSpecification = args.resourceSpecification;
    }
  }
};
BuddyService_getPopularBuddyBanner_args.prototype = {};
BuddyService_getPopularBuddyBanner_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.applicationType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.resourceSpecification = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_getPopularBuddyBanner_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_getPopularBuddyBanner_args');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.applicationType !== null && this.applicationType !== undefined) {
    output.writeFieldBegin('applicationType', Thrift.Type.I32, 4);
    output.writeI32(this.applicationType);
    output.writeFieldEnd();
  }
  if (this.resourceSpecification !== null && this.resourceSpecification !== undefined) {
    output.writeFieldBegin('resourceSpecification', Thrift.Type.STRING, 5);
    output.writeString(this.resourceSpecification);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyService_getPopularBuddyBanner_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new BuddyBanner(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyService_getPopularBuddyBanner_result.prototype = {};
BuddyService_getPopularBuddyBanner_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BuddyBanner();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_getPopularBuddyBanner_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_getPopularBuddyBanner_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyService_getPopularBuddyLists_args = function(args) {
  this.language = null;
  this.country = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
BuddyService_getPopularBuddyLists_args.prototype = {};
BuddyService_getPopularBuddyLists_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_getPopularBuddyLists_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_getPopularBuddyLists_args');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyService_getPopularBuddyLists_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [BuddyList]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyService_getPopularBuddyLists_result.prototype = {};
BuddyService_getPopularBuddyLists_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3843 = input.readListBegin();
        var _size842 = _rtmp3843.size || 0;
        for (var _i844 = 0; _i844 < _size842; ++_i844) {
          var elem845 = null;
          elem845 = new BuddyList();
          elem845.read(input);
          this.success.push(elem845);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_getPopularBuddyLists_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_getPopularBuddyLists_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter846 in this.success) {
      if (this.success.hasOwnProperty(iter846)) {
        iter846 = this.success[iter846];
        iter846.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyService_getPromotedBuddyContacts_args = function(args) {
  this.language = null;
  this.country = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
BuddyService_getPromotedBuddyContacts_args.prototype = {};
BuddyService_getPromotedBuddyContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_getPromotedBuddyContacts_args.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_getPromotedBuddyContacts_args');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyService_getPromotedBuddyContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BuddyService_getPromotedBuddyContacts_result.prototype = {};
BuddyService_getPromotedBuddyContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3848 = input.readListBegin();
        var _size847 = _rtmp3848.size || 0;
        for (var _i849 = 0; _i849 < _size847; ++_i849) {
          var elem850 = null;
          elem850 = new Contact();
          elem850.read(input);
          this.success.push(elem850);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyService_getPromotedBuddyContacts_result.prototype.write = function(output) {
  output.writeStructBegin('BuddyService_getPromotedBuddyContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter851 in this.success) {
      if (this.success.hasOwnProperty(iter851)) {
        iter851 = this.success[iter851];
        iter851.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyServiceClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
BuddyServiceClient.prototype = {};

BuddyServiceClient.prototype.findBuddyContactsByQuery = function(language, country, query, fromIndex, count, requestSource, callback) {
  this.send_findBuddyContactsByQuery(language, country, query, fromIndex, count, requestSource, callback); 
  if (!callback) {
    return this.recv_findBuddyContactsByQuery();
  }
};

BuddyServiceClient.prototype.send_findBuddyContactsByQuery = function(language, country, query, fromIndex, count, requestSource, callback) {
  var params = {
    language: language,
    country: country,
    query: query,
    fromIndex: fromIndex,
    count: count,
    requestSource: requestSource
  };
  var args = new BuddyService_findBuddyContactsByQuery_args(params);
  try {
    this.output.writeMessageBegin('findBuddyContactsByQuery', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_findBuddyContactsByQuery();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

BuddyServiceClient.prototype.recv_findBuddyContactsByQuery = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyService_findBuddyContactsByQuery_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findBuddyContactsByQuery failed: unknown result';
};

BuddyServiceClient.prototype.getBuddyContacts = function(language, country, classification, fromIndex, count, callback) {
  this.send_getBuddyContacts(language, country, classification, fromIndex, count, callback); 
  if (!callback) {
    return this.recv_getBuddyContacts();
  }
};

BuddyServiceClient.prototype.send_getBuddyContacts = function(language, country, classification, fromIndex, count, callback) {
  var params = {
    language: language,
    country: country,
    classification: classification,
    fromIndex: fromIndex,
    count: count
  };
  var args = new BuddyService_getBuddyContacts_args(params);
  try {
    this.output.writeMessageBegin('getBuddyContacts', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getBuddyContacts();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

BuddyServiceClient.prototype.recv_getBuddyContacts = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyService_getBuddyContacts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getBuddyContacts failed: unknown result';
};

BuddyServiceClient.prototype.getBuddyDetail = function(buddyMid, callback) {
  this.send_getBuddyDetail(buddyMid, callback); 
  if (!callback) {
    return this.recv_getBuddyDetail();
  }
};

BuddyServiceClient.prototype.send_getBuddyDetail = function(buddyMid, callback) {
  var params = {
    buddyMid: buddyMid
  };
  var args = new BuddyService_getBuddyDetail_args(params);
  try {
    this.output.writeMessageBegin('getBuddyDetail', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getBuddyDetail();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

BuddyServiceClient.prototype.recv_getBuddyDetail = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyService_getBuddyDetail_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getBuddyDetail failed: unknown result';
};

BuddyServiceClient.prototype.getBuddyOnAir = function(buddyMid, callback) {
  this.send_getBuddyOnAir(buddyMid, callback); 
  if (!callback) {
    return this.recv_getBuddyOnAir();
  }
};

BuddyServiceClient.prototype.send_getBuddyOnAir = function(buddyMid, callback) {
  var params = {
    buddyMid: buddyMid
  };
  var args = new BuddyService_getBuddyOnAir_args(params);
  try {
    this.output.writeMessageBegin('getBuddyOnAir', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getBuddyOnAir();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

BuddyServiceClient.prototype.recv_getBuddyOnAir = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyService_getBuddyOnAir_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getBuddyOnAir failed: unknown result';
};

BuddyServiceClient.prototype.getCountriesHavingBuddy = function(callback) {
  this.send_getCountriesHavingBuddy(callback); 
  if (!callback) {
    return this.recv_getCountriesHavingBuddy();
  }
};

BuddyServiceClient.prototype.send_getCountriesHavingBuddy = function(callback) {
  var args = new BuddyService_getCountriesHavingBuddy_args();
  try {
    this.output.writeMessageBegin('getCountriesHavingBuddy', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getCountriesHavingBuddy();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

BuddyServiceClient.prototype.recv_getCountriesHavingBuddy = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyService_getCountriesHavingBuddy_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountriesHavingBuddy failed: unknown result';
};

BuddyServiceClient.prototype.getNewlyReleasedBuddyIds = function(country, callback) {
  this.send_getNewlyReleasedBuddyIds(country, callback); 
  if (!callback) {
    return this.recv_getNewlyReleasedBuddyIds();
  }
};

BuddyServiceClient.prototype.send_getNewlyReleasedBuddyIds = function(country, callback) {
  var params = {
    country: country
  };
  var args = new BuddyService_getNewlyReleasedBuddyIds_args(params);
  try {
    this.output.writeMessageBegin('getNewlyReleasedBuddyIds', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getNewlyReleasedBuddyIds();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

BuddyServiceClient.prototype.recv_getNewlyReleasedBuddyIds = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyService_getNewlyReleasedBuddyIds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNewlyReleasedBuddyIds failed: unknown result';
};

BuddyServiceClient.prototype.getPopularBuddyBanner = function(language, country, applicationType, resourceSpecification, callback) {
  this.send_getPopularBuddyBanner(language, country, applicationType, resourceSpecification, callback); 
  if (!callback) {
    return this.recv_getPopularBuddyBanner();
  }
};

BuddyServiceClient.prototype.send_getPopularBuddyBanner = function(language, country, applicationType, resourceSpecification, callback) {
  var params = {
    language: language,
    country: country,
    applicationType: applicationType,
    resourceSpecification: resourceSpecification
  };
  var args = new BuddyService_getPopularBuddyBanner_args(params);
  try {
    this.output.writeMessageBegin('getPopularBuddyBanner', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPopularBuddyBanner();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

BuddyServiceClient.prototype.recv_getPopularBuddyBanner = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyService_getPopularBuddyBanner_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPopularBuddyBanner failed: unknown result';
};

BuddyServiceClient.prototype.getPopularBuddyLists = function(language, country, callback) {
  this.send_getPopularBuddyLists(language, country, callback); 
  if (!callback) {
    return this.recv_getPopularBuddyLists();
  }
};

BuddyServiceClient.prototype.send_getPopularBuddyLists = function(language, country, callback) {
  var params = {
    language: language,
    country: country
  };
  var args = new BuddyService_getPopularBuddyLists_args(params);
  try {
    this.output.writeMessageBegin('getPopularBuddyLists', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPopularBuddyLists();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

BuddyServiceClient.prototype.recv_getPopularBuddyLists = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyService_getPopularBuddyLists_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPopularBuddyLists failed: unknown result';
};

BuddyServiceClient.prototype.getPromotedBuddyContacts = function(language, country, callback) {
  this.send_getPromotedBuddyContacts(language, country, callback); 
  if (!callback) {
    return this.recv_getPromotedBuddyContacts();
  }
};

BuddyServiceClient.prototype.send_getPromotedBuddyContacts = function(language, country, callback) {
  var params = {
    language: language,
    country: country
  };
  var args = new BuddyService_getPromotedBuddyContacts_args(params);
  try {
    this.output.writeMessageBegin('getPromotedBuddyContacts', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPromotedBuddyContacts();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

BuddyServiceClient.prototype.recv_getPromotedBuddyContacts = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BuddyService_getPromotedBuddyContacts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPromotedBuddyContacts failed: unknown result';
};
