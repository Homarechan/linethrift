//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

ChannelService_issueOTP_args = function(args) {
  this.channelId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
  }
};
ChannelService_issueOTP_args.prototype = {};
ChannelService_issueOTP_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_issueOTP_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_issueOTP_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_issueOTP_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new OTPResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_issueOTP_result.prototype = {};
ChannelService_issueOTP_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OTPResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_issueOTP_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_issueOTP_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_approveChannelAndIssueChannelToken_args = function(args) {
  this.channelId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
  }
};
ChannelService_approveChannelAndIssueChannelToken_args.prototype = {};
ChannelService_approveChannelAndIssueChannelToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_approveChannelAndIssueChannelToken_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_approveChannelAndIssueChannelToken_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_approveChannelAndIssueChannelToken_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ChannelToken(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_approveChannelAndIssueChannelToken_result.prototype = {};
ChannelService_approveChannelAndIssueChannelToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChannelToken();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_approveChannelAndIssueChannelToken_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_approveChannelAndIssueChannelToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_approveChannelAndIssueRequestToken_args = function(args) {
  this.channelId = null;
  this.otpId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.otpId !== undefined && args.otpId !== null) {
      this.otpId = args.otpId;
    }
  }
};
ChannelService_approveChannelAndIssueRequestToken_args.prototype = {};
ChannelService_approveChannelAndIssueRequestToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.otpId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_approveChannelAndIssueRequestToken_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_approveChannelAndIssueRequestToken_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.otpId !== null && this.otpId !== undefined) {
    output.writeFieldBegin('otpId', Thrift.Type.STRING, 2);
    output.writeString(this.otpId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_approveChannelAndIssueRequestToken_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_approveChannelAndIssueRequestToken_result.prototype = {};
ChannelService_approveChannelAndIssueRequestToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_approveChannelAndIssueRequestToken_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_approveChannelAndIssueRequestToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_fetchNotificationItems_args = function(args) {
  this.localRev = null;
  if (args) {
    if (args.localRev !== undefined && args.localRev !== null) {
      this.localRev = args.localRev;
    }
  }
};
ChannelService_fetchNotificationItems_args.prototype = {};
ChannelService_fetchNotificationItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localRev = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_fetchNotificationItems_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_fetchNotificationItems_args');
  if (this.localRev !== null && this.localRev !== undefined) {
    output.writeFieldBegin('localRev', Thrift.Type.I64, 2);
    output.writeI64(this.localRev);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_fetchNotificationItems_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new NotificationFetchResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_fetchNotificationItems_result.prototype = {};
ChannelService_fetchNotificationItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new NotificationFetchResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_fetchNotificationItems_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_fetchNotificationItems_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getApprovedChannels_args = function(args) {
  this.lastSynced = null;
  this.locale = null;
  if (args) {
    if (args.lastSynced !== undefined && args.lastSynced !== null) {
      this.lastSynced = args.lastSynced;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
ChannelService_getApprovedChannels_args.prototype = {};
ChannelService_getApprovedChannels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastSynced = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getApprovedChannels_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getApprovedChannels_args');
  if (this.lastSynced !== null && this.lastSynced !== undefined) {
    output.writeFieldBegin('lastSynced', Thrift.Type.I64, 2);
    output.writeI64(this.lastSynced);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getApprovedChannels_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ApprovedChannelInfos(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getApprovedChannels_result.prototype = {};
ChannelService_getApprovedChannels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ApprovedChannelInfos();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getApprovedChannels_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getApprovedChannels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getChannelInfo_args = function(args) {
  this.channelId = null;
  this.locale = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
ChannelService_getChannelInfo_args.prototype = {};
ChannelService_getChannelInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getChannelInfo_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getChannelInfo_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getChannelInfo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ChannelInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getChannelInfo_result.prototype = {};
ChannelService_getChannelInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChannelInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getChannelInfo_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getChannelInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getChannelNotificationSetting_args = function(args) {
  this.channelId = null;
  this.locale = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
ChannelService_getChannelNotificationSetting_args.prototype = {};
ChannelService_getChannelNotificationSetting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getChannelNotificationSetting_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getChannelNotificationSetting_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 2);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getChannelNotificationSetting_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ChannelNotificationSetting(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getChannelNotificationSetting_result.prototype = {};
ChannelService_getChannelNotificationSetting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChannelNotificationSetting();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getChannelNotificationSetting_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getChannelNotificationSetting_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getChannelNotificationSettings_args = function(args) {
  this.locale = null;
  if (args) {
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
ChannelService_getChannelNotificationSettings_args.prototype = {};
ChannelService_getChannelNotificationSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getChannelNotificationSettings_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getChannelNotificationSettings_args');
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 1);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getChannelNotificationSettings_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ChannelNotificationSetting]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getChannelNotificationSettings_result.prototype = {};
ChannelService_getChannelNotificationSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3925 = input.readListBegin();
        var _size924 = _rtmp3925.size || 0;
        for (var _i926 = 0; _i926 < _size924; ++_i926) {
          var elem927 = null;
          elem927 = new ChannelNotificationSetting();
          elem927.read(input);
          this.success.push(elem927);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getChannelNotificationSettings_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getChannelNotificationSettings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter928 in this.success) {
      if (this.success.hasOwnProperty(iter928)) {
        iter928 = this.success[iter928];
        iter928.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getChannels_args = function(args) {
  this.lastSynced = null;
  this.locale = null;
  if (args) {
    if (args.lastSynced !== undefined && args.lastSynced !== null) {
      this.lastSynced = args.lastSynced;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
ChannelService_getChannels_args.prototype = {};
ChannelService_getChannels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastSynced = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getChannels_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getChannels_args');
  if (this.lastSynced !== null && this.lastSynced !== undefined) {
    output.writeFieldBegin('lastSynced', Thrift.Type.I64, 2);
    output.writeI64(this.lastSynced);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getChannels_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ChannelInfos(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getChannels_result.prototype = {};
ChannelService_getChannels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChannelInfos();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getChannels_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getChannels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getDomains_args = function(args) {
  this.lastSynced = null;
  if (args) {
    if (args.lastSynced !== undefined && args.lastSynced !== null) {
      this.lastSynced = args.lastSynced;
    }
  }
};
ChannelService_getDomains_args.prototype = {};
ChannelService_getDomains_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastSynced = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getDomains_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getDomains_args');
  if (this.lastSynced !== null && this.lastSynced !== undefined) {
    output.writeFieldBegin('lastSynced', Thrift.Type.I64, 2);
    output.writeI64(this.lastSynced);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getDomains_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ChannelDomains(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getDomains_result.prototype = {};
ChannelService_getDomains_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChannelDomains();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getDomains_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getDomains_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getFriendChannelMatrices_args = function(args) {
  this.channelIds = null;
  if (args) {
    if (args.channelIds !== undefined && args.channelIds !== null) {
      this.channelIds = Thrift.copyList(args.channelIds, [null]);
    }
  }
};
ChannelService_getFriendChannelMatrices_args.prototype = {};
ChannelService_getFriendChannelMatrices_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.channelIds = [];
        var _rtmp3930 = input.readListBegin();
        var _size929 = _rtmp3930.size || 0;
        for (var _i931 = 0; _i931 < _size929; ++_i931) {
          var elem932 = null;
          elem932 = input.readString().value;
          this.channelIds.push(elem932);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getFriendChannelMatrices_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getFriendChannelMatrices_args');
  if (this.channelIds !== null && this.channelIds !== undefined) {
    output.writeFieldBegin('channelIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.channelIds.length);
    for (var iter933 in this.channelIds) {
      if (this.channelIds.hasOwnProperty(iter933)) {
        iter933 = this.channelIds[iter933];
        output.writeString(iter933);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getFriendChannelMatrices_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new FriendChannelMatricesResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getFriendChannelMatrices_result.prototype = {};
ChannelService_getFriendChannelMatrices_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new FriendChannelMatricesResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getFriendChannelMatrices_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getFriendChannelMatrices_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_updateChannelSettings_args = function(args) {
  this.channelSettings = null;
  if (args) {
    if (args.channelSettings !== undefined && args.channelSettings !== null) {
      this.channelSettings = new ChannelSettings(args.channelSettings);
    }
  }
};
ChannelService_updateChannelSettings_args.prototype = {};
ChannelService_updateChannelSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.channelSettings = new ChannelSettings();
        this.channelSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_updateChannelSettings_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_updateChannelSettings_args');
  if (this.channelSettings !== null && this.channelSettings !== undefined) {
    output.writeFieldBegin('channelSettings', Thrift.Type.STRUCT, 1);
    this.channelSettings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_updateChannelSettings_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_updateChannelSettings_result.prototype = {};
ChannelService_updateChannelSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_updateChannelSettings_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_updateChannelSettings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getCommonDomains_args = function(args) {
  this.lastSynced = null;
  if (args) {
    if (args.lastSynced !== undefined && args.lastSynced !== null) {
      this.lastSynced = args.lastSynced;
    }
  }
};
ChannelService_getCommonDomains_args.prototype = {};
ChannelService_getCommonDomains_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lastSynced = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getCommonDomains_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getCommonDomains_args');
  if (this.lastSynced !== null && this.lastSynced !== undefined) {
    output.writeFieldBegin('lastSynced', Thrift.Type.I64, 1);
    output.writeI64(this.lastSynced);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getCommonDomains_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ChannelDomains(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getCommonDomains_result.prototype = {};
ChannelService_getCommonDomains_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChannelDomains();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getCommonDomains_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getCommonDomains_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getNotificationBadgeCount_args = function(args) {
  this.localRev = null;
  if (args) {
    if (args.localRev !== undefined && args.localRev !== null) {
      this.localRev = args.localRev;
    }
  }
};
ChannelService_getNotificationBadgeCount_args.prototype = {};
ChannelService_getNotificationBadgeCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localRev = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getNotificationBadgeCount_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getNotificationBadgeCount_args');
  if (this.localRev !== null && this.localRev !== undefined) {
    output.writeFieldBegin('localRev', Thrift.Type.I64, 2);
    output.writeI64(this.localRev);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getNotificationBadgeCount_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getNotificationBadgeCount_result.prototype = {};
ChannelService_getNotificationBadgeCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getNotificationBadgeCount_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getNotificationBadgeCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_issueChannelToken_args = function(args) {
  this.channelId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
  }
};
ChannelService_issueChannelToken_args.prototype = {};
ChannelService_issueChannelToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_issueChannelToken_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_issueChannelToken_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_issueChannelToken_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ChannelToken(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_issueChannelToken_result.prototype = {};
ChannelService_issueChannelToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChannelToken();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_issueChannelToken_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_issueChannelToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_issueRequestToken_args = function(args) {
  this.channelId = null;
  this.otpId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.otpId !== undefined && args.otpId !== null) {
      this.otpId = args.otpId;
    }
  }
};
ChannelService_issueRequestToken_args.prototype = {};
ChannelService_issueRequestToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.otpId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_issueRequestToken_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_issueRequestToken_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.otpId !== null && this.otpId !== undefined) {
    output.writeFieldBegin('otpId', Thrift.Type.STRING, 2);
    output.writeString(this.otpId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_issueRequestToken_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_issueRequestToken_result.prototype = {};
ChannelService_issueRequestToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_issueRequestToken_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_issueRequestToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_issueRequestTokenWithAuthScheme_args = function(args) {
  this.channelId = null;
  this.otpId = null;
  this.authScheme = null;
  this.returnUrl = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.otpId !== undefined && args.otpId !== null) {
      this.otpId = args.otpId;
    }
    if (args.authScheme !== undefined && args.authScheme !== null) {
      this.authScheme = Thrift.copyList(args.authScheme, [null]);
    }
    if (args.returnUrl !== undefined && args.returnUrl !== null) {
      this.returnUrl = args.returnUrl;
    }
  }
};
ChannelService_issueRequestTokenWithAuthScheme_args.prototype = {};
ChannelService_issueRequestTokenWithAuthScheme_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.otpId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.authScheme = [];
        var _rtmp3935 = input.readListBegin();
        var _size934 = _rtmp3935.size || 0;
        for (var _i936 = 0; _i936 < _size934; ++_i936) {
          var elem937 = null;
          elem937 = input.readString().value;
          this.authScheme.push(elem937);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.returnUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_issueRequestTokenWithAuthScheme_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_issueRequestTokenWithAuthScheme_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.otpId !== null && this.otpId !== undefined) {
    output.writeFieldBegin('otpId', Thrift.Type.STRING, 2);
    output.writeString(this.otpId);
    output.writeFieldEnd();
  }
  if (this.authScheme !== null && this.authScheme !== undefined) {
    output.writeFieldBegin('authScheme', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.authScheme.length);
    for (var iter938 in this.authScheme) {
      if (this.authScheme.hasOwnProperty(iter938)) {
        iter938 = this.authScheme[iter938];
        output.writeString(iter938);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.returnUrl !== null && this.returnUrl !== undefined) {
    output.writeFieldBegin('returnUrl', Thrift.Type.STRING, 4);
    output.writeString(this.returnUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_issueRequestTokenWithAuthScheme_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new RequestTokenResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_issueRequestTokenWithAuthScheme_result.prototype = {};
ChannelService_issueRequestTokenWithAuthScheme_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new RequestTokenResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_issueRequestTokenWithAuthScheme_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_issueRequestTokenWithAuthScheme_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_issueRequestTokenForAutoLogin_args = function(args) {
  this.channelId = null;
  this.otpId = null;
  this.redirectUrl = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.otpId !== undefined && args.otpId !== null) {
      this.otpId = args.otpId;
    }
    if (args.redirectUrl !== undefined && args.redirectUrl !== null) {
      this.redirectUrl = args.redirectUrl;
    }
  }
};
ChannelService_issueRequestTokenForAutoLogin_args.prototype = {};
ChannelService_issueRequestTokenForAutoLogin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.otpId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.redirectUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_issueRequestTokenForAutoLogin_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_issueRequestTokenForAutoLogin_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.otpId !== null && this.otpId !== undefined) {
    output.writeFieldBegin('otpId', Thrift.Type.STRING, 3);
    output.writeString(this.otpId);
    output.writeFieldEnd();
  }
  if (this.redirectUrl !== null && this.redirectUrl !== undefined) {
    output.writeFieldBegin('redirectUrl', Thrift.Type.STRING, 4);
    output.writeString(this.redirectUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_issueRequestTokenForAutoLogin_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_issueRequestTokenForAutoLogin_result.prototype = {};
ChannelService_issueRequestTokenForAutoLogin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_issueRequestTokenForAutoLogin_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_issueRequestTokenForAutoLogin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getUpdatedChannelIds_args = function(args) {
  this.channelIds = null;
  if (args) {
    if (args.channelIds !== undefined && args.channelIds !== null) {
      this.channelIds = Thrift.copyList(args.channelIds, [ChannelIdWithLastUpdated]);
    }
  }
};
ChannelService_getUpdatedChannelIds_args.prototype = {};
ChannelService_getUpdatedChannelIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.channelIds = [];
        var _rtmp3940 = input.readListBegin();
        var _size939 = _rtmp3940.size || 0;
        for (var _i941 = 0; _i941 < _size939; ++_i941) {
          var elem942 = null;
          elem942 = new ChannelIdWithLastUpdated();
          elem942.read(input);
          this.channelIds.push(elem942);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getUpdatedChannelIds_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getUpdatedChannelIds_args');
  if (this.channelIds !== null && this.channelIds !== undefined) {
    output.writeFieldBegin('channelIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.channelIds.length);
    for (var iter943 in this.channelIds) {
      if (this.channelIds.hasOwnProperty(iter943)) {
        iter943 = this.channelIds[iter943];
        iter943.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getUpdatedChannelIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getUpdatedChannelIds_result.prototype = {};
ChannelService_getUpdatedChannelIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3945 = input.readListBegin();
        var _size944 = _rtmp3945.size || 0;
        for (var _i946 = 0; _i946 < _size944; ++_i946) {
          var elem947 = null;
          elem947 = input.readString().value;
          this.success.push(elem947);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getUpdatedChannelIds_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getUpdatedChannelIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter948 in this.success) {
      if (this.success.hasOwnProperty(iter948)) {
        iter948 = this.success[iter948];
        output.writeString(iter948);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_reserveCoinUse_args = function(args) {
  this.request = null;
  this.locale = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new CoinUseReservation(args.request);
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
ChannelService_reserveCoinUse_args.prototype = {};
ChannelService_reserveCoinUse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new CoinUseReservation();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_reserveCoinUse_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_reserveCoinUse_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_reserveCoinUse_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_reserveCoinUse_result.prototype = {};
ChannelService_reserveCoinUse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_reserveCoinUse_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_reserveCoinUse_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_revokeChannel_args = function(args) {
  this.channelId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
  }
};
ChannelService_revokeChannel_args.prototype = {};
ChannelService_revokeChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_revokeChannel_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_revokeChannel_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_revokeChannel_result = function(args) {
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_revokeChannel_result.prototype = {};
ChannelService_revokeChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_revokeChannel_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_revokeChannel_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_syncChannelData_args = function(args) {
  this.lastSynced = null;
  this.locale = null;
  if (args) {
    if (args.lastSynced !== undefined && args.lastSynced !== null) {
      this.lastSynced = args.lastSynced;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
ChannelService_syncChannelData_args.prototype = {};
ChannelService_syncChannelData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastSynced = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_syncChannelData_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_syncChannelData_args');
  if (this.lastSynced !== null && this.lastSynced !== undefined) {
    output.writeFieldBegin('lastSynced', Thrift.Type.I64, 2);
    output.writeI64(this.lastSynced);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_syncChannelData_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ChannelSyncDatas(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_syncChannelData_result.prototype = {};
ChannelService_syncChannelData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChannelSyncDatas();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_syncChannelData_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_syncChannelData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_updateChannelNotificationSetting_args = function(args) {
  this.setting = null;
  if (args) {
    if (args.setting !== undefined && args.setting !== null) {
      this.setting = Thrift.copyList(args.setting, [ChannelNotificationSetting]);
    }
  }
};
ChannelService_updateChannelNotificationSetting_args.prototype = {};
ChannelService_updateChannelNotificationSetting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.setting = [];
        var _rtmp3950 = input.readListBegin();
        var _size949 = _rtmp3950.size || 0;
        for (var _i951 = 0; _i951 < _size949; ++_i951) {
          var elem952 = null;
          elem952 = new ChannelNotificationSetting();
          elem952.read(input);
          this.setting.push(elem952);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_updateChannelNotificationSetting_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_updateChannelNotificationSetting_args');
  if (this.setting !== null && this.setting !== undefined) {
    output.writeFieldBegin('setting', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.setting.length);
    for (var iter953 in this.setting) {
      if (this.setting.hasOwnProperty(iter953)) {
        iter953 = this.setting[iter953];
        iter953.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_updateChannelNotificationSetting_result = function(args) {
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_updateChannelNotificationSetting_result.prototype = {};
ChannelService_updateChannelNotificationSetting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_updateChannelNotificationSetting_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_updateChannelNotificationSetting_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelServiceClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
ChannelServiceClient.prototype = {};

ChannelServiceClient.prototype.issueOTP = function(channelId, callback) {
  this.send_issueOTP(channelId, callback); 
  if (!callback) {
    return this.recv_issueOTP();
  }
};

ChannelServiceClient.prototype.send_issueOTP = function(channelId, callback) {
  var params = {
    channelId: channelId
  };
  var args = new ChannelService_issueOTP_args(params);
  try {
    this.output.writeMessageBegin('issueOTP', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_issueOTP();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_issueOTP = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_issueOTP_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'issueOTP failed: unknown result';
};

ChannelServiceClient.prototype.approveChannelAndIssueChannelToken = function(channelId, callback) {
  this.send_approveChannelAndIssueChannelToken(channelId, callback); 
  if (!callback) {
    return this.recv_approveChannelAndIssueChannelToken();
  }
};

ChannelServiceClient.prototype.send_approveChannelAndIssueChannelToken = function(channelId, callback) {
  var params = {
    channelId: channelId
  };
  var args = new ChannelService_approveChannelAndIssueChannelToken_args(params);
  try {
    this.output.writeMessageBegin('approveChannelAndIssueChannelToken', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_approveChannelAndIssueChannelToken();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_approveChannelAndIssueChannelToken = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_approveChannelAndIssueChannelToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'approveChannelAndIssueChannelToken failed: unknown result';
};

ChannelServiceClient.prototype.approveChannelAndIssueRequestToken = function(channelId, otpId, callback) {
  this.send_approveChannelAndIssueRequestToken(channelId, otpId, callback); 
  if (!callback) {
    return this.recv_approveChannelAndIssueRequestToken();
  }
};

ChannelServiceClient.prototype.send_approveChannelAndIssueRequestToken = function(channelId, otpId, callback) {
  var params = {
    channelId: channelId,
    otpId: otpId
  };
  var args = new ChannelService_approveChannelAndIssueRequestToken_args(params);
  try {
    this.output.writeMessageBegin('approveChannelAndIssueRequestToken', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_approveChannelAndIssueRequestToken();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_approveChannelAndIssueRequestToken = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_approveChannelAndIssueRequestToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'approveChannelAndIssueRequestToken failed: unknown result';
};

ChannelServiceClient.prototype.fetchNotificationItems = function(localRev, callback) {
  this.send_fetchNotificationItems(localRev, callback); 
  if (!callback) {
    return this.recv_fetchNotificationItems();
  }
};

ChannelServiceClient.prototype.send_fetchNotificationItems = function(localRev, callback) {
  var params = {
    localRev: localRev
  };
  var args = new ChannelService_fetchNotificationItems_args(params);
  try {
    this.output.writeMessageBegin('fetchNotificationItems', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_fetchNotificationItems();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_fetchNotificationItems = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_fetchNotificationItems_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'fetchNotificationItems failed: unknown result';
};

ChannelServiceClient.prototype.getApprovedChannels = function(lastSynced, locale, callback) {
  this.send_getApprovedChannels(lastSynced, locale, callback); 
  if (!callback) {
    return this.recv_getApprovedChannels();
  }
};

ChannelServiceClient.prototype.send_getApprovedChannels = function(lastSynced, locale, callback) {
  var params = {
    lastSynced: lastSynced,
    locale: locale
  };
  var args = new ChannelService_getApprovedChannels_args(params);
  try {
    this.output.writeMessageBegin('getApprovedChannels', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getApprovedChannels();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_getApprovedChannels = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getApprovedChannels_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getApprovedChannels failed: unknown result';
};

ChannelServiceClient.prototype.getChannelInfo = function(channelId, locale, callback) {
  this.send_getChannelInfo(channelId, locale, callback); 
  if (!callback) {
    return this.recv_getChannelInfo();
  }
};

ChannelServiceClient.prototype.send_getChannelInfo = function(channelId, locale, callback) {
  var params = {
    channelId: channelId,
    locale: locale
  };
  var args = new ChannelService_getChannelInfo_args(params);
  try {
    this.output.writeMessageBegin('getChannelInfo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getChannelInfo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_getChannelInfo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getChannelInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getChannelInfo failed: unknown result';
};

ChannelServiceClient.prototype.getChannelNotificationSetting = function(channelId, locale, callback) {
  this.send_getChannelNotificationSetting(channelId, locale, callback); 
  if (!callback) {
    return this.recv_getChannelNotificationSetting();
  }
};

ChannelServiceClient.prototype.send_getChannelNotificationSetting = function(channelId, locale, callback) {
  var params = {
    channelId: channelId,
    locale: locale
  };
  var args = new ChannelService_getChannelNotificationSetting_args(params);
  try {
    this.output.writeMessageBegin('getChannelNotificationSetting', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getChannelNotificationSetting();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_getChannelNotificationSetting = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getChannelNotificationSetting_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getChannelNotificationSetting failed: unknown result';
};

ChannelServiceClient.prototype.getChannelNotificationSettings = function(locale, callback) {
  this.send_getChannelNotificationSettings(locale, callback); 
  if (!callback) {
    return this.recv_getChannelNotificationSettings();
  }
};

ChannelServiceClient.prototype.send_getChannelNotificationSettings = function(locale, callback) {
  var params = {
    locale: locale
  };
  var args = new ChannelService_getChannelNotificationSettings_args(params);
  try {
    this.output.writeMessageBegin('getChannelNotificationSettings', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getChannelNotificationSettings();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_getChannelNotificationSettings = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getChannelNotificationSettings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getChannelNotificationSettings failed: unknown result';
};

ChannelServiceClient.prototype.getChannels = function(lastSynced, locale, callback) {
  this.send_getChannels(lastSynced, locale, callback); 
  if (!callback) {
    return this.recv_getChannels();
  }
};

ChannelServiceClient.prototype.send_getChannels = function(lastSynced, locale, callback) {
  var params = {
    lastSynced: lastSynced,
    locale: locale
  };
  var args = new ChannelService_getChannels_args(params);
  try {
    this.output.writeMessageBegin('getChannels', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getChannels();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_getChannels = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getChannels_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getChannels failed: unknown result';
};

ChannelServiceClient.prototype.getDomains = function(lastSynced, callback) {
  this.send_getDomains(lastSynced, callback); 
  if (!callback) {
    return this.recv_getDomains();
  }
};

ChannelServiceClient.prototype.send_getDomains = function(lastSynced, callback) {
  var params = {
    lastSynced: lastSynced
  };
  var args = new ChannelService_getDomains_args(params);
  try {
    this.output.writeMessageBegin('getDomains', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getDomains();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_getDomains = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getDomains_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDomains failed: unknown result';
};

ChannelServiceClient.prototype.getFriendChannelMatrices = function(channelIds, callback) {
  this.send_getFriendChannelMatrices(channelIds, callback); 
  if (!callback) {
    return this.recv_getFriendChannelMatrices();
  }
};

ChannelServiceClient.prototype.send_getFriendChannelMatrices = function(channelIds, callback) {
  var params = {
    channelIds: channelIds
  };
  var args = new ChannelService_getFriendChannelMatrices_args(params);
  try {
    this.output.writeMessageBegin('getFriendChannelMatrices', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getFriendChannelMatrices();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_getFriendChannelMatrices = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getFriendChannelMatrices_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFriendChannelMatrices failed: unknown result';
};

ChannelServiceClient.prototype.updateChannelSettings = function(channelSettings, callback) {
  this.send_updateChannelSettings(channelSettings, callback); 
  if (!callback) {
    return this.recv_updateChannelSettings();
  }
};

ChannelServiceClient.prototype.send_updateChannelSettings = function(channelSettings, callback) {
  var params = {
    channelSettings: channelSettings
  };
  var args = new ChannelService_updateChannelSettings_args(params);
  try {
    this.output.writeMessageBegin('updateChannelSettings', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_updateChannelSettings();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_updateChannelSettings = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_updateChannelSettings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateChannelSettings failed: unknown result';
};

ChannelServiceClient.prototype.getCommonDomains = function(lastSynced, callback) {
  this.send_getCommonDomains(lastSynced, callback); 
  if (!callback) {
    return this.recv_getCommonDomains();
  }
};

ChannelServiceClient.prototype.send_getCommonDomains = function(lastSynced, callback) {
  var params = {
    lastSynced: lastSynced
  };
  var args = new ChannelService_getCommonDomains_args(params);
  try {
    this.output.writeMessageBegin('getCommonDomains', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getCommonDomains();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_getCommonDomains = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getCommonDomains_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCommonDomains failed: unknown result';
};

ChannelServiceClient.prototype.getNotificationBadgeCount = function(localRev, callback) {
  this.send_getNotificationBadgeCount(localRev, callback); 
  if (!callback) {
    return this.recv_getNotificationBadgeCount();
  }
};

ChannelServiceClient.prototype.send_getNotificationBadgeCount = function(localRev, callback) {
  var params = {
    localRev: localRev
  };
  var args = new ChannelService_getNotificationBadgeCount_args(params);
  try {
    this.output.writeMessageBegin('getNotificationBadgeCount', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getNotificationBadgeCount();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_getNotificationBadgeCount = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getNotificationBadgeCount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNotificationBadgeCount failed: unknown result';
};

ChannelServiceClient.prototype.issueChannelToken = function(channelId, callback) {
  this.send_issueChannelToken(channelId, callback); 
  if (!callback) {
    return this.recv_issueChannelToken();
  }
};

ChannelServiceClient.prototype.send_issueChannelToken = function(channelId, callback) {
  var params = {
    channelId: channelId
  };
  var args = new ChannelService_issueChannelToken_args(params);
  try {
    this.output.writeMessageBegin('issueChannelToken', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_issueChannelToken();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_issueChannelToken = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_issueChannelToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'issueChannelToken failed: unknown result';
};

ChannelServiceClient.prototype.issueRequestToken = function(channelId, otpId, callback) {
  this.send_issueRequestToken(channelId, otpId, callback); 
  if (!callback) {
    return this.recv_issueRequestToken();
  }
};

ChannelServiceClient.prototype.send_issueRequestToken = function(channelId, otpId, callback) {
  var params = {
    channelId: channelId,
    otpId: otpId
  };
  var args = new ChannelService_issueRequestToken_args(params);
  try {
    this.output.writeMessageBegin('issueRequestToken', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_issueRequestToken();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_issueRequestToken = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_issueRequestToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'issueRequestToken failed: unknown result';
};

ChannelServiceClient.prototype.issueRequestTokenWithAuthScheme = function(channelId, otpId, authScheme, returnUrl, callback) {
  this.send_issueRequestTokenWithAuthScheme(channelId, otpId, authScheme, returnUrl, callback); 
  if (!callback) {
    return this.recv_issueRequestTokenWithAuthScheme();
  }
};

ChannelServiceClient.prototype.send_issueRequestTokenWithAuthScheme = function(channelId, otpId, authScheme, returnUrl, callback) {
  var params = {
    channelId: channelId,
    otpId: otpId,
    authScheme: authScheme,
    returnUrl: returnUrl
  };
  var args = new ChannelService_issueRequestTokenWithAuthScheme_args(params);
  try {
    this.output.writeMessageBegin('issueRequestTokenWithAuthScheme', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_issueRequestTokenWithAuthScheme();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_issueRequestTokenWithAuthScheme = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_issueRequestTokenWithAuthScheme_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'issueRequestTokenWithAuthScheme failed: unknown result';
};

ChannelServiceClient.prototype.issueRequestTokenForAutoLogin = function(channelId, otpId, redirectUrl, callback) {
  this.send_issueRequestTokenForAutoLogin(channelId, otpId, redirectUrl, callback); 
  if (!callback) {
    return this.recv_issueRequestTokenForAutoLogin();
  }
};

ChannelServiceClient.prototype.send_issueRequestTokenForAutoLogin = function(channelId, otpId, redirectUrl, callback) {
  var params = {
    channelId: channelId,
    otpId: otpId,
    redirectUrl: redirectUrl
  };
  var args = new ChannelService_issueRequestTokenForAutoLogin_args(params);
  try {
    this.output.writeMessageBegin('issueRequestTokenForAutoLogin', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_issueRequestTokenForAutoLogin();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_issueRequestTokenForAutoLogin = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_issueRequestTokenForAutoLogin_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'issueRequestTokenForAutoLogin failed: unknown result';
};

ChannelServiceClient.prototype.getUpdatedChannelIds = function(channelIds, callback) {
  this.send_getUpdatedChannelIds(channelIds, callback); 
  if (!callback) {
    return this.recv_getUpdatedChannelIds();
  }
};

ChannelServiceClient.prototype.send_getUpdatedChannelIds = function(channelIds, callback) {
  var params = {
    channelIds: channelIds
  };
  var args = new ChannelService_getUpdatedChannelIds_args(params);
  try {
    this.output.writeMessageBegin('getUpdatedChannelIds', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getUpdatedChannelIds();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_getUpdatedChannelIds = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getUpdatedChannelIds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUpdatedChannelIds failed: unknown result';
};

ChannelServiceClient.prototype.reserveCoinUse = function(request, locale, callback) {
  this.send_reserveCoinUse(request, locale, callback); 
  if (!callback) {
    return this.recv_reserveCoinUse();
  }
};

ChannelServiceClient.prototype.send_reserveCoinUse = function(request, locale, callback) {
  var params = {
    request: request,
    locale: locale
  };
  var args = new ChannelService_reserveCoinUse_args(params);
  try {
    this.output.writeMessageBegin('reserveCoinUse', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_reserveCoinUse();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_reserveCoinUse = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_reserveCoinUse_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reserveCoinUse failed: unknown result';
};

ChannelServiceClient.prototype.revokeChannel = function(channelId, callback) {
  this.send_revokeChannel(channelId, callback); 
  if (!callback) {
  this.recv_revokeChannel();
  }
};

ChannelServiceClient.prototype.send_revokeChannel = function(channelId, callback) {
  var params = {
    channelId: channelId
  };
  var args = new ChannelService_revokeChannel_args(params);
  try {
    this.output.writeMessageBegin('revokeChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_revokeChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_revokeChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_revokeChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ChannelServiceClient.prototype.syncChannelData = function(lastSynced, locale, callback) {
  this.send_syncChannelData(lastSynced, locale, callback); 
  if (!callback) {
    return this.recv_syncChannelData();
  }
};

ChannelServiceClient.prototype.send_syncChannelData = function(lastSynced, locale, callback) {
  var params = {
    lastSynced: lastSynced,
    locale: locale
  };
  var args = new ChannelService_syncChannelData_args(params);
  try {
    this.output.writeMessageBegin('syncChannelData', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_syncChannelData();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_syncChannelData = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_syncChannelData_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'syncChannelData failed: unknown result';
};

ChannelServiceClient.prototype.updateChannelNotificationSetting = function(setting, callback) {
  this.send_updateChannelNotificationSetting(setting, callback); 
  if (!callback) {
  this.recv_updateChannelNotificationSetting();
  }
};

ChannelServiceClient.prototype.send_updateChannelNotificationSetting = function(setting, callback) {
  var params = {
    setting: setting
  };
  var args = new ChannelService_updateChannelNotificationSetting_args(params);
  try {
    this.output.writeMessageBegin('updateChannelNotificationSetting', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_updateChannelNotificationSetting();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelServiceClient.prototype.recv_updateChannelNotificationSetting = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_updateChannelNotificationSetting_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
