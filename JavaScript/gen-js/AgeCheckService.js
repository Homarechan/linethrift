//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

AgeCheckService_checkUserAge_args = function(args) {
  this.carrier = null;
  this.sessionId = null;
  this.verifier = null;
  this.standardAge = null;
  if (args) {
    if (args.carrier !== undefined && args.carrier !== null) {
      this.carrier = args.carrier;
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.standardAge !== undefined && args.standardAge !== null) {
      this.standardAge = args.standardAge;
    }
  }
};
AgeCheckService_checkUserAge_args.prototype = {};
AgeCheckService_checkUserAge_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.carrier = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.standardAge = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgeCheckService_checkUserAge_args.prototype.write = function(output) {
  output.writeStructBegin('AgeCheckService_checkUserAge_args');
  if (this.carrier !== null && this.carrier !== undefined) {
    output.writeFieldBegin('carrier', Thrift.Type.I32, 2);
    output.writeI32(this.carrier);
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 3);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 4);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.standardAge !== null && this.standardAge !== undefined) {
    output.writeFieldBegin('standardAge', Thrift.Type.I32, 5);
    output.writeI32(this.standardAge);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgeCheckService_checkUserAge_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AgeCheckService_checkUserAge_result.prototype = {};
AgeCheckService_checkUserAge_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgeCheckService_checkUserAge_result.prototype.write = function(output) {
  output.writeStructBegin('AgeCheckService_checkUserAge_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgeCheckService_checkUserAgeWithDocomo_args = function(args) {
  this.openIdRedirectUrl = null;
  this.standardAge = null;
  this.verifier = null;
  if (args) {
    if (args.openIdRedirectUrl !== undefined && args.openIdRedirectUrl !== null) {
      this.openIdRedirectUrl = args.openIdRedirectUrl;
    }
    if (args.standardAge !== undefined && args.standardAge !== null) {
      this.standardAge = args.standardAge;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
  }
};
AgeCheckService_checkUserAgeWithDocomo_args.prototype = {};
AgeCheckService_checkUserAgeWithDocomo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.openIdRedirectUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.standardAge = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgeCheckService_checkUserAgeWithDocomo_args.prototype.write = function(output) {
  output.writeStructBegin('AgeCheckService_checkUserAgeWithDocomo_args');
  if (this.openIdRedirectUrl !== null && this.openIdRedirectUrl !== undefined) {
    output.writeFieldBegin('openIdRedirectUrl', Thrift.Type.STRING, 2);
    output.writeString(this.openIdRedirectUrl);
    output.writeFieldEnd();
  }
  if (this.standardAge !== null && this.standardAge !== undefined) {
    output.writeFieldBegin('standardAge', Thrift.Type.I32, 3);
    output.writeI32(this.standardAge);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 4);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgeCheckService_checkUserAgeWithDocomo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new AgeCheckDocomoResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AgeCheckService_checkUserAgeWithDocomo_result.prototype = {};
AgeCheckService_checkUserAgeWithDocomo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AgeCheckDocomoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgeCheckService_checkUserAgeWithDocomo_result.prototype.write = function(output) {
  output.writeStructBegin('AgeCheckService_checkUserAgeWithDocomo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_args = function(args) {
};
AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_args.prototype = {};
AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_args.prototype.write = function(output) {
  output.writeStructBegin('AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_result.prototype = {};
AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_result.prototype.write = function(output) {
  output.writeStructBegin('AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgeCheckService_retrieveRequestToken_args = function(args) {
  this.carrier = null;
  if (args) {
    if (args.carrier !== undefined && args.carrier !== null) {
      this.carrier = args.carrier;
    }
  }
};
AgeCheckService_retrieveRequestToken_args.prototype = {};
AgeCheckService_retrieveRequestToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.carrier = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgeCheckService_retrieveRequestToken_args.prototype.write = function(output) {
  output.writeStructBegin('AgeCheckService_retrieveRequestToken_args');
  if (this.carrier !== null && this.carrier !== undefined) {
    output.writeFieldBegin('carrier', Thrift.Type.I32, 2);
    output.writeI32(this.carrier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgeCheckService_retrieveRequestToken_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new AgeCheckRequestResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AgeCheckService_retrieveRequestToken_result.prototype = {};
AgeCheckService_retrieveRequestToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AgeCheckRequestResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgeCheckService_retrieveRequestToken_result.prototype.write = function(output) {
  output.writeStructBegin('AgeCheckService_retrieveRequestToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgeCheckServiceClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
AgeCheckServiceClient.prototype = {};

AgeCheckServiceClient.prototype.checkUserAge = function(carrier, sessionId, verifier, standardAge, callback) {
  this.send_checkUserAge(carrier, sessionId, verifier, standardAge, callback); 
  if (!callback) {
    return this.recv_checkUserAge();
  }
};

AgeCheckServiceClient.prototype.send_checkUserAge = function(carrier, sessionId, verifier, standardAge, callback) {
  var params = {
    carrier: carrier,
    sessionId: sessionId,
    verifier: verifier,
    standardAge: standardAge
  };
  var args = new AgeCheckService_checkUserAge_args(params);
  try {
    this.output.writeMessageBegin('checkUserAge', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_checkUserAge();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AgeCheckServiceClient.prototype.recv_checkUserAge = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AgeCheckService_checkUserAge_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'checkUserAge failed: unknown result';
};

AgeCheckServiceClient.prototype.checkUserAgeWithDocomo = function(openIdRedirectUrl, standardAge, verifier, callback) {
  this.send_checkUserAgeWithDocomo(openIdRedirectUrl, standardAge, verifier, callback); 
  if (!callback) {
    return this.recv_checkUserAgeWithDocomo();
  }
};

AgeCheckServiceClient.prototype.send_checkUserAgeWithDocomo = function(openIdRedirectUrl, standardAge, verifier, callback) {
  var params = {
    openIdRedirectUrl: openIdRedirectUrl,
    standardAge: standardAge,
    verifier: verifier
  };
  var args = new AgeCheckService_checkUserAgeWithDocomo_args(params);
  try {
    this.output.writeMessageBegin('checkUserAgeWithDocomo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_checkUserAgeWithDocomo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AgeCheckServiceClient.prototype.recv_checkUserAgeWithDocomo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AgeCheckService_checkUserAgeWithDocomo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'checkUserAgeWithDocomo failed: unknown result';
};

AgeCheckServiceClient.prototype.retrieveOpenIdAuthUrlWithDocomo = function(callback) {
  this.send_retrieveOpenIdAuthUrlWithDocomo(callback); 
  if (!callback) {
    return this.recv_retrieveOpenIdAuthUrlWithDocomo();
  }
};

AgeCheckServiceClient.prototype.send_retrieveOpenIdAuthUrlWithDocomo = function(callback) {
  var args = new AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_args();
  try {
    this.output.writeMessageBegin('retrieveOpenIdAuthUrlWithDocomo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_retrieveOpenIdAuthUrlWithDocomo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AgeCheckServiceClient.prototype.recv_retrieveOpenIdAuthUrlWithDocomo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'retrieveOpenIdAuthUrlWithDocomo failed: unknown result';
};

AgeCheckServiceClient.prototype.retrieveRequestToken = function(carrier, callback) {
  this.send_retrieveRequestToken(carrier, callback); 
  if (!callback) {
    return this.recv_retrieveRequestToken();
  }
};

AgeCheckServiceClient.prototype.send_retrieveRequestToken = function(carrier, callback) {
  var params = {
    carrier: carrier
  };
  var args = new AgeCheckService_retrieveRequestToken_args(params);
  try {
    this.output.writeMessageBegin('retrieveRequestToken', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_retrieveRequestToken();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AgeCheckServiceClient.prototype.recv_retrieveRequestToken = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AgeCheckService_retrieveRequestToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'retrieveRequestToken failed: unknown result';
};
