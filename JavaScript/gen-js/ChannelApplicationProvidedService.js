//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

ChannelApplicationProvidedService_activeBuddySubscriberCount_args = function(args) {
};
ChannelApplicationProvidedService_activeBuddySubscriberCount_args.prototype = {};
ChannelApplicationProvidedService_activeBuddySubscriberCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_activeBuddySubscriberCount_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_activeBuddySubscriberCount_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_activeBuddySubscriberCount_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_activeBuddySubscriberCount_result.prototype = {};
ChannelApplicationProvidedService_activeBuddySubscriberCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_activeBuddySubscriberCount_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_activeBuddySubscriberCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_addOperationForChannel_args = function(args) {
  this.opType = null;
  this.param1 = null;
  this.param2 = null;
  this.param3 = null;
  if (args) {
    if (args.opType !== undefined && args.opType !== null) {
      this.opType = args.opType;
    }
    if (args.param1 !== undefined && args.param1 !== null) {
      this.param1 = args.param1;
    }
    if (args.param2 !== undefined && args.param2 !== null) {
      this.param2 = args.param2;
    }
    if (args.param3 !== undefined && args.param3 !== null) {
      this.param3 = args.param3;
    }
  }
};
ChannelApplicationProvidedService_addOperationForChannel_args.prototype = {};
ChannelApplicationProvidedService_addOperationForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.opType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.param1 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.param2 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.param3 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_addOperationForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_addOperationForChannel_args');
  if (this.opType !== null && this.opType !== undefined) {
    output.writeFieldBegin('opType', Thrift.Type.I32, 1);
    output.writeI32(this.opType);
    output.writeFieldEnd();
  }
  if (this.param1 !== null && this.param1 !== undefined) {
    output.writeFieldBegin('param1', Thrift.Type.STRING, 2);
    output.writeString(this.param1);
    output.writeFieldEnd();
  }
  if (this.param2 !== null && this.param2 !== undefined) {
    output.writeFieldBegin('param2', Thrift.Type.STRING, 3);
    output.writeString(this.param2);
    output.writeFieldEnd();
  }
  if (this.param3 !== null && this.param3 !== undefined) {
    output.writeFieldBegin('param3', Thrift.Type.STRING, 4);
    output.writeString(this.param3);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_addOperationForChannel_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_addOperationForChannel_result.prototype = {};
ChannelApplicationProvidedService_addOperationForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_addOperationForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_addOperationForChannel_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_displayBuddySubscriberCount_args = function(args) {
};
ChannelApplicationProvidedService_displayBuddySubscriberCount_args.prototype = {};
ChannelApplicationProvidedService_displayBuddySubscriberCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_displayBuddySubscriberCount_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_displayBuddySubscriberCount_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_displayBuddySubscriberCount_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_displayBuddySubscriberCount_result.prototype = {};
ChannelApplicationProvidedService_displayBuddySubscriberCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_displayBuddySubscriberCount_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_displayBuddySubscriberCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args = function(args) {
  this.userid = null;
  if (args) {
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
  }
};
ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args.prototype = {};
ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args');
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 2);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Contact(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result.prototype = {};
ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Contact();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getAllContactIdsForChannel_args = function(args) {
};
ChannelApplicationProvidedService_getAllContactIdsForChannel_args.prototype = {};
ChannelApplicationProvidedService_getAllContactIdsForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getAllContactIdsForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getAllContactIdsForChannel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getAllContactIdsForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getAllContactIdsForChannel_result.prototype = {};
ChannelApplicationProvidedService_getAllContactIdsForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3853 = input.readListBegin();
        var _size852 = _rtmp3853.size || 0;
        for (var _i854 = 0; _i854 < _size852; ++_i854) {
          var elem855 = null;
          elem855 = input.readString().value;
          this.success.push(elem855);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getAllContactIdsForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getAllContactIdsForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter856 in this.success) {
      if (this.success.hasOwnProperty(iter856)) {
        iter856 = this.success[iter856];
        output.writeString(iter856);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getCompactContacts_args = function(args) {
  this.lastModifiedTimestamp = null;
  if (args) {
    if (args.lastModifiedTimestamp !== undefined && args.lastModifiedTimestamp !== null) {
      this.lastModifiedTimestamp = args.lastModifiedTimestamp;
    }
  }
};
ChannelApplicationProvidedService_getCompactContacts_args.prototype = {};
ChannelApplicationProvidedService_getCompactContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastModifiedTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getCompactContacts_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getCompactContacts_args');
  if (this.lastModifiedTimestamp !== null && this.lastModifiedTimestamp !== undefined) {
    output.writeFieldBegin('lastModifiedTimestamp', Thrift.Type.I64, 2);
    output.writeI64(this.lastModifiedTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getCompactContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [CompactContact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getCompactContacts_result.prototype = {};
ChannelApplicationProvidedService_getCompactContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3858 = input.readListBegin();
        var _size857 = _rtmp3858.size || 0;
        for (var _i859 = 0; _i859 < _size857; ++_i859) {
          var elem860 = null;
          elem860 = new CompactContact();
          elem860.read(input);
          this.success.push(elem860);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getCompactContacts_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getCompactContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter861 in this.success) {
      if (this.success.hasOwnProperty(iter861)) {
        iter861 = this.success[iter861];
        iter861.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getContactsForChannel_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
  }
};
ChannelApplicationProvidedService_getContactsForChannel_args.prototype = {};
ChannelApplicationProvidedService_getContactsForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.ids = [];
        var _rtmp3863 = input.readListBegin();
        var _size862 = _rtmp3863.size || 0;
        for (var _i864 = 0; _i864 < _size862; ++_i864) {
          var elem865 = null;
          elem865 = input.readString().value;
          this.ids.push(elem865);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getContactsForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getContactsForChannel_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter866 in this.ids) {
      if (this.ids.hasOwnProperty(iter866)) {
        iter866 = this.ids[iter866];
        output.writeString(iter866);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getContactsForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getContactsForChannel_result.prototype = {};
ChannelApplicationProvidedService_getContactsForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3868 = input.readListBegin();
        var _size867 = _rtmp3868.size || 0;
        for (var _i869 = 0; _i869 < _size867; ++_i869) {
          var elem870 = null;
          elem870 = new Contact();
          elem870.read(input);
          this.success.push(elem870);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getContactsForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getContactsForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter871 in this.success) {
      if (this.success.hasOwnProperty(iter871)) {
        iter871 = this.success[iter871];
        iter871.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getDisplayName_args = function(args) {
  this.mid = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
ChannelApplicationProvidedService_getDisplayName_args.prototype = {};
ChannelApplicationProvidedService_getDisplayName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getDisplayName_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getDisplayName_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getDisplayName_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getDisplayName_result.prototype = {};
ChannelApplicationProvidedService_getDisplayName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getDisplayName_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getDisplayName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getFavoriteMidsForChannel_args = function(args) {
};
ChannelApplicationProvidedService_getFavoriteMidsForChannel_args.prototype = {};
ChannelApplicationProvidedService_getFavoriteMidsForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getFavoriteMidsForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getFavoriteMidsForChannel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getFavoriteMidsForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getFavoriteMidsForChannel_result.prototype = {};
ChannelApplicationProvidedService_getFavoriteMidsForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3873 = input.readListBegin();
        var _size872 = _rtmp3873.size || 0;
        for (var _i874 = 0; _i874 < _size872; ++_i874) {
          var elem875 = null;
          elem875 = input.readString().value;
          this.success.push(elem875);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getFavoriteMidsForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getFavoriteMidsForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter876 in this.success) {
      if (this.success.hasOwnProperty(iter876)) {
        iter876 = this.success[iter876];
        output.writeString(iter876);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getFriendMids_args = function(args) {
};
ChannelApplicationProvidedService_getFriendMids_args.prototype = {};
ChannelApplicationProvidedService_getFriendMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getFriendMids_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getFriendMids_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getFriendMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getFriendMids_result.prototype = {};
ChannelApplicationProvidedService_getFriendMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3878 = input.readListBegin();
        var _size877 = _rtmp3878.size || 0;
        for (var _i879 = 0; _i879 < _size877; ++_i879) {
          var elem880 = null;
          elem880 = input.readString().value;
          this.success.push(elem880);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getFriendMids_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getFriendMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter881 in this.success) {
      if (this.success.hasOwnProperty(iter881)) {
        iter881 = this.success[iter881];
        output.writeString(iter881);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getGroupMemberMids_args = function(args) {
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
ChannelApplicationProvidedService_getGroupMemberMids_args.prototype = {};
ChannelApplicationProvidedService_getGroupMemberMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getGroupMemberMids_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getGroupMemberMids_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 1);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getGroupMemberMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getGroupMemberMids_result.prototype = {};
ChannelApplicationProvidedService_getGroupMemberMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3883 = input.readListBegin();
        var _size882 = _rtmp3883.size || 0;
        for (var _i884 = 0; _i884 < _size882; ++_i884) {
          var elem885 = null;
          elem885 = input.readString().value;
          this.success.push(elem885);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getGroupMemberMids_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getGroupMemberMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter886 in this.success) {
      if (this.success.hasOwnProperty(iter886)) {
        iter886 = this.success[iter886];
        output.writeString(iter886);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getGroupsForChannel_args = function(args) {
  this.groupIds = null;
  if (args) {
    if (args.groupIds !== undefined && args.groupIds !== null) {
      this.groupIds = Thrift.copyList(args.groupIds, [null]);
    }
  }
};
ChannelApplicationProvidedService_getGroupsForChannel_args.prototype = {};
ChannelApplicationProvidedService_getGroupsForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.groupIds = [];
        var _rtmp3888 = input.readListBegin();
        var _size887 = _rtmp3888.size || 0;
        for (var _i889 = 0; _i889 < _size887; ++_i889) {
          var elem890 = null;
          elem890 = input.readString().value;
          this.groupIds.push(elem890);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getGroupsForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getGroupsForChannel_args');
  if (this.groupIds !== null && this.groupIds !== undefined) {
    output.writeFieldBegin('groupIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.groupIds.length);
    for (var iter891 in this.groupIds) {
      if (this.groupIds.hasOwnProperty(iter891)) {
        iter891 = this.groupIds[iter891];
        output.writeString(iter891);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getGroupsForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Group]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getGroupsForChannel_result.prototype = {};
ChannelApplicationProvidedService_getGroupsForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3893 = input.readListBegin();
        var _size892 = _rtmp3893.size || 0;
        for (var _i894 = 0; _i894 < _size892; ++_i894) {
          var elem895 = null;
          elem895 = new Group();
          elem895.read(input);
          this.success.push(elem895);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getGroupsForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getGroupsForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter896 in this.success) {
      if (this.success.hasOwnProperty(iter896)) {
        iter896 = this.success[iter896];
        iter896.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getIdentityCredential_args = function(args) {
};
ChannelApplicationProvidedService_getIdentityCredential_args.prototype = {};
ChannelApplicationProvidedService_getIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getIdentityCredential_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getIdentityCredential_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new IdentityCredential(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getIdentityCredential_result.prototype = {};
ChannelApplicationProvidedService_getIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new IdentityCredential();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getIdentityCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_args = function(args) {
};
ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_args.prototype = {};
ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result.prototype = {};
ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3898 = input.readListBegin();
        var _size897 = _rtmp3898.size || 0;
        for (var _i899 = 0; _i899 < _size897; ++_i899) {
          var elem900 = null;
          elem900 = input.readString().value;
          this.success.push(elem900);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter901 in this.success) {
      if (this.success.hasOwnProperty(iter901)) {
        iter901 = this.success[iter901];
        output.writeString(iter901);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getMetaProfile_args = function(args) {
};
ChannelApplicationProvidedService_getMetaProfile_args.prototype = {};
ChannelApplicationProvidedService_getMetaProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getMetaProfile_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getMetaProfile_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getMetaProfile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new MetaProfile(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getMetaProfile_result.prototype = {};
ChannelApplicationProvidedService_getMetaProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MetaProfile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getMetaProfile_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getMetaProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getMid_args = function(args) {
};
ChannelApplicationProvidedService_getMid_args.prototype = {};
ChannelApplicationProvidedService_getMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getMid_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getMid_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getMid_result.prototype = {};
ChannelApplicationProvidedService_getMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getMid_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getPrimaryClientForChannel_args = function(args) {
};
ChannelApplicationProvidedService_getPrimaryClientForChannel_args.prototype = {};
ChannelApplicationProvidedService_getPrimaryClientForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getPrimaryClientForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getPrimaryClientForChannel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getPrimaryClientForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SimpleChannelClient(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getPrimaryClientForChannel_result.prototype = {};
ChannelApplicationProvidedService_getPrimaryClientForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SimpleChannelClient();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getPrimaryClientForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getPrimaryClientForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getProfileForChannel_args = function(args) {
};
ChannelApplicationProvidedService_getProfileForChannel_args.prototype = {};
ChannelApplicationProvidedService_getProfileForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getProfileForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getProfileForChannel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getProfileForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Profile(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getProfileForChannel_result.prototype = {};
ChannelApplicationProvidedService_getProfileForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Profile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getProfileForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getProfileForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getSimpleChannelContacts_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
  }
};
ChannelApplicationProvidedService_getSimpleChannelContacts_args.prototype = {};
ChannelApplicationProvidedService_getSimpleChannelContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.ids = [];
        var _rtmp3903 = input.readListBegin();
        var _size902 = _rtmp3903.size || 0;
        for (var _i904 = 0; _i904 < _size902; ++_i904) {
          var elem905 = null;
          elem905 = input.readString().value;
          this.ids.push(elem905);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getSimpleChannelContacts_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getSimpleChannelContacts_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter906 in this.ids) {
      if (this.ids.hasOwnProperty(iter906)) {
        iter906 = this.ids[iter906];
        output.writeString(iter906);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getSimpleChannelContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SimpleChannelContact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getSimpleChannelContacts_result.prototype = {};
ChannelApplicationProvidedService_getSimpleChannelContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3908 = input.readListBegin();
        var _size907 = _rtmp3908.size || 0;
        for (var _i909 = 0; _i909 < _size907; ++_i909) {
          var elem910 = null;
          elem910 = new SimpleChannelContact();
          elem910.read(input);
          this.success.push(elem910);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getSimpleChannelContacts_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getSimpleChannelContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter911 in this.success) {
      if (this.success.hasOwnProperty(iter911)) {
        iter911 = this.success[iter911];
        iter911.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserCountryForBilling_args = function(args) {
  this.country = null;
  this.remoteIp = null;
  if (args) {
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.remoteIp !== undefined && args.remoteIp !== null) {
      this.remoteIp = args.remoteIp;
    }
  }
};
ChannelApplicationProvidedService_getUserCountryForBilling_args.prototype = {};
ChannelApplicationProvidedService_getUserCountryForBilling_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.remoteIp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserCountryForBilling_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getUserCountryForBilling_args');
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 2);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.remoteIp !== null && this.remoteIp !== undefined) {
    output.writeFieldBegin('remoteIp', Thrift.Type.STRING, 3);
    output.writeString(this.remoteIp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserCountryForBilling_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getUserCountryForBilling_result.prototype = {};
ChannelApplicationProvidedService_getUserCountryForBilling_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserCountryForBilling_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getUserCountryForBilling_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserCreateTime_args = function(args) {
};
ChannelApplicationProvidedService_getUserCreateTime_args.prototype = {};
ChannelApplicationProvidedService_getUserCreateTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserCreateTime_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getUserCreateTime_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserCreateTime_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getUserCreateTime_result.prototype = {};
ChannelApplicationProvidedService_getUserCreateTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserCreateTime_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getUserCreateTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserIdentities_args = function(args) {
};
ChannelApplicationProvidedService_getUserIdentities_args.prototype = {};
ChannelApplicationProvidedService_getUserIdentities_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserIdentities_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getUserIdentities_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserIdentities_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getUserIdentities_result.prototype = {};
ChannelApplicationProvidedService_getUserIdentities_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp3913 = input.readMapBegin();
        var _size912 = _rtmp3913.size || 0;
        for (var _i914 = 0; _i914 < _size912; ++_i914) {
          if (_i914 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key915 = null;
          var val916 = null;
          key915 = input.readI32().value;
          val916 = input.readString().value;
          this.success[key915] = val916;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserIdentities_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getUserIdentities_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter917 in this.success) {
      if (this.success.hasOwnProperty(kiter917)) {
        var viter918 = this.success[kiter917];
        output.writeI32(kiter917);
        output.writeString(viter918);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserLanguage_args = function(args) {
};
ChannelApplicationProvidedService_getUserLanguage_args.prototype = {};
ChannelApplicationProvidedService_getUserLanguage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserLanguage_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getUserLanguage_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserLanguage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getUserLanguage_result.prototype = {};
ChannelApplicationProvidedService_getUserLanguage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserLanguage_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getUserLanguage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserMidsWhoAddedMe_args = function(args) {
};
ChannelApplicationProvidedService_getUserMidsWhoAddedMe_args.prototype = {};
ChannelApplicationProvidedService_getUserMidsWhoAddedMe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserMidsWhoAddedMe_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getUserMidsWhoAddedMe_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result.prototype = {};
ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3920 = input.readListBegin();
        var _size919 = _rtmp3920.size || 0;
        for (var _i921 = 0; _i921 < _size919; ++_i921) {
          var elem922 = null;
          elem922 = input.readString().value;
          this.success.push(elem922);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter923 in this.success) {
      if (this.success.hasOwnProperty(iter923)) {
        iter923 = this.success[iter923];
        output.writeString(iter923);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_isGroupMember_args = function(args) {
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
ChannelApplicationProvidedService_isGroupMember_args.prototype = {};
ChannelApplicationProvidedService_isGroupMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_isGroupMember_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_isGroupMember_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 1);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_isGroupMember_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_isGroupMember_result.prototype = {};
ChannelApplicationProvidedService_isGroupMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_isGroupMember_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_isGroupMember_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_isInContact_args = function(args) {
  this.mid = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
ChannelApplicationProvidedService_isInContact_args.prototype = {};
ChannelApplicationProvidedService_isInContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_isInContact_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_isInContact_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_isInContact_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_isInContact_result.prototype = {};
ChannelApplicationProvidedService_isInContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_isInContact_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_isInContact_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_registerChannelCP_args = function(args) {
  this.cpId = null;
  this.registerPassword = null;
  if (args) {
    if (args.cpId !== undefined && args.cpId !== null) {
      this.cpId = args.cpId;
    }
    if (args.registerPassword !== undefined && args.registerPassword !== null) {
      this.registerPassword = args.registerPassword;
    }
  }
};
ChannelApplicationProvidedService_registerChannelCP_args.prototype = {};
ChannelApplicationProvidedService_registerChannelCP_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cpId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registerPassword = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_registerChannelCP_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_registerChannelCP_args');
  if (this.cpId !== null && this.cpId !== undefined) {
    output.writeFieldBegin('cpId', Thrift.Type.STRING, 2);
    output.writeString(this.cpId);
    output.writeFieldEnd();
  }
  if (this.registerPassword !== null && this.registerPassword !== undefined) {
    output.writeFieldBegin('registerPassword', Thrift.Type.STRING, 3);
    output.writeString(this.registerPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_registerChannelCP_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_registerChannelCP_result.prototype = {};
ChannelApplicationProvidedService_registerChannelCP_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_registerChannelCP_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_registerChannelCP_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_removeNotificationStatus_args = function(args) {
  this.notificationStatus = null;
  if (args) {
    if (args.notificationStatus !== undefined && args.notificationStatus !== null) {
      this.notificationStatus = args.notificationStatus;
    }
  }
};
ChannelApplicationProvidedService_removeNotificationStatus_args.prototype = {};
ChannelApplicationProvidedService_removeNotificationStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.notificationStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_removeNotificationStatus_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_removeNotificationStatus_args');
  if (this.notificationStatus !== null && this.notificationStatus !== undefined) {
    output.writeFieldBegin('notificationStatus', Thrift.Type.I32, 2);
    output.writeI32(this.notificationStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_removeNotificationStatus_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_removeNotificationStatus_result.prototype = {};
ChannelApplicationProvidedService_removeNotificationStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_removeNotificationStatus_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_removeNotificationStatus_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_sendMessageForChannel_args = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new Message(args.message);
    }
  }
};
ChannelApplicationProvidedService_sendMessageForChannel_args.prototype = {};
ChannelApplicationProvidedService_sendMessageForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_sendMessageForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_sendMessageForChannel_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_sendMessageForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Message(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_sendMessageForChannel_result.prototype = {};
ChannelApplicationProvidedService_sendMessageForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Message();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_sendMessageForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_sendMessageForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_sendPinCodeOperation_args = function(args) {
  this.verifier = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
  }
};
ChannelApplicationProvidedService_sendPinCodeOperation_args.prototype = {};
ChannelApplicationProvidedService_sendPinCodeOperation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_sendPinCodeOperation_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_sendPinCodeOperation_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 1);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_sendPinCodeOperation_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_sendPinCodeOperation_result.prototype = {};
ChannelApplicationProvidedService_sendPinCodeOperation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_sendPinCodeOperation_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_sendPinCodeOperation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_updateProfileAttributeForChannel_args = function(args) {
  this.profileAttribute = null;
  this.value = null;
  if (args) {
    if (args.profileAttribute !== undefined && args.profileAttribute !== null) {
      this.profileAttribute = args.profileAttribute;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
ChannelApplicationProvidedService_updateProfileAttributeForChannel_args.prototype = {};
ChannelApplicationProvidedService_updateProfileAttributeForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.profileAttribute = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_updateProfileAttributeForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_updateProfileAttributeForChannel_args');
  if (this.profileAttribute !== null && this.profileAttribute !== undefined) {
    output.writeFieldBegin('profileAttribute', Thrift.Type.I32, 2);
    output.writeI32(this.profileAttribute);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedService_updateProfileAttributeForChannel_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelApplicationProvidedService_updateProfileAttributeForChannel_result.prototype = {};
ChannelApplicationProvidedService_updateProfileAttributeForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelApplicationProvidedService_updateProfileAttributeForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelApplicationProvidedService_updateProfileAttributeForChannel_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelApplicationProvidedServiceClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
ChannelApplicationProvidedServiceClient.prototype = {};

ChannelApplicationProvidedServiceClient.prototype.activeBuddySubscriberCount = function(callback) {
  this.send_activeBuddySubscriberCount(callback); 
  if (!callback) {
    return this.recv_activeBuddySubscriberCount();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_activeBuddySubscriberCount = function(callback) {
  var args = new ChannelApplicationProvidedService_activeBuddySubscriberCount_args();
  try {
    this.output.writeMessageBegin('activeBuddySubscriberCount', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_activeBuddySubscriberCount();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_activeBuddySubscriberCount = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_activeBuddySubscriberCount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'activeBuddySubscriberCount failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.addOperationForChannel = function(opType, param1, param2, param3, callback) {
  this.send_addOperationForChannel(opType, param1, param2, param3, callback); 
  if (!callback) {
  this.recv_addOperationForChannel();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_addOperationForChannel = function(opType, param1, param2, param3, callback) {
  var params = {
    opType: opType,
    param1: param1,
    param2: param2,
    param3: param3
  };
  var args = new ChannelApplicationProvidedService_addOperationForChannel_args(params);
  try {
    this.output.writeMessageBegin('addOperationForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_addOperationForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_addOperationForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_addOperationForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ChannelApplicationProvidedServiceClient.prototype.displayBuddySubscriberCount = function(callback) {
  this.send_displayBuddySubscriberCount(callback); 
  if (!callback) {
    return this.recv_displayBuddySubscriberCount();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_displayBuddySubscriberCount = function(callback) {
  var args = new ChannelApplicationProvidedService_displayBuddySubscriberCount_args();
  try {
    this.output.writeMessageBegin('displayBuddySubscriberCount', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_displayBuddySubscriberCount();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_displayBuddySubscriberCount = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_displayBuddySubscriberCount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'displayBuddySubscriberCount failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.findContactByUseridWithoutAbuseBlockForChannel = function(userid, callback) {
  this.send_findContactByUseridWithoutAbuseBlockForChannel(userid, callback); 
  if (!callback) {
    return this.recv_findContactByUseridWithoutAbuseBlockForChannel();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_findContactByUseridWithoutAbuseBlockForChannel = function(userid, callback) {
  var params = {
    userid: userid
  };
  var args = new ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args(params);
  try {
    this.output.writeMessageBegin('findContactByUseridWithoutAbuseBlockForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_findContactByUseridWithoutAbuseBlockForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_findContactByUseridWithoutAbuseBlockForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findContactByUseridWithoutAbuseBlockForChannel failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getAllContactIdsForChannel = function(callback) {
  this.send_getAllContactIdsForChannel(callback); 
  if (!callback) {
    return this.recv_getAllContactIdsForChannel();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getAllContactIdsForChannel = function(callback) {
  var args = new ChannelApplicationProvidedService_getAllContactIdsForChannel_args();
  try {
    this.output.writeMessageBegin('getAllContactIdsForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getAllContactIdsForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getAllContactIdsForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getAllContactIdsForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllContactIdsForChannel failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getCompactContacts = function(lastModifiedTimestamp, callback) {
  this.send_getCompactContacts(lastModifiedTimestamp, callback); 
  if (!callback) {
    return this.recv_getCompactContacts();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getCompactContacts = function(lastModifiedTimestamp, callback) {
  var params = {
    lastModifiedTimestamp: lastModifiedTimestamp
  };
  var args = new ChannelApplicationProvidedService_getCompactContacts_args(params);
  try {
    this.output.writeMessageBegin('getCompactContacts', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getCompactContacts();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getCompactContacts = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getCompactContacts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCompactContacts failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getContactsForChannel = function(ids, callback) {
  this.send_getContactsForChannel(ids, callback); 
  if (!callback) {
    return this.recv_getContactsForChannel();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getContactsForChannel = function(ids, callback) {
  var params = {
    ids: ids
  };
  var args = new ChannelApplicationProvidedService_getContactsForChannel_args(params);
  try {
    this.output.writeMessageBegin('getContactsForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getContactsForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getContactsForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getContactsForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getContactsForChannel failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getDisplayName = function(mid, callback) {
  this.send_getDisplayName(mid, callback); 
  if (!callback) {
    return this.recv_getDisplayName();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getDisplayName = function(mid, callback) {
  var params = {
    mid: mid
  };
  var args = new ChannelApplicationProvidedService_getDisplayName_args(params);
  try {
    this.output.writeMessageBegin('getDisplayName', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getDisplayName();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getDisplayName = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getDisplayName_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDisplayName failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getFavoriteMidsForChannel = function(callback) {
  this.send_getFavoriteMidsForChannel(callback); 
  if (!callback) {
    return this.recv_getFavoriteMidsForChannel();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getFavoriteMidsForChannel = function(callback) {
  var args = new ChannelApplicationProvidedService_getFavoriteMidsForChannel_args();
  try {
    this.output.writeMessageBegin('getFavoriteMidsForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getFavoriteMidsForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getFavoriteMidsForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getFavoriteMidsForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFavoriteMidsForChannel failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getFriendMids = function(callback) {
  this.send_getFriendMids(callback); 
  if (!callback) {
    return this.recv_getFriendMids();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getFriendMids = function(callback) {
  var args = new ChannelApplicationProvidedService_getFriendMids_args();
  try {
    this.output.writeMessageBegin('getFriendMids', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getFriendMids();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getFriendMids = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getFriendMids_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFriendMids failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getGroupMemberMids = function(groupId, callback) {
  this.send_getGroupMemberMids(groupId, callback); 
  if (!callback) {
    return this.recv_getGroupMemberMids();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getGroupMemberMids = function(groupId, callback) {
  var params = {
    groupId: groupId
  };
  var args = new ChannelApplicationProvidedService_getGroupMemberMids_args(params);
  try {
    this.output.writeMessageBegin('getGroupMemberMids', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getGroupMemberMids();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getGroupMemberMids = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getGroupMemberMids_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getGroupMemberMids failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getGroupsForChannel = function(groupIds, callback) {
  this.send_getGroupsForChannel(groupIds, callback); 
  if (!callback) {
    return this.recv_getGroupsForChannel();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getGroupsForChannel = function(groupIds, callback) {
  var params = {
    groupIds: groupIds
  };
  var args = new ChannelApplicationProvidedService_getGroupsForChannel_args(params);
  try {
    this.output.writeMessageBegin('getGroupsForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getGroupsForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getGroupsForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getGroupsForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getGroupsForChannel failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getIdentityCredential = function(callback) {
  this.send_getIdentityCredential(callback); 
  if (!callback) {
    return this.recv_getIdentityCredential();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getIdentityCredential = function(callback) {
  var args = new ChannelApplicationProvidedService_getIdentityCredential_args();
  try {
    this.output.writeMessageBegin('getIdentityCredential', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getIdentityCredential();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getIdentityCredential = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getIdentityCredential_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getIdentityCredential failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getJoinedGroupIdsForChannel = function(callback) {
  this.send_getJoinedGroupIdsForChannel(callback); 
  if (!callback) {
    return this.recv_getJoinedGroupIdsForChannel();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getJoinedGroupIdsForChannel = function(callback) {
  var args = new ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_args();
  try {
    this.output.writeMessageBegin('getJoinedGroupIdsForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getJoinedGroupIdsForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getJoinedGroupIdsForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getJoinedGroupIdsForChannel failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getMetaProfile = function(callback) {
  this.send_getMetaProfile(callback); 
  if (!callback) {
    return this.recv_getMetaProfile();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getMetaProfile = function(callback) {
  var args = new ChannelApplicationProvidedService_getMetaProfile_args();
  try {
    this.output.writeMessageBegin('getMetaProfile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getMetaProfile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getMetaProfile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getMetaProfile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMetaProfile failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getMid = function(callback) {
  this.send_getMid(callback); 
  if (!callback) {
    return this.recv_getMid();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getMid = function(callback) {
  var args = new ChannelApplicationProvidedService_getMid_args();
  try {
    this.output.writeMessageBegin('getMid', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getMid();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getMid = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getMid_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMid failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getPrimaryClientForChannel = function(callback) {
  this.send_getPrimaryClientForChannel(callback); 
  if (!callback) {
    return this.recv_getPrimaryClientForChannel();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getPrimaryClientForChannel = function(callback) {
  var args = new ChannelApplicationProvidedService_getPrimaryClientForChannel_args();
  try {
    this.output.writeMessageBegin('getPrimaryClientForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPrimaryClientForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getPrimaryClientForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getPrimaryClientForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPrimaryClientForChannel failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getProfileForChannel = function(callback) {
  this.send_getProfileForChannel(callback); 
  if (!callback) {
    return this.recv_getProfileForChannel();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getProfileForChannel = function(callback) {
  var args = new ChannelApplicationProvidedService_getProfileForChannel_args();
  try {
    this.output.writeMessageBegin('getProfileForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getProfileForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getProfileForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getProfileForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getProfileForChannel failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getSimpleChannelContacts = function(ids, callback) {
  this.send_getSimpleChannelContacts(ids, callback); 
  if (!callback) {
    return this.recv_getSimpleChannelContacts();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getSimpleChannelContacts = function(ids, callback) {
  var params = {
    ids: ids
  };
  var args = new ChannelApplicationProvidedService_getSimpleChannelContacts_args(params);
  try {
    this.output.writeMessageBegin('getSimpleChannelContacts', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getSimpleChannelContacts();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getSimpleChannelContacts = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getSimpleChannelContacts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSimpleChannelContacts failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getUserCountryForBilling = function(country, remoteIp, callback) {
  this.send_getUserCountryForBilling(country, remoteIp, callback); 
  if (!callback) {
    return this.recv_getUserCountryForBilling();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getUserCountryForBilling = function(country, remoteIp, callback) {
  var params = {
    country: country,
    remoteIp: remoteIp
  };
  var args = new ChannelApplicationProvidedService_getUserCountryForBilling_args(params);
  try {
    this.output.writeMessageBegin('getUserCountryForBilling', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getUserCountryForBilling();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getUserCountryForBilling = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getUserCountryForBilling_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserCountryForBilling failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getUserCreateTime = function(callback) {
  this.send_getUserCreateTime(callback); 
  if (!callback) {
    return this.recv_getUserCreateTime();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getUserCreateTime = function(callback) {
  var args = new ChannelApplicationProvidedService_getUserCreateTime_args();
  try {
    this.output.writeMessageBegin('getUserCreateTime', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getUserCreateTime();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getUserCreateTime = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getUserCreateTime_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserCreateTime failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getUserIdentities = function(callback) {
  this.send_getUserIdentities(callback); 
  if (!callback) {
    return this.recv_getUserIdentities();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getUserIdentities = function(callback) {
  var args = new ChannelApplicationProvidedService_getUserIdentities_args();
  try {
    this.output.writeMessageBegin('getUserIdentities', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getUserIdentities();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getUserIdentities = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getUserIdentities_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserIdentities failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getUserLanguage = function(callback) {
  this.send_getUserLanguage(callback); 
  if (!callback) {
    return this.recv_getUserLanguage();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getUserLanguage = function(callback) {
  var args = new ChannelApplicationProvidedService_getUserLanguage_args();
  try {
    this.output.writeMessageBegin('getUserLanguage', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getUserLanguage();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getUserLanguage = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getUserLanguage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserLanguage failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.getUserMidsWhoAddedMe = function(callback) {
  this.send_getUserMidsWhoAddedMe(callback); 
  if (!callback) {
    return this.recv_getUserMidsWhoAddedMe();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_getUserMidsWhoAddedMe = function(callback) {
  var args = new ChannelApplicationProvidedService_getUserMidsWhoAddedMe_args();
  try {
    this.output.writeMessageBegin('getUserMidsWhoAddedMe', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getUserMidsWhoAddedMe();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_getUserMidsWhoAddedMe = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserMidsWhoAddedMe failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.isGroupMember = function(groupId, callback) {
  this.send_isGroupMember(groupId, callback); 
  if (!callback) {
    return this.recv_isGroupMember();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_isGroupMember = function(groupId, callback) {
  var params = {
    groupId: groupId
  };
  var args = new ChannelApplicationProvidedService_isGroupMember_args(params);
  try {
    this.output.writeMessageBegin('isGroupMember', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_isGroupMember();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_isGroupMember = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_isGroupMember_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isGroupMember failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.isInContact = function(mid, callback) {
  this.send_isInContact(mid, callback); 
  if (!callback) {
    return this.recv_isInContact();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_isInContact = function(mid, callback) {
  var params = {
    mid: mid
  };
  var args = new ChannelApplicationProvidedService_isInContact_args(params);
  try {
    this.output.writeMessageBegin('isInContact', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_isInContact();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_isInContact = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_isInContact_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isInContact failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.registerChannelCP = function(cpId, registerPassword, callback) {
  this.send_registerChannelCP(cpId, registerPassword, callback); 
  if (!callback) {
    return this.recv_registerChannelCP();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_registerChannelCP = function(cpId, registerPassword, callback) {
  var params = {
    cpId: cpId,
    registerPassword: registerPassword
  };
  var args = new ChannelApplicationProvidedService_registerChannelCP_args(params);
  try {
    this.output.writeMessageBegin('registerChannelCP', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_registerChannelCP();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_registerChannelCP = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_registerChannelCP_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerChannelCP failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.removeNotificationStatus = function(notificationStatus, callback) {
  this.send_removeNotificationStatus(notificationStatus, callback); 
  if (!callback) {
  this.recv_removeNotificationStatus();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_removeNotificationStatus = function(notificationStatus, callback) {
  var params = {
    notificationStatus: notificationStatus
  };
  var args = new ChannelApplicationProvidedService_removeNotificationStatus_args(params);
  try {
    this.output.writeMessageBegin('removeNotificationStatus', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_removeNotificationStatus();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_removeNotificationStatus = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_removeNotificationStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ChannelApplicationProvidedServiceClient.prototype.sendMessageForChannel = function(message, callback) {
  this.send_sendMessageForChannel(message, callback); 
  if (!callback) {
    return this.recv_sendMessageForChannel();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_sendMessageForChannel = function(message, callback) {
  var params = {
    message: message
  };
  var args = new ChannelApplicationProvidedService_sendMessageForChannel_args(params);
  try {
    this.output.writeMessageBegin('sendMessageForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_sendMessageForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_sendMessageForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_sendMessageForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendMessageForChannel failed: unknown result';
};

ChannelApplicationProvidedServiceClient.prototype.sendPinCodeOperation = function(verifier, callback) {
  this.send_sendPinCodeOperation(verifier, callback); 
  if (!callback) {
  this.recv_sendPinCodeOperation();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_sendPinCodeOperation = function(verifier, callback) {
  var params = {
    verifier: verifier
  };
  var args = new ChannelApplicationProvidedService_sendPinCodeOperation_args(params);
  try {
    this.output.writeMessageBegin('sendPinCodeOperation', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_sendPinCodeOperation();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_sendPinCodeOperation = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_sendPinCodeOperation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ChannelApplicationProvidedServiceClient.prototype.updateProfileAttributeForChannel = function(profileAttribute, value, callback) {
  this.send_updateProfileAttributeForChannel(profileAttribute, value, callback); 
  if (!callback) {
  this.recv_updateProfileAttributeForChannel();
  }
};

ChannelApplicationProvidedServiceClient.prototype.send_updateProfileAttributeForChannel = function(profileAttribute, value, callback) {
  var params = {
    profileAttribute: profileAttribute,
    value: value
  };
  var args = new ChannelApplicationProvidedService_updateProfileAttributeForChannel_args(params);
  try {
    this.output.writeMessageBegin('updateProfileAttributeForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_updateProfileAttributeForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ChannelApplicationProvidedServiceClient.prototype.recv_updateProfileAttributeForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelApplicationProvidedService_updateProfileAttributeForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
