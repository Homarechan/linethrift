//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


ApplicationType = {
  'IOS' : 16,
  'IOS_RC' : 17,
  'IOS_BETA' : 18,
  'IOS_ALPHA' : 19,
  'ANDROID' : 32,
  'ANDROID_RC' : 33,
  'ANDROID_BETA' : 34,
  'ANDROID_ALPHA' : 35,
  'WAP' : 48,
  'WAP_RC' : 49,
  'WAP_BETA' : 50,
  'WAP_ALPHA' : 51,
  'BOT' : 64,
  'BOT_RC' : 65,
  'BOT_BETA' : 66,
  'BOT_ALPHA' : 67,
  'WEB' : 80,
  'WEB_RC' : 81,
  'WEB_BETA' : 82,
  'WEB_ALPHA' : 83,
  'DESKTOPWIN' : 96,
  'DESKTOPWIN_RC' : 97,
  'DESKTOPWIN_BETA' : 98,
  'DESKTOPWIN_ALPHA' : 99,
  'DESKTOPMAC' : 112,
  'DESKTOPMAC_RC' : 113,
  'DESKTOPMAC_BETA' : 114,
  'DESKTOPMAC_ALPHA' : 115,
  'CHANNELGW' : 128,
  'CHANNELGW_RC' : 129,
  'CHANNELGW_BETA' : 130,
  'CHANNELGW_ALPHA' : 131,
  'CHANNELCP' : 144,
  'CHANNELCP_RC' : 145,
  'CHANNELCP_BETA' : 146,
  'CHANNELCP_ALPHA' : 147,
  'WINPHONE' : 160,
  'WINPHONE_RC' : 161,
  'WINPHONE_BETA' : 162,
  'WINPHONE_ALPHA' : 163,
  'BLACKBERRY' : 176,
  'BLACKBERRY_RC' : 177,
  'BLACKBERRY_BETA' : 178,
  'BLACKBERRY_ALPHA' : 179,
  'WINMETRO' : 192,
  'WINMETRO_RC' : 193,
  'WINMETRO_BETA' : 194,
  'WINMETRO_ALPHA' : 195,
  'S40' : 208,
  'S40_RC' : 209,
  'S40_BETA' : 210,
  'S40_ALPHA' : 211,
  'CHRONO' : 224,
  'CHRONO_RC' : 225,
  'CHRONO_BETA' : 226,
  'CHRONO_ALPHA' : 227,
  'TIZEN' : 256,
  'TIZEN_RC' : 257,
  'TIZEN_BETA' : 258,
  'TIZEN_ALPHA' : 259,
  'VIRTUAL' : 272,
  'FIREFOXOS' : 288,
  'FIREFOXOS_RC' : 289,
  'FIREFOXOS_BETA' : 290,
  'FIREFOXOS_ALPHA' : 291,
  'IOSIPAD' : 304,
  'IOSIPAD_RC' : 305,
  'IOSIPAD_BETA' : 306,
  'IOSIPAD_ALPHA' : 307,
  'BIZIOS' : 320,
  'BIZIOS_RC' : 321,
  'BIZIOS_BETA' : 322,
  'BIZIOS_ALPHA' : 323,
  'BIZANDROID' : 336,
  'BIZANDROID_RC' : 337,
  'BIZANDROID_BETA' : 338,
  'BIZANDROID_ALPHA' : 339,
  'BIZBOT' : 352,
  'BIZBOT_RC' : 353,
  'BIZBOT_BETA' : 354,
  'BIZBOT_ALPHA' : 355,
  'CHROMEOS' : 368,
  'CHROMEOS_RC' : 369,
  'CHROMEOS_BETA' : 370,
  'CHROMEOS_ALPHA' : 371,
  'ANDROIDLITE' : 384,
  'ANDROIDLITE_RC' : 385,
  'ANDROIDLITE_BETA' : 386,
  'ANDROIDLITE_ALPHA' : 387,
  'WIN10' : 400,
  'WIN10_RC' : 401,
  'WIN10_BETA' : 402,
  'WIN10_ALPHA' : 403,
  'BIZWEB' : 416,
  'BIZWEB_RC' : 417,
  'BIZWEB_BETA' : 418,
  'BIZWEB_ALPHA' : 419,
  'DUMMYPRIMARY' : 432,
  'DUMMYPRIMARY_RC' : 433,
  'DUMMYPRIMARY_BETA' : 434,
  'DUMMYPRIMARY_ALPHA' : 435,
  'SQUARE' : 448,
  'SQUARE_RC' : 449,
  'SQUARE_BETA' : 450,
  'SQUARE_ALPHA' : 451,
  'INTERNAL' : 464,
  'INTERNAL_RC' : 465,
  'INTERNAL_BETA' : 466,
  'INTERNAL_ALPHA' : 467,
  'CLOVAFRIENDS' : 480,
  'CLOVAFRIENDS_RC' : 481,
  'CLOVAFRIENDS_BETA' : 482,
  'CLOVAFRIENDS_ALPHA' : 483
};
ExtendedProfileAttribute = {
};
PrivacyLevelType = {
  'PUBLIC' : 0,
  'PRIVATE' : 1
};
PaidCallerIdStatus = {
  'NOT_SPECIFIED' : 0,
  'VALID' : 1,
  'VERIFICATION_REQUIRED' : 2,
  'NOT_PERMITTED' : 3,
  'LIMIT_EXCEEDED' : 4,
  'LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED' : 5
};
PaidCallProductType = {
  'COIN' : 0,
  'CREDIT' : 1,
  'MONTHLY' : 2
};
PaidCallType = {
  'OUT' : 0,
  'IN' : 1,
  'TOLLFREE' : 2,
  'RECORD' : 3,
  'AD' : 4,
  'CS' : 5
};
BotType = {
  'RESERVED' : 0,
  'OFFICIAL' : 1,
  'LINE_AT_0' : 2,
  'LINE_AT' : 3
};
BuddyOnAirLabel = {
  'ON_AIR' : 0,
  'LIVE' : 1
};
BuddyBannerLinkType = {
  'BUDDY_BANNER_LINK_HIDDEN' : 0,
  'BUDDY_BANNER_LINK_MID' : 1,
  'BUDDY_BANNER_LINK_URL' : 2
};
BuddyOnAirType = {
  'NORMAL' : 0,
  'LIVE' : 1,
  'VOIP' : 2
};
Diff = {
  'ADDED' : 0,
  'UPDATED' : 1,
  'REMOVED' : 2
};
ReportType = {
  'ADVERTISING' : 1,
  'GENDER_HARASSMENT' : 2,
  'HARASSMENT' : 3,
  'OTHER' : 4
};
SyncTriggerReason = {
  'OTHER' : 0,
  'REVISION_GAP_TOO_LARGE' : 1,
  'OPERATION_EXPIRED' : 2
};
ReportCategory = {
  'PUSH_NORMAL_PLAIN' : 0,
  'PUSH_NORMAL_E2EE' : 1,
  'PUSH_VOIP_PLAIN' : 2,
  'PUSH_VOIP_E2EE' : 3
};
BuddyResultState = {
  'ACCEPTED' : 1,
  'SUCCEEDED' : 2,
  'FAILED' : 3,
  'CANCELLED' : 4,
  'NOTIFY_FAILED' : 5,
  'STORING' : 11,
  'UPLOADING' : 21,
  'NOTIFYING' : 31,
  'REMOVING_SUBSCRIPTION' : 41,
  'UNREGISTERING_ACCOUNT' : 42,
  'NOTIFYING_LEAVE_CHAT' : 43
};
BuddySearchRequestSource = {
  'NA' : 0,
  'FRIEND_VIEW' : 1,
  'OFFICIAL_ACCOUNT_VIEW' : 2
};
CarrierCode = {
  'NOT_SPECIFIED' : 0,
  'JP_DOCOMO' : 1,
  'JP_AU' : 2,
  'JP_SOFTBANK' : 3,
  'JP_DOCOMO_LINE' : 4,
  'KR_SKT' : 17,
  'KR_KT' : 18,
  'KR_LGT' : 19
};
ChannelConfiguration = {
  'MESSAGE' : 0,
  'MESSAGE_NOTIFICATION' : 1,
  'NOTIFICATION_CENTER' : 2
};
ChannelPermission = {
  'PROFILE' : 0,
  'FRIENDS' : 1,
  'GROUP' : 2
};
ChannelFeatureLicense = {
  'BLE_LCS_API_USABLE' : 26,
  'PROHIBIT_MINIMIZE_CHANNEL_BROWSER' : 27,
  'ALLOW_IOS_WEBKIT' : 28
};
ChannelErrorCode = {
  'ILLEGAL_ARGUMENT' : 0,
  'INTERNAL_ERROR' : 1,
  'CONNECTION_ERROR' : 2,
  'AUTHENTICATIONI_FAILED' : 3,
  'NEED_PERMISSION_APPROVAL' : 4,
  'COIN_NOT_USABLE' : 5,
  'WEBVIEW_NOT_ALLOWED' : 6
};
ChannelSyncType = {
  'SYNC' : 0,
  'REMOVE' : 1,
  'REMOVE_ALL' : 2
};
LoginType = {
  'ID_CREDENTIAL' : 0,
  'QRCODE' : 1,
  'ID_CREDENTIAL_WITH_E2EE' : 2
};
ContactAttribute = {
  'CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL' : 1,
  'CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL' : 2,
  'CONTACT_ATTRIBUTE_CAPABLE_MY_HOME' : 16,
  'CONTACT_ATTRIBUTE_CAPABLE_BUDDY' : 32
};
ContactCategory = {
  'NORMAL' : 0,
  'RECOMMEND' : 1
};
ContactRelation = {
  'ONEWAY' : 0,
  'BOTH' : 1,
  'NOT_REGISTERED' : 2
};
AsymmetricKeyAlgorithm = {
  'ASYMMETRIC_KEY_ALGORITHM_RSA' : 1,
  'ASYMMETRIC_KEY_ALGORITHM_ECDH' : 2
};
ContactSetting = {
  'CONTACT_SETTING_NOTIFICATION_DISABLE' : 1,
  'CONTACT_SETTING_DISPLAY_NAME_OVERRIDE' : 2,
  'CONTACT_SETTING_CONTACT_HIDE' : 4,
  'CONTACT_SETTING_FAVORITE' : 8,
  'CONTACT_SETTING_DELETE' : 16
};
ContactStatus = {
  'UNSPECIFIED' : 0,
  'FRIEND' : 1,
  'FRIEND_BLOCKED' : 2,
  'RECOMMEND' : 3,
  'RECOMMEND_BLOCKED' : 4,
  'DELETED' : 5,
  'DELETED_BLOCKED' : 6
};
ContactType = {
  'MID' : 0,
  'PHONE' : 1,
  'EMAIL' : 2,
  'USERID' : 3,
  'PROXIMITY' : 4,
  'GROUP' : 5,
  'USER' : 6,
  'QRCODE' : 7,
  'PROMOTION_BOT' : 8,
  'CONTACT_MESSAGE' : 9,
  'FRIEND_REQUEST' : 10,
  'REPAIR' : 128,
  'FACEBOOK' : 2305,
  'SINA' : 2306,
  'RENREN' : 2307,
  'FEIXIN' : 2308,
  'BBM' : 2309,
  'BEACON' : 11
};
GroupPreferenceAttribute = {
  'INVITATION_TICKET' : 1,
  'FAVORITE_TIMESTAMP' : 2
};
ContentType = {
  'NONE' : 0,
  'IMAGE' : 1,
  'VIDEO' : 2,
  'AUDIO' : 3,
  'HTML' : 4,
  'PDF' : 5,
  'CALL' : 6,
  'STICKER' : 7,
  'PRESENCE' : 8,
  'GIFT' : 9,
  'GROUPBOARD' : 10,
  'APPLINK' : 11,
  'LINK' : 12,
  'CONTACT' : 13,
  'FILE' : 14,
  'LOCATION' : 15,
  'POSTNOTIFICATION' : 16,
  'RICH' : 17,
  'CHATEVENT' : 18,
  'MUSIC' : 19,
  'PAYMENT' : 20,
  'EXTIMAGE' : 21
};
MessageRelationType = {
  'FORWARD' : 0,
  'AUTO_REPLY' : 1,
  'SUBORDINATE' : 2
};
CustomMode = {
  'PROMOTION_FRIENDS_INVITE' : 1,
  'CAPABILITY_SERVER_SIDE_SMS' : 2,
  'LINE_CLIENT_ANALYTICS_CONFIGURATION' : 3
};
RoomAttribute = {
  'ALL' : 255,
  'NOTIFICATION_SETTING' : 1
};
UserStatus = {
  'NORMAL' : 0,
  'UNBOUND' : 1,
  'UNREGISTERED' : 2
};
EmailConfirmationStatus = {
  'NOT_SPECIFIED' : 0,
  'NOT_YET' : 1,
  'DONE' : 3,
  'NEED_ENFORCED_INPUT' : 4
};
AccountMigrationPincodeType = {
  'NOT_APPLICABLE' : 0,
  'NOT_SET' : 1,
  'SET' : 2,
  'NEED_ENFORCED_INPUT' : 3
};
AccountMigrationCheckType = {
  'SKIP' : 0,
  'PINCODE' : 1,
  'SECURITY_CENTER' : 2
};
SecurityCenterSettingsType = {
  'NOT_APPLICABLE' : 0,
  'NOT_SET' : 1,
  'SET' : 2,
  'NEED_ENFORCED_INPUT' : 3
};
EmailConfirmationType = {
  'SERVER_SIDE_EMAIL' : 0,
  'CLIENT_SIDE_EMAIL' : 1
};
SquareChatAnnouncementType = {
  'TEXT_MESSAGE' : 0
};
SquareChatAttribute = {
  'NAME' : 2,
  'SQUARE_CHAT_IMAGE' : 3,
  'STATE' : 4
};
SquareMemberAttribute = {
  'DISPLAY_NAME' : 1,
  'PROFILE_IMAGE' : 2,
  'ABLE_TO_RECEIVE_MESSAGE' : 3,
  'MEMBERSHIP_STATE' : 5,
  'ROLE' : 6,
  'PREFERENCE' : 7
};
SquareMemberRelationAttribute = {
  'BLOCKED' : 1
};
SquarePreferenceAttribute = {
  'FAVORITE' : 1,
  'NOTI_FOR_NEW_JOIN_REQUEST' : 2
};
SquareState = {
  'ALIVE' : 0,
  'DELETED' : 1,
  'SUSPENDED' : 2
};
CommitMessageResultCode = {
  'DELIVERED' : 0,
  'DELIVERY_SKIPPED' : 1,
  'DELIVERY_RESTRICTED' : 2
};
ErrorCode = {
  'ILLEGAL_ARGUMENT' : 0,
  'AUTHENTICATION_FAILED' : 1,
  'DB_FAILED' : 2,
  'INVALID_STATE' : 3,
  'EXCESSIVE_ACCESS' : 4,
  'NOT_FOUND' : 5,
  'INVALID_MID' : 9,
  'NOT_A_MEMBER' : 10,
  'INVALID_LENGTH' : 6,
  'NOT_AVAILABLE_USER' : 7,
  'NOT_AUTHORIZED_DEVICE' : 8,
  'NOT_AUTHORIZED_SESSION' : 14,
  'INCOMPATIBLE_APP_VERSION' : 11,
  'NOT_READY' : 12,
  'NOT_AVAILABLE_SESSION' : 13,
  'SYSTEM_ERROR' : 15,
  'NO_AVAILABLE_VERIFICATION_METHOD' : 16,
  'NOT_AUTHENTICATED' : 17,
  'INVALID_IDENTITY_CREDENTIAL' : 18,
  'NOT_AVAILABLE_IDENTITY_IDENTIFIER' : 19,
  'INTERNAL_ERROR' : 20,
  'NO_SUCH_IDENTITY_IDENFIER' : 21,
  'DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY' : 22,
  'ILLEGAL_IDENTITY_CREDENTIAL' : 23,
  'UNKNOWN_CHANNEL' : 24,
  'NO_SUCH_MESSAGE_BOX' : 25,
  'NOT_AVAILABLE_MESSAGE_BOX' : 26,
  'CHANNEL_DOES_NOT_MATCH' : 27,
  'NOT_YOUR_MESSAGE' : 28,
  'MESSAGE_DEFINED_ERROR' : 29,
  'USER_CANNOT_ACCEPT_PRESENTS' : 30,
  'USER_NOT_STICKER_OWNER' : 32,
  'MAINTENANCE_ERROR' : 33,
  'ACCOUNT_NOT_MATCHED' : 34,
  'ABUSE_BLOCK' : 35,
  'NOT_FRIEND' : 36,
  'NOT_ALLOWED_CALL' : 37,
  'BLOCK_FRIEND' : 38,
  'INCOMPATIBLE_VOIP_VERSION' : 39,
  'INVALID_SNS_ACCESS_TOKEN' : 40,
  'EXTERNAL_SERVICE_NOT_AVAILABLE' : 41,
  'NOT_ALLOWED_ADD_CONTACT' : 42,
  'NOT_CERTIFICATED' : 43,
  'NOT_ALLOWED_SECONDARY_DEVICE' : 44,
  'INVALID_PIN_CODE' : 45,
  'NOT_FOUND_IDENTITY_CREDENTIAL' : 46,
  'EXCEED_FILE_MAX_SIZE' : 47,
  'EXCEED_DAILY_QUOTA' : 48,
  'NOT_SUPPORT_SEND_FILE' : 49,
  'MUST_UPGRADE' : 50,
  'NOT_AVAILABLE_PIN_CODE_SESSION' : 51,
  'EXPIRED_REVISION' : 52,
  'NOT_YET_PHONE_NUMBER' : 54,
  'BAD_CALL_NUMBER' : 55,
  'UNAVAILABLE_CALL_NUMBER' : 56,
  'NOT_SUPPORT_CALL_SERVICE' : 57,
  'CONGESTION_CONTROL' : 58,
  'NO_BALANCE' : 59,
  'NOT_PERMITTED_CALLER_ID' : 60,
  'NO_CALLER_ID_LIMIT_EXCEEDED' : 61,
  'CALLER_ID_VERIFICATION_REQUIRED' : 62,
  'NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED' : 63,
  'MESSAGE_NOT_FOUND' : 64,
  'INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT' : 65,
  'ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED' : 66,
  'ACCOUNT_MIGRATION_PINCODE_BLOCKED' : 67,
  'INVALID_PASSWORD_FORMAT' : 69,
  'FEATURE_RESTRICTED' : 70,
  'MESSAGE_NOT_DESTRUCTIBLE' : 71,
  'PAID_CALL_REDEEM_FAILED' : 72,
  'PREVENTED_JOIN_BY_TICKET' : 73,
  'SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT' : 75,
  'SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY' : 76,
  'SECURITY_CENTER_NOT_VERIFIED' : 77,
  'SECURITY_CENTER_BLOCKED_BY_SETTING' : 78,
  'SECURITY_CENTER_BLOCKED' : 79,
  'TALK_PROXY_EXCEPTION' : 80,
  'E2EE_INVALID_PROTOCOL' : 81,
  'E2EE_RETRY_ENCRYPT' : 82,
  'E2EE_UPDATE_SENDER_KEY' : 83,
  'E2EE_UPDATE_RECEIVER_KEY' : 84,
  'E2EE_INVALID_ARGUMENT' : 85,
  'E2EE_INVALID_VERSION' : 86,
  'E2EE_SENDER_DISABLED' : 87,
  'E2EE_RECEIVER_DISABLED' : 88,
  'E2EE_SENDER_NOT_ALLOWED' : 89,
  'E2EE_RECEIVER_NOT_ALLOWED' : 90,
  'E2EE_RESEND_FAIL' : 91,
  'E2EE_RESEND_OK' : 92,
  'HITOKOTO_BACKUP_NO_AVAILABLE_DATA' : 93,
  'E2EE_UPDATE_PRIMARY_DEVICE' : 94,
  'SUCCESS' : 95,
  'CANCEL' : 96,
  'E2EE_PRIMARY_NOT_SUPPORT' : 97,
  'E2EE_RETRY_PLAIN' : 98,
  'E2EE_RECREATE_GROUP_KEY' : 99,
  'E2EE_GROUP_TOO_MANY_MEMBERS' : 100,
  'SERVER_BUSY' : 101,
  'NOT_ALLOWED_ADD_FOLLOW' : 102,
  'INCOMING_FRIEND_REQUEST_LIMIT' : 103,
  'OUTGOING_FRIEND_REQUEST_LIMIT' : 104,
  'OUTGOING_FRIEND_REQUEST_QUOTA' : 105,
  'DUPLICATED' : 106,
  'BANNED' : 107
};
FeatureType = {
  'OBS_VIDEO' : 1,
  'OBS_GENERAL' : 2
};
GroupAttribute = {
  'NAME' : 1,
  'PICTURE_STATUS' : 2,
  'ALL' : 255,
  'PREVENTED_JOIN_BY_TICKET' : 4,
  'NOTIFICATION_SETTING' : 8
};
IdentityProvider = {
  'UNKNOWN' : 0,
  'LINE' : 1,
  'NAVER_KR' : 2,
  'LINE_PHONE' : 3
};
LoginResultType = {
  'SUCCESS' : 1,
  'REQUIRE_QRCODE' : 2,
  'REQUIRE_DEVICE_CONFIRM' : 3,
  'REQUIRE_SMS_CONFIRM' : 4
};
MessageOperationType = {
  'SEND_MESSAGE' : 1,
  'RECEIVE_MESSAGE' : 2,
  'READ_MESSAGE' : 3,
  'NOTIFIED_READ_MESSAGE' : 4,
  'NOTIFIED_JOIN_CHAT' : 5,
  'FAILED_SEND_MESSAGE' : 6,
  'SEND_CONTENT' : 7,
  'SEND_CONTENT_RECEIPT' : 8,
  'SEND_CHAT_REMOVED' : 9,
  'REMOVE_ALL_MESSAGES' : 10
};
MIDType = {
  'USER' : 0,
  'ROOM' : 1,
  'GROUP' : 2,
  'SQUARE' : 3,
  'SQUARE_CHAT' : 4,
  'SQUARE_MEMBER' : 5,
  'BOT' : 6
};
ServiceCode = {
  'UNKNOWN' : 0,
  'TALK' : 1,
  'SQUARE' : 2
};
FriendRequestDirection = {
  'INCOMING' : 1,
  'OUTGOING' : 2
};
FriendRequestMethod = {
  'TIMELINE' : 1,
  'NEARBY' : 2,
  'SQUARE' : 3
};
FriendRequestStatus = {
  'NONE' : 0,
  'AVAILABLE' : 1,
  'ALREADY_REQUESTED' : 2,
  'UNAVAILABLE' : 3
};
ModificationType = {
  'ADD' : 0,
  'REMOVE' : 1,
  'MODIFY' : 2
};
NotificationItemFetchMode = {
  'ALL' : 0,
  'APPEND' : 1
};
NotificationQueueType = {
  'GLOBAL' : 1,
  'MESSAGE' : 2,
  'PRIMARY' : 3
};
GroupCallMediaType = {
  'AUDIO' : 1,
  'VIDEO' : 2
};
PersonalInfo = {
  'EMAIL' : 0,
  'PHONE' : 1,
  'BIRTHDAY' : 2,
  'RAW_BIRTHDAY' : 3
};
NotificationStatus = {
  'NOTIFICATION_ITEM_EXIST' : 1,
  'TIMELINE_ITEM_EXIST' : 2,
  'NOTE_GROUP_NEW_ITEM_EXIST' : 4,
  'TIMELINE_BUDDYGROUP_CHANGED' : 8,
  'NOTE_ONE_TO_ONE_NEW_ITEM_EXIST' : 16,
  'ALBUM_ITEM_EXIST' : 32,
  'TIMELINE_ITEM_DELETED' : 64,
  'OTOGROUP_ITEM_EXIST' : 128,
  'GROUPHOME_NEW_ITEM_EXIST' : 256,
  'GROUPHOME_HIDDEN_ITEM_CHANGED' : 512,
  'NOTIFICATION_ITEM_CHANGED' : 1024,
  'BEAD_ITEM_HIDE' : 2048,
  'BEAD_ITEM_SHOW' : 4096
};
NotificationType = {
  'APPLE_APNS' : 1,
  'GOOGLE_C2DM' : 2,
  'NHN_NNI' : 3,
  'SKT_AOM' : 4,
  'MS_MPNS' : 5,
  'RIM_BIS' : 6,
  'GOOGLE_GCM' : 7,
  'NOKIA_NNAPI' : 8,
  'TIZEN' : 9,
  'LINE_BOT' : 17,
  'LINE_WAP' : 18,
  'APPLE_APNS_VOIP' : 19,
  'MS_WNS' : 20,
  'GOOGLE_FCM' : 21
};
OpStatus = {
  'NORMAL' : 0,
  'ALERT_DISABLED' : 1,
  'ALWAYS' : 2
};
OpType = {
  'END_OF_OPERATION' : 0,
  'UPDATE_PROFILE' : 1,
  'UPDATE_SETTINGS' : 36,
  'NOTIFIED_UPDATE_PROFILE' : 2,
  'REGISTER_USERID' : 3,
  'ADD_CONTACT' : 4,
  'NOTIFIED_ADD_CONTACT' : 5,
  'BLOCK_CONTACT' : 6,
  'UNBLOCK_CONTACT' : 7,
  'NOTIFIED_RECOMMEND_CONTACT' : 8,
  'CREATE_GROUP' : 9,
  'UPDATE_GROUP' : 10,
  'NOTIFIED_UPDATE_GROUP' : 11,
  'INVITE_INTO_GROUP' : 12,
  'NOTIFIED_INVITE_INTO_GROUP' : 13,
  'CANCEL_INVITATION_GROUP' : 31,
  'NOTIFIED_CANCEL_INVITATION_GROUP' : 32,
  'LEAVE_GROUP' : 14,
  'NOTIFIED_LEAVE_GROUP' : 15,
  'ACCEPT_GROUP_INVITATION' : 16,
  'NOTIFIED_ACCEPT_GROUP_INVITATION' : 17,
  'REJECT_GROUP_INVITATION' : 34,
  'NOTIFIED_REJECT_GROUP_INVITATION' : 35,
  'KICKOUT_FROM_GROUP' : 18,
  'NOTIFIED_KICKOUT_FROM_GROUP' : 19,
  'CREATE_ROOM' : 20,
  'INVITE_INTO_ROOM' : 21,
  'NOTIFIED_INVITE_INTO_ROOM' : 22,
  'LEAVE_ROOM' : 23,
  'NOTIFIED_LEAVE_ROOM' : 24,
  'SEND_MESSAGE' : 25,
  'RECEIVE_MESSAGE' : 26,
  'SEND_MESSAGE_RECEIPT' : 27,
  'RECEIVE_MESSAGE_RECEIPT' : 28,
  'SEND_CONTENT_RECEIPT' : 29,
  'RECEIVE_ANNOUNCEMENT' : 30,
  'NOTIFIED_UNREGISTER_USER' : 33,
  'INVITE_VIA_EMAIL' : 38,
  'NOTIFIED_REGISTER_USER' : 37,
  'NOTIFIED_REQUEST_RECOVERY' : 39,
  'SEND_CHAT_CHECKED' : 40,
  'SEND_CHAT_REMOVED' : 41,
  'NOTIFIED_FORCE_SYNC' : 42,
  'SEND_CONTENT' : 43,
  'SEND_MESSAGE_MYHOME' : 44,
  'NOTIFIED_UPDATE_CONTENT_PREVIEW' : 45,
  'REMOVE_ALL_MESSAGES' : 46,
  'NOTIFIED_UPDATE_PURCHASES' : 47,
  'DUMMY' : 48,
  'UPDATE_CONTACT' : 49,
  'NOTIFIED_RECEIVED_CALL' : 50,
  'CANCEL_CALL' : 51,
  'NOTIFIED_REDIRECT' : 52,
  'NOTIFIED_CHANNEL_SYNC' : 53,
  'FAILED_SEND_MESSAGE' : 54,
  'NOTIFIED_READ_MESSAGE' : 55,
  'FAILED_EMAIL_CONFIRMATION' : 56,
  'NOTIFIED_CHAT_CONTENT' : 58,
  'NOTIFIED_PUSH_NOTICENTER_ITEM' : 59,
  'NOTIFIED_JOIN_CHAT' : 60,
  'NOTIFIED_LEAVE_CHAT' : 61,
  'NOTIFIED_TYPING' : 62,
  'FRIEND_REQUEST_ACCEPTED' : 63,
  'DESTROY_MESSAGE' : 64,
  'NOTIFIED_DESTROY_MESSAGE' : 65,
  'UPDATE_PUBLICKEYCHAIN' : 66,
  'NOTIFIED_UPDATE_PUBLICKEYCHAIN' : 67,
  'NOTIFIED_BLOCK_CONTACT' : 68,
  'NOTIFIED_UNBLOCK_CONTACT' : 69,
  'UPDATE_GROUPPREFERENCE' : 70,
  'NOTIFIED_PAYMENT_EVENT' : 71,
  'REGISTER_E2EE_PUBLICKEY' : 72,
  'NOTIFIED_E2EE_KEY_EXCHANGE_REQ' : 73,
  'NOTIFIED_E2EE_KEY_EXCHANGE_RESP' : 74,
  'NOTIFIED_E2EE_MESSAGE_RESEND_REQ' : 75,
  'NOTIFIED_E2EE_MESSAGE_RESEND_RESP' : 76,
  'NOTIFIED_E2EE_KEY_UPDATE' : 77,
  'NOTIFIED_BUDDY_UPDATE_PROFILE' : 78,
  'NOTIFIED_UPDATE_LINEAT_TABS' : 79,
  'UPDATE_ROOM' : 80,
  'NOTIFIED_BEACON_DETECTED' : 81,
  'UPDATE_EXTENDED_PROFILE' : 82,
  'ADD_FOLLOW' : 83,
  'NOTIFIED_ADD_FOLLOW' : 84,
  'DELETE_FOLLOW' : 85,
  'NOTIFIED_DELETE_FOLLOW' : 86,
  'UPDATE_TIMELINE_SETTINGS' : 87,
  'NOTIFIED_FRIEND_REQUEST' : 88,
  'UPDATE_RINGBACK_TONE' : 89,
  'NOTIFIED_POSTBACK' : 90,
  'RECEIVE_READ_WATERMARK' : 91,
  'NOTIFIED_MESSAGE_DELIVERED' : 92,
  'NOTIFIED_UPDATE_CHAT_BAR' : 93,
  'NOTIFIED_CHATAPP_INSTALLED' : 94,
  'NOTIFIED_CHATAPP_UPDATED' : 95,
  'NOTIFIED_CHATAPP_NEW_MARK' : 96,
  'NOTIFIED_CHATAPP_DELETED' : 97,
  'NOTIFIED_CHATAPP_SYNC' : 98,
  'NOTIFIED_UPDATE_MESSAGE' : 99
};
PayloadType = {
  'PAYLOAD_BUY' : 101,
  'PAYLOAD_CS' : 111,
  'PAYLOAD_BONUS' : 121,
  'PAYLOAD_EVENT' : 131
};
PaymentPgType = {
  'PAYMENT_PG_NONE' : 0,
  'PAYMENT_PG_AU' : 1,
  'PAYMENT_PG_AL' : 2
};
PaymentType = {
  'PAYMENT_APPLE' : 1,
  'PAYMENT_GOOGLE' : 2
};
ProductBannerLinkType = {
  'BANNER_LINK_NONE' : 0,
  'BANNER_LINK_ITEM' : 1,
  'BANNER_LINK_URL' : 2,
  'BANNER_LINK_CATEGORY' : 3
};
ProductEventType = {
  'NO_EVENT' : 0,
  'CARRIER_ANY' : 65537,
  'BUDDY_ANY' : 131073,
  'INSTALL_IOS' : 196609,
  'INSTALL_ANDROID' : 196610,
  'MISSION_ANY' : 262145,
  'MUSTBUY_ANY' : 327681
};
StickerResourceType = {
  'STATIC' : 1,
  'ANIMATION' : 2,
  'SOUND' : 3,
  'ANIMATION_SOUND' : 4,
  'POPUP' : 5,
  'POPUP_SOUND' : 6
};
PlaceSearchProvider = {
  'GOOGLE' : 0,
  'BAIDU' : 1
};
PointErrorCode = {
  'REQUEST_DUPLICATION' : 3001,
  'INVALID_PARAMETER' : 3002,
  'NOT_ENOUGH_BALANCE' : 3003,
  'AUTHENTICATION_FAIL' : 3004,
  'API_ACCESS_FORBIDDEN' : 3005,
  'MEMBER_ACCOUNT_NOT_FOUND' : 3006,
  'SERVICE_ACCOUNT_NOT_FOUND' : 3007,
  'TRANSACTION_NOT_FOUND' : 3008,
  'ALREADY_REVERSED_TRANSACTION' : 3009,
  'MESSAGE_NOT_READABLE' : 3010,
  'HTTP_REQUEST_METHOD_NOT_SUPPORTED' : 3011,
  'HTTP_MEDIA_TYPE_NOT_SUPPORTED' : 3012,
  'NOT_ALLOWED_TO_DEPOSIT' : 3013,
  'NOT_ALLOWED_TO_PAY' : 3014,
  'TRANSACTION_ACCESS_FORBIDDEN' : 3015,
  'INVALID_SERVICE_CONFIGURATION' : 4001,
  'DCS_COMMUNICATION_FAIL' : 5004,
  'UPDATE_BALANCE_FAIL' : 5007,
  'SYSTEM_ERROR' : 5999,
  'SYSTEM_MAINTENANCE' : 5888
};
ProfileAttribute = {
  'ALL' : 511,
  'EMAIL' : 1,
  'DISPLAY_NAME' : 2,
  'PHONETIC_NAME' : 4,
  'PICTURE' : 8,
  'STATUS_MESSAGE' : 16,
  'ALLOW_SEARCH_BY_USERID' : 32,
  'ALLOW_SEARCH_BY_EMAIL' : 64,
  'BUDDY_STATUS' : 128,
  'MUSIC_PROFILE' : 256
};
PublicType = {
  'HIDDEN' : 0,
  'PUBLIC' : 1000
};
RedirectType = {
  'NONE' : 0,
  'EXPIRE_SECOND' : 1
};
RegistrationType = {
  'PHONE' : 0,
  'EMAIL_WAP' : 1,
  'FACEBOOK' : 2305,
  'SINA' : 2306,
  'RENREN' : 2307,
  'FEIXIN' : 2308
};
ChatRoomAnnouncementType = {
  'MESSAGE' : 0,
  'NOTE' : 1
};
SettingsAttribute = {
  'ALL' : 2147483647,
  'NOTIFICATION_ENABLE' : 1,
  'NOTIFICATION_MUTE_EXPIRATION' : 2,
  'NOTIFICATION_NEW_MESSAGE' : 4,
  'NOTIFICATION_GROUP_INVITATION' : 8,
  'NOTIFICATION_SHOW_MESSAGE' : 16,
  'NOTIFICATION_INCOMING_CALL' : 32,
  'NOTIFICATION_SOUND_MESSAGE' : 256,
  'NOTIFICATION_SOUND_GROUP' : 512,
  'NOTIFICATION_DISABLED_WITH_SUB' : 65536,
  'NOTIFICATION_PAYMENT' : 131072,
  'PRIVACY_SYNC_CONTACTS' : 64,
  'PRIVACY_SEARCH_BY_PHONE_NUMBER' : 128,
  'PRIVACY_SEARCH_BY_USERID' : 8192,
  'PRIVACY_SEARCH_BY_EMAIL' : 16384,
  'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN' : 2097152,
  'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME' : 8388608,
  'PRIVACY_ALLOW_FRIEND_REQUEST' : 1073741824,
  'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND' : 33554432,
  'PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL' : 67108864,
  'PRIVACY_AGREE_USE_PAIDCALL' : 134217728,
  'CONTACT_MY_TICKET' : 1024,
  'IDENTITY_PROVIDER' : 2048,
  'IDENTITY_IDENTIFIER' : 4096,
  'SNS_ACCOUNT' : 524288,
  'PHONE_REGISTRATION' : 1048576,
  'PREFERENCE_LOCALE' : 32768,
  'CUSTOM_MODE' : 4194304,
  'EMAIL_CONFIRMATION_STATUS' : 16777216,
  'ACCOUNT_MIGRATION_PINCODE' : 268435456,
  'ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE' : 536870912,
  'SECURITY_CENTER_SETTINGS' : 262144
};
SettingsAttributeEx = {
  'NOTIFICATION_ENABLE' : 0,
  'NOTIFICATION_MUTE_EXPIRATION' : 1,
  'NOTIFICATION_NEW_MESSAGE' : 2,
  'NOTIFICATION_GROUP_INVITATION' : 3,
  'NOTIFICATION_SHOW_MESSAGE' : 4,
  'NOTIFICATION_INCOMING_CALL' : 5,
  'NOTIFICATION_SOUND_MESSAGE' : 8,
  'NOTIFICATION_SOUND_GROUP' : 9,
  'NOTIFICATION_DISABLED_WITH_SUB' : 16,
  'NOTIFICATION_PAYMENT' : 17,
  'NOTIFICATION_MENTION' : 40,
  'NOTIFICATION_THUMBNAIL' : 45,
  'PRIVACY_SYNC_CONTACTS' : 6,
  'PRIVACY_SEARCH_BY_PHONE_NUMBER' : 7,
  'PRIVACY_SEARCH_BY_USERID' : 13,
  'PRIVACY_SEARCH_BY_EMAIL' : 14,
  'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN' : 21,
  'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME' : 23,
  'PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME' : 35,
  'PRIVACY_ALLOW_FRIEND_REQUEST' : 30,
  'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND' : 25,
  'PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL' : 26,
  'PRIVACY_AGREE_USE_PAIDCALL' : 27,
  'CONTACT_MY_TICKET' : 10,
  'IDENTITY_PROVIDER' : 11,
  'IDENTITY_IDENTIFIER' : 12,
  'SNS_ACCOUNT' : 19,
  'PHONE_REGISTRATION' : 20,
  'PREFERENCE_LOCALE' : 15,
  'CUSTOM_MODE' : 22,
  'EMAIL_CONFIRMATION_STATUS' : 24,
  'ACCOUNT_MIGRATION_PINCODE' : 28,
  'ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE' : 29,
  'SECURITY_CENTER_SETTINGS' : 18,
  'E2EE_ENABLE' : 33,
  'ENABLE_SOUND_TO_TEXT' : 47,
  'HITOKOTO_BACKUP_REQUESTED' : 34,
  'CONTACT_ALLOW_FOLLOWING' : 36,
  'PRIVACY_ALLOW_NEARBY' : 37,
  'AGREEMENT_NEARBY' : 38,
  'AGREEMENT_SQUARE' : 39,
  'ALLOW_UNREGISTRATION_SECONDARY_DEVICE' : 41,
  'AGREEMENT_BOT_USE' : 42,
  'AGREEMENT_SHAKE_FUNCTION' : 43,
  'AGREEMENT_MOBILE_CONTACT_NAME' : 44,
  'AGREEMENT_SOUND_TO_TEXT' : 46
};
SnsIdType = {
  'FACEBOOK' : 1,
  'SINA' : 2,
  'RENREN' : 3,
  'FEIXIN' : 4,
  'BBM' : 5
};
SpammerReason = {
  'OTHER' : 0,
  'ADVERTISING' : 1,
  'GENDER_HARASSMENT' : 2,
  'HARASSMENT' : 3
};
SyncActionType = {
  'SYNC' : 0,
  'REPORT' : 1
};
SpotCategory = {
  'UNKNOWN' : 0,
  'GOURMET' : 1,
  'BEAUTY' : 2,
  'TRAVEL' : 3,
  'SHOPPING' : 4,
  'ENTERTAINMENT' : 5,
  'SPORTS' : 6,
  'TRANSPORT' : 7,
  'LIFE' : 8,
  'HOSPITAL' : 9,
  'FINANCE' : 10,
  'EDUCATION' : 11,
  'OTHER' : 12,
  'ALL' : 10000
};
SyncCategory = {
  'PROFILE' : 0,
  'SETTINGS' : 1,
  'OPS' : 2,
  'CONTACT' : 3,
  'RECOMMEND' : 4,
  'BLOCK' : 5,
  'GROUP' : 6,
  'ROOM' : 7,
  'NOTIFICATION' : 8,
  'ADDRESS_BOOK' : 9
};
TMessageBoxStatus = {
  'ACTIVATED' : 1,
  'UNREAD' : 2
};
UniversalNotificationServiceErrorCode = {
  'INTERNAL_ERROR' : 0,
  'INVALID_KEY' : 1,
  'ILLEGAL_ARGUMENT' : 2,
  'TOO_MANY_REQUEST' : 3,
  'AUTHENTICATION_FAILED' : 4,
  'NO_WRITE_PERMISSION' : 5
};
UnregistrationReason = {
  'UNREGISTRATION_REASON_UNREGISTER_USER' : 1,
  'UNREGISTRATION_REASON_UNBIND_DEVICE' : 2
};
UserAgeType = {
  'OVER' : 1,
  'UNDER' : 2,
  'UNDEFINED' : 3
};
VerificationMethod = {
  'NO_AVAILABLE' : 0,
  'PIN_VIA_SMS' : 1,
  'CALLERID_INDIGO' : 2,
  'PIN_VIA_TTS' : 4,
  'SKIP' : 10
};
VerificationResult = {
  'FAILED' : 0,
  'OK_NOT_REGISTERED_YET' : 1,
  'OK_REGISTERED_WITH_SAME_DEVICE' : 2,
  'OK_REGISTERED_WITH_ANOTHER_DEVICE' : 3
};
WapInvitationType = {
  'REGISTRATION' : 1,
  'CHAT' : 2
};
MediaType = {
  'AUDIO' : 1,
  'VIDEO' : 2
};
SQErrorCode = {
  'UNKNOWN' : 0,
  'ILLEGAL_ARGUMENT' : 400,
  'AUTHENTICATION_FAILURE' : 401,
  'FORBIDDEN' : 403,
  'NOT_FOUND' : 404,
  'REVISION_MISMATCH' : 409,
  'PRECONDITION_FAILED' : 410,
  'INTERNAL_ERROR' : 500,
  'NOT_IMPLEMENTED' : 501,
  'TRY_AGAIN_LATER' : 505
};
SquareEventType = {
  'RECEIVE_MESSAGE' : 0,
  'SEND_MESSAGE' : 1,
  'NOTIFIED_JOIN_SQUARE_CHAT' : 2,
  'NOTIFIED_INVITE_INTO_SQUARE_CHAT' : 3,
  'NOTIFIED_LEAVE_SQUARE_CHAT' : 4,
  'NOTIFIED_DESTROY_MESSAGE' : 5,
  'NOTIFIED_MARK_AS_READ' : 6,
  'NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE' : 7,
  'NOTIFIED_KICKOUT_FROM_SQUARE' : 19,
  'NOTIFIED_SHUTDOWN_SQUARE' : 18,
  'NOTIFIED_DELETE_SQUARE_CHAT' : 20,
  'NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME' : 30,
  'NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE' : 31,
  'NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT' : 37,
  'NOTIFIED_ADD_BOT' : 33,
  'NOTIFIED_REMOVE_BOT' : 34,
  'NOTIFIED_UPDATE_SQUARE' : 8,
  'NOTIFIED_UPDATE_SQUARE_STATUS' : 9,
  'NOTIFIED_UPDATE_SQUARE_AUTHORITY' : 10,
  'NOTIFIED_UPDATE_SQUARE_MEMBER' : 11,
  'NOTIFIED_UPDATE_SQUARE_CHAT' : 12,
  'NOTIFIED_UPDATE_SQUARE_CHAT_STATUS' : 13,
  'NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER' : 14,
  'NOTIFIED_CREATE_SQUARE_MEMBER' : 15,
  'NOTIFIED_CREATE_SQUARE_CHAT_MEMBER' : 16,
  'NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION' : 17,
  'NOTIFIED_UPDATE_SQUARE_FEATURE_SET' : 32,
  'NOTIFIED_UPDATE_SQUARE_NOTE_STATUS' : 36,
  'NOTIFICATION_JOIN_REQUEST' : 21,
  'NOTIFICATION_JOINED' : 22,
  'NOTIFICATION_PROMOTED_COADMIN' : 23,
  'NOTIFICATION_PROMOTED_ADMIN' : 24,
  'NOTIFICATION_DEMOTED_MEMBER' : 25,
  'NOTIFICATION_KICKED_OUT' : 26,
  'NOTIFICATION_SQUARE_DELETE' : 27,
  'NOTIFICATION_SQUARE_CHAT_DELETE' : 28,
  'NOTIFICATION_MESSAGE' : 29
};
SquareMemberRelationState = {
  'NONE' : 1,
  'BLOCKED' : 2
};
SquareFeatureControlState = {
  'DISABLED' : 1,
  'ENABLED' : 2
};
BooleanState = {
  'NONE' : 0,
  'OFF' : 1,
  'ON' : 2
};
SquareType = {
  'CLOSED' : 0,
  'OPEN' : 1
};
SquareChatType = {
  'OPEN' : 1,
  'SECRET' : 2,
  'ONE_ON_ONE' : 3,
  'SQUARE_DEFAULT' : 4
};
SquareErrorCode = {
  'UNKNOWN' : 0,
  'INTERNAL_ERROR' : 500,
  'NOT_IMPLEMENTED' : 501,
  'TRY_AGAIN_LATER' : 503,
  'MAINTENANCE' : 505,
  'ILLEGAL_ARGUMENT' : 400,
  'AUTHENTICATION_FAILURE' : 401,
  'FORBIDDEN' : 403,
  'NOT_FOUND' : 404,
  'REVISION_MISMATCH' : 409,
  'PRECONDITION_FAILED' : 410
};
SquareChatState = {
  'ALIVE' : 0,
  'DELETED' : 1,
  'SUSPENDED' : 2
};
SquareFeatureSetAttribute = {
  'CREATING_SECRET_SQUARE_CHAT' : 1,
  'INVITING_INTO_OPEN_SQUARE_CHAT' : 2
};
SquareMembershipState = {
  'JOIN_REQUESTED' : 1,
  'JOINED' : 2,
  'REJECTED' : 3,
  'LEFT' : 4,
  'KICK_OUT' : 5,
  'BANNED' : 6,
  'DELETED' : 7
};
SquareChatMemberAttribute = {
  'MEMBERSHIP_STATE' : 4,
  'NOTIFICATION_MESSAGE' : 6
};
SquareMemberRole = {
  'ADMIN' : 1,
  'CO_ADMIN' : 2,
  'MEMBER' : 10
};
PreconditionFailedExtraInfo = {
  'DUPLICATED_DISPLAY_NAME' : 0
};
SquareChatMembershipState = {
  'JOINED' : 1,
  'LEFT' : 2
};
FetchDirection = {
  'FORWARD' : 1,
  'BACKWARD' : 2
};
SquareAttribute = {
  'NAME' : 1,
  'WELCOME_MESSAGE' : 2,
  'PROFILE_IMAGE' : 3,
  'DESCRIPTION' : 4,
  'SEARCHABLE' : 6,
  'CATEGORY' : 7,
  'INVITATION_URL' : 8,
  'ABLE_TO_USE_INVITATION_URL' : 9,
  'STATE' : 10
};
SquareAuthorityAttribute = {
  'UPDATE_SQUARE_PROFILE' : 1,
  'INVITE_NEW_MEMBER' : 2,
  'APPROVE_JOIN_REQUEST' : 3,
  'CREATE_POST' : 4,
  'CREATE_OPEN_SQUARE_CHAT' : 5,
  'DELETE_SQUARE_CHAT_OR_POST' : 6,
  'REMOVE_SQUARE_MEMBER' : 7,
  'GRANT_ROLE' : 8,
  'ENABLE_INVITATION_TICKET' : 9,
  'CREATE_CHAT_ANNOUNCEMENT' : 10
};
SquareEventStatus = {
  'NORMAL' : 1,
  'ALERT_DISABLED' : 2
};
SuggestDictionaryIncrementStatus = {
  'SUCCESS' : 0,
  'INVALID_REVISION' : 1,
  'TOO_LARGE_DATA' : 2,
  'SCHEME_CHANGED' : 3,
  'RETRY' : 4,
  'FAIL' : 5,
  'TOO_OLD_DATA' : 6
};
Location = function(args) {
  this.title = null;
  this.address = null;
  this.latitude = null;
  this.longitude = null;
  this.phone = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
  }
};
Location.prototype = {};
Location.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Location.prototype.write = function(output) {
  output.writeStructBegin('Location');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 5);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageBoxV2MessageId = function(args) {
  this.deliveredTime = null;
  this.messageId = null;
  if (args) {
    if (args.deliveredTime !== undefined && args.deliveredTime !== null) {
      this.deliveredTime = args.deliveredTime;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
MessageBoxV2MessageId.prototype = {};
MessageBoxV2MessageId.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.deliveredTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.messageId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageBoxV2MessageId.prototype.write = function(output) {
  output.writeStructBegin('MessageBoxV2MessageId');
  if (this.deliveredTime !== null && this.deliveredTime !== undefined) {
    output.writeFieldBegin('deliveredTime', Thrift.Type.I64, 1);
    output.writeI64(this.deliveredTime);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.I64, 2);
    output.writeI64(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageCommitResult = function(args) {
  this.requestId = null;
  this.state = null;
  this.messageStoreRequestId = null;
  this.messageIds = null;
  this.receiverCount = null;
  this.successCount = null;
  this.failCount = null;
  this.blockCount = null;
  this.unregisteredCount = null;
  this.unrelatedCount = null;
  this.errorDescription = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.messageStoreRequestId !== undefined && args.messageStoreRequestId !== null) {
      this.messageStoreRequestId = args.messageStoreRequestId;
    }
    if (args.messageIds !== undefined && args.messageIds !== null) {
      this.messageIds = Thrift.copyList(args.messageIds, [null]);
    }
    if (args.receiverCount !== undefined && args.receiverCount !== null) {
      this.receiverCount = args.receiverCount;
    }
    if (args.successCount !== undefined && args.successCount !== null) {
      this.successCount = args.successCount;
    }
    if (args.failCount !== undefined && args.failCount !== null) {
      this.failCount = args.failCount;
    }
    if (args.blockCount !== undefined && args.blockCount !== null) {
      this.blockCount = args.blockCount;
    }
    if (args.unregisteredCount !== undefined && args.unregisteredCount !== null) {
      this.unregisteredCount = args.unregisteredCount;
    }
    if (args.unrelatedCount !== undefined && args.unrelatedCount !== null) {
      this.unrelatedCount = args.unrelatedCount;
    }
    if (args.errorDescription !== undefined && args.errorDescription !== null) {
      this.errorDescription = args.errorDescription;
    }
  }
};
MessageCommitResult.prototype = {};
MessageCommitResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageStoreRequestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.messageIds = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString().value;
          this.messageIds.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.receiverCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.successCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.failCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.blockCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.unregisteredCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.unrelatedCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.errorDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageCommitResult.prototype.write = function(output) {
  output.writeStructBegin('MessageCommitResult');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.messageStoreRequestId !== null && this.messageStoreRequestId !== undefined) {
    output.writeFieldBegin('messageStoreRequestId', Thrift.Type.STRING, 3);
    output.writeString(this.messageStoreRequestId);
    output.writeFieldEnd();
  }
  if (this.messageIds !== null && this.messageIds !== undefined) {
    output.writeFieldBegin('messageIds', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.messageIds.length);
    for (var iter4 in this.messageIds) {
      if (this.messageIds.hasOwnProperty(iter4)) {
        iter4 = this.messageIds[iter4];
        output.writeString(iter4);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.receiverCount !== null && this.receiverCount !== undefined) {
    output.writeFieldBegin('receiverCount', Thrift.Type.I64, 11);
    output.writeI64(this.receiverCount);
    output.writeFieldEnd();
  }
  if (this.successCount !== null && this.successCount !== undefined) {
    output.writeFieldBegin('successCount', Thrift.Type.I64, 12);
    output.writeI64(this.successCount);
    output.writeFieldEnd();
  }
  if (this.failCount !== null && this.failCount !== undefined) {
    output.writeFieldBegin('failCount', Thrift.Type.I64, 13);
    output.writeI64(this.failCount);
    output.writeFieldEnd();
  }
  if (this.blockCount !== null && this.blockCount !== undefined) {
    output.writeFieldBegin('blockCount', Thrift.Type.I64, 14);
    output.writeI64(this.blockCount);
    output.writeFieldEnd();
  }
  if (this.unregisteredCount !== null && this.unregisteredCount !== undefined) {
    output.writeFieldBegin('unregisteredCount', Thrift.Type.I64, 15);
    output.writeI64(this.unregisteredCount);
    output.writeFieldEnd();
  }
  if (this.unrelatedCount !== null && this.unrelatedCount !== undefined) {
    output.writeFieldBegin('unrelatedCount', Thrift.Type.I64, 16);
    output.writeI64(this.unrelatedCount);
    output.writeFieldEnd();
  }
  if (this.errorDescription !== null && this.errorDescription !== undefined) {
    output.writeFieldBegin('errorDescription', Thrift.Type.STRING, 21);
    output.writeString(this.errorDescription);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallHost = function(args) {
  this.host = null;
  this.port = null;
  this.zone = null;
  if (args) {
    if (args.host !== undefined && args.host !== null) {
      this.host = args.host;
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    }
    if (args.zone !== undefined && args.zone !== null) {
      this.zone = args.zone;
    }
  }
};
CallHost.prototype = {};
CallHost.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.zone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallHost.prototype.write = function(output) {
  output.writeStructBegin('CallHost');
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 1);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  if (this.zone !== null && this.zone !== undefined) {
    output.writeFieldBegin('zone', Thrift.Type.STRING, 3);
    output.writeString(this.zone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgeCheckDocomoResult = function(args) {
  this.authUrl = null;
  this.userAgeType = null;
  if (args) {
    if (args.authUrl !== undefined && args.authUrl !== null) {
      this.authUrl = args.authUrl;
    }
    if (args.userAgeType !== undefined && args.userAgeType !== null) {
      this.userAgeType = args.userAgeType;
    }
  }
};
AgeCheckDocomoResult.prototype = {};
AgeCheckDocomoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userAgeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgeCheckDocomoResult.prototype.write = function(output) {
  output.writeStructBegin('AgeCheckDocomoResult');
  if (this.authUrl !== null && this.authUrl !== undefined) {
    output.writeFieldBegin('authUrl', Thrift.Type.STRING, 1);
    output.writeString(this.authUrl);
    output.writeFieldEnd();
  }
  if (this.userAgeType !== null && this.userAgeType !== undefined) {
    output.writeFieldBegin('userAgeType', Thrift.Type.I32, 2);
    output.writeI32(this.userAgeType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgeCheckRequestResult = function(args) {
  this.authUrl = null;
  this.sessionId = null;
  if (args) {
    if (args.authUrl !== undefined && args.authUrl !== null) {
      this.authUrl = args.authUrl;
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
AgeCheckRequestResult.prototype = {};
AgeCheckRequestResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgeCheckRequestResult.prototype.write = function(output) {
  output.writeStructBegin('AgeCheckRequestResult');
  if (this.authUrl !== null && this.authUrl !== undefined) {
    output.writeFieldBegin('authUrl', Thrift.Type.STRING, 1);
    output.writeString(this.authUrl);
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TextMessageAnnouncementContents = function(args) {
  this.messageId = null;
  this.text = null;
  this.senderSquareMemberMid = null;
  this.createdAt = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.senderSquareMemberMid !== undefined && args.senderSquareMemberMid !== null) {
      this.senderSquareMemberMid = args.senderSquareMemberMid;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
  }
};
TextMessageAnnouncementContents.prototype = {};
TextMessageAnnouncementContents.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.senderSquareMemberMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.createdAt = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TextMessageAnnouncementContents.prototype.write = function(output) {
  output.writeStructBegin('TextMessageAnnouncementContents');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.senderSquareMemberMid !== null && this.senderSquareMemberMid !== undefined) {
    output.writeFieldBegin('senderSquareMemberMid', Thrift.Type.STRING, 3);
    output.writeString(this.senderSquareMemberMid);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.I64, 4);
    output.writeI64(this.createdAt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareChatAnnouncementContents = function(args) {
  this.textMessageAnnouncementContents = null;
  if (args) {
    if (args.textMessageAnnouncementContents !== undefined && args.textMessageAnnouncementContents !== null) {
      this.textMessageAnnouncementContents = new TextMessageAnnouncementContents(args.textMessageAnnouncementContents);
    }
  }
};
SquareChatAnnouncementContents.prototype = {};
SquareChatAnnouncementContents.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.textMessageAnnouncementContents = new TextMessageAnnouncementContents();
        this.textMessageAnnouncementContents.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareChatAnnouncementContents.prototype.write = function(output) {
  output.writeStructBegin('SquareChatAnnouncementContents');
  if (this.textMessageAnnouncementContents !== null && this.textMessageAnnouncementContents !== undefined) {
    output.writeFieldBegin('textMessageAnnouncementContents', Thrift.Type.STRUCT, 1);
    this.textMessageAnnouncementContents.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareChatAnnouncement = function(args) {
  this.announcementSeq = null;
  this.type = null;
  this.contents = null;
  if (args) {
    if (args.announcementSeq !== undefined && args.announcementSeq !== null) {
      this.announcementSeq = args.announcementSeq;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.contents !== undefined && args.contents !== null) {
      this.contents = new SquareChatAnnouncementContents(args.contents);
    }
  }
};
SquareChatAnnouncement.prototype = {};
SquareChatAnnouncement.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.announcementSeq = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.contents = new SquareChatAnnouncementContents();
        this.contents.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareChatAnnouncement.prototype.write = function(output) {
  output.writeStructBegin('SquareChatAnnouncement');
  if (this.announcementSeq !== null && this.announcementSeq !== undefined) {
    output.writeFieldBegin('announcementSeq', Thrift.Type.I64, 1);
    output.writeI64(this.announcementSeq);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.contents !== null && this.contents !== undefined) {
    output.writeFieldBegin('contents', Thrift.Type.STRUCT, 3);
    this.contents.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Announcement = function(args) {
  this.index = null;
  this.forceUpdate = null;
  this.title = null;
  this.text = null;
  this.createdTime = null;
  this.pictureUrl = null;
  this.thumbnailUrl = null;
  if (args) {
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
    if (args.forceUpdate !== undefined && args.forceUpdate !== null) {
      this.forceUpdate = args.forceUpdate;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.pictureUrl !== undefined && args.pictureUrl !== null) {
      this.pictureUrl = args.pictureUrl;
    }
    if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
      this.thumbnailUrl = args.thumbnailUrl;
    }
  }
};
Announcement.prototype = {};
Announcement.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.forceUpdate = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.pictureUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnailUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Announcement.prototype.write = function(output) {
  output.writeStructBegin('Announcement');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 1);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  if (this.forceUpdate !== null && this.forceUpdate !== undefined) {
    output.writeFieldBegin('forceUpdate', Thrift.Type.BOOL, 10);
    output.writeBool(this.forceUpdate);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 11);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 12);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 13);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.pictureUrl !== null && this.pictureUrl !== undefined) {
    output.writeFieldBegin('pictureUrl', Thrift.Type.STRING, 14);
    output.writeString(this.pictureUrl);
    output.writeFieldEnd();
  }
  if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
    output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 15);
    output.writeString(this.thumbnailUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelProvider = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
ChannelProvider.prototype = {};
ChannelProvider.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelProvider.prototype.write = function(output) {
  output.writeStructBegin('ChannelProvider');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

E2EEPublicKey = function(args) {
  this.version = null;
  this.keyId = null;
  this.keyData = null;
  this.createdTime = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.keyId !== undefined && args.keyId !== null) {
      this.keyId = args.keyId;
    }
    if (args.keyData !== undefined && args.keyData !== null) {
      this.keyData = args.keyData;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
  }
};
E2EEPublicKey.prototype = {};
E2EEPublicKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.keyId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.keyData = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

E2EEPublicKey.prototype.write = function(output) {
  output.writeStructBegin('E2EEPublicKey');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 1);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.keyId !== null && this.keyId !== undefined) {
    output.writeFieldBegin('keyId', Thrift.Type.I32, 2);
    output.writeI32(this.keyId);
    output.writeFieldEnd();
  }
  if (this.keyData !== null && this.keyData !== undefined) {
    output.writeFieldBegin('keyData', Thrift.Type.STRING, 4);
    output.writeBinary(this.keyData);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 5);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelDomain = function(args) {
  this.host = null;
  this.removed = null;
  if (args) {
    if (args.host !== undefined && args.host !== null) {
      this.host = args.host;
    }
    if (args.removed !== undefined && args.removed !== null) {
      this.removed = args.removed;
    }
  }
};
ChannelDomain.prototype = {};
ChannelDomain.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.removed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelDomain.prototype.write = function(output) {
  output.writeStructBegin('ChannelDomain');
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 1);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.removed !== null && this.removed !== undefined) {
    output.writeFieldBegin('removed', Thrift.Type.BOOL, 2);
    output.writeBool(this.removed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

E2EENegotiationResult = function(args) {
  this.allowedTypes = null;
  this.publicKey = null;
  if (args) {
    if (args.allowedTypes !== undefined && args.allowedTypes !== null) {
      this.allowedTypes = Thrift.copyList(args.allowedTypes, [null]);
    }
    if (args.publicKey !== undefined && args.publicKey !== null) {
      this.publicKey = new E2EEPublicKey(args.publicKey);
    }
  }
};
E2EENegotiationResult.prototype = {};
E2EENegotiationResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.SET) {
        this.allowedTypes = [];
        var _rtmp36 = input.readSetBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = input.readI32().value;
          this.allowedTypes.push(elem8);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.publicKey = new E2EEPublicKey();
        this.publicKey.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

E2EENegotiationResult.prototype.write = function(output) {
  output.writeStructBegin('E2EENegotiationResult');
  if (this.allowedTypes !== null && this.allowedTypes !== undefined) {
    output.writeFieldBegin('allowedTypes', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I32, this.allowedTypes.length);
    for (var iter9 in this.allowedTypes) {
      if (this.allowedTypes.hasOwnProperty(iter9)) {
        iter9 = this.allowedTypes[iter9];
        output.writeI32(iter9);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.publicKey !== null && this.publicKey !== undefined) {
    output.writeFieldBegin('publicKey', Thrift.Type.STRUCT, 2);
    this.publicKey.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OTPResult = function(args) {
  this.otpId = null;
  this.otp = null;
  if (args) {
    if (args.otpId !== undefined && args.otpId !== null) {
      this.otpId = args.otpId;
    }
    if (args.otp !== undefined && args.otp !== null) {
      this.otp = args.otp;
    }
  }
};
OTPResult.prototype = {};
OTPResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.otpId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.otp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OTPResult.prototype.write = function(output) {
  output.writeStructBegin('OTPResult');
  if (this.otpId !== null && this.otpId !== undefined) {
    output.writeFieldBegin('otpId', Thrift.Type.STRING, 1);
    output.writeString(this.otpId);
    output.writeFieldEnd();
  }
  if (this.otp !== null && this.otp !== undefined) {
    output.writeFieldBegin('otp', Thrift.Type.STRING, 2);
    output.writeString(this.otp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Square = function(args) {
  this.mid = null;
  this.name = null;
  this.welcomeMessage = null;
  this.profileImageObsHash = null;
  this.desc = null;
  this.searchable = null;
  this.type = null;
  this.categoryID = null;
  this.invitationURL = null;
  this.revision = null;
  this.ableToUseInvitationTicket = null;
  this.state = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.welcomeMessage !== undefined && args.welcomeMessage !== null) {
      this.welcomeMessage = args.welcomeMessage;
    }
    if (args.profileImageObsHash !== undefined && args.profileImageObsHash !== null) {
      this.profileImageObsHash = args.profileImageObsHash;
    }
    if (args.desc !== undefined && args.desc !== null) {
      this.desc = args.desc;
    }
    if (args.searchable !== undefined && args.searchable !== null) {
      this.searchable = args.searchable;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.categoryID !== undefined && args.categoryID !== null) {
      this.categoryID = args.categoryID;
    }
    if (args.invitationURL !== undefined && args.invitationURL !== null) {
      this.invitationURL = args.invitationURL;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.ableToUseInvitationTicket !== undefined && args.ableToUseInvitationTicket !== null) {
      this.ableToUseInvitationTicket = args.ableToUseInvitationTicket;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
  }
};
Square.prototype = {};
Square.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.welcomeMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.profileImageObsHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.searchable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.categoryID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.invitationURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.ableToUseInvitationTicket = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Square.prototype.write = function(output) {
  output.writeStructBegin('Square');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.welcomeMessage !== null && this.welcomeMessage !== undefined) {
    output.writeFieldBegin('welcomeMessage', Thrift.Type.STRING, 3);
    output.writeString(this.welcomeMessage);
    output.writeFieldEnd();
  }
  if (this.profileImageObsHash !== null && this.profileImageObsHash !== undefined) {
    output.writeFieldBegin('profileImageObsHash', Thrift.Type.STRING, 4);
    output.writeString(this.profileImageObsHash);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 5);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  if (this.searchable !== null && this.searchable !== undefined) {
    output.writeFieldBegin('searchable', Thrift.Type.BOOL, 6);
    output.writeBool(this.searchable);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 7);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.categoryID !== null && this.categoryID !== undefined) {
    output.writeFieldBegin('categoryID', Thrift.Type.I32, 8);
    output.writeI32(this.categoryID);
    output.writeFieldEnd();
  }
  if (this.invitationURL !== null && this.invitationURL !== undefined) {
    output.writeFieldBegin('invitationURL', Thrift.Type.STRING, 9);
    output.writeString(this.invitationURL);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 10);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.ableToUseInvitationTicket !== null && this.ableToUseInvitationTicket !== undefined) {
    output.writeFieldBegin('ableToUseInvitationTicket', Thrift.Type.BOOL, 11);
    output.writeBool(this.ableToUseInvitationTicket);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 12);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareAuthority = function(args) {
  this.squareMid = null;
  this.updateSquareProfile = null;
  this.inviteNewMember = null;
  this.approveJoinRequest = null;
  this.createPost = null;
  this.createOpenSquareChat = null;
  this.deleteSquareChatOrPost = null;
  this.removeSquareMember = null;
  this.grantRole = null;
  this.enableInvitationTicket = null;
  this.revision = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.updateSquareProfile !== undefined && args.updateSquareProfile !== null) {
      this.updateSquareProfile = args.updateSquareProfile;
    }
    if (args.inviteNewMember !== undefined && args.inviteNewMember !== null) {
      this.inviteNewMember = args.inviteNewMember;
    }
    if (args.approveJoinRequest !== undefined && args.approveJoinRequest !== null) {
      this.approveJoinRequest = args.approveJoinRequest;
    }
    if (args.createPost !== undefined && args.createPost !== null) {
      this.createPost = args.createPost;
    }
    if (args.createOpenSquareChat !== undefined && args.createOpenSquareChat !== null) {
      this.createOpenSquareChat = args.createOpenSquareChat;
    }
    if (args.deleteSquareChatOrPost !== undefined && args.deleteSquareChatOrPost !== null) {
      this.deleteSquareChatOrPost = args.deleteSquareChatOrPost;
    }
    if (args.removeSquareMember !== undefined && args.removeSquareMember !== null) {
      this.removeSquareMember = args.removeSquareMember;
    }
    if (args.grantRole !== undefined && args.grantRole !== null) {
      this.grantRole = args.grantRole;
    }
    if (args.enableInvitationTicket !== undefined && args.enableInvitationTicket !== null) {
      this.enableInvitationTicket = args.enableInvitationTicket;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
  }
};
SquareAuthority.prototype = {};
SquareAuthority.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.updateSquareProfile = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.inviteNewMember = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.approveJoinRequest = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.createPost = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.createOpenSquareChat = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.deleteSquareChatOrPost = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.removeSquareMember = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.grantRole = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.enableInvitationTicket = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareAuthority.prototype.write = function(output) {
  output.writeStructBegin('SquareAuthority');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.updateSquareProfile !== null && this.updateSquareProfile !== undefined) {
    output.writeFieldBegin('updateSquareProfile', Thrift.Type.I32, 2);
    output.writeI32(this.updateSquareProfile);
    output.writeFieldEnd();
  }
  if (this.inviteNewMember !== null && this.inviteNewMember !== undefined) {
    output.writeFieldBegin('inviteNewMember', Thrift.Type.I32, 3);
    output.writeI32(this.inviteNewMember);
    output.writeFieldEnd();
  }
  if (this.approveJoinRequest !== null && this.approveJoinRequest !== undefined) {
    output.writeFieldBegin('approveJoinRequest', Thrift.Type.I32, 4);
    output.writeI32(this.approveJoinRequest);
    output.writeFieldEnd();
  }
  if (this.createPost !== null && this.createPost !== undefined) {
    output.writeFieldBegin('createPost', Thrift.Type.I32, 5);
    output.writeI32(this.createPost);
    output.writeFieldEnd();
  }
  if (this.createOpenSquareChat !== null && this.createOpenSquareChat !== undefined) {
    output.writeFieldBegin('createOpenSquareChat', Thrift.Type.I32, 6);
    output.writeI32(this.createOpenSquareChat);
    output.writeFieldEnd();
  }
  if (this.deleteSquareChatOrPost !== null && this.deleteSquareChatOrPost !== undefined) {
    output.writeFieldBegin('deleteSquareChatOrPost', Thrift.Type.I32, 7);
    output.writeI32(this.deleteSquareChatOrPost);
    output.writeFieldEnd();
  }
  if (this.removeSquareMember !== null && this.removeSquareMember !== undefined) {
    output.writeFieldBegin('removeSquareMember', Thrift.Type.I32, 8);
    output.writeI32(this.removeSquareMember);
    output.writeFieldEnd();
  }
  if (this.grantRole !== null && this.grantRole !== undefined) {
    output.writeFieldBegin('grantRole', Thrift.Type.I32, 9);
    output.writeI32(this.grantRole);
    output.writeFieldEnd();
  }
  if (this.enableInvitationTicket !== null && this.enableInvitationTicket !== undefined) {
    output.writeFieldBegin('enableInvitationTicket', Thrift.Type.I32, 10);
    output.writeI32(this.enableInvitationTicket);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 11);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquarePreference = function(args) {
  this.favoriteTimestamp = null;
  this.notiForNewJoinRequest = null;
  if (args) {
    if (args.favoriteTimestamp !== undefined && args.favoriteTimestamp !== null) {
      this.favoriteTimestamp = args.favoriteTimestamp;
    }
    if (args.notiForNewJoinRequest !== undefined && args.notiForNewJoinRequest !== null) {
      this.notiForNewJoinRequest = args.notiForNewJoinRequest;
    }
  }
};
SquarePreference.prototype = {};
SquarePreference.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.favoriteTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.notiForNewJoinRequest = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquarePreference.prototype.write = function(output) {
  output.writeStructBegin('SquarePreference');
  if (this.favoriteTimestamp !== null && this.favoriteTimestamp !== undefined) {
    output.writeFieldBegin('favoriteTimestamp', Thrift.Type.I64, 1);
    output.writeI64(this.favoriteTimestamp);
    output.writeFieldEnd();
  }
  if (this.notiForNewJoinRequest !== null && this.notiForNewJoinRequest !== undefined) {
    output.writeFieldBegin('notiForNewJoinRequest', Thrift.Type.BOOL, 2);
    output.writeBool(this.notiForNewJoinRequest);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareMember = function(args) {
  this.squareMemberMid = null;
  this.squareMid = null;
  this.displayName = null;
  this.profileImageObsHash = null;
  this.ableToReceiveMessage = null;
  this.membershipState = null;
  this.role = null;
  this.revision = null;
  this.preference = null;
  this.joinMessage = null;
  if (args) {
    if (args.squareMemberMid !== undefined && args.squareMemberMid !== null) {
      this.squareMemberMid = args.squareMemberMid;
    }
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.profileImageObsHash !== undefined && args.profileImageObsHash !== null) {
      this.profileImageObsHash = args.profileImageObsHash;
    }
    if (args.ableToReceiveMessage !== undefined && args.ableToReceiveMessage !== null) {
      this.ableToReceiveMessage = args.ableToReceiveMessage;
    }
    if (args.membershipState !== undefined && args.membershipState !== null) {
      this.membershipState = args.membershipState;
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.preference !== undefined && args.preference !== null) {
      this.preference = new SquarePreference(args.preference);
    }
    if (args.joinMessage !== undefined && args.joinMessage !== null) {
      this.joinMessage = args.joinMessage;
    }
  }
};
SquareMember.prototype = {};
SquareMember.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMemberMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.profileImageObsHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.ableToReceiveMessage = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.membershipState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.role = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.preference = new SquarePreference();
        this.preference.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.joinMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareMember.prototype.write = function(output) {
  output.writeStructBegin('SquareMember');
  if (this.squareMemberMid !== null && this.squareMemberMid !== undefined) {
    output.writeFieldBegin('squareMemberMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMemberMid);
    output.writeFieldEnd();
  }
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 3);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.profileImageObsHash !== null && this.profileImageObsHash !== undefined) {
    output.writeFieldBegin('profileImageObsHash', Thrift.Type.STRING, 4);
    output.writeString(this.profileImageObsHash);
    output.writeFieldEnd();
  }
  if (this.ableToReceiveMessage !== null && this.ableToReceiveMessage !== undefined) {
    output.writeFieldBegin('ableToReceiveMessage', Thrift.Type.BOOL, 5);
    output.writeBool(this.ableToReceiveMessage);
    output.writeFieldEnd();
  }
  if (this.membershipState !== null && this.membershipState !== undefined) {
    output.writeFieldBegin('membershipState', Thrift.Type.I32, 7);
    output.writeI32(this.membershipState);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.I32, 8);
    output.writeI32(this.role);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 9);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.preference !== null && this.preference !== undefined) {
    output.writeFieldBegin('preference', Thrift.Type.STRUCT, 10);
    this.preference.write(output);
    output.writeFieldEnd();
  }
  if (this.joinMessage !== null && this.joinMessage !== undefined) {
    output.writeFieldBegin('joinMessage', Thrift.Type.STRING, 11);
    output.writeString(this.joinMessage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareMemberRelation = function(args) {
  this.state = null;
  this.revision = null;
  if (args) {
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
  }
};
SquareMemberRelation.prototype = {};
SquareMemberRelation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareMemberRelation.prototype.write = function(output) {
  output.writeStructBegin('SquareMemberRelation');
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 1);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 2);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareFeature = function(args) {
  this.controlState = null;
  this.booleanValue = null;
  if (args) {
    if (args.controlState !== undefined && args.controlState !== null) {
      this.controlState = args.controlState;
    }
    if (args.booleanValue !== undefined && args.booleanValue !== null) {
      this.booleanValue = args.booleanValue;
    }
  }
};
SquareFeature.prototype = {};
SquareFeature.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.controlState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.booleanValue = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareFeature.prototype.write = function(output) {
  output.writeStructBegin('SquareFeature');
  if (this.controlState !== null && this.controlState !== undefined) {
    output.writeFieldBegin('controlState', Thrift.Type.I32, 1);
    output.writeI32(this.controlState);
    output.writeFieldEnd();
  }
  if (this.booleanValue !== null && this.booleanValue !== undefined) {
    output.writeFieldBegin('booleanValue', Thrift.Type.I32, 2);
    output.writeI32(this.booleanValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareFeatureSet = function(args) {
  this.squareMid = null;
  this.revision = null;
  this.creatingSecretSquareChat = null;
  this.invitingIntoOpenSquareChat = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.creatingSecretSquareChat !== undefined && args.creatingSecretSquareChat !== null) {
      this.creatingSecretSquareChat = new SquareFeature(args.creatingSecretSquareChat);
    }
    if (args.invitingIntoOpenSquareChat !== undefined && args.invitingIntoOpenSquareChat !== null) {
      this.invitingIntoOpenSquareChat = new SquareFeature(args.invitingIntoOpenSquareChat);
    }
  }
};
SquareFeatureSet.prototype = {};
SquareFeatureSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.creatingSecretSquareChat = new SquareFeature();
        this.creatingSecretSquareChat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.invitingIntoOpenSquareChat = new SquareFeature();
        this.invitingIntoOpenSquareChat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareFeatureSet.prototype.write = function(output) {
  output.writeStructBegin('SquareFeatureSet');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 2);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.creatingSecretSquareChat !== null && this.creatingSecretSquareChat !== undefined) {
    output.writeFieldBegin('creatingSecretSquareChat', Thrift.Type.STRUCT, 11);
    this.creatingSecretSquareChat.write(output);
    output.writeFieldEnd();
  }
  if (this.invitingIntoOpenSquareChat !== null && this.invitingIntoOpenSquareChat !== undefined) {
    output.writeFieldBegin('invitingIntoOpenSquareChat', Thrift.Type.STRUCT, 12);
    this.invitingIntoOpenSquareChat.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareStatus = function(args) {
  this.memberCount = null;
  this.joinRequestCount = null;
  this.lastJoinRequestAt = null;
  this.openChatCount = null;
  if (args) {
    if (args.memberCount !== undefined && args.memberCount !== null) {
      this.memberCount = args.memberCount;
    }
    if (args.joinRequestCount !== undefined && args.joinRequestCount !== null) {
      this.joinRequestCount = args.joinRequestCount;
    }
    if (args.lastJoinRequestAt !== undefined && args.lastJoinRequestAt !== null) {
      this.lastJoinRequestAt = args.lastJoinRequestAt;
    }
    if (args.openChatCount !== undefined && args.openChatCount !== null) {
      this.openChatCount = args.openChatCount;
    }
  }
};
SquareStatus.prototype = {};
SquareStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.memberCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.joinRequestCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.lastJoinRequestAt = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.openChatCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareStatus.prototype.write = function(output) {
  output.writeStructBegin('SquareStatus');
  if (this.memberCount !== null && this.memberCount !== undefined) {
    output.writeFieldBegin('memberCount', Thrift.Type.I32, 1);
    output.writeI32(this.memberCount);
    output.writeFieldEnd();
  }
  if (this.joinRequestCount !== null && this.joinRequestCount !== undefined) {
    output.writeFieldBegin('joinRequestCount', Thrift.Type.I32, 2);
    output.writeI32(this.joinRequestCount);
    output.writeFieldEnd();
  }
  if (this.lastJoinRequestAt !== null && this.lastJoinRequestAt !== undefined) {
    output.writeFieldBegin('lastJoinRequestAt', Thrift.Type.I64, 3);
    output.writeI64(this.lastJoinRequestAt);
    output.writeFieldEnd();
  }
  if (this.openChatCount !== null && this.openChatCount !== undefined) {
    output.writeFieldBegin('openChatCount', Thrift.Type.I32, 4);
    output.writeI32(this.openChatCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareChat = function(args) {
  this.squareChatMid = null;
  this.squareMid = null;
  this.type = null;
  this.name = null;
  this.chatImageObsHash = null;
  this.squareChatRevision = null;
  this.maxMemberCount = null;
  this.state = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.chatImageObsHash !== undefined && args.chatImageObsHash !== null) {
      this.chatImageObsHash = args.chatImageObsHash;
    }
    if (args.squareChatRevision !== undefined && args.squareChatRevision !== null) {
      this.squareChatRevision = args.squareChatRevision;
    }
    if (args.maxMemberCount !== undefined && args.maxMemberCount !== null) {
      this.maxMemberCount = args.maxMemberCount;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
  }
};
SquareChat.prototype = {};
SquareChat.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.chatImageObsHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.squareChatRevision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.maxMemberCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareChat.prototype.write = function(output) {
  output.writeStructBegin('SquareChat');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.chatImageObsHash !== null && this.chatImageObsHash !== undefined) {
    output.writeFieldBegin('chatImageObsHash', Thrift.Type.STRING, 5);
    output.writeString(this.chatImageObsHash);
    output.writeFieldEnd();
  }
  if (this.squareChatRevision !== null && this.squareChatRevision !== undefined) {
    output.writeFieldBegin('squareChatRevision', Thrift.Type.I64, 6);
    output.writeI64(this.squareChatRevision);
    output.writeFieldEnd();
  }
  if (this.maxMemberCount !== null && this.maxMemberCount !== undefined) {
    output.writeFieldBegin('maxMemberCount', Thrift.Type.I32, 7);
    output.writeI32(this.maxMemberCount);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 8);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteStatus = function(args) {
  this.noteCount = null;
  this.latestCreatedAt = null;
  if (args) {
    if (args.noteCount !== undefined && args.noteCount !== null) {
      this.noteCount = args.noteCount;
    }
    if (args.latestCreatedAt !== undefined && args.latestCreatedAt !== null) {
      this.latestCreatedAt = args.latestCreatedAt;
    }
  }
};
NoteStatus.prototype = {};
NoteStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.noteCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.latestCreatedAt = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStatus.prototype.write = function(output) {
  output.writeStructBegin('NoteStatus');
  if (this.noteCount !== null && this.noteCount !== undefined) {
    output.writeFieldBegin('noteCount', Thrift.Type.I32, 1);
    output.writeI32(this.noteCount);
    output.writeFieldEnd();
  }
  if (this.latestCreatedAt !== null && this.latestCreatedAt !== undefined) {
    output.writeFieldBegin('latestCreatedAt', Thrift.Type.I64, 2);
    output.writeI64(this.latestCreatedAt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareInfo = function(args) {
  this.square = null;
  this.squareStatus = null;
  this.squareNoteStatus = null;
  if (args) {
    if (args.square !== undefined && args.square !== null) {
      this.square = new Square(args.square);
    }
    if (args.squareStatus !== undefined && args.squareStatus !== null) {
      this.squareStatus = new SquareStatus(args.squareStatus);
    }
    if (args.squareNoteStatus !== undefined && args.squareNoteStatus !== null) {
      this.squareNoteStatus = new NoteStatus(args.squareNoteStatus);
    }
  }
};
SquareInfo.prototype = {};
SquareInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.square = new Square();
        this.square.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareStatus = new SquareStatus();
        this.squareStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareNoteStatus = new NoteStatus();
        this.squareNoteStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareInfo.prototype.write = function(output) {
  output.writeStructBegin('SquareInfo');
  if (this.square !== null && this.square !== undefined) {
    output.writeFieldBegin('square', Thrift.Type.STRUCT, 1);
    this.square.write(output);
    output.writeFieldEnd();
  }
  if (this.squareStatus !== null && this.squareStatus !== undefined) {
    output.writeFieldBegin('squareStatus', Thrift.Type.STRUCT, 2);
    this.squareStatus.write(output);
    output.writeFieldEnd();
  }
  if (this.squareNoteStatus !== null && this.squareNoteStatus !== undefined) {
    output.writeFieldBegin('squareNoteStatus', Thrift.Type.STRUCT, 3);
    this.squareNoteStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BotUseInfo = function(args) {
  this.botUseAgreementAccepted = null;
  this.botInFriends = null;
  this.primaryApplication = null;
  this.locale = null;
  if (args) {
    if (args.botUseAgreementAccepted !== undefined && args.botUseAgreementAccepted !== null) {
      this.botUseAgreementAccepted = args.botUseAgreementAccepted;
    }
    if (args.botInFriends !== undefined && args.botInFriends !== null) {
      this.botInFriends = args.botInFriends;
    }
    if (args.primaryApplication !== undefined && args.primaryApplication !== null) {
      this.primaryApplication = args.primaryApplication;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
BotUseInfo.prototype = {};
BotUseInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.botUseAgreementAccepted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.botInFriends = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.primaryApplication = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BotUseInfo.prototype.write = function(output) {
  output.writeStructBegin('BotUseInfo');
  if (this.botUseAgreementAccepted !== null && this.botUseAgreementAccepted !== undefined) {
    output.writeFieldBegin('botUseAgreementAccepted', Thrift.Type.BOOL, 1);
    output.writeBool(this.botUseAgreementAccepted);
    output.writeFieldEnd();
  }
  if (this.botInFriends !== null && this.botInFriends !== undefined) {
    output.writeFieldBegin('botInFriends', Thrift.Type.BOOL, 2);
    output.writeBool(this.botInFriends);
    output.writeFieldEnd();
  }
  if (this.primaryApplication !== null && this.primaryApplication !== undefined) {
    output.writeFieldBegin('primaryApplication', Thrift.Type.STRING, 3);
    output.writeString(this.primaryApplication);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 4);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PaidCallAdCountry = function(args) {
  this.countryCode = null;
  this.rateDivision = null;
  if (args) {
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
    if (args.rateDivision !== undefined && args.rateDivision !== null) {
      this.rateDivision = args.rateDivision;
    }
  }
};
PaidCallAdCountry.prototype = {};
PaidCallAdCountry.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.rateDivision = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallAdCountry.prototype.write = function(output) {
  output.writeStructBegin('PaidCallAdCountry');
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 1);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.rateDivision !== null && this.rateDivision !== undefined) {
    output.writeFieldBegin('rateDivision', Thrift.Type.STRING, 2);
    output.writeString(this.rateDivision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PaidCallAdResult = function(args) {
  this.adRemains = null;
  if (args) {
    if (args.adRemains !== undefined && args.adRemains !== null) {
      this.adRemains = args.adRemains;
    }
  }
};
PaidCallAdResult.prototype = {};
PaidCallAdResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.adRemains = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallAdResult.prototype.write = function(output) {
  output.writeStructBegin('PaidCallAdResult');
  if (this.adRemains !== null && this.adRemains !== undefined) {
    output.writeFieldBegin('adRemains', Thrift.Type.I32, 1);
    output.writeI32(this.adRemains);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PaidCallBalance = function(args) {
  this.productType = null;
  this.productName = null;
  this.unit = null;
  this.limitedPaidBalance = null;
  this.limitedFreeBalance = null;
  this.unlimitedPaidBalance = null;
  this.unlimitedFreeBalance = null;
  this.startTime = null;
  this.endTime = null;
  this.autopayEnabled = null;
  if (args) {
    if (args.productType !== undefined && args.productType !== null) {
      this.productType = args.productType;
    }
    if (args.productName !== undefined && args.productName !== null) {
      this.productName = args.productName;
    }
    if (args.unit !== undefined && args.unit !== null) {
      this.unit = args.unit;
    }
    if (args.limitedPaidBalance !== undefined && args.limitedPaidBalance !== null) {
      this.limitedPaidBalance = args.limitedPaidBalance;
    }
    if (args.limitedFreeBalance !== undefined && args.limitedFreeBalance !== null) {
      this.limitedFreeBalance = args.limitedFreeBalance;
    }
    if (args.unlimitedPaidBalance !== undefined && args.unlimitedPaidBalance !== null) {
      this.unlimitedPaidBalance = args.unlimitedPaidBalance;
    }
    if (args.unlimitedFreeBalance !== undefined && args.unlimitedFreeBalance !== null) {
      this.unlimitedFreeBalance = args.unlimitedFreeBalance;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.autopayEnabled !== undefined && args.autopayEnabled !== null) {
      this.autopayEnabled = args.autopayEnabled;
    }
  }
};
PaidCallBalance.prototype = {};
PaidCallBalance.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.productType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.unit = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.limitedPaidBalance = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.limitedFreeBalance = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.unlimitedPaidBalance = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.unlimitedFreeBalance = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.autopayEnabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallBalance.prototype.write = function(output) {
  output.writeStructBegin('PaidCallBalance');
  if (this.productType !== null && this.productType !== undefined) {
    output.writeFieldBegin('productType', Thrift.Type.I32, 1);
    output.writeI32(this.productType);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.STRING, 3);
    output.writeString(this.unit);
    output.writeFieldEnd();
  }
  if (this.limitedPaidBalance !== null && this.limitedPaidBalance !== undefined) {
    output.writeFieldBegin('limitedPaidBalance', Thrift.Type.I32, 4);
    output.writeI32(this.limitedPaidBalance);
    output.writeFieldEnd();
  }
  if (this.limitedFreeBalance !== null && this.limitedFreeBalance !== undefined) {
    output.writeFieldBegin('limitedFreeBalance', Thrift.Type.I32, 5);
    output.writeI32(this.limitedFreeBalance);
    output.writeFieldEnd();
  }
  if (this.unlimitedPaidBalance !== null && this.unlimitedPaidBalance !== undefined) {
    output.writeFieldBegin('unlimitedPaidBalance', Thrift.Type.I32, 6);
    output.writeI32(this.unlimitedPaidBalance);
    output.writeFieldEnd();
  }
  if (this.unlimitedFreeBalance !== null && this.unlimitedFreeBalance !== undefined) {
    output.writeFieldBegin('unlimitedFreeBalance', Thrift.Type.I32, 7);
    output.writeI32(this.unlimitedFreeBalance);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 8);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 9);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.autopayEnabled !== null && this.autopayEnabled !== undefined) {
    output.writeFieldBegin('autopayEnabled', Thrift.Type.BOOL, 10);
    output.writeBool(this.autopayEnabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PaidCallCurrencyExchangeRate = function(args) {
  this.currencyCode = null;
  this.currencyName = null;
  this.currencySign = null;
  this.preferred = null;
  this.coinRate = null;
  this.creditRate = null;
  if (args) {
    if (args.currencyCode !== undefined && args.currencyCode !== null) {
      this.currencyCode = args.currencyCode;
    }
    if (args.currencyName !== undefined && args.currencyName !== null) {
      this.currencyName = args.currencyName;
    }
    if (args.currencySign !== undefined && args.currencySign !== null) {
      this.currencySign = args.currencySign;
    }
    if (args.preferred !== undefined && args.preferred !== null) {
      this.preferred = args.preferred;
    }
    if (args.coinRate !== undefined && args.coinRate !== null) {
      this.coinRate = args.coinRate;
    }
    if (args.creditRate !== undefined && args.creditRate !== null) {
      this.creditRate = args.creditRate;
    }
  }
};
PaidCallCurrencyExchangeRate.prototype = {};
PaidCallCurrencyExchangeRate.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.currencyCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.currencyName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.currencySign = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.preferred = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.coinRate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.creditRate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallCurrencyExchangeRate.prototype.write = function(output) {
  output.writeStructBegin('PaidCallCurrencyExchangeRate');
  if (this.currencyCode !== null && this.currencyCode !== undefined) {
    output.writeFieldBegin('currencyCode', Thrift.Type.STRING, 1);
    output.writeString(this.currencyCode);
    output.writeFieldEnd();
  }
  if (this.currencyName !== null && this.currencyName !== undefined) {
    output.writeFieldBegin('currencyName', Thrift.Type.STRING, 2);
    output.writeString(this.currencyName);
    output.writeFieldEnd();
  }
  if (this.currencySign !== null && this.currencySign !== undefined) {
    output.writeFieldBegin('currencySign', Thrift.Type.STRING, 3);
    output.writeString(this.currencySign);
    output.writeFieldEnd();
  }
  if (this.preferred !== null && this.preferred !== undefined) {
    output.writeFieldBegin('preferred', Thrift.Type.BOOL, 4);
    output.writeBool(this.preferred);
    output.writeFieldEnd();
  }
  if (this.coinRate !== null && this.coinRate !== undefined) {
    output.writeFieldBegin('coinRate', Thrift.Type.STRING, 5);
    output.writeString(this.coinRate);
    output.writeFieldEnd();
  }
  if (this.creditRate !== null && this.creditRate !== undefined) {
    output.writeFieldBegin('creditRate', Thrift.Type.STRING, 6);
    output.writeString(this.creditRate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExtendedProfileBirthday = function(args) {
  this.year = null;
  this.yearPrivacyLevelType = null;
  this.yearEnabled = null;
  this.day = null;
  this.dayPrivacyLevelType = null;
  this.dayEnabled = null;
  if (args) {
    if (args.year !== undefined && args.year !== null) {
      this.year = args.year;
    }
    if (args.yearPrivacyLevelType !== undefined && args.yearPrivacyLevelType !== null) {
      this.yearPrivacyLevelType = args.yearPrivacyLevelType;
    }
    if (args.yearEnabled !== undefined && args.yearEnabled !== null) {
      this.yearEnabled = args.yearEnabled;
    }
    if (args.day !== undefined && args.day !== null) {
      this.day = args.day;
    }
    if (args.dayPrivacyLevelType !== undefined && args.dayPrivacyLevelType !== null) {
      this.dayPrivacyLevelType = args.dayPrivacyLevelType;
    }
    if (args.dayEnabled !== undefined && args.dayEnabled !== null) {
      this.dayEnabled = args.dayEnabled;
    }
  }
};
ExtendedProfileBirthday.prototype = {};
ExtendedProfileBirthday.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.year = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.yearPrivacyLevelType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.yearEnabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.day = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.dayPrivacyLevelType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.dayEnabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExtendedProfileBirthday.prototype.write = function(output) {
  output.writeStructBegin('ExtendedProfileBirthday');
  if (this.year !== null && this.year !== undefined) {
    output.writeFieldBegin('year', Thrift.Type.STRING, 1);
    output.writeString(this.year);
    output.writeFieldEnd();
  }
  if (this.yearPrivacyLevelType !== null && this.yearPrivacyLevelType !== undefined) {
    output.writeFieldBegin('yearPrivacyLevelType', Thrift.Type.I32, 2);
    output.writeI32(this.yearPrivacyLevelType);
    output.writeFieldEnd();
  }
  if (this.yearEnabled !== null && this.yearEnabled !== undefined) {
    output.writeFieldBegin('yearEnabled', Thrift.Type.BOOL, 3);
    output.writeBool(this.yearEnabled);
    output.writeFieldEnd();
  }
  if (this.day !== null && this.day !== undefined) {
    output.writeFieldBegin('day', Thrift.Type.STRING, 5);
    output.writeString(this.day);
    output.writeFieldEnd();
  }
  if (this.dayPrivacyLevelType !== null && this.dayPrivacyLevelType !== undefined) {
    output.writeFieldBegin('dayPrivacyLevelType', Thrift.Type.I32, 6);
    output.writeI32(this.dayPrivacyLevelType);
    output.writeFieldEnd();
  }
  if (this.dayEnabled !== null && this.dayEnabled !== undefined) {
    output.writeFieldBegin('dayEnabled', Thrift.Type.BOOL, 7);
    output.writeBool(this.dayEnabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExtendedProfile = function(args) {
  this.birthday = null;
  if (args) {
    if (args.birthday !== undefined && args.birthday !== null) {
      this.birthday = new ExtendedProfileBirthday(args.birthday);
    }
  }
};
ExtendedProfile.prototype = {};
ExtendedProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.birthday = new ExtendedProfileBirthday();
        this.birthday.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExtendedProfile.prototype.write = function(output) {
  output.writeStructBegin('ExtendedProfile');
  if (this.birthday !== null && this.birthday !== undefined) {
    output.writeFieldBegin('birthday', Thrift.Type.STRUCT, 1);
    this.birthday.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PaidCallDialing = function(args) {
  this.type = null;
  this.dialedNumber = null;
  this.serviceDomain = null;
  this.productType = null;
  this.productName = null;
  this.multipleProduct = null;
  this.callerIdStatus = null;
  this.balance = null;
  this.unit = null;
  this.rate = null;
  this.displayCode = null;
  this.calledNumber = null;
  this.calleeNationalNumber = null;
  this.calleeCallingCode = null;
  this.rateDivision = null;
  this.adMaxMin = null;
  this.adRemains = null;
  this.adSessionId = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.dialedNumber !== undefined && args.dialedNumber !== null) {
      this.dialedNumber = args.dialedNumber;
    }
    if (args.serviceDomain !== undefined && args.serviceDomain !== null) {
      this.serviceDomain = args.serviceDomain;
    }
    if (args.productType !== undefined && args.productType !== null) {
      this.productType = args.productType;
    }
    if (args.productName !== undefined && args.productName !== null) {
      this.productName = args.productName;
    }
    if (args.multipleProduct !== undefined && args.multipleProduct !== null) {
      this.multipleProduct = args.multipleProduct;
    }
    if (args.callerIdStatus !== undefined && args.callerIdStatus !== null) {
      this.callerIdStatus = args.callerIdStatus;
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = args.balance;
    }
    if (args.unit !== undefined && args.unit !== null) {
      this.unit = args.unit;
    }
    if (args.rate !== undefined && args.rate !== null) {
      this.rate = args.rate;
    }
    if (args.displayCode !== undefined && args.displayCode !== null) {
      this.displayCode = args.displayCode;
    }
    if (args.calledNumber !== undefined && args.calledNumber !== null) {
      this.calledNumber = args.calledNumber;
    }
    if (args.calleeNationalNumber !== undefined && args.calleeNationalNumber !== null) {
      this.calleeNationalNumber = args.calleeNationalNumber;
    }
    if (args.calleeCallingCode !== undefined && args.calleeCallingCode !== null) {
      this.calleeCallingCode = args.calleeCallingCode;
    }
    if (args.rateDivision !== undefined && args.rateDivision !== null) {
      this.rateDivision = args.rateDivision;
    }
    if (args.adMaxMin !== undefined && args.adMaxMin !== null) {
      this.adMaxMin = args.adMaxMin;
    }
    if (args.adRemains !== undefined && args.adRemains !== null) {
      this.adRemains = args.adRemains;
    }
    if (args.adSessionId !== undefined && args.adSessionId !== null) {
      this.adSessionId = args.adSessionId;
    }
  }
};
PaidCallDialing.prototype = {};
PaidCallDialing.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dialedNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceDomain = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.productType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.multipleProduct = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.callerIdStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.balance = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.unit = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.rate = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.displayCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.calledNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.calleeNationalNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.calleeCallingCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.rateDivision = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.adMaxMin = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.adRemains = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.adSessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallDialing.prototype.write = function(output) {
  output.writeStructBegin('PaidCallDialing');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.dialedNumber !== null && this.dialedNumber !== undefined) {
    output.writeFieldBegin('dialedNumber', Thrift.Type.STRING, 2);
    output.writeString(this.dialedNumber);
    output.writeFieldEnd();
  }
  if (this.serviceDomain !== null && this.serviceDomain !== undefined) {
    output.writeFieldBegin('serviceDomain', Thrift.Type.STRING, 3);
    output.writeString(this.serviceDomain);
    output.writeFieldEnd();
  }
  if (this.productType !== null && this.productType !== undefined) {
    output.writeFieldBegin('productType', Thrift.Type.I32, 4);
    output.writeI32(this.productType);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 5);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.multipleProduct !== null && this.multipleProduct !== undefined) {
    output.writeFieldBegin('multipleProduct', Thrift.Type.BOOL, 6);
    output.writeBool(this.multipleProduct);
    output.writeFieldEnd();
  }
  if (this.callerIdStatus !== null && this.callerIdStatus !== undefined) {
    output.writeFieldBegin('callerIdStatus', Thrift.Type.I32, 7);
    output.writeI32(this.callerIdStatus);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.I32, 10);
    output.writeI32(this.balance);
    output.writeFieldEnd();
  }
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.STRING, 11);
    output.writeString(this.unit);
    output.writeFieldEnd();
  }
  if (this.rate !== null && this.rate !== undefined) {
    output.writeFieldBegin('rate', Thrift.Type.I32, 12);
    output.writeI32(this.rate);
    output.writeFieldEnd();
  }
  if (this.displayCode !== null && this.displayCode !== undefined) {
    output.writeFieldBegin('displayCode', Thrift.Type.STRING, 13);
    output.writeString(this.displayCode);
    output.writeFieldEnd();
  }
  if (this.calledNumber !== null && this.calledNumber !== undefined) {
    output.writeFieldBegin('calledNumber', Thrift.Type.STRING, 14);
    output.writeString(this.calledNumber);
    output.writeFieldEnd();
  }
  if (this.calleeNationalNumber !== null && this.calleeNationalNumber !== undefined) {
    output.writeFieldBegin('calleeNationalNumber', Thrift.Type.STRING, 15);
    output.writeString(this.calleeNationalNumber);
    output.writeFieldEnd();
  }
  if (this.calleeCallingCode !== null && this.calleeCallingCode !== undefined) {
    output.writeFieldBegin('calleeCallingCode', Thrift.Type.STRING, 16);
    output.writeString(this.calleeCallingCode);
    output.writeFieldEnd();
  }
  if (this.rateDivision !== null && this.rateDivision !== undefined) {
    output.writeFieldBegin('rateDivision', Thrift.Type.STRING, 17);
    output.writeString(this.rateDivision);
    output.writeFieldEnd();
  }
  if (this.adMaxMin !== null && this.adMaxMin !== undefined) {
    output.writeFieldBegin('adMaxMin', Thrift.Type.I32, 20);
    output.writeI32(this.adMaxMin);
    output.writeFieldEnd();
  }
  if (this.adRemains !== null && this.adRemains !== undefined) {
    output.writeFieldBegin('adRemains', Thrift.Type.I32, 21);
    output.writeI32(this.adRemains);
    output.writeFieldEnd();
  }
  if (this.adSessionId !== null && this.adSessionId !== undefined) {
    output.writeFieldBegin('adSessionId', Thrift.Type.STRING, 22);
    output.writeString(this.adSessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SpotItem = function(args) {
  this.name = null;
  this.phone = null;
  this.category = null;
  this.mid = null;
  this.countryAreaCode = null;
  this.freePhoneCallable = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.countryAreaCode !== undefined && args.countryAreaCode !== null) {
      this.countryAreaCode = args.countryAreaCode;
    }
    if (args.freePhoneCallable !== undefined && args.freePhoneCallable !== null) {
      this.freePhoneCallable = args.freePhoneCallable;
    }
  }
};
SpotItem.prototype = {};
SpotItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.category = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.countryAreaCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.freePhoneCallable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpotItem.prototype.write = function(output) {
  output.writeStructBegin('SpotItem');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 3);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.I32, 4);
    output.writeI32(this.category);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 5);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.countryAreaCode !== null && this.countryAreaCode !== undefined) {
    output.writeFieldBegin('countryAreaCode', Thrift.Type.STRING, 6);
    output.writeString(this.countryAreaCode);
    output.writeFieldEnd();
  }
  if (this.freePhoneCallable !== null && this.freePhoneCallable !== undefined) {
    output.writeFieldBegin('freePhoneCallable', Thrift.Type.BOOL, 10);
    output.writeBool(this.freePhoneCallable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SpotNearbyItem = function(args) {
  this.spotItem = null;
  this.location = null;
  if (args) {
    if (args.spotItem !== undefined && args.spotItem !== null) {
      this.spotItem = new SpotItem(args.spotItem);
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new Location(args.location);
    }
  }
};
SpotNearbyItem.prototype = {};
SpotNearbyItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spotItem = new SpotItem();
        this.spotItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpotNearbyItem.prototype.write = function(output) {
  output.writeStructBegin('SpotNearbyItem');
  if (this.spotItem !== null && this.spotItem !== undefined) {
    output.writeFieldBegin('spotItem', Thrift.Type.STRUCT, 2);
    this.spotItem.write(output);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 11);
    this.location.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SpotNearbyResponse = function(args) {
  this.spotNearbyItems = null;
  if (args) {
    if (args.spotNearbyItems !== undefined && args.spotNearbyItems !== null) {
      this.spotNearbyItems = Thrift.copyList(args.spotNearbyItems, [SpotNearbyItem]);
    }
  }
};
SpotNearbyResponse.prototype = {};
SpotNearbyResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.spotNearbyItems = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new SpotNearbyItem();
          elem13.read(input);
          this.spotNearbyItems.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpotNearbyResponse.prototype.write = function(output) {
  output.writeStructBegin('SpotNearbyResponse');
  if (this.spotNearbyItems !== null && this.spotNearbyItems !== undefined) {
    output.writeFieldBegin('spotNearbyItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.spotNearbyItems.length);
    for (var iter14 in this.spotNearbyItems) {
      if (this.spotNearbyItems.hasOwnProperty(iter14)) {
        iter14 = this.spotNearbyItems[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SpotPhoneNumberResponse = function(args) {
  this.spotItems = null;
  if (args) {
    if (args.spotItems !== undefined && args.spotItems !== null) {
      this.spotItems = Thrift.copyList(args.spotItems, [SpotItem]);
    }
  }
};
SpotPhoneNumberResponse.prototype = {};
SpotPhoneNumberResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.spotItems = [];
        var _rtmp316 = input.readListBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var elem18 = null;
          elem18 = new SpotItem();
          elem18.read(input);
          this.spotItems.push(elem18);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpotPhoneNumberResponse.prototype.write = function(output) {
  output.writeStructBegin('SpotPhoneNumberResponse');
  if (this.spotItems !== null && this.spotItems !== undefined) {
    output.writeFieldBegin('spotItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.spotItems.length);
    for (var iter19 in this.spotItems) {
      if (this.spotItems.hasOwnProperty(iter19)) {
        iter19 = this.spotItems[iter19];
        iter19.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PaidCallHistory = function(args) {
  this.seq = null;
  this.type = null;
  this.dialedNumber = null;
  this.calledNumber = null;
  this.toMid = null;
  this.toName = null;
  this.setupTime = null;
  this.startTime = null;
  this.endTime = null;
  this.duration = null;
  this.terminate = null;
  this.productType = null;
  this.charge = null;
  this.unit = null;
  this.result = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.dialedNumber !== undefined && args.dialedNumber !== null) {
      this.dialedNumber = args.dialedNumber;
    }
    if (args.calledNumber !== undefined && args.calledNumber !== null) {
      this.calledNumber = args.calledNumber;
    }
    if (args.toMid !== undefined && args.toMid !== null) {
      this.toMid = args.toMid;
    }
    if (args.toName !== undefined && args.toName !== null) {
      this.toName = args.toName;
    }
    if (args.setupTime !== undefined && args.setupTime !== null) {
      this.setupTime = args.setupTime;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.duration !== undefined && args.duration !== null) {
      this.duration = args.duration;
    }
    if (args.terminate !== undefined && args.terminate !== null) {
      this.terminate = args.terminate;
    }
    if (args.productType !== undefined && args.productType !== null) {
      this.productType = args.productType;
    }
    if (args.charge !== undefined && args.charge !== null) {
      this.charge = args.charge;
    }
    if (args.unit !== undefined && args.unit !== null) {
      this.unit = args.unit;
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
  }
};
PaidCallHistory.prototype = {};
PaidCallHistory.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.seq = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dialedNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.calledNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.toMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.toName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.setupTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.duration = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.terminate = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.productType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.charge = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.unit = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.result = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallHistory.prototype.write = function(output) {
  output.writeStructBegin('PaidCallHistory');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I64, 1);
    output.writeI64(this.seq);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.dialedNumber !== null && this.dialedNumber !== undefined) {
    output.writeFieldBegin('dialedNumber', Thrift.Type.STRING, 3);
    output.writeString(this.dialedNumber);
    output.writeFieldEnd();
  }
  if (this.calledNumber !== null && this.calledNumber !== undefined) {
    output.writeFieldBegin('calledNumber', Thrift.Type.STRING, 4);
    output.writeString(this.calledNumber);
    output.writeFieldEnd();
  }
  if (this.toMid !== null && this.toMid !== undefined) {
    output.writeFieldBegin('toMid', Thrift.Type.STRING, 5);
    output.writeString(this.toMid);
    output.writeFieldEnd();
  }
  if (this.toName !== null && this.toName !== undefined) {
    output.writeFieldBegin('toName', Thrift.Type.STRING, 6);
    output.writeString(this.toName);
    output.writeFieldEnd();
  }
  if (this.setupTime !== null && this.setupTime !== undefined) {
    output.writeFieldBegin('setupTime', Thrift.Type.I64, 7);
    output.writeI64(this.setupTime);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 8);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 9);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I64, 10);
    output.writeI64(this.duration);
    output.writeFieldEnd();
  }
  if (this.terminate !== null && this.terminate !== undefined) {
    output.writeFieldBegin('terminate', Thrift.Type.I32, 11);
    output.writeI32(this.terminate);
    output.writeFieldEnd();
  }
  if (this.productType !== null && this.productType !== undefined) {
    output.writeFieldBegin('productType', Thrift.Type.I32, 12);
    output.writeI32(this.productType);
    output.writeFieldEnd();
  }
  if (this.charge !== null && this.charge !== undefined) {
    output.writeFieldBegin('charge', Thrift.Type.I32, 13);
    output.writeI32(this.charge);
    output.writeFieldEnd();
  }
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.STRING, 14);
    output.writeString(this.unit);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRING, 15);
    output.writeString(this.result);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PaidCallHistoryResult = function(args) {
  this.historys = null;
  this.hasNext = null;
  if (args) {
    if (args.historys !== undefined && args.historys !== null) {
      this.historys = Thrift.copyList(args.historys, [PaidCallHistory]);
    }
    if (args.hasNext !== undefined && args.hasNext !== null) {
      this.hasNext = args.hasNext;
    }
  }
};
PaidCallHistoryResult.prototype = {};
PaidCallHistoryResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.historys = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = new PaidCallHistory();
          elem23.read(input);
          this.historys.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.hasNext = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallHistoryResult.prototype.write = function(output) {
  output.writeStructBegin('PaidCallHistoryResult');
  if (this.historys !== null && this.historys !== undefined) {
    output.writeFieldBegin('historys', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.historys.length);
    for (var iter24 in this.historys) {
      if (this.historys.hasOwnProperty(iter24)) {
        iter24 = this.historys[iter24];
        iter24.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hasNext !== null && this.hasNext !== undefined) {
    output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 2);
    output.writeBool(this.hasNext);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PaidCallMetadataResult = function(args) {
  this.currencyExchangeRates = null;
  this.recommendedCountryCodes = null;
  this.adCountries = null;
  if (args) {
    if (args.currencyExchangeRates !== undefined && args.currencyExchangeRates !== null) {
      this.currencyExchangeRates = Thrift.copyList(args.currencyExchangeRates, [PaidCallCurrencyExchangeRate]);
    }
    if (args.recommendedCountryCodes !== undefined && args.recommendedCountryCodes !== null) {
      this.recommendedCountryCodes = Thrift.copyList(args.recommendedCountryCodes, [null]);
    }
    if (args.adCountries !== undefined && args.adCountries !== null) {
      this.adCountries = Thrift.copyList(args.adCountries, [PaidCallAdCountry]);
    }
  }
};
PaidCallMetadataResult.prototype = {};
PaidCallMetadataResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.currencyExchangeRates = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = new PaidCallCurrencyExchangeRate();
          elem28.read(input);
          this.currencyExchangeRates.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.recommendedCountryCodes = [];
        var _rtmp330 = input.readListBegin();
        var _size29 = _rtmp330.size || 0;
        for (var _i31 = 0; _i31 < _size29; ++_i31) {
          var elem32 = null;
          elem32 = input.readString().value;
          this.recommendedCountryCodes.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.adCountries = [];
        var _rtmp334 = input.readListBegin();
        var _size33 = _rtmp334.size || 0;
        for (var _i35 = 0; _i35 < _size33; ++_i35) {
          var elem36 = null;
          elem36 = new PaidCallAdCountry();
          elem36.read(input);
          this.adCountries.push(elem36);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallMetadataResult.prototype.write = function(output) {
  output.writeStructBegin('PaidCallMetadataResult');
  if (this.currencyExchangeRates !== null && this.currencyExchangeRates !== undefined) {
    output.writeFieldBegin('currencyExchangeRates', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.currencyExchangeRates.length);
    for (var iter37 in this.currencyExchangeRates) {
      if (this.currencyExchangeRates.hasOwnProperty(iter37)) {
        iter37 = this.currencyExchangeRates[iter37];
        iter37.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.recommendedCountryCodes !== null && this.recommendedCountryCodes !== undefined) {
    output.writeFieldBegin('recommendedCountryCodes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.recommendedCountryCodes.length);
    for (var iter38 in this.recommendedCountryCodes) {
      if (this.recommendedCountryCodes.hasOwnProperty(iter38)) {
        iter38 = this.recommendedCountryCodes[iter38];
        output.writeString(iter38);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.adCountries !== null && this.adCountries !== undefined) {
    output.writeFieldBegin('adCountries', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.adCountries.length);
    for (var iter39 in this.adCountries) {
      if (this.adCountries.hasOwnProperty(iter39)) {
        iter39 = this.adCountries[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PaidCallRedeemResult = function(args) {
  this.eventName = null;
  this.eventAmount = null;
  if (args) {
    if (args.eventName !== undefined && args.eventName !== null) {
      this.eventName = args.eventName;
    }
    if (args.eventAmount !== undefined && args.eventAmount !== null) {
      this.eventAmount = args.eventAmount;
    }
  }
};
PaidCallRedeemResult.prototype = {};
PaidCallRedeemResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.eventName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.eventAmount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallRedeemResult.prototype.write = function(output) {
  output.writeStructBegin('PaidCallRedeemResult');
  if (this.eventName !== null && this.eventName !== undefined) {
    output.writeFieldBegin('eventName', Thrift.Type.STRING, 1);
    output.writeString(this.eventName);
    output.writeFieldEnd();
  }
  if (this.eventAmount !== null && this.eventAmount !== undefined) {
    output.writeFieldBegin('eventAmount', Thrift.Type.I32, 2);
    output.writeI32(this.eventAmount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PaidCallResponse = function(args) {
  this.host = null;
  this.dialing = null;
  this.token = null;
  this.spotItems = null;
  if (args) {
    if (args.host !== undefined && args.host !== null) {
      this.host = new CallHost(args.host);
    }
    if (args.dialing !== undefined && args.dialing !== null) {
      this.dialing = new PaidCallDialing(args.dialing);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.spotItems !== undefined && args.spotItems !== null) {
      this.spotItems = Thrift.copyList(args.spotItems, [SpotItem]);
    }
  }
};
PaidCallResponse.prototype = {};
PaidCallResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.host = new CallHost();
        this.host.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dialing = new PaidCallDialing();
        this.dialing.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.spotItems = [];
        var _rtmp341 = input.readListBegin();
        var _size40 = _rtmp341.size || 0;
        for (var _i42 = 0; _i42 < _size40; ++_i42) {
          var elem43 = null;
          elem43 = new SpotItem();
          elem43.read(input);
          this.spotItems.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallResponse.prototype.write = function(output) {
  output.writeStructBegin('PaidCallResponse');
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRUCT, 1);
    this.host.write(output);
    output.writeFieldEnd();
  }
  if (this.dialing !== null && this.dialing !== undefined) {
    output.writeFieldBegin('dialing', Thrift.Type.STRUCT, 2);
    this.dialing.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 3);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.spotItems !== null && this.spotItems !== undefined) {
    output.writeFieldBegin('spotItems', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.spotItems.length);
    for (var iter44 in this.spotItems) {
      if (this.spotItems.hasOwnProperty(iter44)) {
        iter44 = this.spotItems[iter44];
        iter44.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PaidCallUserRate = function(args) {
  this.countryCode = null;
  this.rate = null;
  this.rateDivision = null;
  this.rateName = null;
  if (args) {
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
    if (args.rate !== undefined && args.rate !== null) {
      this.rate = args.rate;
    }
    if (args.rateDivision !== undefined && args.rateDivision !== null) {
      this.rateDivision = args.rateDivision;
    }
    if (args.rateName !== undefined && args.rateName !== null) {
      this.rateName = args.rateName;
    }
  }
};
PaidCallUserRate.prototype = {};
PaidCallUserRate.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.rate = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.rateDivision = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.rateName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallUserRate.prototype.write = function(output) {
  output.writeStructBegin('PaidCallUserRate');
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 1);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.rate !== null && this.rate !== undefined) {
    output.writeFieldBegin('rate', Thrift.Type.I32, 2);
    output.writeI32(this.rate);
    output.writeFieldEnd();
  }
  if (this.rateDivision !== null && this.rateDivision !== undefined) {
    output.writeFieldBegin('rateDivision', Thrift.Type.STRING, 3);
    output.writeString(this.rateDivision);
    output.writeFieldEnd();
  }
  if (this.rateName !== null && this.rateName !== undefined) {
    output.writeFieldBegin('rateName', Thrift.Type.STRING, 4);
    output.writeString(this.rateName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelInfo = function(args) {
  this.channelId = null;
  this.name = null;
  this.entryPageUrl = null;
  this.descriptionText = null;
  this.provider = null;
  this.publicType = null;
  this.iconImage = null;
  this.permissions = null;
  this.iconThumbnailImage = null;
  this.channelConfigurations = null;
  this.lcsAllApiUsable = null;
  this.allowedPermissions = null;
  this.channelDomains = null;
  this.updatedTimestamp = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.entryPageUrl !== undefined && args.entryPageUrl !== null) {
      this.entryPageUrl = args.entryPageUrl;
    }
    if (args.descriptionText !== undefined && args.descriptionText !== null) {
      this.descriptionText = args.descriptionText;
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = new ChannelProvider(args.provider);
    }
    if (args.publicType !== undefined && args.publicType !== null) {
      this.publicType = args.publicType;
    }
    if (args.iconImage !== undefined && args.iconImage !== null) {
      this.iconImage = args.iconImage;
    }
    if (args.permissions !== undefined && args.permissions !== null) {
      this.permissions = Thrift.copyList(args.permissions, [null]);
    }
    if (args.iconThumbnailImage !== undefined && args.iconThumbnailImage !== null) {
      this.iconThumbnailImage = args.iconThumbnailImage;
    }
    if (args.channelConfigurations !== undefined && args.channelConfigurations !== null) {
      this.channelConfigurations = Thrift.copyList(args.channelConfigurations, [null]);
    }
    if (args.lcsAllApiUsable !== undefined && args.lcsAllApiUsable !== null) {
      this.lcsAllApiUsable = args.lcsAllApiUsable;
    }
    if (args.allowedPermissions !== undefined && args.allowedPermissions !== null) {
      this.allowedPermissions = Thrift.copyList(args.allowedPermissions, [null]);
    }
    if (args.channelDomains !== undefined && args.channelDomains !== null) {
      this.channelDomains = Thrift.copyList(args.channelDomains, [ChannelDomain]);
    }
    if (args.updatedTimestamp !== undefined && args.updatedTimestamp !== null) {
      this.updatedTimestamp = args.updatedTimestamp;
    }
  }
};
ChannelInfo.prototype = {};
ChannelInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.entryPageUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.descriptionText = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.provider = new ChannelProvider();
        this.provider.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.publicType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.iconImage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        this.permissions = [];
        var _rtmp346 = input.readListBegin();
        var _size45 = _rtmp346.size || 0;
        for (var _i47 = 0; _i47 < _size45; ++_i47) {
          var elem48 = null;
          elem48 = input.readString().value;
          this.permissions.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.iconThumbnailImage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        this.channelConfigurations = [];
        var _rtmp350 = input.readListBegin();
        var _size49 = _rtmp350.size || 0;
        for (var _i51 = 0; _i51 < _size49; ++_i51) {
          var elem52 = null;
          elem52 = input.readI32().value;
          this.channelConfigurations.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.lcsAllApiUsable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.SET) {
        this.allowedPermissions = [];
        var _rtmp354 = input.readSetBegin();
        var _size53 = _rtmp354.size || 0;
        for (var _i55 = 0; _i55 < _size53; ++_i55) {
          var elem56 = null;
          elem56 = input.readI32().value;
          this.allowedPermissions.push(elem56);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        this.channelDomains = [];
        var _rtmp358 = input.readListBegin();
        var _size57 = _rtmp358.size || 0;
        for (var _i59 = 0; _i59 < _size57; ++_i59) {
          var elem60 = null;
          elem60 = new ChannelDomain();
          elem60.read(input);
          this.channelDomains.push(elem60);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.updatedTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelInfo.prototype.write = function(output) {
  output.writeStructBegin('ChannelInfo');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.entryPageUrl !== null && this.entryPageUrl !== undefined) {
    output.writeFieldBegin('entryPageUrl', Thrift.Type.STRING, 4);
    output.writeString(this.entryPageUrl);
    output.writeFieldEnd();
  }
  if (this.descriptionText !== null && this.descriptionText !== undefined) {
    output.writeFieldBegin('descriptionText', Thrift.Type.STRING, 5);
    output.writeString(this.descriptionText);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.STRUCT, 6);
    this.provider.write(output);
    output.writeFieldEnd();
  }
  if (this.publicType !== null && this.publicType !== undefined) {
    output.writeFieldBegin('publicType', Thrift.Type.I32, 7);
    output.writeI32(this.publicType);
    output.writeFieldEnd();
  }
  if (this.iconImage !== null && this.iconImage !== undefined) {
    output.writeFieldBegin('iconImage', Thrift.Type.STRING, 8);
    output.writeString(this.iconImage);
    output.writeFieldEnd();
  }
  if (this.permissions !== null && this.permissions !== undefined) {
    output.writeFieldBegin('permissions', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.permissions.length);
    for (var iter61 in this.permissions) {
      if (this.permissions.hasOwnProperty(iter61)) {
        iter61 = this.permissions[iter61];
        output.writeString(iter61);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.iconThumbnailImage !== null && this.iconThumbnailImage !== undefined) {
    output.writeFieldBegin('iconThumbnailImage', Thrift.Type.STRING, 11);
    output.writeString(this.iconThumbnailImage);
    output.writeFieldEnd();
  }
  if (this.channelConfigurations !== null && this.channelConfigurations !== undefined) {
    output.writeFieldBegin('channelConfigurations', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.I32, this.channelConfigurations.length);
    for (var iter62 in this.channelConfigurations) {
      if (this.channelConfigurations.hasOwnProperty(iter62)) {
        iter62 = this.channelConfigurations[iter62];
        output.writeI32(iter62);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lcsAllApiUsable !== null && this.lcsAllApiUsable !== undefined) {
    output.writeFieldBegin('lcsAllApiUsable', Thrift.Type.BOOL, 13);
    output.writeBool(this.lcsAllApiUsable);
    output.writeFieldEnd();
  }
  if (this.allowedPermissions !== null && this.allowedPermissions !== undefined) {
    output.writeFieldBegin('allowedPermissions', Thrift.Type.SET, 14);
    output.writeSetBegin(Thrift.Type.I32, this.allowedPermissions.length);
    for (var iter63 in this.allowedPermissions) {
      if (this.allowedPermissions.hasOwnProperty(iter63)) {
        iter63 = this.allowedPermissions[iter63];
        output.writeI32(iter63);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.channelDomains !== null && this.channelDomains !== undefined) {
    output.writeFieldBegin('channelDomains', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRUCT, this.channelDomains.length);
    for (var iter64 in this.channelDomains) {
      if (this.channelDomains.hasOwnProperty(iter64)) {
        iter64 = this.channelDomains[iter64];
        iter64.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.updatedTimestamp !== null && this.updatedTimestamp !== undefined) {
    output.writeFieldBegin('updatedTimestamp', Thrift.Type.I64, 16);
    output.writeI64(this.updatedTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ApprovedChannelInfo = function(args) {
  this.channelInfo = null;
  this.approvedAt = null;
  if (args) {
    if (args.channelInfo !== undefined && args.channelInfo !== null) {
      this.channelInfo = new ChannelInfo(args.channelInfo);
    }
    if (args.approvedAt !== undefined && args.approvedAt !== null) {
      this.approvedAt = args.approvedAt;
    }
  }
};
ApprovedChannelInfo.prototype = {};
ApprovedChannelInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.channelInfo = new ChannelInfo();
        this.channelInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.approvedAt = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApprovedChannelInfo.prototype.write = function(output) {
  output.writeStructBegin('ApprovedChannelInfo');
  if (this.channelInfo !== null && this.channelInfo !== undefined) {
    output.writeFieldBegin('channelInfo', Thrift.Type.STRUCT, 1);
    this.channelInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.approvedAt !== null && this.approvedAt !== undefined) {
    output.writeFieldBegin('approvedAt', Thrift.Type.I64, 2);
    output.writeI64(this.approvedAt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ApprovedChannelInfos = function(args) {
  this.approvedChannelInfos = null;
  this.revision = null;
  if (args) {
    if (args.approvedChannelInfos !== undefined && args.approvedChannelInfos !== null) {
      this.approvedChannelInfos = Thrift.copyList(args.approvedChannelInfos, [ApprovedChannelInfo]);
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
  }
};
ApprovedChannelInfos.prototype = {};
ApprovedChannelInfos.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.approvedChannelInfos = [];
        var _rtmp366 = input.readListBegin();
        var _size65 = _rtmp366.size || 0;
        for (var _i67 = 0; _i67 < _size65; ++_i67) {
          var elem68 = null;
          elem68 = new ApprovedChannelInfo();
          elem68.read(input);
          this.approvedChannelInfos.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApprovedChannelInfos.prototype.write = function(output) {
  output.writeStructBegin('ApprovedChannelInfos');
  if (this.approvedChannelInfos !== null && this.approvedChannelInfos !== undefined) {
    output.writeFieldBegin('approvedChannelInfos', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.approvedChannelInfos.length);
    for (var iter69 in this.approvedChannelInfos) {
      if (this.approvedChannelInfos.hasOwnProperty(iter69)) {
        iter69 = this.approvedChannelInfos[iter69];
        iter69.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 2);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthQrcode = function(args) {
  this.qrcode = null;
  this.verifier = null;
  this.callbackUrl = null;
  if (args) {
    if (args.qrcode !== undefined && args.qrcode !== null) {
      this.qrcode = args.qrcode;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.callbackUrl !== undefined && args.callbackUrl !== null) {
      this.callbackUrl = args.callbackUrl;
    }
  }
};
AuthQrcode.prototype = {};
AuthQrcode.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.qrcode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.callbackUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthQrcode.prototype.write = function(output) {
  output.writeStructBegin('AuthQrcode');
  if (this.qrcode !== null && this.qrcode !== undefined) {
    output.writeFieldBegin('qrcode', Thrift.Type.STRING, 1);
    output.writeString(this.qrcode);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 2);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.callbackUrl !== null && this.callbackUrl !== undefined) {
    output.writeFieldBegin('callbackUrl', Thrift.Type.STRING, 3);
    output.writeString(this.callbackUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnalyticsInfo = function(args) {
  this.gaSamplingRate = null;
  this.tmid = null;
  if (args) {
    if (args.gaSamplingRate !== undefined && args.gaSamplingRate !== null) {
      this.gaSamplingRate = args.gaSamplingRate;
    }
    if (args.tmid !== undefined && args.tmid !== null) {
      this.tmid = args.tmid;
    }
  }
};
AnalyticsInfo.prototype = {};
AnalyticsInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.gaSamplingRate = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tmid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnalyticsInfo.prototype.write = function(output) {
  output.writeStructBegin('AnalyticsInfo');
  if (this.gaSamplingRate !== null && this.gaSamplingRate !== undefined) {
    output.writeFieldBegin('gaSamplingRate', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.gaSamplingRate);
    output.writeFieldEnd();
  }
  if (this.tmid !== null && this.tmid !== undefined) {
    output.writeFieldBegin('tmid', Thrift.Type.STRING, 2);
    output.writeString(this.tmid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContactTransition = function(args) {
  this.ownerMid = null;
  this.targetMid = null;
  this.previousStatus = null;
  this.resultStatus = null;
  if (args) {
    if (args.ownerMid !== undefined && args.ownerMid !== null) {
      this.ownerMid = args.ownerMid;
    }
    if (args.targetMid !== undefined && args.targetMid !== null) {
      this.targetMid = args.targetMid;
    }
    if (args.previousStatus !== undefined && args.previousStatus !== null) {
      this.previousStatus = args.previousStatus;
    }
    if (args.resultStatus !== undefined && args.resultStatus !== null) {
      this.resultStatus = args.resultStatus;
    }
  }
};
ContactTransition.prototype = {};
ContactTransition.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ownerMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.targetMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.previousStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.resultStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactTransition.prototype.write = function(output) {
  output.writeStructBegin('ContactTransition');
  if (this.ownerMid !== null && this.ownerMid !== undefined) {
    output.writeFieldBegin('ownerMid', Thrift.Type.STRING, 1);
    output.writeString(this.ownerMid);
    output.writeFieldEnd();
  }
  if (this.targetMid !== null && this.targetMid !== undefined) {
    output.writeFieldBegin('targetMid', Thrift.Type.STRING, 2);
    output.writeString(this.targetMid);
    output.writeFieldEnd();
  }
  if (this.previousStatus !== null && this.previousStatus !== undefined) {
    output.writeFieldBegin('previousStatus', Thrift.Type.I32, 3);
    output.writeI32(this.previousStatus);
    output.writeFieldEnd();
  }
  if (this.resultStatus !== null && this.resultStatus !== undefined) {
    output.writeFieldBegin('resultStatus', Thrift.Type.I32, 4);
    output.writeI32(this.resultStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserTicketResponse = function(args) {
  this.mid = null;
  this.userTicket = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.userTicket !== undefined && args.userTicket !== null) {
      this.userTicket = args.userTicket;
    }
  }
};
UserTicketResponse.prototype = {};
UserTicketResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userTicket = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserTicketResponse.prototype.write = function(output) {
  output.writeStructBegin('UserTicketResponse');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.userTicket !== null && this.userTicket !== undefined) {
    output.writeFieldBegin('userTicket', Thrift.Type.STRING, 2);
    output.writeString(this.userTicket);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyBanner = function(args) {
  this.buddyBannerLinkType = null;
  this.buddyBannerLink = null;
  this.buddyBannerImageUrl = null;
  if (args) {
    if (args.buddyBannerLinkType !== undefined && args.buddyBannerLinkType !== null) {
      this.buddyBannerLinkType = args.buddyBannerLinkType;
    }
    if (args.buddyBannerLink !== undefined && args.buddyBannerLink !== null) {
      this.buddyBannerLink = args.buddyBannerLink;
    }
    if (args.buddyBannerImageUrl !== undefined && args.buddyBannerImageUrl !== null) {
      this.buddyBannerImageUrl = args.buddyBannerImageUrl;
    }
  }
};
BuddyBanner.prototype = {};
BuddyBanner.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.buddyBannerLinkType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyBannerLink = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.buddyBannerImageUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyBanner.prototype.write = function(output) {
  output.writeStructBegin('BuddyBanner');
  if (this.buddyBannerLinkType !== null && this.buddyBannerLinkType !== undefined) {
    output.writeFieldBegin('buddyBannerLinkType', Thrift.Type.I32, 1);
    output.writeI32(this.buddyBannerLinkType);
    output.writeFieldEnd();
  }
  if (this.buddyBannerLink !== null && this.buddyBannerLink !== undefined) {
    output.writeFieldBegin('buddyBannerLink', Thrift.Type.STRING, 2);
    output.writeString(this.buddyBannerLink);
    output.writeFieldEnd();
  }
  if (this.buddyBannerImageUrl !== null && this.buddyBannerImageUrl !== undefined) {
    output.writeFieldBegin('buddyBannerImageUrl', Thrift.Type.STRING, 3);
    output.writeString(this.buddyBannerImageUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyDetail = function(args) {
  this.mid = null;
  this.memberCount = null;
  this.onAir = null;
  this.businessAccount = null;
  this.addable = null;
  this.acceptableContentTypes = null;
  this.capableMyhome = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.memberCount !== undefined && args.memberCount !== null) {
      this.memberCount = args.memberCount;
    }
    if (args.onAir !== undefined && args.onAir !== null) {
      this.onAir = args.onAir;
    }
    if (args.businessAccount !== undefined && args.businessAccount !== null) {
      this.businessAccount = args.businessAccount;
    }
    if (args.addable !== undefined && args.addable !== null) {
      this.addable = args.addable;
    }
    if (args.acceptableContentTypes !== undefined && args.acceptableContentTypes !== null) {
      this.acceptableContentTypes = Thrift.copyList(args.acceptableContentTypes, [null]);
    }
    if (args.capableMyhome !== undefined && args.capableMyhome !== null) {
      this.capableMyhome = args.capableMyhome;
    }
  }
};
BuddyDetail.prototype = {};
BuddyDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.memberCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.onAir = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.businessAccount = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.addable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.SET) {
        this.acceptableContentTypes = [];
        var _rtmp371 = input.readSetBegin();
        var _size70 = _rtmp371.size || 0;
        for (var _i72 = 0; _i72 < _size70; ++_i72) {
          var elem73 = null;
          elem73 = input.readI32().value;
          this.acceptableContentTypes.push(elem73);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.capableMyhome = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyDetail.prototype.write = function(output) {
  output.writeStructBegin('BuddyDetail');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.memberCount !== null && this.memberCount !== undefined) {
    output.writeFieldBegin('memberCount', Thrift.Type.I64, 2);
    output.writeI64(this.memberCount);
    output.writeFieldEnd();
  }
  if (this.onAir !== null && this.onAir !== undefined) {
    output.writeFieldBegin('onAir', Thrift.Type.BOOL, 3);
    output.writeBool(this.onAir);
    output.writeFieldEnd();
  }
  if (this.businessAccount !== null && this.businessAccount !== undefined) {
    output.writeFieldBegin('businessAccount', Thrift.Type.BOOL, 4);
    output.writeBool(this.businessAccount);
    output.writeFieldEnd();
  }
  if (this.addable !== null && this.addable !== undefined) {
    output.writeFieldBegin('addable', Thrift.Type.BOOL, 5);
    output.writeBool(this.addable);
    output.writeFieldEnd();
  }
  if (this.acceptableContentTypes !== null && this.acceptableContentTypes !== undefined) {
    output.writeFieldBegin('acceptableContentTypes', Thrift.Type.SET, 6);
    output.writeSetBegin(Thrift.Type.I32, this.acceptableContentTypes.length);
    for (var iter74 in this.acceptableContentTypes) {
      if (this.acceptableContentTypes.hasOwnProperty(iter74)) {
        iter74 = this.acceptableContentTypes[iter74];
        output.writeI32(iter74);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.capableMyhome !== null && this.capableMyhome !== undefined) {
    output.writeFieldBegin('capableMyhome', Thrift.Type.BOOL, 7);
    output.writeBool(this.capableMyhome);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Contact = function(args) {
  this.mid = null;
  this.createdTime = null;
  this.type = null;
  this.status = null;
  this.relation = null;
  this.displayName = null;
  this.phoneticName = null;
  this.pictureStatus = null;
  this.thumbnailUrl = null;
  this.statusMessage = null;
  this.displayNameOverridden = null;
  this.favoriteTime = null;
  this.capableVoiceCall = null;
  this.capableVideoCall = null;
  this.capableMyhome = null;
  this.capableBuddy = null;
  this.attributes = null;
  this.settings = null;
  this.picturePath = null;
  this.recommendParams = null;
  this.friendRequestStatus = null;
  this.musicProfile = null;
  this.videoProfile = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.relation !== undefined && args.relation !== null) {
      this.relation = args.relation;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.phoneticName !== undefined && args.phoneticName !== null) {
      this.phoneticName = args.phoneticName;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
      this.thumbnailUrl = args.thumbnailUrl;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.displayNameOverridden !== undefined && args.displayNameOverridden !== null) {
      this.displayNameOverridden = args.displayNameOverridden;
    }
    if (args.favoriteTime !== undefined && args.favoriteTime !== null) {
      this.favoriteTime = args.favoriteTime;
    }
    if (args.capableVoiceCall !== undefined && args.capableVoiceCall !== null) {
      this.capableVoiceCall = args.capableVoiceCall;
    }
    if (args.capableVideoCall !== undefined && args.capableVideoCall !== null) {
      this.capableVideoCall = args.capableVideoCall;
    }
    if (args.capableMyhome !== undefined && args.capableMyhome !== null) {
      this.capableMyhome = args.capableMyhome;
    }
    if (args.capableBuddy !== undefined && args.capableBuddy !== null) {
      this.capableBuddy = args.capableBuddy;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = args.attributes;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = args.settings;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.recommendParams !== undefined && args.recommendParams !== null) {
      this.recommendParams = args.recommendParams;
    }
    if (args.friendRequestStatus !== undefined && args.friendRequestStatus !== null) {
      this.friendRequestStatus = args.friendRequestStatus;
    }
    if (args.musicProfile !== undefined && args.musicProfile !== null) {
      this.musicProfile = args.musicProfile;
    }
    if (args.videoProfile !== undefined && args.videoProfile !== null) {
      this.videoProfile = args.videoProfile;
    }
  }
};
Contact.prototype = {};
Contact.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.relation = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.phoneticName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnailUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRING) {
        this.displayNameOverridden = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.I64) {
        this.favoriteTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.capableVoiceCall = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.BOOL) {
        this.capableVideoCall = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.BOOL) {
        this.capableMyhome = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.BOOL) {
        this.capableBuddy = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.I32) {
        this.attributes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.I64) {
        this.settings = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.STRING) {
        this.recommendParams = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.I32) {
        this.friendRequestStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.musicProfile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.STRING) {
        this.videoProfile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Contact.prototype.write = function(output) {
  output.writeStructBegin('Contact');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 10);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 11);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.relation !== null && this.relation !== undefined) {
    output.writeFieldBegin('relation', Thrift.Type.I32, 21);
    output.writeI32(this.relation);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 22);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.phoneticName !== null && this.phoneticName !== undefined) {
    output.writeFieldBegin('phoneticName', Thrift.Type.STRING, 23);
    output.writeString(this.phoneticName);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 24);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
    output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 25);
    output.writeString(this.thumbnailUrl);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 26);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.displayNameOverridden !== null && this.displayNameOverridden !== undefined) {
    output.writeFieldBegin('displayNameOverridden', Thrift.Type.STRING, 27);
    output.writeString(this.displayNameOverridden);
    output.writeFieldEnd();
  }
  if (this.favoriteTime !== null && this.favoriteTime !== undefined) {
    output.writeFieldBegin('favoriteTime', Thrift.Type.I64, 28);
    output.writeI64(this.favoriteTime);
    output.writeFieldEnd();
  }
  if (this.capableVoiceCall !== null && this.capableVoiceCall !== undefined) {
    output.writeFieldBegin('capableVoiceCall', Thrift.Type.BOOL, 31);
    output.writeBool(this.capableVoiceCall);
    output.writeFieldEnd();
  }
  if (this.capableVideoCall !== null && this.capableVideoCall !== undefined) {
    output.writeFieldBegin('capableVideoCall', Thrift.Type.BOOL, 32);
    output.writeBool(this.capableVideoCall);
    output.writeFieldEnd();
  }
  if (this.capableMyhome !== null && this.capableMyhome !== undefined) {
    output.writeFieldBegin('capableMyhome', Thrift.Type.BOOL, 33);
    output.writeBool(this.capableMyhome);
    output.writeFieldEnd();
  }
  if (this.capableBuddy !== null && this.capableBuddy !== undefined) {
    output.writeFieldBegin('capableBuddy', Thrift.Type.BOOL, 34);
    output.writeBool(this.capableBuddy);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.I32, 35);
    output.writeI32(this.attributes);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.I64, 36);
    output.writeI64(this.settings);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 37);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.recommendParams !== null && this.recommendParams !== undefined) {
    output.writeFieldBegin('recommendParams', Thrift.Type.STRING, 38);
    output.writeString(this.recommendParams);
    output.writeFieldEnd();
  }
  if (this.friendRequestStatus !== null && this.friendRequestStatus !== undefined) {
    output.writeFieldBegin('friendRequestStatus', Thrift.Type.I32, 39);
    output.writeI32(this.friendRequestStatus);
    output.writeFieldEnd();
  }
  if (this.musicProfile !== null && this.musicProfile !== undefined) {
    output.writeFieldBegin('musicProfile', Thrift.Type.STRING, 40);
    output.writeString(this.musicProfile);
    output.writeFieldEnd();
  }
  if (this.videoProfile !== null && this.videoProfile !== undefined) {
    output.writeFieldBegin('videoProfile', Thrift.Type.STRING, 42);
    output.writeString(this.videoProfile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyList = function(args) {
  this.classification = null;
  this.displayName = null;
  this.totalBuddyCount = null;
  this.popularContacts = null;
  if (args) {
    if (args.classification !== undefined && args.classification !== null) {
      this.classification = args.classification;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.totalBuddyCount !== undefined && args.totalBuddyCount !== null) {
      this.totalBuddyCount = args.totalBuddyCount;
    }
    if (args.popularContacts !== undefined && args.popularContacts !== null) {
      this.popularContacts = Thrift.copyList(args.popularContacts, [Contact]);
    }
  }
};
BuddyList.prototype = {};
BuddyList.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.classification = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.totalBuddyCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.popularContacts = [];
        var _rtmp376 = input.readListBegin();
        var _size75 = _rtmp376.size || 0;
        for (var _i77 = 0; _i77 < _size75; ++_i77) {
          var elem78 = null;
          elem78 = new Contact();
          elem78.read(input);
          this.popularContacts.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyList.prototype.write = function(output) {
  output.writeStructBegin('BuddyList');
  if (this.classification !== null && this.classification !== undefined) {
    output.writeFieldBegin('classification', Thrift.Type.STRING, 1);
    output.writeString(this.classification);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.totalBuddyCount !== null && this.totalBuddyCount !== undefined) {
    output.writeFieldBegin('totalBuddyCount', Thrift.Type.I32, 3);
    output.writeI32(this.totalBuddyCount);
    output.writeFieldEnd();
  }
  if (this.popularContacts !== null && this.popularContacts !== undefined) {
    output.writeFieldBegin('popularContacts', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.popularContacts.length);
    for (var iter79 in this.popularContacts) {
      if (this.popularContacts.hasOwnProperty(iter79)) {
        iter79 = this.popularContacts[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RegisterWithPhoneNumberResult = function(args) {
  this.authToken = null;
  this.recommendEmailRegistration = null;
  this.certificate = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.recommendEmailRegistration !== undefined && args.recommendEmailRegistration !== null) {
      this.recommendEmailRegistration = args.recommendEmailRegistration;
    }
    if (args.certificate !== undefined && args.certificate !== null) {
      this.certificate = args.certificate;
    }
  }
};
RegisterWithPhoneNumberResult.prototype = {};
RegisterWithPhoneNumberResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.recommendEmailRegistration = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.certificate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisterWithPhoneNumberResult.prototype.write = function(output) {
  output.writeStructBegin('RegisterWithPhoneNumberResult');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.recommendEmailRegistration !== null && this.recommendEmailRegistration !== undefined) {
    output.writeFieldBegin('recommendEmailRegistration', Thrift.Type.BOOL, 2);
    output.writeBool(this.recommendEmailRegistration);
    output.writeFieldEnd();
  }
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRING, 3);
    output.writeString(this.certificate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyMessageRequest = function(args) {
  this.contentType = null;
  this.text = null;
  this.location = null;
  this.content = null;
  this.contentMetadata = null;
  if (args) {
    if (args.contentType !== undefined && args.contentType !== null) {
      this.contentType = args.contentType;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new Location(args.location);
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
    if (args.contentMetadata !== undefined && args.contentMetadata !== null) {
      this.contentMetadata = Thrift.copyMap(args.contentMetadata, [null]);
    }
  }
};
BuddyMessageRequest.prototype = {};
BuddyMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.contentType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.contentMetadata = {};
        var _rtmp381 = input.readMapBegin();
        var _size80 = _rtmp381.size || 0;
        for (var _i82 = 0; _i82 < _size80; ++_i82) {
          if (_i82 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key83 = null;
          var val84 = null;
          key83 = input.readString().value;
          val84 = input.readString().value;
          this.contentMetadata[key83] = val84;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('BuddyMessageRequest');
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.I32, 1);
    output.writeI32(this.contentType);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 3);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 4);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  if (this.contentMetadata !== null && this.contentMetadata !== undefined) {
    output.writeFieldBegin('contentMetadata', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.contentMetadata));
    for (var kiter85 in this.contentMetadata) {
      if (this.contentMetadata.hasOwnProperty(kiter85)) {
        var viter86 = this.contentMetadata[kiter85];
        output.writeString(kiter85);
        output.writeString(viter86);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyOnAirUrls = function(args) {
  this.hls = null;
  this.smoothStreaming = null;
  if (args) {
    if (args.hls !== undefined && args.hls !== null) {
      this.hls = Thrift.copyMap(args.hls, [null]);
    }
    if (args.smoothStreaming !== undefined && args.smoothStreaming !== null) {
      this.smoothStreaming = Thrift.copyMap(args.smoothStreaming, [null]);
    }
  }
};
BuddyOnAirUrls.prototype = {};
BuddyOnAirUrls.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.hls = {};
        var _rtmp388 = input.readMapBegin();
        var _size87 = _rtmp388.size || 0;
        for (var _i89 = 0; _i89 < _size87; ++_i89) {
          if (_i89 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key90 = null;
          var val91 = null;
          key90 = input.readString().value;
          val91 = input.readString().value;
          this.hls[key90] = val91;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.smoothStreaming = {};
        var _rtmp393 = input.readMapBegin();
        var _size92 = _rtmp393.size || 0;
        for (var _i94 = 0; _i94 < _size92; ++_i94) {
          if (_i94 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key95 = null;
          var val96 = null;
          key95 = input.readString().value;
          val96 = input.readString().value;
          this.smoothStreaming[key95] = val96;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyOnAirUrls.prototype.write = function(output) {
  output.writeStructBegin('BuddyOnAirUrls');
  if (this.hls !== null && this.hls !== undefined) {
    output.writeFieldBegin('hls', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.hls));
    for (var kiter97 in this.hls) {
      if (this.hls.hasOwnProperty(kiter97)) {
        var viter98 = this.hls[kiter97];
        output.writeString(kiter97);
        output.writeString(viter98);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.smoothStreaming !== null && this.smoothStreaming !== undefined) {
    output.writeFieldBegin('smoothStreaming', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.smoothStreaming));
    for (var kiter99 in this.smoothStreaming) {
      if (this.smoothStreaming.hasOwnProperty(kiter99)) {
        var viter100 = this.smoothStreaming[kiter99];
        output.writeString(kiter99);
        output.writeString(viter100);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyOnAir = function(args) {
  this.mid = null;
  this.freshnessLifetime = null;
  this.onAirId = null;
  this.onAir = null;
  this.text = null;
  this.viewerCount = null;
  this.targetCount = null;
  this.onAirType = null;
  this.onAirUrls = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.freshnessLifetime !== undefined && args.freshnessLifetime !== null) {
      this.freshnessLifetime = args.freshnessLifetime;
    }
    if (args.onAirId !== undefined && args.onAirId !== null) {
      this.onAirId = args.onAirId;
    }
    if (args.onAir !== undefined && args.onAir !== null) {
      this.onAir = args.onAir;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.viewerCount !== undefined && args.viewerCount !== null) {
      this.viewerCount = args.viewerCount;
    }
    if (args.targetCount !== undefined && args.targetCount !== null) {
      this.targetCount = args.targetCount;
    }
    if (args.onAirType !== undefined && args.onAirType !== null) {
      this.onAirType = args.onAirType;
    }
    if (args.onAirUrls !== undefined && args.onAirUrls !== null) {
      this.onAirUrls = new BuddyOnAirUrls(args.onAirUrls);
    }
  }
};
BuddyOnAir.prototype = {};
BuddyOnAir.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.freshnessLifetime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.onAirId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.onAir = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.viewerCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.targetCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.I32) {
        this.onAirType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRUCT) {
        this.onAirUrls = new BuddyOnAirUrls();
        this.onAirUrls.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyOnAir.prototype.write = function(output) {
  output.writeStructBegin('BuddyOnAir');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.freshnessLifetime !== null && this.freshnessLifetime !== undefined) {
    output.writeFieldBegin('freshnessLifetime', Thrift.Type.I64, 3);
    output.writeI64(this.freshnessLifetime);
    output.writeFieldEnd();
  }
  if (this.onAirId !== null && this.onAirId !== undefined) {
    output.writeFieldBegin('onAirId', Thrift.Type.STRING, 4);
    output.writeString(this.onAirId);
    output.writeFieldEnd();
  }
  if (this.onAir !== null && this.onAir !== undefined) {
    output.writeFieldBegin('onAir', Thrift.Type.BOOL, 5);
    output.writeBool(this.onAir);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 11);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.viewerCount !== null && this.viewerCount !== undefined) {
    output.writeFieldBegin('viewerCount', Thrift.Type.I64, 12);
    output.writeI64(this.viewerCount);
    output.writeFieldEnd();
  }
  if (this.targetCount !== null && this.targetCount !== undefined) {
    output.writeFieldBegin('targetCount', Thrift.Type.I64, 13);
    output.writeI64(this.targetCount);
    output.writeFieldEnd();
  }
  if (this.onAirType !== null && this.onAirType !== undefined) {
    output.writeFieldBegin('onAirType', Thrift.Type.I32, 31);
    output.writeI32(this.onAirType);
    output.writeFieldEnd();
  }
  if (this.onAirUrls !== null && this.onAirUrls !== undefined) {
    output.writeFieldBegin('onAirUrls', Thrift.Type.STRUCT, 32);
    this.onAirUrls.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddyProfile = function(args) {
  this.buddyId = null;
  this.mid = null;
  this.searchId = null;
  this.displayName = null;
  this.statusMessage = null;
  this.contactCount = null;
  if (args) {
    if (args.buddyId !== undefined && args.buddyId !== null) {
      this.buddyId = args.buddyId;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.searchId !== undefined && args.searchId !== null) {
      this.searchId = args.searchId;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.contactCount !== undefined && args.contactCount !== null) {
      this.contactCount = args.contactCount;
    }
  }
};
BuddyProfile.prototype = {};
BuddyProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.buddyId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.searchId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.contactCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyProfile.prototype.write = function(output) {
  output.writeStructBegin('BuddyProfile');
  if (this.buddyId !== null && this.buddyId !== undefined) {
    output.writeFieldBegin('buddyId', Thrift.Type.STRING, 1);
    output.writeString(this.buddyId);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.searchId !== null && this.searchId !== undefined) {
    output.writeFieldBegin('searchId', Thrift.Type.STRING, 3);
    output.writeString(this.searchId);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 4);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 5);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.contactCount !== null && this.contactCount !== undefined) {
    output.writeFieldBegin('contactCount', Thrift.Type.I64, 11);
    output.writeI64(this.contactCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommitMessageResult = function(args) {
  this.message = null;
  this.code = null;
  this.reason = null;
  this.successCount = null;
  this.failCount = null;
  this.unregisterCount = null;
  this.blockCount = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new Message(args.message);
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.successCount !== undefined && args.successCount !== null) {
      this.successCount = args.successCount;
    }
    if (args.failCount !== undefined && args.failCount !== null) {
      this.failCount = args.failCount;
    }
    if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
      this.unregisterCount = args.unregisterCount;
    }
    if (args.blockCount !== undefined && args.blockCount !== null) {
      this.blockCount = args.blockCount;
    }
  }
};
CommitMessageResult.prototype = {};
CommitMessageResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.successCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.failCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.unregisterCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.blockCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommitMessageResult.prototype.write = function(output) {
  output.writeStructBegin('CommitMessageResult');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 2);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 3);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.successCount !== null && this.successCount !== undefined) {
    output.writeFieldBegin('successCount', Thrift.Type.I64, 4);
    output.writeI64(this.successCount);
    output.writeFieldEnd();
  }
  if (this.failCount !== null && this.failCount !== undefined) {
    output.writeFieldBegin('failCount', Thrift.Type.I64, 5);
    output.writeI64(this.failCount);
    output.writeFieldEnd();
  }
  if (this.unregisterCount !== null && this.unregisterCount !== undefined) {
    output.writeFieldBegin('unregisterCount', Thrift.Type.I64, 6);
    output.writeI64(this.unregisterCount);
    output.writeFieldEnd();
  }
  if (this.blockCount !== null && this.blockCount !== undefined) {
    output.writeFieldBegin('blockCount', Thrift.Type.I64, 7);
    output.writeI64(this.blockCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuddySearchResult = function(args) {
  this.mid = null;
  this.displayName = null;
  this.pictureStatus = null;
  this.picturePath = null;
  this.statusMessage = null;
  this.businessAccount = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.businessAccount !== undefined && args.businessAccount !== null) {
      this.businessAccount = args.businessAccount;
    }
  }
};
BuddySearchResult.prototype = {};
BuddySearchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.businessAccount = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddySearchResult.prototype.write = function(output) {
  output.writeStructBegin('BuddySearchResult');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 3);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 4);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 5);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.businessAccount !== null && this.businessAccount !== undefined) {
    output.writeFieldBegin('businessAccount', Thrift.Type.BOOL, 6);
    output.writeBool(this.businessAccount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SyncParamMid = function(args) {
  this.mid = null;
  this.diff = null;
  this.revision = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.diff !== undefined && args.diff !== null) {
      this.diff = args.diff;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
  }
};
SyncParamMid.prototype = {};
SyncParamMid.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.diff = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncParamMid.prototype.write = function(output) {
  output.writeStructBegin('SyncParamMid');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.diff !== null && this.diff !== undefined) {
    output.writeFieldBegin('diff', Thrift.Type.I32, 2);
    output.writeI32(this.diff);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 3);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SIMInfo = function(args) {
  this.phoneNumber = null;
  this.countryCode = null;
  if (args) {
    if (args.phoneNumber !== undefined && args.phoneNumber !== null) {
      this.phoneNumber = args.phoneNumber;
    }
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
  }
};
SIMInfo.prototype = {};
SIMInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.phoneNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SIMInfo.prototype.write = function(output) {
  output.writeStructBegin('SIMInfo');
  if (this.phoneNumber !== null && this.phoneNumber !== undefined) {
    output.writeFieldBegin('phoneNumber', Thrift.Type.STRING, 1);
    output.writeString(this.phoneNumber);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 2);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SyncParamContact = function(args) {
  this.syncParamMid = null;
  this.contactStatus = null;
  if (args) {
    if (args.syncParamMid !== undefined && args.syncParamMid !== null) {
      this.syncParamMid = new SyncParamMid(args.syncParamMid);
    }
    if (args.contactStatus !== undefined && args.contactStatus !== null) {
      this.contactStatus = args.contactStatus;
    }
  }
};
SyncParamContact.prototype = {};
SyncParamContact.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.syncParamMid = new SyncParamMid();
        this.syncParamMid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.contactStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncParamContact.prototype.write = function(output) {
  output.writeStructBegin('SyncParamContact');
  if (this.syncParamMid !== null && this.syncParamMid !== undefined) {
    output.writeFieldBegin('syncParamMid', Thrift.Type.STRUCT, 1);
    this.syncParamMid.write(output);
    output.writeFieldEnd();
  }
  if (this.contactStatus !== null && this.contactStatus !== undefined) {
    output.writeFieldBegin('contactStatus', Thrift.Type.I32, 2);
    output.writeI32(this.contactStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelDomains = function(args) {
  this.channelDomains = null;
  this.revision = null;
  if (args) {
    if (args.channelDomains !== undefined && args.channelDomains !== null) {
      this.channelDomains = Thrift.copyList(args.channelDomains, [ChannelDomain]);
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
  }
};
ChannelDomains.prototype = {};
ChannelDomains.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.channelDomains = [];
        var _rtmp3102 = input.readListBegin();
        var _size101 = _rtmp3102.size || 0;
        for (var _i103 = 0; _i103 < _size101; ++_i103) {
          var elem104 = null;
          elem104 = new ChannelDomain();
          elem104.read(input);
          this.channelDomains.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelDomains.prototype.write = function(output) {
  output.writeStructBegin('ChannelDomains');
  if (this.channelDomains !== null && this.channelDomains !== undefined) {
    output.writeFieldBegin('channelDomains', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.channelDomains.length);
    for (var iter105 in this.channelDomains) {
      if (this.channelDomains.hasOwnProperty(iter105)) {
        iter105 = this.channelDomains[iter105];
        iter105.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 2);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCategory = function(args) {
  this.productCategoryId = null;
  this.title = null;
  this.productCount = null;
  this.newFlag = null;
  if (args) {
    if (args.productCategoryId !== undefined && args.productCategoryId !== null) {
      this.productCategoryId = args.productCategoryId;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.productCount !== undefined && args.productCount !== null) {
      this.productCount = args.productCount;
    }
    if (args.newFlag !== undefined && args.newFlag !== null) {
      this.newFlag = args.newFlag;
    }
  }
};
ProductCategory.prototype = {};
ProductCategory.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.productCategoryId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.productCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.newFlag = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCategory.prototype.write = function(output) {
  output.writeStructBegin('ProductCategory');
  if (this.productCategoryId !== null && this.productCategoryId !== undefined) {
    output.writeFieldBegin('productCategoryId', Thrift.Type.I64, 1);
    output.writeI64(this.productCategoryId);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.productCount !== null && this.productCount !== undefined) {
    output.writeFieldBegin('productCount', Thrift.Type.I32, 3);
    output.writeI32(this.productCount);
    output.writeFieldEnd();
  }
  if (this.newFlag !== null && this.newFlag !== undefined) {
    output.writeFieldBegin('newFlag', Thrift.Type.BOOL, 4);
    output.writeBool(this.newFlag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelInfos = function(args) {
  this.channelInfos = null;
  this.revision = null;
  if (args) {
    if (args.channelInfos !== undefined && args.channelInfos !== null) {
      this.channelInfos = Thrift.copyList(args.channelInfos, [ChannelInfo]);
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
  }
};
ChannelInfos.prototype = {};
ChannelInfos.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.channelInfos = [];
        var _rtmp3107 = input.readListBegin();
        var _size106 = _rtmp3107.size || 0;
        for (var _i108 = 0; _i108 < _size106; ++_i108) {
          var elem109 = null;
          elem109 = new ChannelInfo();
          elem109.read(input);
          this.channelInfos.push(elem109);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelInfos.prototype.write = function(output) {
  output.writeStructBegin('ChannelInfos');
  if (this.channelInfos !== null && this.channelInfos !== undefined) {
    output.writeFieldBegin('channelInfos', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.channelInfos.length);
    for (var iter110 in this.channelInfos) {
      if (this.channelInfos.hasOwnProperty(iter110)) {
        iter110 = this.channelInfos[iter110];
        iter110.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 2);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelNotificationSetting = function(args) {
  this.channelId = null;
  this.name = null;
  this.notificationReceivable = null;
  this.messageReceivable = null;
  this.showDefault = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.notificationReceivable !== undefined && args.notificationReceivable !== null) {
      this.notificationReceivable = args.notificationReceivable;
    }
    if (args.messageReceivable !== undefined && args.messageReceivable !== null) {
      this.messageReceivable = args.messageReceivable;
    }
    if (args.showDefault !== undefined && args.showDefault !== null) {
      this.showDefault = args.showDefault;
    }
  }
};
ChannelNotificationSetting.prototype = {};
ChannelNotificationSetting.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationReceivable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.messageReceivable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.showDefault = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelNotificationSetting.prototype.write = function(output) {
  output.writeStructBegin('ChannelNotificationSetting');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.notificationReceivable !== null && this.notificationReceivable !== undefined) {
    output.writeFieldBegin('notificationReceivable', Thrift.Type.BOOL, 3);
    output.writeBool(this.notificationReceivable);
    output.writeFieldEnd();
  }
  if (this.messageReceivable !== null && this.messageReceivable !== undefined) {
    output.writeFieldBegin('messageReceivable', Thrift.Type.BOOL, 4);
    output.writeBool(this.messageReceivable);
    output.writeFieldEnd();
  }
  if (this.showDefault !== null && this.showDefault !== undefined) {
    output.writeFieldBegin('showDefault', Thrift.Type.BOOL, 5);
    output.writeBool(this.showDefault);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelSyncDatas = function(args) {
  this.channelInfos = null;
  this.channelDomains = null;
  this.revision = null;
  this.expires = null;
  if (args) {
    if (args.channelInfos !== undefined && args.channelInfos !== null) {
      this.channelInfos = Thrift.copyList(args.channelInfos, [ChannelInfo]);
    }
    if (args.channelDomains !== undefined && args.channelDomains !== null) {
      this.channelDomains = Thrift.copyList(args.channelDomains, [ChannelDomain]);
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.expires !== undefined && args.expires !== null) {
      this.expires = args.expires;
    }
  }
};
ChannelSyncDatas.prototype = {};
ChannelSyncDatas.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.channelInfos = [];
        var _rtmp3112 = input.readListBegin();
        var _size111 = _rtmp3112.size || 0;
        for (var _i113 = 0; _i113 < _size111; ++_i113) {
          var elem114 = null;
          elem114 = new ChannelInfo();
          elem114.read(input);
          this.channelInfos.push(elem114);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.channelDomains = [];
        var _rtmp3116 = input.readListBegin();
        var _size115 = _rtmp3116.size || 0;
        for (var _i117 = 0; _i117 < _size115; ++_i117) {
          var elem118 = null;
          elem118 = new ChannelDomain();
          elem118.read(input);
          this.channelDomains.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.expires = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelSyncDatas.prototype.write = function(output) {
  output.writeStructBegin('ChannelSyncDatas');
  if (this.channelInfos !== null && this.channelInfos !== undefined) {
    output.writeFieldBegin('channelInfos', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.channelInfos.length);
    for (var iter119 in this.channelInfos) {
      if (this.channelInfos.hasOwnProperty(iter119)) {
        iter119 = this.channelInfos[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.channelDomains !== null && this.channelDomains !== undefined) {
    output.writeFieldBegin('channelDomains', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.channelDomains.length);
    for (var iter120 in this.channelDomains) {
      if (this.channelDomains.hasOwnProperty(iter120)) {
        iter120 = this.channelDomains[iter120];
        iter120.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 3);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.expires !== null && this.expires !== undefined) {
    output.writeFieldBegin('expires', Thrift.Type.I64, 4);
    output.writeI64(this.expires);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotiCenterEventData = function(args) {
  this.id = null;
  this.to = null;
  this.from_ = null;
  this.toChannel = null;
  this.fromChannel = null;
  this.eventType = null;
  this.createdTime = null;
  this.operationRevision = null;
  this.content = null;
  this.push = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.to !== undefined && args.to !== null) {
      this.to = args.to;
    }
    if (args.from_ !== undefined && args.from_ !== null) {
      this.from_ = args.from_;
    }
    if (args.toChannel !== undefined && args.toChannel !== null) {
      this.toChannel = args.toChannel;
    }
    if (args.fromChannel !== undefined && args.fromChannel !== null) {
      this.fromChannel = args.fromChannel;
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.operationRevision !== undefined && args.operationRevision !== null) {
      this.operationRevision = args.operationRevision;
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = Thrift.copyMap(args.content, [null]);
    }
    if (args.push !== undefined && args.push !== null) {
      this.push = Thrift.copyMap(args.push, [null]);
    }
  }
};
NotiCenterEventData.prototype = {};
NotiCenterEventData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.to = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.from_ = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.toChannel = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.fromChannel = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.eventType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.operationRevision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        this.content = {};
        var _rtmp3122 = input.readMapBegin();
        var _size121 = _rtmp3122.size || 0;
        for (var _i123 = 0; _i123 < _size121; ++_i123) {
          if (_i123 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key124 = null;
          var val125 = null;
          key124 = input.readString().value;
          val125 = input.readString().value;
          this.content[key124] = val125;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        this.push = {};
        var _rtmp3127 = input.readMapBegin();
        var _size126 = _rtmp3127.size || 0;
        for (var _i128 = 0; _i128 < _size126; ++_i128) {
          if (_i128 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key129 = null;
          var val130 = null;
          key129 = input.readString().value;
          val130 = input.readString().value;
          this.push[key129] = val130;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotiCenterEventData.prototype.write = function(output) {
  output.writeStructBegin('NotiCenterEventData');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.STRING, 2);
    output.writeString(this.to);
    output.writeFieldEnd();
  }
  if (this.from_ !== null && this.from_ !== undefined) {
    output.writeFieldBegin('from_', Thrift.Type.STRING, 3);
    output.writeString(this.from_);
    output.writeFieldEnd();
  }
  if (this.toChannel !== null && this.toChannel !== undefined) {
    output.writeFieldBegin('toChannel', Thrift.Type.STRING, 4);
    output.writeString(this.toChannel);
    output.writeFieldEnd();
  }
  if (this.fromChannel !== null && this.fromChannel !== undefined) {
    output.writeFieldBegin('fromChannel', Thrift.Type.STRING, 5);
    output.writeString(this.fromChannel);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.STRING, 6);
    output.writeString(this.eventType);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 7);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.operationRevision !== null && this.operationRevision !== undefined) {
    output.writeFieldBegin('operationRevision', Thrift.Type.I64, 8);
    output.writeI64(this.operationRevision);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.content));
    for (var kiter131 in this.content) {
      if (this.content.hasOwnProperty(kiter131)) {
        var viter132 = this.content[kiter131];
        output.writeString(kiter131);
        output.writeString(viter132);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.push !== null && this.push !== undefined) {
    output.writeFieldBegin('push', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.push));
    for (var kiter133 in this.push) {
      if (this.push.hasOwnProperty(kiter133)) {
        var viter134 = this.push[kiter133];
        output.writeString(kiter133);
        output.writeString(viter134);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelToken = function(args) {
  this.token = null;
  this.obsToken = null;
  this.expiration = null;
  this.refreshToken = null;
  this.channelAccessToken = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.obsToken !== undefined && args.obsToken !== null) {
      this.obsToken = args.obsToken;
    }
    if (args.expiration !== undefined && args.expiration !== null) {
      this.expiration = args.expiration;
    }
    if (args.refreshToken !== undefined && args.refreshToken !== null) {
      this.refreshToken = args.refreshToken;
    }
    if (args.channelAccessToken !== undefined && args.channelAccessToken !== null) {
      this.channelAccessToken = args.channelAccessToken;
    }
  }
};
ChannelToken.prototype = {};
ChannelToken.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.obsToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expiration = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.refreshToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.channelAccessToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelToken.prototype.write = function(output) {
  output.writeStructBegin('ChannelToken');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.obsToken !== null && this.obsToken !== undefined) {
    output.writeFieldBegin('obsToken', Thrift.Type.STRING, 2);
    output.writeString(this.obsToken);
    output.writeFieldEnd();
  }
  if (this.expiration !== null && this.expiration !== undefined) {
    output.writeFieldBegin('expiration', Thrift.Type.I64, 3);
    output.writeI64(this.expiration);
    output.writeFieldEnd();
  }
  if (this.refreshToken !== null && this.refreshToken !== undefined) {
    output.writeFieldBegin('refreshToken', Thrift.Type.STRING, 4);
    output.writeString(this.refreshToken);
    output.writeFieldEnd();
  }
  if (this.channelAccessToken !== null && this.channelAccessToken !== undefined) {
    output.writeFieldBegin('channelAccessToken', Thrift.Type.STRING, 5);
    output.writeString(this.channelAccessToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelSettings = function(args) {
  this.unapprovedMessageReceivable = null;
  if (args) {
    if (args.unapprovedMessageReceivable !== undefined && args.unapprovedMessageReceivable !== null) {
      this.unapprovedMessageReceivable = args.unapprovedMessageReceivable;
    }
  }
};
ChannelSettings.prototype = {};
ChannelSettings.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.unapprovedMessageReceivable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelSettings.prototype.write = function(output) {
  output.writeStructBegin('ChannelSettings');
  if (this.unapprovedMessageReceivable !== null && this.unapprovedMessageReceivable !== undefined) {
    output.writeFieldBegin('unapprovedMessageReceivable', Thrift.Type.BOOL, 1);
    output.writeBool(this.unapprovedMessageReceivable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelIdWithLastUpdated = function(args) {
  this.channelId = null;
  this.lastUpdated = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.lastUpdated !== undefined && args.lastUpdated !== null) {
      this.lastUpdated = args.lastUpdated;
    }
  }
};
ChannelIdWithLastUpdated.prototype = {};
ChannelIdWithLastUpdated.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastUpdated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelIdWithLastUpdated.prototype.write = function(output) {
  output.writeStructBegin('ChannelIdWithLastUpdated');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.lastUpdated !== null && this.lastUpdated !== undefined) {
    output.writeFieldBegin('lastUpdated', Thrift.Type.I64, 2);
    output.writeI64(this.lastUpdated);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Coin = function(args) {
  this.freeCoinBalance = null;
  this.payedCoinBalance = null;
  this.totalCoinBalance = null;
  this.rewardCoinBalance = null;
  if (args) {
    if (args.freeCoinBalance !== undefined && args.freeCoinBalance !== null) {
      this.freeCoinBalance = args.freeCoinBalance;
    }
    if (args.payedCoinBalance !== undefined && args.payedCoinBalance !== null) {
      this.payedCoinBalance = args.payedCoinBalance;
    }
    if (args.totalCoinBalance !== undefined && args.totalCoinBalance !== null) {
      this.totalCoinBalance = args.totalCoinBalance;
    }
    if (args.rewardCoinBalance !== undefined && args.rewardCoinBalance !== null) {
      this.rewardCoinBalance = args.rewardCoinBalance;
    }
  }
};
Coin.prototype = {};
Coin.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.freeCoinBalance = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.payedCoinBalance = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.totalCoinBalance = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.rewardCoinBalance = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Coin.prototype.write = function(output) {
  output.writeStructBegin('Coin');
  if (this.freeCoinBalance !== null && this.freeCoinBalance !== undefined) {
    output.writeFieldBegin('freeCoinBalance', Thrift.Type.I32, 1);
    output.writeI32(this.freeCoinBalance);
    output.writeFieldEnd();
  }
  if (this.payedCoinBalance !== null && this.payedCoinBalance !== undefined) {
    output.writeFieldBegin('payedCoinBalance', Thrift.Type.I32, 2);
    output.writeI32(this.payedCoinBalance);
    output.writeFieldEnd();
  }
  if (this.totalCoinBalance !== null && this.totalCoinBalance !== undefined) {
    output.writeFieldBegin('totalCoinBalance', Thrift.Type.I32, 3);
    output.writeI32(this.totalCoinBalance);
    output.writeFieldEnd();
  }
  if (this.rewardCoinBalance !== null && this.rewardCoinBalance !== undefined) {
    output.writeFieldBegin('rewardCoinBalance', Thrift.Type.I32, 4);
    output.writeI32(this.rewardCoinBalance);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CoinPayLoad = function(args) {
  this.payCoin = null;
  this.freeCoin = null;
  this.type = null;
  this.rewardCoin = null;
  if (args) {
    if (args.payCoin !== undefined && args.payCoin !== null) {
      this.payCoin = args.payCoin;
    }
    if (args.freeCoin !== undefined && args.freeCoin !== null) {
      this.freeCoin = args.freeCoin;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.rewardCoin !== undefined && args.rewardCoin !== null) {
      this.rewardCoin = args.rewardCoin;
    }
  }
};
CoinPayLoad.prototype = {};
CoinPayLoad.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.payCoin = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.freeCoin = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.rewardCoin = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinPayLoad.prototype.write = function(output) {
  output.writeStructBegin('CoinPayLoad');
  if (this.payCoin !== null && this.payCoin !== undefined) {
    output.writeFieldBegin('payCoin', Thrift.Type.I32, 1);
    output.writeI32(this.payCoin);
    output.writeFieldEnd();
  }
  if (this.freeCoin !== null && this.freeCoin !== undefined) {
    output.writeFieldBegin('freeCoin', Thrift.Type.I32, 2);
    output.writeI32(this.freeCoin);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.rewardCoin !== null && this.rewardCoin !== undefined) {
    output.writeFieldBegin('rewardCoin', Thrift.Type.I32, 4);
    output.writeI32(this.rewardCoin);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CoinHistory = function(args) {
  this.payDate = null;
  this.coinBalance = null;
  this.coin = null;
  this.price = null;
  this.title = null;
  this.refund = null;
  this.paySeq = null;
  this.currency = null;
  this.currencySign = null;
  this.displayPrice = null;
  this.payload = null;
  this.channelId = null;
  if (args) {
    if (args.payDate !== undefined && args.payDate !== null) {
      this.payDate = args.payDate;
    }
    if (args.coinBalance !== undefined && args.coinBalance !== null) {
      this.coinBalance = args.coinBalance;
    }
    if (args.coin !== undefined && args.coin !== null) {
      this.coin = args.coin;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.refund !== undefined && args.refund !== null) {
      this.refund = args.refund;
    }
    if (args.paySeq !== undefined && args.paySeq !== null) {
      this.paySeq = args.paySeq;
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.currencySign !== undefined && args.currencySign !== null) {
      this.currencySign = args.currencySign;
    }
    if (args.displayPrice !== undefined && args.displayPrice !== null) {
      this.displayPrice = args.displayPrice;
    }
    if (args.payload !== undefined && args.payload !== null) {
      this.payload = new CoinPayLoad(args.payload);
    }
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
  }
};
CoinHistory.prototype = {};
CoinHistory.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.payDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.coinBalance = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.coin = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.refund = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.paySeq = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.currency = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.currencySign = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.displayPrice = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.payload = new CoinPayLoad();
        this.payload.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinHistory.prototype.write = function(output) {
  output.writeStructBegin('CoinHistory');
  if (this.payDate !== null && this.payDate !== undefined) {
    output.writeFieldBegin('payDate', Thrift.Type.I64, 1);
    output.writeI64(this.payDate);
    output.writeFieldEnd();
  }
  if (this.coinBalance !== null && this.coinBalance !== undefined) {
    output.writeFieldBegin('coinBalance', Thrift.Type.I32, 2);
    output.writeI32(this.coinBalance);
    output.writeFieldEnd();
  }
  if (this.coin !== null && this.coin !== undefined) {
    output.writeFieldBegin('coin', Thrift.Type.I32, 3);
    output.writeI32(this.coin);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 4);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 5);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.refund !== null && this.refund !== undefined) {
    output.writeFieldBegin('refund', Thrift.Type.BOOL, 6);
    output.writeBool(this.refund);
    output.writeFieldEnd();
  }
  if (this.paySeq !== null && this.paySeq !== undefined) {
    output.writeFieldBegin('paySeq', Thrift.Type.STRING, 7);
    output.writeString(this.paySeq);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRING, 8);
    output.writeString(this.currency);
    output.writeFieldEnd();
  }
  if (this.currencySign !== null && this.currencySign !== undefined) {
    output.writeFieldBegin('currencySign', Thrift.Type.STRING, 9);
    output.writeString(this.currencySign);
    output.writeFieldEnd();
  }
  if (this.displayPrice !== null && this.displayPrice !== undefined) {
    output.writeFieldBegin('displayPrice', Thrift.Type.STRING, 10);
    output.writeString(this.displayPrice);
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRUCT, 11);
    this.payload.write(output);
    output.writeFieldEnd();
  }
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 12);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CoinHistoryCondition = function(args) {
  this.start = null;
  this.size = null;
  this.language = null;
  this.eddt = null;
  this.appStoreCode = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.eddt !== undefined && args.eddt !== null) {
      this.eddt = args.eddt;
    }
    if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
      this.appStoreCode = args.appStoreCode;
    }
  }
};
CoinHistoryCondition.prototype = {};
CoinHistoryCondition.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.eddt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.appStoreCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinHistoryCondition.prototype.write = function(output) {
  output.writeStructBegin('CoinHistoryCondition');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 1);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 2);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.eddt !== null && this.eddt !== undefined) {
    output.writeFieldBegin('eddt', Thrift.Type.STRING, 4);
    output.writeString(this.eddt);
    output.writeFieldEnd();
  }
  if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
    output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 5);
    output.writeI32(this.appStoreCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CoinHistoryResult = function(args) {
  this.historys = null;
  this.balance = null;
  this.hasNext = null;
  if (args) {
    if (args.historys !== undefined && args.historys !== null) {
      this.historys = Thrift.copyList(args.historys, [CoinHistory]);
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = new Coin(args.balance);
    }
    if (args.hasNext !== undefined && args.hasNext !== null) {
      this.hasNext = args.hasNext;
    }
  }
};
CoinHistoryResult.prototype = {};
CoinHistoryResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.historys = [];
        var _rtmp3136 = input.readListBegin();
        var _size135 = _rtmp3136.size || 0;
        for (var _i137 = 0; _i137 < _size135; ++_i137) {
          var elem138 = null;
          elem138 = new CoinHistory();
          elem138.read(input);
          this.historys.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.balance = new Coin();
        this.balance.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.hasNext = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinHistoryResult.prototype.write = function(output) {
  output.writeStructBegin('CoinHistoryResult');
  if (this.historys !== null && this.historys !== undefined) {
    output.writeFieldBegin('historys', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.historys.length);
    for (var iter139 in this.historys) {
      if (this.historys.hasOwnProperty(iter139)) {
        iter139 = this.historys[iter139];
        iter139.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.STRUCT, 2);
    this.balance.write(output);
    output.writeFieldEnd();
  }
  if (this.hasNext !== null && this.hasNext !== undefined) {
    output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 3);
    output.writeBool(this.hasNext);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CoinProductItem = function(args) {
  this.itemId = null;
  this.coin = null;
  this.freeCoin = null;
  this.currency = null;
  this.price = null;
  this.displayPrice = null;
  this.name = null;
  this.desc = null;
  if (args) {
    if (args.itemId !== undefined && args.itemId !== null) {
      this.itemId = args.itemId;
    }
    if (args.coin !== undefined && args.coin !== null) {
      this.coin = args.coin;
    }
    if (args.freeCoin !== undefined && args.freeCoin !== null) {
      this.freeCoin = args.freeCoin;
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.displayPrice !== undefined && args.displayPrice !== null) {
      this.displayPrice = args.displayPrice;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.desc !== undefined && args.desc !== null) {
      this.desc = args.desc;
    }
  }
};
CoinProductItem.prototype = {};
CoinProductItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.itemId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.coin = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.freeCoin = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.currency = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.displayPrice = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinProductItem.prototype.write = function(output) {
  output.writeStructBegin('CoinProductItem');
  if (this.itemId !== null && this.itemId !== undefined) {
    output.writeFieldBegin('itemId', Thrift.Type.STRING, 1);
    output.writeString(this.itemId);
    output.writeFieldEnd();
  }
  if (this.coin !== null && this.coin !== undefined) {
    output.writeFieldBegin('coin', Thrift.Type.I32, 2);
    output.writeI32(this.coin);
    output.writeFieldEnd();
  }
  if (this.freeCoin !== null && this.freeCoin !== undefined) {
    output.writeFieldBegin('freeCoin', Thrift.Type.I32, 3);
    output.writeI32(this.freeCoin);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRING, 5);
    output.writeString(this.currency);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 6);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  if (this.displayPrice !== null && this.displayPrice !== undefined) {
    output.writeFieldBegin('displayPrice', Thrift.Type.STRING, 7);
    output.writeString(this.displayPrice);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 8);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 9);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CoinPurchaseConfirm = function(args) {
  this.orderId = null;
  this.appStoreCode = null;
  this.receipt = null;
  this.signature = null;
  this.seller = null;
  this.requestType = null;
  this.ignoreReceipt = null;
  if (args) {
    if (args.orderId !== undefined && args.orderId !== null) {
      this.orderId = args.orderId;
    }
    if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
      this.appStoreCode = args.appStoreCode;
    }
    if (args.receipt !== undefined && args.receipt !== null) {
      this.receipt = args.receipt;
    }
    if (args.signature !== undefined && args.signature !== null) {
      this.signature = args.signature;
    }
    if (args.seller !== undefined && args.seller !== null) {
      this.seller = args.seller;
    }
    if (args.requestType !== undefined && args.requestType !== null) {
      this.requestType = args.requestType;
    }
    if (args.ignoreReceipt !== undefined && args.ignoreReceipt !== null) {
      this.ignoreReceipt = args.ignoreReceipt;
    }
  }
};
CoinPurchaseConfirm.prototype = {};
CoinPurchaseConfirm.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.appStoreCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.receipt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.seller = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.requestType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.ignoreReceipt = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinPurchaseConfirm.prototype.write = function(output) {
  output.writeStructBegin('CoinPurchaseConfirm');
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 1);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
    output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 2);
    output.writeI32(this.appStoreCode);
    output.writeFieldEnd();
  }
  if (this.receipt !== null && this.receipt !== undefined) {
    output.writeFieldBegin('receipt', Thrift.Type.STRING, 3);
    output.writeString(this.receipt);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 4);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  if (this.seller !== null && this.seller !== undefined) {
    output.writeFieldBegin('seller', Thrift.Type.STRING, 5);
    output.writeString(this.seller);
    output.writeFieldEnd();
  }
  if (this.requestType !== null && this.requestType !== undefined) {
    output.writeFieldBegin('requestType', Thrift.Type.STRING, 6);
    output.writeString(this.requestType);
    output.writeFieldEnd();
  }
  if (this.ignoreReceipt !== null && this.ignoreReceipt !== undefined) {
    output.writeFieldBegin('ignoreReceipt', Thrift.Type.BOOL, 7);
    output.writeBool(this.ignoreReceipt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CoinPurchaseReservation = function(args) {
  this.productId = null;
  this.country = null;
  this.currency = null;
  this.price = null;
  this.appStoreCode = null;
  this.language = null;
  this.pgCode = null;
  this.redirectUrl = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
      this.appStoreCode = args.appStoreCode;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.pgCode !== undefined && args.pgCode !== null) {
      this.pgCode = args.pgCode;
    }
    if (args.redirectUrl !== undefined && args.redirectUrl !== null) {
      this.redirectUrl = args.redirectUrl;
    }
  }
};
CoinPurchaseReservation.prototype = {};
CoinPurchaseReservation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.currency = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.appStoreCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.pgCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.redirectUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinPurchaseReservation.prototype.write = function(output) {
  output.writeStructBegin('CoinPurchaseReservation');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 2);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRING, 3);
    output.writeString(this.currency);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 4);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
    output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 5);
    output.writeI32(this.appStoreCode);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 6);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.pgCode !== null && this.pgCode !== undefined) {
    output.writeFieldBegin('pgCode', Thrift.Type.I32, 7);
    output.writeI32(this.pgCode);
    output.writeFieldEnd();
  }
  if (this.redirectUrl !== null && this.redirectUrl !== undefined) {
    output.writeFieldBegin('redirectUrl', Thrift.Type.STRING, 8);
    output.writeString(this.redirectUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CoinUseReservationItem = function(args) {
  this.itemId = null;
  this.itemName = null;
  this.amount = null;
  if (args) {
    if (args.itemId !== undefined && args.itemId !== null) {
      this.itemId = args.itemId;
    }
    if (args.itemName !== undefined && args.itemName !== null) {
      this.itemName = args.itemName;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
  }
};
CoinUseReservationItem.prototype = {};
CoinUseReservationItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.itemId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.itemName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.amount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinUseReservationItem.prototype.write = function(output) {
  output.writeStructBegin('CoinUseReservationItem');
  if (this.itemId !== null && this.itemId !== undefined) {
    output.writeFieldBegin('itemId', Thrift.Type.STRING, 1);
    output.writeString(this.itemId);
    output.writeFieldEnd();
  }
  if (this.itemName !== null && this.itemName !== undefined) {
    output.writeFieldBegin('itemName', Thrift.Type.STRING, 2);
    output.writeString(this.itemName);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.I32, 3);
    output.writeI32(this.amount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CoinUseReservation = function(args) {
  this.channelId = null;
  this.shopOrderId = null;
  this.appStoreCode = null;
  this.items = null;
  this.country = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.shopOrderId !== undefined && args.shopOrderId !== null) {
      this.shopOrderId = args.shopOrderId;
    }
    if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
      this.appStoreCode = args.appStoreCode;
    }
    if (args.items !== undefined && args.items !== null) {
      this.items = Thrift.copyList(args.items, [CoinUseReservationItem]);
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
CoinUseReservation.prototype = {};
CoinUseReservation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shopOrderId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.appStoreCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.items = [];
        var _rtmp3141 = input.readListBegin();
        var _size140 = _rtmp3141.size || 0;
        for (var _i142 = 0; _i142 < _size140; ++_i142) {
          var elem143 = null;
          elem143 = new CoinUseReservationItem();
          elem143.read(input);
          this.items.push(elem143);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinUseReservation.prototype.write = function(output) {
  output.writeStructBegin('CoinUseReservation');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.shopOrderId !== null && this.shopOrderId !== undefined) {
    output.writeFieldBegin('shopOrderId', Thrift.Type.STRING, 2);
    output.writeString(this.shopOrderId);
    output.writeFieldEnd();
  }
  if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
    output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 3);
    output.writeI32(this.appStoreCode);
    output.writeFieldEnd();
  }
  if (this.items !== null && this.items !== undefined) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter144 in this.items) {
      if (this.items.hasOwnProperty(iter144)) {
        iter144 = this.items[iter144];
        iter144.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 5);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CompactContact = function(args) {
  this.mid = null;
  this.createdTime = null;
  this.modifiedTime = null;
  this.status = null;
  this.settings = null;
  this.displayNameOverridden = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.modifiedTime !== undefined && args.modifiedTime !== null) {
      this.modifiedTime = args.modifiedTime;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = args.settings;
    }
    if (args.displayNameOverridden !== undefined && args.displayNameOverridden !== null) {
      this.displayNameOverridden = args.displayNameOverridden;
    }
  }
};
CompactContact.prototype = {};
CompactContact.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.modifiedTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.settings = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.displayNameOverridden = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompactContact.prototype.write = function(output) {
  output.writeStructBegin('CompactContact');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.modifiedTime !== null && this.modifiedTime !== undefined) {
    output.writeFieldBegin('modifiedTime', Thrift.Type.I64, 3);
    output.writeI64(this.modifiedTime);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.I64, 5);
    output.writeI64(this.settings);
    output.writeFieldEnd();
  }
  if (this.displayNameOverridden !== null && this.displayNameOverridden !== undefined) {
    output.writeFieldBegin('displayNameOverridden', Thrift.Type.STRING, 6);
    output.writeString(this.displayNameOverridden);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContactModification = function(args) {
  this.type = null;
  this.luid = null;
  this.phones = null;
  this.emails = null;
  this.userids = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.luid !== undefined && args.luid !== null) {
      this.luid = args.luid;
    }
    if (args.phones !== undefined && args.phones !== null) {
      this.phones = Thrift.copyList(args.phones, [null]);
    }
    if (args.emails !== undefined && args.emails !== null) {
      this.emails = Thrift.copyList(args.emails, [null]);
    }
    if (args.userids !== undefined && args.userids !== null) {
      this.userids = Thrift.copyList(args.userids, [null]);
    }
  }
};
ContactModification.prototype = {};
ContactModification.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.luid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        this.phones = [];
        var _rtmp3146 = input.readListBegin();
        var _size145 = _rtmp3146.size || 0;
        for (var _i147 = 0; _i147 < _size145; ++_i147) {
          var elem148 = null;
          elem148 = input.readString().value;
          this.phones.push(elem148);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        this.emails = [];
        var _rtmp3150 = input.readListBegin();
        var _size149 = _rtmp3150.size || 0;
        for (var _i151 = 0; _i151 < _size149; ++_i151) {
          var elem152 = null;
          elem152 = input.readString().value;
          this.emails.push(elem152);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        this.userids = [];
        var _rtmp3154 = input.readListBegin();
        var _size153 = _rtmp3154.size || 0;
        for (var _i155 = 0; _i155 < _size153; ++_i155) {
          var elem156 = null;
          elem156 = input.readString().value;
          this.userids.push(elem156);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactModification.prototype.write = function(output) {
  output.writeStructBegin('ContactModification');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.luid !== null && this.luid !== undefined) {
    output.writeFieldBegin('luid', Thrift.Type.STRING, 2);
    output.writeString(this.luid);
    output.writeFieldEnd();
  }
  if (this.phones !== null && this.phones !== undefined) {
    output.writeFieldBegin('phones', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.phones.length);
    for (var iter157 in this.phones) {
      if (this.phones.hasOwnProperty(iter157)) {
        iter157 = this.phones[iter157];
        output.writeString(iter157);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.emails !== null && this.emails !== undefined) {
    output.writeFieldBegin('emails', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.emails.length);
    for (var iter158 in this.emails) {
      if (this.emails.hasOwnProperty(iter158)) {
        iter158 = this.emails[iter158];
        output.writeString(iter158);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userids !== null && this.userids !== undefined) {
    output.writeFieldBegin('userids', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRING, this.userids.length);
    for (var iter159 in this.userids) {
      if (this.userids.hasOwnProperty(iter159)) {
        iter159 = this.userids[iter159];
        output.writeString(iter159);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContactRegistration = function(args) {
  this.contact = null;
  this.luid = null;
  this.contactType = null;
  this.contactKey = null;
  if (args) {
    if (args.contact !== undefined && args.contact !== null) {
      this.contact = new Contact(args.contact);
    }
    if (args.luid !== undefined && args.luid !== null) {
      this.luid = args.luid;
    }
    if (args.contactType !== undefined && args.contactType !== null) {
      this.contactType = args.contactType;
    }
    if (args.contactKey !== undefined && args.contactKey !== null) {
      this.contactKey = args.contactKey;
    }
  }
};
ContactRegistration.prototype = {};
ContactRegistration.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new Contact();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.luid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.contactType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.contactKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactRegistration.prototype.write = function(output) {
  output.writeStructBegin('ContactRegistration');
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 1);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  if (this.luid !== null && this.luid !== undefined) {
    output.writeFieldBegin('luid', Thrift.Type.STRING, 10);
    output.writeString(this.luid);
    output.writeFieldEnd();
  }
  if (this.contactType !== null && this.contactType !== undefined) {
    output.writeFieldBegin('contactType', Thrift.Type.I32, 11);
    output.writeI32(this.contactType);
    output.writeFieldEnd();
  }
  if (this.contactKey !== null && this.contactKey !== undefined) {
    output.writeFieldBegin('contactKey', Thrift.Type.STRING, 12);
    output.writeString(this.contactKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContactReport = function(args) {
  this.mid = null;
  this.exists = null;
  this.contact = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.exists !== undefined && args.exists !== null) {
      this.exists = args.exists;
    }
    if (args.contact !== undefined && args.contact !== null) {
      this.contact = new Contact(args.contact);
    }
  }
};
ContactReport.prototype = {};
ContactReport.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.exists = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new Contact();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactReport.prototype.write = function(output) {
  output.writeStructBegin('ContactReport');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.exists !== null && this.exists !== undefined) {
    output.writeFieldBegin('exists', Thrift.Type.BOOL, 2);
    output.writeBool(this.exists);
    output.writeFieldEnd();
  }
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 3);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContactReportResult = function(args) {
  this.mid = null;
  this.exists = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.exists !== undefined && args.exists !== null) {
      this.exists = args.exists;
    }
  }
};
ContactReportResult.prototype = {};
ContactReportResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.exists = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactReportResult.prototype.write = function(output) {
  output.writeStructBegin('ContactReportResult');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.exists !== null && this.exists !== undefined) {
    output.writeFieldBegin('exists', Thrift.Type.BOOL, 2);
    output.writeBool(this.exists);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeviceInfo = function(args) {
  this.deviceName = null;
  this.systemName = null;
  this.systemVersion = null;
  this.model = null;
  this.carrierCode = null;
  this.carrierName = null;
  this.applicationType = null;
  if (args) {
    if (args.deviceName !== undefined && args.deviceName !== null) {
      this.deviceName = args.deviceName;
    }
    if (args.systemName !== undefined && args.systemName !== null) {
      this.systemName = args.systemName;
    }
    if (args.systemVersion !== undefined && args.systemVersion !== null) {
      this.systemVersion = args.systemVersion;
    }
    if (args.model !== undefined && args.model !== null) {
      this.model = args.model;
    }
    if (args.carrierCode !== undefined && args.carrierCode !== null) {
      this.carrierCode = args.carrierCode;
    }
    if (args.carrierName !== undefined && args.carrierName !== null) {
      this.carrierName = args.carrierName;
    }
    if (args.applicationType !== undefined && args.applicationType !== null) {
      this.applicationType = args.applicationType;
    }
  }
};
DeviceInfo.prototype = {};
DeviceInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.systemVersion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.model = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.carrierCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.carrierName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.applicationType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceInfo.prototype.write = function(output) {
  output.writeStructBegin('DeviceInfo');
  if (this.deviceName !== null && this.deviceName !== undefined) {
    output.writeFieldBegin('deviceName', Thrift.Type.STRING, 1);
    output.writeString(this.deviceName);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 2);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  if (this.systemVersion !== null && this.systemVersion !== undefined) {
    output.writeFieldBegin('systemVersion', Thrift.Type.STRING, 3);
    output.writeString(this.systemVersion);
    output.writeFieldEnd();
  }
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRING, 4);
    output.writeString(this.model);
    output.writeFieldEnd();
  }
  if (this.carrierCode !== null && this.carrierCode !== undefined) {
    output.writeFieldBegin('carrierCode', Thrift.Type.I32, 10);
    output.writeI32(this.carrierCode);
    output.writeFieldEnd();
  }
  if (this.carrierName !== null && this.carrierName !== undefined) {
    output.writeFieldBegin('carrierName', Thrift.Type.STRING, 11);
    output.writeString(this.carrierName);
    output.writeFieldEnd();
  }
  if (this.applicationType !== null && this.applicationType !== undefined) {
    output.writeFieldBegin('applicationType', Thrift.Type.I32, 20);
    output.writeI32(this.applicationType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EmailConfirmation = function(args) {
  this.usePasswordSet = null;
  this.email = null;
  this.password = null;
  this.ignoreDuplication = null;
  if (args) {
    if (args.usePasswordSet !== undefined && args.usePasswordSet !== null) {
      this.usePasswordSet = args.usePasswordSet;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.ignoreDuplication !== undefined && args.ignoreDuplication !== null) {
      this.ignoreDuplication = args.ignoreDuplication;
    }
  }
};
EmailConfirmation.prototype = {};
EmailConfirmation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.usePasswordSet = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.ignoreDuplication = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmailConfirmation.prototype.write = function(output) {
  output.writeStructBegin('EmailConfirmation');
  if (this.usePasswordSet !== null && this.usePasswordSet !== undefined) {
    output.writeFieldBegin('usePasswordSet', Thrift.Type.BOOL, 1);
    output.writeBool(this.usePasswordSet);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 2);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.ignoreDuplication !== null && this.ignoreDuplication !== undefined) {
    output.writeFieldBegin('ignoreDuplication', Thrift.Type.BOOL, 4);
    output.writeBool(this.ignoreDuplication);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EmailConfirmationSession = function(args) {
  this.emailConfirmationType = null;
  this.verifier = null;
  this.targetEmail = null;
  if (args) {
    if (args.emailConfirmationType !== undefined && args.emailConfirmationType !== null) {
      this.emailConfirmationType = args.emailConfirmationType;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.targetEmail !== undefined && args.targetEmail !== null) {
      this.targetEmail = args.targetEmail;
    }
  }
};
EmailConfirmationSession.prototype = {};
EmailConfirmationSession.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.emailConfirmationType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.targetEmail = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmailConfirmationSession.prototype.write = function(output) {
  output.writeStructBegin('EmailConfirmationSession');
  if (this.emailConfirmationType !== null && this.emailConfirmationType !== undefined) {
    output.writeFieldBegin('emailConfirmationType', Thrift.Type.I32, 1);
    output.writeI32(this.emailConfirmationType);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 2);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.targetEmail !== null && this.targetEmail !== undefined) {
    output.writeFieldBegin('targetEmail', Thrift.Type.STRING, 3);
    output.writeString(this.targetEmail);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FriendChannelMatrix = function(args) {
  this.channelId = null;
  this.representMid = null;
  this.count = null;
  this.point = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.representMid !== undefined && args.representMid !== null) {
      this.representMid = args.representMid;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.point !== undefined && args.point !== null) {
      this.point = args.point;
    }
  }
};
FriendChannelMatrix.prototype = {};
FriendChannelMatrix.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.representMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.point = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendChannelMatrix.prototype.write = function(output) {
  output.writeStructBegin('FriendChannelMatrix');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.representMid !== null && this.representMid !== undefined) {
    output.writeFieldBegin('representMid', Thrift.Type.STRING, 2);
    output.writeString(this.representMid);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.point !== null && this.point !== undefined) {
    output.writeFieldBegin('point', Thrift.Type.I32, 4);
    output.writeI32(this.point);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FriendChannelMatricesResponse = function(args) {
  this.expires = null;
  this.matrices = null;
  if (args) {
    if (args.expires !== undefined && args.expires !== null) {
      this.expires = args.expires;
    }
    if (args.matrices !== undefined && args.matrices !== null) {
      this.matrices = Thrift.copyList(args.matrices, [FriendChannelMatrix]);
    }
  }
};
FriendChannelMatricesResponse.prototype = {};
FriendChannelMatricesResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.expires = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.matrices = [];
        var _rtmp3161 = input.readListBegin();
        var _size160 = _rtmp3161.size || 0;
        for (var _i162 = 0; _i162 < _size160; ++_i162) {
          var elem163 = null;
          elem163 = new FriendChannelMatrix();
          elem163.read(input);
          this.matrices.push(elem163);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendChannelMatricesResponse.prototype.write = function(output) {
  output.writeStructBegin('FriendChannelMatricesResponse');
  if (this.expires !== null && this.expires !== undefined) {
    output.writeFieldBegin('expires', Thrift.Type.I64, 1);
    output.writeI64(this.expires);
    output.writeFieldEnd();
  }
  if (this.matrices !== null && this.matrices !== undefined) {
    output.writeFieldBegin('matrices', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.matrices.length);
    for (var iter164 in this.matrices) {
      if (this.matrices.hasOwnProperty(iter164)) {
        iter164 = this.matrices[iter164];
        iter164.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FriendRequest = function(args) {
  this.eMid = null;
  this.mid = null;
  this.direction = null;
  this.method = null;
  this.param = null;
  this.timestamp = null;
  this.seqId = null;
  this.displayName = null;
  this.picturePath = null;
  this.pictureStatus = null;
  if (args) {
    if (args.eMid !== undefined && args.eMid !== null) {
      this.eMid = args.eMid;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.param !== undefined && args.param !== null) {
      this.param = args.param;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.seqId !== undefined && args.seqId !== null) {
      this.seqId = args.seqId;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
  }
};
FriendRequest.prototype = {};
FriendRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.eMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.method = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.param = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.seqId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendRequest.prototype.write = function(output) {
  output.writeStructBegin('FriendRequest');
  if (this.eMid !== null && this.eMid !== undefined) {
    output.writeFieldBegin('eMid', Thrift.Type.STRING, 1);
    output.writeString(this.eMid);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 3);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.I32, 4);
    output.writeI32(this.method);
    output.writeFieldEnd();
  }
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRING, 5);
    output.writeString(this.param);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 6);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.seqId !== null && this.seqId !== undefined) {
    output.writeFieldBegin('seqId', Thrift.Type.I64, 7);
    output.writeI64(this.seqId);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 10);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 11);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 12);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FriendRequestsInfo = function(args) {
  this.totalIncomingCount = null;
  this.totalOutgoingCount = null;
  this.recentIncomings = null;
  this.recentOutgoings = null;
  this.totalIncomingLimit = null;
  this.totalOutgoingLimit = null;
  if (args) {
    if (args.totalIncomingCount !== undefined && args.totalIncomingCount !== null) {
      this.totalIncomingCount = args.totalIncomingCount;
    }
    if (args.totalOutgoingCount !== undefined && args.totalOutgoingCount !== null) {
      this.totalOutgoingCount = args.totalOutgoingCount;
    }
    if (args.recentIncomings !== undefined && args.recentIncomings !== null) {
      this.recentIncomings = Thrift.copyList(args.recentIncomings, [FriendRequest]);
    }
    if (args.recentOutgoings !== undefined && args.recentOutgoings !== null) {
      this.recentOutgoings = Thrift.copyList(args.recentOutgoings, [FriendRequest]);
    }
    if (args.totalIncomingLimit !== undefined && args.totalIncomingLimit !== null) {
      this.totalIncomingLimit = args.totalIncomingLimit;
    }
    if (args.totalOutgoingLimit !== undefined && args.totalOutgoingLimit !== null) {
      this.totalOutgoingLimit = args.totalOutgoingLimit;
    }
  }
};
FriendRequestsInfo.prototype = {};
FriendRequestsInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.totalIncomingCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalOutgoingCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.recentIncomings = [];
        var _rtmp3166 = input.readListBegin();
        var _size165 = _rtmp3166.size || 0;
        for (var _i167 = 0; _i167 < _size165; ++_i167) {
          var elem168 = null;
          elem168 = new FriendRequest();
          elem168.read(input);
          this.recentIncomings.push(elem168);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.recentOutgoings = [];
        var _rtmp3170 = input.readListBegin();
        var _size169 = _rtmp3170.size || 0;
        for (var _i171 = 0; _i171 < _size169; ++_i171) {
          var elem172 = null;
          elem172 = new FriendRequest();
          elem172.read(input);
          this.recentOutgoings.push(elem172);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.totalIncomingLimit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.totalOutgoingLimit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendRequestsInfo.prototype.write = function(output) {
  output.writeStructBegin('FriendRequestsInfo');
  if (this.totalIncomingCount !== null && this.totalIncomingCount !== undefined) {
    output.writeFieldBegin('totalIncomingCount', Thrift.Type.I32, 1);
    output.writeI32(this.totalIncomingCount);
    output.writeFieldEnd();
  }
  if (this.totalOutgoingCount !== null && this.totalOutgoingCount !== undefined) {
    output.writeFieldBegin('totalOutgoingCount', Thrift.Type.I32, 2);
    output.writeI32(this.totalOutgoingCount);
    output.writeFieldEnd();
  }
  if (this.recentIncomings !== null && this.recentIncomings !== undefined) {
    output.writeFieldBegin('recentIncomings', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.recentIncomings.length);
    for (var iter173 in this.recentIncomings) {
      if (this.recentIncomings.hasOwnProperty(iter173)) {
        iter173 = this.recentIncomings[iter173];
        iter173.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.recentOutgoings !== null && this.recentOutgoings !== undefined) {
    output.writeFieldBegin('recentOutgoings', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.recentOutgoings.length);
    for (var iter174 in this.recentOutgoings) {
      if (this.recentOutgoings.hasOwnProperty(iter174)) {
        iter174 = this.recentOutgoings[iter174];
        iter174.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.totalIncomingLimit !== null && this.totalIncomingLimit !== undefined) {
    output.writeFieldBegin('totalIncomingLimit', Thrift.Type.I32, 5);
    output.writeI32(this.totalIncomingLimit);
    output.writeFieldEnd();
  }
  if (this.totalOutgoingLimit !== null && this.totalOutgoingLimit !== undefined) {
    output.writeFieldBegin('totalOutgoingLimit', Thrift.Type.I32, 6);
    output.writeI32(this.totalOutgoingLimit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Geolocation = function(args) {
  this.longitude = null;
  this.latitude = null;
  if (args) {
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    }
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    }
  }
};
Geolocation.prototype = {};
Geolocation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Geolocation.prototype.write = function(output) {
  output.writeStructBegin('Geolocation');
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationTarget = function(args) {
  this.applicationType = null;
  this.applicationVersion = null;
  this.region = null;
  if (args) {
    if (args.applicationType !== undefined && args.applicationType !== null) {
      this.applicationType = args.applicationType;
    }
    if (args.applicationVersion !== undefined && args.applicationVersion !== null) {
      this.applicationVersion = args.applicationVersion;
    }
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
  }
};
NotificationTarget.prototype = {};
NotificationTarget.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.applicationType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.applicationVersion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationTarget.prototype.write = function(output) {
  output.writeStructBegin('NotificationTarget');
  if (this.applicationType !== null && this.applicationType !== undefined) {
    output.writeFieldBegin('applicationType', Thrift.Type.STRING, 1);
    output.writeString(this.applicationType);
    output.writeFieldEnd();
  }
  if (this.applicationVersion !== null && this.applicationVersion !== undefined) {
    output.writeFieldBegin('applicationVersion', Thrift.Type.STRING, 2);
    output.writeString(this.applicationVersion);
    output.writeFieldEnd();
  }
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 3);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GlobalEvent = function(args) {
  this.key = null;
  this.targets = null;
  this.createdTime = null;
  this.data = null;
  this.maxDelay = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.targets !== undefined && args.targets !== null) {
      this.targets = Thrift.copyList(args.targets, [NotificationTarget]);
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
    if (args.maxDelay !== undefined && args.maxDelay !== null) {
      this.maxDelay = args.maxDelay;
    }
  }
};
GlobalEvent.prototype = {};
GlobalEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.targets = [];
        var _rtmp3176 = input.readListBegin();
        var _size175 = _rtmp3176.size || 0;
        for (var _i177 = 0; _i177 < _size175; ++_i177) {
          var elem178 = null;
          elem178 = new NotificationTarget();
          elem178.read(input);
          this.targets.push(elem178);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.data = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.maxDelay = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GlobalEvent.prototype.write = function(output) {
  output.writeStructBegin('GlobalEvent');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.targets !== null && this.targets !== undefined) {
    output.writeFieldBegin('targets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.targets.length);
    for (var iter179 in this.targets) {
      if (this.targets.hasOwnProperty(iter179)) {
        iter179 = this.targets[iter179];
        iter179.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 3);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.I64, 4);
    output.writeI64(this.data);
    output.writeFieldEnd();
  }
  if (this.maxDelay !== null && this.maxDelay !== undefined) {
    output.writeFieldBegin('maxDelay', Thrift.Type.I32, 5);
    output.writeI32(this.maxDelay);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GroupPreference = function(args) {
  this.invitationTicket = null;
  this.favoriteTimestamp = null;
  if (args) {
    if (args.invitationTicket !== undefined && args.invitationTicket !== null) {
      this.invitationTicket = args.invitationTicket;
    }
    if (args.favoriteTimestamp !== undefined && args.favoriteTimestamp !== null) {
      this.favoriteTimestamp = args.favoriteTimestamp;
    }
  }
};
GroupPreference.prototype = {};
GroupPreference.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.invitationTicket = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.favoriteTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupPreference.prototype.write = function(output) {
  output.writeStructBegin('GroupPreference');
  if (this.invitationTicket !== null && this.invitationTicket !== undefined) {
    output.writeFieldBegin('invitationTicket', Thrift.Type.STRING, 1);
    output.writeString(this.invitationTicket);
    output.writeFieldEnd();
  }
  if (this.favoriteTimestamp !== null && this.favoriteTimestamp !== undefined) {
    output.writeFieldBegin('favoriteTimestamp', Thrift.Type.I64, 2);
    output.writeI64(this.favoriteTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Group = function(args) {
  this.id = null;
  this.createdTime = null;
  this.name = null;
  this.pictureStatus = null;
  this.preventedJoinByTicket = null;
  this.groupPreference = null;
  this.members = null;
  this.creator = null;
  this.invitee = null;
  this.notificationDisabled = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.preventedJoinByTicket !== undefined && args.preventedJoinByTicket !== null) {
      this.preventedJoinByTicket = args.preventedJoinByTicket;
    }
    if (args.groupPreference !== undefined && args.groupPreference !== null) {
      this.groupPreference = new GroupPreference(args.groupPreference);
    }
    if (args.members !== undefined && args.members !== null) {
      this.members = Thrift.copyList(args.members, [Contact]);
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = new Contact(args.creator);
    }
    if (args.invitee !== undefined && args.invitee !== null) {
      this.invitee = Thrift.copyList(args.invitee, [Contact]);
    }
    if (args.notificationDisabled !== undefined && args.notificationDisabled !== null) {
      this.notificationDisabled = args.notificationDisabled;
    }
  }
};
Group.prototype = {};
Group.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.preventedJoinByTicket = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupPreference = new GroupPreference();
        this.groupPreference.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.LIST) {
        this.members = [];
        var _rtmp3181 = input.readListBegin();
        var _size180 = _rtmp3181.size || 0;
        for (var _i182 = 0; _i182 < _size180; ++_i182) {
          var elem183 = null;
          elem183 = new Contact();
          elem183.read(input);
          this.members.push(elem183);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.creator = new Contact();
        this.creator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.LIST) {
        this.invitee = [];
        var _rtmp3185 = input.readListBegin();
        var _size184 = _rtmp3185.size || 0;
        for (var _i186 = 0; _i186 < _size184; ++_i186) {
          var elem187 = null;
          elem187 = new Contact();
          elem187.read(input);
          this.invitee.push(elem187);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationDisabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Group.prototype.write = function(output) {
  output.writeStructBegin('Group');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 10);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 11);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.preventedJoinByTicket !== null && this.preventedJoinByTicket !== undefined) {
    output.writeFieldBegin('preventedJoinByTicket', Thrift.Type.BOOL, 12);
    output.writeBool(this.preventedJoinByTicket);
    output.writeFieldEnd();
  }
  if (this.groupPreference !== null && this.groupPreference !== undefined) {
    output.writeFieldBegin('groupPreference', Thrift.Type.STRUCT, 13);
    this.groupPreference.write(output);
    output.writeFieldEnd();
  }
  if (this.members !== null && this.members !== undefined) {
    output.writeFieldBegin('members', Thrift.Type.LIST, 20);
    output.writeListBegin(Thrift.Type.STRUCT, this.members.length);
    for (var iter188 in this.members) {
      if (this.members.hasOwnProperty(iter188)) {
        iter188 = this.members[iter188];
        iter188.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRUCT, 21);
    this.creator.write(output);
    output.writeFieldEnd();
  }
  if (this.invitee !== null && this.invitee !== undefined) {
    output.writeFieldBegin('invitee', Thrift.Type.LIST, 22);
    output.writeListBegin(Thrift.Type.STRUCT, this.invitee.length);
    for (var iter189 in this.invitee) {
      if (this.invitee.hasOwnProperty(iter189)) {
        iter189 = this.invitee[iter189];
        iter189.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notificationDisabled !== null && this.notificationDisabled !== undefined) {
    output.writeFieldBegin('notificationDisabled', Thrift.Type.BOOL, 31);
    output.writeBool(this.notificationDisabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IdentityCredential = function(args) {
  this.provider = null;
  this.identifier = null;
  this.password = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
IdentityCredential.prototype = {};
IdentityCredential.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IdentityCredential.prototype.write = function(output) {
  output.writeStructBegin('IdentityCredential');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 1);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 2);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LastReadMessageId = function(args) {
  this.mid = null;
  this.lastReadMessageId = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.lastReadMessageId !== undefined && args.lastReadMessageId !== null) {
      this.lastReadMessageId = args.lastReadMessageId;
    }
  }
};
LastReadMessageId.prototype = {};
LastReadMessageId.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lastReadMessageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LastReadMessageId.prototype.write = function(output) {
  output.writeStructBegin('LastReadMessageId');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.lastReadMessageId !== null && this.lastReadMessageId !== undefined) {
    output.writeFieldBegin('lastReadMessageId', Thrift.Type.STRING, 2);
    output.writeString(this.lastReadMessageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LastReadMessageIds = function(args) {
  this.chatId = null;
  this.lastReadMessageIds = null;
  if (args) {
    if (args.chatId !== undefined && args.chatId !== null) {
      this.chatId = args.chatId;
    }
    if (args.lastReadMessageIds !== undefined && args.lastReadMessageIds !== null) {
      this.lastReadMessageIds = Thrift.copyList(args.lastReadMessageIds, [LastReadMessageId]);
    }
  }
};
LastReadMessageIds.prototype = {};
LastReadMessageIds.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.chatId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.lastReadMessageIds = [];
        var _rtmp3191 = input.readListBegin();
        var _size190 = _rtmp3191.size || 0;
        for (var _i192 = 0; _i192 < _size190; ++_i192) {
          var elem193 = null;
          elem193 = new LastReadMessageId();
          elem193.read(input);
          this.lastReadMessageIds.push(elem193);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LastReadMessageIds.prototype.write = function(output) {
  output.writeStructBegin('LastReadMessageIds');
  if (this.chatId !== null && this.chatId !== undefined) {
    output.writeFieldBegin('chatId', Thrift.Type.STRING, 1);
    output.writeString(this.chatId);
    output.writeFieldEnd();
  }
  if (this.lastReadMessageIds !== null && this.lastReadMessageIds !== undefined) {
    output.writeFieldBegin('lastReadMessageIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.lastReadMessageIds.length);
    for (var iter194 in this.lastReadMessageIds) {
      if (this.lastReadMessageIds.hasOwnProperty(iter194)) {
        iter194 = this.lastReadMessageIds[iter194];
        iter194.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VerificationSessionData = function(args) {
  this.sessionId = null;
  this.method = null;
  this.callback = null;
  this.normalizedPhone = null;
  this.countryCode = null;
  this.nationalSignificantNumber = null;
  this.availableVerificationMethods = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.callback !== undefined && args.callback !== null) {
      this.callback = args.callback;
    }
    if (args.normalizedPhone !== undefined && args.normalizedPhone !== null) {
      this.normalizedPhone = args.normalizedPhone;
    }
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
    if (args.nationalSignificantNumber !== undefined && args.nationalSignificantNumber !== null) {
      this.nationalSignificantNumber = args.nationalSignificantNumber;
    }
    if (args.availableVerificationMethods !== undefined && args.availableVerificationMethods !== null) {
      this.availableVerificationMethods = Thrift.copyList(args.availableVerificationMethods, [null]);
    }
  }
};
VerificationSessionData.prototype = {};
VerificationSessionData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.method = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.callback = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.normalizedPhone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.nationalSignificantNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.availableVerificationMethods = [];
        var _rtmp3196 = input.readListBegin();
        var _size195 = _rtmp3196.size || 0;
        for (var _i197 = 0; _i197 < _size195; ++_i197) {
          var elem198 = null;
          elem198 = input.readI32().value;
          this.availableVerificationMethods.push(elem198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VerificationSessionData.prototype.write = function(output) {
  output.writeStructBegin('VerificationSessionData');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.I32, 2);
    output.writeI32(this.method);
    output.writeFieldEnd();
  }
  if (this.callback !== null && this.callback !== undefined) {
    output.writeFieldBegin('callback', Thrift.Type.STRING, 3);
    output.writeString(this.callback);
    output.writeFieldEnd();
  }
  if (this.normalizedPhone !== null && this.normalizedPhone !== undefined) {
    output.writeFieldBegin('normalizedPhone', Thrift.Type.STRING, 4);
    output.writeString(this.normalizedPhone);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 5);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.nationalSignificantNumber !== null && this.nationalSignificantNumber !== undefined) {
    output.writeFieldBegin('nationalSignificantNumber', Thrift.Type.STRING, 6);
    output.writeString(this.nationalSignificantNumber);
    output.writeFieldEnd();
  }
  if (this.availableVerificationMethods !== null && this.availableVerificationMethods !== undefined) {
    output.writeFieldBegin('availableVerificationMethods', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.I32, this.availableVerificationMethods.length);
    for (var iter199 in this.availableVerificationMethods) {
      if (this.availableVerificationMethods.hasOwnProperty(iter199)) {
        iter199 = this.availableVerificationMethods[iter199];
        output.writeI32(iter199);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LoginResult = function(args) {
  this.authToken = null;
  this.certificate = null;
  this.verifier = null;
  this.pinCode = null;
  this.type = null;
  this.lastPrimaryBindTime = null;
  this.displayMessage = null;
  this.sessionForSMSConfirm = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.certificate !== undefined && args.certificate !== null) {
      this.certificate = args.certificate;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.pinCode !== undefined && args.pinCode !== null) {
      this.pinCode = args.pinCode;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.lastPrimaryBindTime !== undefined && args.lastPrimaryBindTime !== null) {
      this.lastPrimaryBindTime = args.lastPrimaryBindTime;
    }
    if (args.displayMessage !== undefined && args.displayMessage !== null) {
      this.displayMessage = args.displayMessage;
    }
    if (args.sessionForSMSConfirm !== undefined && args.sessionForSMSConfirm !== null) {
      this.sessionForSMSConfirm = new VerificationSessionData(args.sessionForSMSConfirm);
    }
  }
};
LoginResult.prototype = {};
LoginResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.certificate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.pinCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.lastPrimaryBindTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.displayMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionForSMSConfirm = new VerificationSessionData();
        this.sessionForSMSConfirm.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginResult.prototype.write = function(output) {
  output.writeStructBegin('LoginResult');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRING, 2);
    output.writeString(this.certificate);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 3);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.pinCode !== null && this.pinCode !== undefined) {
    output.writeFieldBegin('pinCode', Thrift.Type.STRING, 4);
    output.writeString(this.pinCode);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.lastPrimaryBindTime !== null && this.lastPrimaryBindTime !== undefined) {
    output.writeFieldBegin('lastPrimaryBindTime', Thrift.Type.I64, 6);
    output.writeI64(this.lastPrimaryBindTime);
    output.writeFieldEnd();
  }
  if (this.displayMessage !== null && this.displayMessage !== undefined) {
    output.writeFieldBegin('displayMessage', Thrift.Type.STRING, 7);
    output.writeString(this.displayMessage);
    output.writeFieldEnd();
  }
  if (this.sessionForSMSConfirm !== null && this.sessionForSMSConfirm !== undefined) {
    output.writeFieldBegin('sessionForSMSConfirm', Thrift.Type.STRUCT, 8);
    this.sessionForSMSConfirm.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LoginRequest = function(args) {
  this.type = null;
  this.identityProvider = null;
  this.identifier = null;
  this.password = null;
  this.keepLoggedIn = null;
  this.accessLocation = null;
  this.systemName = null;
  this.certificate = null;
  this.verifier = null;
  this.secret = null;
  this.e2eeVersion = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.identityProvider !== undefined && args.identityProvider !== null) {
      this.identityProvider = args.identityProvider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.keepLoggedIn !== undefined && args.keepLoggedIn !== null) {
      this.keepLoggedIn = args.keepLoggedIn;
    }
    if (args.accessLocation !== undefined && args.accessLocation !== null) {
      this.accessLocation = args.accessLocation;
    }
    if (args.systemName !== undefined && args.systemName !== null) {
      this.systemName = args.systemName;
    }
    if (args.certificate !== undefined && args.certificate !== null) {
      this.certificate = args.certificate;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.secret !== undefined && args.secret !== null) {
      this.secret = args.secret;
    }
    if (args.e2eeVersion !== undefined && args.e2eeVersion !== null) {
      this.e2eeVersion = args.e2eeVersion;
    }
  }
};
LoginRequest.prototype = {};
LoginRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.identityProvider = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.keepLoggedIn = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.accessLocation = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.certificate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.secret = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.e2eeVersion = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginRequest.prototype.write = function(output) {
  output.writeStructBegin('LoginRequest');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.identityProvider !== null && this.identityProvider !== undefined) {
    output.writeFieldBegin('identityProvider', Thrift.Type.I32, 2);
    output.writeI32(this.identityProvider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 3);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.keepLoggedIn !== null && this.keepLoggedIn !== undefined) {
    output.writeFieldBegin('keepLoggedIn', Thrift.Type.BOOL, 5);
    output.writeBool(this.keepLoggedIn);
    output.writeFieldEnd();
  }
  if (this.accessLocation !== null && this.accessLocation !== undefined) {
    output.writeFieldBegin('accessLocation', Thrift.Type.STRING, 6);
    output.writeString(this.accessLocation);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 7);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRING, 8);
    output.writeString(this.certificate);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 9);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.secret !== null && this.secret !== undefined) {
    output.writeFieldBegin('secret', Thrift.Type.STRING, 10);
    output.writeString(this.secret);
    output.writeFieldEnd();
  }
  if (this.e2eeVersion !== null && this.e2eeVersion !== undefined) {
    output.writeFieldBegin('e2eeVersion', Thrift.Type.I32, 11);
    output.writeI32(this.e2eeVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LoginSession = function(args) {
  this.tokenKey = null;
  this.expirationTime = null;
  this.applicationType = null;
  this.systemName = null;
  this.accessLocation = null;
  if (args) {
    if (args.tokenKey !== undefined && args.tokenKey !== null) {
      this.tokenKey = args.tokenKey;
    }
    if (args.expirationTime !== undefined && args.expirationTime !== null) {
      this.expirationTime = args.expirationTime;
    }
    if (args.applicationType !== undefined && args.applicationType !== null) {
      this.applicationType = args.applicationType;
    }
    if (args.systemName !== undefined && args.systemName !== null) {
      this.systemName = args.systemName;
    }
    if (args.accessLocation !== undefined && args.accessLocation !== null) {
      this.accessLocation = args.accessLocation;
    }
  }
};
LoginSession.prototype = {};
LoginSession.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tokenKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expirationTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.applicationType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.accessLocation = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginSession.prototype.write = function(output) {
  output.writeStructBegin('LoginSession');
  if (this.tokenKey !== null && this.tokenKey !== undefined) {
    output.writeFieldBegin('tokenKey', Thrift.Type.STRING, 1);
    output.writeString(this.tokenKey);
    output.writeFieldEnd();
  }
  if (this.expirationTime !== null && this.expirationTime !== undefined) {
    output.writeFieldBegin('expirationTime', Thrift.Type.I64, 3);
    output.writeI64(this.expirationTime);
    output.writeFieldEnd();
  }
  if (this.applicationType !== null && this.applicationType !== undefined) {
    output.writeFieldBegin('applicationType', Thrift.Type.I32, 11);
    output.writeI32(this.applicationType);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 12);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  if (this.accessLocation !== null && this.accessLocation !== undefined) {
    output.writeFieldBegin('accessLocation', Thrift.Type.STRING, 22);
    output.writeString(this.accessLocation);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Message = function(args) {
  this._from = null;
  this.to = null;
  this.toType = null;
  this.id = null;
  this.createdTime = null;
  this.deliveredTime = null;
  this.text = null;
  this.location = null;
  this.hasContent = null;
  this.contentType = null;
  this.contentPreview = null;
  this.contentMetadata = null;
  this.sessionId = null;
  this.chunks = null;
  this.relatedMessageId = null;
  this.messageRelationType = null;
  this.readCount = null;
  this.relatedMessageServiceCode = null;
  if (args) {
    if (args._from !== undefined && args._from !== null) {
      this._from = args._from;
    }
    if (args.to !== undefined && args.to !== null) {
      this.to = args.to;
    }
    if (args.toType !== undefined && args.toType !== null) {
      this.toType = args.toType;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.deliveredTime !== undefined && args.deliveredTime !== null) {
      this.deliveredTime = args.deliveredTime;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new Location(args.location);
    }
    if (args.hasContent !== undefined && args.hasContent !== null) {
      this.hasContent = args.hasContent;
    }
    if (args.contentType !== undefined && args.contentType !== null) {
      this.contentType = args.contentType;
    }
    if (args.contentPreview !== undefined && args.contentPreview !== null) {
      this.contentPreview = args.contentPreview;
    }
    if (args.contentMetadata !== undefined && args.contentMetadata !== null) {
      this.contentMetadata = Thrift.copyMap(args.contentMetadata, [null]);
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.chunks !== undefined && args.chunks !== null) {
      this.chunks = Thrift.copyList(args.chunks, [null]);
    }
    if (args.relatedMessageId !== undefined && args.relatedMessageId !== null) {
      this.relatedMessageId = args.relatedMessageId;
    }
    if (args.messageRelationType !== undefined && args.messageRelationType !== null) {
      this.messageRelationType = args.messageRelationType;
    }
    if (args.readCount !== undefined && args.readCount !== null) {
      this.readCount = args.readCount;
    }
    if (args.relatedMessageServiceCode !== undefined && args.relatedMessageServiceCode !== null) {
      this.relatedMessageServiceCode = args.relatedMessageServiceCode;
    }
  }
};
Message.prototype = {};
Message.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this._from = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.to = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.toType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.deliveredTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.hasContent = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.contentType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.contentPreview = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.MAP) {
        this.contentMetadata = {};
        var _rtmp3201 = input.readMapBegin();
        var _size200 = _rtmp3201.size || 0;
        for (var _i202 = 0; _i202 < _size200; ++_i202) {
          if (_i202 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key203 = null;
          var val204 = null;
          key203 = input.readString().value;
          val204 = input.readString().value;
          this.contentMetadata[key203] = val204;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.BYTE) {
        this.sessionId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.LIST) {
        this.chunks = [];
        var _rtmp3206 = input.readListBegin();
        var _size205 = _rtmp3206.size || 0;
        for (var _i207 = 0; _i207 < _size205; ++_i207) {
          var elem208 = null;
          elem208 = input.readBinary().value;
          this.chunks.push(elem208);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.relatedMessageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.messageRelationType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I64) {
        this.readCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I32) {
        this.relatedMessageServiceCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Message.prototype.write = function(output) {
  output.writeStructBegin('Message');
  if (this._from !== null && this._from !== undefined) {
    output.writeFieldBegin('_from', Thrift.Type.STRING, 1);
    output.writeString(this._from);
    output.writeFieldEnd();
  }
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.STRING, 2);
    output.writeString(this.to);
    output.writeFieldEnd();
  }
  if (this.toType !== null && this.toType !== undefined) {
    output.writeFieldBegin('toType', Thrift.Type.I32, 3);
    output.writeI32(this.toType);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 4);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 5);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.deliveredTime !== null && this.deliveredTime !== undefined) {
    output.writeFieldBegin('deliveredTime', Thrift.Type.I64, 6);
    output.writeI64(this.deliveredTime);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 10);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 11);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.hasContent !== null && this.hasContent !== undefined) {
    output.writeFieldBegin('hasContent', Thrift.Type.BOOL, 14);
    output.writeBool(this.hasContent);
    output.writeFieldEnd();
  }
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.I32, 15);
    output.writeI32(this.contentType);
    output.writeFieldEnd();
  }
  if (this.contentPreview !== null && this.contentPreview !== undefined) {
    output.writeFieldBegin('contentPreview', Thrift.Type.STRING, 17);
    output.writeBinary(this.contentPreview);
    output.writeFieldEnd();
  }
  if (this.contentMetadata !== null && this.contentMetadata !== undefined) {
    output.writeFieldBegin('contentMetadata', Thrift.Type.MAP, 18);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.contentMetadata));
    for (var kiter209 in this.contentMetadata) {
      if (this.contentMetadata.hasOwnProperty(kiter209)) {
        var viter210 = this.contentMetadata[kiter209];
        output.writeString(kiter209);
        output.writeString(viter210);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.BYTE, 19);
    output.writeByte(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.chunks !== null && this.chunks !== undefined) {
    output.writeFieldBegin('chunks', Thrift.Type.LIST, 20);
    output.writeListBegin(Thrift.Type.STRING, this.chunks.length);
    for (var iter211 in this.chunks) {
      if (this.chunks.hasOwnProperty(iter211)) {
        iter211 = this.chunks[iter211];
        output.writeBinary(iter211);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.relatedMessageId !== null && this.relatedMessageId !== undefined) {
    output.writeFieldBegin('relatedMessageId', Thrift.Type.STRING, 21);
    output.writeString(this.relatedMessageId);
    output.writeFieldEnd();
  }
  if (this.messageRelationType !== null && this.messageRelationType !== undefined) {
    output.writeFieldBegin('messageRelationType', Thrift.Type.I32, 22);
    output.writeI32(this.messageRelationType);
    output.writeFieldEnd();
  }
  if (this.readCount !== null && this.readCount !== undefined) {
    output.writeFieldBegin('readCount', Thrift.Type.I64, 23);
    output.writeI64(this.readCount);
    output.writeFieldEnd();
  }
  if (this.relatedMessageServiceCode !== null && this.relatedMessageServiceCode !== undefined) {
    output.writeFieldBegin('relatedMessageServiceCode', Thrift.Type.I32, 24);
    output.writeI32(this.relatedMessageServiceCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareMessage = function(args) {
  this.message = null;
  this.fromType = null;
  this.squareMessageRevision = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new Message(args.message);
    }
    if (args.fromType !== undefined && args.fromType !== null) {
      this.fromType = args.fromType;
    }
    if (args.squareMessageRevision !== undefined && args.squareMessageRevision !== null) {
      this.squareMessageRevision = args.squareMessageRevision;
    }
  }
};
SquareMessage.prototype = {};
SquareMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.fromType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.squareMessageRevision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareMessage.prototype.write = function(output) {
  output.writeStructBegin('SquareMessage');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  if (this.fromType !== null && this.fromType !== undefined) {
    output.writeFieldBegin('fromType', Thrift.Type.I32, 3);
    output.writeI32(this.fromType);
    output.writeFieldEnd();
  }
  if (this.squareMessageRevision !== null && this.squareMessageRevision !== undefined) {
    output.writeFieldBegin('squareMessageRevision', Thrift.Type.I64, 4);
    output.writeI64(this.squareMessageRevision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareChatStatusWithoutMessage = function(args) {
  this.memberCount = null;
  this.unreadMessageCount = null;
  if (args) {
    if (args.memberCount !== undefined && args.memberCount !== null) {
      this.memberCount = args.memberCount;
    }
    if (args.unreadMessageCount !== undefined && args.unreadMessageCount !== null) {
      this.unreadMessageCount = args.unreadMessageCount;
    }
  }
};
SquareChatStatusWithoutMessage.prototype = {};
SquareChatStatusWithoutMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.memberCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.unreadMessageCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareChatStatusWithoutMessage.prototype.write = function(output) {
  output.writeStructBegin('SquareChatStatusWithoutMessage');
  if (this.memberCount !== null && this.memberCount !== undefined) {
    output.writeFieldBegin('memberCount', Thrift.Type.I32, 1);
    output.writeI32(this.memberCount);
    output.writeFieldEnd();
  }
  if (this.unreadMessageCount !== null && this.unreadMessageCount !== undefined) {
    output.writeFieldBegin('unreadMessageCount', Thrift.Type.I32, 2);
    output.writeI32(this.unreadMessageCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareChatStatus = function(args) {
  this.lastMessage = null;
  this.senderDisplayName = null;
  this.otherStatus = null;
  if (args) {
    if (args.lastMessage !== undefined && args.lastMessage !== null) {
      this.lastMessage = new SquareMessage(args.lastMessage);
    }
    if (args.senderDisplayName !== undefined && args.senderDisplayName !== null) {
      this.senderDisplayName = args.senderDisplayName;
    }
    if (args.otherStatus !== undefined && args.otherStatus !== null) {
      this.otherStatus = new SquareChatStatusWithoutMessage(args.otherStatus);
    }
  }
};
SquareChatStatus.prototype = {};
SquareChatStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.lastMessage = new SquareMessage();
        this.lastMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.senderDisplayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.otherStatus = new SquareChatStatusWithoutMessage();
        this.otherStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareChatStatus.prototype.write = function(output) {
  output.writeStructBegin('SquareChatStatus');
  if (this.lastMessage !== null && this.lastMessage !== undefined) {
    output.writeFieldBegin('lastMessage', Thrift.Type.STRUCT, 3);
    this.lastMessage.write(output);
    output.writeFieldEnd();
  }
  if (this.senderDisplayName !== null && this.senderDisplayName !== undefined) {
    output.writeFieldBegin('senderDisplayName', Thrift.Type.STRING, 4);
    output.writeString(this.senderDisplayName);
    output.writeFieldEnd();
  }
  if (this.otherStatus !== null && this.otherStatus !== undefined) {
    output.writeFieldBegin('otherStatus', Thrift.Type.STRUCT, 5);
    this.otherStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareChatMember = function(args) {
  this.squareMemberMid = null;
  this.squareChatMid = null;
  this.revision = null;
  this.membershipState = null;
  this.notificationForMessage = null;
  if (args) {
    if (args.squareMemberMid !== undefined && args.squareMemberMid !== null) {
      this.squareMemberMid = args.squareMemberMid;
    }
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.membershipState !== undefined && args.membershipState !== null) {
      this.membershipState = args.membershipState;
    }
    if (args.notificationForMessage !== undefined && args.notificationForMessage !== null) {
      this.notificationForMessage = args.notificationForMessage;
    }
  }
};
SquareChatMember.prototype = {};
SquareChatMember.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMemberMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.membershipState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationForMessage = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareChatMember.prototype.write = function(output) {
  output.writeStructBegin('SquareChatMember');
  if (this.squareMemberMid !== null && this.squareMemberMid !== undefined) {
    output.writeFieldBegin('squareMemberMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMemberMid);
    output.writeFieldEnd();
  }
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 3);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.membershipState !== null && this.membershipState !== undefined) {
    output.writeFieldBegin('membershipState', Thrift.Type.I32, 4);
    output.writeI32(this.membershipState);
    output.writeFieldEnd();
  }
  if (this.notificationForMessage !== null && this.notificationForMessage !== undefined) {
    output.writeFieldBegin('notificationForMessage', Thrift.Type.BOOL, 5);
    output.writeBool(this.notificationForMessage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageOperation = function(args) {
  this.revision = null;
  this.createdTime = null;
  this.type = null;
  this.reqSeq = null;
  this.status = null;
  this.param1 = null;
  this.param2 = null;
  this.param3 = null;
  this.message = null;
  if (args) {
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.param1 !== undefined && args.param1 !== null) {
      this.param1 = args.param1;
    }
    if (args.param2 !== undefined && args.param2 !== null) {
      this.param2 = args.param2;
    }
    if (args.param3 !== undefined && args.param3 !== null) {
      this.param3 = args.param3;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new Message(args.message);
    }
  }
};
MessageOperation.prototype = {};
MessageOperation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.param1 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.param2 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.param3 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageOperation.prototype.write = function(output) {
  output.writeStructBegin('MessageOperation');
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 1);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 4);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 5);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.param1 !== null && this.param1 !== undefined) {
    output.writeFieldBegin('param1', Thrift.Type.STRING, 10);
    output.writeString(this.param1);
    output.writeFieldEnd();
  }
  if (this.param2 !== null && this.param2 !== undefined) {
    output.writeFieldBegin('param2', Thrift.Type.STRING, 11);
    output.writeString(this.param2);
    output.writeFieldEnd();
  }
  if (this.param3 !== null && this.param3 !== undefined) {
    output.writeFieldBegin('param3', Thrift.Type.STRING, 12);
    output.writeString(this.param3);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 20);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageOperations = function(args) {
  this.operations = null;
  this.endFlag = null;
  if (args) {
    if (args.operations !== undefined && args.operations !== null) {
      this.operations = Thrift.copyList(args.operations, [MessageOperation]);
    }
    if (args.endFlag !== undefined && args.endFlag !== null) {
      this.endFlag = args.endFlag;
    }
  }
};
MessageOperations.prototype = {};
MessageOperations.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.operations = [];
        var _rtmp3213 = input.readListBegin();
        var _size212 = _rtmp3213.size || 0;
        for (var _i214 = 0; _i214 < _size212; ++_i214) {
          var elem215 = null;
          elem215 = new MessageOperation();
          elem215.read(input);
          this.operations.push(elem215);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.endFlag = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageOperations.prototype.write = function(output) {
  output.writeStructBegin('MessageOperations');
  if (this.operations !== null && this.operations !== undefined) {
    output.writeFieldBegin('operations', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.operations.length);
    for (var iter216 in this.operations) {
      if (this.operations.hasOwnProperty(iter216)) {
        iter216 = this.operations[iter216];
        iter216.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.endFlag !== null && this.endFlag !== undefined) {
    output.writeFieldBegin('endFlag', Thrift.Type.BOOL, 2);
    output.writeBool(this.endFlag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageStoreResult = function(args) {
  this.requestId = null;
  this.messageIds = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.messageIds !== undefined && args.messageIds !== null) {
      this.messageIds = Thrift.copyList(args.messageIds, [null]);
    }
  }
};
MessageStoreResult.prototype = {};
MessageStoreResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.messageIds = [];
        var _rtmp3218 = input.readListBegin();
        var _size217 = _rtmp3218.size || 0;
        for (var _i219 = 0; _i219 < _size217; ++_i219) {
          var elem220 = null;
          elem220 = input.readString().value;
          this.messageIds.push(elem220);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageStoreResult.prototype.write = function(output) {
  output.writeStructBegin('MessageStoreResult');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.messageIds !== null && this.messageIds !== undefined) {
    output.writeFieldBegin('messageIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.messageIds.length);
    for (var iter221 in this.messageIds) {
      if (this.messageIds.hasOwnProperty(iter221)) {
        iter221 = this.messageIds[iter221];
        output.writeString(iter221);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaProfile = function(args) {
  this.createTime = null;
  this.regionCode = null;
  this.identities = null;
  if (args) {
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.regionCode !== undefined && args.regionCode !== null) {
      this.regionCode = args.regionCode;
    }
    if (args.identities !== undefined && args.identities !== null) {
      this.identities = Thrift.copyMap(args.identities, [null]);
    }
  }
};
MetaProfile.prototype = {};
MetaProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.regionCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.identities = {};
        var _rtmp3223 = input.readMapBegin();
        var _size222 = _rtmp3223.size || 0;
        for (var _i224 = 0; _i224 < _size222; ++_i224) {
          if (_i224 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key225 = null;
          var val226 = null;
          key225 = input.readI32().value;
          val226 = input.readString().value;
          this.identities[key225] = val226;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaProfile.prototype.write = function(output) {
  output.writeStructBegin('MetaProfile');
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 1);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.regionCode !== null && this.regionCode !== undefined) {
    output.writeFieldBegin('regionCode', Thrift.Type.STRING, 2);
    output.writeString(this.regionCode);
    output.writeFieldEnd();
  }
  if (this.identities !== null && this.identities !== undefined) {
    output.writeFieldBegin('identities', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.identities));
    for (var kiter227 in this.identities) {
      if (this.identities.hasOwnProperty(kiter227)) {
        var viter228 = this.identities[kiter227];
        output.writeI32(kiter227);
        output.writeString(viter228);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationItem = function(args) {
  this.id = null;
  this._from = null;
  this.to = null;
  this.fromChannel = null;
  this.toChannel = null;
  this.revision = null;
  this.createdTime = null;
  this.content = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args._from !== undefined && args._from !== null) {
      this._from = args._from;
    }
    if (args.to !== undefined && args.to !== null) {
      this.to = args.to;
    }
    if (args.fromChannel !== undefined && args.fromChannel !== null) {
      this.fromChannel = args.fromChannel;
    }
    if (args.toChannel !== undefined && args.toChannel !== null) {
      this.toChannel = args.toChannel;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = Thrift.copyMap(args.content, [null]);
    }
  }
};
NotificationItem.prototype = {};
NotificationItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this._from = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.to = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fromChannel = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.toChannel = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        this.content = {};
        var _rtmp3230 = input.readMapBegin();
        var _size229 = _rtmp3230.size || 0;
        for (var _i231 = 0; _i231 < _size229; ++_i231) {
          if (_i231 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key232 = null;
          var val233 = null;
          key232 = input.readString().value;
          val233 = input.readString().value;
          this.content[key232] = val233;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationItem.prototype.write = function(output) {
  output.writeStructBegin('NotificationItem');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this._from !== null && this._from !== undefined) {
    output.writeFieldBegin('_from', Thrift.Type.STRING, 2);
    output.writeString(this._from);
    output.writeFieldEnd();
  }
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.STRING, 3);
    output.writeString(this.to);
    output.writeFieldEnd();
  }
  if (this.fromChannel !== null && this.fromChannel !== undefined) {
    output.writeFieldBegin('fromChannel', Thrift.Type.STRING, 4);
    output.writeString(this.fromChannel);
    output.writeFieldEnd();
  }
  if (this.toChannel !== null && this.toChannel !== undefined) {
    output.writeFieldBegin('toChannel', Thrift.Type.STRING, 5);
    output.writeString(this.toChannel);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 7);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 8);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.content));
    for (var kiter234 in this.content) {
      if (this.content.hasOwnProperty(kiter234)) {
        var viter235 = this.content[kiter234];
        output.writeString(kiter234);
        output.writeString(viter235);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationFetchResult = function(args) {
  this.fetchMode = null;
  this.itemList = null;
  if (args) {
    if (args.fetchMode !== undefined && args.fetchMode !== null) {
      this.fetchMode = args.fetchMode;
    }
    if (args.itemList !== undefined && args.itemList !== null) {
      this.itemList = Thrift.copyList(args.itemList, [NotificationItem]);
    }
  }
};
NotificationFetchResult.prototype = {};
NotificationFetchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.fetchMode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.itemList = [];
        var _rtmp3237 = input.readListBegin();
        var _size236 = _rtmp3237.size || 0;
        for (var _i238 = 0; _i238 < _size236; ++_i238) {
          var elem239 = null;
          elem239 = new NotificationItem();
          elem239.read(input);
          this.itemList.push(elem239);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationFetchResult.prototype.write = function(output) {
  output.writeStructBegin('NotificationFetchResult');
  if (this.fetchMode !== null && this.fetchMode !== undefined) {
    output.writeFieldBegin('fetchMode', Thrift.Type.I32, 1);
    output.writeI32(this.fetchMode);
    output.writeFieldEnd();
  }
  if (this.itemList !== null && this.itemList !== undefined) {
    output.writeFieldBegin('itemList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.itemList.length);
    for (var iter240 in this.itemList) {
      if (this.itemList.hasOwnProperty(iter240)) {
        iter240 = this.itemList[iter240];
        iter240.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Operation = function(args) {
  this.revision = null;
  this.createdTime = null;
  this.type = null;
  this.reqSeq = null;
  this.checksum = null;
  this.status = null;
  this.param1 = null;
  this.param2 = null;
  this.param3 = null;
  this.message = null;
  if (args) {
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.checksum !== undefined && args.checksum !== null) {
      this.checksum = args.checksum;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.param1 !== undefined && args.param1 !== null) {
      this.param1 = args.param1;
    }
    if (args.param2 !== undefined && args.param2 !== null) {
      this.param2 = args.param2;
    }
    if (args.param3 !== undefined && args.param3 !== null) {
      this.param3 = args.param3;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new Message(args.message);
    }
  }
};
Operation.prototype = {};
Operation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.checksum = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.param1 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.param2 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.param3 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Operation.prototype.write = function(output) {
  output.writeStructBegin('Operation');
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 1);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 4);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.checksum !== null && this.checksum !== undefined) {
    output.writeFieldBegin('checksum', Thrift.Type.STRING, 5);
    output.writeString(this.checksum);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 7);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.param1 !== null && this.param1 !== undefined) {
    output.writeFieldBegin('param1', Thrift.Type.STRING, 10);
    output.writeString(this.param1);
    output.writeFieldEnd();
  }
  if (this.param2 !== null && this.param2 !== undefined) {
    output.writeFieldBegin('param2', Thrift.Type.STRING, 11);
    output.writeString(this.param2);
    output.writeFieldEnd();
  }
  if (this.param3 !== null && this.param3 !== undefined) {
    output.writeFieldBegin('param3', Thrift.Type.STRING, 12);
    output.writeString(this.param3);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 20);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PaymentReservation = function(args) {
  this.receiverMid = null;
  this.productId = null;
  this.language = null;
  this.location = null;
  this.currency = null;
  this.price = null;
  this.appStoreCode = null;
  this.messageText = null;
  this.messageTemplate = null;
  this.packageId = null;
  if (args) {
    if (args.receiverMid !== undefined && args.receiverMid !== null) {
      this.receiverMid = args.receiverMid;
    }
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
      this.appStoreCode = args.appStoreCode;
    }
    if (args.messageText !== undefined && args.messageText !== null) {
      this.messageText = args.messageText;
    }
    if (args.messageTemplate !== undefined && args.messageTemplate !== null) {
      this.messageTemplate = args.messageTemplate;
    }
    if (args.packageId !== undefined && args.packageId !== null) {
      this.packageId = args.packageId;
    }
  }
};
PaymentReservation.prototype = {};
PaymentReservation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.receiverMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.currency = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.appStoreCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.messageText = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.messageTemplate = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.packageId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentReservation.prototype.write = function(output) {
  output.writeStructBegin('PaymentReservation');
  if (this.receiverMid !== null && this.receiverMid !== undefined) {
    output.writeFieldBegin('receiverMid', Thrift.Type.STRING, 1);
    output.writeString(this.receiverMid);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 2);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 4);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRING, 5);
    output.writeString(this.currency);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 6);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
    output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 7);
    output.writeI32(this.appStoreCode);
    output.writeFieldEnd();
  }
  if (this.messageText !== null && this.messageText !== undefined) {
    output.writeFieldBegin('messageText', Thrift.Type.STRING, 8);
    output.writeString(this.messageText);
    output.writeFieldEnd();
  }
  if (this.messageTemplate !== null && this.messageTemplate !== undefined) {
    output.writeFieldBegin('messageTemplate', Thrift.Type.I32, 9);
    output.writeI32(this.messageTemplate);
    output.writeFieldEnd();
  }
  if (this.packageId !== null && this.packageId !== undefined) {
    output.writeFieldBegin('packageId', Thrift.Type.I64, 10);
    output.writeI64(this.packageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PaymentReservationResult = function(args) {
  this.orderId = null;
  this.confirmUrl = null;
  this.extras = null;
  if (args) {
    if (args.orderId !== undefined && args.orderId !== null) {
      this.orderId = args.orderId;
    }
    if (args.confirmUrl !== undefined && args.confirmUrl !== null) {
      this.confirmUrl = args.confirmUrl;
    }
    if (args.extras !== undefined && args.extras !== null) {
      this.extras = Thrift.copyMap(args.extras, [null]);
    }
  }
};
PaymentReservationResult.prototype = {};
PaymentReservationResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.confirmUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.extras = {};
        var _rtmp3242 = input.readMapBegin();
        var _size241 = _rtmp3242.size || 0;
        for (var _i243 = 0; _i243 < _size241; ++_i243) {
          if (_i243 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key244 = null;
          var val245 = null;
          key244 = input.readString().value;
          val245 = input.readString().value;
          this.extras[key244] = val245;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentReservationResult.prototype.write = function(output) {
  output.writeStructBegin('PaymentReservationResult');
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 1);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.confirmUrl !== null && this.confirmUrl !== undefined) {
    output.writeFieldBegin('confirmUrl', Thrift.Type.STRING, 2);
    output.writeString(this.confirmUrl);
    output.writeFieldEnd();
  }
  if (this.extras !== null && this.extras !== undefined) {
    output.writeFieldBegin('extras', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extras));
    for (var kiter246 in this.extras) {
      if (this.extras.hasOwnProperty(kiter246)) {
        var viter247 = this.extras[kiter246];
        output.writeString(kiter246);
        output.writeString(viter247);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Product = function(args) {
  this.productId = null;
  this.packageId = null;
  this.version = null;
  this.authorName = null;
  this.onSale = null;
  this.validDays = null;
  this.saleType = null;
  this.copyright = null;
  this.title = null;
  this.descriptionText = null;
  this.shopOrderId = null;
  this.fromMid = null;
  this.toMid = null;
  this.validUntil = null;
  this.priceTier = null;
  this.price = null;
  this.currency = null;
  this.currencySymbol = null;
  this.paymentType = null;
  this.createDate = null;
  this.ownFlag = null;
  this.eventType = null;
  this.urlSchema = null;
  this.downloadUrl = null;
  this.buddyMid = null;
  this.publishSince = null;
  this.newFlag = null;
  this.missionFlag = null;
  this.categories = null;
  this.missionButtonText = null;
  this.missionShortDescription = null;
  this.authorId = null;
  this.grantedByDefault = null;
  this.displayOrder = null;
  this.availableForPresent = null;
  this.availableForMyself = null;
  this.hasAnimation = null;
  this.hasSound = null;
  this.recommendationsEnabled = null;
  this.stickerResourceType = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.packageId !== undefined && args.packageId !== null) {
      this.packageId = args.packageId;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.authorName !== undefined && args.authorName !== null) {
      this.authorName = args.authorName;
    }
    if (args.onSale !== undefined && args.onSale !== null) {
      this.onSale = args.onSale;
    }
    if (args.validDays !== undefined && args.validDays !== null) {
      this.validDays = args.validDays;
    }
    if (args.saleType !== undefined && args.saleType !== null) {
      this.saleType = args.saleType;
    }
    if (args.copyright !== undefined && args.copyright !== null) {
      this.copyright = args.copyright;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.descriptionText !== undefined && args.descriptionText !== null) {
      this.descriptionText = args.descriptionText;
    }
    if (args.shopOrderId !== undefined && args.shopOrderId !== null) {
      this.shopOrderId = args.shopOrderId;
    }
    if (args.fromMid !== undefined && args.fromMid !== null) {
      this.fromMid = args.fromMid;
    }
    if (args.toMid !== undefined && args.toMid !== null) {
      this.toMid = args.toMid;
    }
    if (args.validUntil !== undefined && args.validUntil !== null) {
      this.validUntil = args.validUntil;
    }
    if (args.priceTier !== undefined && args.priceTier !== null) {
      this.priceTier = args.priceTier;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.currencySymbol !== undefined && args.currencySymbol !== null) {
      this.currencySymbol = args.currencySymbol;
    }
    if (args.paymentType !== undefined && args.paymentType !== null) {
      this.paymentType = args.paymentType;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.ownFlag !== undefined && args.ownFlag !== null) {
      this.ownFlag = args.ownFlag;
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.urlSchema !== undefined && args.urlSchema !== null) {
      this.urlSchema = args.urlSchema;
    }
    if (args.downloadUrl !== undefined && args.downloadUrl !== null) {
      this.downloadUrl = args.downloadUrl;
    }
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
    if (args.publishSince !== undefined && args.publishSince !== null) {
      this.publishSince = args.publishSince;
    }
    if (args.newFlag !== undefined && args.newFlag !== null) {
      this.newFlag = args.newFlag;
    }
    if (args.missionFlag !== undefined && args.missionFlag !== null) {
      this.missionFlag = args.missionFlag;
    }
    if (args.categories !== undefined && args.categories !== null) {
      this.categories = Thrift.copyList(args.categories, [ProductCategory]);
    }
    if (args.missionButtonText !== undefined && args.missionButtonText !== null) {
      this.missionButtonText = args.missionButtonText;
    }
    if (args.missionShortDescription !== undefined && args.missionShortDescription !== null) {
      this.missionShortDescription = args.missionShortDescription;
    }
    if (args.authorId !== undefined && args.authorId !== null) {
      this.authorId = args.authorId;
    }
    if (args.grantedByDefault !== undefined && args.grantedByDefault !== null) {
      this.grantedByDefault = args.grantedByDefault;
    }
    if (args.displayOrder !== undefined && args.displayOrder !== null) {
      this.displayOrder = args.displayOrder;
    }
    if (args.availableForPresent !== undefined && args.availableForPresent !== null) {
      this.availableForPresent = args.availableForPresent;
    }
    if (args.availableForMyself !== undefined && args.availableForMyself !== null) {
      this.availableForMyself = args.availableForMyself;
    }
    if (args.hasAnimation !== undefined && args.hasAnimation !== null) {
      this.hasAnimation = args.hasAnimation;
    }
    if (args.hasSound !== undefined && args.hasSound !== null) {
      this.hasSound = args.hasSound;
    }
    if (args.recommendationsEnabled !== undefined && args.recommendationsEnabled !== null) {
      this.recommendationsEnabled = args.recommendationsEnabled;
    }
    if (args.stickerResourceType !== undefined && args.stickerResourceType !== null) {
      this.stickerResourceType = args.stickerResourceType;
    }
  }
};
Product.prototype = {};
Product.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.packageId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.authorName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.onSale = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.validDays = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.saleType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.copyright = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.descriptionText = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.shopOrderId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.fromMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.toMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.validUntil = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.priceTier = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.currency = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.currencySymbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.paymentType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.ownFlag = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.urlSchema = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.downloadUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.I64) {
        this.publishSince = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.BOOL) {
        this.newFlag = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.BOOL) {
        this.missionFlag = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.LIST) {
        this.categories = [];
        var _rtmp3249 = input.readListBegin();
        var _size248 = _rtmp3249.size || 0;
        for (var _i250 = 0; _i250 < _size248; ++_i250) {
          var elem251 = null;
          elem251 = new ProductCategory();
          elem251.read(input);
          this.categories.push(elem251);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.missionButtonText = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRING) {
        this.missionShortDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRING) {
        this.authorId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.BOOL) {
        this.grantedByDefault = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.I32) {
        this.displayOrder = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.BOOL) {
        this.availableForPresent = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.BOOL) {
        this.availableForMyself = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 51:
      if (ftype == Thrift.Type.BOOL) {
        this.hasAnimation = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 52:
      if (ftype == Thrift.Type.BOOL) {
        this.hasSound = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 53:
      if (ftype == Thrift.Type.BOOL) {
        this.recommendationsEnabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 54:
      if (ftype == Thrift.Type.I32) {
        this.stickerResourceType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Product.prototype.write = function(output) {
  output.writeStructBegin('Product');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.packageId !== null && this.packageId !== undefined) {
    output.writeFieldBegin('packageId', Thrift.Type.I64, 2);
    output.writeI64(this.packageId);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 3);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.authorName !== null && this.authorName !== undefined) {
    output.writeFieldBegin('authorName', Thrift.Type.STRING, 4);
    output.writeString(this.authorName);
    output.writeFieldEnd();
  }
  if (this.onSale !== null && this.onSale !== undefined) {
    output.writeFieldBegin('onSale', Thrift.Type.BOOL, 5);
    output.writeBool(this.onSale);
    output.writeFieldEnd();
  }
  if (this.validDays !== null && this.validDays !== undefined) {
    output.writeFieldBegin('validDays', Thrift.Type.I32, 6);
    output.writeI32(this.validDays);
    output.writeFieldEnd();
  }
  if (this.saleType !== null && this.saleType !== undefined) {
    output.writeFieldBegin('saleType', Thrift.Type.I32, 7);
    output.writeI32(this.saleType);
    output.writeFieldEnd();
  }
  if (this.copyright !== null && this.copyright !== undefined) {
    output.writeFieldBegin('copyright', Thrift.Type.STRING, 8);
    output.writeString(this.copyright);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 9);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.descriptionText !== null && this.descriptionText !== undefined) {
    output.writeFieldBegin('descriptionText', Thrift.Type.STRING, 10);
    output.writeString(this.descriptionText);
    output.writeFieldEnd();
  }
  if (this.shopOrderId !== null && this.shopOrderId !== undefined) {
    output.writeFieldBegin('shopOrderId', Thrift.Type.I64, 11);
    output.writeI64(this.shopOrderId);
    output.writeFieldEnd();
  }
  if (this.fromMid !== null && this.fromMid !== undefined) {
    output.writeFieldBegin('fromMid', Thrift.Type.STRING, 12);
    output.writeString(this.fromMid);
    output.writeFieldEnd();
  }
  if (this.toMid !== null && this.toMid !== undefined) {
    output.writeFieldBegin('toMid', Thrift.Type.STRING, 13);
    output.writeString(this.toMid);
    output.writeFieldEnd();
  }
  if (this.validUntil !== null && this.validUntil !== undefined) {
    output.writeFieldBegin('validUntil', Thrift.Type.I64, 14);
    output.writeI64(this.validUntil);
    output.writeFieldEnd();
  }
  if (this.priceTier !== null && this.priceTier !== undefined) {
    output.writeFieldBegin('priceTier', Thrift.Type.I32, 15);
    output.writeI32(this.priceTier);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 16);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRING, 17);
    output.writeString(this.currency);
    output.writeFieldEnd();
  }
  if (this.currencySymbol !== null && this.currencySymbol !== undefined) {
    output.writeFieldBegin('currencySymbol', Thrift.Type.STRING, 18);
    output.writeString(this.currencySymbol);
    output.writeFieldEnd();
  }
  if (this.paymentType !== null && this.paymentType !== undefined) {
    output.writeFieldBegin('paymentType', Thrift.Type.I32, 19);
    output.writeI32(this.paymentType);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 20);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.ownFlag !== null && this.ownFlag !== undefined) {
    output.writeFieldBegin('ownFlag', Thrift.Type.BOOL, 21);
    output.writeBool(this.ownFlag);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 22);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.urlSchema !== null && this.urlSchema !== undefined) {
    output.writeFieldBegin('urlSchema', Thrift.Type.STRING, 23);
    output.writeString(this.urlSchema);
    output.writeFieldEnd();
  }
  if (this.downloadUrl !== null && this.downloadUrl !== undefined) {
    output.writeFieldBegin('downloadUrl', Thrift.Type.STRING, 24);
    output.writeString(this.downloadUrl);
    output.writeFieldEnd();
  }
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 25);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  if (this.publishSince !== null && this.publishSince !== undefined) {
    output.writeFieldBegin('publishSince', Thrift.Type.I64, 26);
    output.writeI64(this.publishSince);
    output.writeFieldEnd();
  }
  if (this.newFlag !== null && this.newFlag !== undefined) {
    output.writeFieldBegin('newFlag', Thrift.Type.BOOL, 27);
    output.writeBool(this.newFlag);
    output.writeFieldEnd();
  }
  if (this.missionFlag !== null && this.missionFlag !== undefined) {
    output.writeFieldBegin('missionFlag', Thrift.Type.BOOL, 28);
    output.writeBool(this.missionFlag);
    output.writeFieldEnd();
  }
  if (this.categories !== null && this.categories !== undefined) {
    output.writeFieldBegin('categories', Thrift.Type.LIST, 29);
    output.writeListBegin(Thrift.Type.STRUCT, this.categories.length);
    for (var iter252 in this.categories) {
      if (this.categories.hasOwnProperty(iter252)) {
        iter252 = this.categories[iter252];
        iter252.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.missionButtonText !== null && this.missionButtonText !== undefined) {
    output.writeFieldBegin('missionButtonText', Thrift.Type.STRING, 30);
    output.writeString(this.missionButtonText);
    output.writeFieldEnd();
  }
  if (this.missionShortDescription !== null && this.missionShortDescription !== undefined) {
    output.writeFieldBegin('missionShortDescription', Thrift.Type.STRING, 31);
    output.writeString(this.missionShortDescription);
    output.writeFieldEnd();
  }
  if (this.authorId !== null && this.authorId !== undefined) {
    output.writeFieldBegin('authorId', Thrift.Type.STRING, 32);
    output.writeString(this.authorId);
    output.writeFieldEnd();
  }
  if (this.grantedByDefault !== null && this.grantedByDefault !== undefined) {
    output.writeFieldBegin('grantedByDefault', Thrift.Type.BOOL, 41);
    output.writeBool(this.grantedByDefault);
    output.writeFieldEnd();
  }
  if (this.displayOrder !== null && this.displayOrder !== undefined) {
    output.writeFieldBegin('displayOrder', Thrift.Type.I32, 42);
    output.writeI32(this.displayOrder);
    output.writeFieldEnd();
  }
  if (this.availableForPresent !== null && this.availableForPresent !== undefined) {
    output.writeFieldBegin('availableForPresent', Thrift.Type.BOOL, 43);
    output.writeBool(this.availableForPresent);
    output.writeFieldEnd();
  }
  if (this.availableForMyself !== null && this.availableForMyself !== undefined) {
    output.writeFieldBegin('availableForMyself', Thrift.Type.BOOL, 44);
    output.writeBool(this.availableForMyself);
    output.writeFieldEnd();
  }
  if (this.hasAnimation !== null && this.hasAnimation !== undefined) {
    output.writeFieldBegin('hasAnimation', Thrift.Type.BOOL, 51);
    output.writeBool(this.hasAnimation);
    output.writeFieldEnd();
  }
  if (this.hasSound !== null && this.hasSound !== undefined) {
    output.writeFieldBegin('hasSound', Thrift.Type.BOOL, 52);
    output.writeBool(this.hasSound);
    output.writeFieldEnd();
  }
  if (this.recommendationsEnabled !== null && this.recommendationsEnabled !== undefined) {
    output.writeFieldBegin('recommendationsEnabled', Thrift.Type.BOOL, 53);
    output.writeBool(this.recommendationsEnabled);
    output.writeFieldEnd();
  }
  if (this.stickerResourceType !== null && this.stickerResourceType !== undefined) {
    output.writeFieldBegin('stickerResourceType', Thrift.Type.I32, 54);
    output.writeI32(this.stickerResourceType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductList = function(args) {
  this.hasNext = null;
  this.bannerSequence = null;
  this.bannerTargetType = null;
  this.bannerTargetPath = null;
  this.productList = null;
  this.bannerLang = null;
  if (args) {
    if (args.hasNext !== undefined && args.hasNext !== null) {
      this.hasNext = args.hasNext;
    }
    if (args.bannerSequence !== undefined && args.bannerSequence !== null) {
      this.bannerSequence = args.bannerSequence;
    }
    if (args.bannerTargetType !== undefined && args.bannerTargetType !== null) {
      this.bannerTargetType = args.bannerTargetType;
    }
    if (args.bannerTargetPath !== undefined && args.bannerTargetPath !== null) {
      this.bannerTargetPath = args.bannerTargetPath;
    }
    if (args.productList !== undefined && args.productList !== null) {
      this.productList = Thrift.copyList(args.productList, [Product]);
    }
    if (args.bannerLang !== undefined && args.bannerLang !== null) {
      this.bannerLang = args.bannerLang;
    }
  }
};
ProductList.prototype = {};
ProductList.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.hasNext = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.bannerSequence = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.bannerTargetType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.bannerTargetPath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.productList = [];
        var _rtmp3254 = input.readListBegin();
        var _size253 = _rtmp3254.size || 0;
        for (var _i255 = 0; _i255 < _size253; ++_i255) {
          var elem256 = null;
          elem256 = new Product();
          elem256.read(input);
          this.productList.push(elem256);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.bannerLang = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductList.prototype.write = function(output) {
  output.writeStructBegin('ProductList');
  if (this.hasNext !== null && this.hasNext !== undefined) {
    output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 1);
    output.writeBool(this.hasNext);
    output.writeFieldEnd();
  }
  if (this.bannerSequence !== null && this.bannerSequence !== undefined) {
    output.writeFieldBegin('bannerSequence', Thrift.Type.I64, 4);
    output.writeI64(this.bannerSequence);
    output.writeFieldEnd();
  }
  if (this.bannerTargetType !== null && this.bannerTargetType !== undefined) {
    output.writeFieldBegin('bannerTargetType', Thrift.Type.I32, 5);
    output.writeI32(this.bannerTargetType);
    output.writeFieldEnd();
  }
  if (this.bannerTargetPath !== null && this.bannerTargetPath !== undefined) {
    output.writeFieldBegin('bannerTargetPath', Thrift.Type.STRING, 6);
    output.writeString(this.bannerTargetPath);
    output.writeFieldEnd();
  }
  if (this.productList !== null && this.productList !== undefined) {
    output.writeFieldBegin('productList', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.productList.length);
    for (var iter257 in this.productList) {
      if (this.productList.hasOwnProperty(iter257)) {
        iter257 = this.productList[iter257];
        iter257.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.bannerLang !== null && this.bannerLang !== undefined) {
    output.writeFieldBegin('bannerLang', Thrift.Type.STRING, 8);
    output.writeString(this.bannerLang);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StickerIdRange = function(args) {
  this.start = null;
  this.size = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
  }
};
StickerIdRange.prototype = {};
StickerIdRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StickerIdRange.prototype.write = function(output) {
  output.writeStructBegin('StickerIdRange');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 1);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 2);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSimple = function(args) {
  this.productId = null;
  this.packageId = null;
  this.version = null;
  this.onSale = null;
  this.validUntil = null;
  this.stickerIdRanges = null;
  this.grantedByDefault = null;
  this.displayOrder = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.packageId !== undefined && args.packageId !== null) {
      this.packageId = args.packageId;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.onSale !== undefined && args.onSale !== null) {
      this.onSale = args.onSale;
    }
    if (args.validUntil !== undefined && args.validUntil !== null) {
      this.validUntil = args.validUntil;
    }
    if (args.stickerIdRanges !== undefined && args.stickerIdRanges !== null) {
      this.stickerIdRanges = Thrift.copyList(args.stickerIdRanges, [StickerIdRange]);
    }
    if (args.grantedByDefault !== undefined && args.grantedByDefault !== null) {
      this.grantedByDefault = args.grantedByDefault;
    }
    if (args.displayOrder !== undefined && args.displayOrder !== null) {
      this.displayOrder = args.displayOrder;
    }
  }
};
ProductSimple.prototype = {};
ProductSimple.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.packageId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.onSale = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.validUntil = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        this.stickerIdRanges = [];
        var _rtmp3259 = input.readListBegin();
        var _size258 = _rtmp3259.size || 0;
        for (var _i260 = 0; _i260 < _size258; ++_i260) {
          var elem261 = null;
          elem261 = new StickerIdRange();
          elem261.read(input);
          this.stickerIdRanges.push(elem261);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.BOOL) {
        this.grantedByDefault = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.I32) {
        this.displayOrder = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSimple.prototype.write = function(output) {
  output.writeStructBegin('ProductSimple');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.packageId !== null && this.packageId !== undefined) {
    output.writeFieldBegin('packageId', Thrift.Type.I64, 2);
    output.writeI64(this.packageId);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 3);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.onSale !== null && this.onSale !== undefined) {
    output.writeFieldBegin('onSale', Thrift.Type.BOOL, 4);
    output.writeBool(this.onSale);
    output.writeFieldEnd();
  }
  if (this.validUntil !== null && this.validUntil !== undefined) {
    output.writeFieldBegin('validUntil', Thrift.Type.I64, 5);
    output.writeI64(this.validUntil);
    output.writeFieldEnd();
  }
  if (this.stickerIdRanges !== null && this.stickerIdRanges !== undefined) {
    output.writeFieldBegin('stickerIdRanges', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.stickerIdRanges.length);
    for (var iter262 in this.stickerIdRanges) {
      if (this.stickerIdRanges.hasOwnProperty(iter262)) {
        iter262 = this.stickerIdRanges[iter262];
        iter262.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.grantedByDefault !== null && this.grantedByDefault !== undefined) {
    output.writeFieldBegin('grantedByDefault', Thrift.Type.BOOL, 41);
    output.writeBool(this.grantedByDefault);
    output.writeFieldEnd();
  }
  if (this.displayOrder !== null && this.displayOrder !== undefined) {
    output.writeFieldBegin('displayOrder', Thrift.Type.I32, 42);
    output.writeI32(this.displayOrder);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSimpleList = function(args) {
  this.hasNext = null;
  this.reinvokeHour = null;
  this.lastVersionSeq = null;
  this.productList = null;
  this.recentNewReleaseDate = null;
  this.recentEventReleaseDate = null;
  if (args) {
    if (args.hasNext !== undefined && args.hasNext !== null) {
      this.hasNext = args.hasNext;
    }
    if (args.reinvokeHour !== undefined && args.reinvokeHour !== null) {
      this.reinvokeHour = args.reinvokeHour;
    }
    if (args.lastVersionSeq !== undefined && args.lastVersionSeq !== null) {
      this.lastVersionSeq = args.lastVersionSeq;
    }
    if (args.productList !== undefined && args.productList !== null) {
      this.productList = Thrift.copyList(args.productList, [ProductSimple]);
    }
    if (args.recentNewReleaseDate !== undefined && args.recentNewReleaseDate !== null) {
      this.recentNewReleaseDate = args.recentNewReleaseDate;
    }
    if (args.recentEventReleaseDate !== undefined && args.recentEventReleaseDate !== null) {
      this.recentEventReleaseDate = args.recentEventReleaseDate;
    }
  }
};
ProductSimpleList.prototype = {};
ProductSimpleList.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.hasNext = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.reinvokeHour = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.lastVersionSeq = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.productList = [];
        var _rtmp3264 = input.readListBegin();
        var _size263 = _rtmp3264.size || 0;
        for (var _i265 = 0; _i265 < _size263; ++_i265) {
          var elem266 = null;
          elem266 = new ProductSimple();
          elem266.read(input);
          this.productList.push(elem266);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.recentNewReleaseDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.recentEventReleaseDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSimpleList.prototype.write = function(output) {
  output.writeStructBegin('ProductSimpleList');
  if (this.hasNext !== null && this.hasNext !== undefined) {
    output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 1);
    output.writeBool(this.hasNext);
    output.writeFieldEnd();
  }
  if (this.reinvokeHour !== null && this.reinvokeHour !== undefined) {
    output.writeFieldBegin('reinvokeHour', Thrift.Type.I32, 2);
    output.writeI32(this.reinvokeHour);
    output.writeFieldEnd();
  }
  if (this.lastVersionSeq !== null && this.lastVersionSeq !== undefined) {
    output.writeFieldBegin('lastVersionSeq', Thrift.Type.I64, 3);
    output.writeI64(this.lastVersionSeq);
    output.writeFieldEnd();
  }
  if (this.productList !== null && this.productList !== undefined) {
    output.writeFieldBegin('productList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.productList.length);
    for (var iter267 in this.productList) {
      if (this.productList.hasOwnProperty(iter267)) {
        iter267 = this.productList[iter267];
        iter267.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.recentNewReleaseDate !== null && this.recentNewReleaseDate !== undefined) {
    output.writeFieldBegin('recentNewReleaseDate', Thrift.Type.I64, 5);
    output.writeI64(this.recentNewReleaseDate);
    output.writeFieldEnd();
  }
  if (this.recentEventReleaseDate !== null && this.recentEventReleaseDate !== undefined) {
    output.writeFieldBegin('recentEventReleaseDate', Thrift.Type.I64, 6);
    output.writeI64(this.recentEventReleaseDate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Profile = function(args) {
  this.mid = null;
  this.userid = null;
  this.phone = null;
  this.email = null;
  this.regionCode = null;
  this.displayName = null;
  this.phoneticName = null;
  this.pictureStatus = null;
  this.thumbnailUrl = null;
  this.statusMessage = null;
  this.allowSearchByUserid = null;
  this.allowSearchByEmail = null;
  this.picturePath = null;
  this.musicProfile = null;
  this.videoProfile = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.regionCode !== undefined && args.regionCode !== null) {
      this.regionCode = args.regionCode;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.phoneticName !== undefined && args.phoneticName !== null) {
      this.phoneticName = args.phoneticName;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
      this.thumbnailUrl = args.thumbnailUrl;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.allowSearchByUserid !== undefined && args.allowSearchByUserid !== null) {
      this.allowSearchByUserid = args.allowSearchByUserid;
    }
    if (args.allowSearchByEmail !== undefined && args.allowSearchByEmail !== null) {
      this.allowSearchByEmail = args.allowSearchByEmail;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.musicProfile !== undefined && args.musicProfile !== null) {
      this.musicProfile = args.musicProfile;
    }
    if (args.videoProfile !== undefined && args.videoProfile !== null) {
      this.videoProfile = args.videoProfile;
    }
  }
};
Profile.prototype = {};
Profile.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.regionCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.phoneticName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnailUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.allowSearchByUserid = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.BOOL) {
        this.allowSearchByEmail = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRING) {
        this.musicProfile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRING) {
        this.videoProfile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Profile.prototype.write = function(output) {
  output.writeStructBegin('Profile');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 3);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 10);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 11);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.regionCode !== null && this.regionCode !== undefined) {
    output.writeFieldBegin('regionCode', Thrift.Type.STRING, 12);
    output.writeString(this.regionCode);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 20);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.phoneticName !== null && this.phoneticName !== undefined) {
    output.writeFieldBegin('phoneticName', Thrift.Type.STRING, 21);
    output.writeString(this.phoneticName);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 22);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
    output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 23);
    output.writeString(this.thumbnailUrl);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 24);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.allowSearchByUserid !== null && this.allowSearchByUserid !== undefined) {
    output.writeFieldBegin('allowSearchByUserid', Thrift.Type.BOOL, 31);
    output.writeBool(this.allowSearchByUserid);
    output.writeFieldEnd();
  }
  if (this.allowSearchByEmail !== null && this.allowSearchByEmail !== undefined) {
    output.writeFieldBegin('allowSearchByEmail', Thrift.Type.BOOL, 32);
    output.writeBool(this.allowSearchByEmail);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 33);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.musicProfile !== null && this.musicProfile !== undefined) {
    output.writeFieldBegin('musicProfile', Thrift.Type.STRING, 34);
    output.writeString(this.musicProfile);
    output.writeFieldEnd();
  }
  if (this.videoProfile !== null && this.videoProfile !== undefined) {
    output.writeFieldBegin('videoProfile', Thrift.Type.STRING, 35);
    output.writeString(this.videoProfile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProximityMatchCandidateResult = function(args) {
  this.users = null;
  this.buddies = null;
  if (args) {
    if (args.users !== undefined && args.users !== null) {
      this.users = Thrift.copyList(args.users, [Contact]);
    }
    if (args.buddies !== undefined && args.buddies !== null) {
      this.buddies = Thrift.copyList(args.buddies, [Contact]);
    }
  }
};
ProximityMatchCandidateResult.prototype = {};
ProximityMatchCandidateResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.users = [];
        var _rtmp3269 = input.readListBegin();
        var _size268 = _rtmp3269.size || 0;
        for (var _i270 = 0; _i270 < _size268; ++_i270) {
          var elem271 = null;
          elem271 = new Contact();
          elem271.read(input);
          this.users.push(elem271);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.buddies = [];
        var _rtmp3273 = input.readListBegin();
        var _size272 = _rtmp3273.size || 0;
        for (var _i274 = 0; _i274 < _size272; ++_i274) {
          var elem275 = null;
          elem275 = new Contact();
          elem275.read(input);
          this.buddies.push(elem275);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProximityMatchCandidateResult.prototype.write = function(output) {
  output.writeStructBegin('ProximityMatchCandidateResult');
  if (this.users !== null && this.users !== undefined) {
    output.writeFieldBegin('users', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.users.length);
    for (var iter276 in this.users) {
      if (this.users.hasOwnProperty(iter276)) {
        iter276 = this.users[iter276];
        iter276.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.buddies !== null && this.buddies !== undefined) {
    output.writeFieldBegin('buddies', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.buddies.length);
    for (var iter277 in this.buddies) {
      if (this.buddies.hasOwnProperty(iter277)) {
        iter277 = this.buddies[iter277];
        iter277.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RegisterWithSnsIdResult = function(args) {
  this.authToken = null;
  this.userCreated = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.userCreated !== undefined && args.userCreated !== null) {
      this.userCreated = args.userCreated;
    }
  }
};
RegisterWithSnsIdResult.prototype = {};
RegisterWithSnsIdResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.userCreated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisterWithSnsIdResult.prototype.write = function(output) {
  output.writeStructBegin('RegisterWithSnsIdResult');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.userCreated !== null && this.userCreated !== undefined) {
    output.writeFieldBegin('userCreated', Thrift.Type.BOOL, 2);
    output.writeBool(this.userCreated);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RequestTokenResponse = function(args) {
  this.requestToken = null;
  this.returnUrl = null;
  if (args) {
    if (args.requestToken !== undefined && args.requestToken !== null) {
      this.requestToken = args.requestToken;
    }
    if (args.returnUrl !== undefined && args.returnUrl !== null) {
      this.returnUrl = args.returnUrl;
    }
  }
};
RequestTokenResponse.prototype = {};
RequestTokenResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.returnUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestTokenResponse.prototype.write = function(output) {
  output.writeStructBegin('RequestTokenResponse');
  if (this.requestToken !== null && this.requestToken !== undefined) {
    output.writeFieldBegin('requestToken', Thrift.Type.STRING, 1);
    output.writeString(this.requestToken);
    output.writeFieldEnd();
  }
  if (this.returnUrl !== null && this.returnUrl !== undefined) {
    output.writeFieldBegin('returnUrl', Thrift.Type.STRING, 2);
    output.writeString(this.returnUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Room = function(args) {
  this.mid = null;
  this.createdTime = null;
  this.contacts = null;
  this.notificationDisabled = null;
  this.memberMids = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.contacts !== undefined && args.contacts !== null) {
      this.contacts = Thrift.copyList(args.contacts, [Contact]);
    }
    if (args.notificationDisabled !== undefined && args.notificationDisabled !== null) {
      this.notificationDisabled = args.notificationDisabled;
    }
    if (args.memberMids !== undefined && args.memberMids !== null) {
      this.memberMids = Thrift.copyList(args.memberMids, [null]);
    }
  }
};
Room.prototype = {};
Room.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        this.contacts = [];
        var _rtmp3279 = input.readListBegin();
        var _size278 = _rtmp3279.size || 0;
        for (var _i280 = 0; _i280 < _size278; ++_i280) {
          var elem281 = null;
          elem281 = new Contact();
          elem281.read(input);
          this.contacts.push(elem281);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationDisabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.LIST) {
        this.memberMids = [];
        var _rtmp3283 = input.readListBegin();
        var _size282 = _rtmp3283.size || 0;
        for (var _i284 = 0; _i284 < _size282; ++_i284) {
          var elem285 = null;
          elem285 = input.readString().value;
          this.memberMids.push(elem285);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Room.prototype.write = function(output) {
  output.writeStructBegin('Room');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.contacts !== null && this.contacts !== undefined) {
    output.writeFieldBegin('contacts', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.contacts.length);
    for (var iter286 in this.contacts) {
      if (this.contacts.hasOwnProperty(iter286)) {
        iter286 = this.contacts[iter286];
        iter286.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notificationDisabled !== null && this.notificationDisabled !== undefined) {
    output.writeFieldBegin('notificationDisabled', Thrift.Type.BOOL, 31);
    output.writeBool(this.notificationDisabled);
    output.writeFieldEnd();
  }
  if (this.memberMids !== null && this.memberMids !== undefined) {
    output.writeFieldBegin('memberMids', Thrift.Type.LIST, 40);
    output.writeListBegin(Thrift.Type.STRING, this.memberMids.length);
    for (var iter287 in this.memberMids) {
      if (this.memberMids.hasOwnProperty(iter287)) {
        iter287 = this.memberMids[iter287];
        output.writeString(iter287);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SuggestDictionary = function(args) {
  this.language = null;
  this.name = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
SuggestDictionary.prototype = {};
SuggestDictionary.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestDictionary.prototype.write = function(output) {
  output.writeStructBegin('SuggestDictionary');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 1);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SuggestItemDictionaryIncrement = function(args) {
  this.status = null;
  this.revision = null;
  this.scheme = null;
  this.data = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.scheme !== undefined && args.scheme !== null) {
      this.scheme = args.scheme;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
SuggestItemDictionaryIncrement.prototype = {};
SuggestItemDictionaryIncrement.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.scheme = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestItemDictionaryIncrement.prototype.write = function(output) {
  output.writeStructBegin('SuggestItemDictionaryIncrement');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 2);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.scheme !== null && this.scheme !== undefined) {
    output.writeFieldBegin('scheme', Thrift.Type.STRING, 3);
    output.writeString(this.scheme);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 4);
    output.writeBinary(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SuggestTagDictionaryIncrement = function(args) {
  this.status = null;
  this.language = null;
  this.revision = null;
  this.scheme = null;
  this.data = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.scheme !== undefined && args.scheme !== null) {
      this.scheme = args.scheme;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
SuggestTagDictionaryIncrement.prototype = {};
SuggestTagDictionaryIncrement.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.scheme = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestTagDictionaryIncrement.prototype.write = function(output) {
  output.writeStructBegin('SuggestTagDictionaryIncrement');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 3);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.scheme !== null && this.scheme !== undefined) {
    output.writeFieldBegin('scheme', Thrift.Type.STRING, 4);
    output.writeString(this.scheme);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 5);
    output.writeBinary(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SuggestDictionaryIncrements = function(args) {
  this.itemIncrement = null;
  this.tagIncrements = null;
  if (args) {
    if (args.itemIncrement !== undefined && args.itemIncrement !== null) {
      this.itemIncrement = new SuggestItemDictionaryIncrement(args.itemIncrement);
    }
    if (args.tagIncrements !== undefined && args.tagIncrements !== null) {
      this.tagIncrements = Thrift.copyList(args.tagIncrements, [SuggestTagDictionaryIncrement]);
    }
  }
};
SuggestDictionaryIncrements.prototype = {};
SuggestDictionaryIncrements.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.itemIncrement = new SuggestItemDictionaryIncrement();
        this.itemIncrement.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.tagIncrements = [];
        var _rtmp3289 = input.readListBegin();
        var _size288 = _rtmp3289.size || 0;
        for (var _i290 = 0; _i290 < _size288; ++_i290) {
          var elem291 = null;
          elem291 = new SuggestTagDictionaryIncrement();
          elem291.read(input);
          this.tagIncrements.push(elem291);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestDictionaryIncrements.prototype.write = function(output) {
  output.writeStructBegin('SuggestDictionaryIncrements');
  if (this.itemIncrement !== null && this.itemIncrement !== undefined) {
    output.writeFieldBegin('itemIncrement', Thrift.Type.STRUCT, 1);
    this.itemIncrement.write(output);
    output.writeFieldEnd();
  }
  if (this.tagIncrements !== null && this.tagIncrements !== undefined) {
    output.writeFieldBegin('tagIncrements', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tagIncrements.length);
    for (var iter292 in this.tagIncrements) {
      if (this.tagIncrements.hasOwnProperty(iter292)) {
        iter292 = this.tagIncrements[iter292];
        iter292.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SuggestItemDictionaryRevision = function(args) {
  this.revision = null;
  this.scheme = null;
  if (args) {
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.scheme !== undefined && args.scheme !== null) {
      this.scheme = args.scheme;
    }
  }
};
SuggestItemDictionaryRevision.prototype = {};
SuggestItemDictionaryRevision.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.scheme = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestItemDictionaryRevision.prototype.write = function(output) {
  output.writeStructBegin('SuggestItemDictionaryRevision');
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 1);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.scheme !== null && this.scheme !== undefined) {
    output.writeFieldBegin('scheme', Thrift.Type.STRING, 2);
    output.writeString(this.scheme);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SuggestTagDictionaryRevision = function(args) {
  this.language = null;
  this.revision = null;
  this.scheme = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.scheme !== undefined && args.scheme !== null) {
      this.scheme = args.scheme;
    }
  }
};
SuggestTagDictionaryRevision.prototype = {};
SuggestTagDictionaryRevision.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.scheme = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestTagDictionaryRevision.prototype.write = function(output) {
  output.writeStructBegin('SuggestTagDictionaryRevision');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 1);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 2);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.scheme !== null && this.scheme !== undefined) {
    output.writeFieldBegin('scheme', Thrift.Type.STRING, 3);
    output.writeString(this.scheme);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SuggestDictionaryRevisions = function(args) {
  this.itemRevision = null;
  this.tagRevisions = null;
  if (args) {
    if (args.itemRevision !== undefined && args.itemRevision !== null) {
      this.itemRevision = new SuggestItemDictionaryRevision(args.itemRevision);
    }
    if (args.tagRevisions !== undefined && args.tagRevisions !== null) {
      this.tagRevisions = Thrift.copyList(args.tagRevisions, [SuggestTagDictionaryRevision]);
    }
  }
};
SuggestDictionaryRevisions.prototype = {};
SuggestDictionaryRevisions.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.itemRevision = new SuggestItemDictionaryRevision();
        this.itemRevision.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.tagRevisions = [];
        var _rtmp3294 = input.readListBegin();
        var _size293 = _rtmp3294.size || 0;
        for (var _i295 = 0; _i295 < _size293; ++_i295) {
          var elem296 = null;
          elem296 = new SuggestTagDictionaryRevision();
          elem296.read(input);
          this.tagRevisions.push(elem296);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestDictionaryRevisions.prototype.write = function(output) {
  output.writeStructBegin('SuggestDictionaryRevisions');
  if (this.itemRevision !== null && this.itemRevision !== undefined) {
    output.writeFieldBegin('itemRevision', Thrift.Type.STRUCT, 1);
    this.itemRevision.write(output);
    output.writeFieldEnd();
  }
  if (this.tagRevisions !== null && this.tagRevisions !== undefined) {
    output.writeFieldBegin('tagRevisions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tagRevisions.length);
    for (var iter297 in this.tagRevisions) {
      if (this.tagRevisions.hasOwnProperty(iter297)) {
        iter297 = this.tagRevisions[iter297];
        iter297.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SuggestDictionarySettings = function(args) {
  this.revision = null;
  this.newRevision = null;
  this.dictionaries = null;
  this.preloadedDictionaries = null;
  if (args) {
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.newRevision !== undefined && args.newRevision !== null) {
      this.newRevision = args.newRevision;
    }
    if (args.dictionaries !== undefined && args.dictionaries !== null) {
      this.dictionaries = Thrift.copyList(args.dictionaries, [SuggestDictionary]);
    }
    if (args.preloadedDictionaries !== undefined && args.preloadedDictionaries !== null) {
      this.preloadedDictionaries = Thrift.copyList(args.preloadedDictionaries, [null]);
    }
  }
};
SuggestDictionarySettings.prototype = {};
SuggestDictionarySettings.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.newRevision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.dictionaries = [];
        var _rtmp3299 = input.readListBegin();
        var _size298 = _rtmp3299.size || 0;
        for (var _i300 = 0; _i300 < _size298; ++_i300) {
          var elem301 = null;
          elem301 = new SuggestDictionary();
          elem301.read(input);
          this.dictionaries.push(elem301);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.preloadedDictionaries = [];
        var _rtmp3303 = input.readListBegin();
        var _size302 = _rtmp3303.size || 0;
        for (var _i304 = 0; _i304 < _size302; ++_i304) {
          var elem305 = null;
          elem305 = input.readString().value;
          this.preloadedDictionaries.push(elem305);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestDictionarySettings.prototype.write = function(output) {
  output.writeStructBegin('SuggestDictionarySettings');
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 1);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.newRevision !== null && this.newRevision !== undefined) {
    output.writeFieldBegin('newRevision', Thrift.Type.I64, 2);
    output.writeI64(this.newRevision);
    output.writeFieldEnd();
  }
  if (this.dictionaries !== null && this.dictionaries !== undefined) {
    output.writeFieldBegin('dictionaries', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.dictionaries.length);
    for (var iter306 in this.dictionaries) {
      if (this.dictionaries.hasOwnProperty(iter306)) {
        iter306 = this.dictionaries[iter306];
        iter306.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.preloadedDictionaries !== null && this.preloadedDictionaries !== undefined) {
    output.writeFieldBegin('preloadedDictionaries', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.preloadedDictionaries.length);
    for (var iter307 in this.preloadedDictionaries) {
      if (this.preloadedDictionaries.hasOwnProperty(iter307)) {
        iter307 = this.preloadedDictionaries[iter307];
        output.writeString(iter307);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PhoneInfoForChannel = function(args) {
  this.mid = null;
  this.normalizedPhoneNumber = null;
  this.allowedToSearchByPhoneNumber = null;
  this.allowedToReceiveMessageFromNonFriend = null;
  this.region = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.normalizedPhoneNumber !== undefined && args.normalizedPhoneNumber !== null) {
      this.normalizedPhoneNumber = args.normalizedPhoneNumber;
    }
    if (args.allowedToSearchByPhoneNumber !== undefined && args.allowedToSearchByPhoneNumber !== null) {
      this.allowedToSearchByPhoneNumber = args.allowedToSearchByPhoneNumber;
    }
    if (args.allowedToReceiveMessageFromNonFriend !== undefined && args.allowedToReceiveMessageFromNonFriend !== null) {
      this.allowedToReceiveMessageFromNonFriend = args.allowedToReceiveMessageFromNonFriend;
    }
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
  }
};
PhoneInfoForChannel.prototype = {};
PhoneInfoForChannel.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.normalizedPhoneNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.allowedToSearchByPhoneNumber = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.allowedToReceiveMessageFromNonFriend = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhoneInfoForChannel.prototype.write = function(output) {
  output.writeStructBegin('PhoneInfoForChannel');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.normalizedPhoneNumber !== null && this.normalizedPhoneNumber !== undefined) {
    output.writeFieldBegin('normalizedPhoneNumber', Thrift.Type.STRING, 2);
    output.writeString(this.normalizedPhoneNumber);
    output.writeFieldEnd();
  }
  if (this.allowedToSearchByPhoneNumber !== null && this.allowedToSearchByPhoneNumber !== undefined) {
    output.writeFieldBegin('allowedToSearchByPhoneNumber', Thrift.Type.BOOL, 3);
    output.writeBool(this.allowedToSearchByPhoneNumber);
    output.writeFieldEnd();
  }
  if (this.allowedToReceiveMessageFromNonFriend !== null && this.allowedToReceiveMessageFromNonFriend !== undefined) {
    output.writeFieldBegin('allowedToReceiveMessageFromNonFriend', Thrift.Type.BOOL, 4);
    output.writeBool(this.allowedToReceiveMessageFromNonFriend);
    output.writeFieldEnd();
  }
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 5);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PhoneVerificationResult = function(args) {
  this.verificationResult = null;
  this.accountMigrationCheckType = null;
  this.recommendAddFriends = null;
  if (args) {
    if (args.verificationResult !== undefined && args.verificationResult !== null) {
      this.verificationResult = args.verificationResult;
    }
    if (args.accountMigrationCheckType !== undefined && args.accountMigrationCheckType !== null) {
      this.accountMigrationCheckType = args.accountMigrationCheckType;
    }
    if (args.recommendAddFriends !== undefined && args.recommendAddFriends !== null) {
      this.recommendAddFriends = args.recommendAddFriends;
    }
  }
};
PhoneVerificationResult.prototype = {};
PhoneVerificationResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.verificationResult = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.accountMigrationCheckType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.recommendAddFriends = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhoneVerificationResult.prototype.write = function(output) {
  output.writeStructBegin('PhoneVerificationResult');
  if (this.verificationResult !== null && this.verificationResult !== undefined) {
    output.writeFieldBegin('verificationResult', Thrift.Type.I32, 1);
    output.writeI32(this.verificationResult);
    output.writeFieldEnd();
  }
  if (this.accountMigrationCheckType !== null && this.accountMigrationCheckType !== undefined) {
    output.writeFieldBegin('accountMigrationCheckType', Thrift.Type.I32, 2);
    output.writeI32(this.accountMigrationCheckType);
    output.writeFieldEnd();
  }
  if (this.recommendAddFriends !== null && this.recommendAddFriends !== undefined) {
    output.writeFieldBegin('recommendAddFriends', Thrift.Type.BOOL, 3);
    output.writeBool(this.recommendAddFriends);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlaceSearchInfo = function(args) {
  this.name = null;
  this.address = null;
  this.latitude = null;
  this.longitude = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    }
  }
};
PlaceSearchInfo.prototype = {};
PlaceSearchInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlaceSearchInfo.prototype.write = function(output) {
  output.writeStructBegin('PlaceSearchInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RSAKey = function(args) {
  this.keynm = null;
  this.nvalue = null;
  this.evalue = null;
  this.sessionKey = null;
  if (args) {
    if (args.keynm !== undefined && args.keynm !== null) {
      this.keynm = args.keynm;
    }
    if (args.nvalue !== undefined && args.nvalue !== null) {
      this.nvalue = args.nvalue;
    }
    if (args.evalue !== undefined && args.evalue !== null) {
      this.evalue = args.evalue;
    }
    if (args.sessionKey !== undefined && args.sessionKey !== null) {
      this.sessionKey = args.sessionKey;
    }
  }
};
RSAKey.prototype = {};
RSAKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.keynm = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nvalue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.evalue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sessionKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RSAKey.prototype.write = function(output) {
  output.writeStructBegin('RSAKey');
  if (this.keynm !== null && this.keynm !== undefined) {
    output.writeFieldBegin('keynm', Thrift.Type.STRING, 1);
    output.writeString(this.keynm);
    output.writeFieldEnd();
  }
  if (this.nvalue !== null && this.nvalue !== undefined) {
    output.writeFieldBegin('nvalue', Thrift.Type.STRING, 2);
    output.writeString(this.nvalue);
    output.writeFieldEnd();
  }
  if (this.evalue !== null && this.evalue !== undefined) {
    output.writeFieldBegin('evalue', Thrift.Type.STRING, 3);
    output.writeString(this.evalue);
    output.writeFieldEnd();
  }
  if (this.sessionKey !== null && this.sessionKey !== undefined) {
    output.writeFieldBegin('sessionKey', Thrift.Type.STRING, 4);
    output.writeString(this.sessionKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityCenterResult = function(args) {
  this.uri = null;
  this.token = null;
  this.cookiePath = null;
  this.skip = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.cookiePath !== undefined && args.cookiePath !== null) {
      this.cookiePath = args.cookiePath;
    }
    if (args.skip !== undefined && args.skip !== null) {
      this.skip = args.skip;
    }
  }
};
SecurityCenterResult.prototype = {};
SecurityCenterResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cookiePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.skip = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityCenterResult.prototype.write = function(output) {
  output.writeStructBegin('SecurityCenterResult');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 2);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.cookiePath !== null && this.cookiePath !== undefined) {
    output.writeFieldBegin('cookiePath', Thrift.Type.STRING, 3);
    output.writeString(this.cookiePath);
    output.writeFieldEnd();
  }
  if (this.skip !== null && this.skip !== undefined) {
    output.writeFieldBegin('skip', Thrift.Type.BOOL, 4);
    output.writeBool(this.skip);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendBuddyMessageResult = function(args) {
  this.requestId = null;
  this.state = null;
  this.messageId = null;
  this.eventNo = null;
  this.receiverCount = null;
  this.successCount = null;
  this.failCount = null;
  this.cancelCount = null;
  this.blockCount = null;
  this.unregisterCount = null;
  this.timestamp = null;
  this.message = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.eventNo !== undefined && args.eventNo !== null) {
      this.eventNo = args.eventNo;
    }
    if (args.receiverCount !== undefined && args.receiverCount !== null) {
      this.receiverCount = args.receiverCount;
    }
    if (args.successCount !== undefined && args.successCount !== null) {
      this.successCount = args.successCount;
    }
    if (args.failCount !== undefined && args.failCount !== null) {
      this.failCount = args.failCount;
    }
    if (args.cancelCount !== undefined && args.cancelCount !== null) {
      this.cancelCount = args.cancelCount;
    }
    if (args.blockCount !== undefined && args.blockCount !== null) {
      this.blockCount = args.blockCount;
    }
    if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
      this.unregisterCount = args.unregisterCount;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
SendBuddyMessageResult.prototype = {};
SendBuddyMessageResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.eventNo = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.receiverCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.successCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.failCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.cancelCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.blockCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.unregisterCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendBuddyMessageResult.prototype.write = function(output) {
  output.writeStructBegin('SendBuddyMessageResult');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 3);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.eventNo !== null && this.eventNo !== undefined) {
    output.writeFieldBegin('eventNo', Thrift.Type.I32, 4);
    output.writeI32(this.eventNo);
    output.writeFieldEnd();
  }
  if (this.receiverCount !== null && this.receiverCount !== undefined) {
    output.writeFieldBegin('receiverCount', Thrift.Type.I64, 11);
    output.writeI64(this.receiverCount);
    output.writeFieldEnd();
  }
  if (this.successCount !== null && this.successCount !== undefined) {
    output.writeFieldBegin('successCount', Thrift.Type.I64, 12);
    output.writeI64(this.successCount);
    output.writeFieldEnd();
  }
  if (this.failCount !== null && this.failCount !== undefined) {
    output.writeFieldBegin('failCount', Thrift.Type.I64, 13);
    output.writeI64(this.failCount);
    output.writeFieldEnd();
  }
  if (this.cancelCount !== null && this.cancelCount !== undefined) {
    output.writeFieldBegin('cancelCount', Thrift.Type.I64, 14);
    output.writeI64(this.cancelCount);
    output.writeFieldEnd();
  }
  if (this.blockCount !== null && this.blockCount !== undefined) {
    output.writeFieldBegin('blockCount', Thrift.Type.I64, 15);
    output.writeI64(this.blockCount);
    output.writeFieldEnd();
  }
  if (this.unregisterCount !== null && this.unregisterCount !== undefined) {
    output.writeFieldBegin('unregisterCount', Thrift.Type.I64, 16);
    output.writeI64(this.unregisterCount);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 21);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 22);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetBuddyOnAirResult = function(args) {
  this.requestId = null;
  this.state = null;
  this.eventNo = null;
  this.receiverCount = null;
  this.successCount = null;
  this.failCount = null;
  this.cancelCount = null;
  this.unregisterCount = null;
  this.timestamp = null;
  this.message = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.eventNo !== undefined && args.eventNo !== null) {
      this.eventNo = args.eventNo;
    }
    if (args.receiverCount !== undefined && args.receiverCount !== null) {
      this.receiverCount = args.receiverCount;
    }
    if (args.successCount !== undefined && args.successCount !== null) {
      this.successCount = args.successCount;
    }
    if (args.failCount !== undefined && args.failCount !== null) {
      this.failCount = args.failCount;
    }
    if (args.cancelCount !== undefined && args.cancelCount !== null) {
      this.cancelCount = args.cancelCount;
    }
    if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
      this.unregisterCount = args.unregisterCount;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
SetBuddyOnAirResult.prototype = {};
SetBuddyOnAirResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.eventNo = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.receiverCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.successCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.failCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.cancelCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.unregisterCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetBuddyOnAirResult.prototype.write = function(output) {
  output.writeStructBegin('SetBuddyOnAirResult');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.eventNo !== null && this.eventNo !== undefined) {
    output.writeFieldBegin('eventNo', Thrift.Type.I32, 3);
    output.writeI32(this.eventNo);
    output.writeFieldEnd();
  }
  if (this.receiverCount !== null && this.receiverCount !== undefined) {
    output.writeFieldBegin('receiverCount', Thrift.Type.I64, 11);
    output.writeI64(this.receiverCount);
    output.writeFieldEnd();
  }
  if (this.successCount !== null && this.successCount !== undefined) {
    output.writeFieldBegin('successCount', Thrift.Type.I64, 12);
    output.writeI64(this.successCount);
    output.writeFieldEnd();
  }
  if (this.failCount !== null && this.failCount !== undefined) {
    output.writeFieldBegin('failCount', Thrift.Type.I64, 13);
    output.writeI64(this.failCount);
    output.writeFieldEnd();
  }
  if (this.cancelCount !== null && this.cancelCount !== undefined) {
    output.writeFieldBegin('cancelCount', Thrift.Type.I64, 14);
    output.writeI64(this.cancelCount);
    output.writeFieldEnd();
  }
  if (this.unregisterCount !== null && this.unregisterCount !== undefined) {
    output.writeFieldBegin('unregisterCount', Thrift.Type.I64, 15);
    output.writeI64(this.unregisterCount);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 21);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 22);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Settings = function(args) {
  this.notificationEnable = null;
  this.notificationMuteExpiration = null;
  this.notificationNewMessage = null;
  this.notificationGroupInvitation = null;
  this.notificationShowMessage = null;
  this.notificationIncomingCall = null;
  this.notificationSoundMessage = null;
  this.notificationSoundGroup = null;
  this.notificationDisabledWithSub = null;
  this.privacySyncContacts = null;
  this.privacySearchByPhoneNumber = null;
  this.privacySearchByUserid = null;
  this.privacySearchByEmail = null;
  this.privacyAllowSecondaryDeviceLogin = null;
  this.privacyProfileImagePostToMyhome = null;
  this.privacyReceiveMessagesFromNotFriend = null;
  this.contactMyTicket = null;
  this.identityProvider = null;
  this.identityIdentifier = null;
  this.snsAccounts = null;
  this.phoneRegistration = null;
  this.emailConfirmationStatus = null;
  this.preferenceLocale = null;
  this.customModes = null;
  this.e2eeEnable = null;
  this.hitokotoBackupRequested = null;
  this.privacyProfileMusicPostToMyhome = null;
  this.privacyAllowNearby = null;
  this.agreementNearbyTime = null;
  this.agreementSquareTime = null;
  this.notificationMention = null;
  this.botUseAgreementAcceptedAt = null;
  if (args) {
    if (args.notificationEnable !== undefined && args.notificationEnable !== null) {
      this.notificationEnable = args.notificationEnable;
    }
    if (args.notificationMuteExpiration !== undefined && args.notificationMuteExpiration !== null) {
      this.notificationMuteExpiration = args.notificationMuteExpiration;
    }
    if (args.notificationNewMessage !== undefined && args.notificationNewMessage !== null) {
      this.notificationNewMessage = args.notificationNewMessage;
    }
    if (args.notificationGroupInvitation !== undefined && args.notificationGroupInvitation !== null) {
      this.notificationGroupInvitation = args.notificationGroupInvitation;
    }
    if (args.notificationShowMessage !== undefined && args.notificationShowMessage !== null) {
      this.notificationShowMessage = args.notificationShowMessage;
    }
    if (args.notificationIncomingCall !== undefined && args.notificationIncomingCall !== null) {
      this.notificationIncomingCall = args.notificationIncomingCall;
    }
    if (args.notificationSoundMessage !== undefined && args.notificationSoundMessage !== null) {
      this.notificationSoundMessage = args.notificationSoundMessage;
    }
    if (args.notificationSoundGroup !== undefined && args.notificationSoundGroup !== null) {
      this.notificationSoundGroup = args.notificationSoundGroup;
    }
    if (args.notificationDisabledWithSub !== undefined && args.notificationDisabledWithSub !== null) {
      this.notificationDisabledWithSub = args.notificationDisabledWithSub;
    }
    if (args.privacySyncContacts !== undefined && args.privacySyncContacts !== null) {
      this.privacySyncContacts = args.privacySyncContacts;
    }
    if (args.privacySearchByPhoneNumber !== undefined && args.privacySearchByPhoneNumber !== null) {
      this.privacySearchByPhoneNumber = args.privacySearchByPhoneNumber;
    }
    if (args.privacySearchByUserid !== undefined && args.privacySearchByUserid !== null) {
      this.privacySearchByUserid = args.privacySearchByUserid;
    }
    if (args.privacySearchByEmail !== undefined && args.privacySearchByEmail !== null) {
      this.privacySearchByEmail = args.privacySearchByEmail;
    }
    if (args.privacyAllowSecondaryDeviceLogin !== undefined && args.privacyAllowSecondaryDeviceLogin !== null) {
      this.privacyAllowSecondaryDeviceLogin = args.privacyAllowSecondaryDeviceLogin;
    }
    if (args.privacyProfileImagePostToMyhome !== undefined && args.privacyProfileImagePostToMyhome !== null) {
      this.privacyProfileImagePostToMyhome = args.privacyProfileImagePostToMyhome;
    }
    if (args.privacyReceiveMessagesFromNotFriend !== undefined && args.privacyReceiveMessagesFromNotFriend !== null) {
      this.privacyReceiveMessagesFromNotFriend = args.privacyReceiveMessagesFromNotFriend;
    }
    if (args.contactMyTicket !== undefined && args.contactMyTicket !== null) {
      this.contactMyTicket = args.contactMyTicket;
    }
    if (args.identityProvider !== undefined && args.identityProvider !== null) {
      this.identityProvider = args.identityProvider;
    }
    if (args.identityIdentifier !== undefined && args.identityIdentifier !== null) {
      this.identityIdentifier = args.identityIdentifier;
    }
    if (args.snsAccounts !== undefined && args.snsAccounts !== null) {
      this.snsAccounts = Thrift.copyMap(args.snsAccounts, [null]);
    }
    if (args.phoneRegistration !== undefined && args.phoneRegistration !== null) {
      this.phoneRegistration = args.phoneRegistration;
    }
    if (args.emailConfirmationStatus !== undefined && args.emailConfirmationStatus !== null) {
      this.emailConfirmationStatus = args.emailConfirmationStatus;
    }
    if (args.preferenceLocale !== undefined && args.preferenceLocale !== null) {
      this.preferenceLocale = args.preferenceLocale;
    }
    if (args.customModes !== undefined && args.customModes !== null) {
      this.customModes = Thrift.copyMap(args.customModes, [null]);
    }
    if (args.e2eeEnable !== undefined && args.e2eeEnable !== null) {
      this.e2eeEnable = args.e2eeEnable;
    }
    if (args.hitokotoBackupRequested !== undefined && args.hitokotoBackupRequested !== null) {
      this.hitokotoBackupRequested = args.hitokotoBackupRequested;
    }
    if (args.privacyProfileMusicPostToMyhome !== undefined && args.privacyProfileMusicPostToMyhome !== null) {
      this.privacyProfileMusicPostToMyhome = args.privacyProfileMusicPostToMyhome;
    }
    if (args.privacyAllowNearby !== undefined && args.privacyAllowNearby !== null) {
      this.privacyAllowNearby = args.privacyAllowNearby;
    }
    if (args.agreementNearbyTime !== undefined && args.agreementNearbyTime !== null) {
      this.agreementNearbyTime = args.agreementNearbyTime;
    }
    if (args.agreementSquareTime !== undefined && args.agreementSquareTime !== null) {
      this.agreementSquareTime = args.agreementSquareTime;
    }
    if (args.notificationMention !== undefined && args.notificationMention !== null) {
      this.notificationMention = args.notificationMention;
    }
    if (args.botUseAgreementAcceptedAt !== undefined && args.botUseAgreementAcceptedAt !== null) {
      this.botUseAgreementAcceptedAt = args.botUseAgreementAcceptedAt;
    }
  }
};
Settings.prototype = {};
Settings.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationEnable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.notificationMuteExpiration = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationNewMessage = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationGroupInvitation = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationShowMessage = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationIncomingCall = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.notificationSoundMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.notificationSoundGroup = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationDisabledWithSub = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.privacySyncContacts = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.privacySearchByPhoneNumber = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.BOOL) {
        this.privacySearchByUserid = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.BOOL) {
        this.privacySearchByEmail = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAllowSecondaryDeviceLogin = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyProfileImagePostToMyhome = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyReceiveMessagesFromNotFriend = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.contactMyTicket = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I32) {
        this.identityProvider = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.STRING) {
        this.identityIdentifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.MAP) {
        this.snsAccounts = {};
        var _rtmp3309 = input.readMapBegin();
        var _size308 = _rtmp3309.size || 0;
        for (var _i310 = 0; _i310 < _size308; ++_i310) {
          if (_i310 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key311 = null;
          var val312 = null;
          key311 = input.readI32().value;
          val312 = input.readString().value;
          this.snsAccounts[key311] = val312;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.BOOL) {
        this.phoneRegistration = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.I32) {
        this.emailConfirmationStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRING) {
        this.preferenceLocale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.MAP) {
        this.customModes = {};
        var _rtmp3314 = input.readMapBegin();
        var _size313 = _rtmp3314.size || 0;
        for (var _i315 = 0; _i315 < _size313; ++_i315) {
          if (_i315 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key316 = null;
          var val317 = null;
          key316 = input.readI32().value;
          val317 = input.readString().value;
          this.customModes[key316] = val317;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 61:
      if (ftype == Thrift.Type.BOOL) {
        this.e2eeEnable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 62:
      if (ftype == Thrift.Type.BOOL) {
        this.hitokotoBackupRequested = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 63:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyProfileMusicPostToMyhome = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 65:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAllowNearby = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 66:
      if (ftype == Thrift.Type.I64) {
        this.agreementNearbyTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 67:
      if (ftype == Thrift.Type.I64) {
        this.agreementSquareTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 68:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationMention = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 69:
      if (ftype == Thrift.Type.I64) {
        this.botUseAgreementAcceptedAt = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Settings.prototype.write = function(output) {
  output.writeStructBegin('Settings');
  if (this.notificationEnable !== null && this.notificationEnable !== undefined) {
    output.writeFieldBegin('notificationEnable', Thrift.Type.BOOL, 10);
    output.writeBool(this.notificationEnable);
    output.writeFieldEnd();
  }
  if (this.notificationMuteExpiration !== null && this.notificationMuteExpiration !== undefined) {
    output.writeFieldBegin('notificationMuteExpiration', Thrift.Type.I64, 11);
    output.writeI64(this.notificationMuteExpiration);
    output.writeFieldEnd();
  }
  if (this.notificationNewMessage !== null && this.notificationNewMessage !== undefined) {
    output.writeFieldBegin('notificationNewMessage', Thrift.Type.BOOL, 12);
    output.writeBool(this.notificationNewMessage);
    output.writeFieldEnd();
  }
  if (this.notificationGroupInvitation !== null && this.notificationGroupInvitation !== undefined) {
    output.writeFieldBegin('notificationGroupInvitation', Thrift.Type.BOOL, 13);
    output.writeBool(this.notificationGroupInvitation);
    output.writeFieldEnd();
  }
  if (this.notificationShowMessage !== null && this.notificationShowMessage !== undefined) {
    output.writeFieldBegin('notificationShowMessage', Thrift.Type.BOOL, 14);
    output.writeBool(this.notificationShowMessage);
    output.writeFieldEnd();
  }
  if (this.notificationIncomingCall !== null && this.notificationIncomingCall !== undefined) {
    output.writeFieldBegin('notificationIncomingCall', Thrift.Type.BOOL, 15);
    output.writeBool(this.notificationIncomingCall);
    output.writeFieldEnd();
  }
  if (this.notificationSoundMessage !== null && this.notificationSoundMessage !== undefined) {
    output.writeFieldBegin('notificationSoundMessage', Thrift.Type.STRING, 16);
    output.writeString(this.notificationSoundMessage);
    output.writeFieldEnd();
  }
  if (this.notificationSoundGroup !== null && this.notificationSoundGroup !== undefined) {
    output.writeFieldBegin('notificationSoundGroup', Thrift.Type.STRING, 17);
    output.writeString(this.notificationSoundGroup);
    output.writeFieldEnd();
  }
  if (this.notificationDisabledWithSub !== null && this.notificationDisabledWithSub !== undefined) {
    output.writeFieldBegin('notificationDisabledWithSub', Thrift.Type.BOOL, 18);
    output.writeBool(this.notificationDisabledWithSub);
    output.writeFieldEnd();
  }
  if (this.privacySyncContacts !== null && this.privacySyncContacts !== undefined) {
    output.writeFieldBegin('privacySyncContacts', Thrift.Type.BOOL, 20);
    output.writeBool(this.privacySyncContacts);
    output.writeFieldEnd();
  }
  if (this.privacySearchByPhoneNumber !== null && this.privacySearchByPhoneNumber !== undefined) {
    output.writeFieldBegin('privacySearchByPhoneNumber', Thrift.Type.BOOL, 21);
    output.writeBool(this.privacySearchByPhoneNumber);
    output.writeFieldEnd();
  }
  if (this.privacySearchByUserid !== null && this.privacySearchByUserid !== undefined) {
    output.writeFieldBegin('privacySearchByUserid', Thrift.Type.BOOL, 22);
    output.writeBool(this.privacySearchByUserid);
    output.writeFieldEnd();
  }
  if (this.privacySearchByEmail !== null && this.privacySearchByEmail !== undefined) {
    output.writeFieldBegin('privacySearchByEmail', Thrift.Type.BOOL, 23);
    output.writeBool(this.privacySearchByEmail);
    output.writeFieldEnd();
  }
  if (this.privacyAllowSecondaryDeviceLogin !== null && this.privacyAllowSecondaryDeviceLogin !== undefined) {
    output.writeFieldBegin('privacyAllowSecondaryDeviceLogin', Thrift.Type.BOOL, 24);
    output.writeBool(this.privacyAllowSecondaryDeviceLogin);
    output.writeFieldEnd();
  }
  if (this.privacyProfileImagePostToMyhome !== null && this.privacyProfileImagePostToMyhome !== undefined) {
    output.writeFieldBegin('privacyProfileImagePostToMyhome', Thrift.Type.BOOL, 25);
    output.writeBool(this.privacyProfileImagePostToMyhome);
    output.writeFieldEnd();
  }
  if (this.privacyReceiveMessagesFromNotFriend !== null && this.privacyReceiveMessagesFromNotFriend !== undefined) {
    output.writeFieldBegin('privacyReceiveMessagesFromNotFriend', Thrift.Type.BOOL, 26);
    output.writeBool(this.privacyReceiveMessagesFromNotFriend);
    output.writeFieldEnd();
  }
  if (this.contactMyTicket !== null && this.contactMyTicket !== undefined) {
    output.writeFieldBegin('contactMyTicket', Thrift.Type.STRING, 30);
    output.writeString(this.contactMyTicket);
    output.writeFieldEnd();
  }
  if (this.identityProvider !== null && this.identityProvider !== undefined) {
    output.writeFieldBegin('identityProvider', Thrift.Type.I32, 40);
    output.writeI32(this.identityProvider);
    output.writeFieldEnd();
  }
  if (this.identityIdentifier !== null && this.identityIdentifier !== undefined) {
    output.writeFieldBegin('identityIdentifier', Thrift.Type.STRING, 41);
    output.writeString(this.identityIdentifier);
    output.writeFieldEnd();
  }
  if (this.snsAccounts !== null && this.snsAccounts !== undefined) {
    output.writeFieldBegin('snsAccounts', Thrift.Type.MAP, 42);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.snsAccounts));
    for (var kiter318 in this.snsAccounts) {
      if (this.snsAccounts.hasOwnProperty(kiter318)) {
        var viter319 = this.snsAccounts[kiter318];
        output.writeI32(kiter318);
        output.writeString(viter319);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.phoneRegistration !== null && this.phoneRegistration !== undefined) {
    output.writeFieldBegin('phoneRegistration', Thrift.Type.BOOL, 43);
    output.writeBool(this.phoneRegistration);
    output.writeFieldEnd();
  }
  if (this.emailConfirmationStatus !== null && this.emailConfirmationStatus !== undefined) {
    output.writeFieldBegin('emailConfirmationStatus', Thrift.Type.I32, 44);
    output.writeI32(this.emailConfirmationStatus);
    output.writeFieldEnd();
  }
  if (this.preferenceLocale !== null && this.preferenceLocale !== undefined) {
    output.writeFieldBegin('preferenceLocale', Thrift.Type.STRING, 50);
    output.writeString(this.preferenceLocale);
    output.writeFieldEnd();
  }
  if (this.customModes !== null && this.customModes !== undefined) {
    output.writeFieldBegin('customModes', Thrift.Type.MAP, 60);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.customModes));
    for (var kiter320 in this.customModes) {
      if (this.customModes.hasOwnProperty(kiter320)) {
        var viter321 = this.customModes[kiter320];
        output.writeI32(kiter320);
        output.writeString(viter321);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e2eeEnable !== null && this.e2eeEnable !== undefined) {
    output.writeFieldBegin('e2eeEnable', Thrift.Type.BOOL, 61);
    output.writeBool(this.e2eeEnable);
    output.writeFieldEnd();
  }
  if (this.hitokotoBackupRequested !== null && this.hitokotoBackupRequested !== undefined) {
    output.writeFieldBegin('hitokotoBackupRequested', Thrift.Type.BOOL, 62);
    output.writeBool(this.hitokotoBackupRequested);
    output.writeFieldEnd();
  }
  if (this.privacyProfileMusicPostToMyhome !== null && this.privacyProfileMusicPostToMyhome !== undefined) {
    output.writeFieldBegin('privacyProfileMusicPostToMyhome', Thrift.Type.BOOL, 63);
    output.writeBool(this.privacyProfileMusicPostToMyhome);
    output.writeFieldEnd();
  }
  if (this.privacyAllowNearby !== null && this.privacyAllowNearby !== undefined) {
    output.writeFieldBegin('privacyAllowNearby', Thrift.Type.BOOL, 65);
    output.writeBool(this.privacyAllowNearby);
    output.writeFieldEnd();
  }
  if (this.agreementNearbyTime !== null && this.agreementNearbyTime !== undefined) {
    output.writeFieldBegin('agreementNearbyTime', Thrift.Type.I64, 66);
    output.writeI64(this.agreementNearbyTime);
    output.writeFieldEnd();
  }
  if (this.agreementSquareTime !== null && this.agreementSquareTime !== undefined) {
    output.writeFieldBegin('agreementSquareTime', Thrift.Type.I64, 67);
    output.writeI64(this.agreementSquareTime);
    output.writeFieldEnd();
  }
  if (this.notificationMention !== null && this.notificationMention !== undefined) {
    output.writeFieldBegin('notificationMention', Thrift.Type.BOOL, 68);
    output.writeBool(this.notificationMention);
    output.writeFieldEnd();
  }
  if (this.botUseAgreementAcceptedAt !== null && this.botUseAgreementAcceptedAt !== undefined) {
    output.writeFieldBegin('botUseAgreementAcceptedAt', Thrift.Type.I64, 69);
    output.writeI64(this.botUseAgreementAcceptedAt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleChannelClient = function(args) {
  this.applicationType = null;
  this.applicationVersion = null;
  this.locale = null;
  if (args) {
    if (args.applicationType !== undefined && args.applicationType !== null) {
      this.applicationType = args.applicationType;
    }
    if (args.applicationVersion !== undefined && args.applicationVersion !== null) {
      this.applicationVersion = args.applicationVersion;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
SimpleChannelClient.prototype = {};
SimpleChannelClient.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.applicationType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.applicationVersion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleChannelClient.prototype.write = function(output) {
  output.writeStructBegin('SimpleChannelClient');
  if (this.applicationType !== null && this.applicationType !== undefined) {
    output.writeFieldBegin('applicationType', Thrift.Type.STRING, 1);
    output.writeString(this.applicationType);
    output.writeFieldEnd();
  }
  if (this.applicationVersion !== null && this.applicationVersion !== undefined) {
    output.writeFieldBegin('applicationVersion', Thrift.Type.STRING, 2);
    output.writeString(this.applicationVersion);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleChannelContact = function(args) {
  this.mid = null;
  this.displayName = null;
  this.pictureStatus = null;
  this.picturePath = null;
  this.statusMessage = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
  }
};
SimpleChannelContact.prototype = {};
SimpleChannelContact.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleChannelContact.prototype.write = function(output) {
  output.writeStructBegin('SimpleChannelContact');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 3);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 4);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 5);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SnsFriend = function(args) {
  this.snsUserId = null;
  this.snsUserName = null;
  this.snsIdType = null;
  if (args) {
    if (args.snsUserId !== undefined && args.snsUserId !== null) {
      this.snsUserId = args.snsUserId;
    }
    if (args.snsUserName !== undefined && args.snsUserName !== null) {
      this.snsUserName = args.snsUserName;
    }
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
  }
};
SnsFriend.prototype = {};
SnsFriend.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.snsUserId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.snsUserName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnsFriend.prototype.write = function(output) {
  output.writeStructBegin('SnsFriend');
  if (this.snsUserId !== null && this.snsUserId !== undefined) {
    output.writeFieldBegin('snsUserId', Thrift.Type.STRING, 1);
    output.writeString(this.snsUserId);
    output.writeFieldEnd();
  }
  if (this.snsUserName !== null && this.snsUserName !== undefined) {
    output.writeFieldBegin('snsUserName', Thrift.Type.STRING, 2);
    output.writeString(this.snsUserName);
    output.writeFieldEnd();
  }
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 3);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SnsFriendContactRegistration = function(args) {
  this.contact = null;
  this.snsIdType = null;
  this.snsUserId = null;
  if (args) {
    if (args.contact !== undefined && args.contact !== null) {
      this.contact = new Contact(args.contact);
    }
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
    if (args.snsUserId !== undefined && args.snsUserId !== null) {
      this.snsUserId = args.snsUserId;
    }
  }
};
SnsFriendContactRegistration.prototype = {};
SnsFriendContactRegistration.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new Contact();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.snsUserId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnsFriendContactRegistration.prototype.write = function(output) {
  output.writeStructBegin('SnsFriendContactRegistration');
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 1);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  if (this.snsUserId !== null && this.snsUserId !== undefined) {
    output.writeFieldBegin('snsUserId', Thrift.Type.STRING, 3);
    output.writeString(this.snsUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SnsFriendModification = function(args) {
  this.type = null;
  this.snsFriend = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.snsFriend !== undefined && args.snsFriend !== null) {
      this.snsFriend = new SnsFriend(args.snsFriend);
    }
  }
};
SnsFriendModification.prototype = {};
SnsFriendModification.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.snsFriend = new SnsFriend();
        this.snsFriend.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnsFriendModification.prototype.write = function(output) {
  output.writeStructBegin('SnsFriendModification');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.snsFriend !== null && this.snsFriend !== undefined) {
    output.writeFieldBegin('snsFriend', Thrift.Type.STRUCT, 2);
    this.snsFriend.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SnsFriends = function(args) {
  this.snsFriends = null;
  this.hasMore = null;
  if (args) {
    if (args.snsFriends !== undefined && args.snsFriends !== null) {
      this.snsFriends = Thrift.copyList(args.snsFriends, [SnsFriend]);
    }
    if (args.hasMore !== undefined && args.hasMore !== null) {
      this.hasMore = args.hasMore;
    }
  }
};
SnsFriends.prototype = {};
SnsFriends.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.snsFriends = [];
        var _rtmp3323 = input.readListBegin();
        var _size322 = _rtmp3323.size || 0;
        for (var _i324 = 0; _i324 < _size322; ++_i324) {
          var elem325 = null;
          elem325 = new SnsFriend();
          elem325.read(input);
          this.snsFriends.push(elem325);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.hasMore = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnsFriends.prototype.write = function(output) {
  output.writeStructBegin('SnsFriends');
  if (this.snsFriends !== null && this.snsFriends !== undefined) {
    output.writeFieldBegin('snsFriends', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.snsFriends.length);
    for (var iter326 in this.snsFriends) {
      if (this.snsFriends.hasOwnProperty(iter326)) {
        iter326 = this.snsFriends[iter326];
        iter326.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hasMore !== null && this.hasMore !== undefined) {
    output.writeFieldBegin('hasMore', Thrift.Type.BOOL, 2);
    output.writeBool(this.hasMore);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SnsIdUserStatus = function(args) {
  this.userExisting = null;
  this.phoneNumberRegistered = null;
  this.sameDevice = null;
  if (args) {
    if (args.userExisting !== undefined && args.userExisting !== null) {
      this.userExisting = args.userExisting;
    }
    if (args.phoneNumberRegistered !== undefined && args.phoneNumberRegistered !== null) {
      this.phoneNumberRegistered = args.phoneNumberRegistered;
    }
    if (args.sameDevice !== undefined && args.sameDevice !== null) {
      this.sameDevice = args.sameDevice;
    }
  }
};
SnsIdUserStatus.prototype = {};
SnsIdUserStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.userExisting = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.phoneNumberRegistered = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.sameDevice = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnsIdUserStatus.prototype.write = function(output) {
  output.writeStructBegin('SnsIdUserStatus');
  if (this.userExisting !== null && this.userExisting !== undefined) {
    output.writeFieldBegin('userExisting', Thrift.Type.BOOL, 1);
    output.writeBool(this.userExisting);
    output.writeFieldEnd();
  }
  if (this.phoneNumberRegistered !== null && this.phoneNumberRegistered !== undefined) {
    output.writeFieldBegin('phoneNumberRegistered', Thrift.Type.BOOL, 2);
    output.writeBool(this.phoneNumberRegistered);
    output.writeFieldEnd();
  }
  if (this.sameDevice !== null && this.sameDevice !== undefined) {
    output.writeFieldBegin('sameDevice', Thrift.Type.BOOL, 3);
    output.writeBool(this.sameDevice);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SnsProfile = function(args) {
  this.snsUserId = null;
  this.snsUserName = null;
  this.email = null;
  this.thumbnailUrl = null;
  if (args) {
    if (args.snsUserId !== undefined && args.snsUserId !== null) {
      this.snsUserId = args.snsUserId;
    }
    if (args.snsUserName !== undefined && args.snsUserName !== null) {
      this.snsUserName = args.snsUserName;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
      this.thumbnailUrl = args.thumbnailUrl;
    }
  }
};
SnsProfile.prototype = {};
SnsProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.snsUserId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.snsUserName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnailUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnsProfile.prototype.write = function(output) {
  output.writeStructBegin('SnsProfile');
  if (this.snsUserId !== null && this.snsUserId !== undefined) {
    output.writeFieldBegin('snsUserId', Thrift.Type.STRING, 1);
    output.writeString(this.snsUserId);
    output.writeFieldEnd();
  }
  if (this.snsUserName !== null && this.snsUserName !== undefined) {
    output.writeFieldBegin('snsUserName', Thrift.Type.STRING, 2);
    output.writeString(this.snsUserName);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 3);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
    output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 4);
    output.writeString(this.thumbnailUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SystemConfiguration = function(args) {
  this.endpoint = null;
  this.endpointSsl = null;
  this.updateUrl = null;
  this.c2dmAccount = null;
  this.nniServer = null;
  if (args) {
    if (args.endpoint !== undefined && args.endpoint !== null) {
      this.endpoint = args.endpoint;
    }
    if (args.endpointSsl !== undefined && args.endpointSsl !== null) {
      this.endpointSsl = args.endpointSsl;
    }
    if (args.updateUrl !== undefined && args.updateUrl !== null) {
      this.updateUrl = args.updateUrl;
    }
    if (args.c2dmAccount !== undefined && args.c2dmAccount !== null) {
      this.c2dmAccount = args.c2dmAccount;
    }
    if (args.nniServer !== undefined && args.nniServer !== null) {
      this.nniServer = args.nniServer;
    }
  }
};
SystemConfiguration.prototype = {};
SystemConfiguration.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.endpoint = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.endpointSsl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.updateUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.c2dmAccount = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.nniServer = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SystemConfiguration.prototype.write = function(output) {
  output.writeStructBegin('SystemConfiguration');
  if (this.endpoint !== null && this.endpoint !== undefined) {
    output.writeFieldBegin('endpoint', Thrift.Type.STRING, 1);
    output.writeString(this.endpoint);
    output.writeFieldEnd();
  }
  if (this.endpointSsl !== null && this.endpointSsl !== undefined) {
    output.writeFieldBegin('endpointSsl', Thrift.Type.STRING, 2);
    output.writeString(this.endpointSsl);
    output.writeFieldEnd();
  }
  if (this.updateUrl !== null && this.updateUrl !== undefined) {
    output.writeFieldBegin('updateUrl', Thrift.Type.STRING, 3);
    output.writeString(this.updateUrl);
    output.writeFieldEnd();
  }
  if (this.c2dmAccount !== null && this.c2dmAccount !== undefined) {
    output.writeFieldBegin('c2dmAccount', Thrift.Type.STRING, 11);
    output.writeString(this.c2dmAccount);
    output.writeFieldEnd();
  }
  if (this.nniServer !== null && this.nniServer !== undefined) {
    output.writeFieldBegin('nniServer', Thrift.Type.STRING, 12);
    output.writeString(this.nniServer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Ticket = function(args) {
  this.id = null;
  this.expirationTime = null;
  this.maxUseCount = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.expirationTime !== undefined && args.expirationTime !== null) {
      this.expirationTime = args.expirationTime;
    }
    if (args.maxUseCount !== undefined && args.maxUseCount !== null) {
      this.maxUseCount = args.maxUseCount;
    }
  }
};
Ticket.prototype = {};
Ticket.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.expirationTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.maxUseCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Ticket.prototype.write = function(output) {
  output.writeStructBegin('Ticket');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.expirationTime !== null && this.expirationTime !== undefined) {
    output.writeFieldBegin('expirationTime', Thrift.Type.I64, 10);
    output.writeI64(this.expirationTime);
    output.writeFieldEnd();
  }
  if (this.maxUseCount !== null && this.maxUseCount !== undefined) {
    output.writeFieldBegin('maxUseCount', Thrift.Type.I32, 21);
    output.writeI32(this.maxUseCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TMessageBox = function(args) {
  this.id = null;
  this.channelId = null;
  this.lastSeq = null;
  this.unreadCount = null;
  this.lastModifiedTime = null;
  this.status = null;
  this.midType = null;
  this.lastMessages = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.lastSeq !== undefined && args.lastSeq !== null) {
      this.lastSeq = args.lastSeq;
    }
    if (args.unreadCount !== undefined && args.unreadCount !== null) {
      this.unreadCount = args.unreadCount;
    }
    if (args.lastModifiedTime !== undefined && args.lastModifiedTime !== null) {
      this.lastModifiedTime = args.lastModifiedTime;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.midType !== undefined && args.midType !== null) {
      this.midType = args.midType;
    }
    if (args.lastMessages !== undefined && args.lastMessages !== null) {
      this.lastMessages = Thrift.copyList(args.lastMessages, [Message]);
    }
  }
};
TMessageBox.prototype = {};
TMessageBox.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.lastSeq = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.unreadCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.lastModifiedTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.midType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        this.lastMessages = [];
        var _rtmp3328 = input.readListBegin();
        var _size327 = _rtmp3328.size || 0;
        for (var _i329 = 0; _i329 < _size327; ++_i329) {
          var elem330 = null;
          elem330 = new Message();
          elem330.read(input);
          this.lastMessages.push(elem330);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMessageBox.prototype.write = function(output) {
  output.writeStructBegin('TMessageBox');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.lastSeq !== null && this.lastSeq !== undefined) {
    output.writeFieldBegin('lastSeq', Thrift.Type.I64, 5);
    output.writeI64(this.lastSeq);
    output.writeFieldEnd();
  }
  if (this.unreadCount !== null && this.unreadCount !== undefined) {
    output.writeFieldBegin('unreadCount', Thrift.Type.I64, 6);
    output.writeI64(this.unreadCount);
    output.writeFieldEnd();
  }
  if (this.lastModifiedTime !== null && this.lastModifiedTime !== undefined) {
    output.writeFieldBegin('lastModifiedTime', Thrift.Type.I64, 7);
    output.writeI64(this.lastModifiedTime);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 8);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.midType !== null && this.midType !== undefined) {
    output.writeFieldBegin('midType', Thrift.Type.I32, 9);
    output.writeI32(this.midType);
    output.writeFieldEnd();
  }
  if (this.lastMessages !== null && this.lastMessages !== undefined) {
    output.writeFieldBegin('lastMessages', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.lastMessages.length);
    for (var iter331 in this.lastMessages) {
      if (this.lastMessages.hasOwnProperty(iter331)) {
        iter331 = this.lastMessages[iter331];
        iter331.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TMessageBoxWrapUp = function(args) {
  this.messageBox = null;
  this.name = null;
  this.contacts = null;
  this.pictureRevision = null;
  if (args) {
    if (args.messageBox !== undefined && args.messageBox !== null) {
      this.messageBox = new TMessageBox(args.messageBox);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.contacts !== undefined && args.contacts !== null) {
      this.contacts = Thrift.copyList(args.contacts, [Contact]);
    }
    if (args.pictureRevision !== undefined && args.pictureRevision !== null) {
      this.pictureRevision = args.pictureRevision;
    }
  }
};
TMessageBoxWrapUp.prototype = {};
TMessageBoxWrapUp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.messageBox = new TMessageBox();
        this.messageBox.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.contacts = [];
        var _rtmp3333 = input.readListBegin();
        var _size332 = _rtmp3333.size || 0;
        for (var _i334 = 0; _i334 < _size332; ++_i334) {
          var elem335 = null;
          elem335 = new Contact();
          elem335.read(input);
          this.contacts.push(elem335);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.pictureRevision = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMessageBoxWrapUp.prototype.write = function(output) {
  output.writeStructBegin('TMessageBoxWrapUp');
  if (this.messageBox !== null && this.messageBox !== undefined) {
    output.writeFieldBegin('messageBox', Thrift.Type.STRUCT, 1);
    this.messageBox.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.contacts !== null && this.contacts !== undefined) {
    output.writeFieldBegin('contacts', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.contacts.length);
    for (var iter336 in this.contacts) {
      if (this.contacts.hasOwnProperty(iter336)) {
        iter336 = this.contacts[iter336];
        iter336.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pictureRevision !== null && this.pictureRevision !== undefined) {
    output.writeFieldBegin('pictureRevision', Thrift.Type.STRING, 4);
    output.writeString(this.pictureRevision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TMessageBoxWrapUpResponse = function(args) {
  this.messageBoxWrapUpList = null;
  this.totalSize = null;
  if (args) {
    if (args.messageBoxWrapUpList !== undefined && args.messageBoxWrapUpList !== null) {
      this.messageBoxWrapUpList = Thrift.copyList(args.messageBoxWrapUpList, [TMessageBoxWrapUp]);
    }
    if (args.totalSize !== undefined && args.totalSize !== null) {
      this.totalSize = args.totalSize;
    }
  }
};
TMessageBoxWrapUpResponse.prototype = {};
TMessageBoxWrapUpResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.messageBoxWrapUpList = [];
        var _rtmp3338 = input.readListBegin();
        var _size337 = _rtmp3338.size || 0;
        for (var _i339 = 0; _i339 < _size337; ++_i339) {
          var elem340 = null;
          elem340 = new TMessageBoxWrapUp();
          elem340.read(input);
          this.messageBoxWrapUpList.push(elem340);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalSize = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMessageBoxWrapUpResponse.prototype.write = function(output) {
  output.writeStructBegin('TMessageBoxWrapUpResponse');
  if (this.messageBoxWrapUpList !== null && this.messageBoxWrapUpList !== undefined) {
    output.writeFieldBegin('messageBoxWrapUpList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.messageBoxWrapUpList.length);
    for (var iter341 in this.messageBoxWrapUpList) {
      if (this.messageBoxWrapUpList.hasOwnProperty(iter341)) {
        iter341 = this.messageBoxWrapUpList[iter341];
        iter341.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.totalSize !== null && this.totalSize !== undefined) {
    output.writeFieldBegin('totalSize', Thrift.Type.I32, 2);
    output.writeI32(this.totalSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TMessageReadRangeEntry = function(args) {
  this.startMessageId = null;
  this.endMessageId = null;
  this.startTime = null;
  this.endTime = null;
  if (args) {
    if (args.startMessageId !== undefined && args.startMessageId !== null) {
      this.startMessageId = args.startMessageId;
    }
    if (args.endMessageId !== undefined && args.endMessageId !== null) {
      this.endMessageId = args.endMessageId;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
  }
};
TMessageReadRangeEntry.prototype = {};
TMessageReadRangeEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.startMessageId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.endMessageId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMessageReadRangeEntry.prototype.write = function(output) {
  output.writeStructBegin('TMessageReadRangeEntry');
  if (this.startMessageId !== null && this.startMessageId !== undefined) {
    output.writeFieldBegin('startMessageId', Thrift.Type.I64, 1);
    output.writeI64(this.startMessageId);
    output.writeFieldEnd();
  }
  if (this.endMessageId !== null && this.endMessageId !== undefined) {
    output.writeFieldBegin('endMessageId', Thrift.Type.I64, 2);
    output.writeI64(this.endMessageId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 3);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 4);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TMessageReadRange = function(args) {
  this.chatId = null;
  this.ranges = null;
  if (args) {
    if (args.chatId !== undefined && args.chatId !== null) {
      this.chatId = args.chatId;
    }
    if (args.ranges !== undefined && args.ranges !== null) {
      this.ranges = Thrift.copyMap(args.ranges, [Thrift.copyList, TMessageReadRangeEntry]);
    }
  }
};
TMessageReadRange.prototype = {};
TMessageReadRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.chatId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.ranges = {};
        var _rtmp3343 = input.readMapBegin();
        var _size342 = _rtmp3343.size || 0;
        for (var _i344 = 0; _i344 < _size342; ++_i344) {
          if (_i344 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key345 = null;
          var val346 = null;
          key345 = input.readString().value;
          val346 = [];
          var _rtmp3348 = input.readListBegin();
          var _size347 = _rtmp3348.size || 0;
          for (var _i349 = 0; _i349 < _size347; ++_i349) {
            var elem350 = null;
            elem350 = new TMessageReadRangeEntry();
            elem350.read(input);
            val346.push(elem350);
          }
          input.readListEnd();
          this.ranges[key345] = val346;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMessageReadRange.prototype.write = function(output) {
  output.writeStructBegin('TMessageReadRange');
  if (this.chatId !== null && this.chatId !== undefined) {
    output.writeFieldBegin('chatId', Thrift.Type.STRING, 1);
    output.writeString(this.chatId);
    output.writeFieldEnd();
  }
  if (this.ranges !== null && this.ranges !== undefined) {
    output.writeFieldBegin('ranges', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.ranges));
    for (var kiter351 in this.ranges) {
      if (this.ranges.hasOwnProperty(kiter351)) {
        var viter352 = this.ranges[kiter351];
        output.writeString(kiter351);
        output.writeListBegin(Thrift.Type.STRUCT, viter352.length);
        for (var iter353 in viter352) {
          if (viter352.hasOwnProperty(iter353)) {
            iter353 = viter352[iter353];
            iter353.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChatRoomAnnouncementContents = function(args) {
  this.displayFields = null;
  this.text = null;
  this.link = null;
  this.thumbnail = null;
  if (args) {
    if (args.displayFields !== undefined && args.displayFields !== null) {
      this.displayFields = args.displayFields;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.link !== undefined && args.link !== null) {
      this.link = args.link;
    }
    if (args.thumbnail !== undefined && args.thumbnail !== null) {
      this.thumbnail = args.thumbnail;
    }
  }
};
ChatRoomAnnouncementContents.prototype = {};
ChatRoomAnnouncementContents.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.displayFields = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.link = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnail = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChatRoomAnnouncementContents.prototype.write = function(output) {
  output.writeStructBegin('ChatRoomAnnouncementContents');
  if (this.displayFields !== null && this.displayFields !== undefined) {
    output.writeFieldBegin('displayFields', Thrift.Type.I32, 1);
    output.writeI32(this.displayFields);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.link !== null && this.link !== undefined) {
    output.writeFieldBegin('link', Thrift.Type.STRING, 3);
    output.writeString(this.link);
    output.writeFieldEnd();
  }
  if (this.thumbnail !== null && this.thumbnail !== undefined) {
    output.writeFieldBegin('thumbnail', Thrift.Type.STRING, 4);
    output.writeString(this.thumbnail);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChatRoomAnnouncement = function(args) {
  this.announcementSeq = null;
  this.type = null;
  this.contents = null;
  this.creatorMid = null;
  this.createdTime = null;
  if (args) {
    if (args.announcementSeq !== undefined && args.announcementSeq !== null) {
      this.announcementSeq = args.announcementSeq;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.contents !== undefined && args.contents !== null) {
      this.contents = new ChatRoomAnnouncementContents(args.contents);
    }
    if (args.creatorMid !== undefined && args.creatorMid !== null) {
      this.creatorMid = args.creatorMid;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
  }
};
ChatRoomAnnouncement.prototype = {};
ChatRoomAnnouncement.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.announcementSeq = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.contents = new ChatRoomAnnouncementContents();
        this.contents.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.creatorMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChatRoomAnnouncement.prototype.write = function(output) {
  output.writeStructBegin('ChatRoomAnnouncement');
  if (this.announcementSeq !== null && this.announcementSeq !== undefined) {
    output.writeFieldBegin('announcementSeq', Thrift.Type.I64, 1);
    output.writeI64(this.announcementSeq);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.contents !== null && this.contents !== undefined) {
    output.writeFieldBegin('contents', Thrift.Type.STRUCT, 3);
    this.contents.write(output);
    output.writeFieldEnd();
  }
  if (this.creatorMid !== null && this.creatorMid !== undefined) {
    output.writeFieldBegin('creatorMid', Thrift.Type.STRING, 4);
    output.writeString(this.creatorMid);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 5);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ErrorExtraInfo = function(args) {
  this.preconditionFailedExtraInfo = null;
  if (args) {
    if (args.preconditionFailedExtraInfo !== undefined && args.preconditionFailedExtraInfo !== null) {
      this.preconditionFailedExtraInfo = args.preconditionFailedExtraInfo;
    }
  }
};
ErrorExtraInfo.prototype = {};
ErrorExtraInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.preconditionFailedExtraInfo = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ErrorExtraInfo.prototype.write = function(output) {
  output.writeStructBegin('ErrorExtraInfo');
  if (this.preconditionFailedExtraInfo !== null && this.preconditionFailedExtraInfo !== undefined) {
    output.writeFieldBegin('preconditionFailedExtraInfo', Thrift.Type.I32, 1);
    output.writeI32(this.preconditionFailedExtraInfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SyncRelations = function(args) {
  this.syncAll = null;
  this.syncParamContact = null;
  this.syncParamMid = null;
  if (args) {
    if (args.syncAll !== undefined && args.syncAll !== null) {
      this.syncAll = args.syncAll;
    }
    if (args.syncParamContact !== undefined && args.syncParamContact !== null) {
      this.syncParamContact = Thrift.copyList(args.syncParamContact, [SyncParamContact]);
    }
    if (args.syncParamMid !== undefined && args.syncParamMid !== null) {
      this.syncParamMid = Thrift.copyList(args.syncParamMid, [SyncParamMid]);
    }
  }
};
SyncRelations.prototype = {};
SyncRelations.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.syncAll = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.syncParamContact = [];
        var _rtmp3355 = input.readListBegin();
        var _size354 = _rtmp3355.size || 0;
        for (var _i356 = 0; _i356 < _size354; ++_i356) {
          var elem357 = null;
          elem357 = new SyncParamContact();
          elem357.read(input);
          this.syncParamContact.push(elem357);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.syncParamMid = [];
        var _rtmp3359 = input.readListBegin();
        var _size358 = _rtmp3359.size || 0;
        for (var _i360 = 0; _i360 < _size358; ++_i360) {
          var elem361 = null;
          elem361 = new SyncParamMid();
          elem361.read(input);
          this.syncParamMid.push(elem361);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncRelations.prototype.write = function(output) {
  output.writeStructBegin('SyncRelations');
  if (this.syncAll !== null && this.syncAll !== undefined) {
    output.writeFieldBegin('syncAll', Thrift.Type.BOOL, 1);
    output.writeBool(this.syncAll);
    output.writeFieldEnd();
  }
  if (this.syncParamContact !== null && this.syncParamContact !== undefined) {
    output.writeFieldBegin('syncParamContact', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.syncParamContact.length);
    for (var iter362 in this.syncParamContact) {
      if (this.syncParamContact.hasOwnProperty(iter362)) {
        iter362 = this.syncParamContact[iter362];
        iter362.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.syncParamMid !== null && this.syncParamMid !== undefined) {
    output.writeFieldBegin('syncParamMid', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.syncParamMid.length);
    for (var iter363 in this.syncParamMid) {
      if (this.syncParamMid.hasOwnProperty(iter363)) {
        iter363 = this.syncParamMid[iter363];
        iter363.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SyncScope = function(args) {
  this.syncProfile = null;
  this.syncSettings = null;
  this.syncSticker = null;
  this.syncThemeShop = null;
  this.contact = null;
  this.group = null;
  this.room = null;
  this.chat = null;
  if (args) {
    if (args.syncProfile !== undefined && args.syncProfile !== null) {
      this.syncProfile = args.syncProfile;
    }
    if (args.syncSettings !== undefined && args.syncSettings !== null) {
      this.syncSettings = args.syncSettings;
    }
    if (args.syncSticker !== undefined && args.syncSticker !== null) {
      this.syncSticker = args.syncSticker;
    }
    if (args.syncThemeShop !== undefined && args.syncThemeShop !== null) {
      this.syncThemeShop = args.syncThemeShop;
    }
    if (args.contact !== undefined && args.contact !== null) {
      this.contact = new SyncRelations(args.contact);
    }
    if (args.group !== undefined && args.group !== null) {
      this.group = new SyncRelations(args.group);
    }
    if (args.room !== undefined && args.room !== null) {
      this.room = new SyncRelations(args.room);
    }
    if (args.chat !== undefined && args.chat !== null) {
      this.chat = new SyncRelations(args.chat);
    }
  }
};
SyncScope.prototype = {};
SyncScope.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.syncProfile = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.syncSettings = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.syncSticker = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.syncThemeShop = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new SyncRelations();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.group = new SyncRelations();
        this.group.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.room = new SyncRelations();
        this.room.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.chat = new SyncRelations();
        this.chat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncScope.prototype.write = function(output) {
  output.writeStructBegin('SyncScope');
  if (this.syncProfile !== null && this.syncProfile !== undefined) {
    output.writeFieldBegin('syncProfile', Thrift.Type.BOOL, 1);
    output.writeBool(this.syncProfile);
    output.writeFieldEnd();
  }
  if (this.syncSettings !== null && this.syncSettings !== undefined) {
    output.writeFieldBegin('syncSettings', Thrift.Type.BOOL, 2);
    output.writeBool(this.syncSettings);
    output.writeFieldEnd();
  }
  if (this.syncSticker !== null && this.syncSticker !== undefined) {
    output.writeFieldBegin('syncSticker', Thrift.Type.BOOL, 3);
    output.writeBool(this.syncSticker);
    output.writeFieldEnd();
  }
  if (this.syncThemeShop !== null && this.syncThemeShop !== undefined) {
    output.writeFieldBegin('syncThemeShop', Thrift.Type.BOOL, 4);
    output.writeBool(this.syncThemeShop);
    output.writeFieldEnd();
  }
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 10);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRUCT, 11);
    this.group.write(output);
    output.writeFieldEnd();
  }
  if (this.room !== null && this.room !== undefined) {
    output.writeFieldBegin('room', Thrift.Type.STRUCT, 12);
    this.room.write(output);
    output.writeFieldEnd();
  }
  if (this.chat !== null && this.chat !== undefined) {
    output.writeFieldBegin('chat', Thrift.Type.STRUCT, 13);
    this.chat.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JoinSquareResponse = function(args) {
  this.square = null;
  this.squareAuthority = null;
  this.squareStatus = null;
  this.squareMember = null;
  this.squareFeatureSet = null;
  this.noteStatus = null;
  if (args) {
    if (args.square !== undefined && args.square !== null) {
      this.square = new Square(args.square);
    }
    if (args.squareAuthority !== undefined && args.squareAuthority !== null) {
      this.squareAuthority = new SquareAuthority(args.squareAuthority);
    }
    if (args.squareStatus !== undefined && args.squareStatus !== null) {
      this.squareStatus = new SquareStatus(args.squareStatus);
    }
    if (args.squareMember !== undefined && args.squareMember !== null) {
      this.squareMember = new SquareMember(args.squareMember);
    }
    if (args.squareFeatureSet !== undefined && args.squareFeatureSet !== null) {
      this.squareFeatureSet = new SquareFeatureSet(args.squareFeatureSet);
    }
    if (args.noteStatus !== undefined && args.noteStatus !== null) {
      this.noteStatus = new NoteStatus(args.noteStatus);
    }
  }
};
JoinSquareResponse.prototype = {};
JoinSquareResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.square = new Square();
        this.square.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareAuthority = new SquareAuthority();
        this.squareAuthority.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareStatus = new SquareStatus();
        this.squareStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareMember = new SquareMember();
        this.squareMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareFeatureSet = new SquareFeatureSet();
        this.squareFeatureSet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.noteStatus = new NoteStatus();
        this.noteStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JoinSquareResponse.prototype.write = function(output) {
  output.writeStructBegin('JoinSquareResponse');
  if (this.square !== null && this.square !== undefined) {
    output.writeFieldBegin('square', Thrift.Type.STRUCT, 1);
    this.square.write(output);
    output.writeFieldEnd();
  }
  if (this.squareAuthority !== null && this.squareAuthority !== undefined) {
    output.writeFieldBegin('squareAuthority', Thrift.Type.STRUCT, 2);
    this.squareAuthority.write(output);
    output.writeFieldEnd();
  }
  if (this.squareStatus !== null && this.squareStatus !== undefined) {
    output.writeFieldBegin('squareStatus', Thrift.Type.STRUCT, 3);
    this.squareStatus.write(output);
    output.writeFieldEnd();
  }
  if (this.squareMember !== null && this.squareMember !== undefined) {
    output.writeFieldBegin('squareMember', Thrift.Type.STRUCT, 4);
    this.squareMember.write(output);
    output.writeFieldEnd();
  }
  if (this.squareFeatureSet !== null && this.squareFeatureSet !== undefined) {
    output.writeFieldBegin('squareFeatureSet', Thrift.Type.STRUCT, 5);
    this.squareFeatureSet.write(output);
    output.writeFieldEnd();
  }
  if (this.noteStatus !== null && this.noteStatus !== undefined) {
    output.writeFieldBegin('noteStatus', Thrift.Type.STRUCT, 6);
    this.noteStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JoinSquareRequest = function(args) {
  this.squareMid = null;
  this.member = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.member !== undefined && args.member !== null) {
      this.member = new SquareMember(args.member);
    }
  }
};
JoinSquareRequest.prototype = {};
JoinSquareRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.member = new SquareMember();
        this.member.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JoinSquareRequest.prototype.write = function(output) {
  output.writeStructBegin('JoinSquareRequest');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.member !== null && this.member !== undefined) {
    output.writeFieldBegin('member', Thrift.Type.STRUCT, 3);
    this.member.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JoinSquareChatResponse = function(args) {
  this.squareChat = null;
  this.squareChatStatus = null;
  this.squareChatMember = null;
  if (args) {
    if (args.squareChat !== undefined && args.squareChat !== null) {
      this.squareChat = new SquareChat(args.squareChat);
    }
    if (args.squareChatStatus !== undefined && args.squareChatStatus !== null) {
      this.squareChatStatus = new SquareChatStatus(args.squareChatStatus);
    }
    if (args.squareChatMember !== undefined && args.squareChatMember !== null) {
      this.squareChatMember = new SquareChatMember(args.squareChatMember);
    }
  }
};
JoinSquareChatResponse.prototype = {};
JoinSquareChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChat = new SquareChat();
        this.squareChat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChatStatus = new SquareChatStatus();
        this.squareChatStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChatMember = new SquareChatMember();
        this.squareChatMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JoinSquareChatResponse.prototype.write = function(output) {
  output.writeStructBegin('JoinSquareChatResponse');
  if (this.squareChat !== null && this.squareChat !== undefined) {
    output.writeFieldBegin('squareChat', Thrift.Type.STRUCT, 1);
    this.squareChat.write(output);
    output.writeFieldEnd();
  }
  if (this.squareChatStatus !== null && this.squareChatStatus !== undefined) {
    output.writeFieldBegin('squareChatStatus', Thrift.Type.STRUCT, 2);
    this.squareChatStatus.write(output);
    output.writeFieldEnd();
  }
  if (this.squareChatMember !== null && this.squareChatMember !== undefined) {
    output.writeFieldBegin('squareChatMember', Thrift.Type.STRUCT, 3);
    this.squareChatMember.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JoinSquareChatRequest = function(args) {
  this.squareChatMid = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
  }
};
JoinSquareChatRequest.prototype = {};
JoinSquareChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JoinSquareChatRequest.prototype.write = function(output) {
  output.writeStructBegin('JoinSquareChatRequest');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageResponse = function(args) {
  this.createdSquareMessage = null;
  if (args) {
    if (args.createdSquareMessage !== undefined && args.createdSquareMessage !== null) {
      this.createdSquareMessage = new SquareMessage(args.createdSquareMessage);
    }
  }
};
SendMessageResponse.prototype = {};
SendMessageResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.createdSquareMessage = new SquareMessage();
        this.createdSquareMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageResponse.prototype.write = function(output) {
  output.writeStructBegin('SendMessageResponse');
  if (this.createdSquareMessage !== null && this.createdSquareMessage !== undefined) {
    output.writeFieldBegin('createdSquareMessage', Thrift.Type.STRUCT, 1);
    this.createdSquareMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageRequest = function(args) {
  this.reqSeq = null;
  this.squareChatMid = null;
  this.squareMessage = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.squareMessage !== undefined && args.squareMessage !== null) {
      this.squareMessage = new SquareMessage(args.squareMessage);
    }
  }
};
SendMessageRequest.prototype = {};
SendMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareMessage = new SquareMessage();
        this.squareMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('SendMessageRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.squareMessage !== null && this.squareMessage !== undefined) {
    output.writeFieldBegin('squareMessage', Thrift.Type.STRUCT, 3);
    this.squareMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MarkAsReadRequest = function(args) {
  this.squareChatMid = null;
  this.messageId = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
MarkAsReadRequest.prototype = {};
MarkAsReadRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MarkAsReadRequest.prototype.write = function(output) {
  output.writeStructBegin('MarkAsReadRequest');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 4);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MarkAsReadResponse = function(args) {
};
MarkAsReadResponse.prototype = {};
MarkAsReadResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MarkAsReadResponse.prototype.write = function(output) {
  output.writeStructBegin('MarkAsReadResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubscriptionState = function(args) {
  this.subscriptionId = null;
  this.ttlMillis = null;
  if (args) {
    if (args.subscriptionId !== undefined && args.subscriptionId !== null) {
      this.subscriptionId = args.subscriptionId;
    }
    if (args.ttlMillis !== undefined && args.ttlMillis !== null) {
      this.ttlMillis = args.ttlMillis;
    }
  }
};
SubscriptionState.prototype = {};
SubscriptionState.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.subscriptionId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.ttlMillis = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubscriptionState.prototype.write = function(output) {
  output.writeStructBegin('SubscriptionState');
  if (this.subscriptionId !== null && this.subscriptionId !== undefined) {
    output.writeFieldBegin('subscriptionId', Thrift.Type.I64, 1);
    output.writeI64(this.subscriptionId);
    output.writeFieldEnd();
  }
  if (this.ttlMillis !== null && this.ttlMillis !== undefined) {
    output.writeFieldBegin('ttlMillis', Thrift.Type.I64, 2);
    output.writeI64(this.ttlMillis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ApproveSquareMembersResponse = function(args) {
  this.approvedMembers = null;
  this.status = null;
  if (args) {
    if (args.approvedMembers !== undefined && args.approvedMembers !== null) {
      this.approvedMembers = Thrift.copyList(args.approvedMembers, [SquareMember]);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = new SquareStatus(args.status);
    }
  }
};
ApproveSquareMembersResponse.prototype = {};
ApproveSquareMembersResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.approvedMembers = [];
        var _rtmp3365 = input.readListBegin();
        var _size364 = _rtmp3365.size || 0;
        for (var _i366 = 0; _i366 < _size364; ++_i366) {
          var elem367 = null;
          elem367 = new SquareMember();
          elem367.read(input);
          this.approvedMembers.push(elem367);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new SquareStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApproveSquareMembersResponse.prototype.write = function(output) {
  output.writeStructBegin('ApproveSquareMembersResponse');
  if (this.approvedMembers !== null && this.approvedMembers !== undefined) {
    output.writeFieldBegin('approvedMembers', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.approvedMembers.length);
    for (var iter368 in this.approvedMembers) {
      if (this.approvedMembers.hasOwnProperty(iter368)) {
        iter368 = this.approvedMembers[iter368];
        iter368.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 2);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ApproveSquareMembersRequest = function(args) {
  this.squareMid = null;
  this.requestedMemberMids = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.requestedMemberMids !== undefined && args.requestedMemberMids !== null) {
      this.requestedMemberMids = Thrift.copyList(args.requestedMemberMids, [null]);
    }
  }
};
ApproveSquareMembersRequest.prototype = {};
ApproveSquareMembersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.requestedMemberMids = [];
        var _rtmp3370 = input.readListBegin();
        var _size369 = _rtmp3370.size || 0;
        for (var _i371 = 0; _i371 < _size369; ++_i371) {
          var elem372 = null;
          elem372 = input.readString().value;
          this.requestedMemberMids.push(elem372);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApproveSquareMembersRequest.prototype.write = function(output) {
  output.writeStructBegin('ApproveSquareMembersRequest');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.requestedMemberMids !== null && this.requestedMemberMids !== undefined) {
    output.writeFieldBegin('requestedMemberMids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.requestedMemberMids.length);
    for (var iter373 in this.requestedMemberMids) {
      if (this.requestedMemberMids.hasOwnProperty(iter373)) {
        iter373 = this.requestedMemberMids[iter373];
        output.writeString(iter373);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateSquareChatResponse = function(args) {
  this.squareChat = null;
  this.squareChatStatus = null;
  this.squareChatMember = null;
  if (args) {
    if (args.squareChat !== undefined && args.squareChat !== null) {
      this.squareChat = new SquareChat(args.squareChat);
    }
    if (args.squareChatStatus !== undefined && args.squareChatStatus !== null) {
      this.squareChatStatus = new SquareChatStatus(args.squareChatStatus);
    }
    if (args.squareChatMember !== undefined && args.squareChatMember !== null) {
      this.squareChatMember = new SquareChatMember(args.squareChatMember);
    }
  }
};
CreateSquareChatResponse.prototype = {};
CreateSquareChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChat = new SquareChat();
        this.squareChat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChatStatus = new SquareChatStatus();
        this.squareChatStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChatMember = new SquareChatMember();
        this.squareChatMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateSquareChatResponse.prototype.write = function(output) {
  output.writeStructBegin('CreateSquareChatResponse');
  if (this.squareChat !== null && this.squareChat !== undefined) {
    output.writeFieldBegin('squareChat', Thrift.Type.STRUCT, 1);
    this.squareChat.write(output);
    output.writeFieldEnd();
  }
  if (this.squareChatStatus !== null && this.squareChatStatus !== undefined) {
    output.writeFieldBegin('squareChatStatus', Thrift.Type.STRUCT, 2);
    this.squareChatStatus.write(output);
    output.writeFieldEnd();
  }
  if (this.squareChatMember !== null && this.squareChatMember !== undefined) {
    output.writeFieldBegin('squareChatMember', Thrift.Type.STRUCT, 3);
    this.squareChatMember.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateSquareChatRequest = function(args) {
  this.reqSeq = null;
  this.squareChat = null;
  this.squareMemberMids = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.squareChat !== undefined && args.squareChat !== null) {
      this.squareChat = new SquareChat(args.squareChat);
    }
    if (args.squareMemberMids !== undefined && args.squareMemberMids !== null) {
      this.squareMemberMids = Thrift.copyList(args.squareMemberMids, [null]);
    }
  }
};
CreateSquareChatRequest.prototype = {};
CreateSquareChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChat = new SquareChat();
        this.squareChat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.squareMemberMids = [];
        var _rtmp3375 = input.readListBegin();
        var _size374 = _rtmp3375.size || 0;
        for (var _i376 = 0; _i376 < _size374; ++_i376) {
          var elem377 = null;
          elem377 = input.readString().value;
          this.squareMemberMids.push(elem377);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateSquareChatRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateSquareChatRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.squareChat !== null && this.squareChat !== undefined) {
    output.writeFieldBegin('squareChat', Thrift.Type.STRUCT, 2);
    this.squareChat.write(output);
    output.writeFieldEnd();
  }
  if (this.squareMemberMids !== null && this.squareMemberMids !== undefined) {
    output.writeFieldBegin('squareMemberMids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.squareMemberMids.length);
    for (var iter378 in this.squareMemberMids) {
      if (this.squareMemberMids.hasOwnProperty(iter378)) {
        iter378 = this.squareMemberMids[iter378];
        output.writeString(iter378);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateSquareResponse = function(args) {
  this.square = null;
  this.creator = null;
  this.authority = null;
  this.status = null;
  if (args) {
    if (args.square !== undefined && args.square !== null) {
      this.square = new Square(args.square);
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = new SquareMember(args.creator);
    }
    if (args.authority !== undefined && args.authority !== null) {
      this.authority = new SquareAuthority(args.authority);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = new SquareStatus(args.status);
    }
  }
};
CreateSquareResponse.prototype = {};
CreateSquareResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.square = new Square();
        this.square.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.creator = new SquareMember();
        this.creator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authority = new SquareAuthority();
        this.authority.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new SquareStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateSquareResponse.prototype.write = function(output) {
  output.writeStructBegin('CreateSquareResponse');
  if (this.square !== null && this.square !== undefined) {
    output.writeFieldBegin('square', Thrift.Type.STRUCT, 1);
    this.square.write(output);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRUCT, 2);
    this.creator.write(output);
    output.writeFieldEnd();
  }
  if (this.authority !== null && this.authority !== undefined) {
    output.writeFieldBegin('authority', Thrift.Type.STRUCT, 3);
    this.authority.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 4);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateSquareRequest = function(args) {
  this.reqSeq = null;
  this.square = null;
  this.creator = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.square !== undefined && args.square !== null) {
      this.square = new Square(args.square);
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = new SquareMember(args.creator);
    }
  }
};
CreateSquareRequest.prototype = {};
CreateSquareRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.square = new Square();
        this.square.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.creator = new SquareMember();
        this.creator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateSquareRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateSquareRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.square !== null && this.square !== undefined) {
    output.writeFieldBegin('square', Thrift.Type.STRUCT, 2);
    this.square.write(output);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRUCT, 3);
    this.creator.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteSquareResponse = function(args) {
};
DeleteSquareResponse.prototype = {};
DeleteSquareResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteSquareResponse.prototype.write = function(output) {
  output.writeStructBegin('DeleteSquareResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteSquareRequest = function(args) {
  this.mid = null;
  this.revision = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
  }
};
DeleteSquareRequest.prototype = {};
DeleteSquareRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteSquareRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteSquareRequest');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 3);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DestroyMessageResponse = function(args) {
};
DestroyMessageResponse.prototype = {};
DestroyMessageResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DestroyMessageResponse.prototype.write = function(output) {
  output.writeStructBegin('DestroyMessageResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DestroyMessageRequest = function(args) {
  this.squareChatMid = null;
  this.messageId = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
DestroyMessageRequest.prototype = {};
DestroyMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DestroyMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('DestroyMessageRequest');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 4);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareChatMembersRequest = function(args) {
  this.squareChatMid = null;
  this.continuationToken = null;
  this.limit = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.continuationToken !== undefined && args.continuationToken !== null) {
      this.continuationToken = args.continuationToken;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
GetSquareChatMembersRequest.prototype = {};
GetSquareChatMembersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.continuationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareChatMembersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetSquareChatMembersRequest');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.continuationToken !== null && this.continuationToken !== undefined) {
    output.writeFieldBegin('continuationToken', Thrift.Type.STRING, 2);
    output.writeString(this.continuationToken);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 3);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareChatMembersResponse = function(args) {
  this.squareChatMembers = null;
  this.continuationToken = null;
  if (args) {
    if (args.squareChatMembers !== undefined && args.squareChatMembers !== null) {
      this.squareChatMembers = new SquareMember(args.squareChatMembers);
    }
    if (args.continuationToken !== undefined && args.continuationToken !== null) {
      this.continuationToken = args.continuationToken;
    }
  }
};
GetSquareChatMembersResponse.prototype = {};
GetSquareChatMembersResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChatMembers = new SquareMember();
        this.squareChatMembers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.continuationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareChatMembersResponse.prototype.write = function(output) {
  output.writeStructBegin('GetSquareChatMembersResponse');
  if (this.squareChatMembers !== null && this.squareChatMembers !== undefined) {
    output.writeFieldBegin('squareChatMembers', Thrift.Type.STRUCT, 1);
    this.squareChatMembers.write(output);
    output.writeFieldEnd();
  }
  if (this.continuationToken !== null && this.continuationToken !== undefined) {
    output.writeFieldBegin('continuationToken', Thrift.Type.STRING, 2);
    output.writeString(this.continuationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareChatStatusRequest = function(args) {
  this.squareChatMid = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
  }
};
GetSquareChatStatusRequest.prototype = {};
GetSquareChatStatusRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareChatStatusRequest.prototype.write = function(output) {
  output.writeStructBegin('GetSquareChatStatusRequest');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareChatStatusResponse = function(args) {
  this.chatStatus = null;
  if (args) {
    if (args.chatStatus !== undefined && args.chatStatus !== null) {
      this.chatStatus = new SquareChatStatus(args.chatStatus);
    }
  }
};
GetSquareChatStatusResponse.prototype = {};
GetSquareChatStatusResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.chatStatus = new SquareChatStatus();
        this.chatStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareChatStatusResponse.prototype.write = function(output) {
  output.writeStructBegin('GetSquareChatStatusResponse');
  if (this.chatStatus !== null && this.chatStatus !== undefined) {
    output.writeFieldBegin('chatStatus', Thrift.Type.STRUCT, 1);
    this.chatStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareChatRequest = function(args) {
  this.squareChatMid = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
  }
};
GetSquareChatRequest.prototype = {};
GetSquareChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareChatRequest.prototype.write = function(output) {
  output.writeStructBegin('GetSquareChatRequest');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareChatResponse = function(args) {
  this.squareChat = null;
  this.squareChatMember = null;
  this.squareChatStatus = null;
  if (args) {
    if (args.squareChat !== undefined && args.squareChat !== null) {
      this.squareChat = new SquareChat(args.squareChat);
    }
    if (args.squareChatMember !== undefined && args.squareChatMember !== null) {
      this.squareChatMember = new SquareChatMember(args.squareChatMember);
    }
    if (args.squareChatStatus !== undefined && args.squareChatStatus !== null) {
      this.squareChatStatus = new SquareChatStatus(args.squareChatStatus);
    }
  }
};
GetSquareChatResponse.prototype = {};
GetSquareChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChat = new SquareChat();
        this.squareChat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChatMember = new SquareChatMember();
        this.squareChatMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChatStatus = new SquareChatStatus();
        this.squareChatStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareChatResponse.prototype.write = function(output) {
  output.writeStructBegin('GetSquareChatResponse');
  if (this.squareChat !== null && this.squareChat !== undefined) {
    output.writeFieldBegin('squareChat', Thrift.Type.STRUCT, 1);
    this.squareChat.write(output);
    output.writeFieldEnd();
  }
  if (this.squareChatMember !== null && this.squareChatMember !== undefined) {
    output.writeFieldBegin('squareChatMember', Thrift.Type.STRUCT, 2);
    this.squareChatMember.write(output);
    output.writeFieldEnd();
  }
  if (this.squareChatStatus !== null && this.squareChatStatus !== undefined) {
    output.writeFieldBegin('squareChatStatus', Thrift.Type.STRUCT, 3);
    this.squareChatStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareAuthorityRequest = function(args) {
  this.squareMid = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
  }
};
GetSquareAuthorityRequest.prototype = {};
GetSquareAuthorityRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareAuthorityRequest.prototype.write = function(output) {
  output.writeStructBegin('GetSquareAuthorityRequest');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareAuthorityResponse = function(args) {
  this.authority = null;
  if (args) {
    if (args.authority !== undefined && args.authority !== null) {
      this.authority = new SquareAuthority(args.authority);
    }
  }
};
GetSquareAuthorityResponse.prototype = {};
GetSquareAuthorityResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.authority = new SquareAuthority();
        this.authority.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareAuthorityResponse.prototype.write = function(output) {
  output.writeStructBegin('GetSquareAuthorityResponse');
  if (this.authority !== null && this.authority !== undefined) {
    output.writeFieldBegin('authority', Thrift.Type.STRUCT, 1);
    this.authority.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetJoinedSquaresRequest = function(args) {
  this.continuationToken = null;
  this.limit = null;
  if (args) {
    if (args.continuationToken !== undefined && args.continuationToken !== null) {
      this.continuationToken = args.continuationToken;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
GetJoinedSquaresRequest.prototype = {};
GetJoinedSquaresRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.continuationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetJoinedSquaresRequest.prototype.write = function(output) {
  output.writeStructBegin('GetJoinedSquaresRequest');
  if (this.continuationToken !== null && this.continuationToken !== undefined) {
    output.writeFieldBegin('continuationToken', Thrift.Type.STRING, 2);
    output.writeString(this.continuationToken);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 3);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetJoinedSquaresResponse = function(args) {
  this.squares = null;
  this.members = null;
  this.authorities = null;
  this.statuses = null;
  this.continuationToken = null;
  this.noteStatuses = null;
  if (args) {
    if (args.squares !== undefined && args.squares !== null) {
      this.squares = Thrift.copyList(args.squares, [Square]);
    }
    if (args.members !== undefined && args.members !== null) {
      this.members = Thrift.copyMap(args.members, [SquareMember]);
    }
    if (args.authorities !== undefined && args.authorities !== null) {
      this.authorities = Thrift.copyMap(args.authorities, [SquareAuthority]);
    }
    if (args.statuses !== undefined && args.statuses !== null) {
      this.statuses = Thrift.copyMap(args.statuses, [SquareStatus]);
    }
    if (args.continuationToken !== undefined && args.continuationToken !== null) {
      this.continuationToken = args.continuationToken;
    }
    if (args.noteStatuses !== undefined && args.noteStatuses !== null) {
      this.noteStatuses = Thrift.copyMap(args.noteStatuses, [NoteStatus]);
    }
  }
};
GetJoinedSquaresResponse.prototype = {};
GetJoinedSquaresResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.squares = [];
        var _rtmp3380 = input.readListBegin();
        var _size379 = _rtmp3380.size || 0;
        for (var _i381 = 0; _i381 < _size379; ++_i381) {
          var elem382 = null;
          elem382 = new Square();
          elem382.read(input);
          this.squares.push(elem382);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.members = {};
        var _rtmp3384 = input.readMapBegin();
        var _size383 = _rtmp3384.size || 0;
        for (var _i385 = 0; _i385 < _size383; ++_i385) {
          if (_i385 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key386 = null;
          var val387 = null;
          key386 = input.readString().value;
          val387 = new SquareMember();
          val387.read(input);
          this.members[key386] = val387;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.authorities = {};
        var _rtmp3389 = input.readMapBegin();
        var _size388 = _rtmp3389.size || 0;
        for (var _i390 = 0; _i390 < _size388; ++_i390) {
          if (_i390 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key391 = null;
          var val392 = null;
          key391 = input.readString().value;
          val392 = new SquareAuthority();
          val392.read(input);
          this.authorities[key391] = val392;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.statuses = {};
        var _rtmp3394 = input.readMapBegin();
        var _size393 = _rtmp3394.size || 0;
        for (var _i395 = 0; _i395 < _size393; ++_i395) {
          if (_i395 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key396 = null;
          var val397 = null;
          key396 = input.readString().value;
          val397 = new SquareStatus();
          val397.read(input);
          this.statuses[key396] = val397;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.continuationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        this.noteStatuses = {};
        var _rtmp3399 = input.readMapBegin();
        var _size398 = _rtmp3399.size || 0;
        for (var _i400 = 0; _i400 < _size398; ++_i400) {
          if (_i400 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key401 = null;
          var val402 = null;
          key401 = input.readString().value;
          val402 = new NoteStatus();
          val402.read(input);
          this.noteStatuses[key401] = val402;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetJoinedSquaresResponse.prototype.write = function(output) {
  output.writeStructBegin('GetJoinedSquaresResponse');
  if (this.squares !== null && this.squares !== undefined) {
    output.writeFieldBegin('squares', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.squares.length);
    for (var iter403 in this.squares) {
      if (this.squares.hasOwnProperty(iter403)) {
        iter403 = this.squares[iter403];
        iter403.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.members !== null && this.members !== undefined) {
    output.writeFieldBegin('members', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.members));
    for (var kiter404 in this.members) {
      if (this.members.hasOwnProperty(kiter404)) {
        var viter405 = this.members[kiter404];
        output.writeString(kiter404);
        viter405.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.authorities !== null && this.authorities !== undefined) {
    output.writeFieldBegin('authorities', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.authorities));
    for (var kiter406 in this.authorities) {
      if (this.authorities.hasOwnProperty(kiter406)) {
        var viter407 = this.authorities[kiter406];
        output.writeString(kiter406);
        viter407.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.statuses !== null && this.statuses !== undefined) {
    output.writeFieldBegin('statuses', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.statuses));
    for (var kiter408 in this.statuses) {
      if (this.statuses.hasOwnProperty(kiter408)) {
        var viter409 = this.statuses[kiter408];
        output.writeString(kiter408);
        viter409.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.continuationToken !== null && this.continuationToken !== undefined) {
    output.writeFieldBegin('continuationToken', Thrift.Type.STRING, 5);
    output.writeString(this.continuationToken);
    output.writeFieldEnd();
  }
  if (this.noteStatuses !== null && this.noteStatuses !== undefined) {
    output.writeFieldBegin('noteStatuses', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.noteStatuses));
    for (var kiter410 in this.noteStatuses) {
      if (this.noteStatuses.hasOwnProperty(kiter410)) {
        var viter411 = this.noteStatuses[kiter410];
        output.writeString(kiter410);
        viter411.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetJoinableSquareChatsRequest = function(args) {
  this.squareMid = null;
  this.continuationToken = null;
  this.limit = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.continuationToken !== undefined && args.continuationToken !== null) {
      this.continuationToken = args.continuationToken;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
GetJoinableSquareChatsRequest.prototype = {};
GetJoinableSquareChatsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.continuationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetJoinableSquareChatsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetJoinableSquareChatsRequest');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.continuationToken !== null && this.continuationToken !== undefined) {
    output.writeFieldBegin('continuationToken', Thrift.Type.STRING, 10);
    output.writeString(this.continuationToken);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 11);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetJoinableSquareChatsResponse = function(args) {
  this.squareChats = null;
  this.continuationToken = null;
  this.totalSquareChatCount = null;
  this.squareChatStatuses = null;
  if (args) {
    if (args.squareChats !== undefined && args.squareChats !== null) {
      this.squareChats = Thrift.copyList(args.squareChats, [SquareChat]);
    }
    if (args.continuationToken !== undefined && args.continuationToken !== null) {
      this.continuationToken = args.continuationToken;
    }
    if (args.totalSquareChatCount !== undefined && args.totalSquareChatCount !== null) {
      this.totalSquareChatCount = args.totalSquareChatCount;
    }
    if (args.squareChatStatuses !== undefined && args.squareChatStatuses !== null) {
      this.squareChatStatuses = Thrift.copyMap(args.squareChatStatuses, [SquareChatStatus]);
    }
  }
};
GetJoinableSquareChatsResponse.prototype = {};
GetJoinableSquareChatsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.squareChats = [];
        var _rtmp3413 = input.readListBegin();
        var _size412 = _rtmp3413.size || 0;
        for (var _i414 = 0; _i414 < _size412; ++_i414) {
          var elem415 = null;
          elem415 = new SquareChat();
          elem415.read(input);
          this.squareChats.push(elem415);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.continuationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.totalSquareChatCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.squareChatStatuses = {};
        var _rtmp3417 = input.readMapBegin();
        var _size416 = _rtmp3417.size || 0;
        for (var _i418 = 0; _i418 < _size416; ++_i418) {
          if (_i418 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key419 = null;
          var val420 = null;
          key419 = input.readString().value;
          val420 = new SquareChatStatus();
          val420.read(input);
          this.squareChatStatuses[key419] = val420;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetJoinableSquareChatsResponse.prototype.write = function(output) {
  output.writeStructBegin('GetJoinableSquareChatsResponse');
  if (this.squareChats !== null && this.squareChats !== undefined) {
    output.writeFieldBegin('squareChats', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.squareChats.length);
    for (var iter421 in this.squareChats) {
      if (this.squareChats.hasOwnProperty(iter421)) {
        iter421 = this.squareChats[iter421];
        iter421.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.continuationToken !== null && this.continuationToken !== undefined) {
    output.writeFieldBegin('continuationToken', Thrift.Type.STRING, 2);
    output.writeString(this.continuationToken);
    output.writeFieldEnd();
  }
  if (this.totalSquareChatCount !== null && this.totalSquareChatCount !== undefined) {
    output.writeFieldBegin('totalSquareChatCount', Thrift.Type.I32, 3);
    output.writeI32(this.totalSquareChatCount);
    output.writeFieldEnd();
  }
  if (this.squareChatStatuses !== null && this.squareChatStatuses !== undefined) {
    output.writeFieldBegin('squareChatStatuses', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.squareChatStatuses));
    for (var kiter422 in this.squareChatStatuses) {
      if (this.squareChatStatuses.hasOwnProperty(kiter422)) {
        var viter423 = this.squareChatStatuses[kiter422];
        output.writeString(kiter422);
        viter423.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetInvitationTicketUrlRequest = function(args) {
  this.mid = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
GetInvitationTicketUrlRequest.prototype = {};
GetInvitationTicketUrlRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetInvitationTicketUrlRequest.prototype.write = function(output) {
  output.writeStructBegin('GetInvitationTicketUrlRequest');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetInvitationTicketUrlResponse = function(args) {
  this.invitationURL = null;
  if (args) {
    if (args.invitationURL !== undefined && args.invitationURL !== null) {
      this.invitationURL = args.invitationURL;
    }
  }
};
GetInvitationTicketUrlResponse.prototype = {};
GetInvitationTicketUrlResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.invitationURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetInvitationTicketUrlResponse.prototype.write = function(output) {
  output.writeStructBegin('GetInvitationTicketUrlResponse');
  if (this.invitationURL !== null && this.invitationURL !== undefined) {
    output.writeFieldBegin('invitationURL', Thrift.Type.STRING, 1);
    output.writeString(this.invitationURL);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LeaveSquareRequest = function(args) {
  this.squareMid = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
  }
};
LeaveSquareRequest.prototype = {};
LeaveSquareRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LeaveSquareRequest.prototype.write = function(output) {
  output.writeStructBegin('LeaveSquareRequest');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LeaveSquareResponse = function(args) {
};
LeaveSquareResponse.prototype = {};
LeaveSquareResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LeaveSquareResponse.prototype.write = function(output) {
  output.writeStructBegin('LeaveSquareResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LeaveSquareChatRequest = function(args) {
  this.squareChatMid = null;
  this.sayGoodbye = null;
  this.squareChatMemberRevision = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.sayGoodbye !== undefined && args.sayGoodbye !== null) {
      this.sayGoodbye = args.sayGoodbye;
    }
    if (args.squareChatMemberRevision !== undefined && args.squareChatMemberRevision !== null) {
      this.squareChatMemberRevision = args.squareChatMemberRevision;
    }
  }
};
LeaveSquareChatRequest.prototype = {};
LeaveSquareChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.sayGoodbye = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.squareChatMemberRevision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LeaveSquareChatRequest.prototype.write = function(output) {
  output.writeStructBegin('LeaveSquareChatRequest');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.sayGoodbye !== null && this.sayGoodbye !== undefined) {
    output.writeFieldBegin('sayGoodbye', Thrift.Type.BOOL, 3);
    output.writeBool(this.sayGoodbye);
    output.writeFieldEnd();
  }
  if (this.squareChatMemberRevision !== null && this.squareChatMemberRevision !== undefined) {
    output.writeFieldBegin('squareChatMemberRevision', Thrift.Type.I64, 4);
    output.writeI64(this.squareChatMemberRevision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LeaveSquareChatResponse = function(args) {
};
LeaveSquareChatResponse.prototype = {};
LeaveSquareChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LeaveSquareChatResponse.prototype.write = function(output) {
  output.writeStructBegin('LeaveSquareChatResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareMemberSearchOption = function(args) {
  this.membershipState = null;
  this.memberRoles = null;
  this.displayName = null;
  this.ableToReceiveMessage = null;
  this.ableToReceiveFriendRequest = null;
  this.chatMidToExcludeMembers = null;
  this.includingMe = null;
  if (args) {
    if (args.membershipState !== undefined && args.membershipState !== null) {
      this.membershipState = args.membershipState;
    }
    if (args.memberRoles !== undefined && args.memberRoles !== null) {
      this.memberRoles = Thrift.copyList(args.memberRoles, [null]);
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.ableToReceiveMessage !== undefined && args.ableToReceiveMessage !== null) {
      this.ableToReceiveMessage = args.ableToReceiveMessage;
    }
    if (args.ableToReceiveFriendRequest !== undefined && args.ableToReceiveFriendRequest !== null) {
      this.ableToReceiveFriendRequest = args.ableToReceiveFriendRequest;
    }
    if (args.chatMidToExcludeMembers !== undefined && args.chatMidToExcludeMembers !== null) {
      this.chatMidToExcludeMembers = args.chatMidToExcludeMembers;
    }
    if (args.includingMe !== undefined && args.includingMe !== null) {
      this.includingMe = args.includingMe;
    }
  }
};
SquareMemberSearchOption.prototype = {};
SquareMemberSearchOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.membershipState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        this.memberRoles = [];
        var _rtmp3425 = input.readSetBegin();
        var _size424 = _rtmp3425.size || 0;
        for (var _i426 = 0; _i426 < _size424; ++_i426) {
          var elem427 = null;
          elem427 = input.readI32().value;
          this.memberRoles.push(elem427);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.ableToReceiveMessage = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.ableToReceiveFriendRequest = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.chatMidToExcludeMembers = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.includingMe = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareMemberSearchOption.prototype.write = function(output) {
  output.writeStructBegin('SquareMemberSearchOption');
  if (this.membershipState !== null && this.membershipState !== undefined) {
    output.writeFieldBegin('membershipState', Thrift.Type.I32, 1);
    output.writeI32(this.membershipState);
    output.writeFieldEnd();
  }
  if (this.memberRoles !== null && this.memberRoles !== undefined) {
    output.writeFieldBegin('memberRoles', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I32, this.memberRoles.length);
    for (var iter428 in this.memberRoles) {
      if (this.memberRoles.hasOwnProperty(iter428)) {
        iter428 = this.memberRoles[iter428];
        output.writeI32(iter428);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 3);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.ableToReceiveMessage !== null && this.ableToReceiveMessage !== undefined) {
    output.writeFieldBegin('ableToReceiveMessage', Thrift.Type.I32, 4);
    output.writeI32(this.ableToReceiveMessage);
    output.writeFieldEnd();
  }
  if (this.ableToReceiveFriendRequest !== null && this.ableToReceiveFriendRequest !== undefined) {
    output.writeFieldBegin('ableToReceiveFriendRequest', Thrift.Type.I32, 5);
    output.writeI32(this.ableToReceiveFriendRequest);
    output.writeFieldEnd();
  }
  if (this.chatMidToExcludeMembers !== null && this.chatMidToExcludeMembers !== undefined) {
    output.writeFieldBegin('chatMidToExcludeMembers', Thrift.Type.STRING, 6);
    output.writeString(this.chatMidToExcludeMembers);
    output.writeFieldEnd();
  }
  if (this.includingMe !== null && this.includingMe !== undefined) {
    output.writeFieldBegin('includingMe', Thrift.Type.BOOL, 7);
    output.writeBool(this.includingMe);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchSquareMembersRequest = function(args) {
  this.squareMid = null;
  this.searchOption = null;
  this.continuationToken = null;
  this.limit = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.searchOption !== undefined && args.searchOption !== null) {
      this.searchOption = new SquareMemberSearchOption(args.searchOption);
    }
    if (args.continuationToken !== undefined && args.continuationToken !== null) {
      this.continuationToken = args.continuationToken;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
SearchSquareMembersRequest.prototype = {};
SearchSquareMembersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.searchOption = new SquareMemberSearchOption();
        this.searchOption.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.continuationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchSquareMembersRequest.prototype.write = function(output) {
  output.writeStructBegin('SearchSquareMembersRequest');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.searchOption !== null && this.searchOption !== undefined) {
    output.writeFieldBegin('searchOption', Thrift.Type.STRUCT, 3);
    this.searchOption.write(output);
    output.writeFieldEnd();
  }
  if (this.continuationToken !== null && this.continuationToken !== undefined) {
    output.writeFieldBegin('continuationToken', Thrift.Type.STRING, 4);
    output.writeString(this.continuationToken);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 5);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchSquareMembersResponse = function(args) {
  this.members = null;
  this.revision = null;
  this.continuationToken = null;
  this.totalCount = null;
  if (args) {
    if (args.members !== undefined && args.members !== null) {
      this.members = Thrift.copyList(args.members, [SquareMember]);
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.continuationToken !== undefined && args.continuationToken !== null) {
      this.continuationToken = args.continuationToken;
    }
    if (args.totalCount !== undefined && args.totalCount !== null) {
      this.totalCount = args.totalCount;
    }
  }
};
SearchSquareMembersResponse.prototype = {};
SearchSquareMembersResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.members = [];
        var _rtmp3430 = input.readListBegin();
        var _size429 = _rtmp3430.size || 0;
        for (var _i431 = 0; _i431 < _size429; ++_i431) {
          var elem432 = null;
          elem432 = new SquareMember();
          elem432.read(input);
          this.members.push(elem432);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.continuationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.totalCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchSquareMembersResponse.prototype.write = function(output) {
  output.writeStructBegin('SearchSquareMembersResponse');
  if (this.members !== null && this.members !== undefined) {
    output.writeFieldBegin('members', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.members.length);
    for (var iter433 in this.members) {
      if (this.members.hasOwnProperty(iter433)) {
        iter433 = this.members[iter433];
        iter433.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 2);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.continuationToken !== null && this.continuationToken !== undefined) {
    output.writeFieldBegin('continuationToken', Thrift.Type.STRING, 3);
    output.writeString(this.continuationToken);
    output.writeFieldEnd();
  }
  if (this.totalCount !== null && this.totalCount !== undefined) {
    output.writeFieldBegin('totalCount', Thrift.Type.I32, 4);
    output.writeI32(this.totalCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FindSquareByInvitationTicketRequest = function(args) {
  this.invitationTicket = null;
  if (args) {
    if (args.invitationTicket !== undefined && args.invitationTicket !== null) {
      this.invitationTicket = args.invitationTicket;
    }
  }
};
FindSquareByInvitationTicketRequest.prototype = {};
FindSquareByInvitationTicketRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.invitationTicket = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FindSquareByInvitationTicketRequest.prototype.write = function(output) {
  output.writeStructBegin('FindSquareByInvitationTicketRequest');
  if (this.invitationTicket !== null && this.invitationTicket !== undefined) {
    output.writeFieldBegin('invitationTicket', Thrift.Type.STRING, 2);
    output.writeString(this.invitationTicket);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FindSquareByInvitationTicketResponse = function(args) {
  this.square = null;
  this.myMembership = null;
  this.squareAuthority = null;
  this.squareStatus = null;
  if (args) {
    if (args.square !== undefined && args.square !== null) {
      this.square = new Square(args.square);
    }
    if (args.myMembership !== undefined && args.myMembership !== null) {
      this.myMembership = new SquareMember(args.myMembership);
    }
    if (args.squareAuthority !== undefined && args.squareAuthority !== null) {
      this.squareAuthority = new SquareAuthority(args.squareAuthority);
    }
    if (args.squareStatus !== undefined && args.squareStatus !== null) {
      this.squareStatus = new SquareStatus(args.squareStatus);
    }
  }
};
FindSquareByInvitationTicketResponse.prototype = {};
FindSquareByInvitationTicketResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.square = new Square();
        this.square.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.myMembership = new SquareMember();
        this.myMembership.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareAuthority = new SquareAuthority();
        this.squareAuthority.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareStatus = new SquareStatus();
        this.squareStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FindSquareByInvitationTicketResponse.prototype.write = function(output) {
  output.writeStructBegin('FindSquareByInvitationTicketResponse');
  if (this.square !== null && this.square !== undefined) {
    output.writeFieldBegin('square', Thrift.Type.STRUCT, 1);
    this.square.write(output);
    output.writeFieldEnd();
  }
  if (this.myMembership !== null && this.myMembership !== undefined) {
    output.writeFieldBegin('myMembership', Thrift.Type.STRUCT, 2);
    this.myMembership.write(output);
    output.writeFieldEnd();
  }
  if (this.squareAuthority !== null && this.squareAuthority !== undefined) {
    output.writeFieldBegin('squareAuthority', Thrift.Type.STRUCT, 3);
    this.squareAuthority.write(output);
    output.writeFieldEnd();
  }
  if (this.squareStatus !== null && this.squareStatus !== undefined) {
    output.writeFieldBegin('squareStatus', Thrift.Type.STRUCT, 4);
    this.squareStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventReceiveMessage = function(args) {
  this.squareChatMid = null;
  this.squareMessage = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.squareMessage !== undefined && args.squareMessage !== null) {
      this.squareMessage = new SquareMessage(args.squareMessage);
    }
  }
};
SquareEventReceiveMessage.prototype = {};
SquareEventReceiveMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareMessage = new SquareMessage();
        this.squareMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventReceiveMessage.prototype.write = function(output) {
  output.writeStructBegin('SquareEventReceiveMessage');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.squareMessage !== null && this.squareMessage !== undefined) {
    output.writeFieldBegin('squareMessage', Thrift.Type.STRUCT, 2);
    this.squareMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventSendMessage = function(args) {
  this.squareChatMid = null;
  this.squareMessage = null;
  this.reqSeq = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.squareMessage !== undefined && args.squareMessage !== null) {
      this.squareMessage = new SquareMessage(args.squareMessage);
    }
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
  }
};
SquareEventSendMessage.prototype = {};
SquareEventSendMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareMessage = new SquareMessage();
        this.squareMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventSendMessage.prototype.write = function(output) {
  output.writeStructBegin('SquareEventSendMessage');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.squareMessage !== null && this.squareMessage !== undefined) {
    output.writeFieldBegin('squareMessage', Thrift.Type.STRUCT, 2);
    this.squareMessage.write(output);
    output.writeFieldEnd();
  }
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 3);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedJoinSquareChat = function(args) {
  this.squareChatMid = null;
  this.joinedMember = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.joinedMember !== undefined && args.joinedMember !== null) {
      this.joinedMember = new SquareMember(args.joinedMember);
    }
  }
};
SquareEventNotifiedJoinSquareChat.prototype = {};
SquareEventNotifiedJoinSquareChat.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.joinedMember = new SquareMember();
        this.joinedMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedJoinSquareChat.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedJoinSquareChat');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.joinedMember !== null && this.joinedMember !== undefined) {
    output.writeFieldBegin('joinedMember', Thrift.Type.STRUCT, 2);
    this.joinedMember.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedInviteIntoSquareChat = function(args) {
  this.squareChatMid = null;
  this.invitees = null;
  this.invitor = null;
  this.invitorRelation = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.invitees !== undefined && args.invitees !== null) {
      this.invitees = Thrift.copyList(args.invitees, [SquareMember]);
    }
    if (args.invitor !== undefined && args.invitor !== null) {
      this.invitor = new SquareMember(args.invitor);
    }
    if (args.invitorRelation !== undefined && args.invitorRelation !== null) {
      this.invitorRelation = new SquareMemberRelation(args.invitorRelation);
    }
  }
};
SquareEventNotifiedInviteIntoSquareChat.prototype = {};
SquareEventNotifiedInviteIntoSquareChat.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.invitees = [];
        var _rtmp3435 = input.readListBegin();
        var _size434 = _rtmp3435.size || 0;
        for (var _i436 = 0; _i436 < _size434; ++_i436) {
          var elem437 = null;
          elem437 = new SquareMember();
          elem437.read(input);
          this.invitees.push(elem437);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invitor = new SquareMember();
        this.invitor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.invitorRelation = new SquareMemberRelation();
        this.invitorRelation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedInviteIntoSquareChat.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedInviteIntoSquareChat');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.invitees !== null && this.invitees !== undefined) {
    output.writeFieldBegin('invitees', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.invitees.length);
    for (var iter438 in this.invitees) {
      if (this.invitees.hasOwnProperty(iter438)) {
        iter438 = this.invitees[iter438];
        iter438.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.invitor !== null && this.invitor !== undefined) {
    output.writeFieldBegin('invitor', Thrift.Type.STRUCT, 3);
    this.invitor.write(output);
    output.writeFieldEnd();
  }
  if (this.invitorRelation !== null && this.invitorRelation !== undefined) {
    output.writeFieldBegin('invitorRelation', Thrift.Type.STRUCT, 4);
    this.invitorRelation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedLeaveSquareChat = function(args) {
  this.squareChatMid = null;
  this.squareMemberMid = null;
  this.sayGoodbye = null;
  this.squareMember = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.squareMemberMid !== undefined && args.squareMemberMid !== null) {
      this.squareMemberMid = args.squareMemberMid;
    }
    if (args.sayGoodbye !== undefined && args.sayGoodbye !== null) {
      this.sayGoodbye = args.sayGoodbye;
    }
    if (args.squareMember !== undefined && args.squareMember !== null) {
      this.squareMember = new SquareMember(args.squareMember);
    }
  }
};
SquareEventNotifiedLeaveSquareChat.prototype = {};
SquareEventNotifiedLeaveSquareChat.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMemberMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.sayGoodbye = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareMember = new SquareMember();
        this.squareMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedLeaveSquareChat.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedLeaveSquareChat');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.squareMemberMid !== null && this.squareMemberMid !== undefined) {
    output.writeFieldBegin('squareMemberMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMemberMid);
    output.writeFieldEnd();
  }
  if (this.sayGoodbye !== null && this.sayGoodbye !== undefined) {
    output.writeFieldBegin('sayGoodbye', Thrift.Type.BOOL, 3);
    output.writeBool(this.sayGoodbye);
    output.writeFieldEnd();
  }
  if (this.squareMember !== null && this.squareMember !== undefined) {
    output.writeFieldBegin('squareMember', Thrift.Type.STRUCT, 4);
    this.squareMember.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedDestroyMessage = function(args) {
  this.squareChatMid = null;
  this.messageId = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
SquareEventNotifiedDestroyMessage.prototype = {};
SquareEventNotifiedDestroyMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedDestroyMessage.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedDestroyMessage');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 3);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedMarkAsRead = function(args) {
  this.squareChatMid = null;
  this.sMemberMid = null;
  this.messageId = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.sMemberMid !== undefined && args.sMemberMid !== null) {
      this.sMemberMid = args.sMemberMid;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
SquareEventNotifiedMarkAsRead.prototype = {};
SquareEventNotifiedMarkAsRead.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sMemberMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedMarkAsRead.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedMarkAsRead');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.sMemberMid !== null && this.sMemberMid !== undefined) {
    output.writeFieldBegin('sMemberMid', Thrift.Type.STRING, 2);
    output.writeString(this.sMemberMid);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 4);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareMemberProfile = function(args) {
  this.squareChatMid = null;
  this.squareMember = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.squareMember !== undefined && args.squareMember !== null) {
      this.squareMember = new SquareMember(args.squareMember);
    }
  }
};
SquareEventNotifiedUpdateSquareMemberProfile.prototype = {};
SquareEventNotifiedUpdateSquareMemberProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareMember = new SquareMember();
        this.squareMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareMemberProfile.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedUpdateSquareMemberProfile');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.squareMember !== null && this.squareMember !== undefined) {
    output.writeFieldBegin('squareMember', Thrift.Type.STRUCT, 2);
    this.squareMember.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedKickoutFromSquare = function(args) {
  this.squareChatMid = null;
  this.kickees = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.kickees !== undefined && args.kickees !== null) {
      this.kickees = Thrift.copyList(args.kickees, [SquareMember]);
    }
  }
};
SquareEventNotifiedKickoutFromSquare.prototype = {};
SquareEventNotifiedKickoutFromSquare.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.kickees = [];
        var _rtmp3440 = input.readListBegin();
        var _size439 = _rtmp3440.size || 0;
        for (var _i441 = 0; _i441 < _size439; ++_i441) {
          var elem442 = null;
          elem442 = new SquareMember();
          elem442.read(input);
          this.kickees.push(elem442);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedKickoutFromSquare.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedKickoutFromSquare');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.kickees !== null && this.kickees !== undefined) {
    output.writeFieldBegin('kickees', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.kickees.length);
    for (var iter443 in this.kickees) {
      if (this.kickees.hasOwnProperty(iter443)) {
        iter443 = this.kickees[iter443];
        iter443.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedShutdownSquare = function(args) {
  this.squareChatMid = null;
  this.square = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.square !== undefined && args.square !== null) {
      this.square = new Square(args.square);
    }
  }
};
SquareEventNotifiedShutdownSquare.prototype = {};
SquareEventNotifiedShutdownSquare.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.square = new Square();
        this.square.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedShutdownSquare.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedShutdownSquare');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.square !== null && this.square !== undefined) {
    output.writeFieldBegin('square', Thrift.Type.STRUCT, 2);
    this.square.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedDeleteSquareChat = function(args) {
  this.squareChat = null;
  if (args) {
    if (args.squareChat !== undefined && args.squareChat !== null) {
      this.squareChat = new SquareChat(args.squareChat);
    }
  }
};
SquareEventNotifiedDeleteSquareChat.prototype = {};
SquareEventNotifiedDeleteSquareChat.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChat = new SquareChat();
        this.squareChat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedDeleteSquareChat.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedDeleteSquareChat');
  if (this.squareChat !== null && this.squareChat !== undefined) {
    output.writeFieldBegin('squareChat', Thrift.Type.STRUCT, 1);
    this.squareChat.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareChatProfileName = function(args) {
  this.squareChatMid = null;
  this.editor = null;
  this.updatedChatName = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.editor !== undefined && args.editor !== null) {
      this.editor = new SquareMember(args.editor);
    }
    if (args.updatedChatName !== undefined && args.updatedChatName !== null) {
      this.updatedChatName = args.updatedChatName;
    }
  }
};
SquareEventNotifiedUpdateSquareChatProfileName.prototype = {};
SquareEventNotifiedUpdateSquareChatProfileName.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.editor = new SquareMember();
        this.editor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.updatedChatName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareChatProfileName.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedUpdateSquareChatProfileName');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.editor !== null && this.editor !== undefined) {
    output.writeFieldBegin('editor', Thrift.Type.STRUCT, 2);
    this.editor.write(output);
    output.writeFieldEnd();
  }
  if (this.updatedChatName !== null && this.updatedChatName !== undefined) {
    output.writeFieldBegin('updatedChatName', Thrift.Type.STRING, 3);
    output.writeString(this.updatedChatName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareChatProfileImage = function(args) {
  this.squareChatMid = null;
  this.editor = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.editor !== undefined && args.editor !== null) {
      this.editor = new SquareMember(args.editor);
    }
  }
};
SquareEventNotifiedUpdateSquareChatProfileImage.prototype = {};
SquareEventNotifiedUpdateSquareChatProfileImage.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.editor = new SquareMember();
        this.editor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareChatProfileImage.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedUpdateSquareChatProfileImage');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.editor !== null && this.editor !== undefined) {
    output.writeFieldBegin('editor', Thrift.Type.STRUCT, 2);
    this.editor.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareChatStatus = function(args) {
  this.squareChatMid = null;
  this.statusWithoutMessage = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.statusWithoutMessage !== undefined && args.statusWithoutMessage !== null) {
      this.statusWithoutMessage = new SquareChatStatusWithoutMessage(args.statusWithoutMessage);
    }
  }
};
SquareEventNotifiedUpdateSquareChatStatus.prototype = {};
SquareEventNotifiedUpdateSquareChatStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.statusWithoutMessage = new SquareChatStatusWithoutMessage();
        this.statusWithoutMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareChatStatus.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedUpdateSquareChatStatus');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.statusWithoutMessage !== null && this.statusWithoutMessage !== undefined) {
    output.writeFieldBegin('statusWithoutMessage', Thrift.Type.STRUCT, 2);
    this.statusWithoutMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareStatus = function(args) {
  this.squareMid = null;
  this.squareStatus = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.squareStatus !== undefined && args.squareStatus !== null) {
      this.squareStatus = new SquareStatus(args.squareStatus);
    }
  }
};
SquareEventNotifiedUpdateSquareStatus.prototype = {};
SquareEventNotifiedUpdateSquareStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareStatus = new SquareStatus();
        this.squareStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareStatus.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedUpdateSquareStatus');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.squareStatus !== null && this.squareStatus !== undefined) {
    output.writeFieldBegin('squareStatus', Thrift.Type.STRUCT, 2);
    this.squareStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedCreateSquareMember = function(args) {
  this.square = null;
  this.squareAuthority = null;
  this.squareStatus = null;
  this.squareMember = null;
  this.squareFeatureSet = null;
  if (args) {
    if (args.square !== undefined && args.square !== null) {
      this.square = new Square(args.square);
    }
    if (args.squareAuthority !== undefined && args.squareAuthority !== null) {
      this.squareAuthority = new SquareAuthority(args.squareAuthority);
    }
    if (args.squareStatus !== undefined && args.squareStatus !== null) {
      this.squareStatus = new SquareStatus(args.squareStatus);
    }
    if (args.squareMember !== undefined && args.squareMember !== null) {
      this.squareMember = new SquareMember(args.squareMember);
    }
    if (args.squareFeatureSet !== undefined && args.squareFeatureSet !== null) {
      this.squareFeatureSet = new SquareFeatureSet(args.squareFeatureSet);
    }
  }
};
SquareEventNotifiedCreateSquareMember.prototype = {};
SquareEventNotifiedCreateSquareMember.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.square = new Square();
        this.square.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareAuthority = new SquareAuthority();
        this.squareAuthority.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareStatus = new SquareStatus();
        this.squareStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareMember = new SquareMember();
        this.squareMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareFeatureSet = new SquareFeatureSet();
        this.squareFeatureSet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedCreateSquareMember.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedCreateSquareMember');
  if (this.square !== null && this.square !== undefined) {
    output.writeFieldBegin('square', Thrift.Type.STRUCT, 1);
    this.square.write(output);
    output.writeFieldEnd();
  }
  if (this.squareAuthority !== null && this.squareAuthority !== undefined) {
    output.writeFieldBegin('squareAuthority', Thrift.Type.STRUCT, 2);
    this.squareAuthority.write(output);
    output.writeFieldEnd();
  }
  if (this.squareStatus !== null && this.squareStatus !== undefined) {
    output.writeFieldBegin('squareStatus', Thrift.Type.STRUCT, 3);
    this.squareStatus.write(output);
    output.writeFieldEnd();
  }
  if (this.squareMember !== null && this.squareMember !== undefined) {
    output.writeFieldBegin('squareMember', Thrift.Type.STRUCT, 4);
    this.squareMember.write(output);
    output.writeFieldEnd();
  }
  if (this.squareFeatureSet !== null && this.squareFeatureSet !== undefined) {
    output.writeFieldBegin('squareFeatureSet', Thrift.Type.STRUCT, 5);
    this.squareFeatureSet.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedCreateSquareChatMember = function(args) {
  this.squareChatMid = null;
  this.squareMemberMid = null;
  this.squareChatMember = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.squareMemberMid !== undefined && args.squareMemberMid !== null) {
      this.squareMemberMid = args.squareMemberMid;
    }
    if (args.squareChatMember !== undefined && args.squareChatMember !== null) {
      this.squareChatMember = new SquareChatMember(args.squareChatMember);
    }
  }
};
SquareEventNotifiedCreateSquareChatMember.prototype = {};
SquareEventNotifiedCreateSquareChatMember.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMemberMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChatMember = new SquareChatMember();
        this.squareChatMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedCreateSquareChatMember.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedCreateSquareChatMember');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.squareMemberMid !== null && this.squareMemberMid !== undefined) {
    output.writeFieldBegin('squareMemberMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMemberMid);
    output.writeFieldEnd();
  }
  if (this.squareChatMember !== null && this.squareChatMember !== undefined) {
    output.writeFieldBegin('squareChatMember', Thrift.Type.STRUCT, 3);
    this.squareChatMember.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareMemberRelation = function(args) {
  this.squareMid = null;
  this.myMemberMid = null;
  this.targetSquareMemberMid = null;
  this.squareMemberRelation = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.myMemberMid !== undefined && args.myMemberMid !== null) {
      this.myMemberMid = args.myMemberMid;
    }
    if (args.targetSquareMemberMid !== undefined && args.targetSquareMemberMid !== null) {
      this.targetSquareMemberMid = args.targetSquareMemberMid;
    }
    if (args.squareMemberRelation !== undefined && args.squareMemberRelation !== null) {
      this.squareMemberRelation = new SquareMemberRelation(args.squareMemberRelation);
    }
  }
};
SquareEventNotifiedUpdateSquareMemberRelation.prototype = {};
SquareEventNotifiedUpdateSquareMemberRelation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.myMemberMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.targetSquareMemberMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareMemberRelation = new SquareMemberRelation();
        this.squareMemberRelation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareMemberRelation.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedUpdateSquareMemberRelation');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.myMemberMid !== null && this.myMemberMid !== undefined) {
    output.writeFieldBegin('myMemberMid', Thrift.Type.STRING, 2);
    output.writeString(this.myMemberMid);
    output.writeFieldEnd();
  }
  if (this.targetSquareMemberMid !== null && this.targetSquareMemberMid !== undefined) {
    output.writeFieldBegin('targetSquareMemberMid', Thrift.Type.STRING, 3);
    output.writeString(this.targetSquareMemberMid);
    output.writeFieldEnd();
  }
  if (this.squareMemberRelation !== null && this.squareMemberRelation !== undefined) {
    output.writeFieldBegin('squareMemberRelation', Thrift.Type.STRUCT, 4);
    this.squareMemberRelation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedUpdateSquare = function(args) {
  this.squareMid = null;
  this.square = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.square !== undefined && args.square !== null) {
      this.square = new Square(args.square);
    }
  }
};
SquareEventNotifiedUpdateSquare.prototype = {};
SquareEventNotifiedUpdateSquare.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.square = new Square();
        this.square.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedUpdateSquare.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedUpdateSquare');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.square !== null && this.square !== undefined) {
    output.writeFieldBegin('square', Thrift.Type.STRUCT, 2);
    this.square.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareMember = function(args) {
  this.squareMid = null;
  this.squareMemberMid = null;
  this.squareMember = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.squareMemberMid !== undefined && args.squareMemberMid !== null) {
      this.squareMemberMid = args.squareMemberMid;
    }
    if (args.squareMember !== undefined && args.squareMember !== null) {
      this.squareMember = new SquareMember(args.squareMember);
    }
  }
};
SquareEventNotifiedUpdateSquareMember.prototype = {};
SquareEventNotifiedUpdateSquareMember.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMemberMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareMember = new SquareMember();
        this.squareMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareMember.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedUpdateSquareMember');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.squareMemberMid !== null && this.squareMemberMid !== undefined) {
    output.writeFieldBegin('squareMemberMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMemberMid);
    output.writeFieldEnd();
  }
  if (this.squareMember !== null && this.squareMember !== undefined) {
    output.writeFieldBegin('squareMember', Thrift.Type.STRUCT, 3);
    this.squareMember.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareChat = function(args) {
  this.squareMid = null;
  this.squareChatMid = null;
  this.squareChat = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.squareChat !== undefined && args.squareChat !== null) {
      this.squareChat = new SquareChat(args.squareChat);
    }
  }
};
SquareEventNotifiedUpdateSquareChat.prototype = {};
SquareEventNotifiedUpdateSquareChat.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChat = new SquareChat();
        this.squareChat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareChat.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedUpdateSquareChat');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.squareChat !== null && this.squareChat !== undefined) {
    output.writeFieldBegin('squareChat', Thrift.Type.STRUCT, 3);
    this.squareChat.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotificationJoinRequest = function(args) {
  this.squareMid = null;
  this.squareName = null;
  this.requestMemberName = null;
  this.profileImageObsHash = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.squareName !== undefined && args.squareName !== null) {
      this.squareName = args.squareName;
    }
    if (args.requestMemberName !== undefined && args.requestMemberName !== null) {
      this.requestMemberName = args.requestMemberName;
    }
    if (args.profileImageObsHash !== undefined && args.profileImageObsHash !== null) {
      this.profileImageObsHash = args.profileImageObsHash;
    }
  }
};
SquareEventNotificationJoinRequest.prototype = {};
SquareEventNotificationJoinRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.requestMemberName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.profileImageObsHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotificationJoinRequest.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotificationJoinRequest');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.squareName !== null && this.squareName !== undefined) {
    output.writeFieldBegin('squareName', Thrift.Type.STRING, 2);
    output.writeString(this.squareName);
    output.writeFieldEnd();
  }
  if (this.requestMemberName !== null && this.requestMemberName !== undefined) {
    output.writeFieldBegin('requestMemberName', Thrift.Type.STRING, 3);
    output.writeString(this.requestMemberName);
    output.writeFieldEnd();
  }
  if (this.profileImageObsHash !== null && this.profileImageObsHash !== undefined) {
    output.writeFieldBegin('profileImageObsHash', Thrift.Type.STRING, 4);
    output.writeString(this.profileImageObsHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotificationMemberUpdate = function(args) {
  this.squareMid = null;
  this.squareName = null;
  this.profileImageObsHash = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.squareName !== undefined && args.squareName !== null) {
      this.squareName = args.squareName;
    }
    if (args.profileImageObsHash !== undefined && args.profileImageObsHash !== null) {
      this.profileImageObsHash = args.profileImageObsHash;
    }
  }
};
SquareEventNotificationMemberUpdate.prototype = {};
SquareEventNotificationMemberUpdate.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.profileImageObsHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotificationMemberUpdate.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotificationMemberUpdate');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.squareName !== null && this.squareName !== undefined) {
    output.writeFieldBegin('squareName', Thrift.Type.STRING, 2);
    output.writeString(this.squareName);
    output.writeFieldEnd();
  }
  if (this.profileImageObsHash !== null && this.profileImageObsHash !== undefined) {
    output.writeFieldBegin('profileImageObsHash', Thrift.Type.STRING, 3);
    output.writeString(this.profileImageObsHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotificationSquareDelete = function(args) {
  this.squareMid = null;
  this.squareName = null;
  this.profileImageObsHash = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.squareName !== undefined && args.squareName !== null) {
      this.squareName = args.squareName;
    }
    if (args.profileImageObsHash !== undefined && args.profileImageObsHash !== null) {
      this.profileImageObsHash = args.profileImageObsHash;
    }
  }
};
SquareEventNotificationSquareDelete.prototype = {};
SquareEventNotificationSquareDelete.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.profileImageObsHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotificationSquareDelete.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotificationSquareDelete');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.squareName !== null && this.squareName !== undefined) {
    output.writeFieldBegin('squareName', Thrift.Type.STRING, 2);
    output.writeString(this.squareName);
    output.writeFieldEnd();
  }
  if (this.profileImageObsHash !== null && this.profileImageObsHash !== undefined) {
    output.writeFieldBegin('profileImageObsHash', Thrift.Type.STRING, 3);
    output.writeString(this.profileImageObsHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotificationSquareChatDelete = function(args) {
  this.squareChatMid = null;
  this.squareChatName = null;
  this.profileImageObsHash = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.squareChatName !== undefined && args.squareChatName !== null) {
      this.squareChatName = args.squareChatName;
    }
    if (args.profileImageObsHash !== undefined && args.profileImageObsHash !== null) {
      this.profileImageObsHash = args.profileImageObsHash;
    }
  }
};
SquareEventNotificationSquareChatDelete.prototype = {};
SquareEventNotificationSquareChatDelete.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.profileImageObsHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotificationSquareChatDelete.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotificationSquareChatDelete');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.squareChatName !== null && this.squareChatName !== undefined) {
    output.writeFieldBegin('squareChatName', Thrift.Type.STRING, 2);
    output.writeString(this.squareChatName);
    output.writeFieldEnd();
  }
  if (this.profileImageObsHash !== null && this.profileImageObsHash !== undefined) {
    output.writeFieldBegin('profileImageObsHash', Thrift.Type.STRING, 3);
    output.writeString(this.profileImageObsHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotificationMessage = function(args) {
  this.squareChatMid = null;
  this.squareMessage = null;
  this.senderDisplayName = null;
  this.unreadCount = null;
  this.requiredToFetchChatEvents = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.squareMessage !== undefined && args.squareMessage !== null) {
      this.squareMessage = new SquareMessage(args.squareMessage);
    }
    if (args.senderDisplayName !== undefined && args.senderDisplayName !== null) {
      this.senderDisplayName = args.senderDisplayName;
    }
    if (args.unreadCount !== undefined && args.unreadCount !== null) {
      this.unreadCount = args.unreadCount;
    }
    if (args.requiredToFetchChatEvents !== undefined && args.requiredToFetchChatEvents !== null) {
      this.requiredToFetchChatEvents = args.requiredToFetchChatEvents;
    }
  }
};
SquareEventNotificationMessage.prototype = {};
SquareEventNotificationMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareMessage = new SquareMessage();
        this.squareMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.senderDisplayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.unreadCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.requiredToFetchChatEvents = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotificationMessage.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotificationMessage');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.squareMessage !== null && this.squareMessage !== undefined) {
    output.writeFieldBegin('squareMessage', Thrift.Type.STRUCT, 2);
    this.squareMessage.write(output);
    output.writeFieldEnd();
  }
  if (this.senderDisplayName !== null && this.senderDisplayName !== undefined) {
    output.writeFieldBegin('senderDisplayName', Thrift.Type.STRING, 3);
    output.writeString(this.senderDisplayName);
    output.writeFieldEnd();
  }
  if (this.unreadCount !== null && this.unreadCount !== undefined) {
    output.writeFieldBegin('unreadCount', Thrift.Type.I32, 4);
    output.writeI32(this.unreadCount);
    output.writeFieldEnd();
  }
  if (this.requiredToFetchChatEvents !== null && this.requiredToFetchChatEvents !== undefined) {
    output.writeFieldBegin('requiredToFetchChatEvents', Thrift.Type.BOOL, 5);
    output.writeBool(this.requiredToFetchChatEvents);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareChatMember = function(args) {
  this.squareChatMid = null;
  this.squareMemberMid = null;
  this.squareChatMember = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.squareMemberMid !== undefined && args.squareMemberMid !== null) {
      this.squareMemberMid = args.squareMemberMid;
    }
    if (args.squareChatMember !== undefined && args.squareChatMember !== null) {
      this.squareChatMember = new SquareChatMember(args.squareChatMember);
    }
  }
};
SquareEventNotifiedUpdateSquareChatMember.prototype = {};
SquareEventNotifiedUpdateSquareChatMember.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMemberMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChatMember = new SquareChatMember();
        this.squareChatMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareChatMember.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedUpdateSquareChatMember');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.squareMemberMid !== null && this.squareMemberMid !== undefined) {
    output.writeFieldBegin('squareMemberMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMemberMid);
    output.writeFieldEnd();
  }
  if (this.squareChatMember !== null && this.squareChatMember !== undefined) {
    output.writeFieldBegin('squareChatMember', Thrift.Type.STRUCT, 3);
    this.squareChatMember.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareAuthority = function(args) {
  this.squareMid = null;
  this.squareAuthority = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.squareAuthority !== undefined && args.squareAuthority !== null) {
      this.squareAuthority = new SquareAuthority(args.squareAuthority);
    }
  }
};
SquareEventNotifiedUpdateSquareAuthority.prototype = {};
SquareEventNotifiedUpdateSquareAuthority.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareAuthority = new SquareAuthority();
        this.squareAuthority.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareAuthority.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedUpdateSquareAuthority');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.squareAuthority !== null && this.squareAuthority !== undefined) {
    output.writeFieldBegin('squareAuthority', Thrift.Type.STRUCT, 2);
    this.squareAuthority.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareFeatureSet = function(args) {
  this.squareFeatureSet = null;
  if (args) {
    if (args.squareFeatureSet !== undefined && args.squareFeatureSet !== null) {
      this.squareFeatureSet = new SquareFeatureSet(args.squareFeatureSet);
    }
  }
};
SquareEventNotifiedUpdateSquareFeatureSet.prototype = {};
SquareEventNotifiedUpdateSquareFeatureSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareFeatureSet = new SquareFeatureSet();
        this.squareFeatureSet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventNotifiedUpdateSquareFeatureSet.prototype.write = function(output) {
  output.writeStructBegin('SquareEventNotifiedUpdateSquareFeatureSet');
  if (this.squareFeatureSet !== null && this.squareFeatureSet !== undefined) {
    output.writeFieldBegin('squareFeatureSet', Thrift.Type.STRUCT, 1);
    this.squareFeatureSet.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEventPayload = function(args) {
  this.receiveMessage = null;
  this.sendMessage = null;
  this.notifiedJoinSquareChat = null;
  this.notifiedInviteIntoSquareChat = null;
  this.notifiedLeaveSquareChat = null;
  this.notifiedDestroyMessage = null;
  this.notifiedMarkAsRead = null;
  this.notifiedUpdateSquareMemberProfile = null;
  this.notifiedKickoutFromSquare = null;
  this.notifiedShutdownSquare = null;
  this.notifiedDeleteSquareChat = null;
  this.notifiedUpdateSquareChatProfileName = null;
  this.notifiedUpdateSquareChatProfileImage = null;
  this.notifiedUpdateSquareStatus = null;
  this.notifiedUpdateSquareChatStatus = null;
  this.notifiedCreateSquareMember = null;
  this.notifiedCreateSquareChatMember = null;
  this.notifiedUpdateSquareMemberRelation = null;
  this.notifiedUpdateSquare = null;
  this.notifiedUpdateSquareMember = null;
  this.notifiedUpdateSquareChat = null;
  this.notificationJoinRequest = null;
  this.notificationJoined = null;
  this.notificationPromoteCoadmin = null;
  this.notificationPromoteAdmin = null;
  this.notificationDemoteMember = null;
  this.notificationKickedOut = null;
  this.notificationSquareDelete = null;
  this.notificationSquareChatDelete = null;
  this.notificationMessage = null;
  this.notifiedUpdateSquareChatMember = null;
  this.notifiedUpdateSquareAuthority = null;
  this.notifiedUpdateSquareFeatureSet = null;
  if (args) {
    if (args.receiveMessage !== undefined && args.receiveMessage !== null) {
      this.receiveMessage = new SquareEventReceiveMessage(args.receiveMessage);
    }
    if (args.sendMessage !== undefined && args.sendMessage !== null) {
      this.sendMessage = new SquareEventSendMessage(args.sendMessage);
    }
    if (args.notifiedJoinSquareChat !== undefined && args.notifiedJoinSquareChat !== null) {
      this.notifiedJoinSquareChat = new SquareEventNotifiedJoinSquareChat(args.notifiedJoinSquareChat);
    }
    if (args.notifiedInviteIntoSquareChat !== undefined && args.notifiedInviteIntoSquareChat !== null) {
      this.notifiedInviteIntoSquareChat = new SquareEventNotifiedInviteIntoSquareChat(args.notifiedInviteIntoSquareChat);
    }
    if (args.notifiedLeaveSquareChat !== undefined && args.notifiedLeaveSquareChat !== null) {
      this.notifiedLeaveSquareChat = new SquareEventNotifiedLeaveSquareChat(args.notifiedLeaveSquareChat);
    }
    if (args.notifiedDestroyMessage !== undefined && args.notifiedDestroyMessage !== null) {
      this.notifiedDestroyMessage = new SquareEventNotifiedDestroyMessage(args.notifiedDestroyMessage);
    }
    if (args.notifiedMarkAsRead !== undefined && args.notifiedMarkAsRead !== null) {
      this.notifiedMarkAsRead = new SquareEventNotifiedMarkAsRead(args.notifiedMarkAsRead);
    }
    if (args.notifiedUpdateSquareMemberProfile !== undefined && args.notifiedUpdateSquareMemberProfile !== null) {
      this.notifiedUpdateSquareMemberProfile = new SquareEventNotifiedUpdateSquareMemberProfile(args.notifiedUpdateSquareMemberProfile);
    }
    if (args.notifiedKickoutFromSquare !== undefined && args.notifiedKickoutFromSquare !== null) {
      this.notifiedKickoutFromSquare = new SquareEventNotifiedKickoutFromSquare(args.notifiedKickoutFromSquare);
    }
    if (args.notifiedShutdownSquare !== undefined && args.notifiedShutdownSquare !== null) {
      this.notifiedShutdownSquare = new SquareEventNotifiedShutdownSquare(args.notifiedShutdownSquare);
    }
    if (args.notifiedDeleteSquareChat !== undefined && args.notifiedDeleteSquareChat !== null) {
      this.notifiedDeleteSquareChat = new SquareEventNotifiedDeleteSquareChat(args.notifiedDeleteSquareChat);
    }
    if (args.notifiedUpdateSquareChatProfileName !== undefined && args.notifiedUpdateSquareChatProfileName !== null) {
      this.notifiedUpdateSquareChatProfileName = new SquareEventNotifiedUpdateSquareChatProfileName(args.notifiedUpdateSquareChatProfileName);
    }
    if (args.notifiedUpdateSquareChatProfileImage !== undefined && args.notifiedUpdateSquareChatProfileImage !== null) {
      this.notifiedUpdateSquareChatProfileImage = new SquareEventNotifiedUpdateSquareChatProfileImage(args.notifiedUpdateSquareChatProfileImage);
    }
    if (args.notifiedUpdateSquareStatus !== undefined && args.notifiedUpdateSquareStatus !== null) {
      this.notifiedUpdateSquareStatus = new SquareEventNotifiedUpdateSquareStatus(args.notifiedUpdateSquareStatus);
    }
    if (args.notifiedUpdateSquareChatStatus !== undefined && args.notifiedUpdateSquareChatStatus !== null) {
      this.notifiedUpdateSquareChatStatus = new SquareEventNotifiedUpdateSquareChatStatus(args.notifiedUpdateSquareChatStatus);
    }
    if (args.notifiedCreateSquareMember !== undefined && args.notifiedCreateSquareMember !== null) {
      this.notifiedCreateSquareMember = new SquareEventNotifiedCreateSquareMember(args.notifiedCreateSquareMember);
    }
    if (args.notifiedCreateSquareChatMember !== undefined && args.notifiedCreateSquareChatMember !== null) {
      this.notifiedCreateSquareChatMember = new SquareEventNotifiedCreateSquareChatMember(args.notifiedCreateSquareChatMember);
    }
    if (args.notifiedUpdateSquareMemberRelation !== undefined && args.notifiedUpdateSquareMemberRelation !== null) {
      this.notifiedUpdateSquareMemberRelation = new SquareEventNotifiedUpdateSquareMemberRelation(args.notifiedUpdateSquareMemberRelation);
    }
    if (args.notifiedUpdateSquare !== undefined && args.notifiedUpdateSquare !== null) {
      this.notifiedUpdateSquare = new SquareEventNotifiedUpdateSquare(args.notifiedUpdateSquare);
    }
    if (args.notifiedUpdateSquareMember !== undefined && args.notifiedUpdateSquareMember !== null) {
      this.notifiedUpdateSquareMember = new SquareEventNotifiedUpdateSquareMember(args.notifiedUpdateSquareMember);
    }
    if (args.notifiedUpdateSquareChat !== undefined && args.notifiedUpdateSquareChat !== null) {
      this.notifiedUpdateSquareChat = new SquareEventNotifiedUpdateSquareChat(args.notifiedUpdateSquareChat);
    }
    if (args.notificationJoinRequest !== undefined && args.notificationJoinRequest !== null) {
      this.notificationJoinRequest = new SquareEventNotificationJoinRequest(args.notificationJoinRequest);
    }
    if (args.notificationJoined !== undefined && args.notificationJoined !== null) {
      this.notificationJoined = new SquareEventNotificationMemberUpdate(args.notificationJoined);
    }
    if (args.notificationPromoteCoadmin !== undefined && args.notificationPromoteCoadmin !== null) {
      this.notificationPromoteCoadmin = new SquareEventNotificationMemberUpdate(args.notificationPromoteCoadmin);
    }
    if (args.notificationPromoteAdmin !== undefined && args.notificationPromoteAdmin !== null) {
      this.notificationPromoteAdmin = new SquareEventNotificationMemberUpdate(args.notificationPromoteAdmin);
    }
    if (args.notificationDemoteMember !== undefined && args.notificationDemoteMember !== null) {
      this.notificationDemoteMember = new SquareEventNotificationMemberUpdate(args.notificationDemoteMember);
    }
    if (args.notificationKickedOut !== undefined && args.notificationKickedOut !== null) {
      this.notificationKickedOut = new SquareEventNotificationMemberUpdate(args.notificationKickedOut);
    }
    if (args.notificationSquareDelete !== undefined && args.notificationSquareDelete !== null) {
      this.notificationSquareDelete = new SquareEventNotificationSquareDelete(args.notificationSquareDelete);
    }
    if (args.notificationSquareChatDelete !== undefined && args.notificationSquareChatDelete !== null) {
      this.notificationSquareChatDelete = new SquareEventNotificationSquareChatDelete(args.notificationSquareChatDelete);
    }
    if (args.notificationMessage !== undefined && args.notificationMessage !== null) {
      this.notificationMessage = new SquareEventNotificationMessage(args.notificationMessage);
    }
    if (args.notifiedUpdateSquareChatMember !== undefined && args.notifiedUpdateSquareChatMember !== null) {
      this.notifiedUpdateSquareChatMember = new SquareEventNotifiedUpdateSquareChatMember(args.notifiedUpdateSquareChatMember);
    }
    if (args.notifiedUpdateSquareAuthority !== undefined && args.notifiedUpdateSquareAuthority !== null) {
      this.notifiedUpdateSquareAuthority = new SquareEventNotifiedUpdateSquareAuthority(args.notifiedUpdateSquareAuthority);
    }
    if (args.notifiedUpdateSquareFeatureSet !== undefined && args.notifiedUpdateSquareFeatureSet !== null) {
      this.notifiedUpdateSquareFeatureSet = new SquareEventNotifiedUpdateSquareFeatureSet(args.notifiedUpdateSquareFeatureSet);
    }
  }
};
SquareEventPayload.prototype = {};
SquareEventPayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.receiveMessage = new SquareEventReceiveMessage();
        this.receiveMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sendMessage = new SquareEventSendMessage();
        this.sendMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedJoinSquareChat = new SquareEventNotifiedJoinSquareChat();
        this.notifiedJoinSquareChat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedInviteIntoSquareChat = new SquareEventNotifiedInviteIntoSquareChat();
        this.notifiedInviteIntoSquareChat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedLeaveSquareChat = new SquareEventNotifiedLeaveSquareChat();
        this.notifiedLeaveSquareChat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedDestroyMessage = new SquareEventNotifiedDestroyMessage();
        this.notifiedDestroyMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedMarkAsRead = new SquareEventNotifiedMarkAsRead();
        this.notifiedMarkAsRead.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedUpdateSquareMemberProfile = new SquareEventNotifiedUpdateSquareMemberProfile();
        this.notifiedUpdateSquareMemberProfile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedKickoutFromSquare = new SquareEventNotifiedKickoutFromSquare();
        this.notifiedKickoutFromSquare.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedShutdownSquare = new SquareEventNotifiedShutdownSquare();
        this.notifiedShutdownSquare.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedDeleteSquareChat = new SquareEventNotifiedDeleteSquareChat();
        this.notifiedDeleteSquareChat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedUpdateSquareChatProfileName = new SquareEventNotifiedUpdateSquareChatProfileName();
        this.notifiedUpdateSquareChatProfileName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedUpdateSquareChatProfileImage = new SquareEventNotifiedUpdateSquareChatProfileImage();
        this.notifiedUpdateSquareChatProfileImage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedUpdateSquareStatus = new SquareEventNotifiedUpdateSquareStatus();
        this.notifiedUpdateSquareStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedUpdateSquareChatStatus = new SquareEventNotifiedUpdateSquareChatStatus();
        this.notifiedUpdateSquareChatStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedCreateSquareMember = new SquareEventNotifiedCreateSquareMember();
        this.notifiedCreateSquareMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedCreateSquareChatMember = new SquareEventNotifiedCreateSquareChatMember();
        this.notifiedCreateSquareChatMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedUpdateSquareMemberRelation = new SquareEventNotifiedUpdateSquareMemberRelation();
        this.notifiedUpdateSquareMemberRelation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedUpdateSquare = new SquareEventNotifiedUpdateSquare();
        this.notifiedUpdateSquare.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedUpdateSquareMember = new SquareEventNotifiedUpdateSquareMember();
        this.notifiedUpdateSquareMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedUpdateSquareChat = new SquareEventNotifiedUpdateSquareChat();
        this.notifiedUpdateSquareChat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRUCT) {
        this.notificationJoinRequest = new SquareEventNotificationJoinRequest();
        this.notificationJoinRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRUCT) {
        this.notificationJoined = new SquareEventNotificationMemberUpdate();
        this.notificationJoined.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRUCT) {
        this.notificationPromoteCoadmin = new SquareEventNotificationMemberUpdate();
        this.notificationPromoteCoadmin.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRUCT) {
        this.notificationPromoteAdmin = new SquareEventNotificationMemberUpdate();
        this.notificationPromoteAdmin.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRUCT) {
        this.notificationDemoteMember = new SquareEventNotificationMemberUpdate();
        this.notificationDemoteMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRUCT) {
        this.notificationKickedOut = new SquareEventNotificationMemberUpdate();
        this.notificationKickedOut.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRUCT) {
        this.notificationSquareDelete = new SquareEventNotificationSquareDelete();
        this.notificationSquareDelete.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRUCT) {
        this.notificationSquareChatDelete = new SquareEventNotificationSquareChatDelete();
        this.notificationSquareChatDelete.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRUCT) {
        this.notificationMessage = new SquareEventNotificationMessage();
        this.notificationMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedUpdateSquareChatMember = new SquareEventNotifiedUpdateSquareChatMember();
        this.notifiedUpdateSquareChatMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedUpdateSquareAuthority = new SquareEventNotifiedUpdateSquareAuthority();
        this.notifiedUpdateSquareAuthority.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifiedUpdateSquareFeatureSet = new SquareEventNotifiedUpdateSquareFeatureSet();
        this.notifiedUpdateSquareFeatureSet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEventPayload.prototype.write = function(output) {
  output.writeStructBegin('SquareEventPayload');
  if (this.receiveMessage !== null && this.receiveMessage !== undefined) {
    output.writeFieldBegin('receiveMessage', Thrift.Type.STRUCT, 1);
    this.receiveMessage.write(output);
    output.writeFieldEnd();
  }
  if (this.sendMessage !== null && this.sendMessage !== undefined) {
    output.writeFieldBegin('sendMessage', Thrift.Type.STRUCT, 2);
    this.sendMessage.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedJoinSquareChat !== null && this.notifiedJoinSquareChat !== undefined) {
    output.writeFieldBegin('notifiedJoinSquareChat', Thrift.Type.STRUCT, 3);
    this.notifiedJoinSquareChat.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedInviteIntoSquareChat !== null && this.notifiedInviteIntoSquareChat !== undefined) {
    output.writeFieldBegin('notifiedInviteIntoSquareChat', Thrift.Type.STRUCT, 4);
    this.notifiedInviteIntoSquareChat.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedLeaveSquareChat !== null && this.notifiedLeaveSquareChat !== undefined) {
    output.writeFieldBegin('notifiedLeaveSquareChat', Thrift.Type.STRUCT, 5);
    this.notifiedLeaveSquareChat.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedDestroyMessage !== null && this.notifiedDestroyMessage !== undefined) {
    output.writeFieldBegin('notifiedDestroyMessage', Thrift.Type.STRUCT, 6);
    this.notifiedDestroyMessage.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedMarkAsRead !== null && this.notifiedMarkAsRead !== undefined) {
    output.writeFieldBegin('notifiedMarkAsRead', Thrift.Type.STRUCT, 7);
    this.notifiedMarkAsRead.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedUpdateSquareMemberProfile !== null && this.notifiedUpdateSquareMemberProfile !== undefined) {
    output.writeFieldBegin('notifiedUpdateSquareMemberProfile', Thrift.Type.STRUCT, 8);
    this.notifiedUpdateSquareMemberProfile.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedKickoutFromSquare !== null && this.notifiedKickoutFromSquare !== undefined) {
    output.writeFieldBegin('notifiedKickoutFromSquare', Thrift.Type.STRUCT, 20);
    this.notifiedKickoutFromSquare.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedShutdownSquare !== null && this.notifiedShutdownSquare !== undefined) {
    output.writeFieldBegin('notifiedShutdownSquare', Thrift.Type.STRUCT, 19);
    this.notifiedShutdownSquare.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedDeleteSquareChat !== null && this.notifiedDeleteSquareChat !== undefined) {
    output.writeFieldBegin('notifiedDeleteSquareChat', Thrift.Type.STRUCT, 21);
    this.notifiedDeleteSquareChat.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedUpdateSquareChatProfileName !== null && this.notifiedUpdateSquareChatProfileName !== undefined) {
    output.writeFieldBegin('notifiedUpdateSquareChatProfileName', Thrift.Type.STRUCT, 31);
    this.notifiedUpdateSquareChatProfileName.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedUpdateSquareChatProfileImage !== null && this.notifiedUpdateSquareChatProfileImage !== undefined) {
    output.writeFieldBegin('notifiedUpdateSquareChatProfileImage', Thrift.Type.STRUCT, 32);
    this.notifiedUpdateSquareChatProfileImage.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedUpdateSquareStatus !== null && this.notifiedUpdateSquareStatus !== undefined) {
    output.writeFieldBegin('notifiedUpdateSquareStatus', Thrift.Type.STRUCT, 14);
    this.notifiedUpdateSquareStatus.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedUpdateSquareChatStatus !== null && this.notifiedUpdateSquareChatStatus !== undefined) {
    output.writeFieldBegin('notifiedUpdateSquareChatStatus', Thrift.Type.STRUCT, 15);
    this.notifiedUpdateSquareChatStatus.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedCreateSquareMember !== null && this.notifiedCreateSquareMember !== undefined) {
    output.writeFieldBegin('notifiedCreateSquareMember', Thrift.Type.STRUCT, 16);
    this.notifiedCreateSquareMember.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedCreateSquareChatMember !== null && this.notifiedCreateSquareChatMember !== undefined) {
    output.writeFieldBegin('notifiedCreateSquareChatMember', Thrift.Type.STRUCT, 17);
    this.notifiedCreateSquareChatMember.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedUpdateSquareMemberRelation !== null && this.notifiedUpdateSquareMemberRelation !== undefined) {
    output.writeFieldBegin('notifiedUpdateSquareMemberRelation', Thrift.Type.STRUCT, 18);
    this.notifiedUpdateSquareMemberRelation.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedUpdateSquare !== null && this.notifiedUpdateSquare !== undefined) {
    output.writeFieldBegin('notifiedUpdateSquare', Thrift.Type.STRUCT, 9);
    this.notifiedUpdateSquare.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedUpdateSquareMember !== null && this.notifiedUpdateSquareMember !== undefined) {
    output.writeFieldBegin('notifiedUpdateSquareMember', Thrift.Type.STRUCT, 10);
    this.notifiedUpdateSquareMember.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedUpdateSquareChat !== null && this.notifiedUpdateSquareChat !== undefined) {
    output.writeFieldBegin('notifiedUpdateSquareChat', Thrift.Type.STRUCT, 11);
    this.notifiedUpdateSquareChat.write(output);
    output.writeFieldEnd();
  }
  if (this.notificationJoinRequest !== null && this.notificationJoinRequest !== undefined) {
    output.writeFieldBegin('notificationJoinRequest', Thrift.Type.STRUCT, 22);
    this.notificationJoinRequest.write(output);
    output.writeFieldEnd();
  }
  if (this.notificationJoined !== null && this.notificationJoined !== undefined) {
    output.writeFieldBegin('notificationJoined', Thrift.Type.STRUCT, 23);
    this.notificationJoined.write(output);
    output.writeFieldEnd();
  }
  if (this.notificationPromoteCoadmin !== null && this.notificationPromoteCoadmin !== undefined) {
    output.writeFieldBegin('notificationPromoteCoadmin', Thrift.Type.STRUCT, 24);
    this.notificationPromoteCoadmin.write(output);
    output.writeFieldEnd();
  }
  if (this.notificationPromoteAdmin !== null && this.notificationPromoteAdmin !== undefined) {
    output.writeFieldBegin('notificationPromoteAdmin', Thrift.Type.STRUCT, 25);
    this.notificationPromoteAdmin.write(output);
    output.writeFieldEnd();
  }
  if (this.notificationDemoteMember !== null && this.notificationDemoteMember !== undefined) {
    output.writeFieldBegin('notificationDemoteMember', Thrift.Type.STRUCT, 26);
    this.notificationDemoteMember.write(output);
    output.writeFieldEnd();
  }
  if (this.notificationKickedOut !== null && this.notificationKickedOut !== undefined) {
    output.writeFieldBegin('notificationKickedOut', Thrift.Type.STRUCT, 27);
    this.notificationKickedOut.write(output);
    output.writeFieldEnd();
  }
  if (this.notificationSquareDelete !== null && this.notificationSquareDelete !== undefined) {
    output.writeFieldBegin('notificationSquareDelete', Thrift.Type.STRUCT, 28);
    this.notificationSquareDelete.write(output);
    output.writeFieldEnd();
  }
  if (this.notificationSquareChatDelete !== null && this.notificationSquareChatDelete !== undefined) {
    output.writeFieldBegin('notificationSquareChatDelete', Thrift.Type.STRUCT, 29);
    this.notificationSquareChatDelete.write(output);
    output.writeFieldEnd();
  }
  if (this.notificationMessage !== null && this.notificationMessage !== undefined) {
    output.writeFieldBegin('notificationMessage', Thrift.Type.STRUCT, 30);
    this.notificationMessage.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedUpdateSquareChatMember !== null && this.notifiedUpdateSquareChatMember !== undefined) {
    output.writeFieldBegin('notifiedUpdateSquareChatMember', Thrift.Type.STRUCT, 12);
    this.notifiedUpdateSquareChatMember.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedUpdateSquareAuthority !== null && this.notifiedUpdateSquareAuthority !== undefined) {
    output.writeFieldBegin('notifiedUpdateSquareAuthority', Thrift.Type.STRUCT, 13);
    this.notifiedUpdateSquareAuthority.write(output);
    output.writeFieldEnd();
  }
  if (this.notifiedUpdateSquareFeatureSet !== null && this.notifiedUpdateSquareFeatureSet !== undefined) {
    output.writeFieldBegin('notifiedUpdateSquareFeatureSet', Thrift.Type.STRUCT, 33);
    this.notifiedUpdateSquareFeatureSet.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareEvent = function(args) {
  this.createdTime = null;
  this.type = null;
  this.payload = null;
  this.syncToken = null;
  this.eventStatus = null;
  if (args) {
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.payload !== undefined && args.payload !== null) {
      this.payload = new SquareEventPayload(args.payload);
    }
    if (args.syncToken !== undefined && args.syncToken !== null) {
      this.syncToken = args.syncToken;
    }
    if (args.eventStatus !== undefined && args.eventStatus !== null) {
      this.eventStatus = args.eventStatus;
    }
  }
};
SquareEvent.prototype = {};
SquareEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.payload = new SquareEventPayload();
        this.payload.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.syncToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.eventStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareEvent.prototype.write = function(output) {
  output.writeStructBegin('SquareEvent');
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRUCT, 4);
    this.payload.write(output);
    output.writeFieldEnd();
  }
  if (this.syncToken !== null && this.syncToken !== undefined) {
    output.writeFieldBegin('syncToken', Thrift.Type.STRING, 5);
    output.writeString(this.syncToken);
    output.writeFieldEnd();
  }
  if (this.eventStatus !== null && this.eventStatus !== undefined) {
    output.writeFieldBegin('eventStatus', Thrift.Type.I32, 6);
    output.writeI32(this.eventStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FetchMyEventsRequest = function(args) {
  this.subscriptionId = null;
  this.syncToken = null;
  this.limit = null;
  this.continuationToken = null;
  if (args) {
    if (args.subscriptionId !== undefined && args.subscriptionId !== null) {
      this.subscriptionId = args.subscriptionId;
    }
    if (args.syncToken !== undefined && args.syncToken !== null) {
      this.syncToken = args.syncToken;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.continuationToken !== undefined && args.continuationToken !== null) {
      this.continuationToken = args.continuationToken;
    }
  }
};
FetchMyEventsRequest.prototype = {};
FetchMyEventsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.subscriptionId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.syncToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.continuationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchMyEventsRequest.prototype.write = function(output) {
  output.writeStructBegin('FetchMyEventsRequest');
  if (this.subscriptionId !== null && this.subscriptionId !== undefined) {
    output.writeFieldBegin('subscriptionId', Thrift.Type.I64, 1);
    output.writeI64(this.subscriptionId);
    output.writeFieldEnd();
  }
  if (this.syncToken !== null && this.syncToken !== undefined) {
    output.writeFieldBegin('syncToken', Thrift.Type.STRING, 2);
    output.writeString(this.syncToken);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 3);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  if (this.continuationToken !== null && this.continuationToken !== undefined) {
    output.writeFieldBegin('continuationToken', Thrift.Type.STRING, 4);
    output.writeString(this.continuationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FetchMyEventsResponse = function(args) {
  this.subscription = null;
  this.events = null;
  this.syncToken = null;
  this.continuationToken = null;
  if (args) {
    if (args.subscription !== undefined && args.subscription !== null) {
      this.subscription = new SubscriptionState(args.subscription);
    }
    if (args.events !== undefined && args.events !== null) {
      this.events = Thrift.copyList(args.events, [SquareEvent]);
    }
    if (args.syncToken !== undefined && args.syncToken !== null) {
      this.syncToken = args.syncToken;
    }
    if (args.continuationToken !== undefined && args.continuationToken !== null) {
      this.continuationToken = args.continuationToken;
    }
  }
};
FetchMyEventsResponse.prototype = {};
FetchMyEventsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.subscription = new SubscriptionState();
        this.subscription.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.events = [];
        var _rtmp3445 = input.readListBegin();
        var _size444 = _rtmp3445.size || 0;
        for (var _i446 = 0; _i446 < _size444; ++_i446) {
          var elem447 = null;
          elem447 = new SquareEvent();
          elem447.read(input);
          this.events.push(elem447);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.syncToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.continuationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchMyEventsResponse.prototype.write = function(output) {
  output.writeStructBegin('FetchMyEventsResponse');
  if (this.subscription !== null && this.subscription !== undefined) {
    output.writeFieldBegin('subscription', Thrift.Type.STRUCT, 1);
    this.subscription.write(output);
    output.writeFieldEnd();
  }
  if (this.events !== null && this.events !== undefined) {
    output.writeFieldBegin('events', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.events.length);
    for (var iter448 in this.events) {
      if (this.events.hasOwnProperty(iter448)) {
        iter448 = this.events[iter448];
        iter448.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.syncToken !== null && this.syncToken !== undefined) {
    output.writeFieldBegin('syncToken', Thrift.Type.STRING, 3);
    output.writeString(this.syncToken);
    output.writeFieldEnd();
  }
  if (this.continuationToken !== null && this.continuationToken !== undefined) {
    output.writeFieldBegin('continuationToken', Thrift.Type.STRING, 4);
    output.writeString(this.continuationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FetchSquareChatEventsRequest = function(args) {
  this.subscriptionId = null;
  this.squareChatMid = null;
  this.syncToken = null;
  this.limit = null;
  this.direction = null;
  if (args) {
    if (args.subscriptionId !== undefined && args.subscriptionId !== null) {
      this.subscriptionId = args.subscriptionId;
    }
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.syncToken !== undefined && args.syncToken !== null) {
      this.syncToken = args.syncToken;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
  }
};
FetchSquareChatEventsRequest.prototype = {};
FetchSquareChatEventsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.subscriptionId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.syncToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchSquareChatEventsRequest.prototype.write = function(output) {
  output.writeStructBegin('FetchSquareChatEventsRequest');
  if (this.subscriptionId !== null && this.subscriptionId !== undefined) {
    output.writeFieldBegin('subscriptionId', Thrift.Type.I64, 1);
    output.writeI64(this.subscriptionId);
    output.writeFieldEnd();
  }
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.syncToken !== null && this.syncToken !== undefined) {
    output.writeFieldBegin('syncToken', Thrift.Type.STRING, 3);
    output.writeString(this.syncToken);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 4);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 5);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FetchSquareChatEventsResponse = function(args) {
  this.subscription = null;
  this.events = null;
  this.syncToken = null;
  this.continuationToken = null;
  if (args) {
    if (args.subscription !== undefined && args.subscription !== null) {
      this.subscription = new SubscriptionState(args.subscription);
    }
    if (args.events !== undefined && args.events !== null) {
      this.events = Thrift.copyList(args.events, [SquareEvent]);
    }
    if (args.syncToken !== undefined && args.syncToken !== null) {
      this.syncToken = args.syncToken;
    }
    if (args.continuationToken !== undefined && args.continuationToken !== null) {
      this.continuationToken = args.continuationToken;
    }
  }
};
FetchSquareChatEventsResponse.prototype = {};
FetchSquareChatEventsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.subscription = new SubscriptionState();
        this.subscription.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.events = [];
        var _rtmp3450 = input.readListBegin();
        var _size449 = _rtmp3450.size || 0;
        for (var _i451 = 0; _i451 < _size449; ++_i451) {
          var elem452 = null;
          elem452 = new SquareEvent();
          elem452.read(input);
          this.events.push(elem452);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.syncToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.continuationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchSquareChatEventsResponse.prototype.write = function(output) {
  output.writeStructBegin('FetchSquareChatEventsResponse');
  if (this.subscription !== null && this.subscription !== undefined) {
    output.writeFieldBegin('subscription', Thrift.Type.STRUCT, 1);
    this.subscription.write(output);
    output.writeFieldEnd();
  }
  if (this.events !== null && this.events !== undefined) {
    output.writeFieldBegin('events', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.events.length);
    for (var iter453 in this.events) {
      if (this.events.hasOwnProperty(iter453)) {
        iter453 = this.events[iter453];
        iter453.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.syncToken !== null && this.syncToken !== undefined) {
    output.writeFieldBegin('syncToken', Thrift.Type.STRING, 3);
    output.writeString(this.syncToken);
    output.writeFieldEnd();
  }
  if (this.continuationToken !== null && this.continuationToken !== undefined) {
    output.writeFieldBegin('continuationToken', Thrift.Type.STRING, 4);
    output.writeString(this.continuationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InviteToSquareRequest = function(args) {
  this.squareMid = null;
  this.invitees = null;
  this.squareChatMid = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.invitees !== undefined && args.invitees !== null) {
      this.invitees = Thrift.copyList(args.invitees, [null]);
    }
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
  }
};
InviteToSquareRequest.prototype = {};
InviteToSquareRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.invitees = [];
        var _rtmp3455 = input.readListBegin();
        var _size454 = _rtmp3455.size || 0;
        for (var _i456 = 0; _i456 < _size454; ++_i456) {
          var elem457 = null;
          elem457 = input.readString().value;
          this.invitees.push(elem457);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InviteToSquareRequest.prototype.write = function(output) {
  output.writeStructBegin('InviteToSquareRequest');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.invitees !== null && this.invitees !== undefined) {
    output.writeFieldBegin('invitees', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.invitees.length);
    for (var iter458 in this.invitees) {
      if (this.invitees.hasOwnProperty(iter458)) {
        iter458 = this.invitees[iter458];
        output.writeString(iter458);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 4);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InviteToSquareResponse = function(args) {
};
InviteToSquareResponse.prototype = {};
InviteToSquareResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InviteToSquareResponse.prototype.write = function(output) {
  output.writeStructBegin('InviteToSquareResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InviteToSquareChatRequest = function(args) {
  this.inviteeMids = null;
  this.squareChatMid = null;
  if (args) {
    if (args.inviteeMids !== undefined && args.inviteeMids !== null) {
      this.inviteeMids = Thrift.copyList(args.inviteeMids, [null]);
    }
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
  }
};
InviteToSquareChatRequest.prototype = {};
InviteToSquareChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.inviteeMids = [];
        var _rtmp3460 = input.readListBegin();
        var _size459 = _rtmp3460.size || 0;
        for (var _i461 = 0; _i461 < _size459; ++_i461) {
          var elem462 = null;
          elem462 = input.readString().value;
          this.inviteeMids.push(elem462);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InviteToSquareChatRequest.prototype.write = function(output) {
  output.writeStructBegin('InviteToSquareChatRequest');
  if (this.inviteeMids !== null && this.inviteeMids !== undefined) {
    output.writeFieldBegin('inviteeMids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.inviteeMids.length);
    for (var iter463 in this.inviteeMids) {
      if (this.inviteeMids.hasOwnProperty(iter463)) {
        iter463 = this.inviteeMids[iter463];
        output.writeString(iter463);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InviteToSquareChatResponse = function(args) {
  this.inviteeMids = null;
  if (args) {
    if (args.inviteeMids !== undefined && args.inviteeMids !== null) {
      this.inviteeMids = Thrift.copyList(args.inviteeMids, [null]);
    }
  }
};
InviteToSquareChatResponse.prototype = {};
InviteToSquareChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.inviteeMids = [];
        var _rtmp3465 = input.readListBegin();
        var _size464 = _rtmp3465.size || 0;
        for (var _i466 = 0; _i466 < _size464; ++_i466) {
          var elem467 = null;
          elem467 = input.readString().value;
          this.inviteeMids.push(elem467);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InviteToSquareChatResponse.prototype.write = function(output) {
  output.writeStructBegin('InviteToSquareChatResponse');
  if (this.inviteeMids !== null && this.inviteeMids !== undefined) {
    output.writeFieldBegin('inviteeMids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.inviteeMids.length);
    for (var iter468 in this.inviteeMids) {
      if (this.inviteeMids.hasOwnProperty(iter468)) {
        iter468 = this.inviteeMids[iter468];
        output.writeString(iter468);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareMemberRequest = function(args) {
  this.squareMemberMid = null;
  if (args) {
    if (args.squareMemberMid !== undefined && args.squareMemberMid !== null) {
      this.squareMemberMid = args.squareMemberMid;
    }
  }
};
GetSquareMemberRequest.prototype = {};
GetSquareMemberRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMemberMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareMemberRequest.prototype.write = function(output) {
  output.writeStructBegin('GetSquareMemberRequest');
  if (this.squareMemberMid !== null && this.squareMemberMid !== undefined) {
    output.writeFieldBegin('squareMemberMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMemberMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareMemberResponse = function(args) {
  this.squareMember = null;
  this.relation = null;
  this.oneOnOneChatMid = null;
  if (args) {
    if (args.squareMember !== undefined && args.squareMember !== null) {
      this.squareMember = new SquareMember(args.squareMember);
    }
    if (args.relation !== undefined && args.relation !== null) {
      this.relation = new SquareMemberRelation(args.relation);
    }
    if (args.oneOnOneChatMid !== undefined && args.oneOnOneChatMid !== null) {
      this.oneOnOneChatMid = args.oneOnOneChatMid;
    }
  }
};
GetSquareMemberResponse.prototype = {};
GetSquareMemberResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareMember = new SquareMember();
        this.squareMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.relation = new SquareMemberRelation();
        this.relation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.oneOnOneChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareMemberResponse.prototype.write = function(output) {
  output.writeStructBegin('GetSquareMemberResponse');
  if (this.squareMember !== null && this.squareMember !== undefined) {
    output.writeFieldBegin('squareMember', Thrift.Type.STRUCT, 1);
    this.squareMember.write(output);
    output.writeFieldEnd();
  }
  if (this.relation !== null && this.relation !== undefined) {
    output.writeFieldBegin('relation', Thrift.Type.STRUCT, 2);
    this.relation.write(output);
    output.writeFieldEnd();
  }
  if (this.oneOnOneChatMid !== null && this.oneOnOneChatMid !== undefined) {
    output.writeFieldBegin('oneOnOneChatMid', Thrift.Type.STRING, 3);
    output.writeString(this.oneOnOneChatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareMembersRequest = function(args) {
  this.mids = null;
  if (args) {
    if (args.mids !== undefined && args.mids !== null) {
      this.mids = Thrift.copyList(args.mids, [null]);
    }
  }
};
GetSquareMembersRequest.prototype = {};
GetSquareMembersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.SET) {
        this.mids = [];
        var _rtmp3470 = input.readSetBegin();
        var _size469 = _rtmp3470.size || 0;
        for (var _i471 = 0; _i471 < _size469; ++_i471) {
          var elem472 = null;
          elem472 = input.readString().value;
          this.mids.push(elem472);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareMembersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetSquareMembersRequest');
  if (this.mids !== null && this.mids !== undefined) {
    output.writeFieldBegin('mids', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter473 in this.mids) {
      if (this.mids.hasOwnProperty(iter473)) {
        iter473 = this.mids[iter473];
        output.writeString(iter473);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareMembersResponse = function(args) {
  this.members = null;
  if (args) {
    if (args.members !== undefined && args.members !== null) {
      this.members = new SquareMember(args.members);
    }
  }
};
GetSquareMembersResponse.prototype = {};
GetSquareMembersResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.members = new SquareMember();
        this.members.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareMembersResponse.prototype.write = function(output) {
  output.writeStructBegin('GetSquareMembersResponse');
  if (this.members !== null && this.members !== undefined) {
    output.writeFieldBegin('members', Thrift.Type.STRUCT, 1);
    this.members.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareMemberRelationsRequest = function(args) {
  this.state = null;
  this.continuationToken = null;
  this.limit = null;
  if (args) {
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.continuationToken !== undefined && args.continuationToken !== null) {
      this.continuationToken = args.continuationToken;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
GetSquareMemberRelationsRequest.prototype = {};
GetSquareMemberRelationsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.continuationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareMemberRelationsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetSquareMemberRelationsRequest');
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.continuationToken !== null && this.continuationToken !== undefined) {
    output.writeFieldBegin('continuationToken', Thrift.Type.STRING, 3);
    output.writeString(this.continuationToken);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 4);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareMemberRelationsResponse = function(args) {
  this.squareMembers = null;
  this.relations = null;
  this.continuationToken = null;
  if (args) {
    if (args.squareMembers !== undefined && args.squareMembers !== null) {
      this.squareMembers = Thrift.copyList(args.squareMembers, [SquareMember]);
    }
    if (args.relations !== undefined && args.relations !== null) {
      this.relations = Thrift.copyMap(args.relations, [SquareMemberRelation]);
    }
    if (args.continuationToken !== undefined && args.continuationToken !== null) {
      this.continuationToken = args.continuationToken;
    }
  }
};
GetSquareMemberRelationsResponse.prototype = {};
GetSquareMemberRelationsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.squareMembers = [];
        var _rtmp3475 = input.readListBegin();
        var _size474 = _rtmp3475.size || 0;
        for (var _i476 = 0; _i476 < _size474; ++_i476) {
          var elem477 = null;
          elem477 = new SquareMember();
          elem477.read(input);
          this.squareMembers.push(elem477);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.relations = {};
        var _rtmp3479 = input.readMapBegin();
        var _size478 = _rtmp3479.size || 0;
        for (var _i480 = 0; _i480 < _size478; ++_i480) {
          if (_i480 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key481 = null;
          var val482 = null;
          key481 = input.readString().value;
          val482 = new SquareMemberRelation();
          val482.read(input);
          this.relations[key481] = val482;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.continuationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareMemberRelationsResponse.prototype.write = function(output) {
  output.writeStructBegin('GetSquareMemberRelationsResponse');
  if (this.squareMembers !== null && this.squareMembers !== undefined) {
    output.writeFieldBegin('squareMembers', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.squareMembers.length);
    for (var iter483 in this.squareMembers) {
      if (this.squareMembers.hasOwnProperty(iter483)) {
        iter483 = this.squareMembers[iter483];
        iter483.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.relations !== null && this.relations !== undefined) {
    output.writeFieldBegin('relations', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.relations));
    for (var kiter484 in this.relations) {
      if (this.relations.hasOwnProperty(kiter484)) {
        var viter485 = this.relations[kiter484];
        output.writeString(kiter484);
        viter485.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.continuationToken !== null && this.continuationToken !== undefined) {
    output.writeFieldBegin('continuationToken', Thrift.Type.STRING, 3);
    output.writeString(this.continuationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareMemberRelationRequest = function(args) {
  this.squareMid = null;
  this.targetSquareMemberMid = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.targetSquareMemberMid !== undefined && args.targetSquareMemberMid !== null) {
      this.targetSquareMemberMid = args.targetSquareMemberMid;
    }
  }
};
GetSquareMemberRelationRequest.prototype = {};
GetSquareMemberRelationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.targetSquareMemberMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareMemberRelationRequest.prototype.write = function(output) {
  output.writeStructBegin('GetSquareMemberRelationRequest');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.targetSquareMemberMid !== null && this.targetSquareMemberMid !== undefined) {
    output.writeFieldBegin('targetSquareMemberMid', Thrift.Type.STRING, 3);
    output.writeString(this.targetSquareMemberMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareMemberRelationResponse = function(args) {
  this.squareMid = null;
  this.targetSquareMemberMid = null;
  this.relation = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.targetSquareMemberMid !== undefined && args.targetSquareMemberMid !== null) {
      this.targetSquareMemberMid = args.targetSquareMemberMid;
    }
    if (args.relation !== undefined && args.relation !== null) {
      this.relation = new SquareMemberRelation(args.relation);
    }
  }
};
GetSquareMemberRelationResponse.prototype = {};
GetSquareMemberRelationResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.targetSquareMemberMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.relation = new SquareMemberRelation();
        this.relation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareMemberRelationResponse.prototype.write = function(output) {
  output.writeStructBegin('GetSquareMemberRelationResponse');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.targetSquareMemberMid !== null && this.targetSquareMemberMid !== undefined) {
    output.writeFieldBegin('targetSquareMemberMid', Thrift.Type.STRING, 2);
    output.writeString(this.targetSquareMemberMid);
    output.writeFieldEnd();
  }
  if (this.relation !== null && this.relation !== undefined) {
    output.writeFieldBegin('relation', Thrift.Type.STRUCT, 3);
    this.relation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Category = function(args) {
  this.id = null;
  this.name = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
Category.prototype = {};
Category.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Category.prototype.write = function(output) {
  output.writeStructBegin('Category');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareCategoriesRequest = function(args) {
};
GetSquareCategoriesRequest.prototype = {};
GetSquareCategoriesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareCategoriesRequest.prototype.write = function(output) {
  output.writeStructBegin('GetSquareCategoriesRequest');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareCategoriesResponse = function(args) {
  this.categoryList = null;
  if (args) {
    if (args.categoryList !== undefined && args.categoryList !== null) {
      this.categoryList = Thrift.copyList(args.categoryList, [Category]);
    }
  }
};
GetSquareCategoriesResponse.prototype = {};
GetSquareCategoriesResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.categoryList = [];
        var _rtmp3487 = input.readListBegin();
        var _size486 = _rtmp3487.size || 0;
        for (var _i488 = 0; _i488 < _size486; ++_i488) {
          var elem489 = null;
          elem489 = new Category();
          elem489.read(input);
          this.categoryList.push(elem489);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareCategoriesResponse.prototype.write = function(output) {
  output.writeStructBegin('GetSquareCategoriesResponse');
  if (this.categoryList !== null && this.categoryList !== undefined) {
    output.writeFieldBegin('categoryList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.categoryList.length);
    for (var iter490 in this.categoryList) {
      if (this.categoryList.hasOwnProperty(iter490)) {
        iter490 = this.categoryList[iter490];
        iter490.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateSquareRequest = function(args) {
  this.updatedAttrs = null;
  this.square = null;
  if (args) {
    if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
      this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
    }
    if (args.square !== undefined && args.square !== null) {
      this.square = new Square(args.square);
    }
  }
};
UpdateSquareRequest.prototype = {};
UpdateSquareRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.SET) {
        this.updatedAttrs = [];
        var _rtmp3492 = input.readSetBegin();
        var _size491 = _rtmp3492.size || 0;
        for (var _i493 = 0; _i493 < _size491; ++_i493) {
          var elem494 = null;
          elem494 = input.readI32().value;
          this.updatedAttrs.push(elem494);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.square = new Square();
        this.square.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateSquareRequest.prototype.write = function(output) {
  output.writeStructBegin('UpdateSquareRequest');
  if (this.updatedAttrs !== null && this.updatedAttrs !== undefined) {
    output.writeFieldBegin('updatedAttrs', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I32, this.updatedAttrs.length);
    for (var iter495 in this.updatedAttrs) {
      if (this.updatedAttrs.hasOwnProperty(iter495)) {
        iter495 = this.updatedAttrs[iter495];
        output.writeI32(iter495);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.square !== null && this.square !== undefined) {
    output.writeFieldBegin('square', Thrift.Type.STRUCT, 3);
    this.square.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateSquareResponse = function(args) {
  this.updatedAttrs = null;
  this.square = null;
  if (args) {
    if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
      this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
    }
    if (args.square !== undefined && args.square !== null) {
      this.square = new Square(args.square);
    }
  }
};
UpdateSquareResponse.prototype = {};
UpdateSquareResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.SET) {
        this.updatedAttrs = [];
        var _rtmp3497 = input.readSetBegin();
        var _size496 = _rtmp3497.size || 0;
        for (var _i498 = 0; _i498 < _size496; ++_i498) {
          var elem499 = null;
          elem499 = input.readI32().value;
          this.updatedAttrs.push(elem499);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.square = new Square();
        this.square.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateSquareResponse.prototype.write = function(output) {
  output.writeStructBegin('UpdateSquareResponse');
  if (this.updatedAttrs !== null && this.updatedAttrs !== undefined) {
    output.writeFieldBegin('updatedAttrs', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I32, this.updatedAttrs.length);
    for (var iter500 in this.updatedAttrs) {
      if (this.updatedAttrs.hasOwnProperty(iter500)) {
        iter500 = this.updatedAttrs[iter500];
        output.writeI32(iter500);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.square !== null && this.square !== undefined) {
    output.writeFieldBegin('square', Thrift.Type.STRUCT, 2);
    this.square.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchSquaresRequest = function(args) {
  this.query = null;
  this.continuationToken = null;
  this.limit = null;
  if (args) {
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.continuationToken !== undefined && args.continuationToken !== null) {
      this.continuationToken = args.continuationToken;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
SearchSquaresRequest.prototype = {};
SearchSquaresRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.continuationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchSquaresRequest.prototype.write = function(output) {
  output.writeStructBegin('SearchSquaresRequest');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.continuationToken !== null && this.continuationToken !== undefined) {
    output.writeFieldBegin('continuationToken', Thrift.Type.STRING, 3);
    output.writeString(this.continuationToken);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 4);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchSquaresResponse = function(args) {
  this.squares = null;
  this.squareStatuses = null;
  this.myMemberships = null;
  this.continuationToken = null;
  this.noteStatuses = null;
  if (args) {
    if (args.squares !== undefined && args.squares !== null) {
      this.squares = Thrift.copyList(args.squares, [Square]);
    }
    if (args.squareStatuses !== undefined && args.squareStatuses !== null) {
      this.squareStatuses = Thrift.copyMap(args.squareStatuses, [SquareStatus]);
    }
    if (args.myMemberships !== undefined && args.myMemberships !== null) {
      this.myMemberships = Thrift.copyMap(args.myMemberships, [SquareMember]);
    }
    if (args.continuationToken !== undefined && args.continuationToken !== null) {
      this.continuationToken = args.continuationToken;
    }
    if (args.noteStatuses !== undefined && args.noteStatuses !== null) {
      this.noteStatuses = Thrift.copyMap(args.noteStatuses, [NoteStatus]);
    }
  }
};
SearchSquaresResponse.prototype = {};
SearchSquaresResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.squares = [];
        var _rtmp3502 = input.readListBegin();
        var _size501 = _rtmp3502.size || 0;
        for (var _i503 = 0; _i503 < _size501; ++_i503) {
          var elem504 = null;
          elem504 = new Square();
          elem504.read(input);
          this.squares.push(elem504);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.squareStatuses = {};
        var _rtmp3506 = input.readMapBegin();
        var _size505 = _rtmp3506.size || 0;
        for (var _i507 = 0; _i507 < _size505; ++_i507) {
          if (_i507 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key508 = null;
          var val509 = null;
          key508 = input.readString().value;
          val509 = new SquareStatus();
          val509.read(input);
          this.squareStatuses[key508] = val509;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.myMemberships = {};
        var _rtmp3511 = input.readMapBegin();
        var _size510 = _rtmp3511.size || 0;
        for (var _i512 = 0; _i512 < _size510; ++_i512) {
          if (_i512 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key513 = null;
          var val514 = null;
          key513 = input.readString().value;
          val514 = new SquareMember();
          val514.read(input);
          this.myMemberships[key513] = val514;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.continuationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.noteStatuses = {};
        var _rtmp3516 = input.readMapBegin();
        var _size515 = _rtmp3516.size || 0;
        for (var _i517 = 0; _i517 < _size515; ++_i517) {
          if (_i517 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key518 = null;
          var val519 = null;
          key518 = input.readString().value;
          val519 = new NoteStatus();
          val519.read(input);
          this.noteStatuses[key518] = val519;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchSquaresResponse.prototype.write = function(output) {
  output.writeStructBegin('SearchSquaresResponse');
  if (this.squares !== null && this.squares !== undefined) {
    output.writeFieldBegin('squares', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.squares.length);
    for (var iter520 in this.squares) {
      if (this.squares.hasOwnProperty(iter520)) {
        iter520 = this.squares[iter520];
        iter520.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.squareStatuses !== null && this.squareStatuses !== undefined) {
    output.writeFieldBegin('squareStatuses', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.squareStatuses));
    for (var kiter521 in this.squareStatuses) {
      if (this.squareStatuses.hasOwnProperty(kiter521)) {
        var viter522 = this.squareStatuses[kiter521];
        output.writeString(kiter521);
        viter522.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.myMemberships !== null && this.myMemberships !== undefined) {
    output.writeFieldBegin('myMemberships', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.myMemberships));
    for (var kiter523 in this.myMemberships) {
      if (this.myMemberships.hasOwnProperty(kiter523)) {
        var viter524 = this.myMemberships[kiter523];
        output.writeString(kiter523);
        viter524.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.continuationToken !== null && this.continuationToken !== undefined) {
    output.writeFieldBegin('continuationToken', Thrift.Type.STRING, 4);
    output.writeString(this.continuationToken);
    output.writeFieldEnd();
  }
  if (this.noteStatuses !== null && this.noteStatuses !== undefined) {
    output.writeFieldBegin('noteStatuses', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.noteStatuses));
    for (var kiter525 in this.noteStatuses) {
      if (this.noteStatuses.hasOwnProperty(kiter525)) {
        var viter526 = this.noteStatuses[kiter525];
        output.writeString(kiter525);
        viter526.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareFeatureSetRequest = function(args) {
  this.squareMid = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
  }
};
GetSquareFeatureSetRequest.prototype = {};
GetSquareFeatureSetRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareFeatureSetRequest.prototype.write = function(output) {
  output.writeStructBegin('GetSquareFeatureSetRequest');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareFeatureSetResponse = function(args) {
  this.squareFeatureSet = null;
  if (args) {
    if (args.squareFeatureSet !== undefined && args.squareFeatureSet !== null) {
      this.squareFeatureSet = new SquareFeatureSet(args.squareFeatureSet);
    }
  }
};
GetSquareFeatureSetResponse.prototype = {};
GetSquareFeatureSetResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareFeatureSet = new SquareFeatureSet();
        this.squareFeatureSet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareFeatureSetResponse.prototype.write = function(output) {
  output.writeStructBegin('GetSquareFeatureSetResponse');
  if (this.squareFeatureSet !== null && this.squareFeatureSet !== undefined) {
    output.writeFieldBegin('squareFeatureSet', Thrift.Type.STRUCT, 1);
    this.squareFeatureSet.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateSquareFeatureSetRequest = function(args) {
  this.updateAttributes = null;
  this.squareFeatureSet = null;
  if (args) {
    if (args.updateAttributes !== undefined && args.updateAttributes !== null) {
      this.updateAttributes = Thrift.copyList(args.updateAttributes, [null]);
    }
    if (args.squareFeatureSet !== undefined && args.squareFeatureSet !== null) {
      this.squareFeatureSet = new SquareFeatureSet(args.squareFeatureSet);
    }
  }
};
UpdateSquareFeatureSetRequest.prototype = {};
UpdateSquareFeatureSetRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.SET) {
        this.updateAttributes = [];
        var _rtmp3528 = input.readSetBegin();
        var _size527 = _rtmp3528.size || 0;
        for (var _i529 = 0; _i529 < _size527; ++_i529) {
          var elem530 = null;
          elem530 = input.readI32().value;
          this.updateAttributes.push(elem530);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareFeatureSet = new SquareFeatureSet();
        this.squareFeatureSet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateSquareFeatureSetRequest.prototype.write = function(output) {
  output.writeStructBegin('UpdateSquareFeatureSetRequest');
  if (this.updateAttributes !== null && this.updateAttributes !== undefined) {
    output.writeFieldBegin('updateAttributes', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I32, this.updateAttributes.length);
    for (var iter531 in this.updateAttributes) {
      if (this.updateAttributes.hasOwnProperty(iter531)) {
        iter531 = this.updateAttributes[iter531];
        output.writeI32(iter531);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.squareFeatureSet !== null && this.squareFeatureSet !== undefined) {
    output.writeFieldBegin('squareFeatureSet', Thrift.Type.STRUCT, 3);
    this.squareFeatureSet.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateSquareFeatureSetResponse = function(args) {
  this.updateAttributes = null;
  this.squareFeatureSet = null;
  if (args) {
    if (args.updateAttributes !== undefined && args.updateAttributes !== null) {
      this.updateAttributes = Thrift.copyList(args.updateAttributes, [null]);
    }
    if (args.squareFeatureSet !== undefined && args.squareFeatureSet !== null) {
      this.squareFeatureSet = new SquareFeatureSet(args.squareFeatureSet);
    }
  }
};
UpdateSquareFeatureSetResponse.prototype = {};
UpdateSquareFeatureSetResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.SET) {
        this.updateAttributes = [];
        var _rtmp3533 = input.readSetBegin();
        var _size532 = _rtmp3533.size || 0;
        for (var _i534 = 0; _i534 < _size532; ++_i534) {
          var elem535 = null;
          elem535 = input.readI32().value;
          this.updateAttributes.push(elem535);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareFeatureSet = new SquareFeatureSet();
        this.squareFeatureSet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateSquareFeatureSetResponse.prototype.write = function(output) {
  output.writeStructBegin('UpdateSquareFeatureSetResponse');
  if (this.updateAttributes !== null && this.updateAttributes !== undefined) {
    output.writeFieldBegin('updateAttributes', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I32, this.updateAttributes.length);
    for (var iter536 in this.updateAttributes) {
      if (this.updateAttributes.hasOwnProperty(iter536)) {
        iter536 = this.updateAttributes[iter536];
        output.writeI32(iter536);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.squareFeatureSet !== null && this.squareFeatureSet !== undefined) {
    output.writeFieldBegin('squareFeatureSet', Thrift.Type.STRUCT, 2);
    this.squareFeatureSet.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateSquareMemberRequest = function(args) {
  this.updatedAttrs = null;
  this.updatedPreferenceAttrs = null;
  this.squareMember = null;
  if (args) {
    if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
      this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
    }
    if (args.updatedPreferenceAttrs !== undefined && args.updatedPreferenceAttrs !== null) {
      this.updatedPreferenceAttrs = Thrift.copyList(args.updatedPreferenceAttrs, [null]);
    }
    if (args.squareMember !== undefined && args.squareMember !== null) {
      this.squareMember = new SquareMember(args.squareMember);
    }
  }
};
UpdateSquareMemberRequest.prototype = {};
UpdateSquareMemberRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.SET) {
        this.updatedAttrs = [];
        var _rtmp3538 = input.readSetBegin();
        var _size537 = _rtmp3538.size || 0;
        for (var _i539 = 0; _i539 < _size537; ++_i539) {
          var elem540 = null;
          elem540 = input.readI32().value;
          this.updatedAttrs.push(elem540);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        this.updatedPreferenceAttrs = [];
        var _rtmp3542 = input.readSetBegin();
        var _size541 = _rtmp3542.size || 0;
        for (var _i543 = 0; _i543 < _size541; ++_i543) {
          var elem544 = null;
          elem544 = input.readI32().value;
          this.updatedPreferenceAttrs.push(elem544);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareMember = new SquareMember();
        this.squareMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateSquareMemberRequest.prototype.write = function(output) {
  output.writeStructBegin('UpdateSquareMemberRequest');
  if (this.updatedAttrs !== null && this.updatedAttrs !== undefined) {
    output.writeFieldBegin('updatedAttrs', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I32, this.updatedAttrs.length);
    for (var iter545 in this.updatedAttrs) {
      if (this.updatedAttrs.hasOwnProperty(iter545)) {
        iter545 = this.updatedAttrs[iter545];
        output.writeI32(iter545);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.updatedPreferenceAttrs !== null && this.updatedPreferenceAttrs !== undefined) {
    output.writeFieldBegin('updatedPreferenceAttrs', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.I32, this.updatedPreferenceAttrs.length);
    for (var iter546 in this.updatedPreferenceAttrs) {
      if (this.updatedPreferenceAttrs.hasOwnProperty(iter546)) {
        iter546 = this.updatedPreferenceAttrs[iter546];
        output.writeI32(iter546);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.squareMember !== null && this.squareMember !== undefined) {
    output.writeFieldBegin('squareMember', Thrift.Type.STRUCT, 4);
    this.squareMember.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateSquareMemberResponse = function(args) {
  this.updatedAttrs = null;
  this.squareMember = null;
  this.updatedPreferenceAttrs = null;
  if (args) {
    if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
      this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
    }
    if (args.squareMember !== undefined && args.squareMember !== null) {
      this.squareMember = new SquareMember(args.squareMember);
    }
    if (args.updatedPreferenceAttrs !== undefined && args.updatedPreferenceAttrs !== null) {
      this.updatedPreferenceAttrs = Thrift.copyList(args.updatedPreferenceAttrs, [null]);
    }
  }
};
UpdateSquareMemberResponse.prototype = {};
UpdateSquareMemberResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.SET) {
        this.updatedAttrs = [];
        var _rtmp3548 = input.readSetBegin();
        var _size547 = _rtmp3548.size || 0;
        for (var _i549 = 0; _i549 < _size547; ++_i549) {
          var elem550 = null;
          elem550 = input.readI32().value;
          this.updatedAttrs.push(elem550);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareMember = new SquareMember();
        this.squareMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        this.updatedPreferenceAttrs = [];
        var _rtmp3552 = input.readSetBegin();
        var _size551 = _rtmp3552.size || 0;
        for (var _i553 = 0; _i553 < _size551; ++_i553) {
          var elem554 = null;
          elem554 = input.readI32().value;
          this.updatedPreferenceAttrs.push(elem554);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateSquareMemberResponse.prototype.write = function(output) {
  output.writeStructBegin('UpdateSquareMemberResponse');
  if (this.updatedAttrs !== null && this.updatedAttrs !== undefined) {
    output.writeFieldBegin('updatedAttrs', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I32, this.updatedAttrs.length);
    for (var iter555 in this.updatedAttrs) {
      if (this.updatedAttrs.hasOwnProperty(iter555)) {
        iter555 = this.updatedAttrs[iter555];
        output.writeI32(iter555);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.squareMember !== null && this.squareMember !== undefined) {
    output.writeFieldBegin('squareMember', Thrift.Type.STRUCT, 2);
    this.squareMember.write(output);
    output.writeFieldEnd();
  }
  if (this.updatedPreferenceAttrs !== null && this.updatedPreferenceAttrs !== undefined) {
    output.writeFieldBegin('updatedPreferenceAttrs', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.I32, this.updatedPreferenceAttrs.length);
    for (var iter556 in this.updatedPreferenceAttrs) {
      if (this.updatedPreferenceAttrs.hasOwnProperty(iter556)) {
        iter556 = this.updatedPreferenceAttrs[iter556];
        output.writeI32(iter556);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateSquareMembersRequest = function(args) {
  this.updatedAttrs = null;
  this.members = null;
  if (args) {
    if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
      this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
    }
    if (args.members !== undefined && args.members !== null) {
      this.members = Thrift.copyList(args.members, [SquareMember]);
    }
  }
};
UpdateSquareMembersRequest.prototype = {};
UpdateSquareMembersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.SET) {
        this.updatedAttrs = [];
        var _rtmp3558 = input.readSetBegin();
        var _size557 = _rtmp3558.size || 0;
        for (var _i559 = 0; _i559 < _size557; ++_i559) {
          var elem560 = null;
          elem560 = input.readI32().value;
          this.updatedAttrs.push(elem560);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.members = [];
        var _rtmp3562 = input.readListBegin();
        var _size561 = _rtmp3562.size || 0;
        for (var _i563 = 0; _i563 < _size561; ++_i563) {
          var elem564 = null;
          elem564 = new SquareMember();
          elem564.read(input);
          this.members.push(elem564);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateSquareMembersRequest.prototype.write = function(output) {
  output.writeStructBegin('UpdateSquareMembersRequest');
  if (this.updatedAttrs !== null && this.updatedAttrs !== undefined) {
    output.writeFieldBegin('updatedAttrs', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I32, this.updatedAttrs.length);
    for (var iter565 in this.updatedAttrs) {
      if (this.updatedAttrs.hasOwnProperty(iter565)) {
        iter565 = this.updatedAttrs[iter565];
        output.writeI32(iter565);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.members !== null && this.members !== undefined) {
    output.writeFieldBegin('members', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.members.length);
    for (var iter566 in this.members) {
      if (this.members.hasOwnProperty(iter566)) {
        iter566 = this.members[iter566];
        iter566.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateSquareMembersResponse = function(args) {
  this.updatedAttrs = null;
  this.editor = null;
  this.members = null;
  if (args) {
    if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
      this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
    }
    if (args.editor !== undefined && args.editor !== null) {
      this.editor = new SquareMember(args.editor);
    }
    if (args.members !== undefined && args.members !== null) {
      this.members = Thrift.copyMap(args.members, [SquareMember]);
    }
  }
};
UpdateSquareMembersResponse.prototype = {};
UpdateSquareMembersResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.SET) {
        this.updatedAttrs = [];
        var _rtmp3568 = input.readSetBegin();
        var _size567 = _rtmp3568.size || 0;
        for (var _i569 = 0; _i569 < _size567; ++_i569) {
          var elem570 = null;
          elem570 = input.readI32().value;
          this.updatedAttrs.push(elem570);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.editor = new SquareMember();
        this.editor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.members = {};
        var _rtmp3572 = input.readMapBegin();
        var _size571 = _rtmp3572.size || 0;
        for (var _i573 = 0; _i573 < _size571; ++_i573) {
          if (_i573 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key574 = null;
          var val575 = null;
          key574 = input.readString().value;
          val575 = new SquareMember();
          val575.read(input);
          this.members[key574] = val575;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateSquareMembersResponse.prototype.write = function(output) {
  output.writeStructBegin('UpdateSquareMembersResponse');
  if (this.updatedAttrs !== null && this.updatedAttrs !== undefined) {
    output.writeFieldBegin('updatedAttrs', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I32, this.updatedAttrs.length);
    for (var iter576 in this.updatedAttrs) {
      if (this.updatedAttrs.hasOwnProperty(iter576)) {
        iter576 = this.updatedAttrs[iter576];
        output.writeI32(iter576);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.editor !== null && this.editor !== undefined) {
    output.writeFieldBegin('editor', Thrift.Type.STRUCT, 2);
    this.editor.write(output);
    output.writeFieldEnd();
  }
  if (this.members !== null && this.members !== undefined) {
    output.writeFieldBegin('members', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.members));
    for (var kiter577 in this.members) {
      if (this.members.hasOwnProperty(kiter577)) {
        var viter578 = this.members[kiter577];
        output.writeString(kiter577);
        viter578.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RejectSquareMembersRequest = function(args) {
  this.squareMid = null;
  this.requestedMemberMids = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.requestedMemberMids !== undefined && args.requestedMemberMids !== null) {
      this.requestedMemberMids = Thrift.copyList(args.requestedMemberMids, [null]);
    }
  }
};
RejectSquareMembersRequest.prototype = {};
RejectSquareMembersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.requestedMemberMids = [];
        var _rtmp3580 = input.readListBegin();
        var _size579 = _rtmp3580.size || 0;
        for (var _i581 = 0; _i581 < _size579; ++_i581) {
          var elem582 = null;
          elem582 = input.readString().value;
          this.requestedMemberMids.push(elem582);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RejectSquareMembersRequest.prototype.write = function(output) {
  output.writeStructBegin('RejectSquareMembersRequest');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.requestedMemberMids !== null && this.requestedMemberMids !== undefined) {
    output.writeFieldBegin('requestedMemberMids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.requestedMemberMids.length);
    for (var iter583 in this.requestedMemberMids) {
      if (this.requestedMemberMids.hasOwnProperty(iter583)) {
        iter583 = this.requestedMemberMids[iter583];
        output.writeString(iter583);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RejectSquareMembersResponse = function(args) {
  this.rejectedMembers = null;
  this.status = null;
  if (args) {
    if (args.rejectedMembers !== undefined && args.rejectedMembers !== null) {
      this.rejectedMembers = Thrift.copyList(args.rejectedMembers, [SquareMember]);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = new SquareStatus(args.status);
    }
  }
};
RejectSquareMembersResponse.prototype = {};
RejectSquareMembersResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.rejectedMembers = [];
        var _rtmp3585 = input.readListBegin();
        var _size584 = _rtmp3585.size || 0;
        for (var _i586 = 0; _i586 < _size584; ++_i586) {
          var elem587 = null;
          elem587 = new SquareMember();
          elem587.read(input);
          this.rejectedMembers.push(elem587);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new SquareStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RejectSquareMembersResponse.prototype.write = function(output) {
  output.writeStructBegin('RejectSquareMembersResponse');
  if (this.rejectedMembers !== null && this.rejectedMembers !== undefined) {
    output.writeFieldBegin('rejectedMembers', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.rejectedMembers.length);
    for (var iter588 in this.rejectedMembers) {
      if (this.rejectedMembers.hasOwnProperty(iter588)) {
        iter588 = this.rejectedMembers[iter588];
        iter588.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 2);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RemoveSubscriptionsRequest = function(args) {
  this.unsubscriptions = null;
  if (args) {
    if (args.unsubscriptions !== undefined && args.unsubscriptions !== null) {
      this.unsubscriptions = Thrift.copyList(args.unsubscriptions, [null]);
    }
  }
};
RemoveSubscriptionsRequest.prototype = {};
RemoveSubscriptionsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.unsubscriptions = [];
        var _rtmp3590 = input.readListBegin();
        var _size589 = _rtmp3590.size || 0;
        for (var _i591 = 0; _i591 < _size589; ++_i591) {
          var elem592 = null;
          elem592 = input.readI64().value;
          this.unsubscriptions.push(elem592);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoveSubscriptionsRequest.prototype.write = function(output) {
  output.writeStructBegin('RemoveSubscriptionsRequest');
  if (this.unsubscriptions !== null && this.unsubscriptions !== undefined) {
    output.writeFieldBegin('unsubscriptions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.unsubscriptions.length);
    for (var iter593 in this.unsubscriptions) {
      if (this.unsubscriptions.hasOwnProperty(iter593)) {
        iter593 = this.unsubscriptions[iter593];
        output.writeI64(iter593);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RemoveSubscriptionsResponse = function(args) {
};
RemoveSubscriptionsResponse.prototype = {};
RemoveSubscriptionsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoveSubscriptionsResponse.prototype.write = function(output) {
  output.writeStructBegin('RemoveSubscriptionsResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RefreshSubscriptionsRequest = function(args) {
  this.subscriptions = null;
  if (args) {
    if (args.subscriptions !== undefined && args.subscriptions !== null) {
      this.subscriptions = Thrift.copyList(args.subscriptions, [null]);
    }
  }
};
RefreshSubscriptionsRequest.prototype = {};
RefreshSubscriptionsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.subscriptions = [];
        var _rtmp3595 = input.readListBegin();
        var _size594 = _rtmp3595.size || 0;
        for (var _i596 = 0; _i596 < _size594; ++_i596) {
          var elem597 = null;
          elem597 = input.readI64().value;
          this.subscriptions.push(elem597);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RefreshSubscriptionsRequest.prototype.write = function(output) {
  output.writeStructBegin('RefreshSubscriptionsRequest');
  if (this.subscriptions !== null && this.subscriptions !== undefined) {
    output.writeFieldBegin('subscriptions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.subscriptions.length);
    for (var iter598 in this.subscriptions) {
      if (this.subscriptions.hasOwnProperty(iter598)) {
        iter598 = this.subscriptions[iter598];
        output.writeI64(iter598);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RefreshSubscriptionsResponse = function(args) {
  this.ttlMillis = null;
  this.subscriptionStates = null;
  if (args) {
    if (args.ttlMillis !== undefined && args.ttlMillis !== null) {
      this.ttlMillis = args.ttlMillis;
    }
    if (args.subscriptionStates !== undefined && args.subscriptionStates !== null) {
      this.subscriptionStates = Thrift.copyMap(args.subscriptionStates, [SubscriptionState]);
    }
  }
};
RefreshSubscriptionsResponse.prototype = {};
RefreshSubscriptionsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ttlMillis = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.subscriptionStates = {};
        var _rtmp3600 = input.readMapBegin();
        var _size599 = _rtmp3600.size || 0;
        for (var _i601 = 0; _i601 < _size599; ++_i601) {
          if (_i601 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key602 = null;
          var val603 = null;
          key602 = input.readI64().value;
          val603 = new SubscriptionState();
          val603.read(input);
          this.subscriptionStates[key602] = val603;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RefreshSubscriptionsResponse.prototype.write = function(output) {
  output.writeStructBegin('RefreshSubscriptionsResponse');
  if (this.ttlMillis !== null && this.ttlMillis !== undefined) {
    output.writeFieldBegin('ttlMillis', Thrift.Type.I64, 1);
    output.writeI64(this.ttlMillis);
    output.writeFieldEnd();
  }
  if (this.subscriptionStates !== null && this.subscriptionStates !== undefined) {
    output.writeFieldBegin('subscriptionStates', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.subscriptionStates));
    for (var kiter604 in this.subscriptionStates) {
      if (this.subscriptionStates.hasOwnProperty(kiter604)) {
        var viter605 = this.subscriptionStates[kiter604];
        output.writeI64(kiter604);
        viter605.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateSquareChatRequest = function(args) {
  this.updatedAttrs = null;
  this.squareChat = null;
  if (args) {
    if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
      this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
    }
    if (args.squareChat !== undefined && args.squareChat !== null) {
      this.squareChat = new SquareChat(args.squareChat);
    }
  }
};
UpdateSquareChatRequest.prototype = {};
UpdateSquareChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.SET) {
        this.updatedAttrs = [];
        var _rtmp3607 = input.readSetBegin();
        var _size606 = _rtmp3607.size || 0;
        for (var _i608 = 0; _i608 < _size606; ++_i608) {
          var elem609 = null;
          elem609 = input.readI32().value;
          this.updatedAttrs.push(elem609);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChat = new SquareChat();
        this.squareChat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateSquareChatRequest.prototype.write = function(output) {
  output.writeStructBegin('UpdateSquareChatRequest');
  if (this.updatedAttrs !== null && this.updatedAttrs !== undefined) {
    output.writeFieldBegin('updatedAttrs', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I32, this.updatedAttrs.length);
    for (var iter610 in this.updatedAttrs) {
      if (this.updatedAttrs.hasOwnProperty(iter610)) {
        iter610 = this.updatedAttrs[iter610];
        output.writeI32(iter610);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.squareChat !== null && this.squareChat !== undefined) {
    output.writeFieldBegin('squareChat', Thrift.Type.STRUCT, 3);
    this.squareChat.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateSquareChatResponse = function(args) {
  this.updatedAttrs = null;
  this.squareChat = null;
  if (args) {
    if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
      this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
    }
    if (args.squareChat !== undefined && args.squareChat !== null) {
      this.squareChat = new SquareChat(args.squareChat);
    }
  }
};
UpdateSquareChatResponse.prototype = {};
UpdateSquareChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.SET) {
        this.updatedAttrs = [];
        var _rtmp3612 = input.readSetBegin();
        var _size611 = _rtmp3612.size || 0;
        for (var _i613 = 0; _i613 < _size611; ++_i613) {
          var elem614 = null;
          elem614 = input.readI32().value;
          this.updatedAttrs.push(elem614);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChat = new SquareChat();
        this.squareChat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateSquareChatResponse.prototype.write = function(output) {
  output.writeStructBegin('UpdateSquareChatResponse');
  if (this.updatedAttrs !== null && this.updatedAttrs !== undefined) {
    output.writeFieldBegin('updatedAttrs', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I32, this.updatedAttrs.length);
    for (var iter615 in this.updatedAttrs) {
      if (this.updatedAttrs.hasOwnProperty(iter615)) {
        iter615 = this.updatedAttrs[iter615];
        output.writeI32(iter615);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.squareChat !== null && this.squareChat !== undefined) {
    output.writeFieldBegin('squareChat', Thrift.Type.STRUCT, 2);
    this.squareChat.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteSquareChatRequest = function(args) {
  this.squareChatMid = null;
  this.revision = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
  }
};
DeleteSquareChatRequest.prototype = {};
DeleteSquareChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteSquareChatRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteSquareChatRequest');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 3);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteSquareChatResponse = function(args) {
};
DeleteSquareChatResponse.prototype = {};
DeleteSquareChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteSquareChatResponse.prototype.write = function(output) {
  output.writeStructBegin('DeleteSquareChatResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateSquareChatMemberRequest = function(args) {
  this.updatedAttrs = null;
  this.chatMember = null;
  if (args) {
    if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
      this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
    }
    if (args.chatMember !== undefined && args.chatMember !== null) {
      this.chatMember = new SquareChatMember(args.chatMember);
    }
  }
};
UpdateSquareChatMemberRequest.prototype = {};
UpdateSquareChatMemberRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.SET) {
        this.updatedAttrs = [];
        var _rtmp3617 = input.readSetBegin();
        var _size616 = _rtmp3617.size || 0;
        for (var _i618 = 0; _i618 < _size616; ++_i618) {
          var elem619 = null;
          elem619 = input.readI32().value;
          this.updatedAttrs.push(elem619);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.chatMember = new SquareChatMember();
        this.chatMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateSquareChatMemberRequest.prototype.write = function(output) {
  output.writeStructBegin('UpdateSquareChatMemberRequest');
  if (this.updatedAttrs !== null && this.updatedAttrs !== undefined) {
    output.writeFieldBegin('updatedAttrs', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I32, this.updatedAttrs.length);
    for (var iter620 in this.updatedAttrs) {
      if (this.updatedAttrs.hasOwnProperty(iter620)) {
        iter620 = this.updatedAttrs[iter620];
        output.writeI32(iter620);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.chatMember !== null && this.chatMember !== undefined) {
    output.writeFieldBegin('chatMember', Thrift.Type.STRUCT, 3);
    this.chatMember.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateSquareChatMemberResponse = function(args) {
  this.updatedChatMember = null;
  if (args) {
    if (args.updatedChatMember !== undefined && args.updatedChatMember !== null) {
      this.updatedChatMember = new SquareChatMember(args.updatedChatMember);
    }
  }
};
UpdateSquareChatMemberResponse.prototype = {};
UpdateSquareChatMemberResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.updatedChatMember = new SquareChatMember();
        this.updatedChatMember.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateSquareChatMemberResponse.prototype.write = function(output) {
  output.writeStructBegin('UpdateSquareChatMemberResponse');
  if (this.updatedChatMember !== null && this.updatedChatMember !== undefined) {
    output.writeFieldBegin('updatedChatMember', Thrift.Type.STRUCT, 1);
    this.updatedChatMember.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateSquareAuthorityRequest = function(args) {
  this.updateAttributes = null;
  this.authority = null;
  if (args) {
    if (args.updateAttributes !== undefined && args.updateAttributes !== null) {
      this.updateAttributes = Thrift.copyList(args.updateAttributes, [null]);
    }
    if (args.authority !== undefined && args.authority !== null) {
      this.authority = new SquareAuthority(args.authority);
    }
  }
};
UpdateSquareAuthorityRequest.prototype = {};
UpdateSquareAuthorityRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.SET) {
        this.updateAttributes = [];
        var _rtmp3622 = input.readSetBegin();
        var _size621 = _rtmp3622.size || 0;
        for (var _i623 = 0; _i623 < _size621; ++_i623) {
          var elem624 = null;
          elem624 = input.readI32().value;
          this.updateAttributes.push(elem624);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authority = new SquareAuthority();
        this.authority.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateSquareAuthorityRequest.prototype.write = function(output) {
  output.writeStructBegin('UpdateSquareAuthorityRequest');
  if (this.updateAttributes !== null && this.updateAttributes !== undefined) {
    output.writeFieldBegin('updateAttributes', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I32, this.updateAttributes.length);
    for (var iter625 in this.updateAttributes) {
      if (this.updateAttributes.hasOwnProperty(iter625)) {
        iter625 = this.updateAttributes[iter625];
        output.writeI32(iter625);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.authority !== null && this.authority !== undefined) {
    output.writeFieldBegin('authority', Thrift.Type.STRUCT, 3);
    this.authority.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateSquareAuthorityResponse = function(args) {
  this.updatdAttributes = null;
  this.authority = null;
  if (args) {
    if (args.updatdAttributes !== undefined && args.updatdAttributes !== null) {
      this.updatdAttributes = Thrift.copyList(args.updatdAttributes, [null]);
    }
    if (args.authority !== undefined && args.authority !== null) {
      this.authority = new SquareAuthority(args.authority);
    }
  }
};
UpdateSquareAuthorityResponse.prototype = {};
UpdateSquareAuthorityResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.SET) {
        this.updatdAttributes = [];
        var _rtmp3627 = input.readSetBegin();
        var _size626 = _rtmp3627.size || 0;
        for (var _i628 = 0; _i628 < _size626; ++_i628) {
          var elem629 = null;
          elem629 = input.readI32().value;
          this.updatdAttributes.push(elem629);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authority = new SquareAuthority();
        this.authority.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateSquareAuthorityResponse.prototype.write = function(output) {
  output.writeStructBegin('UpdateSquareAuthorityResponse');
  if (this.updatdAttributes !== null && this.updatdAttributes !== undefined) {
    output.writeFieldBegin('updatdAttributes', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I32, this.updatdAttributes.length);
    for (var iter630 in this.updatdAttributes) {
      if (this.updatdAttributes.hasOwnProperty(iter630)) {
        iter630 = this.updatdAttributes[iter630];
        output.writeI32(iter630);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.authority !== null && this.authority !== undefined) {
    output.writeFieldBegin('authority', Thrift.Type.STRUCT, 2);
    this.authority.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateSquareMemberRelationRequest = function(args) {
  this.squareMid = null;
  this.targetSquareMemberMid = null;
  this.updatedAttrs = null;
  this.relation = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.targetSquareMemberMid !== undefined && args.targetSquareMemberMid !== null) {
      this.targetSquareMemberMid = args.targetSquareMemberMid;
    }
    if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
      this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
    }
    if (args.relation !== undefined && args.relation !== null) {
      this.relation = new SquareMemberRelation(args.relation);
    }
  }
};
UpdateSquareMemberRelationRequest.prototype = {};
UpdateSquareMemberRelationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.targetSquareMemberMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        this.updatedAttrs = [];
        var _rtmp3632 = input.readSetBegin();
        var _size631 = _rtmp3632.size || 0;
        for (var _i633 = 0; _i633 < _size631; ++_i633) {
          var elem634 = null;
          elem634 = input.readI32().value;
          this.updatedAttrs.push(elem634);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.relation = new SquareMemberRelation();
        this.relation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateSquareMemberRelationRequest.prototype.write = function(output) {
  output.writeStructBegin('UpdateSquareMemberRelationRequest');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.targetSquareMemberMid !== null && this.targetSquareMemberMid !== undefined) {
    output.writeFieldBegin('targetSquareMemberMid', Thrift.Type.STRING, 3);
    output.writeString(this.targetSquareMemberMid);
    output.writeFieldEnd();
  }
  if (this.updatedAttrs !== null && this.updatedAttrs !== undefined) {
    output.writeFieldBegin('updatedAttrs', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.I32, this.updatedAttrs.length);
    for (var iter635 in this.updatedAttrs) {
      if (this.updatedAttrs.hasOwnProperty(iter635)) {
        iter635 = this.updatedAttrs[iter635];
        output.writeI32(iter635);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.relation !== null && this.relation !== undefined) {
    output.writeFieldBegin('relation', Thrift.Type.STRUCT, 5);
    this.relation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateSquareMemberRelationResponse = function(args) {
  this.squareMid = null;
  this.targetSquareMemberMid = null;
  this.updatedAttrs = null;
  this.relation = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.targetSquareMemberMid !== undefined && args.targetSquareMemberMid !== null) {
      this.targetSquareMemberMid = args.targetSquareMemberMid;
    }
    if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
      this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
    }
    if (args.relation !== undefined && args.relation !== null) {
      this.relation = new SquareMemberRelation(args.relation);
    }
  }
};
UpdateSquareMemberRelationResponse.prototype = {};
UpdateSquareMemberRelationResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.targetSquareMemberMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        this.updatedAttrs = [];
        var _rtmp3637 = input.readSetBegin();
        var _size636 = _rtmp3637.size || 0;
        for (var _i638 = 0; _i638 < _size636; ++_i638) {
          var elem639 = null;
          elem639 = input.readI32().value;
          this.updatedAttrs.push(elem639);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.relation = new SquareMemberRelation();
        this.relation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateSquareMemberRelationResponse.prototype.write = function(output) {
  output.writeStructBegin('UpdateSquareMemberRelationResponse');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.targetSquareMemberMid !== null && this.targetSquareMemberMid !== undefined) {
    output.writeFieldBegin('targetSquareMemberMid', Thrift.Type.STRING, 2);
    output.writeString(this.targetSquareMemberMid);
    output.writeFieldEnd();
  }
  if (this.updatedAttrs !== null && this.updatedAttrs !== undefined) {
    output.writeFieldBegin('updatedAttrs', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.I32, this.updatedAttrs.length);
    for (var iter640 in this.updatedAttrs) {
      if (this.updatedAttrs.hasOwnProperty(iter640)) {
        iter640 = this.updatedAttrs[iter640];
        output.writeI32(iter640);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.relation !== null && this.relation !== undefined) {
    output.writeFieldBegin('relation', Thrift.Type.STRUCT, 4);
    this.relation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportSquareRequest = function(args) {
  this.squareMid = null;
  this.reportType = null;
  this.otherReason = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.reportType !== undefined && args.reportType !== null) {
      this.reportType = args.reportType;
    }
    if (args.otherReason !== undefined && args.otherReason !== null) {
      this.otherReason = args.otherReason;
    }
  }
};
ReportSquareRequest.prototype = {};
ReportSquareRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.reportType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.otherReason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportSquareRequest.prototype.write = function(output) {
  output.writeStructBegin('ReportSquareRequest');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.reportType !== null && this.reportType !== undefined) {
    output.writeFieldBegin('reportType', Thrift.Type.I32, 3);
    output.writeI32(this.reportType);
    output.writeFieldEnd();
  }
  if (this.otherReason !== null && this.otherReason !== undefined) {
    output.writeFieldBegin('otherReason', Thrift.Type.STRING, 4);
    output.writeString(this.otherReason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportSquareResponse = function(args) {
};
ReportSquareResponse.prototype = {};
ReportSquareResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportSquareResponse.prototype.write = function(output) {
  output.writeStructBegin('ReportSquareResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportSquareChatRequest = function(args) {
  this.squareMid = null;
  this.squareChatMid = null;
  this.reportType = null;
  this.otherReason = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.reportType !== undefined && args.reportType !== null) {
      this.reportType = args.reportType;
    }
    if (args.otherReason !== undefined && args.otherReason !== null) {
      this.otherReason = args.otherReason;
    }
  }
};
ReportSquareChatRequest.prototype = {};
ReportSquareChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.reportType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.otherReason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportSquareChatRequest.prototype.write = function(output) {
  output.writeStructBegin('ReportSquareChatRequest');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 3);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.reportType !== null && this.reportType !== undefined) {
    output.writeFieldBegin('reportType', Thrift.Type.I32, 5);
    output.writeI32(this.reportType);
    output.writeFieldEnd();
  }
  if (this.otherReason !== null && this.otherReason !== undefined) {
    output.writeFieldBegin('otherReason', Thrift.Type.STRING, 6);
    output.writeString(this.otherReason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportSquareChatResponse = function(args) {
};
ReportSquareChatResponse.prototype = {};
ReportSquareChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportSquareChatResponse.prototype.write = function(output) {
  output.writeStructBegin('ReportSquareChatResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportSquareMessageRequest = function(args) {
  this.squareMid = null;
  this.squareChatMid = null;
  this.squareMessageId = null;
  this.reportType = null;
  this.otherReason = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.squareMessageId !== undefined && args.squareMessageId !== null) {
      this.squareMessageId = args.squareMessageId;
    }
    if (args.reportType !== undefined && args.reportType !== null) {
      this.reportType = args.reportType;
    }
    if (args.otherReason !== undefined && args.otherReason !== null) {
      this.otherReason = args.otherReason;
    }
  }
};
ReportSquareMessageRequest.prototype = {};
ReportSquareMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.squareMessageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.reportType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.otherReason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportSquareMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('ReportSquareMessageRequest');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 3);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.squareMessageId !== null && this.squareMessageId !== undefined) {
    output.writeFieldBegin('squareMessageId', Thrift.Type.STRING, 4);
    output.writeString(this.squareMessageId);
    output.writeFieldEnd();
  }
  if (this.reportType !== null && this.reportType !== undefined) {
    output.writeFieldBegin('reportType', Thrift.Type.I32, 5);
    output.writeI32(this.reportType);
    output.writeFieldEnd();
  }
  if (this.otherReason !== null && this.otherReason !== undefined) {
    output.writeFieldBegin('otherReason', Thrift.Type.STRING, 6);
    output.writeString(this.otherReason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportSquareMessageResponse = function(args) {
};
ReportSquareMessageResponse.prototype = {};
ReportSquareMessageResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportSquareMessageResponse.prototype.write = function(output) {
  output.writeStructBegin('ReportSquareMessageResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportSquareMemberRequest = function(args) {
  this.squareMemberMid = null;
  this.reportType = null;
  this.otherReason = null;
  this.squareChatMid = null;
  if (args) {
    if (args.squareMemberMid !== undefined && args.squareMemberMid !== null) {
      this.squareMemberMid = args.squareMemberMid;
    }
    if (args.reportType !== undefined && args.reportType !== null) {
      this.reportType = args.reportType;
    }
    if (args.otherReason !== undefined && args.otherReason !== null) {
      this.otherReason = args.otherReason;
    }
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
  }
};
ReportSquareMemberRequest.prototype = {};
ReportSquareMemberRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMemberMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.reportType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.otherReason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportSquareMemberRequest.prototype.write = function(output) {
  output.writeStructBegin('ReportSquareMemberRequest');
  if (this.squareMemberMid !== null && this.squareMemberMid !== undefined) {
    output.writeFieldBegin('squareMemberMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMemberMid);
    output.writeFieldEnd();
  }
  if (this.reportType !== null && this.reportType !== undefined) {
    output.writeFieldBegin('reportType', Thrift.Type.I32, 3);
    output.writeI32(this.reportType);
    output.writeFieldEnd();
  }
  if (this.otherReason !== null && this.otherReason !== undefined) {
    output.writeFieldBegin('otherReason', Thrift.Type.STRING, 4);
    output.writeString(this.otherReason);
    output.writeFieldEnd();
  }
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 5);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportSquareMemberResponse = function(args) {
};
ReportSquareMemberResponse.prototype = {};
ReportSquareMemberResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportSquareMemberResponse.prototype.write = function(output) {
  output.writeStructBegin('ReportSquareMemberResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareRequest = function(args) {
  this.mid = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
GetSquareRequest.prototype = {};
GetSquareRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareRequest.prototype.write = function(output) {
  output.writeStructBegin('GetSquareRequest');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareResponse = function(args) {
  this.square = null;
  this.myMembership = null;
  this.squareAuthority = null;
  this.squareStatus = null;
  this.squareFeatureSet = null;
  this.noteStatus = null;
  if (args) {
    if (args.square !== undefined && args.square !== null) {
      this.square = new Square(args.square);
    }
    if (args.myMembership !== undefined && args.myMembership !== null) {
      this.myMembership = new SquareMember(args.myMembership);
    }
    if (args.squareAuthority !== undefined && args.squareAuthority !== null) {
      this.squareAuthority = new SquareAuthority(args.squareAuthority);
    }
    if (args.squareStatus !== undefined && args.squareStatus !== null) {
      this.squareStatus = new SquareStatus(args.squareStatus);
    }
    if (args.squareFeatureSet !== undefined && args.squareFeatureSet !== null) {
      this.squareFeatureSet = new SquareFeatureSet(args.squareFeatureSet);
    }
    if (args.noteStatus !== undefined && args.noteStatus !== null) {
      this.noteStatus = new NoteStatus(args.noteStatus);
    }
  }
};
GetSquareResponse.prototype = {};
GetSquareResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.square = new Square();
        this.square.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.myMembership = new SquareMember();
        this.myMembership.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareAuthority = new SquareAuthority();
        this.squareAuthority.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareStatus = new SquareStatus();
        this.squareStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareFeatureSet = new SquareFeatureSet();
        this.squareFeatureSet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.noteStatus = new NoteStatus();
        this.noteStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareResponse.prototype.write = function(output) {
  output.writeStructBegin('GetSquareResponse');
  if (this.square !== null && this.square !== undefined) {
    output.writeFieldBegin('square', Thrift.Type.STRUCT, 1);
    this.square.write(output);
    output.writeFieldEnd();
  }
  if (this.myMembership !== null && this.myMembership !== undefined) {
    output.writeFieldBegin('myMembership', Thrift.Type.STRUCT, 2);
    this.myMembership.write(output);
    output.writeFieldEnd();
  }
  if (this.squareAuthority !== null && this.squareAuthority !== undefined) {
    output.writeFieldBegin('squareAuthority', Thrift.Type.STRUCT, 3);
    this.squareAuthority.write(output);
    output.writeFieldEnd();
  }
  if (this.squareStatus !== null && this.squareStatus !== undefined) {
    output.writeFieldBegin('squareStatus', Thrift.Type.STRUCT, 4);
    this.squareStatus.write(output);
    output.writeFieldEnd();
  }
  if (this.squareFeatureSet !== null && this.squareFeatureSet !== undefined) {
    output.writeFieldBegin('squareFeatureSet', Thrift.Type.STRUCT, 5);
    this.squareFeatureSet.write(output);
    output.writeFieldEnd();
  }
  if (this.noteStatus !== null && this.noteStatus !== undefined) {
    output.writeFieldBegin('noteStatus', Thrift.Type.STRUCT, 6);
    this.noteStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareStatusRequest = function(args) {
  this.squareMid = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
  }
};
GetSquareStatusRequest.prototype = {};
GetSquareStatusRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareStatusRequest.prototype.write = function(output) {
  output.writeStructBegin('GetSquareStatusRequest');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareStatusResponse = function(args) {
  this.squareStatus = null;
  if (args) {
    if (args.squareStatus !== undefined && args.squareStatus !== null) {
      this.squareStatus = new SquareStatus(args.squareStatus);
    }
  }
};
GetSquareStatusResponse.prototype = {};
GetSquareStatusResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareStatus = new SquareStatus();
        this.squareStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareStatusResponse.prototype.write = function(output) {
  output.writeStructBegin('GetSquareStatusResponse');
  if (this.squareStatus !== null && this.squareStatus !== undefined) {
    output.writeFieldBegin('squareStatus', Thrift.Type.STRUCT, 1);
    this.squareStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetNoteStatusRequest = function(args) {
  this.squareMid = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
  }
};
GetNoteStatusRequest.prototype = {};
GetNoteStatusRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetNoteStatusRequest.prototype.write = function(output) {
  output.writeStructBegin('GetNoteStatusRequest');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetNoteStatusResponse = function(args) {
  this.squareMid = null;
  this.status = null;
  if (args) {
    if (args.squareMid !== undefined && args.squareMid !== null) {
      this.squareMid = args.squareMid;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = new NoteStatus(args.status);
    }
  }
};
GetNoteStatusResponse.prototype = {};
GetNoteStatusResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.squareMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new NoteStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetNoteStatusResponse.prototype.write = function(output) {
  output.writeStructBegin('GetNoteStatusResponse');
  if (this.squareMid !== null && this.squareMid !== undefined) {
    output.writeFieldBegin('squareMid', Thrift.Type.STRING, 1);
    output.writeString(this.squareMid);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 2);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateSquareChatAnnouncementRequest = function(args) {
  this.reqSeq = null;
  this.squareChatMid = null;
  this.squareChatAnnouncement = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.squareChatAnnouncement !== undefined && args.squareChatAnnouncement !== null) {
      this.squareChatAnnouncement = new SquareChatAnnouncement(args.squareChatAnnouncement);
    }
  }
};
CreateSquareChatAnnouncementRequest.prototype = {};
CreateSquareChatAnnouncementRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.squareChatAnnouncement = new SquareChatAnnouncement();
        this.squareChatAnnouncement.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateSquareChatAnnouncementRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateSquareChatAnnouncementRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.squareChatAnnouncement !== null && this.squareChatAnnouncement !== undefined) {
    output.writeFieldBegin('squareChatAnnouncement', Thrift.Type.STRUCT, 3);
    this.squareChatAnnouncement.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateSquareChatAnnouncementResponse = function(args) {
  this.announcement = null;
  if (args) {
    if (args.announcement !== undefined && args.announcement !== null) {
      this.announcement = new SquareChatAnnouncement(args.announcement);
    }
  }
};
CreateSquareChatAnnouncementResponse.prototype = {};
CreateSquareChatAnnouncementResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.announcement = new SquareChatAnnouncement();
        this.announcement.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateSquareChatAnnouncementResponse.prototype.write = function(output) {
  output.writeStructBegin('CreateSquareChatAnnouncementResponse');
  if (this.announcement !== null && this.announcement !== undefined) {
    output.writeFieldBegin('announcement', Thrift.Type.STRUCT, 1);
    this.announcement.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteSquareChatAnnouncementRequest = function(args) {
  this.squareChatMid = null;
  this.announcementSeq = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
    if (args.announcementSeq !== undefined && args.announcementSeq !== null) {
      this.announcementSeq = args.announcementSeq;
    }
  }
};
DeleteSquareChatAnnouncementRequest.prototype = {};
DeleteSquareChatAnnouncementRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.announcementSeq = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteSquareChatAnnouncementRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteSquareChatAnnouncementRequest');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  if (this.announcementSeq !== null && this.announcementSeq !== undefined) {
    output.writeFieldBegin('announcementSeq', Thrift.Type.I64, 3);
    output.writeI64(this.announcementSeq);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteSquareChatAnnouncementResponse = function(args) {
};
DeleteSquareChatAnnouncementResponse.prototype = {};
DeleteSquareChatAnnouncementResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteSquareChatAnnouncementResponse.prototype.write = function(output) {
  output.writeStructBegin('DeleteSquareChatAnnouncementResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareChatAnnouncementsRequest = function(args) {
  this.squareChatMid = null;
  if (args) {
    if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
      this.squareChatMid = args.squareChatMid;
    }
  }
};
GetSquareChatAnnouncementsRequest.prototype = {};
GetSquareChatAnnouncementsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.squareChatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareChatAnnouncementsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetSquareChatAnnouncementsRequest');
  if (this.squareChatMid !== null && this.squareChatMid !== undefined) {
    output.writeFieldBegin('squareChatMid', Thrift.Type.STRING, 2);
    output.writeString(this.squareChatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetSquareChatAnnouncementsResponse = function(args) {
  this.announcements = null;
  if (args) {
    if (args.announcements !== undefined && args.announcements !== null) {
      this.announcements = Thrift.copyList(args.announcements, [SquareChatAnnouncement]);
    }
  }
};
GetSquareChatAnnouncementsResponse.prototype = {};
GetSquareChatAnnouncementsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.announcements = [];
        var _rtmp3642 = input.readListBegin();
        var _size641 = _rtmp3642.size || 0;
        for (var _i643 = 0; _i643 < _size641; ++_i643) {
          var elem644 = null;
          elem644 = new SquareChatAnnouncement();
          elem644.read(input);
          this.announcements.push(elem644);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSquareChatAnnouncementsResponse.prototype.write = function(output) {
  output.writeStructBegin('GetSquareChatAnnouncementsResponse');
  if (this.announcements !== null && this.announcements !== undefined) {
    output.writeFieldBegin('announcements', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.announcements.length);
    for (var iter645 in this.announcements) {
      if (this.announcements.hasOwnProperty(iter645)) {
        iter645 = this.announcements[iter645];
        iter645.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetJoinedSquareChatsRequest = function(args) {
  this.continuationToken = null;
  this.limit = null;
  if (args) {
    if (args.continuationToken !== undefined && args.continuationToken !== null) {
      this.continuationToken = args.continuationToken;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
GetJoinedSquareChatsRequest.prototype = {};
GetJoinedSquareChatsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.continuationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetJoinedSquareChatsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetJoinedSquareChatsRequest');
  if (this.continuationToken !== null && this.continuationToken !== undefined) {
    output.writeFieldBegin('continuationToken', Thrift.Type.STRING, 2);
    output.writeString(this.continuationToken);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 3);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetJoinedSquareChatsResponse = function(args) {
  this.chats = null;
  this.chatMembers = null;
  this.statuses = null;
  this.continuationToken = null;
  if (args) {
    if (args.chats !== undefined && args.chats !== null) {
      this.chats = Thrift.copyList(args.chats, [SquareChat]);
    }
    if (args.chatMembers !== undefined && args.chatMembers !== null) {
      this.chatMembers = Thrift.copyMap(args.chatMembers, [SquareChatMember]);
    }
    if (args.statuses !== undefined && args.statuses !== null) {
      this.statuses = Thrift.copyMap(args.statuses, [SquareChatStatus]);
    }
    if (args.continuationToken !== undefined && args.continuationToken !== null) {
      this.continuationToken = args.continuationToken;
    }
  }
};
GetJoinedSquareChatsResponse.prototype = {};
GetJoinedSquareChatsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.chats = [];
        var _rtmp3647 = input.readListBegin();
        var _size646 = _rtmp3647.size || 0;
        for (var _i648 = 0; _i648 < _size646; ++_i648) {
          var elem649 = null;
          elem649 = new SquareChat();
          elem649.read(input);
          this.chats.push(elem649);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.chatMembers = {};
        var _rtmp3651 = input.readMapBegin();
        var _size650 = _rtmp3651.size || 0;
        for (var _i652 = 0; _i652 < _size650; ++_i652) {
          if (_i652 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key653 = null;
          var val654 = null;
          key653 = input.readString().value;
          val654 = new SquareChatMember();
          val654.read(input);
          this.chatMembers[key653] = val654;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.statuses = {};
        var _rtmp3656 = input.readMapBegin();
        var _size655 = _rtmp3656.size || 0;
        for (var _i657 = 0; _i657 < _size655; ++_i657) {
          if (_i657 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key658 = null;
          var val659 = null;
          key658 = input.readString().value;
          val659 = new SquareChatStatus();
          val659.read(input);
          this.statuses[key658] = val659;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.continuationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetJoinedSquareChatsResponse.prototype.write = function(output) {
  output.writeStructBegin('GetJoinedSquareChatsResponse');
  if (this.chats !== null && this.chats !== undefined) {
    output.writeFieldBegin('chats', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.chats.length);
    for (var iter660 in this.chats) {
      if (this.chats.hasOwnProperty(iter660)) {
        iter660 = this.chats[iter660];
        iter660.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.chatMembers !== null && this.chatMembers !== undefined) {
    output.writeFieldBegin('chatMembers', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.chatMembers));
    for (var kiter661 in this.chatMembers) {
      if (this.chatMembers.hasOwnProperty(kiter661)) {
        var viter662 = this.chatMembers[kiter661];
        output.writeString(kiter661);
        viter662.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.statuses !== null && this.statuses !== undefined) {
    output.writeFieldBegin('statuses', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.statuses));
    for (var kiter663 in this.statuses) {
      if (this.statuses.hasOwnProperty(kiter663)) {
        var viter664 = this.statuses[kiter663];
        output.writeString(kiter663);
        viter664.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.continuationToken !== null && this.continuationToken !== undefined) {
    output.writeFieldBegin('continuationToken', Thrift.Type.STRING, 4);
    output.writeString(this.continuationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkException = function(args) {
  this.code = null;
  this.reason = null;
  this.parameterMap = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.parameterMap !== undefined && args.parameterMap !== null) {
      this.parameterMap = Thrift.copyMap(args.parameterMap, [null]);
    }
  }
};
Thrift.inherits(TalkException, Thrift.TException);
TalkException.prototype.name = 'TalkException';
TalkException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.parameterMap = {};
        var _rtmp3666 = input.readMapBegin();
        var _size665 = _rtmp3666.size || 0;
        for (var _i667 = 0; _i667 < _size665; ++_i667) {
          if (_i667 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key668 = null;
          var val669 = null;
          key668 = input.readString().value;
          val669 = input.readString().value;
          this.parameterMap[key668] = val669;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkException.prototype.write = function(output) {
  output.writeStructBegin('TalkException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.parameterMap !== null && this.parameterMap !== undefined) {
    output.writeFieldBegin('parameterMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameterMap));
    for (var kiter670 in this.parameterMap) {
      if (this.parameterMap.hasOwnProperty(kiter670)) {
        var viter671 = this.parameterMap[kiter670];
        output.writeString(kiter670);
        output.writeString(viter671);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ShouldSyncException = function(args) {
  this.syncOpRevision = null;
  this.syncScope = null;
  this.syncReason = null;
  this.message = null;
  if (args) {
    if (args.syncOpRevision !== undefined && args.syncOpRevision !== null) {
      this.syncOpRevision = args.syncOpRevision;
    }
    if (args.syncScope !== undefined && args.syncScope !== null) {
      this.syncScope = new SyncScope(args.syncScope);
    }
    if (args.syncReason !== undefined && args.syncReason !== null) {
      this.syncReason = args.syncReason;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(ShouldSyncException, Thrift.TException);
ShouldSyncException.prototype.name = 'ShouldSyncException';
ShouldSyncException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.syncOpRevision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.syncScope = new SyncScope();
        this.syncScope.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.syncReason = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShouldSyncException.prototype.write = function(output) {
  output.writeStructBegin('ShouldSyncException');
  if (this.syncOpRevision !== null && this.syncOpRevision !== undefined) {
    output.writeFieldBegin('syncOpRevision', Thrift.Type.I64, 1);
    output.writeI64(this.syncOpRevision);
    output.writeFieldEnd();
  }
  if (this.syncScope !== null && this.syncScope !== undefined) {
    output.writeFieldBegin('syncScope', Thrift.Type.STRUCT, 2);
    this.syncScope.write(output);
    output.writeFieldEnd();
  }
  if (this.syncReason !== null && this.syncReason !== undefined) {
    output.writeFieldBegin('syncReason', Thrift.Type.I32, 3);
    output.writeI32(this.syncReason);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 4);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PointException = function(args) {
  this.code = null;
  this.reason = null;
  this.extra = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.extra !== undefined && args.extra !== null) {
      this.extra = Thrift.copyMap(args.extra, [null]);
    }
  }
};
Thrift.inherits(PointException, Thrift.TException);
PointException.prototype.name = 'PointException';
PointException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.extra = {};
        var _rtmp3673 = input.readMapBegin();
        var _size672 = _rtmp3673.size || 0;
        for (var _i674 = 0; _i674 < _size672; ++_i674) {
          if (_i674 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key675 = null;
          var val676 = null;
          key675 = input.readString().value;
          val676 = input.readString().value;
          this.extra[key675] = val676;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PointException.prototype.write = function(output) {
  output.writeStructBegin('PointException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.extra !== null && this.extra !== undefined) {
    output.writeFieldBegin('extra', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extra));
    for (var kiter677 in this.extra) {
      if (this.extra.hasOwnProperty(kiter677)) {
        var viter678 = this.extra[kiter677];
        output.writeString(kiter677);
        output.writeString(viter678);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelException = function(args) {
  this.code = null;
  this.reason = null;
  this.parameterMap = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.parameterMap !== undefined && args.parameterMap !== null) {
      this.parameterMap = Thrift.copyMap(args.parameterMap, [null]);
    }
  }
};
Thrift.inherits(ChannelException, Thrift.TException);
ChannelException.prototype.name = 'ChannelException';
ChannelException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.parameterMap = {};
        var _rtmp3680 = input.readMapBegin();
        var _size679 = _rtmp3680.size || 0;
        for (var _i681 = 0; _i681 < _size679; ++_i681) {
          if (_i681 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key682 = null;
          var val683 = null;
          key682 = input.readString().value;
          val683 = input.readString().value;
          this.parameterMap[key682] = val683;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelException.prototype.write = function(output) {
  output.writeStructBegin('ChannelException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.parameterMap !== null && this.parameterMap !== undefined) {
    output.writeFieldBegin('parameterMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameterMap));
    for (var kiter684 in this.parameterMap) {
      if (this.parameterMap.hasOwnProperty(kiter684)) {
        var viter685 = this.parameterMap[kiter684];
        output.writeString(kiter684);
        output.writeString(viter685);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SquareException = function(args) {
  this.errorCode = null;
  this.errorExtraInfo = null;
  this.reason = null;
  if (args) {
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
    if (args.errorExtraInfo !== undefined && args.errorExtraInfo !== null) {
      this.errorExtraInfo = new ErrorExtraInfo(args.errorExtraInfo);
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
Thrift.inherits(SquareException, Thrift.TException);
SquareException.prototype.name = 'SquareException';
SquareException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.errorExtraInfo = new ErrorExtraInfo();
        this.errorExtraInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SquareException.prototype.write = function(output) {
  output.writeStructBegin('SquareException');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.errorExtraInfo !== null && this.errorExtraInfo !== undefined) {
    output.writeFieldBegin('errorExtraInfo', Thrift.Type.STRUCT, 2);
    this.errorExtraInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 3);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UniversalNotificationServiceException = function(args) {
  this.code = null;
  this.reason = null;
  this.parameterMap = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.parameterMap !== undefined && args.parameterMap !== null) {
      this.parameterMap = Thrift.copyMap(args.parameterMap, [null]);
    }
  }
};
Thrift.inherits(UniversalNotificationServiceException, Thrift.TException);
UniversalNotificationServiceException.prototype.name = 'UniversalNotificationServiceException';
UniversalNotificationServiceException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.parameterMap = {};
        var _rtmp3687 = input.readMapBegin();
        var _size686 = _rtmp3687.size || 0;
        for (var _i688 = 0; _i688 < _size686; ++_i688) {
          if (_i688 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key689 = null;
          var val690 = null;
          key689 = input.readString().value;
          val690 = input.readString().value;
          this.parameterMap[key689] = val690;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UniversalNotificationServiceException.prototype.write = function(output) {
  output.writeStructBegin('UniversalNotificationServiceException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.parameterMap !== null && this.parameterMap !== undefined) {
    output.writeFieldBegin('parameterMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameterMap));
    for (var kiter691 in this.parameterMap) {
      if (this.parameterMap.hasOwnProperty(kiter691)) {
        var viter692 = this.parameterMap[kiter691];
        output.writeString(kiter691);
        output.writeString(viter692);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateBuddyProfileResult = function(args) {
  this.requestId = null;
  this.state = null;
  this.eventNo = null;
  this.receiverCount = null;
  this.successCount = null;
  this.failCount = null;
  this.cancelCount = null;
  this.unregisterCount = null;
  this.timestamp = null;
  this.message = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.eventNo !== undefined && args.eventNo !== null) {
      this.eventNo = args.eventNo;
    }
    if (args.receiverCount !== undefined && args.receiverCount !== null) {
      this.receiverCount = args.receiverCount;
    }
    if (args.successCount !== undefined && args.successCount !== null) {
      this.successCount = args.successCount;
    }
    if (args.failCount !== undefined && args.failCount !== null) {
      this.failCount = args.failCount;
    }
    if (args.cancelCount !== undefined && args.cancelCount !== null) {
      this.cancelCount = args.cancelCount;
    }
    if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
      this.unregisterCount = args.unregisterCount;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
UpdateBuddyProfileResult.prototype = {};
UpdateBuddyProfileResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.eventNo = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.receiverCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.successCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.failCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.cancelCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.unregisterCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateBuddyProfileResult.prototype.write = function(output) {
  output.writeStructBegin('UpdateBuddyProfileResult');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.eventNo !== null && this.eventNo !== undefined) {
    output.writeFieldBegin('eventNo', Thrift.Type.I32, 3);
    output.writeI32(this.eventNo);
    output.writeFieldEnd();
  }
  if (this.receiverCount !== null && this.receiverCount !== undefined) {
    output.writeFieldBegin('receiverCount', Thrift.Type.I64, 11);
    output.writeI64(this.receiverCount);
    output.writeFieldEnd();
  }
  if (this.successCount !== null && this.successCount !== undefined) {
    output.writeFieldBegin('successCount', Thrift.Type.I64, 12);
    output.writeI64(this.successCount);
    output.writeFieldEnd();
  }
  if (this.failCount !== null && this.failCount !== undefined) {
    output.writeFieldBegin('failCount', Thrift.Type.I64, 13);
    output.writeI64(this.failCount);
    output.writeFieldEnd();
  }
  if (this.cancelCount !== null && this.cancelCount !== undefined) {
    output.writeFieldBegin('cancelCount', Thrift.Type.I64, 14);
    output.writeI64(this.cancelCount);
    output.writeFieldEnd();
  }
  if (this.unregisterCount !== null && this.unregisterCount !== undefined) {
    output.writeFieldBegin('unregisterCount', Thrift.Type.I64, 15);
    output.writeI64(this.unregisterCount);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 21);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 22);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserAuthStatus = function(args) {
  this.phoneNumberRegistered = null;
  this.registeredSnsIdTypes = null;
  if (args) {
    if (args.phoneNumberRegistered !== undefined && args.phoneNumberRegistered !== null) {
      this.phoneNumberRegistered = args.phoneNumberRegistered;
    }
    if (args.registeredSnsIdTypes !== undefined && args.registeredSnsIdTypes !== null) {
      this.registeredSnsIdTypes = Thrift.copyList(args.registeredSnsIdTypes, [null]);
    }
  }
};
UserAuthStatus.prototype = {};
UserAuthStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.phoneNumberRegistered = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.registeredSnsIdTypes = [];
        var _rtmp3694 = input.readListBegin();
        var _size693 = _rtmp3694.size || 0;
        for (var _i695 = 0; _i695 < _size693; ++_i695) {
          var elem696 = null;
          elem696 = input.readI32().value;
          this.registeredSnsIdTypes.push(elem696);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserAuthStatus.prototype.write = function(output) {
  output.writeStructBegin('UserAuthStatus');
  if (this.phoneNumberRegistered !== null && this.phoneNumberRegistered !== undefined) {
    output.writeFieldBegin('phoneNumberRegistered', Thrift.Type.BOOL, 1);
    output.writeBool(this.phoneNumberRegistered);
    output.writeFieldEnd();
  }
  if (this.registeredSnsIdTypes !== null && this.registeredSnsIdTypes !== undefined) {
    output.writeFieldBegin('registeredSnsIdTypes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.registeredSnsIdTypes.length);
    for (var iter697 in this.registeredSnsIdTypes) {
      if (this.registeredSnsIdTypes.hasOwnProperty(iter697)) {
        iter697 = this.registeredSnsIdTypes[iter697];
        output.writeI32(iter697);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WapInvitation = function(args) {
  this.type = null;
  this.inviteeEmail = null;
  this.inviterMid = null;
  this.roomMid = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.inviteeEmail !== undefined && args.inviteeEmail !== null) {
      this.inviteeEmail = args.inviteeEmail;
    }
    if (args.inviterMid !== undefined && args.inviterMid !== null) {
      this.inviterMid = args.inviterMid;
    }
    if (args.roomMid !== undefined && args.roomMid !== null) {
      this.roomMid = args.roomMid;
    }
  }
};
WapInvitation.prototype = {};
WapInvitation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.inviteeEmail = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.inviterMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.roomMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WapInvitation.prototype.write = function(output) {
  output.writeStructBegin('WapInvitation');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.inviteeEmail !== null && this.inviteeEmail !== undefined) {
    output.writeFieldBegin('inviteeEmail', Thrift.Type.STRING, 10);
    output.writeString(this.inviteeEmail);
    output.writeFieldEnd();
  }
  if (this.inviterMid !== null && this.inviterMid !== undefined) {
    output.writeFieldBegin('inviterMid', Thrift.Type.STRING, 11);
    output.writeString(this.inviterMid);
    output.writeFieldEnd();
  }
  if (this.roomMid !== null && this.roomMid !== undefined) {
    output.writeFieldBegin('roomMid', Thrift.Type.STRING, 12);
    output.writeString(this.roomMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GroupCall = function(args) {
  this.online = null;
  this.chatMid = null;
  this.hostMids = null;
  this.memberMids = null;
  this.started = null;
  this.mediaType = null;
  if (args) {
    if (args.online !== undefined && args.online !== null) {
      this.online = args.online;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.hostMids !== undefined && args.hostMids !== null) {
      this.hostMids = args.hostMids;
    }
    if (args.memberMids !== undefined && args.memberMids !== null) {
      this.memberMids = Thrift.copyList(args.memberMids, [null]);
    }
    if (args.started !== undefined && args.started !== null) {
      this.started = args.started;
    }
    if (args.mediaType !== undefined && args.mediaType !== null) {
      this.mediaType = args.mediaType;
    }
  }
};
GroupCall.prototype = {};
GroupCall.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.online = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hostMids = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.memberMids = [];
        var _rtmp3699 = input.readListBegin();
        var _size698 = _rtmp3699.size || 0;
        for (var _i700 = 0; _i700 < _size698; ++_i700) {
          var elem701 = null;
          elem701 = input.readString().value;
          this.memberMids.push(elem701);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.started = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.mediaType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupCall.prototype.write = function(output) {
  output.writeStructBegin('GroupCall');
  if (this.online !== null && this.online !== undefined) {
    output.writeFieldBegin('online', Thrift.Type.BOOL, 1);
    output.writeBool(this.online);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.hostMids !== null && this.hostMids !== undefined) {
    output.writeFieldBegin('hostMids', Thrift.Type.STRING, 3);
    output.writeString(this.hostMids);
    output.writeFieldEnd();
  }
  if (this.memberMids !== null && this.memberMids !== undefined) {
    output.writeFieldBegin('memberMids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.memberMids.length);
    for (var iter702 in this.memberMids) {
      if (this.memberMids.hasOwnProperty(iter702)) {
        iter702 = this.memberMids[iter702];
        output.writeString(iter702);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.started !== null && this.started !== undefined) {
    output.writeFieldBegin('started', Thrift.Type.I64, 5);
    output.writeI64(this.started);
    output.writeFieldEnd();
  }
  if (this.mediaType !== null && this.mediaType !== undefined) {
    output.writeFieldBegin('mediaType', Thrift.Type.I32, 6);
    output.writeI32(this.mediaType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GroupCallRoute = function(args) {
  this.token = null;
  this.cscf = null;
  this.mix = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.cscf !== undefined && args.cscf !== null) {
      this.cscf = new CallHost(args.cscf);
    }
    if (args.mix !== undefined && args.mix !== null) {
      this.mix = new CallHost(args.mix);
    }
  }
};
GroupCallRoute.prototype = {};
GroupCallRoute.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.cscf = new CallHost();
        this.cscf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mix = new CallHost();
        this.mix.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupCallRoute.prototype.write = function(output) {
  output.writeStructBegin('GroupCallRoute');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.cscf !== null && this.cscf !== undefined) {
    output.writeFieldBegin('cscf', Thrift.Type.STRUCT, 2);
    this.cscf.write(output);
    output.writeFieldEnd();
  }
  if (this.mix !== null && this.mix !== undefined) {
    output.writeFieldBegin('mix', Thrift.Type.STRUCT, 3);
    this.mix.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

