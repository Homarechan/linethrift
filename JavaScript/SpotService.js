//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

SpotService_lookupByPhoneNumber_args = function(args) {
  this.countryAreaCode = null;
  this.phoneNumber = null;
  if (args) {
    if (args.countryAreaCode !== undefined && args.countryAreaCode !== null) {
      this.countryAreaCode = args.countryAreaCode;
    }
    if (args.phoneNumber !== undefined && args.phoneNumber !== null) {
      this.phoneNumber = args.phoneNumber;
    }
  }
};
SpotService_lookupByPhoneNumber_args.prototype = {};
SpotService_lookupByPhoneNumber_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.countryAreaCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.phoneNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpotService_lookupByPhoneNumber_args.prototype.write = function(output) {
  output.writeStructBegin('SpotService_lookupByPhoneNumber_args');
  if (this.countryAreaCode !== null && this.countryAreaCode !== undefined) {
    output.writeFieldBegin('countryAreaCode', Thrift.Type.STRING, 2);
    output.writeString(this.countryAreaCode);
    output.writeFieldEnd();
  }
  if (this.phoneNumber !== null && this.phoneNumber !== undefined) {
    output.writeFieldBegin('phoneNumber', Thrift.Type.STRING, 3);
    output.writeString(this.phoneNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SpotService_lookupByPhoneNumber_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SpotPhoneNumberResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
SpotService_lookupByPhoneNumber_result.prototype = {};
SpotService_lookupByPhoneNumber_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SpotPhoneNumberResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpotService_lookupByPhoneNumber_result.prototype.write = function(output) {
  output.writeStructBegin('SpotService_lookupByPhoneNumber_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SpotService_lookupNearby_args = function(args) {
  this.location = null;
  this.category = null;
  this.query = null;
  this.countryAreaCode = null;
  if (args) {
    if (args.location !== undefined && args.location !== null) {
      this.location = new Location(args.location);
    }
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.countryAreaCode !== undefined && args.countryAreaCode !== null) {
      this.countryAreaCode = args.countryAreaCode;
    }
  }
};
SpotService_lookupNearby_args.prototype = {};
SpotService_lookupNearby_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.category = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.countryAreaCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpotService_lookupNearby_args.prototype.write = function(output) {
  output.writeStructBegin('SpotService_lookupNearby_args');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 2);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.I32, 3);
    output.writeI32(this.category);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 4);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.countryAreaCode !== null && this.countryAreaCode !== undefined) {
    output.writeFieldBegin('countryAreaCode', Thrift.Type.STRING, 5);
    output.writeString(this.countryAreaCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SpotService_lookupNearby_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SpotNearbyResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
SpotService_lookupNearby_result.prototype = {};
SpotService_lookupNearby_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SpotNearbyResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpotService_lookupNearby_result.prototype.write = function(output) {
  output.writeStructBegin('SpotService_lookupNearby_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SpotServiceClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
SpotServiceClient.prototype = {};

SpotServiceClient.prototype.lookupByPhoneNumber = function(countryAreaCode, phoneNumber, callback) {
  this.send_lookupByPhoneNumber(countryAreaCode, phoneNumber, callback); 
  if (!callback) {
    return this.recv_lookupByPhoneNumber();
  }
};

SpotServiceClient.prototype.send_lookupByPhoneNumber = function(countryAreaCode, phoneNumber, callback) {
  var params = {
    countryAreaCode: countryAreaCode,
    phoneNumber: phoneNumber
  };
  var args = new SpotService_lookupByPhoneNumber_args(params);
  try {
    this.output.writeMessageBegin('lookupByPhoneNumber', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_lookupByPhoneNumber();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SpotServiceClient.prototype.recv_lookupByPhoneNumber = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SpotService_lookupByPhoneNumber_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'lookupByPhoneNumber failed: unknown result';
};

SpotServiceClient.prototype.lookupNearby = function(location, category, query, countryAreaCode, callback) {
  this.send_lookupNearby(location, category, query, countryAreaCode, callback); 
  if (!callback) {
    return this.recv_lookupNearby();
  }
};

SpotServiceClient.prototype.send_lookupNearby = function(location, category, query, countryAreaCode, callback) {
  var params = {
    location: location,
    category: category,
    query: query,
    countryAreaCode: countryAreaCode
  };
  var args = new SpotService_lookupNearby_args(params);
  try {
    this.output.writeMessageBegin('lookupNearby', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_lookupNearby();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SpotServiceClient.prototype.recv_lookupNearby = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SpotService_lookupNearby_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'lookupNearby failed: unknown result';
};
