//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

CallService_getUserStatus_args = function(args) {
  this.mid = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
CallService_getUserStatus_args.prototype = {};
CallService_getUserStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getUserStatus_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getUserStatus_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getUserStatus_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getUserStatus_result.prototype = {};
CallService_getUserStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getUserStatus_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getUserStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_updateProfileAttributeForChannel_args = function(args) {
  this.profileAttribute = null;
  this.value = null;
  if (args) {
    if (args.profileAttribute !== undefined && args.profileAttribute !== null) {
      this.profileAttribute = args.profileAttribute;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
CallService_updateProfileAttributeForChannel_args.prototype = {};
CallService_updateProfileAttributeForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.profileAttribute = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_updateProfileAttributeForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_updateProfileAttributeForChannel_args');
  if (this.profileAttribute !== null && this.profileAttribute !== undefined) {
    output.writeFieldBegin('profileAttribute', Thrift.Type.I32, 2);
    output.writeI32(this.profileAttribute);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_updateProfileAttributeForChannel_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_updateProfileAttributeForChannel_result.prototype = {};
CallService_updateProfileAttributeForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_updateProfileAttributeForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_updateProfileAttributeForChannel_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_updateExtendedProfileAttribute_args = function(args) {
  this.attr = null;
  this.extendedProfile = null;
  if (args) {
    if (args.attr !== undefined && args.attr !== null) {
      this.attr = args.attr;
    }
    if (args.extendedProfile !== undefined && args.extendedProfile !== null) {
      this.extendedProfile = new ExtendedProfile(args.extendedProfile);
    }
  }
};
CallService_updateExtendedProfileAttribute_args.prototype = {};
CallService_updateExtendedProfileAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.attr = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.extendedProfile = new ExtendedProfile();
        this.extendedProfile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_updateExtendedProfileAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_updateExtendedProfileAttribute_args');
  if (this.attr !== null && this.attr !== undefined) {
    output.writeFieldBegin('attr', Thrift.Type.I32, 1);
    output.writeI32(this.attr);
    output.writeFieldEnd();
  }
  if (this.extendedProfile !== null && this.extendedProfile !== undefined) {
    output.writeFieldBegin('extendedProfile', Thrift.Type.STRUCT, 2);
    this.extendedProfile.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_updateExtendedProfileAttribute_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_updateExtendedProfileAttribute_result.prototype = {};
CallService_updateExtendedProfileAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_updateExtendedProfileAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_updateExtendedProfileAttribute_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getAllSimpleChannelContacts_args = function(args) {
  this.statusSticonFallbackDisabled = null;
  if (args) {
    if (args.statusSticonFallbackDisabled !== undefined && args.statusSticonFallbackDisabled !== null) {
      this.statusSticonFallbackDisabled = args.statusSticonFallbackDisabled;
    }
  }
};
CallService_getAllSimpleChannelContacts_args.prototype = {};
CallService_getAllSimpleChannelContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.statusSticonFallbackDisabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getAllSimpleChannelContacts_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getAllSimpleChannelContacts_args');
  if (this.statusSticonFallbackDisabled !== null && this.statusSticonFallbackDisabled !== undefined) {
    output.writeFieldBegin('statusSticonFallbackDisabled', Thrift.Type.BOOL, 1);
    output.writeBool(this.statusSticonFallbackDisabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getAllSimpleChannelContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SimpleChannelContact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getAllSimpleChannelContacts_result.prototype = {};
CallService_getAllSimpleChannelContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31531 = input.readListBegin();
        var _size1530 = _rtmp31531.size || 0;
        for (var _i1532 = 0; _i1532 < _size1530; ++_i1532) {
          var elem1533 = null;
          elem1533 = new SimpleChannelContact();
          elem1533.read(input);
          this.success.push(elem1533);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getAllSimpleChannelContacts_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getAllSimpleChannelContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1534 in this.success) {
      if (this.success.hasOwnProperty(iter1534)) {
        iter1534 = this.success[iter1534];
        iter1534.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getUserIdentities_args = function(args) {
};
CallService_getUserIdentities_args.prototype = {};
CallService_getUserIdentities_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getUserIdentities_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getUserIdentities_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getUserIdentities_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getUserIdentities_result.prototype = {};
CallService_getUserIdentities_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp31536 = input.readMapBegin();
        var _size1535 = _rtmp31536.size || 0;
        for (var _i1537 = 0; _i1537 < _size1535; ++_i1537) {
          if (_i1537 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1538 = null;
          var val1539 = null;
          key1538 = input.readI32().value;
          val1539 = input.readString().value;
          this.success[key1538] = val1539;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getUserIdentities_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getUserIdentities_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter1540 in this.success) {
      if (this.success.hasOwnProperty(kiter1540)) {
        var viter1541 = this.success[kiter1540];
        output.writeI32(kiter1540);
        output.writeString(viter1541);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_markPaidCallAd_args = function(args) {
  this.dialedNumber = null;
  this.language = null;
  this.disableCallerId = null;
  if (args) {
    if (args.dialedNumber !== undefined && args.dialedNumber !== null) {
      this.dialedNumber = args.dialedNumber;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.disableCallerId !== undefined && args.disableCallerId !== null) {
      this.disableCallerId = args.disableCallerId;
    }
  }
};
CallService_markPaidCallAd_args.prototype = {};
CallService_markPaidCallAd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dialedNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.disableCallerId = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_markPaidCallAd_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_markPaidCallAd_args');
  if (this.dialedNumber !== null && this.dialedNumber !== undefined) {
    output.writeFieldBegin('dialedNumber', Thrift.Type.STRING, 2);
    output.writeString(this.dialedNumber);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.disableCallerId !== null && this.disableCallerId !== undefined) {
    output.writeFieldBegin('disableCallerId', Thrift.Type.BOOL, 4);
    output.writeBool(this.disableCallerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_markPaidCallAd_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PaidCallDialing(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_markPaidCallAd_result.prototype = {};
CallService_markPaidCallAd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PaidCallDialing();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_markPaidCallAd_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_markPaidCallAd_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_isGroupMember_args = function(args) {
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
CallService_isGroupMember_args.prototype = {};
CallService_isGroupMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_isGroupMember_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_isGroupMember_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 1);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_isGroupMember_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_isGroupMember_result.prototype = {};
CallService_isGroupMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_isGroupMember_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_isGroupMember_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPhoneInfoFromPhoneNumber_args = function(args) {
  this.region = null;
  this.phoneNumber = null;
  if (args) {
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.phoneNumber !== undefined && args.phoneNumber !== null) {
      this.phoneNumber = args.phoneNumber;
    }
  }
};
CallService_getPhoneInfoFromPhoneNumber_args.prototype = {};
CallService_getPhoneInfoFromPhoneNumber_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.phoneNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPhoneInfoFromPhoneNumber_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPhoneInfoFromPhoneNumber_args');
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 1);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.phoneNumber !== null && this.phoneNumber !== undefined) {
    output.writeFieldBegin('phoneNumber', Thrift.Type.STRING, 2);
    output.writeString(this.phoneNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPhoneInfoFromPhoneNumber_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PhoneInfoForChannel(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getPhoneInfoFromPhoneNumber_result.prototype = {};
CallService_getPhoneInfoFromPhoneNumber_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PhoneInfoForChannel();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPhoneInfoFromPhoneNumber_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPhoneInfoFromPhoneNumber_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_redeemPaidCallVoucher_args = function(args) {
  this.serial = null;
  this.language = null;
  if (args) {
    if (args.serial !== undefined && args.serial !== null) {
      this.serial = args.serial;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
  }
};
CallService_redeemPaidCallVoucher_args.prototype = {};
CallService_redeemPaidCallVoucher_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serial = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_redeemPaidCallVoucher_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_redeemPaidCallVoucher_args');
  if (this.serial !== null && this.serial !== undefined) {
    output.writeFieldBegin('serial', Thrift.Type.STRING, 2);
    output.writeString(this.serial);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_redeemPaidCallVoucher_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PaidCallRedeemResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_redeemPaidCallVoucher_result.prototype = {};
CallService_redeemPaidCallVoucher_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PaidCallRedeemResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_redeemPaidCallVoucher_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_redeemPaidCallVoucher_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPreferredDisplayName_args = function(args) {
  this.mids = null;
  if (args) {
    if (args.mids !== undefined && args.mids !== null) {
      this.mids = Thrift.copyList(args.mids, [null]);
    }
  }
};
CallService_getPreferredDisplayName_args.prototype = {};
CallService_getPreferredDisplayName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.mids = [];
        var _rtmp31543 = input.readListBegin();
        var _size1542 = _rtmp31543.size || 0;
        for (var _i1544 = 0; _i1544 < _size1542; ++_i1544) {
          var elem1545 = null;
          elem1545 = input.readString().value;
          this.mids.push(elem1545);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPreferredDisplayName_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPreferredDisplayName_args');
  if (this.mids !== null && this.mids !== undefined) {
    output.writeFieldBegin('mids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter1546 in this.mids) {
      if (this.mids.hasOwnProperty(iter1546)) {
        iter1546 = this.mids[iter1546];
        output.writeString(iter1546);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPreferredDisplayName_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getPreferredDisplayName_result.prototype = {};
CallService_getPreferredDisplayName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp31548 = input.readMapBegin();
        var _size1547 = _rtmp31548.size || 0;
        for (var _i1549 = 0; _i1549 < _size1547; ++_i1549) {
          if (_i1549 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1550 = null;
          var val1551 = null;
          key1550 = input.readString().value;
          val1551 = input.readString().value;
          this.success[key1550] = val1551;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPreferredDisplayName_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPreferredDisplayName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter1552 in this.success) {
      if (this.success.hasOwnProperty(kiter1552)) {
        var viter1553 = this.success[kiter1552];
        output.writeString(kiter1552);
        output.writeString(viter1553);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getContactsForChannel_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
  }
};
CallService_getContactsForChannel_args.prototype = {};
CallService_getContactsForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.ids = [];
        var _rtmp31555 = input.readListBegin();
        var _size1554 = _rtmp31555.size || 0;
        for (var _i1556 = 0; _i1556 < _size1554; ++_i1556) {
          var elem1557 = null;
          elem1557 = input.readString().value;
          this.ids.push(elem1557);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getContactsForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getContactsForChannel_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter1558 in this.ids) {
      if (this.ids.hasOwnProperty(iter1558)) {
        iter1558 = this.ids[iter1558];
        output.writeString(iter1558);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getContactsForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getContactsForChannel_result.prototype = {};
CallService_getContactsForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31560 = input.readListBegin();
        var _size1559 = _rtmp31560.size || 0;
        for (var _i1561 = 0; _i1561 < _size1559; ++_i1561) {
          var elem1562 = null;
          elem1562 = new Contact();
          elem1562.read(input);
          this.success.push(elem1562);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getContactsForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getContactsForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1563 in this.success) {
      if (this.success.hasOwnProperty(iter1563)) {
        iter1563 = this.success[iter1563];
        iter1563.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getCallCreditProducts_args = function(args) {
  this.appStoreCode = null;
  this.pgCode = null;
  this.country = null;
  this.language = null;
  if (args) {
    if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
      this.appStoreCode = args.appStoreCode;
    }
    if (args.pgCode !== undefined && args.pgCode !== null) {
      this.pgCode = args.pgCode;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
  }
};
CallService_getCallCreditProducts_args.prototype = {};
CallService_getCallCreditProducts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.appStoreCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pgCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getCallCreditProducts_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getCallCreditProducts_args');
  if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
    output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 2);
    output.writeI32(this.appStoreCode);
    output.writeFieldEnd();
  }
  if (this.pgCode !== null && this.pgCode !== undefined) {
    output.writeFieldBegin('pgCode', Thrift.Type.I32, 3);
    output.writeI32(this.pgCode);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 4);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 5);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getCallCreditProducts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [CoinProductItem]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getCallCreditProducts_result.prototype = {};
CallService_getCallCreditProducts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31565 = input.readListBegin();
        var _size1564 = _rtmp31565.size || 0;
        for (var _i1566 = 0; _i1566 < _size1564; ++_i1566) {
          var elem1567 = null;
          elem1567 = new CoinProductItem();
          elem1567.read(input);
          this.success.push(elem1567);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getCallCreditProducts_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getCallCreditProducts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1568 in this.success) {
      if (this.success.hasOwnProperty(iter1568)) {
        iter1568 = this.success[iter1568];
        iter1568.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getCompactContacts_args = function(args) {
  this.lastModifiedTimestamp = null;
  if (args) {
    if (args.lastModifiedTimestamp !== undefined && args.lastModifiedTimestamp !== null) {
      this.lastModifiedTimestamp = args.lastModifiedTimestamp;
    }
  }
};
CallService_getCompactContacts_args.prototype = {};
CallService_getCompactContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastModifiedTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getCompactContacts_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getCompactContacts_args');
  if (this.lastModifiedTimestamp !== null && this.lastModifiedTimestamp !== undefined) {
    output.writeFieldBegin('lastModifiedTimestamp', Thrift.Type.I64, 2);
    output.writeI64(this.lastModifiedTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getCompactContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [CompactContact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getCompactContacts_result.prototype = {};
CallService_getCompactContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31570 = input.readListBegin();
        var _size1569 = _rtmp31570.size || 0;
        for (var _i1571 = 0; _i1571 < _size1569; ++_i1571) {
          var elem1572 = null;
          elem1572 = new CompactContact();
          elem1572.read(input);
          this.success.push(elem1572);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getCompactContacts_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getCompactContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1573 in this.success) {
      if (this.success.hasOwnProperty(iter1573)) {
        iter1573 = this.success[iter1573];
        iter1573.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_notifyNotiCenterEvent_args = function(args) {
  this.event = null;
  if (args) {
    if (args.event !== undefined && args.event !== null) {
      this.event = new NotiCenterEventData(args.event);
    }
  }
};
CallService_notifyNotiCenterEvent_args.prototype = {};
CallService_notifyNotiCenterEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.event = new NotiCenterEventData();
        this.event.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_notifyNotiCenterEvent_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_notifyNotiCenterEvent_args');
  if (this.event !== null && this.event !== undefined) {
    output.writeFieldBegin('event', Thrift.Type.STRUCT, 1);
    this.event.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_notifyNotiCenterEvent_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_notifyNotiCenterEvent_result.prototype = {};
CallService_notifyNotiCenterEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_notifyNotiCenterEvent_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_notifyNotiCenterEvent_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_isInContact_args = function(args) {
  this.mid = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
CallService_isInContact_args.prototype = {};
CallService_isInContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_isInContact_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_isInContact_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_isInContact_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_isInContact_result.prototype = {};
CallService_isInContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_isInContact_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_isInContact_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_lookupGroupMembers_args = function(args) {
  this.groupId = null;
  this.mids = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.mids !== undefined && args.mids !== null) {
      this.mids = Thrift.copyList(args.mids, [null]);
    }
  }
};
CallService_lookupGroupMembers_args.prototype = {};
CallService_lookupGroupMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.mids = [];
        var _rtmp31575 = input.readListBegin();
        var _size1574 = _rtmp31575.size || 0;
        for (var _i1576 = 0; _i1576 < _size1574; ++_i1576) {
          var elem1577 = null;
          elem1577 = input.readString().value;
          this.mids.push(elem1577);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_lookupGroupMembers_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_lookupGroupMembers_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 1);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.mids !== null && this.mids !== undefined) {
    output.writeFieldBegin('mids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter1578 in this.mids) {
      if (this.mids.hasOwnProperty(iter1578)) {
        iter1578 = this.mids[iter1578];
        output.writeString(iter1578);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_lookupGroupMembers_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SimpleChannelContact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_lookupGroupMembers_result.prototype = {};
CallService_lookupGroupMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31580 = input.readListBegin();
        var _size1579 = _rtmp31580.size || 0;
        for (var _i1581 = 0; _i1581 < _size1579; ++_i1581) {
          var elem1582 = null;
          elem1582 = new SimpleChannelContact();
          elem1582.read(input);
          this.success.push(elem1582);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_lookupGroupMembers_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_lookupGroupMembers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1583 in this.success) {
      if (this.success.hasOwnProperty(iter1583)) {
        iter1583 = this.success[iter1583];
        iter1583.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getRoomInformation_args = function(args) {
  this.roomMid = null;
  if (args) {
    if (args.roomMid !== undefined && args.roomMid !== null) {
      this.roomMid = args.roomMid;
    }
  }
};
CallService_getRoomInformation_args.prototype = {};
CallService_getRoomInformation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.roomMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getRoomInformation_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getRoomInformation_args');
  if (this.roomMid !== null && this.roomMid !== undefined) {
    output.writeFieldBegin('roomMid', Thrift.Type.STRING, 1);
    output.writeString(this.roomMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getRoomInformation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Room(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getRoomInformation_result.prototype = {};
CallService_getRoomInformation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Room();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getRoomInformation_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getRoomInformation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getGroupCall_args = function(args) {
  this.chatMid = null;
  if (args) {
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
  }
};
CallService_getGroupCall_args.prototype = {};
CallService_getGroupCall_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getGroupCall_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getGroupCall_args');
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getGroupCall_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new GroupCall(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getGroupCall_result.prototype = {};
CallService_getGroupCall_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GroupCall();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getGroupCall_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getGroupCall_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_isAllowSecondaryDeviceLogin_args = function(args) {
};
CallService_isAllowSecondaryDeviceLogin_args.prototype = {};
CallService_isAllowSecondaryDeviceLogin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_isAllowSecondaryDeviceLogin_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_isAllowSecondaryDeviceLogin_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_isAllowSecondaryDeviceLogin_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_isAllowSecondaryDeviceLogin_result.prototype = {};
CallService_isAllowSecondaryDeviceLogin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_isAllowSecondaryDeviceLogin_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_isAllowSecondaryDeviceLogin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPrimaryClientForChannel_args = function(args) {
};
CallService_getPrimaryClientForChannel_args.prototype = {};
CallService_getPrimaryClientForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPrimaryClientForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPrimaryClientForChannel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPrimaryClientForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SimpleChannelClient(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getPrimaryClientForChannel_result.prototype = {};
CallService_getPrimaryClientForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SimpleChannelClient();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPrimaryClientForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPrimaryClientForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_createRoomWithBuddy_args = function(args) {
  this.reqSeq = null;
  this.buddyMid = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
CallService_createRoomWithBuddy_args.prototype = {};
CallService_createRoomWithBuddy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.contactIds = [];
        var _rtmp31585 = input.readListBegin();
        var _size1584 = _rtmp31585.size || 0;
        for (var _i1586 = 0; _i1586 < _size1584; ++_i1586) {
          var elem1587 = null;
          elem1587 = input.readString().value;
          this.contactIds.push(elem1587);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_createRoomWithBuddy_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_createRoomWithBuddy_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter1588 in this.contactIds) {
      if (this.contactIds.hasOwnProperty(iter1588)) {
        iter1588 = this.contactIds[iter1588];
        output.writeString(iter1588);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_createRoomWithBuddy_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Room(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_createRoomWithBuddy_result.prototype = {};
CallService_createRoomWithBuddy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Room();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_createRoomWithBuddy_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_createRoomWithBuddy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getDisplayName_args = function(args) {
  this.mid = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
CallService_getDisplayName_args.prototype = {};
CallService_getDisplayName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getDisplayName_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getDisplayName_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getDisplayName_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getDisplayName_result.prototype = {};
CallService_getDisplayName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getDisplayName_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getDisplayName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPaidCallMetadata_args = function(args) {
  this.language = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
  }
};
CallService_getPaidCallMetadata_args.prototype = {};
CallService_getPaidCallMetadata_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPaidCallMetadata_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPaidCallMetadata_args');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPaidCallMetadata_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PaidCallMetadataResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getPaidCallMetadata_result.prototype = {};
CallService_getPaidCallMetadata_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PaidCallMetadataResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPaidCallMetadata_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPaidCallMetadata_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getMid_args = function(args) {
};
CallService_getMid_args.prototype = {};
CallService_getMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getMid_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getMid_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getMid_result.prototype = {};
CallService_getMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getMid_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getUserCountryForBilling_args = function(args) {
  this.country = null;
  this.remoteIp = null;
  if (args) {
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.remoteIp !== undefined && args.remoteIp !== null) {
      this.remoteIp = args.remoteIp;
    }
  }
};
CallService_getUserCountryForBilling_args.prototype = {};
CallService_getUserCountryForBilling_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.remoteIp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getUserCountryForBilling_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getUserCountryForBilling_args');
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 2);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.remoteIp !== null && this.remoteIp !== undefined) {
    output.writeFieldBegin('remoteIp', Thrift.Type.STRING, 3);
    output.writeString(this.remoteIp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getUserCountryForBilling_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getUserCountryForBilling_result.prototype = {};
CallService_getUserCountryForBilling_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getUserCountryForBilling_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getUserCountryForBilling_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getFavoriteGroupIdsForChannel_args = function(args) {
};
CallService_getFavoriteGroupIdsForChannel_args.prototype = {};
CallService_getFavoriteGroupIdsForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getFavoriteGroupIdsForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getFavoriteGroupIdsForChannel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getFavoriteGroupIdsForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getFavoriteGroupIdsForChannel_result.prototype = {};
CallService_getFavoriteGroupIdsForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31590 = input.readListBegin();
        var _size1589 = _rtmp31590.size || 0;
        for (var _i1591 = 0; _i1591 < _size1589; ++_i1591) {
          var elem1592 = null;
          elem1592 = input.readString().value;
          this.success.push(elem1592);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getFavoriteGroupIdsForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getFavoriteGroupIdsForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1593 in this.success) {
      if (this.success.hasOwnProperty(iter1593)) {
        iter1593 = this.success[iter1593];
        output.writeString(iter1593);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPaidCallHistory_args = function(args) {
  this.start = null;
  this.size = null;
  this.language = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
  }
};
CallService_getPaidCallHistory_args.prototype = {};
CallService_getPaidCallHistory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPaidCallHistory_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPaidCallHistory_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 2);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 3);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 4);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPaidCallHistory_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PaidCallHistoryResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getPaidCallHistory_result.prototype = {};
CallService_getPaidCallHistory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PaidCallHistoryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPaidCallHistory_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPaidCallHistory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_sendPinCodeOperation_args = function(args) {
  this.verifier = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
  }
};
CallService_sendPinCodeOperation_args.prototype = {};
CallService_sendPinCodeOperation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_sendPinCodeOperation_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_sendPinCodeOperation_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 1);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_sendPinCodeOperation_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_sendPinCodeOperation_result.prototype = {};
CallService_sendPinCodeOperation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_sendPinCodeOperation_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_sendPinCodeOperation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_inviteIntoGroupCall_args = function(args) {
  this.chatMid = null;
  this.memberMids = null;
  this.mediaType = null;
  if (args) {
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.memberMids !== undefined && args.memberMids !== null) {
      this.memberMids = Thrift.copyList(args.memberMids, [null]);
    }
    if (args.mediaType !== undefined && args.mediaType !== null) {
      this.mediaType = args.mediaType;
    }
  }
};
CallService_inviteIntoGroupCall_args.prototype = {};
CallService_inviteIntoGroupCall_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.memberMids = [];
        var _rtmp31595 = input.readListBegin();
        var _size1594 = _rtmp31595.size || 0;
        for (var _i1596 = 0; _i1596 < _size1594; ++_i1596) {
          var elem1597 = null;
          elem1597 = input.readString().value;
          this.memberMids.push(elem1597);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.mediaType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_inviteIntoGroupCall_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_inviteIntoGroupCall_args');
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.memberMids !== null && this.memberMids !== undefined) {
    output.writeFieldBegin('memberMids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.memberMids.length);
    for (var iter1598 in this.memberMids) {
      if (this.memberMids.hasOwnProperty(iter1598)) {
        iter1598 = this.memberMids[iter1598];
        output.writeString(iter1598);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mediaType !== null && this.mediaType !== undefined) {
    output.writeFieldBegin('mediaType', Thrift.Type.I32, 4);
    output.writeI32(this.mediaType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_inviteIntoGroupCall_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_inviteIntoGroupCall_result.prototype = {};
CallService_inviteIntoGroupCall_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_inviteIntoGroupCall_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_inviteIntoGroupCall_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getFriendMids_args = function(args) {
};
CallService_getFriendMids_args.prototype = {};
CallService_getFriendMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getFriendMids_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getFriendMids_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getFriendMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getFriendMids_result.prototype = {};
CallService_getFriendMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31600 = input.readListBegin();
        var _size1599 = _rtmp31600.size || 0;
        for (var _i1601 = 0; _i1601 < _size1599; ++_i1601) {
          var elem1602 = null;
          elem1602 = input.readString().value;
          this.success.push(elem1602);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getFriendMids_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getFriendMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1603 in this.success) {
      if (this.success.hasOwnProperty(iter1603)) {
        iter1603 = this.success[iter1603];
        output.writeString(iter1603);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getMetaProfile_args = function(args) {
};
CallService_getMetaProfile_args.prototype = {};
CallService_getMetaProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getMetaProfile_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getMetaProfile_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getMetaProfile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new MetaProfile(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getMetaProfile_result.prototype = {};
CallService_getMetaProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MetaProfile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getMetaProfile_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getMetaProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_sendMessageForChannel_args = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new Message(args.message);
    }
  }
};
CallService_sendMessageForChannel_args.prototype = {};
CallService_sendMessageForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_sendMessageForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_sendMessageForChannel_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_sendMessageForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Message(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_sendMessageForChannel_result.prototype = {};
CallService_sendMessageForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Message();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_sendMessageForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_sendMessageForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_activeBuddySubscriberCount_args = function(args) {
};
CallService_activeBuddySubscriberCount_args.prototype = {};
CallService_activeBuddySubscriberCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_activeBuddySubscriberCount_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_activeBuddySubscriberCount_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_activeBuddySubscriberCount_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_activeBuddySubscriberCount_result.prototype = {};
CallService_activeBuddySubscriberCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_activeBuddySubscriberCount_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_activeBuddySubscriberCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getCallCreditPurchaseHistory_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new CoinHistoryCondition(args.request);
    }
  }
};
CallService_getCallCreditPurchaseHistory_args.prototype = {};
CallService_getCallCreditPurchaseHistory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new CoinHistoryCondition();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getCallCreditPurchaseHistory_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getCallCreditPurchaseHistory_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getCallCreditPurchaseHistory_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new CoinHistoryResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getCallCreditPurchaseHistory_result.prototype = {};
CallService_getCallCreditPurchaseHistory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new CoinHistoryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getCallCreditPurchaseHistory_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getCallCreditPurchaseHistory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_isRoomMember_args = function(args) {
  this.roomId = null;
  if (args) {
    if (args.roomId !== undefined && args.roomId !== null) {
      this.roomId = args.roomId;
    }
  }
};
CallService_isRoomMember_args.prototype = {};
CallService_isRoomMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.roomId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_isRoomMember_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_isRoomMember_args');
  if (this.roomId !== null && this.roomId !== undefined) {
    output.writeFieldBegin('roomId', Thrift.Type.STRING, 1);
    output.writeString(this.roomId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_isRoomMember_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_isRoomMember_result.prototype = {};
CallService_isRoomMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_isRoomMember_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_isRoomMember_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_sendSystemOAMessage_args = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new Message(args.message);
    }
  }
};
CallService_sendSystemOAMessage_args.prototype = {};
CallService_sendSystemOAMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_sendSystemOAMessage_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_sendSystemOAMessage_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_sendSystemOAMessage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Message(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_sendSystemOAMessage_result.prototype = {};
CallService_sendSystemOAMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Message();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_sendSystemOAMessage_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_sendSystemOAMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_acquirePaidCallRoute_args = function(args) {
  this.paidCallType = null;
  this.dialedNumber = null;
  this.language = null;
  this.networkCode = null;
  this.disableCallerId = null;
  this.referer = null;
  this.adSessionId = null;
  if (args) {
    if (args.paidCallType !== undefined && args.paidCallType !== null) {
      this.paidCallType = args.paidCallType;
    }
    if (args.dialedNumber !== undefined && args.dialedNumber !== null) {
      this.dialedNumber = args.dialedNumber;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.networkCode !== undefined && args.networkCode !== null) {
      this.networkCode = args.networkCode;
    }
    if (args.disableCallerId !== undefined && args.disableCallerId !== null) {
      this.disableCallerId = args.disableCallerId;
    }
    if (args.referer !== undefined && args.referer !== null) {
      this.referer = args.referer;
    }
    if (args.adSessionId !== undefined && args.adSessionId !== null) {
      this.adSessionId = args.adSessionId;
    }
  }
};
CallService_acquirePaidCallRoute_args.prototype = {};
CallService_acquirePaidCallRoute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.paidCallType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dialedNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.networkCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.disableCallerId = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.referer = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.adSessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_acquirePaidCallRoute_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_acquirePaidCallRoute_args');
  if (this.paidCallType !== null && this.paidCallType !== undefined) {
    output.writeFieldBegin('paidCallType', Thrift.Type.I32, 2);
    output.writeI32(this.paidCallType);
    output.writeFieldEnd();
  }
  if (this.dialedNumber !== null && this.dialedNumber !== undefined) {
    output.writeFieldBegin('dialedNumber', Thrift.Type.STRING, 3);
    output.writeString(this.dialedNumber);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 4);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.networkCode !== null && this.networkCode !== undefined) {
    output.writeFieldBegin('networkCode', Thrift.Type.STRING, 5);
    output.writeString(this.networkCode);
    output.writeFieldEnd();
  }
  if (this.disableCallerId !== null && this.disableCallerId !== undefined) {
    output.writeFieldBegin('disableCallerId', Thrift.Type.BOOL, 6);
    output.writeBool(this.disableCallerId);
    output.writeFieldEnd();
  }
  if (this.referer !== null && this.referer !== undefined) {
    output.writeFieldBegin('referer', Thrift.Type.STRING, 7);
    output.writeString(this.referer);
    output.writeFieldEnd();
  }
  if (this.adSessionId !== null && this.adSessionId !== undefined) {
    output.writeFieldBegin('adSessionId', Thrift.Type.STRING, 8);
    output.writeString(this.adSessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_acquirePaidCallRoute_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PaidCallResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_acquirePaidCallRoute_result.prototype = {};
CallService_acquirePaidCallRoute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PaidCallResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_acquirePaidCallRoute_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_acquirePaidCallRoute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getGroupsForChannel_args = function(args) {
  this.groupIds = null;
  if (args) {
    if (args.groupIds !== undefined && args.groupIds !== null) {
      this.groupIds = Thrift.copyList(args.groupIds, [null]);
    }
  }
};
CallService_getGroupsForChannel_args.prototype = {};
CallService_getGroupsForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.groupIds = [];
        var _rtmp31605 = input.readListBegin();
        var _size1604 = _rtmp31605.size || 0;
        for (var _i1606 = 0; _i1606 < _size1604; ++_i1606) {
          var elem1607 = null;
          elem1607 = input.readString().value;
          this.groupIds.push(elem1607);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getGroupsForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getGroupsForChannel_args');
  if (this.groupIds !== null && this.groupIds !== undefined) {
    output.writeFieldBegin('groupIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.groupIds.length);
    for (var iter1608 in this.groupIds) {
      if (this.groupIds.hasOwnProperty(iter1608)) {
        iter1608 = this.groupIds[iter1608];
        output.writeString(iter1608);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getGroupsForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Group]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getGroupsForChannel_result.prototype = {};
CallService_getGroupsForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31610 = input.readListBegin();
        var _size1609 = _rtmp31610.size || 0;
        for (var _i1611 = 0; _i1611 < _size1609; ++_i1611) {
          var elem1612 = null;
          elem1612 = new Group();
          elem1612.read(input);
          this.success.push(elem1612);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getGroupsForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getGroupsForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1613 in this.success) {
      if (this.success.hasOwnProperty(iter1613)) {
        iter1613 = this.success[iter1613];
        iter1613.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getUserCreateTime_args = function(args) {
};
CallService_getUserCreateTime_args.prototype = {};
CallService_getUserCreateTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getUserCreateTime_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getUserCreateTime_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getUserCreateTime_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getUserCreateTime_result.prototype = {};
CallService_getUserCreateTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getUserCreateTime_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getUserCreateTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_registerChannelCP_args = function(args) {
  this.cpId = null;
  this.registerPassword = null;
  if (args) {
    if (args.cpId !== undefined && args.cpId !== null) {
      this.cpId = args.cpId;
    }
    if (args.registerPassword !== undefined && args.registerPassword !== null) {
      this.registerPassword = args.registerPassword;
    }
  }
};
CallService_registerChannelCP_args.prototype = {};
CallService_registerChannelCP_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cpId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registerPassword = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_registerChannelCP_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_registerChannelCP_args');
  if (this.cpId !== null && this.cpId !== undefined) {
    output.writeFieldBegin('cpId', Thrift.Type.STRING, 2);
    output.writeString(this.cpId);
    output.writeFieldEnd();
  }
  if (this.registerPassword !== null && this.registerPassword !== undefined) {
    output.writeFieldBegin('registerPassword', Thrift.Type.STRING, 3);
    output.writeString(this.registerPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_registerChannelCP_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_registerChannelCP_result.prototype = {};
CallService_registerChannelCP_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_registerChannelCP_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_registerChannelCP_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_reserveCallCreditPurchase_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new CoinPurchaseReservation(args.request);
    }
  }
};
CallService_reserveCallCreditPurchase_args.prototype = {};
CallService_reserveCallCreditPurchase_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new CoinPurchaseReservation();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_reserveCallCreditPurchase_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_reserveCallCreditPurchase_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_reserveCallCreditPurchase_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PaymentReservationResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_reserveCallCreditPurchase_result.prototype = {};
CallService_reserveCallCreditPurchase_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PaymentReservationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_reserveCallCreditPurchase_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_reserveCallCreditPurchase_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_acquirePaidCallCurrencyExchangeRate_args = function(args) {
  this.language = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
  }
};
CallService_acquirePaidCallCurrencyExchangeRate_args.prototype = {};
CallService_acquirePaidCallCurrencyExchangeRate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_acquirePaidCallCurrencyExchangeRate_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_acquirePaidCallCurrencyExchangeRate_args');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_acquirePaidCallCurrencyExchangeRate_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [PaidCallCurrencyExchangeRate]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_acquirePaidCallCurrencyExchangeRate_result.prototype = {};
CallService_acquirePaidCallCurrencyExchangeRate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31615 = input.readListBegin();
        var _size1614 = _rtmp31615.size || 0;
        for (var _i1616 = 0; _i1616 < _size1614; ++_i1616) {
          var elem1617 = null;
          elem1617 = new PaidCallCurrencyExchangeRate();
          elem1617.read(input);
          this.success.push(elem1617);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_acquirePaidCallCurrencyExchangeRate_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_acquirePaidCallCurrencyExchangeRate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1618 in this.success) {
      if (this.success.hasOwnProperty(iter1618)) {
        iter1618 = this.success[iter1618];
        iter1618.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getRoomMemberMidsForAppPlatform_args = function(args) {
  this.roomId = null;
  if (args) {
    if (args.roomId !== undefined && args.roomId !== null) {
      this.roomId = args.roomId;
    }
  }
};
CallService_getRoomMemberMidsForAppPlatform_args.prototype = {};
CallService_getRoomMemberMidsForAppPlatform_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.roomId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getRoomMemberMidsForAppPlatform_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getRoomMemberMidsForAppPlatform_args');
  if (this.roomId !== null && this.roomId !== undefined) {
    output.writeFieldBegin('roomId', Thrift.Type.STRING, 1);
    output.writeString(this.roomId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getRoomMemberMidsForAppPlatform_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getRoomMemberMidsForAppPlatform_result.prototype = {};
CallService_getRoomMemberMidsForAppPlatform_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31620 = input.readListBegin();
        var _size1619 = _rtmp31620.size || 0;
        for (var _i1621 = 0; _i1621 < _size1619; ++_i1621) {
          var elem1622 = null;
          elem1622 = input.readString().value;
          this.success.push(elem1622);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getRoomMemberMidsForAppPlatform_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getRoomMemberMidsForAppPlatform_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1623 in this.success) {
      if (this.success.hasOwnProperty(iter1623)) {
        iter1623 = this.success[iter1623];
        output.writeString(iter1623);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPaidCallBalanceList_args = function(args) {
  this.language = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
  }
};
CallService_getPaidCallBalanceList_args.prototype = {};
CallService_getPaidCallBalanceList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPaidCallBalanceList_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPaidCallBalanceList_args');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPaidCallBalanceList_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [PaidCallBalance]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getPaidCallBalanceList_result.prototype = {};
CallService_getPaidCallBalanceList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31625 = input.readListBegin();
        var _size1624 = _rtmp31625.size || 0;
        for (var _i1626 = 0; _i1626 < _size1624; ++_i1626) {
          var elem1627 = null;
          elem1627 = new PaidCallBalance();
          elem1627.read(input);
          this.success.push(elem1627);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPaidCallBalanceList_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPaidCallBalanceList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1628 in this.success) {
      if (this.success.hasOwnProperty(iter1628)) {
        iter1628 = this.success[iter1628];
        iter1628.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPersonalInfos_args = function(args) {
  this.requiredPersonalInfos = null;
  if (args) {
    if (args.requiredPersonalInfos !== undefined && args.requiredPersonalInfos !== null) {
      this.requiredPersonalInfos = Thrift.copyList(args.requiredPersonalInfos, [null]);
    }
  }
};
CallService_getPersonalInfos_args.prototype = {};
CallService_getPersonalInfos_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.SET) {
        this.requiredPersonalInfos = [];
        var _rtmp31630 = input.readSetBegin();
        var _size1629 = _rtmp31630.size || 0;
        for (var _i1631 = 0; _i1631 < _size1629; ++_i1631) {
          var elem1632 = null;
          elem1632 = input.readI32().value;
          this.requiredPersonalInfos.push(elem1632);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPersonalInfos_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPersonalInfos_args');
  if (this.requiredPersonalInfos !== null && this.requiredPersonalInfos !== undefined) {
    output.writeFieldBegin('requiredPersonalInfos', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I32, this.requiredPersonalInfos.length);
    for (var iter1633 in this.requiredPersonalInfos) {
      if (this.requiredPersonalInfos.hasOwnProperty(iter1633)) {
        iter1633 = this.requiredPersonalInfos[iter1633];
        output.writeI32(iter1633);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPersonalInfos_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getPersonalInfos_result.prototype = {};
CallService_getPersonalInfos_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp31635 = input.readMapBegin();
        var _size1634 = _rtmp31635.size || 0;
        for (var _i1636 = 0; _i1636 < _size1634; ++_i1636) {
          if (_i1636 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1637 = null;
          var val1638 = null;
          key1637 = input.readI32().value;
          val1638 = input.readString().value;
          this.success[key1637] = val1638;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPersonalInfos_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPersonalInfos_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter1639 in this.success) {
      if (this.success.hasOwnProperty(kiter1639)) {
        var viter1640 = this.success[kiter1639];
        output.writeI32(kiter1639);
        output.writeString(viter1640);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPrimaryClientsForChannel_args = function(args) {
  this.userMids = null;
  if (args) {
    if (args.userMids !== undefined && args.userMids !== null) {
      this.userMids = Thrift.copyList(args.userMids, [null]);
    }
  }
};
CallService_getPrimaryClientsForChannel_args.prototype = {};
CallService_getPrimaryClientsForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.userMids = [];
        var _rtmp31642 = input.readListBegin();
        var _size1641 = _rtmp31642.size || 0;
        for (var _i1643 = 0; _i1643 < _size1641; ++_i1643) {
          var elem1644 = null;
          elem1644 = input.readString().value;
          this.userMids.push(elem1644);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPrimaryClientsForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPrimaryClientsForChannel_args');
  if (this.userMids !== null && this.userMids !== undefined) {
    output.writeFieldBegin('userMids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.userMids.length);
    for (var iter1645 in this.userMids) {
      if (this.userMids.hasOwnProperty(iter1645)) {
        iter1645 = this.userMids[iter1645];
        output.writeString(iter1645);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPrimaryClientsForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SimpleChannelClient]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getPrimaryClientsForChannel_result.prototype = {};
CallService_getPrimaryClientsForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31647 = input.readListBegin();
        var _size1646 = _rtmp31647.size || 0;
        for (var _i1648 = 0; _i1648 < _size1646; ++_i1648) {
          var elem1649 = null;
          elem1649 = new SimpleChannelClient();
          elem1649.read(input);
          this.success.push(elem1649);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPrimaryClientsForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPrimaryClientsForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1650 in this.success) {
      if (this.success.hasOwnProperty(iter1650)) {
        iter1650 = this.success[iter1650];
        iter1650.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_addBuddyToContact_args = function(args) {
  this.buddyMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
  }
};
CallService_addBuddyToContact_args.prototype = {};
CallService_addBuddyToContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_addBuddyToContact_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_addBuddyToContact_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 1);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_addBuddyToContact_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ContactTransition(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_addBuddyToContact_result.prototype = {};
CallService_addBuddyToContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ContactTransition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_addBuddyToContact_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_addBuddyToContact_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getGroupMemberMidsForAppPlatform_args = function(args) {
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
CallService_getGroupMemberMidsForAppPlatform_args.prototype = {};
CallService_getGroupMemberMidsForAppPlatform_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getGroupMemberMidsForAppPlatform_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getGroupMemberMidsForAppPlatform_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 1);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getGroupMemberMidsForAppPlatform_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getGroupMemberMidsForAppPlatform_result.prototype = {};
CallService_getGroupMemberMidsForAppPlatform_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31652 = input.readListBegin();
        var _size1651 = _rtmp31652.size || 0;
        for (var _i1653 = 0; _i1653 < _size1651; ++_i1653) {
          var elem1654 = null;
          elem1654 = input.readString().value;
          this.success.push(elem1654);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getGroupMemberMidsForAppPlatform_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getGroupMemberMidsForAppPlatform_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1655 in this.success) {
      if (this.success.hasOwnProperty(iter1655)) {
        iter1655 = this.success[iter1655];
        output.writeString(iter1655);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getUserLanguage_args = function(args) {
};
CallService_getUserLanguage_args.prototype = {};
CallService_getUserLanguage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getUserLanguage_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getUserLanguage_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getUserLanguage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getUserLanguage_result.prototype = {};
CallService_getUserLanguage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getUserLanguage_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getUserLanguage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_lookupPaidCall_args = function(args) {
  this.dialedNumber = null;
  this.language = null;
  this.referer = null;
  if (args) {
    if (args.dialedNumber !== undefined && args.dialedNumber !== null) {
      this.dialedNumber = args.dialedNumber;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.referer !== undefined && args.referer !== null) {
      this.referer = args.referer;
    }
  }
};
CallService_lookupPaidCall_args.prototype = {};
CallService_lookupPaidCall_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dialedNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.referer = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_lookupPaidCall_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_lookupPaidCall_args');
  if (this.dialedNumber !== null && this.dialedNumber !== undefined) {
    output.writeFieldBegin('dialedNumber', Thrift.Type.STRING, 2);
    output.writeString(this.dialedNumber);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.referer !== null && this.referer !== undefined) {
    output.writeFieldBegin('referer', Thrift.Type.STRING, 4);
    output.writeString(this.referer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_lookupPaidCall_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PaidCallResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_lookupPaidCall_result.prototype = {};
CallService_lookupPaidCall_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PaidCallResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_lookupPaidCall_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_lookupPaidCall_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getExtendedProfile_args = function(args) {
};
CallService_getExtendedProfile_args.prototype = {};
CallService_getExtendedProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getExtendedProfile_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getExtendedProfile_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getExtendedProfile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ExtendedProfile(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getExtendedProfile_result.prototype = {};
CallService_getExtendedProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ExtendedProfile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getExtendedProfile_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getExtendedProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getReverseCompactContacts_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
  }
};
CallService_getReverseCompactContacts_args.prototype = {};
CallService_getReverseCompactContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.ids = [];
        var _rtmp31657 = input.readListBegin();
        var _size1656 = _rtmp31657.size || 0;
        for (var _i1658 = 0; _i1658 < _size1656; ++_i1658) {
          var elem1659 = null;
          elem1659 = input.readString().value;
          this.ids.push(elem1659);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getReverseCompactContacts_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getReverseCompactContacts_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter1660 in this.ids) {
      if (this.ids.hasOwnProperty(iter1660)) {
        iter1660 = this.ids[iter1660];
        output.writeString(iter1660);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getReverseCompactContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [CompactContact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getReverseCompactContacts_result.prototype = {};
CallService_getReverseCompactContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp31662 = input.readMapBegin();
        var _size1661 = _rtmp31662.size || 0;
        for (var _i1663 = 0; _i1663 < _size1661; ++_i1663) {
          if (_i1663 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1664 = null;
          var val1665 = null;
          key1664 = input.readString().value;
          val1665 = new CompactContact();
          val1665.read(input);
          this.success[key1664] = val1665;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getReverseCompactContacts_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getReverseCompactContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter1666 in this.success) {
      if (this.success.hasOwnProperty(kiter1666)) {
        var viter1667 = this.success[kiter1666];
        output.writeString(kiter1666);
        viter1667.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPaidCallAdStatus_args = function(args) {
};
CallService_getPaidCallAdStatus_args.prototype = {};
CallService_getPaidCallAdStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPaidCallAdStatus_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPaidCallAdStatus_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getPaidCallAdStatus_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PaidCallAdResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getPaidCallAdStatus_result.prototype = {};
CallService_getPaidCallAdStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PaidCallAdResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getPaidCallAdStatus_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getPaidCallAdStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_findContactByUseridWithoutAbuseBlockForChannel_args = function(args) {
  this.userid = null;
  if (args) {
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
  }
};
CallService_findContactByUseridWithoutAbuseBlockForChannel_args.prototype = {};
CallService_findContactByUseridWithoutAbuseBlockForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_findContactByUseridWithoutAbuseBlockForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_findContactByUseridWithoutAbuseBlockForChannel_args');
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 2);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_findContactByUseridWithoutAbuseBlockForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Contact(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_findContactByUseridWithoutAbuseBlockForChannel_result.prototype = {};
CallService_findContactByUseridWithoutAbuseBlockForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Contact();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_findContactByUseridWithoutAbuseBlockForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_findContactByUseridWithoutAbuseBlockForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getGroupMemberMids_args = function(args) {
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
CallService_getGroupMemberMids_args.prototype = {};
CallService_getGroupMemberMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getGroupMemberMids_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getGroupMemberMids_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 1);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getGroupMemberMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getGroupMemberMids_result.prototype = {};
CallService_getGroupMemberMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31669 = input.readListBegin();
        var _size1668 = _rtmp31669.size || 0;
        for (var _i1670 = 0; _i1670 < _size1668; ++_i1670) {
          var elem1671 = null;
          elem1671 = input.readString().value;
          this.success.push(elem1671);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getGroupMemberMids_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getGroupMemberMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1672 in this.success) {
      if (this.success.hasOwnProperty(iter1672)) {
        iter1672 = this.success[iter1672];
        output.writeString(iter1672);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_sendMessageWithoutRelationship_args = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new Message(args.message);
    }
  }
};
CallService_sendMessageWithoutRelationship_args.prototype = {};
CallService_sendMessageWithoutRelationship_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_sendMessageWithoutRelationship_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_sendMessageWithoutRelationship_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_sendMessageWithoutRelationship_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Message(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_sendMessageWithoutRelationship_result.prototype = {};
CallService_sendMessageWithoutRelationship_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Message();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_sendMessageWithoutRelationship_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_sendMessageWithoutRelationship_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_displayBuddySubscriberCountInBulk_args = function(args) {
  this.mids = null;
  if (args) {
    if (args.mids !== undefined && args.mids !== null) {
      this.mids = Thrift.copyList(args.mids, [null]);
    }
  }
};
CallService_displayBuddySubscriberCountInBulk_args.prototype = {};
CallService_displayBuddySubscriberCountInBulk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.mids = [];
        var _rtmp31674 = input.readListBegin();
        var _size1673 = _rtmp31674.size || 0;
        for (var _i1675 = 0; _i1675 < _size1673; ++_i1675) {
          var elem1676 = null;
          elem1676 = input.readString().value;
          this.mids.push(elem1676);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_displayBuddySubscriberCountInBulk_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_displayBuddySubscriberCountInBulk_args');
  if (this.mids !== null && this.mids !== undefined) {
    output.writeFieldBegin('mids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter1677 in this.mids) {
      if (this.mids.hasOwnProperty(iter1677)) {
        iter1677 = this.mids[iter1677];
        output.writeString(iter1677);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_displayBuddySubscriberCountInBulk_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_displayBuddySubscriberCountInBulk_result.prototype = {};
CallService_displayBuddySubscriberCountInBulk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp31679 = input.readMapBegin();
        var _size1678 = _rtmp31679.size || 0;
        for (var _i1680 = 0; _i1680 < _size1678; ++_i1680) {
          if (_i1680 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1681 = null;
          var val1682 = null;
          key1681 = input.readString().value;
          val1682 = input.readI64().value;
          this.success[key1681] = val1682;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_displayBuddySubscriberCountInBulk_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_displayBuddySubscriberCountInBulk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter1683 in this.success) {
      if (this.success.hasOwnProperty(kiter1683)) {
        var viter1684 = this.success[kiter1683];
        output.writeString(kiter1683);
        output.writeI64(viter1684);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_lookupRoomMembers_args = function(args) {
  this.roomId = null;
  this.mids = null;
  if (args) {
    if (args.roomId !== undefined && args.roomId !== null) {
      this.roomId = args.roomId;
    }
    if (args.mids !== undefined && args.mids !== null) {
      this.mids = Thrift.copyList(args.mids, [null]);
    }
  }
};
CallService_lookupRoomMembers_args.prototype = {};
CallService_lookupRoomMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.roomId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.mids = [];
        var _rtmp31686 = input.readListBegin();
        var _size1685 = _rtmp31686.size || 0;
        for (var _i1687 = 0; _i1687 < _size1685; ++_i1687) {
          var elem1688 = null;
          elem1688 = input.readString().value;
          this.mids.push(elem1688);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_lookupRoomMembers_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_lookupRoomMembers_args');
  if (this.roomId !== null && this.roomId !== undefined) {
    output.writeFieldBegin('roomId', Thrift.Type.STRING, 1);
    output.writeString(this.roomId);
    output.writeFieldEnd();
  }
  if (this.mids !== null && this.mids !== undefined) {
    output.writeFieldBegin('mids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter1689 in this.mids) {
      if (this.mids.hasOwnProperty(iter1689)) {
        iter1689 = this.mids[iter1689];
        output.writeString(iter1689);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_lookupRoomMembers_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SimpleChannelContact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_lookupRoomMembers_result.prototype = {};
CallService_lookupRoomMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31691 = input.readListBegin();
        var _size1690 = _rtmp31691.size || 0;
        for (var _i1692 = 0; _i1692 < _size1690; ++_i1692) {
          var elem1693 = null;
          elem1693 = new SimpleChannelContact();
          elem1693.read(input);
          this.success.push(elem1693);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_lookupRoomMembers_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_lookupRoomMembers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1694 in this.success) {
      if (this.success.hasOwnProperty(iter1694)) {
        iter1694 = this.success[iter1694];
        iter1694.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getFavoriteMidsForChannel_args = function(args) {
};
CallService_getFavoriteMidsForChannel_args.prototype = {};
CallService_getFavoriteMidsForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getFavoriteMidsForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getFavoriteMidsForChannel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getFavoriteMidsForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getFavoriteMidsForChannel_result.prototype = {};
CallService_getFavoriteMidsForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31696 = input.readListBegin();
        var _size1695 = _rtmp31696.size || 0;
        for (var _i1697 = 0; _i1697 < _size1695; ++_i1697) {
          var elem1698 = null;
          elem1698 = input.readString().value;
          this.success.push(elem1698);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getFavoriteMidsForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getFavoriteMidsForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1699 in this.success) {
      if (this.success.hasOwnProperty(iter1699)) {
        iter1699 = this.success[iter1699];
        output.writeString(iter1699);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getAllContactIdsForChannel_args = function(args) {
};
CallService_getAllContactIdsForChannel_args.prototype = {};
CallService_getAllContactIdsForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getAllContactIdsForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getAllContactIdsForChannel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getAllContactIdsForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getAllContactIdsForChannel_result.prototype = {};
CallService_getAllContactIdsForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31701 = input.readListBegin();
        var _size1700 = _rtmp31701.size || 0;
        for (var _i1702 = 0; _i1702 < _size1700; ++_i1702) {
          var elem1703 = null;
          elem1703 = input.readString().value;
          this.success.push(elem1703);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getAllContactIdsForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getAllContactIdsForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1704 in this.success) {
      if (this.success.hasOwnProperty(iter1704)) {
        iter1704 = this.success[iter1704];
        output.writeString(iter1704);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_displayBuddySubscriberCount_args = function(args) {
};
CallService_displayBuddySubscriberCount_args.prototype = {};
CallService_displayBuddySubscriberCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_displayBuddySubscriberCount_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_displayBuddySubscriberCount_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_displayBuddySubscriberCount_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_displayBuddySubscriberCount_result.prototype = {};
CallService_displayBuddySubscriberCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_displayBuddySubscriberCount_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_displayBuddySubscriberCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getProfileForChannel_args = function(args) {
};
CallService_getProfileForChannel_args.prototype = {};
CallService_getProfileForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getProfileForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getProfileForChannel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getProfileForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Profile(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getProfileForChannel_result.prototype = {};
CallService_getProfileForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Profile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getProfileForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getProfileForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getUserTickets_args = function(args) {
  this.userMids = null;
  if (args) {
    if (args.userMids !== undefined && args.userMids !== null) {
      this.userMids = Thrift.copyList(args.userMids, [null]);
    }
  }
};
CallService_getUserTickets_args.prototype = {};
CallService_getUserTickets_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.userMids = [];
        var _rtmp31706 = input.readListBegin();
        var _size1705 = _rtmp31706.size || 0;
        for (var _i1707 = 0; _i1707 < _size1705; ++_i1707) {
          var elem1708 = null;
          elem1708 = input.readString().value;
          this.userMids.push(elem1708);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getUserTickets_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getUserTickets_args');
  if (this.userMids !== null && this.userMids !== undefined) {
    output.writeFieldBegin('userMids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.userMids.length);
    for (var iter1709 in this.userMids) {
      if (this.userMids.hasOwnProperty(iter1709)) {
        iter1709 = this.userMids[iter1709];
        output.writeString(iter1709);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getUserTickets_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [UserTicketResponse]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getUserTickets_result.prototype = {};
CallService_getUserTickets_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31711 = input.readListBegin();
        var _size1710 = _rtmp31711.size || 0;
        for (var _i1712 = 0; _i1712 < _size1710; ++_i1712) {
          var elem1713 = null;
          elem1713 = new UserTicketResponse();
          elem1713.read(input);
          this.success.push(elem1713);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getUserTickets_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getUserTickets_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1714 in this.success) {
      if (this.success.hasOwnProperty(iter1714)) {
        iter1714 = this.success[iter1714];
        iter1714.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getOAFriendMids_args = function(args) {
};
CallService_getOAFriendMids_args.prototype = {};
CallService_getOAFriendMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getOAFriendMids_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getOAFriendMids_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getOAFriendMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getOAFriendMids_result.prototype = {};
CallService_getOAFriendMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31716 = input.readListBegin();
        var _size1715 = _rtmp31716.size || 0;
        for (var _i1717 = 0; _i1717 < _size1715; ++_i1717) {
          var elem1718 = null;
          elem1718 = input.readString().value;
          this.success.push(elem1718);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getOAFriendMids_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getOAFriendMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1719 in this.success) {
      if (this.success.hasOwnProperty(iter1719)) {
        iter1719 = this.success[iter1719];
        output.writeString(iter1719);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_searchPaidCallUserRate_args = function(args) {
  this.countryCode = null;
  this.language = null;
  if (args) {
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
  }
};
CallService_searchPaidCallUserRate_args.prototype = {};
CallService_searchPaidCallUserRate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_searchPaidCallUserRate_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_searchPaidCallUserRate_args');
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 2);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_searchPaidCallUserRate_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [PaidCallUserRate]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_searchPaidCallUserRate_result.prototype = {};
CallService_searchPaidCallUserRate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31721 = input.readListBegin();
        var _size1720 = _rtmp31721.size || 0;
        for (var _i1722 = 0; _i1722 < _size1720; ++_i1722) {
          var elem1723 = null;
          elem1723 = new PaidCallUserRate();
          elem1723.read(input);
          this.success.push(elem1723);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_searchPaidCallUserRate_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_searchPaidCallUserRate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1724 in this.success) {
      if (this.success.hasOwnProperty(iter1724)) {
        iter1724 = this.success[iter1724];
        iter1724.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getJoinedGroupIdsForChannel_args = function(args) {
};
CallService_getJoinedGroupIdsForChannel_args.prototype = {};
CallService_getJoinedGroupIdsForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getJoinedGroupIdsForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getJoinedGroupIdsForChannel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getJoinedGroupIdsForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getJoinedGroupIdsForChannel_result.prototype = {};
CallService_getJoinedGroupIdsForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31726 = input.readListBegin();
        var _size1725 = _rtmp31726.size || 0;
        for (var _i1727 = 0; _i1727 < _size1725; ++_i1727) {
          var elem1728 = null;
          elem1728 = input.readString().value;
          this.success.push(elem1728);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getJoinedGroupIdsForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getJoinedGroupIdsForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1729 in this.success) {
      if (this.success.hasOwnProperty(iter1729)) {
        iter1729 = this.success[iter1729];
        output.writeString(iter1729);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_acquireGroupCallRoute_args = function(args) {
  this.chatMid = null;
  this.mediaType = null;
  if (args) {
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.mediaType !== undefined && args.mediaType !== null) {
      this.mediaType = args.mediaType;
    }
  }
};
CallService_acquireGroupCallRoute_args.prototype = {};
CallService_acquireGroupCallRoute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.mediaType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_acquireGroupCallRoute_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_acquireGroupCallRoute_args');
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.mediaType !== null && this.mediaType !== undefined) {
    output.writeFieldBegin('mediaType', Thrift.Type.I32, 3);
    output.writeI32(this.mediaType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_acquireGroupCallRoute_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new GroupCallRoute(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_acquireGroupCallRoute_result.prototype = {};
CallService_acquireGroupCallRoute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GroupCallRoute();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_acquireGroupCallRoute_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_acquireGroupCallRoute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getUserMidsWhoAddedMe_args = function(args) {
};
CallService_getUserMidsWhoAddedMe_args.prototype = {};
CallService_getUserMidsWhoAddedMe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getUserMidsWhoAddedMe_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getUserMidsWhoAddedMe_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getUserMidsWhoAddedMe_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getUserMidsWhoAddedMe_result.prototype = {};
CallService_getUserMidsWhoAddedMe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31731 = input.readListBegin();
        var _size1730 = _rtmp31731.size || 0;
        for (var _i1732 = 0; _i1732 < _size1730; ++_i1732) {
          var elem1733 = null;
          elem1733 = input.readString().value;
          this.success.push(elem1733);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getUserMidsWhoAddedMe_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getUserMidsWhoAddedMe_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1734 in this.success) {
      if (this.success.hasOwnProperty(iter1734)) {
        iter1734 = this.success[iter1734];
        output.writeString(iter1734);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getIdentityCredential_args = function(args) {
};
CallService_getIdentityCredential_args.prototype = {};
CallService_getIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getIdentityCredential_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getIdentityCredential_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new IdentityCredential(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getIdentityCredential_result.prototype = {};
CallService_getIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new IdentityCredential();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getIdentityCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_addOperationForChannel_args = function(args) {
  this.opType = null;
  this.param1 = null;
  this.param2 = null;
  this.param3 = null;
  if (args) {
    if (args.opType !== undefined && args.opType !== null) {
      this.opType = args.opType;
    }
    if (args.param1 !== undefined && args.param1 !== null) {
      this.param1 = args.param1;
    }
    if (args.param2 !== undefined && args.param2 !== null) {
      this.param2 = args.param2;
    }
    if (args.param3 !== undefined && args.param3 !== null) {
      this.param3 = args.param3;
    }
  }
};
CallService_addOperationForChannel_args.prototype = {};
CallService_addOperationForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.opType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.param1 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.param2 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.param3 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_addOperationForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_addOperationForChannel_args');
  if (this.opType !== null && this.opType !== undefined) {
    output.writeFieldBegin('opType', Thrift.Type.I32, 1);
    output.writeI32(this.opType);
    output.writeFieldEnd();
  }
  if (this.param1 !== null && this.param1 !== undefined) {
    output.writeFieldBegin('param1', Thrift.Type.STRING, 2);
    output.writeString(this.param1);
    output.writeFieldEnd();
  }
  if (this.param2 !== null && this.param2 !== undefined) {
    output.writeFieldBegin('param2', Thrift.Type.STRING, 3);
    output.writeString(this.param2);
    output.writeFieldEnd();
  }
  if (this.param3 !== null && this.param3 !== undefined) {
    output.writeFieldBegin('param3', Thrift.Type.STRING, 4);
    output.writeString(this.param3);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_addOperationForChannel_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_addOperationForChannel_result.prototype = {};
CallService_addOperationForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_addOperationForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_addOperationForChannel_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getSimpleChannelContacts_args = function(args) {
  this.ids = null;
  this.statusSticonFallbackDisabled = null;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
    if (args.statusSticonFallbackDisabled !== undefined && args.statusSticonFallbackDisabled !== null) {
      this.statusSticonFallbackDisabled = args.statusSticonFallbackDisabled;
    }
  }
};
CallService_getSimpleChannelContacts_args.prototype = {};
CallService_getSimpleChannelContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.ids = [];
        var _rtmp31736 = input.readListBegin();
        var _size1735 = _rtmp31736.size || 0;
        for (var _i1737 = 0; _i1737 < _size1735; ++_i1737) {
          var elem1738 = null;
          elem1738 = input.readString().value;
          this.ids.push(elem1738);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.statusSticonFallbackDisabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getSimpleChannelContacts_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getSimpleChannelContacts_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter1739 in this.ids) {
      if (this.ids.hasOwnProperty(iter1739)) {
        iter1739 = this.ids[iter1739];
        output.writeString(iter1739);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.statusSticonFallbackDisabled !== null && this.statusSticonFallbackDisabled !== undefined) {
    output.writeFieldBegin('statusSticonFallbackDisabled', Thrift.Type.BOOL, 2);
    output.writeBool(this.statusSticonFallbackDisabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getSimpleChannelContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SimpleChannelContact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getSimpleChannelContacts_result.prototype = {};
CallService_getSimpleChannelContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31741 = input.readListBegin();
        var _size1740 = _rtmp31741.size || 0;
        for (var _i1742 = 0; _i1742 < _size1740; ++_i1742) {
          var elem1743 = null;
          elem1743 = new SimpleChannelContact();
          elem1743.read(input);
          this.success.push(elem1743);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getSimpleChannelContacts_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getSimpleChannelContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1744 in this.success) {
      if (this.success.hasOwnProperty(iter1744)) {
        iter1744 = this.success[iter1744];
        iter1744.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getUserLastSentMessageTimeStamp_args = function(args) {
  this.mid = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
CallService_getUserLastSentMessageTimeStamp_args.prototype = {};
CallService_getUserLastSentMessageTimeStamp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getUserLastSentMessageTimeStamp_args.prototype.write = function(output) {
  output.writeStructBegin('CallService_getUserLastSentMessageTimeStamp_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallService_getUserLastSentMessageTimeStamp_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CallService_getUserLastSentMessageTimeStamp_result.prototype = {};
CallService_getUserLastSentMessageTimeStamp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallService_getUserLastSentMessageTimeStamp_result.prototype.write = function(output) {
  output.writeStructBegin('CallService_getUserLastSentMessageTimeStamp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CallServiceClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
CallServiceClient.prototype = {};

CallServiceClient.prototype.getUserStatus = function(mid, callback) {
  this.send_getUserStatus(mid, callback); 
  if (!callback) {
    return this.recv_getUserStatus();
  }
};

CallServiceClient.prototype.send_getUserStatus = function(mid, callback) {
  var params = {
    mid: mid
  };
  var args = new CallService_getUserStatus_args(params);
  try {
    this.output.writeMessageBegin('getUserStatus', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getUserStatus();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getUserStatus = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getUserStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserStatus failed: unknown result';
};

CallServiceClient.prototype.updateProfileAttributeForChannel = function(profileAttribute, value, callback) {
  this.send_updateProfileAttributeForChannel(profileAttribute, value, callback); 
  if (!callback) {
  this.recv_updateProfileAttributeForChannel();
  }
};

CallServiceClient.prototype.send_updateProfileAttributeForChannel = function(profileAttribute, value, callback) {
  var params = {
    profileAttribute: profileAttribute,
    value: value
  };
  var args = new CallService_updateProfileAttributeForChannel_args(params);
  try {
    this.output.writeMessageBegin('updateProfileAttributeForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_updateProfileAttributeForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_updateProfileAttributeForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_updateProfileAttributeForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

CallServiceClient.prototype.updateExtendedProfileAttribute = function(attr, extendedProfile, callback) {
  this.send_updateExtendedProfileAttribute(attr, extendedProfile, callback); 
  if (!callback) {
  this.recv_updateExtendedProfileAttribute();
  }
};

CallServiceClient.prototype.send_updateExtendedProfileAttribute = function(attr, extendedProfile, callback) {
  var params = {
    attr: attr,
    extendedProfile: extendedProfile
  };
  var args = new CallService_updateExtendedProfileAttribute_args(params);
  try {
    this.output.writeMessageBegin('updateExtendedProfileAttribute', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_updateExtendedProfileAttribute();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_updateExtendedProfileAttribute = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_updateExtendedProfileAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

CallServiceClient.prototype.getAllSimpleChannelContacts = function(statusSticonFallbackDisabled, callback) {
  this.send_getAllSimpleChannelContacts(statusSticonFallbackDisabled, callback); 
  if (!callback) {
    return this.recv_getAllSimpleChannelContacts();
  }
};

CallServiceClient.prototype.send_getAllSimpleChannelContacts = function(statusSticonFallbackDisabled, callback) {
  var params = {
    statusSticonFallbackDisabled: statusSticonFallbackDisabled
  };
  var args = new CallService_getAllSimpleChannelContacts_args(params);
  try {
    this.output.writeMessageBegin('getAllSimpleChannelContacts', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getAllSimpleChannelContacts();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getAllSimpleChannelContacts = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getAllSimpleChannelContacts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllSimpleChannelContacts failed: unknown result';
};

CallServiceClient.prototype.getUserIdentities = function(callback) {
  this.send_getUserIdentities(callback); 
  if (!callback) {
    return this.recv_getUserIdentities();
  }
};

CallServiceClient.prototype.send_getUserIdentities = function(callback) {
  var args = new CallService_getUserIdentities_args();
  try {
    this.output.writeMessageBegin('getUserIdentities', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getUserIdentities();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getUserIdentities = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getUserIdentities_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserIdentities failed: unknown result';
};

CallServiceClient.prototype.markPaidCallAd = function(dialedNumber, language, disableCallerId, callback) {
  this.send_markPaidCallAd(dialedNumber, language, disableCallerId, callback); 
  if (!callback) {
    return this.recv_markPaidCallAd();
  }
};

CallServiceClient.prototype.send_markPaidCallAd = function(dialedNumber, language, disableCallerId, callback) {
  var params = {
    dialedNumber: dialedNumber,
    language: language,
    disableCallerId: disableCallerId
  };
  var args = new CallService_markPaidCallAd_args(params);
  try {
    this.output.writeMessageBegin('markPaidCallAd', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_markPaidCallAd();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_markPaidCallAd = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_markPaidCallAd_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'markPaidCallAd failed: unknown result';
};

CallServiceClient.prototype.isGroupMember = function(groupId, callback) {
  this.send_isGroupMember(groupId, callback); 
  if (!callback) {
    return this.recv_isGroupMember();
  }
};

CallServiceClient.prototype.send_isGroupMember = function(groupId, callback) {
  var params = {
    groupId: groupId
  };
  var args = new CallService_isGroupMember_args(params);
  try {
    this.output.writeMessageBegin('isGroupMember', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_isGroupMember();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_isGroupMember = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_isGroupMember_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isGroupMember failed: unknown result';
};

CallServiceClient.prototype.getPhoneInfoFromPhoneNumber = function(region, phoneNumber, callback) {
  this.send_getPhoneInfoFromPhoneNumber(region, phoneNumber, callback); 
  if (!callback) {
    return this.recv_getPhoneInfoFromPhoneNumber();
  }
};

CallServiceClient.prototype.send_getPhoneInfoFromPhoneNumber = function(region, phoneNumber, callback) {
  var params = {
    region: region,
    phoneNumber: phoneNumber
  };
  var args = new CallService_getPhoneInfoFromPhoneNumber_args(params);
  try {
    this.output.writeMessageBegin('getPhoneInfoFromPhoneNumber', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPhoneInfoFromPhoneNumber();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getPhoneInfoFromPhoneNumber = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getPhoneInfoFromPhoneNumber_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPhoneInfoFromPhoneNumber failed: unknown result';
};

CallServiceClient.prototype.redeemPaidCallVoucher = function(serial, language, callback) {
  this.send_redeemPaidCallVoucher(serial, language, callback); 
  if (!callback) {
    return this.recv_redeemPaidCallVoucher();
  }
};

CallServiceClient.prototype.send_redeemPaidCallVoucher = function(serial, language, callback) {
  var params = {
    serial: serial,
    language: language
  };
  var args = new CallService_redeemPaidCallVoucher_args(params);
  try {
    this.output.writeMessageBegin('redeemPaidCallVoucher', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_redeemPaidCallVoucher();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_redeemPaidCallVoucher = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_redeemPaidCallVoucher_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'redeemPaidCallVoucher failed: unknown result';
};

CallServiceClient.prototype.getPreferredDisplayName = function(mids, callback) {
  this.send_getPreferredDisplayName(mids, callback); 
  if (!callback) {
    return this.recv_getPreferredDisplayName();
  }
};

CallServiceClient.prototype.send_getPreferredDisplayName = function(mids, callback) {
  var params = {
    mids: mids
  };
  var args = new CallService_getPreferredDisplayName_args(params);
  try {
    this.output.writeMessageBegin('getPreferredDisplayName', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPreferredDisplayName();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getPreferredDisplayName = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getPreferredDisplayName_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPreferredDisplayName failed: unknown result';
};

CallServiceClient.prototype.getContactsForChannel = function(ids, callback) {
  this.send_getContactsForChannel(ids, callback); 
  if (!callback) {
    return this.recv_getContactsForChannel();
  }
};

CallServiceClient.prototype.send_getContactsForChannel = function(ids, callback) {
  var params = {
    ids: ids
  };
  var args = new CallService_getContactsForChannel_args(params);
  try {
    this.output.writeMessageBegin('getContactsForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getContactsForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getContactsForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getContactsForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getContactsForChannel failed: unknown result';
};

CallServiceClient.prototype.getCallCreditProducts = function(appStoreCode, pgCode, country, language, callback) {
  this.send_getCallCreditProducts(appStoreCode, pgCode, country, language, callback); 
  if (!callback) {
    return this.recv_getCallCreditProducts();
  }
};

CallServiceClient.prototype.send_getCallCreditProducts = function(appStoreCode, pgCode, country, language, callback) {
  var params = {
    appStoreCode: appStoreCode,
    pgCode: pgCode,
    country: country,
    language: language
  };
  var args = new CallService_getCallCreditProducts_args(params);
  try {
    this.output.writeMessageBegin('getCallCreditProducts', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getCallCreditProducts();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getCallCreditProducts = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getCallCreditProducts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCallCreditProducts failed: unknown result';
};

CallServiceClient.prototype.getCompactContacts = function(lastModifiedTimestamp, callback) {
  this.send_getCompactContacts(lastModifiedTimestamp, callback); 
  if (!callback) {
    return this.recv_getCompactContacts();
  }
};

CallServiceClient.prototype.send_getCompactContacts = function(lastModifiedTimestamp, callback) {
  var params = {
    lastModifiedTimestamp: lastModifiedTimestamp
  };
  var args = new CallService_getCompactContacts_args(params);
  try {
    this.output.writeMessageBegin('getCompactContacts', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getCompactContacts();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getCompactContacts = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getCompactContacts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCompactContacts failed: unknown result';
};

CallServiceClient.prototype.notifyNotiCenterEvent = function(event, callback) {
  this.send_notifyNotiCenterEvent(event, callback); 
  if (!callback) {
  this.recv_notifyNotiCenterEvent();
  }
};

CallServiceClient.prototype.send_notifyNotiCenterEvent = function(event, callback) {
  var params = {
    event: event
  };
  var args = new CallService_notifyNotiCenterEvent_args(params);
  try {
    this.output.writeMessageBegin('notifyNotiCenterEvent', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_notifyNotiCenterEvent();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_notifyNotiCenterEvent = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_notifyNotiCenterEvent_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

CallServiceClient.prototype.isInContact = function(mid, callback) {
  this.send_isInContact(mid, callback); 
  if (!callback) {
    return this.recv_isInContact();
  }
};

CallServiceClient.prototype.send_isInContact = function(mid, callback) {
  var params = {
    mid: mid
  };
  var args = new CallService_isInContact_args(params);
  try {
    this.output.writeMessageBegin('isInContact', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_isInContact();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_isInContact = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_isInContact_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isInContact failed: unknown result';
};

CallServiceClient.prototype.lookupGroupMembers = function(groupId, mids, callback) {
  this.send_lookupGroupMembers(groupId, mids, callback); 
  if (!callback) {
    return this.recv_lookupGroupMembers();
  }
};

CallServiceClient.prototype.send_lookupGroupMembers = function(groupId, mids, callback) {
  var params = {
    groupId: groupId,
    mids: mids
  };
  var args = new CallService_lookupGroupMembers_args(params);
  try {
    this.output.writeMessageBegin('lookupGroupMembers', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_lookupGroupMembers();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_lookupGroupMembers = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_lookupGroupMembers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'lookupGroupMembers failed: unknown result';
};

CallServiceClient.prototype.getRoomInformation = function(roomMid, callback) {
  this.send_getRoomInformation(roomMid, callback); 
  if (!callback) {
    return this.recv_getRoomInformation();
  }
};

CallServiceClient.prototype.send_getRoomInformation = function(roomMid, callback) {
  var params = {
    roomMid: roomMid
  };
  var args = new CallService_getRoomInformation_args(params);
  try {
    this.output.writeMessageBegin('getRoomInformation', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getRoomInformation();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getRoomInformation = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getRoomInformation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRoomInformation failed: unknown result';
};

CallServiceClient.prototype.getGroupCall = function(chatMid, callback) {
  this.send_getGroupCall(chatMid, callback); 
  if (!callback) {
    return this.recv_getGroupCall();
  }
};

CallServiceClient.prototype.send_getGroupCall = function(chatMid, callback) {
  var params = {
    chatMid: chatMid
  };
  var args = new CallService_getGroupCall_args(params);
  try {
    this.output.writeMessageBegin('getGroupCall', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getGroupCall();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getGroupCall = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getGroupCall_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getGroupCall failed: unknown result';
};

CallServiceClient.prototype.isAllowSecondaryDeviceLogin = function(callback) {
  this.send_isAllowSecondaryDeviceLogin(callback); 
  if (!callback) {
    return this.recv_isAllowSecondaryDeviceLogin();
  }
};

CallServiceClient.prototype.send_isAllowSecondaryDeviceLogin = function(callback) {
  var args = new CallService_isAllowSecondaryDeviceLogin_args();
  try {
    this.output.writeMessageBegin('isAllowSecondaryDeviceLogin', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_isAllowSecondaryDeviceLogin();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_isAllowSecondaryDeviceLogin = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_isAllowSecondaryDeviceLogin_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isAllowSecondaryDeviceLogin failed: unknown result';
};

CallServiceClient.prototype.getPrimaryClientForChannel = function(callback) {
  this.send_getPrimaryClientForChannel(callback); 
  if (!callback) {
    return this.recv_getPrimaryClientForChannel();
  }
};

CallServiceClient.prototype.send_getPrimaryClientForChannel = function(callback) {
  var args = new CallService_getPrimaryClientForChannel_args();
  try {
    this.output.writeMessageBegin('getPrimaryClientForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPrimaryClientForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getPrimaryClientForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getPrimaryClientForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPrimaryClientForChannel failed: unknown result';
};

CallServiceClient.prototype.createRoomWithBuddy = function(reqSeq, buddyMid, contactIds, callback) {
  this.send_createRoomWithBuddy(reqSeq, buddyMid, contactIds, callback); 
  if (!callback) {
    return this.recv_createRoomWithBuddy();
  }
};

CallServiceClient.prototype.send_createRoomWithBuddy = function(reqSeq, buddyMid, contactIds, callback) {
  var params = {
    reqSeq: reqSeq,
    buddyMid: buddyMid,
    contactIds: contactIds
  };
  var args = new CallService_createRoomWithBuddy_args(params);
  try {
    this.output.writeMessageBegin('createRoomWithBuddy', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_createRoomWithBuddy();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_createRoomWithBuddy = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_createRoomWithBuddy_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createRoomWithBuddy failed: unknown result';
};

CallServiceClient.prototype.getDisplayName = function(mid, callback) {
  this.send_getDisplayName(mid, callback); 
  if (!callback) {
    return this.recv_getDisplayName();
  }
};

CallServiceClient.prototype.send_getDisplayName = function(mid, callback) {
  var params = {
    mid: mid
  };
  var args = new CallService_getDisplayName_args(params);
  try {
    this.output.writeMessageBegin('getDisplayName', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getDisplayName();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getDisplayName = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getDisplayName_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDisplayName failed: unknown result';
};

CallServiceClient.prototype.getPaidCallMetadata = function(language, callback) {
  this.send_getPaidCallMetadata(language, callback); 
  if (!callback) {
    return this.recv_getPaidCallMetadata();
  }
};

CallServiceClient.prototype.send_getPaidCallMetadata = function(language, callback) {
  var params = {
    language: language
  };
  var args = new CallService_getPaidCallMetadata_args(params);
  try {
    this.output.writeMessageBegin('getPaidCallMetadata', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPaidCallMetadata();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getPaidCallMetadata = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getPaidCallMetadata_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPaidCallMetadata failed: unknown result';
};

CallServiceClient.prototype.getMid = function(callback) {
  this.send_getMid(callback); 
  if (!callback) {
    return this.recv_getMid();
  }
};

CallServiceClient.prototype.send_getMid = function(callback) {
  var args = new CallService_getMid_args();
  try {
    this.output.writeMessageBegin('getMid', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getMid();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getMid = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getMid_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMid failed: unknown result';
};

CallServiceClient.prototype.getUserCountryForBilling = function(country, remoteIp, callback) {
  this.send_getUserCountryForBilling(country, remoteIp, callback); 
  if (!callback) {
    return this.recv_getUserCountryForBilling();
  }
};

CallServiceClient.prototype.send_getUserCountryForBilling = function(country, remoteIp, callback) {
  var params = {
    country: country,
    remoteIp: remoteIp
  };
  var args = new CallService_getUserCountryForBilling_args(params);
  try {
    this.output.writeMessageBegin('getUserCountryForBilling', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getUserCountryForBilling();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getUserCountryForBilling = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getUserCountryForBilling_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserCountryForBilling failed: unknown result';
};

CallServiceClient.prototype.getFavoriteGroupIdsForChannel = function(callback) {
  this.send_getFavoriteGroupIdsForChannel(callback); 
  if (!callback) {
    return this.recv_getFavoriteGroupIdsForChannel();
  }
};

CallServiceClient.prototype.send_getFavoriteGroupIdsForChannel = function(callback) {
  var args = new CallService_getFavoriteGroupIdsForChannel_args();
  try {
    this.output.writeMessageBegin('getFavoriteGroupIdsForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getFavoriteGroupIdsForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getFavoriteGroupIdsForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getFavoriteGroupIdsForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFavoriteGroupIdsForChannel failed: unknown result';
};

CallServiceClient.prototype.getPaidCallHistory = function(start, size, language, callback) {
  this.send_getPaidCallHistory(start, size, language, callback); 
  if (!callback) {
    return this.recv_getPaidCallHistory();
  }
};

CallServiceClient.prototype.send_getPaidCallHistory = function(start, size, language, callback) {
  var params = {
    start: start,
    size: size,
    language: language
  };
  var args = new CallService_getPaidCallHistory_args(params);
  try {
    this.output.writeMessageBegin('getPaidCallHistory', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPaidCallHistory();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getPaidCallHistory = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getPaidCallHistory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPaidCallHistory failed: unknown result';
};

CallServiceClient.prototype.sendPinCodeOperation = function(verifier, callback) {
  this.send_sendPinCodeOperation(verifier, callback); 
  if (!callback) {
  this.recv_sendPinCodeOperation();
  }
};

CallServiceClient.prototype.send_sendPinCodeOperation = function(verifier, callback) {
  var params = {
    verifier: verifier
  };
  var args = new CallService_sendPinCodeOperation_args(params);
  try {
    this.output.writeMessageBegin('sendPinCodeOperation', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_sendPinCodeOperation();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_sendPinCodeOperation = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_sendPinCodeOperation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

CallServiceClient.prototype.inviteIntoGroupCall = function(chatMid, memberMids, mediaType, callback) {
  this.send_inviteIntoGroupCall(chatMid, memberMids, mediaType, callback); 
  if (!callback) {
  this.recv_inviteIntoGroupCall();
  }
};

CallServiceClient.prototype.send_inviteIntoGroupCall = function(chatMid, memberMids, mediaType, callback) {
  var params = {
    chatMid: chatMid,
    memberMids: memberMids,
    mediaType: mediaType
  };
  var args = new CallService_inviteIntoGroupCall_args(params);
  try {
    this.output.writeMessageBegin('inviteIntoGroupCall', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_inviteIntoGroupCall();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_inviteIntoGroupCall = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_inviteIntoGroupCall_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

CallServiceClient.prototype.getFriendMids = function(callback) {
  this.send_getFriendMids(callback); 
  if (!callback) {
    return this.recv_getFriendMids();
  }
};

CallServiceClient.prototype.send_getFriendMids = function(callback) {
  var args = new CallService_getFriendMids_args();
  try {
    this.output.writeMessageBegin('getFriendMids', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getFriendMids();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getFriendMids = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getFriendMids_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFriendMids failed: unknown result';
};

CallServiceClient.prototype.getMetaProfile = function(callback) {
  this.send_getMetaProfile(callback); 
  if (!callback) {
    return this.recv_getMetaProfile();
  }
};

CallServiceClient.prototype.send_getMetaProfile = function(callback) {
  var args = new CallService_getMetaProfile_args();
  try {
    this.output.writeMessageBegin('getMetaProfile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getMetaProfile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getMetaProfile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getMetaProfile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMetaProfile failed: unknown result';
};

CallServiceClient.prototype.sendMessageForChannel = function(message, callback) {
  this.send_sendMessageForChannel(message, callback); 
  if (!callback) {
    return this.recv_sendMessageForChannel();
  }
};

CallServiceClient.prototype.send_sendMessageForChannel = function(message, callback) {
  var params = {
    message: message
  };
  var args = new CallService_sendMessageForChannel_args(params);
  try {
    this.output.writeMessageBegin('sendMessageForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_sendMessageForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_sendMessageForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_sendMessageForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendMessageForChannel failed: unknown result';
};

CallServiceClient.prototype.activeBuddySubscriberCount = function(callback) {
  this.send_activeBuddySubscriberCount(callback); 
  if (!callback) {
    return this.recv_activeBuddySubscriberCount();
  }
};

CallServiceClient.prototype.send_activeBuddySubscriberCount = function(callback) {
  var args = new CallService_activeBuddySubscriberCount_args();
  try {
    this.output.writeMessageBegin('activeBuddySubscriberCount', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_activeBuddySubscriberCount();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_activeBuddySubscriberCount = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_activeBuddySubscriberCount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'activeBuddySubscriberCount failed: unknown result';
};

CallServiceClient.prototype.getCallCreditPurchaseHistory = function(request, callback) {
  this.send_getCallCreditPurchaseHistory(request, callback); 
  if (!callback) {
    return this.recv_getCallCreditPurchaseHistory();
  }
};

CallServiceClient.prototype.send_getCallCreditPurchaseHistory = function(request, callback) {
  var params = {
    request: request
  };
  var args = new CallService_getCallCreditPurchaseHistory_args(params);
  try {
    this.output.writeMessageBegin('getCallCreditPurchaseHistory', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getCallCreditPurchaseHistory();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getCallCreditPurchaseHistory = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getCallCreditPurchaseHistory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCallCreditPurchaseHistory failed: unknown result';
};

CallServiceClient.prototype.isRoomMember = function(roomId, callback) {
  this.send_isRoomMember(roomId, callback); 
  if (!callback) {
    return this.recv_isRoomMember();
  }
};

CallServiceClient.prototype.send_isRoomMember = function(roomId, callback) {
  var params = {
    roomId: roomId
  };
  var args = new CallService_isRoomMember_args(params);
  try {
    this.output.writeMessageBegin('isRoomMember', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_isRoomMember();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_isRoomMember = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_isRoomMember_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isRoomMember failed: unknown result';
};

CallServiceClient.prototype.sendSystemOAMessage = function(message, callback) {
  this.send_sendSystemOAMessage(message, callback); 
  if (!callback) {
    return this.recv_sendSystemOAMessage();
  }
};

CallServiceClient.prototype.send_sendSystemOAMessage = function(message, callback) {
  var params = {
    message: message
  };
  var args = new CallService_sendSystemOAMessage_args(params);
  try {
    this.output.writeMessageBegin('sendSystemOAMessage', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_sendSystemOAMessage();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_sendSystemOAMessage = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_sendSystemOAMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendSystemOAMessage failed: unknown result';
};

CallServiceClient.prototype.acquirePaidCallRoute = function(paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId, callback) {
  this.send_acquirePaidCallRoute(paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId, callback); 
  if (!callback) {
    return this.recv_acquirePaidCallRoute();
  }
};

CallServiceClient.prototype.send_acquirePaidCallRoute = function(paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId, callback) {
  var params = {
    paidCallType: paidCallType,
    dialedNumber: dialedNumber,
    language: language,
    networkCode: networkCode,
    disableCallerId: disableCallerId,
    referer: referer,
    adSessionId: adSessionId
  };
  var args = new CallService_acquirePaidCallRoute_args(params);
  try {
    this.output.writeMessageBegin('acquirePaidCallRoute', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_acquirePaidCallRoute();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_acquirePaidCallRoute = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_acquirePaidCallRoute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'acquirePaidCallRoute failed: unknown result';
};

CallServiceClient.prototype.getGroupsForChannel = function(groupIds, callback) {
  this.send_getGroupsForChannel(groupIds, callback); 
  if (!callback) {
    return this.recv_getGroupsForChannel();
  }
};

CallServiceClient.prototype.send_getGroupsForChannel = function(groupIds, callback) {
  var params = {
    groupIds: groupIds
  };
  var args = new CallService_getGroupsForChannel_args(params);
  try {
    this.output.writeMessageBegin('getGroupsForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getGroupsForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getGroupsForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getGroupsForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getGroupsForChannel failed: unknown result';
};

CallServiceClient.prototype.getUserCreateTime = function(callback) {
  this.send_getUserCreateTime(callback); 
  if (!callback) {
    return this.recv_getUserCreateTime();
  }
};

CallServiceClient.prototype.send_getUserCreateTime = function(callback) {
  var args = new CallService_getUserCreateTime_args();
  try {
    this.output.writeMessageBegin('getUserCreateTime', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getUserCreateTime();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getUserCreateTime = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getUserCreateTime_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserCreateTime failed: unknown result';
};

CallServiceClient.prototype.registerChannelCP = function(cpId, registerPassword, callback) {
  this.send_registerChannelCP(cpId, registerPassword, callback); 
  if (!callback) {
    return this.recv_registerChannelCP();
  }
};

CallServiceClient.prototype.send_registerChannelCP = function(cpId, registerPassword, callback) {
  var params = {
    cpId: cpId,
    registerPassword: registerPassword
  };
  var args = new CallService_registerChannelCP_args(params);
  try {
    this.output.writeMessageBegin('registerChannelCP', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_registerChannelCP();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_registerChannelCP = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_registerChannelCP_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerChannelCP failed: unknown result';
};

CallServiceClient.prototype.reserveCallCreditPurchase = function(request, callback) {
  this.send_reserveCallCreditPurchase(request, callback); 
  if (!callback) {
    return this.recv_reserveCallCreditPurchase();
  }
};

CallServiceClient.prototype.send_reserveCallCreditPurchase = function(request, callback) {
  var params = {
    request: request
  };
  var args = new CallService_reserveCallCreditPurchase_args(params);
  try {
    this.output.writeMessageBegin('reserveCallCreditPurchase', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_reserveCallCreditPurchase();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_reserveCallCreditPurchase = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_reserveCallCreditPurchase_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reserveCallCreditPurchase failed: unknown result';
};

CallServiceClient.prototype.acquirePaidCallCurrencyExchangeRate = function(language, callback) {
  this.send_acquirePaidCallCurrencyExchangeRate(language, callback); 
  if (!callback) {
    return this.recv_acquirePaidCallCurrencyExchangeRate();
  }
};

CallServiceClient.prototype.send_acquirePaidCallCurrencyExchangeRate = function(language, callback) {
  var params = {
    language: language
  };
  var args = new CallService_acquirePaidCallCurrencyExchangeRate_args(params);
  try {
    this.output.writeMessageBegin('acquirePaidCallCurrencyExchangeRate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_acquirePaidCallCurrencyExchangeRate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_acquirePaidCallCurrencyExchangeRate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_acquirePaidCallCurrencyExchangeRate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'acquirePaidCallCurrencyExchangeRate failed: unknown result';
};

CallServiceClient.prototype.getRoomMemberMidsForAppPlatform = function(roomId, callback) {
  this.send_getRoomMemberMidsForAppPlatform(roomId, callback); 
  if (!callback) {
    return this.recv_getRoomMemberMidsForAppPlatform();
  }
};

CallServiceClient.prototype.send_getRoomMemberMidsForAppPlatform = function(roomId, callback) {
  var params = {
    roomId: roomId
  };
  var args = new CallService_getRoomMemberMidsForAppPlatform_args(params);
  try {
    this.output.writeMessageBegin('getRoomMemberMidsForAppPlatform', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getRoomMemberMidsForAppPlatform();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getRoomMemberMidsForAppPlatform = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getRoomMemberMidsForAppPlatform_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRoomMemberMidsForAppPlatform failed: unknown result';
};

CallServiceClient.prototype.getPaidCallBalanceList = function(language, callback) {
  this.send_getPaidCallBalanceList(language, callback); 
  if (!callback) {
    return this.recv_getPaidCallBalanceList();
  }
};

CallServiceClient.prototype.send_getPaidCallBalanceList = function(language, callback) {
  var params = {
    language: language
  };
  var args = new CallService_getPaidCallBalanceList_args(params);
  try {
    this.output.writeMessageBegin('getPaidCallBalanceList', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPaidCallBalanceList();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getPaidCallBalanceList = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getPaidCallBalanceList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPaidCallBalanceList failed: unknown result';
};

CallServiceClient.prototype.getPersonalInfos = function(requiredPersonalInfos, callback) {
  this.send_getPersonalInfos(requiredPersonalInfos, callback); 
  if (!callback) {
    return this.recv_getPersonalInfos();
  }
};

CallServiceClient.prototype.send_getPersonalInfos = function(requiredPersonalInfos, callback) {
  var params = {
    requiredPersonalInfos: requiredPersonalInfos
  };
  var args = new CallService_getPersonalInfos_args(params);
  try {
    this.output.writeMessageBegin('getPersonalInfos', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPersonalInfos();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getPersonalInfos = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getPersonalInfos_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPersonalInfos failed: unknown result';
};

CallServiceClient.prototype.getPrimaryClientsForChannel = function(userMids, callback) {
  this.send_getPrimaryClientsForChannel(userMids, callback); 
  if (!callback) {
    return this.recv_getPrimaryClientsForChannel();
  }
};

CallServiceClient.prototype.send_getPrimaryClientsForChannel = function(userMids, callback) {
  var params = {
    userMids: userMids
  };
  var args = new CallService_getPrimaryClientsForChannel_args(params);
  try {
    this.output.writeMessageBegin('getPrimaryClientsForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPrimaryClientsForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getPrimaryClientsForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getPrimaryClientsForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPrimaryClientsForChannel failed: unknown result';
};

CallServiceClient.prototype.addBuddyToContact = function(buddyMid, callback) {
  this.send_addBuddyToContact(buddyMid, callback); 
  if (!callback) {
    return this.recv_addBuddyToContact();
  }
};

CallServiceClient.prototype.send_addBuddyToContact = function(buddyMid, callback) {
  var params = {
    buddyMid: buddyMid
  };
  var args = new CallService_addBuddyToContact_args(params);
  try {
    this.output.writeMessageBegin('addBuddyToContact', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_addBuddyToContact();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_addBuddyToContact = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_addBuddyToContact_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addBuddyToContact failed: unknown result';
};

CallServiceClient.prototype.getGroupMemberMidsForAppPlatform = function(groupId, callback) {
  this.send_getGroupMemberMidsForAppPlatform(groupId, callback); 
  if (!callback) {
    return this.recv_getGroupMemberMidsForAppPlatform();
  }
};

CallServiceClient.prototype.send_getGroupMemberMidsForAppPlatform = function(groupId, callback) {
  var params = {
    groupId: groupId
  };
  var args = new CallService_getGroupMemberMidsForAppPlatform_args(params);
  try {
    this.output.writeMessageBegin('getGroupMemberMidsForAppPlatform', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getGroupMemberMidsForAppPlatform();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getGroupMemberMidsForAppPlatform = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getGroupMemberMidsForAppPlatform_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getGroupMemberMidsForAppPlatform failed: unknown result';
};

CallServiceClient.prototype.getUserLanguage = function(callback) {
  this.send_getUserLanguage(callback); 
  if (!callback) {
    return this.recv_getUserLanguage();
  }
};

CallServiceClient.prototype.send_getUserLanguage = function(callback) {
  var args = new CallService_getUserLanguage_args();
  try {
    this.output.writeMessageBegin('getUserLanguage', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getUserLanguage();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getUserLanguage = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getUserLanguage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserLanguage failed: unknown result';
};

CallServiceClient.prototype.lookupPaidCall = function(dialedNumber, language, referer, callback) {
  this.send_lookupPaidCall(dialedNumber, language, referer, callback); 
  if (!callback) {
    return this.recv_lookupPaidCall();
  }
};

CallServiceClient.prototype.send_lookupPaidCall = function(dialedNumber, language, referer, callback) {
  var params = {
    dialedNumber: dialedNumber,
    language: language,
    referer: referer
  };
  var args = new CallService_lookupPaidCall_args(params);
  try {
    this.output.writeMessageBegin('lookupPaidCall', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_lookupPaidCall();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_lookupPaidCall = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_lookupPaidCall_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'lookupPaidCall failed: unknown result';
};

CallServiceClient.prototype.getExtendedProfile = function(callback) {
  this.send_getExtendedProfile(callback); 
  if (!callback) {
    return this.recv_getExtendedProfile();
  }
};

CallServiceClient.prototype.send_getExtendedProfile = function(callback) {
  var args = new CallService_getExtendedProfile_args();
  try {
    this.output.writeMessageBegin('getExtendedProfile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getExtendedProfile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getExtendedProfile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getExtendedProfile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getExtendedProfile failed: unknown result';
};

CallServiceClient.prototype.getReverseCompactContacts = function(ids, callback) {
  this.send_getReverseCompactContacts(ids, callback); 
  if (!callback) {
    return this.recv_getReverseCompactContacts();
  }
};

CallServiceClient.prototype.send_getReverseCompactContacts = function(ids, callback) {
  var params = {
    ids: ids
  };
  var args = new CallService_getReverseCompactContacts_args(params);
  try {
    this.output.writeMessageBegin('getReverseCompactContacts', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getReverseCompactContacts();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getReverseCompactContacts = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getReverseCompactContacts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getReverseCompactContacts failed: unknown result';
};

CallServiceClient.prototype.getPaidCallAdStatus = function(callback) {
  this.send_getPaidCallAdStatus(callback); 
  if (!callback) {
    return this.recv_getPaidCallAdStatus();
  }
};

CallServiceClient.prototype.send_getPaidCallAdStatus = function(callback) {
  var args = new CallService_getPaidCallAdStatus_args();
  try {
    this.output.writeMessageBegin('getPaidCallAdStatus', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPaidCallAdStatus();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getPaidCallAdStatus = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getPaidCallAdStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPaidCallAdStatus failed: unknown result';
};

CallServiceClient.prototype.findContactByUseridWithoutAbuseBlockForChannel = function(userid, callback) {
  this.send_findContactByUseridWithoutAbuseBlockForChannel(userid, callback); 
  if (!callback) {
    return this.recv_findContactByUseridWithoutAbuseBlockForChannel();
  }
};

CallServiceClient.prototype.send_findContactByUseridWithoutAbuseBlockForChannel = function(userid, callback) {
  var params = {
    userid: userid
  };
  var args = new CallService_findContactByUseridWithoutAbuseBlockForChannel_args(params);
  try {
    this.output.writeMessageBegin('findContactByUseridWithoutAbuseBlockForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_findContactByUseridWithoutAbuseBlockForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_findContactByUseridWithoutAbuseBlockForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_findContactByUseridWithoutAbuseBlockForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findContactByUseridWithoutAbuseBlockForChannel failed: unknown result';
};

CallServiceClient.prototype.getGroupMemberMids = function(groupId, callback) {
  this.send_getGroupMemberMids(groupId, callback); 
  if (!callback) {
    return this.recv_getGroupMemberMids();
  }
};

CallServiceClient.prototype.send_getGroupMemberMids = function(groupId, callback) {
  var params = {
    groupId: groupId
  };
  var args = new CallService_getGroupMemberMids_args(params);
  try {
    this.output.writeMessageBegin('getGroupMemberMids', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getGroupMemberMids();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getGroupMemberMids = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getGroupMemberMids_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getGroupMemberMids failed: unknown result';
};

CallServiceClient.prototype.sendMessageWithoutRelationship = function(message, callback) {
  this.send_sendMessageWithoutRelationship(message, callback); 
  if (!callback) {
    return this.recv_sendMessageWithoutRelationship();
  }
};

CallServiceClient.prototype.send_sendMessageWithoutRelationship = function(message, callback) {
  var params = {
    message: message
  };
  var args = new CallService_sendMessageWithoutRelationship_args(params);
  try {
    this.output.writeMessageBegin('sendMessageWithoutRelationship', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_sendMessageWithoutRelationship();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_sendMessageWithoutRelationship = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_sendMessageWithoutRelationship_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendMessageWithoutRelationship failed: unknown result';
};

CallServiceClient.prototype.displayBuddySubscriberCountInBulk = function(mids, callback) {
  this.send_displayBuddySubscriberCountInBulk(mids, callback); 
  if (!callback) {
    return this.recv_displayBuddySubscriberCountInBulk();
  }
};

CallServiceClient.prototype.send_displayBuddySubscriberCountInBulk = function(mids, callback) {
  var params = {
    mids: mids
  };
  var args = new CallService_displayBuddySubscriberCountInBulk_args(params);
  try {
    this.output.writeMessageBegin('displayBuddySubscriberCountInBulk', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_displayBuddySubscriberCountInBulk();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_displayBuddySubscriberCountInBulk = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_displayBuddySubscriberCountInBulk_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'displayBuddySubscriberCountInBulk failed: unknown result';
};

CallServiceClient.prototype.lookupRoomMembers = function(roomId, mids, callback) {
  this.send_lookupRoomMembers(roomId, mids, callback); 
  if (!callback) {
    return this.recv_lookupRoomMembers();
  }
};

CallServiceClient.prototype.send_lookupRoomMembers = function(roomId, mids, callback) {
  var params = {
    roomId: roomId,
    mids: mids
  };
  var args = new CallService_lookupRoomMembers_args(params);
  try {
    this.output.writeMessageBegin('lookupRoomMembers', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_lookupRoomMembers();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_lookupRoomMembers = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_lookupRoomMembers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'lookupRoomMembers failed: unknown result';
};

CallServiceClient.prototype.getFavoriteMidsForChannel = function(callback) {
  this.send_getFavoriteMidsForChannel(callback); 
  if (!callback) {
    return this.recv_getFavoriteMidsForChannel();
  }
};

CallServiceClient.prototype.send_getFavoriteMidsForChannel = function(callback) {
  var args = new CallService_getFavoriteMidsForChannel_args();
  try {
    this.output.writeMessageBegin('getFavoriteMidsForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getFavoriteMidsForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getFavoriteMidsForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getFavoriteMidsForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFavoriteMidsForChannel failed: unknown result';
};

CallServiceClient.prototype.getAllContactIdsForChannel = function(callback) {
  this.send_getAllContactIdsForChannel(callback); 
  if (!callback) {
    return this.recv_getAllContactIdsForChannel();
  }
};

CallServiceClient.prototype.send_getAllContactIdsForChannel = function(callback) {
  var args = new CallService_getAllContactIdsForChannel_args();
  try {
    this.output.writeMessageBegin('getAllContactIdsForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getAllContactIdsForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getAllContactIdsForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getAllContactIdsForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllContactIdsForChannel failed: unknown result';
};

CallServiceClient.prototype.displayBuddySubscriberCount = function(callback) {
  this.send_displayBuddySubscriberCount(callback); 
  if (!callback) {
    return this.recv_displayBuddySubscriberCount();
  }
};

CallServiceClient.prototype.send_displayBuddySubscriberCount = function(callback) {
  var args = new CallService_displayBuddySubscriberCount_args();
  try {
    this.output.writeMessageBegin('displayBuddySubscriberCount', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_displayBuddySubscriberCount();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_displayBuddySubscriberCount = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_displayBuddySubscriberCount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'displayBuddySubscriberCount failed: unknown result';
};

CallServiceClient.prototype.getProfileForChannel = function(callback) {
  this.send_getProfileForChannel(callback); 
  if (!callback) {
    return this.recv_getProfileForChannel();
  }
};

CallServiceClient.prototype.send_getProfileForChannel = function(callback) {
  var args = new CallService_getProfileForChannel_args();
  try {
    this.output.writeMessageBegin('getProfileForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getProfileForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getProfileForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getProfileForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getProfileForChannel failed: unknown result';
};

CallServiceClient.prototype.getUserTickets = function(userMids, callback) {
  this.send_getUserTickets(userMids, callback); 
  if (!callback) {
    return this.recv_getUserTickets();
  }
};

CallServiceClient.prototype.send_getUserTickets = function(userMids, callback) {
  var params = {
    userMids: userMids
  };
  var args = new CallService_getUserTickets_args(params);
  try {
    this.output.writeMessageBegin('getUserTickets', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getUserTickets();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getUserTickets = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getUserTickets_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserTickets failed: unknown result';
};

CallServiceClient.prototype.getOAFriendMids = function(callback) {
  this.send_getOAFriendMids(callback); 
  if (!callback) {
    return this.recv_getOAFriendMids();
  }
};

CallServiceClient.prototype.send_getOAFriendMids = function(callback) {
  var args = new CallService_getOAFriendMids_args();
  try {
    this.output.writeMessageBegin('getOAFriendMids', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getOAFriendMids();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getOAFriendMids = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getOAFriendMids_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getOAFriendMids failed: unknown result';
};

CallServiceClient.prototype.searchPaidCallUserRate = function(countryCode, language, callback) {
  this.send_searchPaidCallUserRate(countryCode, language, callback); 
  if (!callback) {
    return this.recv_searchPaidCallUserRate();
  }
};

CallServiceClient.prototype.send_searchPaidCallUserRate = function(countryCode, language, callback) {
  var params = {
    countryCode: countryCode,
    language: language
  };
  var args = new CallService_searchPaidCallUserRate_args(params);
  try {
    this.output.writeMessageBegin('searchPaidCallUserRate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_searchPaidCallUserRate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_searchPaidCallUserRate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_searchPaidCallUserRate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'searchPaidCallUserRate failed: unknown result';
};

CallServiceClient.prototype.getJoinedGroupIdsForChannel = function(callback) {
  this.send_getJoinedGroupIdsForChannel(callback); 
  if (!callback) {
    return this.recv_getJoinedGroupIdsForChannel();
  }
};

CallServiceClient.prototype.send_getJoinedGroupIdsForChannel = function(callback) {
  var args = new CallService_getJoinedGroupIdsForChannel_args();
  try {
    this.output.writeMessageBegin('getJoinedGroupIdsForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getJoinedGroupIdsForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getJoinedGroupIdsForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getJoinedGroupIdsForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getJoinedGroupIdsForChannel failed: unknown result';
};

CallServiceClient.prototype.acquireGroupCallRoute = function(chatMid, mediaType, callback) {
  this.send_acquireGroupCallRoute(chatMid, mediaType, callback); 
  if (!callback) {
    return this.recv_acquireGroupCallRoute();
  }
};

CallServiceClient.prototype.send_acquireGroupCallRoute = function(chatMid, mediaType, callback) {
  var params = {
    chatMid: chatMid,
    mediaType: mediaType
  };
  var args = new CallService_acquireGroupCallRoute_args(params);
  try {
    this.output.writeMessageBegin('acquireGroupCallRoute', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_acquireGroupCallRoute();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_acquireGroupCallRoute = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_acquireGroupCallRoute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'acquireGroupCallRoute failed: unknown result';
};

CallServiceClient.prototype.getUserMidsWhoAddedMe = function(callback) {
  this.send_getUserMidsWhoAddedMe(callback); 
  if (!callback) {
    return this.recv_getUserMidsWhoAddedMe();
  }
};

CallServiceClient.prototype.send_getUserMidsWhoAddedMe = function(callback) {
  var args = new CallService_getUserMidsWhoAddedMe_args();
  try {
    this.output.writeMessageBegin('getUserMidsWhoAddedMe', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getUserMidsWhoAddedMe();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getUserMidsWhoAddedMe = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getUserMidsWhoAddedMe_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserMidsWhoAddedMe failed: unknown result';
};

CallServiceClient.prototype.getIdentityCredential = function(callback) {
  this.send_getIdentityCredential(callback); 
  if (!callback) {
    return this.recv_getIdentityCredential();
  }
};

CallServiceClient.prototype.send_getIdentityCredential = function(callback) {
  var args = new CallService_getIdentityCredential_args();
  try {
    this.output.writeMessageBegin('getIdentityCredential', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getIdentityCredential();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getIdentityCredential = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getIdentityCredential_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getIdentityCredential failed: unknown result';
};

CallServiceClient.prototype.addOperationForChannel = function(opType, param1, param2, param3, callback) {
  this.send_addOperationForChannel(opType, param1, param2, param3, callback); 
  if (!callback) {
  this.recv_addOperationForChannel();
  }
};

CallServiceClient.prototype.send_addOperationForChannel = function(opType, param1, param2, param3, callback) {
  var params = {
    opType: opType,
    param1: param1,
    param2: param2,
    param3: param3
  };
  var args = new CallService_addOperationForChannel_args(params);
  try {
    this.output.writeMessageBegin('addOperationForChannel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_addOperationForChannel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_addOperationForChannel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_addOperationForChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

CallServiceClient.prototype.getSimpleChannelContacts = function(ids, statusSticonFallbackDisabled, callback) {
  this.send_getSimpleChannelContacts(ids, statusSticonFallbackDisabled, callback); 
  if (!callback) {
    return this.recv_getSimpleChannelContacts();
  }
};

CallServiceClient.prototype.send_getSimpleChannelContacts = function(ids, statusSticonFallbackDisabled, callback) {
  var params = {
    ids: ids,
    statusSticonFallbackDisabled: statusSticonFallbackDisabled
  };
  var args = new CallService_getSimpleChannelContacts_args(params);
  try {
    this.output.writeMessageBegin('getSimpleChannelContacts', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getSimpleChannelContacts();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getSimpleChannelContacts = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getSimpleChannelContacts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSimpleChannelContacts failed: unknown result';
};

CallServiceClient.prototype.getUserLastSentMessageTimeStamp = function(mid, callback) {
  this.send_getUserLastSentMessageTimeStamp(mid, callback); 
  if (!callback) {
    return this.recv_getUserLastSentMessageTimeStamp();
  }
};

CallServiceClient.prototype.send_getUserLastSentMessageTimeStamp = function(mid, callback) {
  var params = {
    mid: mid
  };
  var args = new CallService_getUserLastSentMessageTimeStamp_args(params);
  try {
    this.output.writeMessageBegin('getUserLastSentMessageTimeStamp', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getUserLastSentMessageTimeStamp();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CallServiceClient.prototype.recv_getUserLastSentMessageTimeStamp = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CallService_getUserLastSentMessageTimeStamp_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserLastSentMessageTimeStamp failed: unknown result';
};
