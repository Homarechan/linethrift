//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

TalkService_searchCollection_args = function(args) {
  this.query = null;
  this.param = null;
  if (args) {
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.param !== undefined && args.param !== null) {
      this.param = new SearchPagingParameter(args.param);
    }
  }
};
TalkService_searchCollection_args.prototype = {};
TalkService_searchCollection_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new SearchPagingParameter();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_searchCollection_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_searchCollection_args');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 1);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 2);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_searchCollection_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SearchResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_searchCollection_result.prototype = {};
TalkService_searchCollection_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SearchResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_searchCollection_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_searchCollection_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getChatRoomAnnouncementsBulk_args = function(args) {
  this.chatRoomMids = null;
  if (args) {
    if (args.chatRoomMids !== undefined && args.chatRoomMids !== null) {
      this.chatRoomMids = Thrift.copyList(args.chatRoomMids, [null]);
    }
  }
};
TalkService_getChatRoomAnnouncementsBulk_args.prototype = {};
TalkService_getChatRoomAnnouncementsBulk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1706 = 0;
        var _rtmp31710;
        this.chatRoomMids = [];
        var _etype1709 = 0;
        _rtmp31710 = input.readListBegin();
        _etype1709 = _rtmp31710.etype;
        _size1706 = _rtmp31710.size;
        for (var _i1711 = 0; _i1711 < _size1706; ++_i1711)
        {
          var elem1712 = null;
          elem1712 = input.readString().value;
          this.chatRoomMids.push(elem1712);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getChatRoomAnnouncementsBulk_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getChatRoomAnnouncementsBulk_args');
  if (this.chatRoomMids !== null && this.chatRoomMids !== undefined) {
    output.writeFieldBegin('chatRoomMids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.chatRoomMids.length);
    for (var iter1713 in this.chatRoomMids)
    {
      if (this.chatRoomMids.hasOwnProperty(iter1713))
      {
        iter1713 = this.chatRoomMids[iter1713];
        output.writeString(iter1713);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getChatRoomAnnouncementsBulk_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Thrift.copyList, ChatRoomAnnouncement]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getChatRoomAnnouncementsBulk_result.prototype = {};
TalkService_getChatRoomAnnouncementsBulk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1714 = 0;
        var _rtmp31718;
        this.success = {};
        var _ktype1715 = 0;
        var _vtype1716 = 0;
        _rtmp31718 = input.readMapBegin();
        _ktype1715 = _rtmp31718.ktype;
        _vtype1716 = _rtmp31718.vtype;
        _size1714 = _rtmp31718.size;
        for (var _i1719 = 0; _i1719 < _size1714; ++_i1719)
        {
          if (_i1719 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1720 = null;
          var val1721 = null;
          key1720 = input.readString().value;
          var _size1722 = 0;
          var _rtmp31726;
          val1721 = [];
          var _etype1725 = 0;
          _rtmp31726 = input.readListBegin();
          _etype1725 = _rtmp31726.etype;
          _size1722 = _rtmp31726.size;
          for (var _i1727 = 0; _i1727 < _size1722; ++_i1727)
          {
            var elem1728 = null;
            elem1728 = new ChatRoomAnnouncement();
            elem1728.read(input);
            val1721.push(elem1728);
          }
          input.readListEnd();
          this.success[key1720] = val1721;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getChatRoomAnnouncementsBulk_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getChatRoomAnnouncementsBulk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter1729 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1729))
      {
        var viter1730 = this.success[kiter1729];
        output.writeString(kiter1729);
        output.writeListBegin(Thrift.Type.STRUCT, viter1730.length);
        for (var iter1731 in viter1730)
        {
          if (viter1730.hasOwnProperty(iter1731))
          {
            iter1731 = viter1730[iter1731];
            iter1731.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getChatRoomAnnouncements_args = function(args) {
  this.chatRoomMid = null;
  if (args) {
    if (args.chatRoomMid !== undefined && args.chatRoomMid !== null) {
      this.chatRoomMid = args.chatRoomMid;
    }
  }
};
TalkService_getChatRoomAnnouncements_args.prototype = {};
TalkService_getChatRoomAnnouncements_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatRoomMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getChatRoomAnnouncements_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getChatRoomAnnouncements_args');
  if (this.chatRoomMid !== null && this.chatRoomMid !== undefined) {
    output.writeFieldBegin('chatRoomMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatRoomMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getChatRoomAnnouncements_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ChatRoomAnnouncement]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getChatRoomAnnouncements_result.prototype = {};
TalkService_getChatRoomAnnouncements_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1732 = 0;
        var _rtmp31736;
        this.success = [];
        var _etype1735 = 0;
        _rtmp31736 = input.readListBegin();
        _etype1735 = _rtmp31736.etype;
        _size1732 = _rtmp31736.size;
        for (var _i1737 = 0; _i1737 < _size1732; ++_i1737)
        {
          var elem1738 = null;
          elem1738 = new ChatRoomAnnouncement();
          elem1738.read(input);
          this.success.push(elem1738);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getChatRoomAnnouncements_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getChatRoomAnnouncements_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1739 in this.success)
    {
      if (this.success.hasOwnProperty(iter1739))
      {
        iter1739 = this.success[iter1739];
        iter1739.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_createChatRoomAnnouncement_args = function(args) {
  this.reqSeq = null;
  this.chatRoomMid = null;
  this.type = null;
  this.contents = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatRoomMid !== undefined && args.chatRoomMid !== null) {
      this.chatRoomMid = args.chatRoomMid;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.contents !== undefined && args.contents !== null) {
      this.contents = new ChatRoomAnnouncementContents(args.contents);
    }
  }
};
TalkService_createChatRoomAnnouncement_args.prototype = {};
TalkService_createChatRoomAnnouncement_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatRoomMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.contents = new ChatRoomAnnouncementContents();
        this.contents.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createChatRoomAnnouncement_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createChatRoomAnnouncement_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatRoomMid !== null && this.chatRoomMid !== undefined) {
    output.writeFieldBegin('chatRoomMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatRoomMid);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.contents !== null && this.contents !== undefined) {
    output.writeFieldBegin('contents', Thrift.Type.STRUCT, 4);
    this.contents.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_createChatRoomAnnouncement_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ChatRoomAnnouncement(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_createChatRoomAnnouncement_result.prototype = {};
TalkService_createChatRoomAnnouncement_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChatRoomAnnouncement();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createChatRoomAnnouncement_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createChatRoomAnnouncement_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_removeChatRoomAnnouncement_args = function(args) {
  this.reqSeq = null;
  this.chatRoomMid = null;
  this.announcementSeq = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatRoomMid !== undefined && args.chatRoomMid !== null) {
      this.chatRoomMid = args.chatRoomMid;
    }
    if (args.announcementSeq !== undefined && args.announcementSeq !== null) {
      this.announcementSeq = args.announcementSeq;
    }
  }
};
TalkService_removeChatRoomAnnouncement_args.prototype = {};
TalkService_removeChatRoomAnnouncement_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatRoomMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.announcementSeq = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeChatRoomAnnouncement_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeChatRoomAnnouncement_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatRoomMid !== null && this.chatRoomMid !== undefined) {
    output.writeFieldBegin('chatRoomMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatRoomMid);
    output.writeFieldEnd();
  }
  if (this.announcementSeq !== null && this.announcementSeq !== undefined) {
    output.writeFieldBegin('announcementSeq', Thrift.Type.I64, 3);
    output.writeI64(this.announcementSeq);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_removeChatRoomAnnouncement_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_removeChatRoomAnnouncement_result.prototype = {};
TalkService_removeChatRoomAnnouncement_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeChatRoomAnnouncement_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeChatRoomAnnouncement_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_unsendMessage_args = function(args) {
  this.seq = null;
  this.messageId = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
TalkService_unsendMessage_args.prototype = {};
TalkService_unsendMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unsendMessage_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unsendMessage_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_unsendMessage_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_unsendMessage_result.prototype = {};
TalkService_unsendMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unsendMessage_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unsendMessage_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getGroupWithoutMembers_args = function(args) {
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
TalkService_getGroupWithoutMembers_args.prototype = {};
TalkService_getGroupWithoutMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupWithoutMembers_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupWithoutMembers_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getGroupWithoutMembers_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Group(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getGroupWithoutMembers_result.prototype = {};
TalkService_getGroupWithoutMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Group();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupWithoutMembers_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupWithoutMembers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_requestResendMessage_args = function(args) {
  this.reqSeq = null;
  this.senderMid = null;
  this.messageId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.senderMid !== undefined && args.senderMid !== null) {
      this.senderMid = args.senderMid;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
TalkService_requestResendMessage_args.prototype = {};
TalkService_requestResendMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.senderMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_requestResendMessage_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_requestResendMessage_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.senderMid !== null && this.senderMid !== undefined) {
    output.writeFieldBegin('senderMid', Thrift.Type.STRING, 2);
    output.writeString(this.senderMid);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 3);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_requestResendMessage_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_requestResendMessage_result.prototype = {};
TalkService_requestResendMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_requestResendMessage_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_requestResendMessage_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_respondResendMessage_args = function(args) {
  this.reqSeq = null;
  this.receiverMid = null;
  this.originalMessageId = null;
  this.resendMessage = null;
  this.errorCode = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.receiverMid !== undefined && args.receiverMid !== null) {
      this.receiverMid = args.receiverMid;
    }
    if (args.originalMessageId !== undefined && args.originalMessageId !== null) {
      this.originalMessageId = args.originalMessageId;
    }
    if (args.resendMessage !== undefined && args.resendMessage !== null) {
      this.resendMessage = new Message(args.resendMessage);
    }
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
  }
};
TalkService_respondResendMessage_args.prototype = {};
TalkService_respondResendMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.receiverMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.originalMessageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.resendMessage = new Message();
        this.resendMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_respondResendMessage_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_respondResendMessage_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.receiverMid !== null && this.receiverMid !== undefined) {
    output.writeFieldBegin('receiverMid', Thrift.Type.STRING, 2);
    output.writeString(this.receiverMid);
    output.writeFieldEnd();
  }
  if (this.originalMessageId !== null && this.originalMessageId !== undefined) {
    output.writeFieldBegin('originalMessageId', Thrift.Type.STRING, 3);
    output.writeString(this.originalMessageId);
    output.writeFieldEnd();
  }
  if (this.resendMessage !== null && this.resendMessage !== undefined) {
    output.writeFieldBegin('resendMessage', Thrift.Type.STRUCT, 4);
    this.resendMessage.write(output);
    output.writeFieldEnd();
  }
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 5);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_respondResendMessage_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_respondResendMessage_result.prototype = {};
TalkService_respondResendMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_respondResendMessage_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_respondResendMessage_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_acceptGroupInvitation_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
TalkService_acceptGroupInvitation_args.prototype = {};
TalkService_acceptGroupInvitation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acceptGroupInvitation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acceptGroupInvitation_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_acceptGroupInvitation_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_acceptGroupInvitation_result.prototype = {};
TalkService_acceptGroupInvitation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acceptGroupInvitation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acceptGroupInvitation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_acceptGroupInvitationByTicket_args = function(args) {
  this.reqSeq = null;
  this.GroupMid = null;
  this.ticketId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.GroupMid !== undefined && args.GroupMid !== null) {
      this.GroupMid = args.GroupMid;
    }
    if (args.ticketId !== undefined && args.ticketId !== null) {
      this.ticketId = args.ticketId;
    }
  }
};
TalkService_acceptGroupInvitationByTicket_args.prototype = {};
TalkService_acceptGroupInvitationByTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.GroupMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ticketId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acceptGroupInvitationByTicket_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acceptGroupInvitationByTicket_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.GroupMid !== null && this.GroupMid !== undefined) {
    output.writeFieldBegin('GroupMid', Thrift.Type.STRING, 2);
    output.writeString(this.GroupMid);
    output.writeFieldEnd();
  }
  if (this.ticketId !== null && this.ticketId !== undefined) {
    output.writeFieldBegin('ticketId', Thrift.Type.STRING, 3);
    output.writeString(this.ticketId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_acceptGroupInvitationByTicket_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_acceptGroupInvitationByTicket_result.prototype = {};
TalkService_acceptGroupInvitationByTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acceptGroupInvitationByTicket_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acceptGroupInvitationByTicket_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_acceptProximityMatches_args = function(args) {
  this.sessionId = null;
  this.ids = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
  }
};
TalkService_acceptProximityMatches_args.prototype = {};
TalkService_acceptProximityMatches_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size1740 = 0;
        var _rtmp31744;
        this.ids = [];
        var _etype1743 = 0;
        _rtmp31744 = input.readSetBegin();
        _etype1743 = _rtmp31744.etype;
        _size1740 = _rtmp31744.size;
        for (var _i1745 = 0; _i1745 < _size1740; ++_i1745)
        {
          var elem1746 = null;
          elem1746 = input.readString().value;
          this.ids.push(elem1746);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acceptProximityMatches_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acceptProximityMatches_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter1747 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter1747))
      {
        iter1747 = this.ids[iter1747];
        output.writeString(iter1747);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_acceptProximityMatches_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_acceptProximityMatches_result.prototype = {};
TalkService_acceptProximityMatches_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acceptProximityMatches_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acceptProximityMatches_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_acquireCallRoute_args = function(args) {
  this.to = null;
  if (args) {
    if (args.to !== undefined && args.to !== null) {
      this.to = args.to;
    }
  }
};
TalkService_acquireCallRoute_args.prototype = {};
TalkService_acquireCallRoute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.to = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acquireCallRoute_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acquireCallRoute_args');
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.STRING, 2);
    output.writeString(this.to);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_acquireCallRoute_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_acquireCallRoute_result.prototype = {};
TalkService_acquireCallRoute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1748 = 0;
        var _rtmp31752;
        this.success = [];
        var _etype1751 = 0;
        _rtmp31752 = input.readListBegin();
        _etype1751 = _rtmp31752.etype;
        _size1748 = _rtmp31752.size;
        for (var _i1753 = 0; _i1753 < _size1748; ++_i1753)
        {
          var elem1754 = null;
          elem1754 = input.readString().value;
          this.success.push(elem1754);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acquireCallRoute_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acquireCallRoute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1755 in this.success)
    {
      if (this.success.hasOwnProperty(iter1755))
      {
        iter1755 = this.success[iter1755];
        output.writeString(iter1755);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_acquireCallTicket_args = function(args) {
  this.to = null;
  if (args) {
    if (args.to !== undefined && args.to !== null) {
      this.to = args.to;
    }
  }
};
TalkService_acquireCallTicket_args.prototype = {};
TalkService_acquireCallTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.to = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acquireCallTicket_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acquireCallTicket_args');
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.STRING, 2);
    output.writeString(this.to);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_acquireCallTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_acquireCallTicket_result.prototype = {};
TalkService_acquireCallTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acquireCallTicket_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acquireCallTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_acquireEncryptedAccessToken_args = function(args) {
  this.featureType = null;
  if (args) {
    if (args.featureType !== undefined && args.featureType !== null) {
      this.featureType = args.featureType;
    }
  }
};
TalkService_acquireEncryptedAccessToken_args.prototype = {};
TalkService_acquireEncryptedAccessToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.featureType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acquireEncryptedAccessToken_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acquireEncryptedAccessToken_args');
  if (this.featureType !== null && this.featureType !== undefined) {
    output.writeFieldBegin('featureType', Thrift.Type.I32, 2);
    output.writeI32(this.featureType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_acquireEncryptedAccessToken_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_acquireEncryptedAccessToken_result.prototype = {};
TalkService_acquireEncryptedAccessToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acquireEncryptedAccessToken_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acquireEncryptedAccessToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_addSnsId_args = function(args) {
  this.snsIdType = null;
  this.snsAccessToken = null;
  if (args) {
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
    if (args.snsAccessToken !== undefined && args.snsAccessToken !== null) {
      this.snsAccessToken = args.snsAccessToken;
    }
  }
};
TalkService_addSnsId_args.prototype = {};
TalkService_addSnsId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.snsAccessToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_addSnsId_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_addSnsId_args');
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  if (this.snsAccessToken !== null && this.snsAccessToken !== undefined) {
    output.writeFieldBegin('snsAccessToken', Thrift.Type.STRING, 3);
    output.writeString(this.snsAccessToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_addSnsId_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_addSnsId_result.prototype = {};
TalkService_addSnsId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_addSnsId_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_addSnsId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_blockContact_args = function(args) {
  this.reqSeq = null;
  this.id = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
TalkService_blockContact_args.prototype = {};
TalkService_blockContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_blockContact_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_blockContact_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_blockContact_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_blockContact_result.prototype = {};
TalkService_blockContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_blockContact_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_blockContact_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_blockRecommendation_args = function(args) {
  this.reqSeq = null;
  this.id = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
TalkService_blockRecommendation_args.prototype = {};
TalkService_blockRecommendation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_blockRecommendation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_blockRecommendation_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_blockRecommendation_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_blockRecommendation_result.prototype = {};
TalkService_blockRecommendation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_blockRecommendation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_blockRecommendation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_cancelGroupInvitation_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
TalkService_cancelGroupInvitation_args.prototype = {};
TalkService_cancelGroupInvitation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1756 = 0;
        var _rtmp31760;
        this.contactIds = [];
        var _etype1759 = 0;
        _rtmp31760 = input.readListBegin();
        _etype1759 = _rtmp31760.etype;
        _size1756 = _rtmp31760.size;
        for (var _i1761 = 0; _i1761 < _size1756; ++_i1761)
        {
          var elem1762 = null;
          elem1762 = input.readString().value;
          this.contactIds.push(elem1762);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_cancelGroupInvitation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_cancelGroupInvitation_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter1763 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter1763))
      {
        iter1763 = this.contactIds[iter1763];
        output.writeString(iter1763);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_cancelGroupInvitation_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_cancelGroupInvitation_result.prototype = {};
TalkService_cancelGroupInvitation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_cancelGroupInvitation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_cancelGroupInvitation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_changeVerificationMethod_args = function(args) {
  this.sessionId = null;
  this.method = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
  }
};
TalkService_changeVerificationMethod_args.prototype = {};
TalkService_changeVerificationMethod_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.method = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_changeVerificationMethod_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_changeVerificationMethod_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.I32, 3);
    output.writeI32(this.method);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_changeVerificationMethod_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new VerificationSessionData(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_changeVerificationMethod_result.prototype = {};
TalkService_changeVerificationMethod_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new VerificationSessionData();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_changeVerificationMethod_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_changeVerificationMethod_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_clearIdentityCredential_args = function(args) {
};
TalkService_clearIdentityCredential_args.prototype = {};
TalkService_clearIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_clearIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_clearIdentityCredential_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_clearIdentityCredential_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_clearIdentityCredential_result.prototype = {};
TalkService_clearIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_clearIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_clearIdentityCredential_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_clearMessageBox_args = function(args) {
  this.channelId = null;
  this.messageBoxId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.messageBoxId !== undefined && args.messageBoxId !== null) {
      this.messageBoxId = args.messageBoxId;
    }
  }
};
TalkService_clearMessageBox_args.prototype = {};
TalkService_clearMessageBox_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageBoxId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_clearMessageBox_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_clearMessageBox_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.messageBoxId !== null && this.messageBoxId !== undefined) {
    output.writeFieldBegin('messageBoxId', Thrift.Type.STRING, 3);
    output.writeString(this.messageBoxId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_clearMessageBox_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_clearMessageBox_result.prototype = {};
TalkService_clearMessageBox_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_clearMessageBox_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_clearMessageBox_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_closeProximityMatch_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
TalkService_closeProximityMatch_args.prototype = {};
TalkService_closeProximityMatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_closeProximityMatch_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_closeProximityMatch_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_closeProximityMatch_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_closeProximityMatch_result.prototype = {};
TalkService_closeProximityMatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_closeProximityMatch_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_closeProximityMatch_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_commitSendMessage_args = function(args) {
  this.seq = null;
  this.messageId = null;
  this.receiverMids = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.receiverMids !== undefined && args.receiverMids !== null) {
      this.receiverMids = Thrift.copyList(args.receiverMids, [null]);
    }
  }
};
TalkService_commitSendMessage_args.prototype = {};
TalkService_commitSendMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1764 = 0;
        var _rtmp31768;
        this.receiverMids = [];
        var _etype1767 = 0;
        _rtmp31768 = input.readListBegin();
        _etype1767 = _rtmp31768.etype;
        _size1764 = _rtmp31768.size;
        for (var _i1769 = 0; _i1769 < _size1764; ++_i1769)
        {
          var elem1770 = null;
          elem1770 = input.readString().value;
          this.receiverMids.push(elem1770);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_commitSendMessage_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_commitSendMessage_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.receiverMids !== null && this.receiverMids !== undefined) {
    output.writeFieldBegin('receiverMids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.receiverMids.length);
    for (var iter1771 in this.receiverMids)
    {
      if (this.receiverMids.hasOwnProperty(iter1771))
      {
        iter1771 = this.receiverMids[iter1771];
        output.writeString(iter1771);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_commitSendMessage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_commitSendMessage_result.prototype = {};
TalkService_commitSendMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1772 = 0;
        var _rtmp31776;
        this.success = {};
        var _ktype1773 = 0;
        var _vtype1774 = 0;
        _rtmp31776 = input.readMapBegin();
        _ktype1773 = _rtmp31776.ktype;
        _vtype1774 = _rtmp31776.vtype;
        _size1772 = _rtmp31776.size;
        for (var _i1777 = 0; _i1777 < _size1772; ++_i1777)
        {
          if (_i1777 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1778 = null;
          var val1779 = null;
          key1778 = input.readString().value;
          val1779 = input.readString().value;
          this.success[key1778] = val1779;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_commitSendMessage_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_commitSendMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter1780 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1780))
      {
        var viter1781 = this.success[kiter1780];
        output.writeString(kiter1780);
        output.writeString(viter1781);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_commitSendMessages_args = function(args) {
  this.seq = null;
  this.messageIds = null;
  this.receiverMids = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.messageIds !== undefined && args.messageIds !== null) {
      this.messageIds = Thrift.copyList(args.messageIds, [null]);
    }
    if (args.receiverMids !== undefined && args.receiverMids !== null) {
      this.receiverMids = Thrift.copyList(args.receiverMids, [null]);
    }
  }
};
TalkService_commitSendMessages_args.prototype = {};
TalkService_commitSendMessages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1782 = 0;
        var _rtmp31786;
        this.messageIds = [];
        var _etype1785 = 0;
        _rtmp31786 = input.readListBegin();
        _etype1785 = _rtmp31786.etype;
        _size1782 = _rtmp31786.size;
        for (var _i1787 = 0; _i1787 < _size1782; ++_i1787)
        {
          var elem1788 = null;
          elem1788 = input.readString().value;
          this.messageIds.push(elem1788);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1789 = 0;
        var _rtmp31793;
        this.receiverMids = [];
        var _etype1792 = 0;
        _rtmp31793 = input.readListBegin();
        _etype1792 = _rtmp31793.etype;
        _size1789 = _rtmp31793.size;
        for (var _i1794 = 0; _i1794 < _size1789; ++_i1794)
        {
          var elem1795 = null;
          elem1795 = input.readString().value;
          this.receiverMids.push(elem1795);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_commitSendMessages_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_commitSendMessages_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.messageIds !== null && this.messageIds !== undefined) {
    output.writeFieldBegin('messageIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.messageIds.length);
    for (var iter1796 in this.messageIds)
    {
      if (this.messageIds.hasOwnProperty(iter1796))
      {
        iter1796 = this.messageIds[iter1796];
        output.writeString(iter1796);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.receiverMids !== null && this.receiverMids !== undefined) {
    output.writeFieldBegin('receiverMids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.receiverMids.length);
    for (var iter1797 in this.receiverMids)
    {
      if (this.receiverMids.hasOwnProperty(iter1797))
      {
        iter1797 = this.receiverMids[iter1797];
        output.writeString(iter1797);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_commitSendMessages_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_commitSendMessages_result.prototype = {};
TalkService_commitSendMessages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1798 = 0;
        var _rtmp31802;
        this.success = {};
        var _ktype1799 = 0;
        var _vtype1800 = 0;
        _rtmp31802 = input.readMapBegin();
        _ktype1799 = _rtmp31802.ktype;
        _vtype1800 = _rtmp31802.vtype;
        _size1798 = _rtmp31802.size;
        for (var _i1803 = 0; _i1803 < _size1798; ++_i1803)
        {
          if (_i1803 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1804 = null;
          var val1805 = null;
          key1804 = input.readString().value;
          val1805 = input.readString().value;
          this.success[key1804] = val1805;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_commitSendMessages_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_commitSendMessages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter1806 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1806))
      {
        var viter1807 = this.success[kiter1806];
        output.writeString(kiter1806);
        output.writeString(viter1807);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_commitUpdateProfile_args = function(args) {
  this.seq = null;
  this.attrs = null;
  this.receiverMids = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.attrs !== undefined && args.attrs !== null) {
      this.attrs = Thrift.copyList(args.attrs, [null]);
    }
    if (args.receiverMids !== undefined && args.receiverMids !== null) {
      this.receiverMids = Thrift.copyList(args.receiverMids, [null]);
    }
  }
};
TalkService_commitUpdateProfile_args.prototype = {};
TalkService_commitUpdateProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1808 = 0;
        var _rtmp31812;
        this.attrs = [];
        var _etype1811 = 0;
        _rtmp31812 = input.readListBegin();
        _etype1811 = _rtmp31812.etype;
        _size1808 = _rtmp31812.size;
        for (var _i1813 = 0; _i1813 < _size1808; ++_i1813)
        {
          var elem1814 = null;
          elem1814 = input.readI32().value;
          this.attrs.push(elem1814);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1815 = 0;
        var _rtmp31819;
        this.receiverMids = [];
        var _etype1818 = 0;
        _rtmp31819 = input.readListBegin();
        _etype1818 = _rtmp31819.etype;
        _size1815 = _rtmp31819.size;
        for (var _i1820 = 0; _i1820 < _size1815; ++_i1820)
        {
          var elem1821 = null;
          elem1821 = input.readString().value;
          this.receiverMids.push(elem1821);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_commitUpdateProfile_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_commitUpdateProfile_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.attrs !== null && this.attrs !== undefined) {
    output.writeFieldBegin('attrs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.attrs.length);
    for (var iter1822 in this.attrs)
    {
      if (this.attrs.hasOwnProperty(iter1822))
      {
        iter1822 = this.attrs[iter1822];
        output.writeI32(iter1822);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.receiverMids !== null && this.receiverMids !== undefined) {
    output.writeFieldBegin('receiverMids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.receiverMids.length);
    for (var iter1823 in this.receiverMids)
    {
      if (this.receiverMids.hasOwnProperty(iter1823))
      {
        iter1823 = this.receiverMids[iter1823];
        output.writeString(iter1823);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_commitUpdateProfile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_commitUpdateProfile_result.prototype = {};
TalkService_commitUpdateProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1824 = 0;
        var _rtmp31828;
        this.success = {};
        var _ktype1825 = 0;
        var _vtype1826 = 0;
        _rtmp31828 = input.readMapBegin();
        _ktype1825 = _rtmp31828.ktype;
        _vtype1826 = _rtmp31828.vtype;
        _size1824 = _rtmp31828.size;
        for (var _i1829 = 0; _i1829 < _size1824; ++_i1829)
        {
          if (_i1829 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1830 = null;
          var val1831 = null;
          key1830 = input.readString().value;
          val1831 = input.readString().value;
          this.success[key1830] = val1831;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_commitUpdateProfile_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_commitUpdateProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter1832 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1832))
      {
        var viter1833 = this.success[kiter1832];
        output.writeString(kiter1832);
        output.writeString(viter1833);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_confirmEmail_args = function(args) {
  this.verifier = null;
  this.pinCode = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.pinCode !== undefined && args.pinCode !== null) {
      this.pinCode = args.pinCode;
    }
  }
};
TalkService_confirmEmail_args.prototype = {};
TalkService_confirmEmail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pinCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_confirmEmail_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_confirmEmail_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 2);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.pinCode !== null && this.pinCode !== undefined) {
    output.writeFieldBegin('pinCode', Thrift.Type.STRING, 3);
    output.writeString(this.pinCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_confirmEmail_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_confirmEmail_result.prototype = {};
TalkService_confirmEmail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_confirmEmail_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_confirmEmail_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_createGroup_args = function(args) {
  this.seq = null;
  this.name = null;
  this.contactIds = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
TalkService_createGroup_args.prototype = {};
TalkService_createGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1834 = 0;
        var _rtmp31838;
        this.contactIds = [];
        var _etype1837 = 0;
        _rtmp31838 = input.readListBegin();
        _etype1837 = _rtmp31838.etype;
        _size1834 = _rtmp31838.size;
        for (var _i1839 = 0; _i1839 < _size1834; ++_i1839)
        {
          var elem1840 = null;
          elem1840 = input.readString().value;
          this.contactIds.push(elem1840);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createGroup_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createGroup_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter1841 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter1841))
      {
        iter1841 = this.contactIds[iter1841];
        output.writeString(iter1841);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_createGroup_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Group(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_createGroup_result.prototype = {};
TalkService_createGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Group();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createGroup_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_createQrcodeBase64Image_args = function(args) {
  this.url = null;
  this.characterSet = null;
  this.imageSize = null;
  this.x = null;
  this.y = null;
  this.width = null;
  this.height = null;
  if (args) {
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.characterSet !== undefined && args.characterSet !== null) {
      this.characterSet = args.characterSet;
    }
    if (args.imageSize !== undefined && args.imageSize !== null) {
      this.imageSize = args.imageSize;
    }
    if (args.x !== undefined && args.x !== null) {
      this.x = args.x;
    }
    if (args.y !== undefined && args.y !== null) {
      this.y = args.y;
    }
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    }
    if (args.height !== undefined && args.height !== null) {
      this.height = args.height;
    }
  }
};
TalkService_createQrcodeBase64Image_args.prototype = {};
TalkService_createQrcodeBase64Image_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.characterSet = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.imageSize = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.x = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.y = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.width = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.height = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createQrcodeBase64Image_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createQrcodeBase64Image_args');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 2);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.characterSet !== null && this.characterSet !== undefined) {
    output.writeFieldBegin('characterSet', Thrift.Type.STRING, 3);
    output.writeString(this.characterSet);
    output.writeFieldEnd();
  }
  if (this.imageSize !== null && this.imageSize !== undefined) {
    output.writeFieldBegin('imageSize', Thrift.Type.I32, 4);
    output.writeI32(this.imageSize);
    output.writeFieldEnd();
  }
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.I32, 5);
    output.writeI32(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.I32, 6);
    output.writeI32(this.y);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I32, 7);
    output.writeI32(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I32, 8);
    output.writeI32(this.height);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_createQrcodeBase64Image_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_createQrcodeBase64Image_result.prototype = {};
TalkService_createQrcodeBase64Image_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createQrcodeBase64Image_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createQrcodeBase64Image_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_createRoom_args = function(args) {
  this.reqSeq = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
TalkService_createRoom_args.prototype = {};
TalkService_createRoom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1842 = 0;
        var _rtmp31846;
        this.contactIds = [];
        var _etype1845 = 0;
        _rtmp31846 = input.readListBegin();
        _etype1845 = _rtmp31846.etype;
        _size1842 = _rtmp31846.size;
        for (var _i1847 = 0; _i1847 < _size1842; ++_i1847)
        {
          var elem1848 = null;
          elem1848 = input.readString().value;
          this.contactIds.push(elem1848);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createRoom_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createRoom_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter1849 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter1849))
      {
        iter1849 = this.contactIds[iter1849];
        output.writeString(iter1849);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_createRoom_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Room(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_createRoom_result.prototype = {};
TalkService_createRoom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Room();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createRoom_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createRoom_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_createSession_args = function(args) {
};
TalkService_createSession_args.prototype = {};
TalkService_createSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createSession_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createSession_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_createSession_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_createSession_result.prototype = {};
TalkService_createSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createSession_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createSession_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_fetchAnnouncements_args = function(args) {
  this.lastFetchedIndex = null;
  if (args) {
    if (args.lastFetchedIndex !== undefined && args.lastFetchedIndex !== null) {
      this.lastFetchedIndex = args.lastFetchedIndex;
    }
  }
};
TalkService_fetchAnnouncements_args.prototype = {};
TalkService_fetchAnnouncements_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.lastFetchedIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_fetchAnnouncements_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_fetchAnnouncements_args');
  if (this.lastFetchedIndex !== null && this.lastFetchedIndex !== undefined) {
    output.writeFieldBegin('lastFetchedIndex', Thrift.Type.I32, 2);
    output.writeI32(this.lastFetchedIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_fetchAnnouncements_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Announcement]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_fetchAnnouncements_result.prototype = {};
TalkService_fetchAnnouncements_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1850 = 0;
        var _rtmp31854;
        this.success = [];
        var _etype1853 = 0;
        _rtmp31854 = input.readListBegin();
        _etype1853 = _rtmp31854.etype;
        _size1850 = _rtmp31854.size;
        for (var _i1855 = 0; _i1855 < _size1850; ++_i1855)
        {
          var elem1856 = null;
          elem1856 = new Announcement();
          elem1856.read(input);
          this.success.push(elem1856);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_fetchAnnouncements_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_fetchAnnouncements_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1857 in this.success)
    {
      if (this.success.hasOwnProperty(iter1857))
      {
        iter1857 = this.success[iter1857];
        iter1857.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_fetchMessages_args = function(args) {
  this.localTs = null;
  this.count = null;
  if (args) {
    if (args.localTs !== undefined && args.localTs !== null) {
      this.localTs = args.localTs;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
TalkService_fetchMessages_args.prototype = {};
TalkService_fetchMessages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localTs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_fetchMessages_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_fetchMessages_args');
  if (this.localTs !== null && this.localTs !== undefined) {
    output.writeFieldBegin('localTs', Thrift.Type.I64, 2);
    output.writeI64(this.localTs);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_fetchMessages_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Message]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_fetchMessages_result.prototype = {};
TalkService_fetchMessages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1858 = 0;
        var _rtmp31862;
        this.success = [];
        var _etype1861 = 0;
        _rtmp31862 = input.readListBegin();
        _etype1861 = _rtmp31862.etype;
        _size1858 = _rtmp31862.size;
        for (var _i1863 = 0; _i1863 < _size1858; ++_i1863)
        {
          var elem1864 = null;
          elem1864 = new Message();
          elem1864.read(input);
          this.success.push(elem1864);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_fetchMessages_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_fetchMessages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1865 in this.success)
    {
      if (this.success.hasOwnProperty(iter1865))
      {
        iter1865 = this.success[iter1865];
        iter1865.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_fetchOperations_args = function(args) {
  this.localRev = null;
  this.count = null;
  if (args) {
    if (args.localRev !== undefined && args.localRev !== null) {
      this.localRev = args.localRev;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
TalkService_fetchOperations_args.prototype = {};
TalkService_fetchOperations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localRev = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_fetchOperations_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_fetchOperations_args');
  if (this.localRev !== null && this.localRev !== undefined) {
    output.writeFieldBegin('localRev', Thrift.Type.I64, 2);
    output.writeI64(this.localRev);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_fetchOperations_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ShouldSyncException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Operation]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_fetchOperations_result.prototype = {};
TalkService_fetchOperations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1866 = 0;
        var _rtmp31870;
        this.success = [];
        var _etype1869 = 0;
        _rtmp31870 = input.readListBegin();
        _etype1869 = _rtmp31870.etype;
        _size1866 = _rtmp31870.size;
        for (var _i1871 = 0; _i1871 < _size1866; ++_i1871)
        {
          var elem1872 = null;
          elem1872 = new Operation();
          elem1872.read(input);
          this.success.push(elem1872);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ShouldSyncException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_fetchOperations_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_fetchOperations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1873 in this.success)
    {
      if (this.success.hasOwnProperty(iter1873))
      {
        iter1873 = this.success[iter1873];
        iter1873.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_fetchOps_args = function(args) {
  this.localRev = null;
  this.count = null;
  this.globalRev = null;
  this.individualRev = null;
  if (args) {
    if (args.localRev !== undefined && args.localRev !== null) {
      this.localRev = args.localRev;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.globalRev !== undefined && args.globalRev !== null) {
      this.globalRev = args.globalRev;
    }
    if (args.individualRev !== undefined && args.individualRev !== null) {
      this.individualRev = args.individualRev;
    }
  }
};
TalkService_fetchOps_args.prototype = {};
TalkService_fetchOps_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localRev = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.globalRev = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.individualRev = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_fetchOps_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_fetchOps_args');
  if (this.localRev !== null && this.localRev !== undefined) {
    output.writeFieldBegin('localRev', Thrift.Type.I64, 2);
    output.writeI64(this.localRev);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.globalRev !== null && this.globalRev !== undefined) {
    output.writeFieldBegin('globalRev', Thrift.Type.I64, 4);
    output.writeI64(this.globalRev);
    output.writeFieldEnd();
  }
  if (this.individualRev !== null && this.individualRev !== undefined) {
    output.writeFieldBegin('individualRev', Thrift.Type.I64, 5);
    output.writeI64(this.individualRev);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_fetchOps_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ShouldSyncException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Operation]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_fetchOps_result.prototype = {};
TalkService_fetchOps_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1874 = 0;
        var _rtmp31878;
        this.success = [];
        var _etype1877 = 0;
        _rtmp31878 = input.readListBegin();
        _etype1877 = _rtmp31878.etype;
        _size1874 = _rtmp31878.size;
        for (var _i1879 = 0; _i1879 < _size1874; ++_i1879)
        {
          var elem1880 = null;
          elem1880 = new Operation();
          elem1880.read(input);
          this.success.push(elem1880);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ShouldSyncException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_fetchOps_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_fetchOps_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1881 in this.success)
    {
      if (this.success.hasOwnProperty(iter1881))
      {
        iter1881 = this.success[iter1881];
        iter1881.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findAndAddContactsByEmail_args = function(args) {
  this.reqSeq = null;
  this.emails = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.emails !== undefined && args.emails !== null) {
      this.emails = Thrift.copyList(args.emails, [null]);
    }
  }
};
TalkService_findAndAddContactsByEmail_args.prototype = {};
TalkService_findAndAddContactsByEmail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size1882 = 0;
        var _rtmp31886;
        this.emails = [];
        var _etype1885 = 0;
        _rtmp31886 = input.readSetBegin();
        _etype1885 = _rtmp31886.etype;
        _size1882 = _rtmp31886.size;
        for (var _i1887 = 0; _i1887 < _size1882; ++_i1887)
        {
          var elem1888 = null;
          elem1888 = input.readString().value;
          this.emails.push(elem1888);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactsByEmail_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactsByEmail_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.emails !== null && this.emails !== undefined) {
    output.writeFieldBegin('emails', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.emails.length);
    for (var iter1889 in this.emails)
    {
      if (this.emails.hasOwnProperty(iter1889))
      {
        iter1889 = this.emails[iter1889];
        output.writeString(iter1889);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findAndAddContactsByEmail_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findAndAddContactsByEmail_result.prototype = {};
TalkService_findAndAddContactsByEmail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1890 = 0;
        var _rtmp31894;
        this.success = {};
        var _ktype1891 = 0;
        var _vtype1892 = 0;
        _rtmp31894 = input.readMapBegin();
        _ktype1891 = _rtmp31894.ktype;
        _vtype1892 = _rtmp31894.vtype;
        _size1890 = _rtmp31894.size;
        for (var _i1895 = 0; _i1895 < _size1890; ++_i1895)
        {
          if (_i1895 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1896 = null;
          var val1897 = null;
          key1896 = input.readString().value;
          val1897 = new Contact();
          val1897.read(input);
          this.success[key1896] = val1897;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactsByEmail_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactsByEmail_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter1898 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1898))
      {
        var viter1899 = this.success[kiter1898];
        output.writeString(kiter1898);
        viter1899.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findAndAddContactsByMid_args = function(args) {
  this.reqSeq = null;
  this.mid = null;
  this.type = null;
  this.reference = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.reference !== undefined && args.reference !== null) {
      this.reference = args.reference;
    }
  }
};
TalkService_findAndAddContactsByMid_args.prototype = {};
TalkService_findAndAddContactsByMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.reference = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactsByMid_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactsByMid_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.reference !== null && this.reference !== undefined) {
    output.writeFieldBegin('reference', Thrift.Type.STRING, 4);
    output.writeString(this.reference);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findAndAddContactsByMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findAndAddContactsByMid_result.prototype = {};
TalkService_findAndAddContactsByMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1900 = 0;
        var _rtmp31904;
        this.success = {};
        var _ktype1901 = 0;
        var _vtype1902 = 0;
        _rtmp31904 = input.readMapBegin();
        _ktype1901 = _rtmp31904.ktype;
        _vtype1902 = _rtmp31904.vtype;
        _size1900 = _rtmp31904.size;
        for (var _i1905 = 0; _i1905 < _size1900; ++_i1905)
        {
          if (_i1905 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1906 = null;
          var val1907 = null;
          key1906 = input.readString().value;
          val1907 = new Contact();
          val1907.read(input);
          this.success[key1906] = val1907;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactsByMid_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactsByMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter1908 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1908))
      {
        var viter1909 = this.success[kiter1908];
        output.writeString(kiter1908);
        viter1909.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findGroupByTicketV2_args = function(args) {
  this.ticketId = null;
  if (args) {
    if (args.ticketId !== undefined && args.ticketId !== null) {
      this.ticketId = args.ticketId;
    }
  }
};
TalkService_findGroupByTicketV2_args.prototype = {};
TalkService_findGroupByTicketV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ticketId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findGroupByTicketV2_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findGroupByTicketV2_args');
  if (this.ticketId !== null && this.ticketId !== undefined) {
    output.writeFieldBegin('ticketId', Thrift.Type.STRING, 1);
    output.writeString(this.ticketId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findGroupByTicketV2_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Group(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findGroupByTicketV2_result.prototype = {};
TalkService_findGroupByTicketV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Group();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findGroupByTicketV2_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findGroupByTicketV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findAndAddContactsByPhone_args = function(args) {
  this.reqSeq = null;
  this.phones = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.phones !== undefined && args.phones !== null) {
      this.phones = Thrift.copyList(args.phones, [null]);
    }
  }
};
TalkService_findAndAddContactsByPhone_args.prototype = {};
TalkService_findAndAddContactsByPhone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size1910 = 0;
        var _rtmp31914;
        this.phones = [];
        var _etype1913 = 0;
        _rtmp31914 = input.readSetBegin();
        _etype1913 = _rtmp31914.etype;
        _size1910 = _rtmp31914.size;
        for (var _i1915 = 0; _i1915 < _size1910; ++_i1915)
        {
          var elem1916 = null;
          elem1916 = input.readString().value;
          this.phones.push(elem1916);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactsByPhone_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactsByPhone_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.phones !== null && this.phones !== undefined) {
    output.writeFieldBegin('phones', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.phones.length);
    for (var iter1917 in this.phones)
    {
      if (this.phones.hasOwnProperty(iter1917))
      {
        iter1917 = this.phones[iter1917];
        output.writeString(iter1917);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findAndAddContactsByPhone_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findAndAddContactsByPhone_result.prototype = {};
TalkService_findAndAddContactsByPhone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1918 = 0;
        var _rtmp31922;
        this.success = {};
        var _ktype1919 = 0;
        var _vtype1920 = 0;
        _rtmp31922 = input.readMapBegin();
        _ktype1919 = _rtmp31922.ktype;
        _vtype1920 = _rtmp31922.vtype;
        _size1918 = _rtmp31922.size;
        for (var _i1923 = 0; _i1923 < _size1918; ++_i1923)
        {
          if (_i1923 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1924 = null;
          var val1925 = null;
          key1924 = input.readString().value;
          val1925 = new Contact();
          val1925.read(input);
          this.success[key1924] = val1925;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactsByPhone_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactsByPhone_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter1926 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1926))
      {
        var viter1927 = this.success[kiter1926];
        output.writeString(kiter1926);
        viter1927.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getFriendRequests_args = function(args) {
  this.direction = null;
  this.lastSeenSeqId = null;
  if (args) {
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
    if (args.lastSeenSeqId !== undefined && args.lastSeenSeqId !== null) {
      this.lastSeenSeqId = args.lastSeenSeqId;
    }
  }
};
TalkService_getFriendRequests_args.prototype = {};
TalkService_getFriendRequests_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastSeenSeqId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getFriendRequests_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getFriendRequests_args');
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 1);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  if (this.lastSeenSeqId !== null && this.lastSeenSeqId !== undefined) {
    output.writeFieldBegin('lastSeenSeqId', Thrift.Type.I64, 2);
    output.writeI64(this.lastSeenSeqId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getFriendRequests_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [FriendRequest]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getFriendRequests_result.prototype = {};
TalkService_getFriendRequests_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1928 = 0;
        var _rtmp31932;
        this.success = [];
        var _etype1931 = 0;
        _rtmp31932 = input.readListBegin();
        _etype1931 = _rtmp31932.etype;
        _size1928 = _rtmp31932.size;
        for (var _i1933 = 0; _i1933 < _size1928; ++_i1933)
        {
          var elem1934 = null;
          elem1934 = new FriendRequest();
          elem1934.read(input);
          this.success.push(elem1934);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getFriendRequests_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getFriendRequests_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1935 in this.success)
    {
      if (this.success.hasOwnProperty(iter1935))
      {
        iter1935 = this.success[iter1935];
        iter1935.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_removeFriendRequest_args = function(args) {
  this.direction = null;
  this.midOrEMid = null;
  if (args) {
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
    if (args.midOrEMid !== undefined && args.midOrEMid !== null) {
      this.midOrEMid = args.midOrEMid;
    }
  }
};
TalkService_removeFriendRequest_args.prototype = {};
TalkService_removeFriendRequest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.midOrEMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeFriendRequest_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeFriendRequest_args');
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 1);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  if (this.midOrEMid !== null && this.midOrEMid !== undefined) {
    output.writeFieldBegin('midOrEMid', Thrift.Type.STRING, 2);
    output.writeString(this.midOrEMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_removeFriendRequest_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_removeFriendRequest_result.prototype = {};
TalkService_removeFriendRequest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeFriendRequest_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeFriendRequest_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findAndAddContactsByUserid_args = function(args) {
  this.reqSeq = null;
  this.userid = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
  }
};
TalkService_findAndAddContactsByUserid_args.prototype = {};
TalkService_findAndAddContactsByUserid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactsByUserid_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactsByUserid_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 2);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findAndAddContactsByUserid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findAndAddContactsByUserid_result.prototype = {};
TalkService_findAndAddContactsByUserid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1936 = 0;
        var _rtmp31940;
        this.success = {};
        var _ktype1937 = 0;
        var _vtype1938 = 0;
        _rtmp31940 = input.readMapBegin();
        _ktype1937 = _rtmp31940.ktype;
        _vtype1938 = _rtmp31940.vtype;
        _size1936 = _rtmp31940.size;
        for (var _i1941 = 0; _i1941 < _size1936; ++_i1941)
        {
          if (_i1941 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1942 = null;
          var val1943 = null;
          key1942 = input.readString().value;
          val1943 = new Contact();
          val1943.read(input);
          this.success[key1942] = val1943;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactsByUserid_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactsByUserid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter1944 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1944))
      {
        var viter1945 = this.success[kiter1944];
        output.writeString(kiter1944);
        viter1945.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findContactByUserid_args = function(args) {
  this.userid = null;
  if (args) {
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
  }
};
TalkService_findContactByUserid_args.prototype = {};
TalkService_findContactByUserid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactByUserid_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactByUserid_args');
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 2);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findContactByUserid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Contact(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findContactByUserid_result.prototype = {};
TalkService_findContactByUserid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Contact();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactByUserid_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactByUserid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findContactByUserTicket_args = function(args) {
  this.ticketIdWithTag = null;
  if (args) {
    if (args.ticketIdWithTag !== undefined && args.ticketIdWithTag !== null) {
      this.ticketIdWithTag = args.ticketIdWithTag;
    }
  }
};
TalkService_findContactByUserTicket_args.prototype = {};
TalkService_findContactByUserTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ticketIdWithTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactByUserTicket_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactByUserTicket_args');
  if (this.ticketIdWithTag !== null && this.ticketIdWithTag !== undefined) {
    output.writeFieldBegin('ticketIdWithTag', Thrift.Type.STRING, 2);
    output.writeString(this.ticketIdWithTag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findContactByUserTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Contact(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findContactByUserTicket_result.prototype = {};
TalkService_findContactByUserTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Contact();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactByUserTicket_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactByUserTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findContactsByEmail_args = function(args) {
  this.emails = null;
  if (args) {
    if (args.emails !== undefined && args.emails !== null) {
      this.emails = Thrift.copyList(args.emails, [null]);
    }
  }
};
TalkService_findContactsByEmail_args.prototype = {};
TalkService_findContactsByEmail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size1946 = 0;
        var _rtmp31950;
        this.emails = [];
        var _etype1949 = 0;
        _rtmp31950 = input.readSetBegin();
        _etype1949 = _rtmp31950.etype;
        _size1946 = _rtmp31950.size;
        for (var _i1951 = 0; _i1951 < _size1946; ++_i1951)
        {
          var elem1952 = null;
          elem1952 = input.readString().value;
          this.emails.push(elem1952);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactsByEmail_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactsByEmail_args');
  if (this.emails !== null && this.emails !== undefined) {
    output.writeFieldBegin('emails', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.emails.length);
    for (var iter1953 in this.emails)
    {
      if (this.emails.hasOwnProperty(iter1953))
      {
        iter1953 = this.emails[iter1953];
        output.writeString(iter1953);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findContactsByEmail_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findContactsByEmail_result.prototype = {};
TalkService_findContactsByEmail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1954 = 0;
        var _rtmp31958;
        this.success = {};
        var _ktype1955 = 0;
        var _vtype1956 = 0;
        _rtmp31958 = input.readMapBegin();
        _ktype1955 = _rtmp31958.ktype;
        _vtype1956 = _rtmp31958.vtype;
        _size1954 = _rtmp31958.size;
        for (var _i1959 = 0; _i1959 < _size1954; ++_i1959)
        {
          if (_i1959 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1960 = null;
          var val1961 = null;
          key1960 = input.readString().value;
          val1961 = new Contact();
          val1961.read(input);
          this.success[key1960] = val1961;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactsByEmail_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactsByEmail_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter1962 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1962))
      {
        var viter1963 = this.success[kiter1962];
        output.writeString(kiter1962);
        viter1963.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findContactsByPhone_args = function(args) {
  this.phones = null;
  if (args) {
    if (args.phones !== undefined && args.phones !== null) {
      this.phones = Thrift.copyList(args.phones, [null]);
    }
  }
};
TalkService_findContactsByPhone_args.prototype = {};
TalkService_findContactsByPhone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size1964 = 0;
        var _rtmp31968;
        this.phones = [];
        var _etype1967 = 0;
        _rtmp31968 = input.readSetBegin();
        _etype1967 = _rtmp31968.etype;
        _size1964 = _rtmp31968.size;
        for (var _i1969 = 0; _i1969 < _size1964; ++_i1969)
        {
          var elem1970 = null;
          elem1970 = input.readString().value;
          this.phones.push(elem1970);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactsByPhone_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactsByPhone_args');
  if (this.phones !== null && this.phones !== undefined) {
    output.writeFieldBegin('phones', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.phones.length);
    for (var iter1971 in this.phones)
    {
      if (this.phones.hasOwnProperty(iter1971))
      {
        iter1971 = this.phones[iter1971];
        output.writeString(iter1971);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findContactsByPhone_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findContactsByPhone_result.prototype = {};
TalkService_findContactsByPhone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1972 = 0;
        var _rtmp31976;
        this.success = {};
        var _ktype1973 = 0;
        var _vtype1974 = 0;
        _rtmp31976 = input.readMapBegin();
        _ktype1973 = _rtmp31976.ktype;
        _vtype1974 = _rtmp31976.vtype;
        _size1972 = _rtmp31976.size;
        for (var _i1977 = 0; _i1977 < _size1972; ++_i1977)
        {
          if (_i1977 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1978 = null;
          var val1979 = null;
          key1978 = input.readString().value;
          val1979 = new Contact();
          val1979.read(input);
          this.success[key1978] = val1979;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactsByPhone_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactsByPhone_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter1980 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1980))
      {
        var viter1981 = this.success[kiter1980];
        output.writeString(kiter1980);
        viter1981.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findSnsIdUserStatus_args = function(args) {
  this.snsIdType = null;
  this.snsAccessToken = null;
  this.udidHash = null;
  if (args) {
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
    if (args.snsAccessToken !== undefined && args.snsAccessToken !== null) {
      this.snsAccessToken = args.snsAccessToken;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
  }
};
TalkService_findSnsIdUserStatus_args.prototype = {};
TalkService_findSnsIdUserStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.snsAccessToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findSnsIdUserStatus_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findSnsIdUserStatus_args');
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  if (this.snsAccessToken !== null && this.snsAccessToken !== undefined) {
    output.writeFieldBegin('snsAccessToken', Thrift.Type.STRING, 3);
    output.writeString(this.snsAccessToken);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 4);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findSnsIdUserStatus_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SnsIdUserStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findSnsIdUserStatus_result.prototype = {};
TalkService_findSnsIdUserStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SnsIdUserStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findSnsIdUserStatus_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findSnsIdUserStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_finishUpdateVerification_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
TalkService_finishUpdateVerification_args.prototype = {};
TalkService_finishUpdateVerification_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_finishUpdateVerification_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_finishUpdateVerification_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_finishUpdateVerification_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_finishUpdateVerification_result.prototype = {};
TalkService_finishUpdateVerification_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_finishUpdateVerification_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_finishUpdateVerification_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_generateUserTicket_args = function(args) {
  this.expirationTime = null;
  this.maxUseCount = null;
  if (args) {
    if (args.expirationTime !== undefined && args.expirationTime !== null) {
      this.expirationTime = args.expirationTime;
    }
    if (args.maxUseCount !== undefined && args.maxUseCount !== null) {
      this.maxUseCount = args.maxUseCount;
    }
  }
};
TalkService_generateUserTicket_args.prototype = {};
TalkService_generateUserTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expirationTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxUseCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_generateUserTicket_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_generateUserTicket_args');
  if (this.expirationTime !== null && this.expirationTime !== undefined) {
    output.writeFieldBegin('expirationTime', Thrift.Type.I64, 3);
    output.writeI64(this.expirationTime);
    output.writeFieldEnd();
  }
  if (this.maxUseCount !== null && this.maxUseCount !== undefined) {
    output.writeFieldBegin('maxUseCount', Thrift.Type.I32, 4);
    output.writeI32(this.maxUseCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_generateUserTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Ticket(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_generateUserTicket_result.prototype = {};
TalkService_generateUserTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Ticket();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_generateUserTicket_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_generateUserTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_destroyMessage_args = function(args) {
  this.seq = null;
  this.chatId = null;
  this.messageId = null;
  this.sessionId = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.chatId !== undefined && args.chatId !== null) {
      this.chatId = args.chatId;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
TalkService_destroyMessage_args.prototype = {};
TalkService_destroyMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.sessionId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_destroyMessage_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_destroyMessage_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.chatId !== null && this.chatId !== undefined) {
    output.writeFieldBegin('chatId', Thrift.Type.STRING, 2);
    output.writeString(this.chatId);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 3);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I32, 4);
    output.writeI32(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_destroyMessage_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_destroyMessage_result.prototype = {};
TalkService_destroyMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_destroyMessage_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_destroyMessage_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getAcceptedProximityMatches_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
TalkService_getAcceptedProximityMatches_args.prototype = {};
TalkService_getAcceptedProximityMatches_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getAcceptedProximityMatches_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getAcceptedProximityMatches_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getAcceptedProximityMatches_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getAcceptedProximityMatches_result.prototype = {};
TalkService_getAcceptedProximityMatches_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size1982 = 0;
        var _rtmp31986;
        this.success = [];
        var _etype1985 = 0;
        _rtmp31986 = input.readSetBegin();
        _etype1985 = _rtmp31986.etype;
        _size1982 = _rtmp31986.size;
        for (var _i1987 = 0; _i1987 < _size1982; ++_i1987)
        {
          var elem1988 = null;
          elem1988 = input.readString().value;
          this.success.push(elem1988);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getAcceptedProximityMatches_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getAcceptedProximityMatches_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1989 in this.success)
    {
      if (this.success.hasOwnProperty(iter1989))
      {
        iter1989 = this.success[iter1989];
        output.writeString(iter1989);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getActiveBuddySubscriberIds_args = function(args) {
};
TalkService_getActiveBuddySubscriberIds_args.prototype = {};
TalkService_getActiveBuddySubscriberIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getActiveBuddySubscriberIds_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getActiveBuddySubscriberIds_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getActiveBuddySubscriberIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getActiveBuddySubscriberIds_result.prototype = {};
TalkService_getActiveBuddySubscriberIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1990 = 0;
        var _rtmp31994;
        this.success = [];
        var _etype1993 = 0;
        _rtmp31994 = input.readListBegin();
        _etype1993 = _rtmp31994.etype;
        _size1990 = _rtmp31994.size;
        for (var _i1995 = 0; _i1995 < _size1990; ++_i1995)
        {
          var elem1996 = null;
          elem1996 = input.readString().value;
          this.success.push(elem1996);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getActiveBuddySubscriberIds_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getActiveBuddySubscriberIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1997 in this.success)
    {
      if (this.success.hasOwnProperty(iter1997))
      {
        iter1997 = this.success[iter1997];
        output.writeString(iter1997);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getAllContactIds_args = function(args) {
};
TalkService_getAllContactIds_args.prototype = {};
TalkService_getAllContactIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getAllContactIds_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getAllContactIds_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getAllContactIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getAllContactIds_result.prototype = {};
TalkService_getAllContactIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1998 = 0;
        var _rtmp32002;
        this.success = [];
        var _etype2001 = 0;
        _rtmp32002 = input.readListBegin();
        _etype2001 = _rtmp32002.etype;
        _size1998 = _rtmp32002.size;
        for (var _i2003 = 0; _i2003 < _size1998; ++_i2003)
        {
          var elem2004 = null;
          elem2004 = input.readString().value;
          this.success.push(elem2004);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getAllContactIds_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getAllContactIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter2005 in this.success)
    {
      if (this.success.hasOwnProperty(iter2005))
      {
        iter2005 = this.success[iter2005];
        output.writeString(iter2005);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getAuthQrcode_args = function(args) {
  this.keepLoggedIn = null;
  this.systemName = null;
  if (args) {
    if (args.keepLoggedIn !== undefined && args.keepLoggedIn !== null) {
      this.keepLoggedIn = args.keepLoggedIn;
    }
    if (args.systemName !== undefined && args.systemName !== null) {
      this.systemName = args.systemName;
    }
  }
};
TalkService_getAuthQrcode_args.prototype = {};
TalkService_getAuthQrcode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.keepLoggedIn = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getAuthQrcode_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getAuthQrcode_args');
  if (this.keepLoggedIn !== null && this.keepLoggedIn !== undefined) {
    output.writeFieldBegin('keepLoggedIn', Thrift.Type.BOOL, 2);
    output.writeBool(this.keepLoggedIn);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 3);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getAuthQrcode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new AuthQrcode(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getAuthQrcode_result.prototype = {};
TalkService_getAuthQrcode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthQrcode();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getAuthQrcode_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getAuthQrcode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getBlockedContactIds_args = function(args) {
};
TalkService_getBlockedContactIds_args.prototype = {};
TalkService_getBlockedContactIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getBlockedContactIds_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getBlockedContactIds_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getBlockedContactIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getBlockedContactIds_result.prototype = {};
TalkService_getBlockedContactIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2006 = 0;
        var _rtmp32010;
        this.success = [];
        var _etype2009 = 0;
        _rtmp32010 = input.readListBegin();
        _etype2009 = _rtmp32010.etype;
        _size2006 = _rtmp32010.size;
        for (var _i2011 = 0; _i2011 < _size2006; ++_i2011)
        {
          var elem2012 = null;
          elem2012 = input.readString().value;
          this.success.push(elem2012);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getBlockedContactIds_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getBlockedContactIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter2013 in this.success)
    {
      if (this.success.hasOwnProperty(iter2013))
      {
        iter2013 = this.success[iter2013];
        output.writeString(iter2013);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerWithPhoneNumber_args = function(args) {
  this.sessionId = null;
  this.migrationPincodeSessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.migrationPincodeSessionId !== undefined && args.migrationPincodeSessionId !== null) {
      this.migrationPincodeSessionId = args.migrationPincodeSessionId;
    }
  }
};
TalkService_registerWithPhoneNumber_args.prototype = {};
TalkService_registerWithPhoneNumber_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.migrationPincodeSessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWithPhoneNumber_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWithPhoneNumber_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.migrationPincodeSessionId !== null && this.migrationPincodeSessionId !== undefined) {
    output.writeFieldBegin('migrationPincodeSessionId', Thrift.Type.STRING, 3);
    output.writeString(this.migrationPincodeSessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerWithPhoneNumber_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new RegisterWithPhoneNumberResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerWithPhoneNumber_result.prototype = {};
TalkService_registerWithPhoneNumber_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new RegisterWithPhoneNumberResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWithPhoneNumber_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWithPhoneNumber_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerWithPhoneNumberAndPassword_args = function(args) {
  this.sessionId = null;
  this.keynm = null;
  this.encrypted = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.keynm !== undefined && args.keynm !== null) {
      this.keynm = args.keynm;
    }
    if (args.encrypted !== undefined && args.encrypted !== null) {
      this.encrypted = args.encrypted;
    }
  }
};
TalkService_registerWithPhoneNumberAndPassword_args.prototype = {};
TalkService_registerWithPhoneNumberAndPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.keynm = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.encrypted = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWithPhoneNumberAndPassword_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWithPhoneNumberAndPassword_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.keynm !== null && this.keynm !== undefined) {
    output.writeFieldBegin('keynm', Thrift.Type.STRING, 3);
    output.writeString(this.keynm);
    output.writeFieldEnd();
  }
  if (this.encrypted !== null && this.encrypted !== undefined) {
    output.writeFieldBegin('encrypted', Thrift.Type.STRING, 4);
    output.writeString(this.encrypted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerWithPhoneNumberAndPassword_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new RegisterWithPhoneNumberResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerWithPhoneNumberAndPassword_result.prototype = {};
TalkService_registerWithPhoneNumberAndPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new RegisterWithPhoneNumberResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWithPhoneNumberAndPassword_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWithPhoneNumberAndPassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getAnalyticsInfo_args = function(args) {
};
TalkService_getAnalyticsInfo_args.prototype = {};
TalkService_getAnalyticsInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getAnalyticsInfo_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getAnalyticsInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getAnalyticsInfo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new AnalyticsInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getAnalyticsInfo_result.prototype = {};
TalkService_getAnalyticsInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AnalyticsInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getAnalyticsInfo_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getAnalyticsInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reportClientStatistics_args = function(args) {
  this.reqSeq = null;
  this.category = null;
  this.count = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
TalkService_reportClientStatistics_args.prototype = {};
TalkService_reportClientStatistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.category = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportClientStatistics_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportClientStatistics_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.I32, 2);
    output.writeI32(this.category);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reportClientStatistics_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_reportClientStatistics_result.prototype = {};
TalkService_reportClientStatistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportClientStatistics_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportClientStatistics_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_verifyPhoneNumberForLogin_args = function(args) {
  this.verifierFromPhone = null;
  this.pinCodeForPhone = null;
  this.verifierFromLogin = null;
  if (args) {
    if (args.verifierFromPhone !== undefined && args.verifierFromPhone !== null) {
      this.verifierFromPhone = args.verifierFromPhone;
    }
    if (args.pinCodeForPhone !== undefined && args.pinCodeForPhone !== null) {
      this.pinCodeForPhone = args.pinCodeForPhone;
    }
    if (args.verifierFromLogin !== undefined && args.verifierFromLogin !== null) {
      this.verifierFromLogin = args.verifierFromLogin;
    }
  }
};
TalkService_verifyPhoneNumberForLogin_args.prototype = {};
TalkService_verifyPhoneNumberForLogin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.verifierFromPhone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pinCodeForPhone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.verifierFromLogin = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyPhoneNumberForLogin_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyPhoneNumberForLogin_args');
  if (this.verifierFromPhone !== null && this.verifierFromPhone !== undefined) {
    output.writeFieldBegin('verifierFromPhone', Thrift.Type.STRING, 2);
    output.writeString(this.verifierFromPhone);
    output.writeFieldEnd();
  }
  if (this.pinCodeForPhone !== null && this.pinCodeForPhone !== undefined) {
    output.writeFieldBegin('pinCodeForPhone', Thrift.Type.STRING, 3);
    output.writeString(this.pinCodeForPhone);
    output.writeFieldEnd();
  }
  if (this.verifierFromLogin !== null && this.verifierFromLogin !== undefined) {
    output.writeFieldBegin('verifierFromLogin', Thrift.Type.STRING, 4);
    output.writeString(this.verifierFromLogin);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_verifyPhoneNumberForLogin_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_verifyPhoneNumberForLogin_result.prototype = {};
TalkService_verifyPhoneNumberForLogin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyPhoneNumberForLogin_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyPhoneNumberForLogin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_verifyPhoneNumber_args = function(args) {
  this.sessionId = null;
  this.pinCode = null;
  this.udidHash = null;
  this.migrationPincodeSessionId = null;
  this.oldUdidHash = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.pinCode !== undefined && args.pinCode !== null) {
      this.pinCode = args.pinCode;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.migrationPincodeSessionId !== undefined && args.migrationPincodeSessionId !== null) {
      this.migrationPincodeSessionId = args.migrationPincodeSessionId;
    }
    if (args.oldUdidHash !== undefined && args.oldUdidHash !== null) {
      this.oldUdidHash = args.oldUdidHash;
    }
  }
};
TalkService_verifyPhoneNumber_args.prototype = {};
TalkService_verifyPhoneNumber_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pinCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.migrationPincodeSessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.oldUdidHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyPhoneNumber_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyPhoneNumber_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.pinCode !== null && this.pinCode !== undefined) {
    output.writeFieldBegin('pinCode', Thrift.Type.STRING, 3);
    output.writeString(this.pinCode);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 4);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.migrationPincodeSessionId !== null && this.migrationPincodeSessionId !== undefined) {
    output.writeFieldBegin('migrationPincodeSessionId', Thrift.Type.STRING, 5);
    output.writeString(this.migrationPincodeSessionId);
    output.writeFieldEnd();
  }
  if (this.oldUdidHash !== null && this.oldUdidHash !== undefined) {
    output.writeFieldBegin('oldUdidHash', Thrift.Type.STRING, 6);
    output.writeString(this.oldUdidHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_verifyPhoneNumber_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PhoneVerificationResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_verifyPhoneNumber_result.prototype = {};
TalkService_verifyPhoneNumber_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PhoneVerificationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyPhoneNumber_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyPhoneNumber_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getBlockedContactIdsByRange_args = function(args) {
  this.start = null;
  this.count = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
TalkService_getBlockedContactIdsByRange_args.prototype = {};
TalkService_getBlockedContactIdsByRange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.start = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getBlockedContactIdsByRange_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getBlockedContactIdsByRange_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I32, 2);
    output.writeI32(this.start);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getBlockedContactIdsByRange_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getBlockedContactIdsByRange_result.prototype = {};
TalkService_getBlockedContactIdsByRange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2014 = 0;
        var _rtmp32018;
        this.success = [];
        var _etype2017 = 0;
        _rtmp32018 = input.readListBegin();
        _etype2017 = _rtmp32018.etype;
        _size2014 = _rtmp32018.size;
        for (var _i2019 = 0; _i2019 < _size2014; ++_i2019)
        {
          var elem2020 = null;
          elem2020 = input.readString().value;
          this.success.push(elem2020);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getBlockedContactIdsByRange_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getBlockedContactIdsByRange_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter2021 in this.success)
    {
      if (this.success.hasOwnProperty(iter2021))
      {
        iter2021 = this.success[iter2021];
        output.writeString(iter2021);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getBlockedRecommendationIds_args = function(args) {
};
TalkService_getBlockedRecommendationIds_args.prototype = {};
TalkService_getBlockedRecommendationIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getBlockedRecommendationIds_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getBlockedRecommendationIds_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getBlockedRecommendationIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getBlockedRecommendationIds_result.prototype = {};
TalkService_getBlockedRecommendationIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2022 = 0;
        var _rtmp32026;
        this.success = [];
        var _etype2025 = 0;
        _rtmp32026 = input.readListBegin();
        _etype2025 = _rtmp32026.etype;
        _size2022 = _rtmp32026.size;
        for (var _i2027 = 0; _i2027 < _size2022; ++_i2027)
        {
          var elem2028 = null;
          elem2028 = input.readString().value;
          this.success.push(elem2028);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getBlockedRecommendationIds_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getBlockedRecommendationIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter2029 in this.success)
    {
      if (this.success.hasOwnProperty(iter2029))
      {
        iter2029 = this.success[iter2029];
        output.writeString(iter2029);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getBuddyBlockerIds_args = function(args) {
};
TalkService_getBuddyBlockerIds_args.prototype = {};
TalkService_getBuddyBlockerIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getBuddyBlockerIds_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getBuddyBlockerIds_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getBuddyBlockerIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getBuddyBlockerIds_result.prototype = {};
TalkService_getBuddyBlockerIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2030 = 0;
        var _rtmp32034;
        this.success = [];
        var _etype2033 = 0;
        _rtmp32034 = input.readListBegin();
        _etype2033 = _rtmp32034.etype;
        _size2030 = _rtmp32034.size;
        for (var _i2035 = 0; _i2035 < _size2030; ++_i2035)
        {
          var elem2036 = null;
          elem2036 = input.readString().value;
          this.success.push(elem2036);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getBuddyBlockerIds_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getBuddyBlockerIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter2037 in this.success)
    {
      if (this.success.hasOwnProperty(iter2037))
      {
        iter2037 = this.success[iter2037];
        output.writeString(iter2037);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getBuddyLocation_args = function(args) {
  this.mid = null;
  this.index = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
  }
};
TalkService_getBuddyLocation_args.prototype = {};
TalkService_getBuddyLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getBuddyLocation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getBuddyLocation_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 3);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getBuddyLocation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Geolocation(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getBuddyLocation_result.prototype = {};
TalkService_getBuddyLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Geolocation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getBuddyLocation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getBuddyLocation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getCompactContactsModifiedSince_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
TalkService_getCompactContactsModifiedSince_args.prototype = {};
TalkService_getCompactContactsModifiedSince_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getCompactContactsModifiedSince_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getCompactContactsModifiedSince_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getCompactContactsModifiedSince_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [CompactContact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getCompactContactsModifiedSince_result.prototype = {};
TalkService_getCompactContactsModifiedSince_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2038 = 0;
        var _rtmp32042;
        this.success = [];
        var _etype2041 = 0;
        _rtmp32042 = input.readListBegin();
        _etype2041 = _rtmp32042.etype;
        _size2038 = _rtmp32042.size;
        for (var _i2043 = 0; _i2043 < _size2038; ++_i2043)
        {
          var elem2044 = null;
          elem2044 = new CompactContact();
          elem2044.read(input);
          this.success.push(elem2044);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getCompactContactsModifiedSince_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getCompactContactsModifiedSince_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2045 in this.success)
    {
      if (this.success.hasOwnProperty(iter2045))
      {
        iter2045 = this.success[iter2045];
        iter2045.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getCompactGroup_args = function(args) {
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
TalkService_getCompactGroup_args.prototype = {};
TalkService_getCompactGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getCompactGroup_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getCompactGroup_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getCompactGroup_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Group(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getCompactGroup_result.prototype = {};
TalkService_getCompactGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Group();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getCompactGroup_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getCompactGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getCompactRoom_args = function(args) {
  this.roomId = null;
  if (args) {
    if (args.roomId !== undefined && args.roomId !== null) {
      this.roomId = args.roomId;
    }
  }
};
TalkService_getCompactRoom_args.prototype = {};
TalkService_getCompactRoom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roomId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getCompactRoom_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getCompactRoom_args');
  if (this.roomId !== null && this.roomId !== undefined) {
    output.writeFieldBegin('roomId', Thrift.Type.STRING, 2);
    output.writeString(this.roomId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getCompactRoom_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Room(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getCompactRoom_result.prototype = {};
TalkService_getCompactRoom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Room();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getCompactRoom_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getCompactRoom_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getContact_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
TalkService_getContact_args.prototype = {};
TalkService_getContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getContact_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getContact_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getContact_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Contact(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getContact_result.prototype = {};
TalkService_getContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Contact();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getContact_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getContact_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getContacts_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
  }
};
TalkService_getContacts_args.prototype = {};
TalkService_getContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2046 = 0;
        var _rtmp32050;
        this.ids = [];
        var _etype2049 = 0;
        _rtmp32050 = input.readListBegin();
        _etype2049 = _rtmp32050.etype;
        _size2046 = _rtmp32050.size;
        for (var _i2051 = 0; _i2051 < _size2046; ++_i2051)
        {
          var elem2052 = null;
          elem2052 = input.readString().value;
          this.ids.push(elem2052);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getContacts_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getContacts_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter2053 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter2053))
      {
        iter2053 = this.ids[iter2053];
        output.writeString(iter2053);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getContacts_result.prototype = {};
TalkService_getContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2054 = 0;
        var _rtmp32058;
        this.success = [];
        var _etype2057 = 0;
        _rtmp32058 = input.readListBegin();
        _etype2057 = _rtmp32058.etype;
        _size2054 = _rtmp32058.size;
        for (var _i2059 = 0; _i2059 < _size2054; ++_i2059)
        {
          var elem2060 = null;
          elem2060 = new Contact();
          elem2060.read(input);
          this.success.push(elem2060);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getContacts_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2061 in this.success)
    {
      if (this.success.hasOwnProperty(iter2061))
      {
        iter2061 = this.success[iter2061];
        iter2061.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getContactWithFriendRequestStatus_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
TalkService_getContactWithFriendRequestStatus_args.prototype = {};
TalkService_getContactWithFriendRequestStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getContactWithFriendRequestStatus_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getContactWithFriendRequestStatus_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getContactWithFriendRequestStatus_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Contact(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getContactWithFriendRequestStatus_result.prototype = {};
TalkService_getContactWithFriendRequestStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Contact();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getContactWithFriendRequestStatus_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getContactWithFriendRequestStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getCountryWithRequestIp_args = function(args) {
};
TalkService_getCountryWithRequestIp_args.prototype = {};
TalkService_getCountryWithRequestIp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getCountryWithRequestIp_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getCountryWithRequestIp_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getCountryWithRequestIp_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getCountryWithRequestIp_result.prototype = {};
TalkService_getCountryWithRequestIp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getCountryWithRequestIp_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getCountryWithRequestIp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getFavoriteMids_args = function(args) {
};
TalkService_getFavoriteMids_args.prototype = {};
TalkService_getFavoriteMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getFavoriteMids_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getFavoriteMids_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getFavoriteMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getFavoriteMids_result.prototype = {};
TalkService_getFavoriteMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2062 = 0;
        var _rtmp32066;
        this.success = [];
        var _etype2065 = 0;
        _rtmp32066 = input.readListBegin();
        _etype2065 = _rtmp32066.etype;
        _size2062 = _rtmp32066.size;
        for (var _i2067 = 0; _i2067 < _size2062; ++_i2067)
        {
          var elem2068 = null;
          elem2068 = input.readString().value;
          this.success.push(elem2068);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getFavoriteMids_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getFavoriteMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter2069 in this.success)
    {
      if (this.success.hasOwnProperty(iter2069))
      {
        iter2069 = this.success[iter2069];
        output.writeString(iter2069);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getGroup_args = function(args) {
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
TalkService_getGroup_args.prototype = {};
TalkService_getGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroup_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroup_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getGroup_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Group(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getGroup_result.prototype = {};
TalkService_getGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Group();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroup_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getGroupIdsInvited_args = function(args) {
};
TalkService_getGroupIdsInvited_args.prototype = {};
TalkService_getGroupIdsInvited_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupIdsInvited_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupIdsInvited_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getGroupIdsInvited_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getGroupIdsInvited_result.prototype = {};
TalkService_getGroupIdsInvited_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2070 = 0;
        var _rtmp32074;
        this.success = [];
        var _etype2073 = 0;
        _rtmp32074 = input.readListBegin();
        _etype2073 = _rtmp32074.etype;
        _size2070 = _rtmp32074.size;
        for (var _i2075 = 0; _i2075 < _size2070; ++_i2075)
        {
          var elem2076 = null;
          elem2076 = input.readString().value;
          this.success.push(elem2076);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupIdsInvited_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupIdsInvited_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter2077 in this.success)
    {
      if (this.success.hasOwnProperty(iter2077))
      {
        iter2077 = this.success[iter2077];
        output.writeString(iter2077);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getGroupIdsJoined_args = function(args) {
};
TalkService_getGroupIdsJoined_args.prototype = {};
TalkService_getGroupIdsJoined_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupIdsJoined_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupIdsJoined_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getGroupIdsJoined_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getGroupIdsJoined_result.prototype = {};
TalkService_getGroupIdsJoined_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2078 = 0;
        var _rtmp32082;
        this.success = [];
        var _etype2081 = 0;
        _rtmp32082 = input.readListBegin();
        _etype2081 = _rtmp32082.etype;
        _size2078 = _rtmp32082.size;
        for (var _i2083 = 0; _i2083 < _size2078; ++_i2083)
        {
          var elem2084 = null;
          elem2084 = input.readString().value;
          this.success.push(elem2084);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupIdsJoined_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupIdsJoined_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter2085 in this.success)
    {
      if (this.success.hasOwnProperty(iter2085))
      {
        iter2085 = this.success[iter2085];
        output.writeString(iter2085);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getGroups_args = function(args) {
  this.groupIds = null;
  if (args) {
    if (args.groupIds !== undefined && args.groupIds !== null) {
      this.groupIds = Thrift.copyList(args.groupIds, [null]);
    }
  }
};
TalkService_getGroups_args.prototype = {};
TalkService_getGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2086 = 0;
        var _rtmp32090;
        this.groupIds = [];
        var _etype2089 = 0;
        _rtmp32090 = input.readListBegin();
        _etype2089 = _rtmp32090.etype;
        _size2086 = _rtmp32090.size;
        for (var _i2091 = 0; _i2091 < _size2086; ++_i2091)
        {
          var elem2092 = null;
          elem2092 = input.readString().value;
          this.groupIds.push(elem2092);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroups_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroups_args');
  if (this.groupIds !== null && this.groupIds !== undefined) {
    output.writeFieldBegin('groupIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.groupIds.length);
    for (var iter2093 in this.groupIds)
    {
      if (this.groupIds.hasOwnProperty(iter2093))
      {
        iter2093 = this.groupIds[iter2093];
        output.writeString(iter2093);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getGroups_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Group]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getGroups_result.prototype = {};
TalkService_getGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2094 = 0;
        var _rtmp32098;
        this.success = [];
        var _etype2097 = 0;
        _rtmp32098 = input.readListBegin();
        _etype2097 = _rtmp32098.etype;
        _size2094 = _rtmp32098.size;
        for (var _i2099 = 0; _i2099 < _size2094; ++_i2099)
        {
          var elem2100 = null;
          elem2100 = new Group();
          elem2100.read(input);
          this.success.push(elem2100);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroups_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2101 in this.success)
    {
      if (this.success.hasOwnProperty(iter2101))
      {
        iter2101 = this.success[iter2101];
        iter2101.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getHiddenContactMids_args = function(args) {
};
TalkService_getHiddenContactMids_args.prototype = {};
TalkService_getHiddenContactMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getHiddenContactMids_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getHiddenContactMids_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getHiddenContactMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getHiddenContactMids_result.prototype = {};
TalkService_getHiddenContactMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2102 = 0;
        var _rtmp32106;
        this.success = [];
        var _etype2105 = 0;
        _rtmp32106 = input.readListBegin();
        _etype2105 = _rtmp32106.etype;
        _size2102 = _rtmp32106.size;
        for (var _i2107 = 0; _i2107 < _size2102; ++_i2107)
        {
          var elem2108 = null;
          elem2108 = input.readString().value;
          this.success.push(elem2108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getHiddenContactMids_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getHiddenContactMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter2109 in this.success)
    {
      if (this.success.hasOwnProperty(iter2109))
      {
        iter2109 = this.success[iter2109];
        output.writeString(iter2109);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getIdentityIdentifier_args = function(args) {
};
TalkService_getIdentityIdentifier_args.prototype = {};
TalkService_getIdentityIdentifier_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getIdentityIdentifier_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getIdentityIdentifier_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getIdentityIdentifier_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getIdentityIdentifier_result.prototype = {};
TalkService_getIdentityIdentifier_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getIdentityIdentifier_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getIdentityIdentifier_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getLastAnnouncementIndex_args = function(args) {
};
TalkService_getLastAnnouncementIndex_args.prototype = {};
TalkService_getLastAnnouncementIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getLastAnnouncementIndex_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getLastAnnouncementIndex_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getLastAnnouncementIndex_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getLastAnnouncementIndex_result.prototype = {};
TalkService_getLastAnnouncementIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getLastAnnouncementIndex_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getLastAnnouncementIndex_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getLastOpRevision_args = function(args) {
};
TalkService_getLastOpRevision_args.prototype = {};
TalkService_getLastOpRevision_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getLastOpRevision_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getLastOpRevision_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getLastOpRevision_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getLastOpRevision_result.prototype = {};
TalkService_getLastOpRevision_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getLastOpRevision_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getLastOpRevision_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getSuggestRevisions_args = function(args) {
};
TalkService_getSuggestRevisions_args.prototype = {};
TalkService_getSuggestRevisions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getSuggestRevisions_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getSuggestRevisions_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getSuggestRevisions_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SuggestDictionaryRevisions(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getSuggestRevisions_result.prototype = {};
TalkService_getSuggestRevisions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SuggestDictionaryRevisions();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getSuggestRevisions_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getSuggestRevisions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getPreviousMessagesV2WithReadCount_args = function(args) {
  this.messageBoxId = null;
  this.endMessageId = null;
  this.messagesCount = null;
  if (args) {
    if (args.messageBoxId !== undefined && args.messageBoxId !== null) {
      this.messageBoxId = args.messageBoxId;
    }
    if (args.endMessageId !== undefined && args.endMessageId !== null) {
      this.endMessageId = new MessageBoxV2MessageId(args.endMessageId);
    }
    if (args.messagesCount !== undefined && args.messagesCount !== null) {
      this.messagesCount = args.messagesCount;
    }
  }
};
TalkService_getPreviousMessagesV2WithReadCount_args.prototype = {};
TalkService_getPreviousMessagesV2WithReadCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageBoxId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.endMessageId = new MessageBoxV2MessageId();
        this.endMessageId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.messagesCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getPreviousMessagesV2WithReadCount_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getPreviousMessagesV2WithReadCount_args');
  if (this.messageBoxId !== null && this.messageBoxId !== undefined) {
    output.writeFieldBegin('messageBoxId', Thrift.Type.STRING, 2);
    output.writeString(this.messageBoxId);
    output.writeFieldEnd();
  }
  if (this.endMessageId !== null && this.endMessageId !== undefined) {
    output.writeFieldBegin('endMessageId', Thrift.Type.STRUCT, 3);
    this.endMessageId.write(output);
    output.writeFieldEnd();
  }
  if (this.messagesCount !== null && this.messagesCount !== undefined) {
    output.writeFieldBegin('messagesCount', Thrift.Type.I32, 4);
    output.writeI32(this.messagesCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getPreviousMessagesV2WithReadCount_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Message]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getPreviousMessagesV2WithReadCount_result.prototype = {};
TalkService_getPreviousMessagesV2WithReadCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2110 = 0;
        var _rtmp32114;
        this.success = [];
        var _etype2113 = 0;
        _rtmp32114 = input.readListBegin();
        _etype2113 = _rtmp32114.etype;
        _size2110 = _rtmp32114.size;
        for (var _i2115 = 0; _i2115 < _size2110; ++_i2115)
        {
          var elem2116 = null;
          elem2116 = new Message();
          elem2116.read(input);
          this.success.push(elem2116);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getPreviousMessagesV2WithReadCount_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getPreviousMessagesV2WithReadCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2117 in this.success)
    {
      if (this.success.hasOwnProperty(iter2117))
      {
        iter2117 = this.success[iter2117];
        iter2117.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageBox_args = function(args) {
  this.channelId = null;
  this.messageBoxId = null;
  this.lastMessagesCount = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.messageBoxId !== undefined && args.messageBoxId !== null) {
      this.messageBoxId = args.messageBoxId;
    }
    if (args.lastMessagesCount !== undefined && args.lastMessagesCount !== null) {
      this.lastMessagesCount = args.lastMessagesCount;
    }
  }
};
TalkService_getMessageBox_args.prototype = {};
TalkService_getMessageBox_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageBoxId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.lastMessagesCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageBox_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageBox_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.messageBoxId !== null && this.messageBoxId !== undefined) {
    output.writeFieldBegin('messageBoxId', Thrift.Type.STRING, 3);
    output.writeString(this.messageBoxId);
    output.writeFieldEnd();
  }
  if (this.lastMessagesCount !== null && this.lastMessagesCount !== undefined) {
    output.writeFieldBegin('lastMessagesCount', Thrift.Type.I32, 4);
    output.writeI32(this.lastMessagesCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageBox_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TMessageBox(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getMessageBox_result.prototype = {};
TalkService_getMessageBox_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TMessageBox();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageBox_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageBox_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageBoxCompactWrapUp_args = function(args) {
  this.mid = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
TalkService_getMessageBoxCompactWrapUp_args.prototype = {};
TalkService_getMessageBoxCompactWrapUp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageBoxCompactWrapUp_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageBoxCompactWrapUp_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageBoxCompactWrapUp_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TMessageBoxWrapUp(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getMessageBoxCompactWrapUp_result.prototype = {};
TalkService_getMessageBoxCompactWrapUp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TMessageBoxWrapUp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageBoxCompactWrapUp_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageBoxCompactWrapUp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageBoxCompactWrapUpList_args = function(args) {
  this.start = null;
  this.messageBoxCount = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.messageBoxCount !== undefined && args.messageBoxCount !== null) {
      this.messageBoxCount = args.messageBoxCount;
    }
  }
};
TalkService_getMessageBoxCompactWrapUpList_args.prototype = {};
TalkService_getMessageBoxCompactWrapUpList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.start = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.messageBoxCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageBoxCompactWrapUpList_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageBoxCompactWrapUpList_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I32, 2);
    output.writeI32(this.start);
    output.writeFieldEnd();
  }
  if (this.messageBoxCount !== null && this.messageBoxCount !== undefined) {
    output.writeFieldBegin('messageBoxCount', Thrift.Type.I32, 3);
    output.writeI32(this.messageBoxCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageBoxCompactWrapUpList_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TMessageBoxWrapUpResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getMessageBoxCompactWrapUpList_result.prototype = {};
TalkService_getMessageBoxCompactWrapUpList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TMessageBoxWrapUpResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageBoxCompactWrapUpList_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageBoxCompactWrapUpList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageBoxList_args = function(args) {
  this.channelId = null;
  this.lastMessagesCount = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.lastMessagesCount !== undefined && args.lastMessagesCount !== null) {
      this.lastMessagesCount = args.lastMessagesCount;
    }
  }
};
TalkService_getMessageBoxList_args.prototype = {};
TalkService_getMessageBoxList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.lastMessagesCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageBoxList_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageBoxList_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.lastMessagesCount !== null && this.lastMessagesCount !== undefined) {
    output.writeFieldBegin('lastMessagesCount', Thrift.Type.I32, 3);
    output.writeI32(this.lastMessagesCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageBoxList_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TMessageBox]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getMessageBoxList_result.prototype = {};
TalkService_getMessageBoxList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2118 = 0;
        var _rtmp32122;
        this.success = [];
        var _etype2121 = 0;
        _rtmp32122 = input.readListBegin();
        _etype2121 = _rtmp32122.etype;
        _size2118 = _rtmp32122.size;
        for (var _i2123 = 0; _i2123 < _size2118; ++_i2123)
        {
          var elem2124 = null;
          elem2124 = new TMessageBox();
          elem2124.read(input);
          this.success.push(elem2124);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageBoxList_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageBoxList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2125 in this.success)
    {
      if (this.success.hasOwnProperty(iter2125))
      {
        iter2125 = this.success[iter2125];
        iter2125.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageBoxListByStatus_args = function(args) {
  this.channelId = null;
  this.lastMessagesCount = null;
  this.status = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.lastMessagesCount !== undefined && args.lastMessagesCount !== null) {
      this.lastMessagesCount = args.lastMessagesCount;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
TalkService_getMessageBoxListByStatus_args.prototype = {};
TalkService_getMessageBoxListByStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.lastMessagesCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageBoxListByStatus_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageBoxListByStatus_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.lastMessagesCount !== null && this.lastMessagesCount !== undefined) {
    output.writeFieldBegin('lastMessagesCount', Thrift.Type.I32, 3);
    output.writeI32(this.lastMessagesCount);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageBoxListByStatus_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TMessageBox]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getMessageBoxListByStatus_result.prototype = {};
TalkService_getMessageBoxListByStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2126 = 0;
        var _rtmp32130;
        this.success = [];
        var _etype2129 = 0;
        _rtmp32130 = input.readListBegin();
        _etype2129 = _rtmp32130.etype;
        _size2126 = _rtmp32130.size;
        for (var _i2131 = 0; _i2131 < _size2126; ++_i2131)
        {
          var elem2132 = null;
          elem2132 = new TMessageBox();
          elem2132.read(input);
          this.success.push(elem2132);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageBoxListByStatus_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageBoxListByStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2133 in this.success)
    {
      if (this.success.hasOwnProperty(iter2133))
      {
        iter2133 = this.success[iter2133];
        iter2133.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageBoxWrapUp_args = function(args) {
  this.mid = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
TalkService_getMessageBoxWrapUp_args.prototype = {};
TalkService_getMessageBoxWrapUp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageBoxWrapUp_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageBoxWrapUp_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageBoxWrapUp_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TMessageBoxWrapUp(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getMessageBoxWrapUp_result.prototype = {};
TalkService_getMessageBoxWrapUp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TMessageBoxWrapUp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageBoxWrapUp_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageBoxWrapUp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageBoxWrapUpList_args = function(args) {
  this.start = null;
  this.messageBoxCount = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.messageBoxCount !== undefined && args.messageBoxCount !== null) {
      this.messageBoxCount = args.messageBoxCount;
    }
  }
};
TalkService_getMessageBoxWrapUpList_args.prototype = {};
TalkService_getMessageBoxWrapUpList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.start = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.messageBoxCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageBoxWrapUpList_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageBoxWrapUpList_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I32, 2);
    output.writeI32(this.start);
    output.writeFieldEnd();
  }
  if (this.messageBoxCount !== null && this.messageBoxCount !== undefined) {
    output.writeFieldBegin('messageBoxCount', Thrift.Type.I32, 3);
    output.writeI32(this.messageBoxCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageBoxWrapUpList_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TMessageBoxWrapUpResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getMessageBoxWrapUpList_result.prototype = {};
TalkService_getMessageBoxWrapUpList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TMessageBoxWrapUpResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageBoxWrapUpList_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageBoxWrapUpList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessagesBySequenceNumber_args = function(args) {
  this.channelId = null;
  this.messageBoxId = null;
  this.startSeq = null;
  this.endSeq = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.messageBoxId !== undefined && args.messageBoxId !== null) {
      this.messageBoxId = args.messageBoxId;
    }
    if (args.startSeq !== undefined && args.startSeq !== null) {
      this.startSeq = args.startSeq;
    }
    if (args.endSeq !== undefined && args.endSeq !== null) {
      this.endSeq = args.endSeq;
    }
  }
};
TalkService_getMessagesBySequenceNumber_args.prototype = {};
TalkService_getMessagesBySequenceNumber_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageBoxId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.startSeq = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.endSeq = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessagesBySequenceNumber_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessagesBySequenceNumber_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.messageBoxId !== null && this.messageBoxId !== undefined) {
    output.writeFieldBegin('messageBoxId', Thrift.Type.STRING, 3);
    output.writeString(this.messageBoxId);
    output.writeFieldEnd();
  }
  if (this.startSeq !== null && this.startSeq !== undefined) {
    output.writeFieldBegin('startSeq', Thrift.Type.I64, 4);
    output.writeI64(this.startSeq);
    output.writeFieldEnd();
  }
  if (this.endSeq !== null && this.endSeq !== undefined) {
    output.writeFieldBegin('endSeq', Thrift.Type.I64, 5);
    output.writeI64(this.endSeq);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessagesBySequenceNumber_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Message]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getMessagesBySequenceNumber_result.prototype = {};
TalkService_getMessagesBySequenceNumber_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2134 = 0;
        var _rtmp32138;
        this.success = [];
        var _etype2137 = 0;
        _rtmp32138 = input.readListBegin();
        _etype2137 = _rtmp32138.etype;
        _size2134 = _rtmp32138.size;
        for (var _i2139 = 0; _i2139 < _size2134; ++_i2139)
        {
          var elem2140 = null;
          elem2140 = new Message();
          elem2140.read(input);
          this.success.push(elem2140);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessagesBySequenceNumber_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessagesBySequenceNumber_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2141 in this.success)
    {
      if (this.success.hasOwnProperty(iter2141))
      {
        iter2141 = this.success[iter2141];
        iter2141.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getNextMessages_args = function(args) {
  this.messageBoxId = null;
  this.startSeq = null;
  this.messagesCount = null;
  if (args) {
    if (args.messageBoxId !== undefined && args.messageBoxId !== null) {
      this.messageBoxId = args.messageBoxId;
    }
    if (args.startSeq !== undefined && args.startSeq !== null) {
      this.startSeq = args.startSeq;
    }
    if (args.messagesCount !== undefined && args.messagesCount !== null) {
      this.messagesCount = args.messagesCount;
    }
  }
};
TalkService_getNextMessages_args.prototype = {};
TalkService_getNextMessages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageBoxId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startSeq = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.messagesCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getNextMessages_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getNextMessages_args');
  if (this.messageBoxId !== null && this.messageBoxId !== undefined) {
    output.writeFieldBegin('messageBoxId', Thrift.Type.STRING, 2);
    output.writeString(this.messageBoxId);
    output.writeFieldEnd();
  }
  if (this.startSeq !== null && this.startSeq !== undefined) {
    output.writeFieldBegin('startSeq', Thrift.Type.I64, 3);
    output.writeI64(this.startSeq);
    output.writeFieldEnd();
  }
  if (this.messagesCount !== null && this.messagesCount !== undefined) {
    output.writeFieldBegin('messagesCount', Thrift.Type.I32, 4);
    output.writeI32(this.messagesCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getNextMessages_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Message]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getNextMessages_result.prototype = {};
TalkService_getNextMessages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2142 = 0;
        var _rtmp32146;
        this.success = [];
        var _etype2145 = 0;
        _rtmp32146 = input.readListBegin();
        _etype2145 = _rtmp32146.etype;
        _size2142 = _rtmp32146.size;
        for (var _i2147 = 0; _i2147 < _size2142; ++_i2147)
        {
          var elem2148 = null;
          elem2148 = new Message();
          elem2148.read(input);
          this.success.push(elem2148);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getNextMessages_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getNextMessages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2149 in this.success)
    {
      if (this.success.hasOwnProperty(iter2149))
      {
        iter2149 = this.success[iter2149];
        iter2149.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getNotificationPolicy_args = function(args) {
  this.carrier = null;
  if (args) {
    if (args.carrier !== undefined && args.carrier !== null) {
      this.carrier = args.carrier;
    }
  }
};
TalkService_getNotificationPolicy_args.prototype = {};
TalkService_getNotificationPolicy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.carrier = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getNotificationPolicy_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getNotificationPolicy_args');
  if (this.carrier !== null && this.carrier !== undefined) {
    output.writeFieldBegin('carrier', Thrift.Type.I32, 2);
    output.writeI32(this.carrier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getNotificationPolicy_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getNotificationPolicy_result.prototype = {};
TalkService_getNotificationPolicy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2150 = 0;
        var _rtmp32154;
        this.success = [];
        var _etype2153 = 0;
        _rtmp32154 = input.readListBegin();
        _etype2153 = _rtmp32154.etype;
        _size2150 = _rtmp32154.size;
        for (var _i2155 = 0; _i2155 < _size2150; ++_i2155)
        {
          var elem2156 = null;
          elem2156 = input.readI32().value;
          this.success.push(elem2156);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getNotificationPolicy_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getNotificationPolicy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter2157 in this.success)
    {
      if (this.success.hasOwnProperty(iter2157))
      {
        iter2157 = this.success[iter2157];
        output.writeI32(iter2157);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getPreviousMessages_args = function(args) {
  this.messageBoxId = null;
  this.endSeq = null;
  this.messagesCount = null;
  if (args) {
    if (args.messageBoxId !== undefined && args.messageBoxId !== null) {
      this.messageBoxId = args.messageBoxId;
    }
    if (args.endSeq !== undefined && args.endSeq !== null) {
      this.endSeq = args.endSeq;
    }
    if (args.messagesCount !== undefined && args.messagesCount !== null) {
      this.messagesCount = args.messagesCount;
    }
  }
};
TalkService_getPreviousMessages_args.prototype = {};
TalkService_getPreviousMessages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageBoxId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.endSeq = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.messagesCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getPreviousMessages_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getPreviousMessages_args');
  if (this.messageBoxId !== null && this.messageBoxId !== undefined) {
    output.writeFieldBegin('messageBoxId', Thrift.Type.STRING, 2);
    output.writeString(this.messageBoxId);
    output.writeFieldEnd();
  }
  if (this.endSeq !== null && this.endSeq !== undefined) {
    output.writeFieldBegin('endSeq', Thrift.Type.I64, 3);
    output.writeI64(this.endSeq);
    output.writeFieldEnd();
  }
  if (this.messagesCount !== null && this.messagesCount !== undefined) {
    output.writeFieldBegin('messagesCount', Thrift.Type.I32, 4);
    output.writeI32(this.messagesCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getPreviousMessages_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Message]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getPreviousMessages_result.prototype = {};
TalkService_getPreviousMessages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2158 = 0;
        var _rtmp32162;
        this.success = [];
        var _etype2161 = 0;
        _rtmp32162 = input.readListBegin();
        _etype2161 = _rtmp32162.etype;
        _size2158 = _rtmp32162.size;
        for (var _i2163 = 0; _i2163 < _size2158; ++_i2163)
        {
          var elem2164 = null;
          elem2164 = new Message();
          elem2164.read(input);
          this.success.push(elem2164);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getPreviousMessages_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getPreviousMessages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2165 in this.success)
    {
      if (this.success.hasOwnProperty(iter2165))
      {
        iter2165 = this.success[iter2165];
        iter2165.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getProfile_args = function(args) {
};
TalkService_getProfile_args.prototype = {};
TalkService_getProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getProfile_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getProfile_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getProfile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Profile(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getProfile_result.prototype = {};
TalkService_getProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Profile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getProfile_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getProximityMatchCandidateList_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
TalkService_getProximityMatchCandidateList_args.prototype = {};
TalkService_getProximityMatchCandidateList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getProximityMatchCandidateList_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getProximityMatchCandidateList_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getProximityMatchCandidateList_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ProximityMatchCandidateResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getProximityMatchCandidateList_result.prototype = {};
TalkService_getProximityMatchCandidateList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ProximityMatchCandidateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getProximityMatchCandidateList_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getProximityMatchCandidateList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getProximityMatchCandidates_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
TalkService_getProximityMatchCandidates_args.prototype = {};
TalkService_getProximityMatchCandidates_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getProximityMatchCandidates_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getProximityMatchCandidates_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getProximityMatchCandidates_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getProximityMatchCandidates_result.prototype = {};
TalkService_getProximityMatchCandidates_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size2166 = 0;
        var _rtmp32170;
        this.success = [];
        var _etype2169 = 0;
        _rtmp32170 = input.readSetBegin();
        _etype2169 = _rtmp32170.etype;
        _size2166 = _rtmp32170.size;
        for (var _i2171 = 0; _i2171 < _size2166; ++_i2171)
        {
          var elem2172 = null;
          elem2172 = new Contact();
          elem2172.read(input);
          this.success.push(elem2172);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getProximityMatchCandidates_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getProximityMatchCandidates_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2173 in this.success)
    {
      if (this.success.hasOwnProperty(iter2173))
      {
        iter2173 = this.success[iter2173];
        iter2173.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getRecentMessages_args = function(args) {
  this.messageBoxId = null;
  this.messagesCount = null;
  if (args) {
    if (args.messageBoxId !== undefined && args.messageBoxId !== null) {
      this.messageBoxId = args.messageBoxId;
    }
    if (args.messagesCount !== undefined && args.messagesCount !== null) {
      this.messagesCount = args.messagesCount;
    }
  }
};
TalkService_getRecentMessages_args.prototype = {};
TalkService_getRecentMessages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageBoxId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.messagesCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRecentMessages_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRecentMessages_args');
  if (this.messageBoxId !== null && this.messageBoxId !== undefined) {
    output.writeFieldBegin('messageBoxId', Thrift.Type.STRING, 2);
    output.writeString(this.messageBoxId);
    output.writeFieldEnd();
  }
  if (this.messagesCount !== null && this.messagesCount !== undefined) {
    output.writeFieldBegin('messagesCount', Thrift.Type.I32, 3);
    output.writeI32(this.messagesCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getRecentMessages_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Message]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getRecentMessages_result.prototype = {};
TalkService_getRecentMessages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2174 = 0;
        var _rtmp32178;
        this.success = [];
        var _etype2177 = 0;
        _rtmp32178 = input.readListBegin();
        _etype2177 = _rtmp32178.etype;
        _size2174 = _rtmp32178.size;
        for (var _i2179 = 0; _i2179 < _size2174; ++_i2179)
        {
          var elem2180 = null;
          elem2180 = new Message();
          elem2180.read(input);
          this.success.push(elem2180);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRecentMessages_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRecentMessages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2181 in this.success)
    {
      if (this.success.hasOwnProperty(iter2181))
      {
        iter2181 = this.success[iter2181];
        iter2181.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getRecommendationIds_args = function(args) {
};
TalkService_getRecommendationIds_args.prototype = {};
TalkService_getRecommendationIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRecommendationIds_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRecommendationIds_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getRecommendationIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getRecommendationIds_result.prototype = {};
TalkService_getRecommendationIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2182 = 0;
        var _rtmp32186;
        this.success = [];
        var _etype2185 = 0;
        _rtmp32186 = input.readListBegin();
        _etype2185 = _rtmp32186.etype;
        _size2182 = _rtmp32186.size;
        for (var _i2187 = 0; _i2187 < _size2182; ++_i2187)
        {
          var elem2188 = null;
          elem2188 = input.readString().value;
          this.success.push(elem2188);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRecommendationIds_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRecommendationIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter2189 in this.success)
    {
      if (this.success.hasOwnProperty(iter2189))
      {
        iter2189 = this.success[iter2189];
        output.writeString(iter2189);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getRoom_args = function(args) {
  this.roomId = null;
  if (args) {
    if (args.roomId !== undefined && args.roomId !== null) {
      this.roomId = args.roomId;
    }
  }
};
TalkService_getRoom_args.prototype = {};
TalkService_getRoom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roomId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRoom_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRoom_args');
  if (this.roomId !== null && this.roomId !== undefined) {
    output.writeFieldBegin('roomId', Thrift.Type.STRING, 2);
    output.writeString(this.roomId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getRoom_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Room(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getRoom_result.prototype = {};
TalkService_getRoom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Room();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRoom_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRoom_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getRSAKeyInfo_args = function(args) {
  this.provider = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
  }
};
TalkService_getRSAKeyInfo_args.prototype = {};
TalkService_getRSAKeyInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRSAKeyInfo_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRSAKeyInfo_args');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 2);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getRSAKeyInfo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new RSAKey(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getRSAKeyInfo_result.prototype = {};
TalkService_getRSAKeyInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new RSAKey();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRSAKeyInfo_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRSAKeyInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getServerTime_args = function(args) {
};
TalkService_getServerTime_args.prototype = {};
TalkService_getServerTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getServerTime_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getServerTime_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getServerTime_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getServerTime_result.prototype = {};
TalkService_getServerTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getServerTime_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getServerTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getSessions_args = function(args) {
};
TalkService_getSessions_args.prototype = {};
TalkService_getSessions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getSessions_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getSessions_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getSessions_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [LoginSession]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getSessions_result.prototype = {};
TalkService_getSessions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2190 = 0;
        var _rtmp32194;
        this.success = [];
        var _etype2193 = 0;
        _rtmp32194 = input.readListBegin();
        _etype2193 = _rtmp32194.etype;
        _size2190 = _rtmp32194.size;
        for (var _i2195 = 0; _i2195 < _size2190; ++_i2195)
        {
          var elem2196 = null;
          elem2196 = new LoginSession();
          elem2196.read(input);
          this.success.push(elem2196);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getSessions_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getSessions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2197 in this.success)
    {
      if (this.success.hasOwnProperty(iter2197))
      {
        iter2197 = this.success[iter2197];
        iter2197.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getSettings_args = function(args) {
};
TalkService_getSettings_args.prototype = {};
TalkService_getSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getSettings_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getSettings_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getSettings_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Settings(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getSettings_result.prototype = {};
TalkService_getSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Settings();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getSettings_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getSettings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getGroupsV2_args = function(args) {
  this.groupIds = null;
  if (args) {
    if (args.groupIds !== undefined && args.groupIds !== null) {
      this.groupIds = Thrift.copyList(args.groupIds, [null]);
    }
  }
};
TalkService_getGroupsV2_args.prototype = {};
TalkService_getGroupsV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2198 = 0;
        var _rtmp32202;
        this.groupIds = [];
        var _etype2201 = 0;
        _rtmp32202 = input.readListBegin();
        _etype2201 = _rtmp32202.etype;
        _size2198 = _rtmp32202.size;
        for (var _i2203 = 0; _i2203 < _size2198; ++_i2203)
        {
          var elem2204 = null;
          elem2204 = input.readString().value;
          this.groupIds.push(elem2204);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupsV2_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupsV2_args');
  if (this.groupIds !== null && this.groupIds !== undefined) {
    output.writeFieldBegin('groupIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.groupIds.length);
    for (var iter2205 in this.groupIds)
    {
      if (this.groupIds.hasOwnProperty(iter2205))
      {
        iter2205 = this.groupIds[iter2205];
        output.writeString(iter2205);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getGroupsV2_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Group]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getGroupsV2_result.prototype = {};
TalkService_getGroupsV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2206 = 0;
        var _rtmp32210;
        this.success = [];
        var _etype2209 = 0;
        _rtmp32210 = input.readListBegin();
        _etype2209 = _rtmp32210.etype;
        _size2206 = _rtmp32210.size;
        for (var _i2211 = 0; _i2211 < _size2206; ++_i2211)
        {
          var elem2212 = null;
          elem2212 = new Group();
          elem2212.read(input);
          this.success.push(elem2212);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupsV2_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupsV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2213 in this.success)
    {
      if (this.success.hasOwnProperty(iter2213))
      {
        iter2213 = this.success[iter2213];
        iter2213.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getSettingsAttributes_args = function(args) {
  this.attrBitset = null;
  if (args) {
    if (args.attrBitset !== undefined && args.attrBitset !== null) {
      this.attrBitset = args.attrBitset;
    }
  }
};
TalkService_getSettingsAttributes_args.prototype = {};
TalkService_getSettingsAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.attrBitset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getSettingsAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getSettingsAttributes_args');
  if (this.attrBitset !== null && this.attrBitset !== undefined) {
    output.writeFieldBegin('attrBitset', Thrift.Type.I32, 2);
    output.writeI32(this.attrBitset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getSettingsAttributes_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Settings(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getSettingsAttributes_result.prototype = {};
TalkService_getSettingsAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Settings();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getSettingsAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getSettingsAttributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getSystemConfiguration_args = function(args) {
};
TalkService_getSystemConfiguration_args.prototype = {};
TalkService_getSystemConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getSystemConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getSystemConfiguration_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getSystemConfiguration_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SystemConfiguration(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getSystemConfiguration_result.prototype = {};
TalkService_getSystemConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SystemConfiguration();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getSystemConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getSystemConfiguration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getUserTicket_args = function(args) {
};
TalkService_getUserTicket_args.prototype = {};
TalkService_getUserTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getUserTicket_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getUserTicket_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getUserTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Ticket(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getUserTicket_result.prototype = {};
TalkService_getUserTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Ticket();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getUserTicket_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getUserTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getWapInvitation_args = function(args) {
  this.invitationHash = null;
  if (args) {
    if (args.invitationHash !== undefined && args.invitationHash !== null) {
      this.invitationHash = args.invitationHash;
    }
  }
};
TalkService_getWapInvitation_args.prototype = {};
TalkService_getWapInvitation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.invitationHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getWapInvitation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getWapInvitation_args');
  if (this.invitationHash !== null && this.invitationHash !== undefined) {
    output.writeFieldBegin('invitationHash', Thrift.Type.STRING, 2);
    output.writeString(this.invitationHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getWapInvitation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new WapInvitation(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getWapInvitation_result.prototype = {};
TalkService_getWapInvitation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new WapInvitation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getWapInvitation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getWapInvitation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_invalidateUserTicket_args = function(args) {
};
TalkService_invalidateUserTicket_args.prototype = {};
TalkService_invalidateUserTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_invalidateUserTicket_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_invalidateUserTicket_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_invalidateUserTicket_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_invalidateUserTicket_result.prototype = {};
TalkService_invalidateUserTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_invalidateUserTicket_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_invalidateUserTicket_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_inviteFriendsBySms_args = function(args) {
  this.phoneNumberList = null;
  if (args) {
    if (args.phoneNumberList !== undefined && args.phoneNumberList !== null) {
      this.phoneNumberList = Thrift.copyList(args.phoneNumberList, [null]);
    }
  }
};
TalkService_inviteFriendsBySms_args.prototype = {};
TalkService_inviteFriendsBySms_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2214 = 0;
        var _rtmp32218;
        this.phoneNumberList = [];
        var _etype2217 = 0;
        _rtmp32218 = input.readListBegin();
        _etype2217 = _rtmp32218.etype;
        _size2214 = _rtmp32218.size;
        for (var _i2219 = 0; _i2219 < _size2214; ++_i2219)
        {
          var elem2220 = null;
          elem2220 = input.readString().value;
          this.phoneNumberList.push(elem2220);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_inviteFriendsBySms_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_inviteFriendsBySms_args');
  if (this.phoneNumberList !== null && this.phoneNumberList !== undefined) {
    output.writeFieldBegin('phoneNumberList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.phoneNumberList.length);
    for (var iter2221 in this.phoneNumberList)
    {
      if (this.phoneNumberList.hasOwnProperty(iter2221))
      {
        iter2221 = this.phoneNumberList[iter2221];
        output.writeString(iter2221);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_inviteFriendsBySms_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_inviteFriendsBySms_result.prototype = {};
TalkService_inviteFriendsBySms_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_inviteFriendsBySms_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_inviteFriendsBySms_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_inviteIntoGroup_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
TalkService_inviteIntoGroup_args.prototype = {};
TalkService_inviteIntoGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2222 = 0;
        var _rtmp32226;
        this.contactIds = [];
        var _etype2225 = 0;
        _rtmp32226 = input.readListBegin();
        _etype2225 = _rtmp32226.etype;
        _size2222 = _rtmp32226.size;
        for (var _i2227 = 0; _i2227 < _size2222; ++_i2227)
        {
          var elem2228 = null;
          elem2228 = input.readString().value;
          this.contactIds.push(elem2228);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_inviteIntoGroup_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_inviteIntoGroup_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter2229 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter2229))
      {
        iter2229 = this.contactIds[iter2229];
        output.writeString(iter2229);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_inviteIntoGroup_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_inviteIntoGroup_result.prototype = {};
TalkService_inviteIntoGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_inviteIntoGroup_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_inviteIntoGroup_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_inviteIntoRoom_args = function(args) {
  this.reqSeq = null;
  this.roomId = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.roomId !== undefined && args.roomId !== null) {
      this.roomId = args.roomId;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
TalkService_inviteIntoRoom_args.prototype = {};
TalkService_inviteIntoRoom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roomId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2230 = 0;
        var _rtmp32234;
        this.contactIds = [];
        var _etype2233 = 0;
        _rtmp32234 = input.readListBegin();
        _etype2233 = _rtmp32234.etype;
        _size2230 = _rtmp32234.size;
        for (var _i2235 = 0; _i2235 < _size2230; ++_i2235)
        {
          var elem2236 = null;
          elem2236 = input.readString().value;
          this.contactIds.push(elem2236);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_inviteIntoRoom_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_inviteIntoRoom_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.roomId !== null && this.roomId !== undefined) {
    output.writeFieldBegin('roomId', Thrift.Type.STRING, 2);
    output.writeString(this.roomId);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter2237 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter2237))
      {
        iter2237 = this.contactIds[iter2237];
        output.writeString(iter2237);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_inviteIntoRoom_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_inviteIntoRoom_result.prototype = {};
TalkService_inviteIntoRoom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_inviteIntoRoom_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_inviteIntoRoom_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_inviteViaEmail_args = function(args) {
  this.reqSeq = null;
  this.email = null;
  this.name = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
TalkService_inviteViaEmail_args.prototype = {};
TalkService_inviteViaEmail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_inviteViaEmail_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_inviteViaEmail_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 2);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_inviteViaEmail_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_inviteViaEmail_result.prototype = {};
TalkService_inviteViaEmail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_inviteViaEmail_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_inviteViaEmail_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_isIdentityIdentifierAvailable_args = function(args) {
  this.provider = null;
  this.identifier = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
  }
};
TalkService_isIdentityIdentifierAvailable_args.prototype = {};
TalkService_isIdentityIdentifierAvailable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_isIdentityIdentifierAvailable_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_isIdentityIdentifierAvailable_args');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 3);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 2);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_isIdentityIdentifierAvailable_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_isIdentityIdentifierAvailable_result.prototype = {};
TalkService_isIdentityIdentifierAvailable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_isIdentityIdentifierAvailable_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_isIdentityIdentifierAvailable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_isUseridAvailable_args = function(args) {
  this.userid = null;
  if (args) {
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
  }
};
TalkService_isUseridAvailable_args.prototype = {};
TalkService_isUseridAvailable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_isUseridAvailable_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_isUseridAvailable_args');
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 2);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_isUseridAvailable_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_isUseridAvailable_result.prototype = {};
TalkService_isUseridAvailable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_isUseridAvailable_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_isUseridAvailable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_kickoutFromGroup_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
TalkService_kickoutFromGroup_args.prototype = {};
TalkService_kickoutFromGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2238 = 0;
        var _rtmp32242;
        this.contactIds = [];
        var _etype2241 = 0;
        _rtmp32242 = input.readListBegin();
        _etype2241 = _rtmp32242.etype;
        _size2238 = _rtmp32242.size;
        for (var _i2243 = 0; _i2243 < _size2238; ++_i2243)
        {
          var elem2244 = null;
          elem2244 = input.readString().value;
          this.contactIds.push(elem2244);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_kickoutFromGroup_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_kickoutFromGroup_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter2245 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter2245))
      {
        iter2245 = this.contactIds[iter2245];
        output.writeString(iter2245);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_kickoutFromGroup_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_kickoutFromGroup_result.prototype = {};
TalkService_kickoutFromGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_kickoutFromGroup_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_kickoutFromGroup_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reissueGroupTicket_args = function(args) {
  this.groupMid = null;
  if (args) {
    if (args.groupMid !== undefined && args.groupMid !== null) {
      this.groupMid = args.groupMid;
    }
  }
};
TalkService_reissueGroupTicket_args.prototype = {};
TalkService_reissueGroupTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.groupMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reissueGroupTicket_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reissueGroupTicket_args');
  if (this.groupMid !== null && this.groupMid !== undefined) {
    output.writeFieldBegin('groupMid', Thrift.Type.STRING, 1);
    output.writeString(this.groupMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reissueGroupTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_reissueGroupTicket_result.prototype = {};
TalkService_reissueGroupTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reissueGroupTicket_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reissueGroupTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findGroupByTicket_args = function(args) {
  this.ticketId = null;
  if (args) {
    if (args.ticketId !== undefined && args.ticketId !== null) {
      this.ticketId = args.ticketId;
    }
  }
};
TalkService_findGroupByTicket_args.prototype = {};
TalkService_findGroupByTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ticketId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findGroupByTicket_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findGroupByTicket_args');
  if (this.ticketId !== null && this.ticketId !== undefined) {
    output.writeFieldBegin('ticketId', Thrift.Type.STRING, 1);
    output.writeString(this.ticketId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findGroupByTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Group(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findGroupByTicket_result.prototype = {};
TalkService_findGroupByTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Group();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findGroupByTicket_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findGroupByTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_leaveGroup_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
TalkService_leaveGroup_args.prototype = {};
TalkService_leaveGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_leaveGroup_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_leaveGroup_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_leaveGroup_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_leaveGroup_result.prototype = {};
TalkService_leaveGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_leaveGroup_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_leaveGroup_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_leaveRoom_args = function(args) {
  this.reqSeq = null;
  this.roomId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.roomId !== undefined && args.roomId !== null) {
      this.roomId = args.roomId;
    }
  }
};
TalkService_leaveRoom_args.prototype = {};
TalkService_leaveRoom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roomId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_leaveRoom_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_leaveRoom_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.roomId !== null && this.roomId !== undefined) {
    output.writeFieldBegin('roomId', Thrift.Type.STRING, 2);
    output.writeString(this.roomId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_leaveRoom_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_leaveRoom_result.prototype = {};
TalkService_leaveRoom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_leaveRoom_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_leaveRoom_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_loginWithIdentityCredential_args = function(args) {
  this.identityProvider = null;
  this.identifier = null;
  this.password = null;
  this.keepLoggedIn = null;
  this.accessLocation = null;
  this.systemName = null;
  this.certificate = null;
  if (args) {
    if (args.identityProvider !== undefined && args.identityProvider !== null) {
      this.identityProvider = args.identityProvider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.keepLoggedIn !== undefined && args.keepLoggedIn !== null) {
      this.keepLoggedIn = args.keepLoggedIn;
    }
    if (args.accessLocation !== undefined && args.accessLocation !== null) {
      this.accessLocation = args.accessLocation;
    }
    if (args.systemName !== undefined && args.systemName !== null) {
      this.systemName = args.systemName;
    }
    if (args.certificate !== undefined && args.certificate !== null) {
      this.certificate = args.certificate;
    }
  }
};
TalkService_loginWithIdentityCredential_args.prototype = {};
TalkService_loginWithIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.identityProvider = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.keepLoggedIn = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.accessLocation = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.certificate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_loginWithIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_loginWithIdentityCredential_args');
  if (this.identityProvider !== null && this.identityProvider !== undefined) {
    output.writeFieldBegin('identityProvider', Thrift.Type.I32, 8);
    output.writeI32(this.identityProvider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 3);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.keepLoggedIn !== null && this.keepLoggedIn !== undefined) {
    output.writeFieldBegin('keepLoggedIn', Thrift.Type.BOOL, 5);
    output.writeBool(this.keepLoggedIn);
    output.writeFieldEnd();
  }
  if (this.accessLocation !== null && this.accessLocation !== undefined) {
    output.writeFieldBegin('accessLocation', Thrift.Type.STRING, 6);
    output.writeString(this.accessLocation);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 7);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRING, 9);
    output.writeString(this.certificate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_loginWithIdentityCredential_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_loginWithIdentityCredential_result.prototype = {};
TalkService_loginWithIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_loginWithIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_loginWithIdentityCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_loginWithIdentityCredentialForCertificate_args = function(args) {
  this.identityProvider = null;
  this.identifier = null;
  this.password = null;
  this.keepLoggedIn = null;
  this.accessLocation = null;
  this.systemName = null;
  this.certificate = null;
  if (args) {
    if (args.identityProvider !== undefined && args.identityProvider !== null) {
      this.identityProvider = args.identityProvider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.keepLoggedIn !== undefined && args.keepLoggedIn !== null) {
      this.keepLoggedIn = args.keepLoggedIn;
    }
    if (args.accessLocation !== undefined && args.accessLocation !== null) {
      this.accessLocation = args.accessLocation;
    }
    if (args.systemName !== undefined && args.systemName !== null) {
      this.systemName = args.systemName;
    }
    if (args.certificate !== undefined && args.certificate !== null) {
      this.certificate = args.certificate;
    }
  }
};
TalkService_loginWithIdentityCredentialForCertificate_args.prototype = {};
TalkService_loginWithIdentityCredentialForCertificate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.identityProvider = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.keepLoggedIn = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.accessLocation = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.certificate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_loginWithIdentityCredentialForCertificate_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_loginWithIdentityCredentialForCertificate_args');
  if (this.identityProvider !== null && this.identityProvider !== undefined) {
    output.writeFieldBegin('identityProvider', Thrift.Type.I32, 8);
    output.writeI32(this.identityProvider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 3);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.keepLoggedIn !== null && this.keepLoggedIn !== undefined) {
    output.writeFieldBegin('keepLoggedIn', Thrift.Type.BOOL, 5);
    output.writeBool(this.keepLoggedIn);
    output.writeFieldEnd();
  }
  if (this.accessLocation !== null && this.accessLocation !== undefined) {
    output.writeFieldBegin('accessLocation', Thrift.Type.STRING, 6);
    output.writeString(this.accessLocation);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 7);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRING, 9);
    output.writeString(this.certificate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_loginWithIdentityCredentialForCertificate_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new LoginResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_loginWithIdentityCredentialForCertificate_result.prototype = {};
TalkService_loginWithIdentityCredentialForCertificate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new LoginResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_loginWithIdentityCredentialForCertificate_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_loginWithIdentityCredentialForCertificate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_loginWithVerifier_args = function(args) {
  this.verifier = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
  }
};
TalkService_loginWithVerifier_args.prototype = {};
TalkService_loginWithVerifier_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_loginWithVerifier_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_loginWithVerifier_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 3);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_loginWithVerifier_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_loginWithVerifier_result.prototype = {};
TalkService_loginWithVerifier_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_loginWithVerifier_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_loginWithVerifier_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_loginWithVerifierForCerificate_args = function(args) {
  this.verifier = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
  }
};
TalkService_loginWithVerifierForCerificate_args.prototype = {};
TalkService_loginWithVerifierForCerificate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_loginWithVerifierForCerificate_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_loginWithVerifierForCerificate_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 3);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_loginWithVerifierForCerificate_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new LoginResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_loginWithVerifierForCerificate_result.prototype = {};
TalkService_loginWithVerifierForCerificate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new LoginResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_loginWithVerifierForCerificate_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_loginWithVerifierForCerificate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_loginWithVerifierForCertificate_args = function(args) {
  this.verifier = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
  }
};
TalkService_loginWithVerifierForCertificate_args.prototype = {};
TalkService_loginWithVerifierForCertificate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_loginWithVerifierForCertificate_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_loginWithVerifierForCertificate_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 3);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_loginWithVerifierForCertificate_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new LoginResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_loginWithVerifierForCertificate_result.prototype = {};
TalkService_loginWithVerifierForCertificate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new LoginResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_loginWithVerifierForCertificate_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_loginWithVerifierForCertificate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_logout_args = function(args) {
};
TalkService_logout_args.prototype = {};
TalkService_logout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_logout_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_logout_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_logout_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_logout_result.prototype = {};
TalkService_logout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_logout_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_logout_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_logoutSession_args = function(args) {
  this.tokenKey = null;
  if (args) {
    if (args.tokenKey !== undefined && args.tokenKey !== null) {
      this.tokenKey = args.tokenKey;
    }
  }
};
TalkService_logoutSession_args.prototype = {};
TalkService_logoutSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tokenKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_logoutSession_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_logoutSession_args');
  if (this.tokenKey !== null && this.tokenKey !== undefined) {
    output.writeFieldBegin('tokenKey', Thrift.Type.STRING, 2);
    output.writeString(this.tokenKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_logoutSession_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_logoutSession_result.prototype = {};
TalkService_logoutSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_logoutSession_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_logoutSession_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_noop_args = function(args) {
};
TalkService_noop_args.prototype = {};
TalkService_noop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_noop_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_noop_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_noop_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_noop_result.prototype = {};
TalkService_noop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_noop_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_noop_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_notifiedRedirect_args = function(args) {
  this.paramMap = null;
  if (args) {
    if (args.paramMap !== undefined && args.paramMap !== null) {
      this.paramMap = Thrift.copyMap(args.paramMap, [null]);
    }
  }
};
TalkService_notifiedRedirect_args.prototype = {};
TalkService_notifiedRedirect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size2246 = 0;
        var _rtmp32250;
        this.paramMap = {};
        var _ktype2247 = 0;
        var _vtype2248 = 0;
        _rtmp32250 = input.readMapBegin();
        _ktype2247 = _rtmp32250.ktype;
        _vtype2248 = _rtmp32250.vtype;
        _size2246 = _rtmp32250.size;
        for (var _i2251 = 0; _i2251 < _size2246; ++_i2251)
        {
          if (_i2251 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key2252 = null;
          var val2253 = null;
          key2252 = input.readString().value;
          val2253 = input.readString().value;
          this.paramMap[key2252] = val2253;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifiedRedirect_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifiedRedirect_args');
  if (this.paramMap !== null && this.paramMap !== undefined) {
    output.writeFieldBegin('paramMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.paramMap));
    for (var kiter2254 in this.paramMap)
    {
      if (this.paramMap.hasOwnProperty(kiter2254))
      {
        var viter2255 = this.paramMap[kiter2254];
        output.writeString(kiter2254);
        output.writeString(viter2255);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_notifiedRedirect_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_notifiedRedirect_result.prototype = {};
TalkService_notifiedRedirect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifiedRedirect_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifiedRedirect_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_notifyBuddyOnAir_args = function(args) {
  this.seq = null;
  this.receiverMids = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.receiverMids !== undefined && args.receiverMids !== null) {
      this.receiverMids = Thrift.copyList(args.receiverMids, [null]);
    }
  }
};
TalkService_notifyBuddyOnAir_args.prototype = {};
TalkService_notifyBuddyOnAir_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2256 = 0;
        var _rtmp32260;
        this.receiverMids = [];
        var _etype2259 = 0;
        _rtmp32260 = input.readListBegin();
        _etype2259 = _rtmp32260.etype;
        _size2256 = _rtmp32260.size;
        for (var _i2261 = 0; _i2261 < _size2256; ++_i2261)
        {
          var elem2262 = null;
          elem2262 = input.readString().value;
          this.receiverMids.push(elem2262);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifyBuddyOnAir_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifyBuddyOnAir_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.receiverMids !== null && this.receiverMids !== undefined) {
    output.writeFieldBegin('receiverMids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.receiverMids.length);
    for (var iter2263 in this.receiverMids)
    {
      if (this.receiverMids.hasOwnProperty(iter2263))
      {
        iter2263 = this.receiverMids[iter2263];
        output.writeString(iter2263);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_notifyBuddyOnAir_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_notifyBuddyOnAir_result.prototype = {};
TalkService_notifyBuddyOnAir_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size2264 = 0;
        var _rtmp32268;
        this.success = {};
        var _ktype2265 = 0;
        var _vtype2266 = 0;
        _rtmp32268 = input.readMapBegin();
        _ktype2265 = _rtmp32268.ktype;
        _vtype2266 = _rtmp32268.vtype;
        _size2264 = _rtmp32268.size;
        for (var _i2269 = 0; _i2269 < _size2264; ++_i2269)
        {
          if (_i2269 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key2270 = null;
          var val2271 = null;
          key2270 = input.readString().value;
          val2271 = input.readString().value;
          this.success[key2270] = val2271;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifyBuddyOnAir_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifyBuddyOnAir_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter2272 in this.success)
    {
      if (this.success.hasOwnProperty(kiter2272))
      {
        var viter2273 = this.success[kiter2272];
        output.writeString(kiter2272);
        output.writeString(viter2273);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_notifyIndividualEvent_args = function(args) {
  this.notificationStatus = null;
  this.receiverMids = null;
  if (args) {
    if (args.notificationStatus !== undefined && args.notificationStatus !== null) {
      this.notificationStatus = args.notificationStatus;
    }
    if (args.receiverMids !== undefined && args.receiverMids !== null) {
      this.receiverMids = Thrift.copyList(args.receiverMids, [null]);
    }
  }
};
TalkService_notifyIndividualEvent_args.prototype = {};
TalkService_notifyIndividualEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.notificationStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2274 = 0;
        var _rtmp32278;
        this.receiverMids = [];
        var _etype2277 = 0;
        _rtmp32278 = input.readListBegin();
        _etype2277 = _rtmp32278.etype;
        _size2274 = _rtmp32278.size;
        for (var _i2279 = 0; _i2279 < _size2274; ++_i2279)
        {
          var elem2280 = null;
          elem2280 = input.readString().value;
          this.receiverMids.push(elem2280);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifyIndividualEvent_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifyIndividualEvent_args');
  if (this.notificationStatus !== null && this.notificationStatus !== undefined) {
    output.writeFieldBegin('notificationStatus', Thrift.Type.I32, 2);
    output.writeI32(this.notificationStatus);
    output.writeFieldEnd();
  }
  if (this.receiverMids !== null && this.receiverMids !== undefined) {
    output.writeFieldBegin('receiverMids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.receiverMids.length);
    for (var iter2281 in this.receiverMids)
    {
      if (this.receiverMids.hasOwnProperty(iter2281))
      {
        iter2281 = this.receiverMids[iter2281];
        output.writeString(iter2281);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_notifyIndividualEvent_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_notifyIndividualEvent_result.prototype = {};
TalkService_notifyIndividualEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifyIndividualEvent_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifyIndividualEvent_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_notifyInstalled_args = function(args) {
  this.udidHash = null;
  this.applicationTypeWithExtensions = null;
  if (args) {
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.applicationTypeWithExtensions !== undefined && args.applicationTypeWithExtensions !== null) {
      this.applicationTypeWithExtensions = args.applicationTypeWithExtensions;
    }
  }
};
TalkService_notifyInstalled_args.prototype = {};
TalkService_notifyInstalled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.applicationTypeWithExtensions = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifyInstalled_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifyInstalled_args');
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 2);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.applicationTypeWithExtensions !== null && this.applicationTypeWithExtensions !== undefined) {
    output.writeFieldBegin('applicationTypeWithExtensions', Thrift.Type.STRING, 3);
    output.writeString(this.applicationTypeWithExtensions);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_notifyInstalled_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_notifyInstalled_result.prototype = {};
TalkService_notifyInstalled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifyInstalled_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifyInstalled_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_notifyRegistrationComplete_args = function(args) {
  this.udidHash = null;
  this.applicationTypeWithExtensions = null;
  if (args) {
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.applicationTypeWithExtensions !== undefined && args.applicationTypeWithExtensions !== null) {
      this.applicationTypeWithExtensions = args.applicationTypeWithExtensions;
    }
  }
};
TalkService_notifyRegistrationComplete_args.prototype = {};
TalkService_notifyRegistrationComplete_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.applicationTypeWithExtensions = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifyRegistrationComplete_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifyRegistrationComplete_args');
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 2);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.applicationTypeWithExtensions !== null && this.applicationTypeWithExtensions !== undefined) {
    output.writeFieldBegin('applicationTypeWithExtensions', Thrift.Type.STRING, 3);
    output.writeString(this.applicationTypeWithExtensions);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_notifyRegistrationComplete_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_notifyRegistrationComplete_result.prototype = {};
TalkService_notifyRegistrationComplete_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifyRegistrationComplete_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifyRegistrationComplete_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_notifySleep_args = function(args) {
  this.lastRev = null;
  this.badge = null;
  if (args) {
    if (args.lastRev !== undefined && args.lastRev !== null) {
      this.lastRev = args.lastRev;
    }
    if (args.badge !== undefined && args.badge !== null) {
      this.badge = args.badge;
    }
  }
};
TalkService_notifySleep_args.prototype = {};
TalkService_notifySleep_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastRev = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.badge = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifySleep_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifySleep_args');
  if (this.lastRev !== null && this.lastRev !== undefined) {
    output.writeFieldBegin('lastRev', Thrift.Type.I64, 2);
    output.writeI64(this.lastRev);
    output.writeFieldEnd();
  }
  if (this.badge !== null && this.badge !== undefined) {
    output.writeFieldBegin('badge', Thrift.Type.I32, 3);
    output.writeI32(this.badge);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_notifySleep_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_notifySleep_result.prototype = {};
TalkService_notifySleep_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifySleep_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifySleep_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_notifyUpdated_args = function(args) {
  this.lastRev = null;
  this.deviceInfo = null;
  if (args) {
    if (args.lastRev !== undefined && args.lastRev !== null) {
      this.lastRev = args.lastRev;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new DeviceInfo(args.deviceInfo);
    }
  }
};
TalkService_notifyUpdated_args.prototype = {};
TalkService_notifyUpdated_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastRev = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifyUpdated_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifyUpdated_args');
  if (this.lastRev !== null && this.lastRev !== undefined) {
    output.writeFieldBegin('lastRev', Thrift.Type.I64, 2);
    output.writeI64(this.lastRev);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 3);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_notifyUpdated_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_notifyUpdated_result.prototype = {};
TalkService_notifyUpdated_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifyUpdated_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifyUpdated_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_openProximityMatch_args = function(args) {
  this.location = null;
  if (args) {
    if (args.location !== undefined && args.location !== null) {
      this.location = new Location(args.location);
    }
  }
};
TalkService_openProximityMatch_args.prototype = {};
TalkService_openProximityMatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_openProximityMatch_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_openProximityMatch_args');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 2);
    this.location.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_openProximityMatch_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_openProximityMatch_result.prototype = {};
TalkService_openProximityMatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_openProximityMatch_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_openProximityMatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerBuddyUser_args = function(args) {
  this.buddyId = null;
  this.registrarPassword = null;
  if (args) {
    if (args.buddyId !== undefined && args.buddyId !== null) {
      this.buddyId = args.buddyId;
    }
    if (args.registrarPassword !== undefined && args.registrarPassword !== null) {
      this.registrarPassword = args.registrarPassword;
    }
  }
};
TalkService_registerBuddyUser_args.prototype = {};
TalkService_registerBuddyUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registrarPassword = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerBuddyUser_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerBuddyUser_args');
  if (this.buddyId !== null && this.buddyId !== undefined) {
    output.writeFieldBegin('buddyId', Thrift.Type.STRING, 2);
    output.writeString(this.buddyId);
    output.writeFieldEnd();
  }
  if (this.registrarPassword !== null && this.registrarPassword !== undefined) {
    output.writeFieldBegin('registrarPassword', Thrift.Type.STRING, 3);
    output.writeString(this.registrarPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerBuddyUser_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerBuddyUser_result.prototype = {};
TalkService_registerBuddyUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerBuddyUser_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerBuddyUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerBuddyUserid_args = function(args) {
  this.seq = null;
  this.userid = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
  }
};
TalkService_registerBuddyUserid_args.prototype = {};
TalkService_registerBuddyUserid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerBuddyUserid_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerBuddyUserid_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 2);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 3);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerBuddyUserid_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerBuddyUserid_result.prototype = {};
TalkService_registerBuddyUserid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerBuddyUserid_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerBuddyUserid_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerDevice_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
TalkService_registerDevice_args.prototype = {};
TalkService_registerDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerDevice_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerDevice_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerDevice_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerDevice_result.prototype = {};
TalkService_registerDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerDevice_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerDeviceWithIdentityCredential_args = function(args) {
  this.sessionId = null;
  this.provider = null;
  this.identifier = null;
  this.verifier = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
  }
};
TalkService_registerDeviceWithIdentityCredential_args.prototype = {};
TalkService_registerDeviceWithIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerDeviceWithIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerDeviceWithIdentityCredential_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 5);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 3);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 4);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerDeviceWithIdentityCredential_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerDeviceWithIdentityCredential_result.prototype = {};
TalkService_registerDeviceWithIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerDeviceWithIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerDeviceWithIdentityCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerDeviceWithoutPhoneNumber_args = function(args) {
  this.region = null;
  this.udidHash = null;
  this.deviceInfo = null;
  if (args) {
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new DeviceInfo(args.deviceInfo);
    }
  }
};
TalkService_registerDeviceWithoutPhoneNumber_args.prototype = {};
TalkService_registerDeviceWithoutPhoneNumber_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerDeviceWithoutPhoneNumber_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerDeviceWithoutPhoneNumber_args');
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 2);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 3);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 4);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerDeviceWithoutPhoneNumber_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerDeviceWithoutPhoneNumber_result.prototype = {};
TalkService_registerDeviceWithoutPhoneNumber_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerDeviceWithoutPhoneNumber_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerDeviceWithoutPhoneNumber_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args = function(args) {
  this.region = null;
  this.udidHash = null;
  this.deviceInfo = null;
  this.provider = null;
  this.identifier = null;
  this.verifier = null;
  this.mid = null;
  this.migrationPincodeSessionId = null;
  if (args) {
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new DeviceInfo(args.deviceInfo);
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.migrationPincodeSessionId !== undefined && args.migrationPincodeSessionId !== null) {
      this.migrationPincodeSessionId = args.migrationPincodeSessionId;
    }
  }
};
TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args.prototype = {};
TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.migrationPincodeSessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args');
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 2);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 3);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 4);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 5);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 6);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 7);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 8);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.migrationPincodeSessionId !== null && this.migrationPincodeSessionId !== undefined) {
    output.writeFieldBegin('migrationPincodeSessionId', Thrift.Type.STRING, 9);
    output.writeString(this.migrationPincodeSessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result.prototype = {};
TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerUserid_args = function(args) {
  this.reqSeq = null;
  this.userid = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
  }
};
TalkService_registerUserid_args.prototype = {};
TalkService_registerUserid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerUserid_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerUserid_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 2);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerUserid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerUserid_result.prototype = {};
TalkService_registerUserid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerUserid_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerUserid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerWapDevice_args = function(args) {
  this.invitationHash = null;
  this.guidHash = null;
  this.email = null;
  this.deviceInfo = null;
  if (args) {
    if (args.invitationHash !== undefined && args.invitationHash !== null) {
      this.invitationHash = args.invitationHash;
    }
    if (args.guidHash !== undefined && args.guidHash !== null) {
      this.guidHash = args.guidHash;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new DeviceInfo(args.deviceInfo);
    }
  }
};
TalkService_registerWapDevice_args.prototype = {};
TalkService_registerWapDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.invitationHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.guidHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWapDevice_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWapDevice_args');
  if (this.invitationHash !== null && this.invitationHash !== undefined) {
    output.writeFieldBegin('invitationHash', Thrift.Type.STRING, 2);
    output.writeString(this.invitationHash);
    output.writeFieldEnd();
  }
  if (this.guidHash !== null && this.guidHash !== undefined) {
    output.writeFieldBegin('guidHash', Thrift.Type.STRING, 3);
    output.writeString(this.guidHash);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 4);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 5);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerWapDevice_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerWapDevice_result.prototype = {};
TalkService_registerWapDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWapDevice_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWapDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerWithExistingSnsIdAndIdentityCredential_args = function(args) {
  this.identityCredential = null;
  this.region = null;
  this.udidHash = null;
  this.deviceInfo = null;
  if (args) {
    if (args.identityCredential !== undefined && args.identityCredential !== null) {
      this.identityCredential = new IdentityCredential(args.identityCredential);
    }
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new DeviceInfo(args.deviceInfo);
    }
  }
};
TalkService_registerWithExistingSnsIdAndIdentityCredential_args.prototype = {};
TalkService_registerWithExistingSnsIdAndIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.identityCredential = new IdentityCredential();
        this.identityCredential.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWithExistingSnsIdAndIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWithExistingSnsIdAndIdentityCredential_args');
  if (this.identityCredential !== null && this.identityCredential !== undefined) {
    output.writeFieldBegin('identityCredential', Thrift.Type.STRUCT, 2);
    this.identityCredential.write(output);
    output.writeFieldEnd();
  }
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 3);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 4);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 5);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerWithExistingSnsIdAndIdentityCredential_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerWithExistingSnsIdAndIdentityCredential_result.prototype = {};
TalkService_registerWithExistingSnsIdAndIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWithExistingSnsIdAndIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWithExistingSnsIdAndIdentityCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerWithSnsId_args = function(args) {
  this.snsIdType = null;
  this.snsAccessToken = null;
  this.region = null;
  this.udidHash = null;
  this.deviceInfo = null;
  this.mid = null;
  if (args) {
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
    if (args.snsAccessToken !== undefined && args.snsAccessToken !== null) {
      this.snsAccessToken = args.snsAccessToken;
    }
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new DeviceInfo(args.deviceInfo);
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
TalkService_registerWithSnsId_args.prototype = {};
TalkService_registerWithSnsId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.snsAccessToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWithSnsId_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWithSnsId_args');
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  if (this.snsAccessToken !== null && this.snsAccessToken !== undefined) {
    output.writeFieldBegin('snsAccessToken', Thrift.Type.STRING, 3);
    output.writeString(this.snsAccessToken);
    output.writeFieldEnd();
  }
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 4);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 5);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 6);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 7);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerWithSnsId_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new RegisterWithSnsIdResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerWithSnsId_result.prototype = {};
TalkService_registerWithSnsId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new RegisterWithSnsIdResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWithSnsId_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWithSnsId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerWithSnsIdAndIdentityCredential_args = function(args) {
  this.snsIdType = null;
  this.snsAccessToken = null;
  this.identityCredential = null;
  this.region = null;
  this.udidHash = null;
  this.deviceInfo = null;
  if (args) {
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
    if (args.snsAccessToken !== undefined && args.snsAccessToken !== null) {
      this.snsAccessToken = args.snsAccessToken;
    }
    if (args.identityCredential !== undefined && args.identityCredential !== null) {
      this.identityCredential = new IdentityCredential(args.identityCredential);
    }
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new DeviceInfo(args.deviceInfo);
    }
  }
};
TalkService_registerWithSnsIdAndIdentityCredential_args.prototype = {};
TalkService_registerWithSnsIdAndIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.snsAccessToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.identityCredential = new IdentityCredential();
        this.identityCredential.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWithSnsIdAndIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWithSnsIdAndIdentityCredential_args');
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  if (this.snsAccessToken !== null && this.snsAccessToken !== undefined) {
    output.writeFieldBegin('snsAccessToken', Thrift.Type.STRING, 3);
    output.writeString(this.snsAccessToken);
    output.writeFieldEnd();
  }
  if (this.identityCredential !== null && this.identityCredential !== undefined) {
    output.writeFieldBegin('identityCredential', Thrift.Type.STRUCT, 4);
    this.identityCredential.write(output);
    output.writeFieldEnd();
  }
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 5);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 6);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 7);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerWithSnsIdAndIdentityCredential_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerWithSnsIdAndIdentityCredential_result.prototype = {};
TalkService_registerWithSnsIdAndIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWithSnsIdAndIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWithSnsIdAndIdentityCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reissueDeviceCredential_args = function(args) {
};
TalkService_reissueDeviceCredential_args.prototype = {};
TalkService_reissueDeviceCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reissueDeviceCredential_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reissueDeviceCredential_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reissueDeviceCredential_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_reissueDeviceCredential_result.prototype = {};
TalkService_reissueDeviceCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reissueDeviceCredential_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reissueDeviceCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reissueUserTicket_args = function(args) {
  this.expirationTime = null;
  this.maxUseCount = null;
  if (args) {
    if (args.expirationTime !== undefined && args.expirationTime !== null) {
      this.expirationTime = args.expirationTime;
    }
    if (args.maxUseCount !== undefined && args.maxUseCount !== null) {
      this.maxUseCount = args.maxUseCount;
    }
  }
};
TalkService_reissueUserTicket_args.prototype = {};
TalkService_reissueUserTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expirationTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxUseCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reissueUserTicket_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reissueUserTicket_args');
  if (this.expirationTime !== null && this.expirationTime !== undefined) {
    output.writeFieldBegin('expirationTime', Thrift.Type.I64, 3);
    output.writeI64(this.expirationTime);
    output.writeFieldEnd();
  }
  if (this.maxUseCount !== null && this.maxUseCount !== undefined) {
    output.writeFieldBegin('maxUseCount', Thrift.Type.I32, 4);
    output.writeI32(this.maxUseCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reissueUserTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_reissueUserTicket_result.prototype = {};
TalkService_reissueUserTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reissueUserTicket_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reissueUserTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageReadRange_args = function(args) {
  this.chatIds = null;
  if (args) {
    if (args.chatIds !== undefined && args.chatIds !== null) {
      this.chatIds = Thrift.copyList(args.chatIds, [null]);
    }
  }
};
TalkService_getMessageReadRange_args.prototype = {};
TalkService_getMessageReadRange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2282 = 0;
        var _rtmp32286;
        this.chatIds = [];
        var _etype2285 = 0;
        _rtmp32286 = input.readListBegin();
        _etype2285 = _rtmp32286.etype;
        _size2282 = _rtmp32286.size;
        for (var _i2287 = 0; _i2287 < _size2282; ++_i2287)
        {
          var elem2288 = null;
          elem2288 = input.readString().value;
          this.chatIds.push(elem2288);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageReadRange_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageReadRange_args');
  if (this.chatIds !== null && this.chatIds !== undefined) {
    output.writeFieldBegin('chatIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.chatIds.length);
    for (var iter2289 in this.chatIds)
    {
      if (this.chatIds.hasOwnProperty(iter2289))
      {
        iter2289 = this.chatIds[iter2289];
        output.writeString(iter2289);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageReadRange_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TMessageReadRange]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getMessageReadRange_result.prototype = {};
TalkService_getMessageReadRange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2290 = 0;
        var _rtmp32294;
        this.success = [];
        var _etype2293 = 0;
        _rtmp32294 = input.readListBegin();
        _etype2293 = _rtmp32294.etype;
        _size2290 = _rtmp32294.size;
        for (var _i2295 = 0; _i2295 < _size2290; ++_i2295)
        {
          var elem2296 = null;
          elem2296 = new TMessageReadRange();
          elem2296.read(input);
          this.success.push(elem2296);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageReadRange_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageReadRange_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2297 in this.success)
    {
      if (this.success.hasOwnProperty(iter2297))
      {
        iter2297 = this.success[iter2297];
        iter2297.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_rejectGroupInvitation_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
TalkService_rejectGroupInvitation_args.prototype = {};
TalkService_rejectGroupInvitation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_rejectGroupInvitation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_rejectGroupInvitation_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_rejectGroupInvitation_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_rejectGroupInvitation_result.prototype = {};
TalkService_rejectGroupInvitation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_rejectGroupInvitation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_rejectGroupInvitation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_releaseSession_args = function(args) {
};
TalkService_releaseSession_args.prototype = {};
TalkService_releaseSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_releaseSession_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_releaseSession_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_releaseSession_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_releaseSession_result.prototype = {};
TalkService_releaseSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_releaseSession_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_releaseSession_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_removeAllMessages_args = function(args) {
  this.seq = null;
  this.lastMessageId = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.lastMessageId !== undefined && args.lastMessageId !== null) {
      this.lastMessageId = args.lastMessageId;
    }
  }
};
TalkService_removeAllMessages_args.prototype = {};
TalkService_removeAllMessages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lastMessageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeAllMessages_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeAllMessages_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.lastMessageId !== null && this.lastMessageId !== undefined) {
    output.writeFieldBegin('lastMessageId', Thrift.Type.STRING, 2);
    output.writeString(this.lastMessageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_removeAllMessages_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_removeAllMessages_result.prototype = {};
TalkService_removeAllMessages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeAllMessages_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeAllMessages_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_removeBuddyLocation_args = function(args) {
  this.mid = null;
  this.index = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
  }
};
TalkService_removeBuddyLocation_args.prototype = {};
TalkService_removeBuddyLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeBuddyLocation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeBuddyLocation_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 3);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_removeBuddyLocation_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_removeBuddyLocation_result.prototype = {};
TalkService_removeBuddyLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeBuddyLocation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeBuddyLocation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_removeMessage_args = function(args) {
  this.messageId = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
TalkService_removeMessage_args.prototype = {};
TalkService_removeMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeMessage_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeMessage_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_removeMessage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_removeMessage_result.prototype = {};
TalkService_removeMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeMessage_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_makeUserAddMyselfAsContact_args = function(args) {
  this.contactOwnerMid = null;
  if (args) {
    if (args.contactOwnerMid !== undefined && args.contactOwnerMid !== null) {
      this.contactOwnerMid = args.contactOwnerMid;
    }
  }
};
TalkService_makeUserAddMyselfAsContact_args.prototype = {};
TalkService_makeUserAddMyselfAsContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.contactOwnerMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_makeUserAddMyselfAsContact_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_makeUserAddMyselfAsContact_args');
  if (this.contactOwnerMid !== null && this.contactOwnerMid !== undefined) {
    output.writeFieldBegin('contactOwnerMid', Thrift.Type.STRING, 1);
    output.writeString(this.contactOwnerMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_makeUserAddMyselfAsContact_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ContactTransition(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_makeUserAddMyselfAsContact_result.prototype = {};
TalkService_makeUserAddMyselfAsContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ContactTransition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_makeUserAddMyselfAsContact_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_makeUserAddMyselfAsContact_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_removeMessageFromMyHome_args = function(args) {
  this.messageId = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
TalkService_removeMessageFromMyHome_args.prototype = {};
TalkService_removeMessageFromMyHome_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeMessageFromMyHome_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeMessageFromMyHome_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_removeMessageFromMyHome_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_removeMessageFromMyHome_result.prototype = {};
TalkService_removeMessageFromMyHome_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeMessageFromMyHome_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeMessageFromMyHome_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_removeSnsId_args = function(args) {
  this.snsIdType = null;
  if (args) {
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
  }
};
TalkService_removeSnsId_args.prototype = {};
TalkService_removeSnsId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeSnsId_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeSnsId_args');
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_removeSnsId_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_removeSnsId_result.prototype = {};
TalkService_removeSnsId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeSnsId_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeSnsId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_report_args = function(args) {
  this.syncOpRevision = null;
  this.category = null;
  this.report = null;
  if (args) {
    if (args.syncOpRevision !== undefined && args.syncOpRevision !== null) {
      this.syncOpRevision = args.syncOpRevision;
    }
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.report !== undefined && args.report !== null) {
      this.report = args.report;
    }
  }
};
TalkService_report_args.prototype = {};
TalkService_report_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.syncOpRevision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.category = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.report = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_report_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_report_args');
  if (this.syncOpRevision !== null && this.syncOpRevision !== undefined) {
    output.writeFieldBegin('syncOpRevision', Thrift.Type.I64, 2);
    output.writeI64(this.syncOpRevision);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.I32, 3);
    output.writeI32(this.category);
    output.writeFieldEnd();
  }
  if (this.report !== null && this.report !== undefined) {
    output.writeFieldBegin('report', Thrift.Type.STRING, 4);
    output.writeString(this.report);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_report_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_report_result.prototype = {};
TalkService_report_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_report_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_report_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reportContacts_args = function(args) {
  this.syncOpRevision = null;
  this.category = null;
  this.contactReports = null;
  this.actionType = null;
  if (args) {
    if (args.syncOpRevision !== undefined && args.syncOpRevision !== null) {
      this.syncOpRevision = args.syncOpRevision;
    }
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.contactReports !== undefined && args.contactReports !== null) {
      this.contactReports = Thrift.copyList(args.contactReports, [ContactReport]);
    }
    if (args.actionType !== undefined && args.actionType !== null) {
      this.actionType = args.actionType;
    }
  }
};
TalkService_reportContacts_args.prototype = {};
TalkService_reportContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.syncOpRevision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.category = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size2298 = 0;
        var _rtmp32302;
        this.contactReports = [];
        var _etype2301 = 0;
        _rtmp32302 = input.readListBegin();
        _etype2301 = _rtmp32302.etype;
        _size2298 = _rtmp32302.size;
        for (var _i2303 = 0; _i2303 < _size2298; ++_i2303)
        {
          var elem2304 = null;
          elem2304 = new ContactReport();
          elem2304.read(input);
          this.contactReports.push(elem2304);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.actionType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportContacts_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportContacts_args');
  if (this.syncOpRevision !== null && this.syncOpRevision !== undefined) {
    output.writeFieldBegin('syncOpRevision', Thrift.Type.I64, 2);
    output.writeI64(this.syncOpRevision);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.I32, 3);
    output.writeI32(this.category);
    output.writeFieldEnd();
  }
  if (this.contactReports !== null && this.contactReports !== undefined) {
    output.writeFieldBegin('contactReports', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.contactReports.length);
    for (var iter2305 in this.contactReports)
    {
      if (this.contactReports.hasOwnProperty(iter2305))
      {
        iter2305 = this.contactReports[iter2305];
        iter2305.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.actionType !== null && this.actionType !== undefined) {
    output.writeFieldBegin('actionType', Thrift.Type.I32, 5);
    output.writeI32(this.actionType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reportContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ContactReportResult]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_reportContacts_result.prototype = {};
TalkService_reportContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2306 = 0;
        var _rtmp32310;
        this.success = [];
        var _etype2309 = 0;
        _rtmp32310 = input.readListBegin();
        _etype2309 = _rtmp32310.etype;
        _size2306 = _rtmp32310.size;
        for (var _i2311 = 0; _i2311 < _size2306; ++_i2311)
        {
          var elem2312 = null;
          elem2312 = new ContactReportResult();
          elem2312.read(input);
          this.success.push(elem2312);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportContacts_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2313 in this.success)
    {
      if (this.success.hasOwnProperty(iter2313))
      {
        iter2313 = this.success[iter2313];
        iter2313.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reportGroups_args = function(args) {
  this.syncOpRevision = null;
  this.groups = null;
  if (args) {
    if (args.syncOpRevision !== undefined && args.syncOpRevision !== null) {
      this.syncOpRevision = args.syncOpRevision;
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [Group]);
    }
  }
};
TalkService_reportGroups_args.prototype = {};
TalkService_reportGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.syncOpRevision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2314 = 0;
        var _rtmp32318;
        this.groups = [];
        var _etype2317 = 0;
        _rtmp32318 = input.readListBegin();
        _etype2317 = _rtmp32318.etype;
        _size2314 = _rtmp32318.size;
        for (var _i2319 = 0; _i2319 < _size2314; ++_i2319)
        {
          var elem2320 = null;
          elem2320 = new Group();
          elem2320.read(input);
          this.groups.push(elem2320);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportGroups_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportGroups_args');
  if (this.syncOpRevision !== null && this.syncOpRevision !== undefined) {
    output.writeFieldBegin('syncOpRevision', Thrift.Type.I64, 2);
    output.writeI64(this.syncOpRevision);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.groups.length);
    for (var iter2321 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter2321))
      {
        iter2321 = this.groups[iter2321];
        iter2321.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reportGroups_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_reportGroups_result.prototype = {};
TalkService_reportGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportGroups_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportGroups_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reportProfile_args = function(args) {
  this.syncOpRevision = null;
  this.profile = null;
  if (args) {
    if (args.syncOpRevision !== undefined && args.syncOpRevision !== null) {
      this.syncOpRevision = args.syncOpRevision;
    }
    if (args.profile !== undefined && args.profile !== null) {
      this.profile = new Profile(args.profile);
    }
  }
};
TalkService_reportProfile_args.prototype = {};
TalkService_reportProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.syncOpRevision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.profile = new Profile();
        this.profile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportProfile_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportProfile_args');
  if (this.syncOpRevision !== null && this.syncOpRevision !== undefined) {
    output.writeFieldBegin('syncOpRevision', Thrift.Type.I64, 2);
    output.writeI64(this.syncOpRevision);
    output.writeFieldEnd();
  }
  if (this.profile !== null && this.profile !== undefined) {
    output.writeFieldBegin('profile', Thrift.Type.STRUCT, 3);
    this.profile.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reportProfile_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_reportProfile_result.prototype = {};
TalkService_reportProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportProfile_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportProfile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reportRooms_args = function(args) {
  this.syncOpRevision = null;
  this.rooms = null;
  if (args) {
    if (args.syncOpRevision !== undefined && args.syncOpRevision !== null) {
      this.syncOpRevision = args.syncOpRevision;
    }
    if (args.rooms !== undefined && args.rooms !== null) {
      this.rooms = Thrift.copyList(args.rooms, [Room]);
    }
  }
};
TalkService_reportRooms_args.prototype = {};
TalkService_reportRooms_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.syncOpRevision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2322 = 0;
        var _rtmp32326;
        this.rooms = [];
        var _etype2325 = 0;
        _rtmp32326 = input.readListBegin();
        _etype2325 = _rtmp32326.etype;
        _size2322 = _rtmp32326.size;
        for (var _i2327 = 0; _i2327 < _size2322; ++_i2327)
        {
          var elem2328 = null;
          elem2328 = new Room();
          elem2328.read(input);
          this.rooms.push(elem2328);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportRooms_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportRooms_args');
  if (this.syncOpRevision !== null && this.syncOpRevision !== undefined) {
    output.writeFieldBegin('syncOpRevision', Thrift.Type.I64, 2);
    output.writeI64(this.syncOpRevision);
    output.writeFieldEnd();
  }
  if (this.rooms !== null && this.rooms !== undefined) {
    output.writeFieldBegin('rooms', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rooms.length);
    for (var iter2329 in this.rooms)
    {
      if (this.rooms.hasOwnProperty(iter2329))
      {
        iter2329 = this.rooms[iter2329];
        iter2329.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reportRooms_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_reportRooms_result.prototype = {};
TalkService_reportRooms_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportRooms_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportRooms_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findAndAddContactByMetaTag_args = function(args) {
  this.reqSeq = null;
  this.userid = null;
  this.reference = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
    if (args.reference !== undefined && args.reference !== null) {
      this.reference = args.reference;
    }
  }
};
TalkService_findAndAddContactByMetaTag_args.prototype = {};
TalkService_findAndAddContactByMetaTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reference = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactByMetaTag_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactByMetaTag_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 2);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  if (this.reference !== null && this.reference !== undefined) {
    output.writeFieldBegin('reference', Thrift.Type.STRING, 3);
    output.writeString(this.reference);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findAndAddContactByMetaTag_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Contact(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findAndAddContactByMetaTag_result.prototype = {};
TalkService_findAndAddContactByMetaTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Contact();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactByMetaTag_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactByMetaTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reportSettings_args = function(args) {
  this.syncOpRevision = null;
  this.settings = null;
  if (args) {
    if (args.syncOpRevision !== undefined && args.syncOpRevision !== null) {
      this.syncOpRevision = args.syncOpRevision;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = new Settings(args.settings);
    }
  }
};
TalkService_reportSettings_args.prototype = {};
TalkService_reportSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.syncOpRevision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.settings = new Settings();
        this.settings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportSettings_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportSettings_args');
  if (this.syncOpRevision !== null && this.syncOpRevision !== undefined) {
    output.writeFieldBegin('syncOpRevision', Thrift.Type.I64, 2);
    output.writeI64(this.syncOpRevision);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.STRUCT, 3);
    this.settings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reportSettings_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_reportSettings_result.prototype = {};
TalkService_reportSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportSettings_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportSettings_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reportSpam_args = function(args) {
  this.chatMid = null;
  this.memberMids = null;
  this.spammerReasons = null;
  this.senderMids = null;
  this.spamMessageIds = null;
  this.spamMessages = null;
  if (args) {
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.memberMids !== undefined && args.memberMids !== null) {
      this.memberMids = Thrift.copyList(args.memberMids, [null]);
    }
    if (args.spammerReasons !== undefined && args.spammerReasons !== null) {
      this.spammerReasons = Thrift.copyList(args.spammerReasons, [null]);
    }
    if (args.senderMids !== undefined && args.senderMids !== null) {
      this.senderMids = Thrift.copyList(args.senderMids, [null]);
    }
    if (args.spamMessageIds !== undefined && args.spamMessageIds !== null) {
      this.spamMessageIds = Thrift.copyList(args.spamMessageIds, [null]);
    }
    if (args.spamMessages !== undefined && args.spamMessages !== null) {
      this.spamMessages = Thrift.copyList(args.spamMessages, [null]);
    }
  }
};
TalkService_reportSpam_args.prototype = {};
TalkService_reportSpam_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2330 = 0;
        var _rtmp32334;
        this.memberMids = [];
        var _etype2333 = 0;
        _rtmp32334 = input.readListBegin();
        _etype2333 = _rtmp32334.etype;
        _size2330 = _rtmp32334.size;
        for (var _i2335 = 0; _i2335 < _size2330; ++_i2335)
        {
          var elem2336 = null;
          elem2336 = input.readString().value;
          this.memberMids.push(elem2336);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size2337 = 0;
        var _rtmp32341;
        this.spammerReasons = [];
        var _etype2340 = 0;
        _rtmp32341 = input.readListBegin();
        _etype2340 = _rtmp32341.etype;
        _size2337 = _rtmp32341.size;
        for (var _i2342 = 0; _i2342 < _size2337; ++_i2342)
        {
          var elem2343 = null;
          elem2343 = input.readI32().value;
          this.spammerReasons.push(elem2343);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size2344 = 0;
        var _rtmp32348;
        this.senderMids = [];
        var _etype2347 = 0;
        _rtmp32348 = input.readListBegin();
        _etype2347 = _rtmp32348.etype;
        _size2344 = _rtmp32348.size;
        for (var _i2349 = 0; _i2349 < _size2344; ++_i2349)
        {
          var elem2350 = null;
          elem2350 = input.readString().value;
          this.senderMids.push(elem2350);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size2351 = 0;
        var _rtmp32355;
        this.spamMessageIds = [];
        var _etype2354 = 0;
        _rtmp32355 = input.readListBegin();
        _etype2354 = _rtmp32355.etype;
        _size2351 = _rtmp32355.size;
        for (var _i2356 = 0; _i2356 < _size2351; ++_i2356)
        {
          var elem2357 = null;
          elem2357 = input.readString().value;
          this.spamMessageIds.push(elem2357);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size2358 = 0;
        var _rtmp32362;
        this.spamMessages = [];
        var _etype2361 = 0;
        _rtmp32362 = input.readListBegin();
        _etype2361 = _rtmp32362.etype;
        _size2358 = _rtmp32362.size;
        for (var _i2363 = 0; _i2363 < _size2358; ++_i2363)
        {
          var elem2364 = null;
          elem2364 = input.readString().value;
          this.spamMessages.push(elem2364);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportSpam_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportSpam_args');
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.memberMids !== null && this.memberMids !== undefined) {
    output.writeFieldBegin('memberMids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.memberMids.length);
    for (var iter2365 in this.memberMids)
    {
      if (this.memberMids.hasOwnProperty(iter2365))
      {
        iter2365 = this.memberMids[iter2365];
        output.writeString(iter2365);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.spammerReasons !== null && this.spammerReasons !== undefined) {
    output.writeFieldBegin('spammerReasons', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.spammerReasons.length);
    for (var iter2366 in this.spammerReasons)
    {
      if (this.spammerReasons.hasOwnProperty(iter2366))
      {
        iter2366 = this.spammerReasons[iter2366];
        output.writeI32(iter2366);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.senderMids !== null && this.senderMids !== undefined) {
    output.writeFieldBegin('senderMids', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.senderMids.length);
    for (var iter2367 in this.senderMids)
    {
      if (this.senderMids.hasOwnProperty(iter2367))
      {
        iter2367 = this.senderMids[iter2367];
        output.writeString(iter2367);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.spamMessageIds !== null && this.spamMessageIds !== undefined) {
    output.writeFieldBegin('spamMessageIds', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.spamMessageIds.length);
    for (var iter2368 in this.spamMessageIds)
    {
      if (this.spamMessageIds.hasOwnProperty(iter2368))
      {
        iter2368 = this.spamMessageIds[iter2368];
        output.writeString(iter2368);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.spamMessages !== null && this.spamMessages !== undefined) {
    output.writeFieldBegin('spamMessages', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRING, this.spamMessages.length);
    for (var iter2369 in this.spamMessages)
    {
      if (this.spamMessages.hasOwnProperty(iter2369))
      {
        iter2369 = this.spamMessages[iter2369];
        output.writeString(iter2369);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reportSpam_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_reportSpam_result.prototype = {};
TalkService_reportSpam_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportSpam_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportSpam_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reportSpammer_args = function(args) {
  this.spammerMid = null;
  this.spammerReasons = null;
  this.spamMessageIds = null;
  if (args) {
    if (args.spammerMid !== undefined && args.spammerMid !== null) {
      this.spammerMid = args.spammerMid;
    }
    if (args.spammerReasons !== undefined && args.spammerReasons !== null) {
      this.spammerReasons = Thrift.copyList(args.spammerReasons, [null]);
    }
    if (args.spamMessageIds !== undefined && args.spamMessageIds !== null) {
      this.spamMessageIds = Thrift.copyList(args.spamMessageIds, [null]);
    }
  }
};
TalkService_reportSpammer_args.prototype = {};
TalkService_reportSpammer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.spammerMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2370 = 0;
        var _rtmp32374;
        this.spammerReasons = [];
        var _etype2373 = 0;
        _rtmp32374 = input.readListBegin();
        _etype2373 = _rtmp32374.etype;
        _size2370 = _rtmp32374.size;
        for (var _i2375 = 0; _i2375 < _size2370; ++_i2375)
        {
          var elem2376 = null;
          elem2376 = input.readI32().value;
          this.spammerReasons.push(elem2376);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size2377 = 0;
        var _rtmp32381;
        this.spamMessageIds = [];
        var _etype2380 = 0;
        _rtmp32381 = input.readListBegin();
        _etype2380 = _rtmp32381.etype;
        _size2377 = _rtmp32381.size;
        for (var _i2382 = 0; _i2382 < _size2377; ++_i2382)
        {
          var elem2383 = null;
          elem2383 = input.readString().value;
          this.spamMessageIds.push(elem2383);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportSpammer_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportSpammer_args');
  if (this.spammerMid !== null && this.spammerMid !== undefined) {
    output.writeFieldBegin('spammerMid', Thrift.Type.STRING, 2);
    output.writeString(this.spammerMid);
    output.writeFieldEnd();
  }
  if (this.spammerReasons !== null && this.spammerReasons !== undefined) {
    output.writeFieldBegin('spammerReasons', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.spammerReasons.length);
    for (var iter2384 in this.spammerReasons)
    {
      if (this.spammerReasons.hasOwnProperty(iter2384))
      {
        iter2384 = this.spammerReasons[iter2384];
        output.writeI32(iter2384);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.spamMessageIds !== null && this.spamMessageIds !== undefined) {
    output.writeFieldBegin('spamMessageIds', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.spamMessageIds.length);
    for (var iter2385 in this.spamMessageIds)
    {
      if (this.spamMessageIds.hasOwnProperty(iter2385))
      {
        iter2385 = this.spamMessageIds[iter2385];
        output.writeString(iter2385);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_reportSpammer_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_reportSpammer_result.prototype = {};
TalkService_reportSpammer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportSpammer_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportSpammer_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_requestAccountPasswordReset_args = function(args) {
  this.provider = null;
  this.identifier = null;
  this.locale = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
TalkService_requestAccountPasswordReset_args.prototype = {};
TalkService_requestAccountPasswordReset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_requestAccountPasswordReset_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_requestAccountPasswordReset_args');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 4);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 2);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 5);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_requestAccountPasswordReset_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_requestAccountPasswordReset_result.prototype = {};
TalkService_requestAccountPasswordReset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_requestAccountPasswordReset_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_requestAccountPasswordReset_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_requestEmailConfirmation_args = function(args) {
  this.emailConfirmation = null;
  if (args) {
    if (args.emailConfirmation !== undefined && args.emailConfirmation !== null) {
      this.emailConfirmation = new EmailConfirmation(args.emailConfirmation);
    }
  }
};
TalkService_requestEmailConfirmation_args.prototype = {};
TalkService_requestEmailConfirmation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.emailConfirmation = new EmailConfirmation();
        this.emailConfirmation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_requestEmailConfirmation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_requestEmailConfirmation_args');
  if (this.emailConfirmation !== null && this.emailConfirmation !== undefined) {
    output.writeFieldBegin('emailConfirmation', Thrift.Type.STRUCT, 2);
    this.emailConfirmation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_requestEmailConfirmation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new EmailConfirmationSession(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_requestEmailConfirmation_result.prototype = {};
TalkService_requestEmailConfirmation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new EmailConfirmationSession();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_requestEmailConfirmation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_requestEmailConfirmation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_requestIdentityUnbind_args = function(args) {
  this.provider = null;
  this.identifier = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
  }
};
TalkService_requestIdentityUnbind_args.prototype = {};
TalkService_requestIdentityUnbind_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_requestIdentityUnbind_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_requestIdentityUnbind_args');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 4);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 2);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_requestIdentityUnbind_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_requestIdentityUnbind_result.prototype = {};
TalkService_requestIdentityUnbind_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_requestIdentityUnbind_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_requestIdentityUnbind_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_resendEmailConfirmation_args = function(args) {
  this.verifier = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
  }
};
TalkService_resendEmailConfirmation_args.prototype = {};
TalkService_resendEmailConfirmation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_resendEmailConfirmation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_resendEmailConfirmation_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 2);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_resendEmailConfirmation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new EmailConfirmationSession(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_resendEmailConfirmation_result.prototype = {};
TalkService_resendEmailConfirmation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new EmailConfirmationSession();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_resendEmailConfirmation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_resendEmailConfirmation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_resendPinCode_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
TalkService_resendPinCode_args.prototype = {};
TalkService_resendPinCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_resendPinCode_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_resendPinCode_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_resendPinCode_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_resendPinCode_result.prototype = {};
TalkService_resendPinCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_resendPinCode_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_resendPinCode_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_resendPinCodeBySMS_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
TalkService_resendPinCodeBySMS_args.prototype = {};
TalkService_resendPinCodeBySMS_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_resendPinCodeBySMS_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_resendPinCodeBySMS_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_resendPinCodeBySMS_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_resendPinCodeBySMS_result.prototype = {};
TalkService_resendPinCodeBySMS_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_resendPinCodeBySMS_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_resendPinCodeBySMS_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendChatChecked_args = function(args) {
  this.seq = null;
  this.consumer = null;
  this.lastMessageId = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.consumer !== undefined && args.consumer !== null) {
      this.consumer = args.consumer;
    }
    if (args.lastMessageId !== undefined && args.lastMessageId !== null) {
      this.lastMessageId = args.lastMessageId;
    }
  }
};
TalkService_sendChatChecked_args.prototype = {};
TalkService_sendChatChecked_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.consumer = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lastMessageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendChatChecked_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendChatChecked_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.consumer !== null && this.consumer !== undefined) {
    output.writeFieldBegin('consumer', Thrift.Type.STRING, 2);
    output.writeString(this.consumer);
    output.writeFieldEnd();
  }
  if (this.lastMessageId !== null && this.lastMessageId !== undefined) {
    output.writeFieldBegin('lastMessageId', Thrift.Type.STRING, 3);
    output.writeString(this.lastMessageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendChatChecked_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_sendChatChecked_result.prototype = {};
TalkService_sendChatChecked_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendChatChecked_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendChatChecked_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendMessageAwaitCommit_args = function(args) {
  this.seq = null;
  this.message = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new Message(args.message);
    }
  }
};
TalkService_sendMessageAwaitCommit_args.prototype = {};
TalkService_sendMessageAwaitCommit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendMessageAwaitCommit_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendMessageAwaitCommit_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendMessageAwaitCommit_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new CommitMessageResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_sendMessageAwaitCommit_result.prototype = {};
TalkService_sendMessageAwaitCommit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new CommitMessageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendMessageAwaitCommit_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendMessageAwaitCommit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendChatRemoved_args = function(args) {
  this.seq = null;
  this.consumer = null;
  this.lastMessageId = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.consumer !== undefined && args.consumer !== null) {
      this.consumer = args.consumer;
    }
    if (args.lastMessageId !== undefined && args.lastMessageId !== null) {
      this.lastMessageId = args.lastMessageId;
    }
  }
};
TalkService_sendChatRemoved_args.prototype = {};
TalkService_sendChatRemoved_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.consumer = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lastMessageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendChatRemoved_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendChatRemoved_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.consumer !== null && this.consumer !== undefined) {
    output.writeFieldBegin('consumer', Thrift.Type.STRING, 2);
    output.writeString(this.consumer);
    output.writeFieldEnd();
  }
  if (this.lastMessageId !== null && this.lastMessageId !== undefined) {
    output.writeFieldBegin('lastMessageId', Thrift.Type.STRING, 3);
    output.writeString(this.lastMessageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendChatRemoved_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_sendChatRemoved_result.prototype = {};
TalkService_sendChatRemoved_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendChatRemoved_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendChatRemoved_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendContentPreviewUpdated_args = function(args) {
  this.esq = null;
  this.messageId = null;
  this.receiverMids = null;
  if (args) {
    if (args.esq !== undefined && args.esq !== null) {
      this.esq = args.esq;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.receiverMids !== undefined && args.receiverMids !== null) {
      this.receiverMids = Thrift.copyList(args.receiverMids, [null]);
    }
  }
};
TalkService_sendContentPreviewUpdated_args.prototype = {};
TalkService_sendContentPreviewUpdated_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.esq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2386 = 0;
        var _rtmp32390;
        this.receiverMids = [];
        var _etype2389 = 0;
        _rtmp32390 = input.readListBegin();
        _etype2389 = _rtmp32390.etype;
        _size2386 = _rtmp32390.size;
        for (var _i2391 = 0; _i2391 < _size2386; ++_i2391)
        {
          var elem2392 = null;
          elem2392 = input.readString().value;
          this.receiverMids.push(elem2392);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendContentPreviewUpdated_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendContentPreviewUpdated_args');
  if (this.esq !== null && this.esq !== undefined) {
    output.writeFieldBegin('esq', Thrift.Type.I32, 1);
    output.writeI32(this.esq);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.receiverMids !== null && this.receiverMids !== undefined) {
    output.writeFieldBegin('receiverMids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.receiverMids.length);
    for (var iter2393 in this.receiverMids)
    {
      if (this.receiverMids.hasOwnProperty(iter2393))
      {
        iter2393 = this.receiverMids[iter2393];
        output.writeString(iter2393);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendContentPreviewUpdated_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_sendContentPreviewUpdated_result.prototype = {};
TalkService_sendContentPreviewUpdated_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size2394 = 0;
        var _rtmp32398;
        this.success = {};
        var _ktype2395 = 0;
        var _vtype2396 = 0;
        _rtmp32398 = input.readMapBegin();
        _ktype2395 = _rtmp32398.ktype;
        _vtype2396 = _rtmp32398.vtype;
        _size2394 = _rtmp32398.size;
        for (var _i2399 = 0; _i2399 < _size2394; ++_i2399)
        {
          if (_i2399 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key2400 = null;
          var val2401 = null;
          key2400 = input.readString().value;
          val2401 = input.readString().value;
          this.success[key2400] = val2401;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendContentPreviewUpdated_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendContentPreviewUpdated_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter2402 in this.success)
    {
      if (this.success.hasOwnProperty(kiter2402))
      {
        var viter2403 = this.success[kiter2402];
        output.writeString(kiter2402);
        output.writeString(viter2403);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendContentReceipt_args = function(args) {
  this.seq = null;
  this.consumer = null;
  this.messageId = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.consumer !== undefined && args.consumer !== null) {
      this.consumer = args.consumer;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
TalkService_sendContentReceipt_args.prototype = {};
TalkService_sendContentReceipt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.consumer = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendContentReceipt_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendContentReceipt_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.consumer !== null && this.consumer !== undefined) {
    output.writeFieldBegin('consumer', Thrift.Type.STRING, 2);
    output.writeString(this.consumer);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 3);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendContentReceipt_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_sendContentReceipt_result.prototype = {};
TalkService_sendContentReceipt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendContentReceipt_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendContentReceipt_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendDummyPush_args = function(args) {
};
TalkService_sendDummyPush_args.prototype = {};
TalkService_sendDummyPush_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendDummyPush_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendDummyPush_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendDummyPush_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_sendDummyPush_result.prototype = {};
TalkService_sendDummyPush_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendDummyPush_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendDummyPush_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_removeE2EEPublicKey_args = function(args) {
  this.publicKey = null;
  if (args) {
    if (args.publicKey !== undefined && args.publicKey !== null) {
      this.publicKey = new E2EEPublicKey(args.publicKey);
    }
  }
};
TalkService_removeE2EEPublicKey_args.prototype = {};
TalkService_removeE2EEPublicKey_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.publicKey = new E2EEPublicKey();
        this.publicKey.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeE2EEPublicKey_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeE2EEPublicKey_args');
  if (this.publicKey !== null && this.publicKey !== undefined) {
    output.writeFieldBegin('publicKey', Thrift.Type.STRUCT, 2);
    this.publicKey.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_removeE2EEPublicKey_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_removeE2EEPublicKey_result.prototype = {};
TalkService_removeE2EEPublicKey_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeE2EEPublicKey_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeE2EEPublicKey_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_negotiateE2EEPublicKey_args = function(args) {
  this.mid = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
TalkService_negotiateE2EEPublicKey_args.prototype = {};
TalkService_negotiateE2EEPublicKey_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_negotiateE2EEPublicKey_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_negotiateE2EEPublicKey_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_negotiateE2EEPublicKey_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new E2EENegotiationResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_negotiateE2EEPublicKey_result.prototype = {};
TalkService_negotiateE2EEPublicKey_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new E2EENegotiationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_negotiateE2EEPublicKey_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_negotiateE2EEPublicKey_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getE2EEPublicKey_args = function(args) {
  this.mid = null;
  this.version = null;
  this.keyId = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.keyId !== undefined && args.keyId !== null) {
      this.keyId = args.keyId;
    }
  }
};
TalkService_getE2EEPublicKey_args.prototype = {};
TalkService_getE2EEPublicKey_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.keyId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getE2EEPublicKey_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getE2EEPublicKey_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 3);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.keyId !== null && this.keyId !== undefined) {
    output.writeFieldBegin('keyId', Thrift.Type.I32, 4);
    output.writeI32(this.keyId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getE2EEPublicKey_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new E2EEPublicKey(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getE2EEPublicKey_result.prototype = {};
TalkService_getE2EEPublicKey_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new E2EEPublicKey();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getE2EEPublicKey_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getE2EEPublicKey_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_requestE2EEKeyExchange_args = function(args) {
  this.reqSeq = null;
  this.temporalPublicKey = null;
  this.publicKey = null;
  this.verifier = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.temporalPublicKey !== undefined && args.temporalPublicKey !== null) {
      this.temporalPublicKey = args.temporalPublicKey;
    }
    if (args.publicKey !== undefined && args.publicKey !== null) {
      this.publicKey = new E2EEPublicKey(args.publicKey);
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
  }
};
TalkService_requestE2EEKeyExchange_args.prototype = {};
TalkService_requestE2EEKeyExchange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.temporalPublicKey = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.publicKey = new E2EEPublicKey();
        this.publicKey.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_requestE2EEKeyExchange_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_requestE2EEKeyExchange_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.temporalPublicKey !== null && this.temporalPublicKey !== undefined) {
    output.writeFieldBegin('temporalPublicKey', Thrift.Type.STRING, 2);
    output.writeBinary(this.temporalPublicKey);
    output.writeFieldEnd();
  }
  if (this.publicKey !== null && this.publicKey !== undefined) {
    output.writeFieldBegin('publicKey', Thrift.Type.STRUCT, 3);
    this.publicKey.write(output);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 4);
    output.writeBinary(this.verifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_requestE2EEKeyExchange_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_requestE2EEKeyExchange_result.prototype = {};
TalkService_requestE2EEKeyExchange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_requestE2EEKeyExchange_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_requestE2EEKeyExchange_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getLastE2EEPublicKeys_args = function(args) {
  this.chatMid = null;
  if (args) {
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
  }
};
TalkService_getLastE2EEPublicKeys_args.prototype = {};
TalkService_getLastE2EEPublicKeys_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getLastE2EEPublicKeys_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getLastE2EEPublicKeys_args');
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getLastE2EEPublicKeys_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [E2EEPublicKey]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getLastE2EEPublicKeys_result.prototype = {};
TalkService_getLastE2EEPublicKeys_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size2404 = 0;
        var _rtmp32408;
        this.success = {};
        var _ktype2405 = 0;
        var _vtype2406 = 0;
        _rtmp32408 = input.readMapBegin();
        _ktype2405 = _rtmp32408.ktype;
        _vtype2406 = _rtmp32408.vtype;
        _size2404 = _rtmp32408.size;
        for (var _i2409 = 0; _i2409 < _size2404; ++_i2409)
        {
          if (_i2409 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key2410 = null;
          var val2411 = null;
          key2410 = input.readString().value;
          val2411 = new E2EEPublicKey();
          val2411.read(input);
          this.success[key2410] = val2411;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getLastE2EEPublicKeys_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getLastE2EEPublicKeys_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter2412 in this.success)
    {
      if (this.success.hasOwnProperty(kiter2412))
      {
        var viter2413 = this.success[kiter2412];
        output.writeString(kiter2412);
        viter2413.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerE2EEPublicKey_args = function(args) {
  this.reqSeq = null;
  this.publicKey = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.publicKey !== undefined && args.publicKey !== null) {
      this.publicKey = new E2EEPublicKey(args.publicKey);
    }
  }
};
TalkService_registerE2EEPublicKey_args.prototype = {};
TalkService_registerE2EEPublicKey_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.publicKey = new E2EEPublicKey();
        this.publicKey.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerE2EEPublicKey_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerE2EEPublicKey_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.publicKey !== null && this.publicKey !== undefined) {
    output.writeFieldBegin('publicKey', Thrift.Type.STRUCT, 2);
    this.publicKey.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_registerE2EEPublicKey_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new E2EEPublicKey(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerE2EEPublicKey_result.prototype = {};
TalkService_registerE2EEPublicKey_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new E2EEPublicKey();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerE2EEPublicKey_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerE2EEPublicKey_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getE2EEPublicKeys_args = function(args) {
};
TalkService_getE2EEPublicKeys_args.prototype = {};
TalkService_getE2EEPublicKeys_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getE2EEPublicKeys_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getE2EEPublicKeys_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getE2EEPublicKeys_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [E2EEPublicKey]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getE2EEPublicKeys_result.prototype = {};
TalkService_getE2EEPublicKeys_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2414 = 0;
        var _rtmp32418;
        this.success = [];
        var _etype2417 = 0;
        _rtmp32418 = input.readListBegin();
        _etype2417 = _rtmp32418.etype;
        _size2414 = _rtmp32418.size;
        for (var _i2419 = 0; _i2419 < _size2414; ++_i2419)
        {
          var elem2420 = null;
          elem2420 = new E2EEPublicKey();
          elem2420.read(input);
          this.success.push(elem2420);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getE2EEPublicKeys_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getE2EEPublicKeys_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2421 in this.success)
    {
      if (this.success.hasOwnProperty(iter2421))
      {
        iter2421 = this.success[iter2421];
        iter2421.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getE2EEPublicKeysEx_args = function(args) {
  this.ignoreE2EEStatus = null;
  if (args) {
    if (args.ignoreE2EEStatus !== undefined && args.ignoreE2EEStatus !== null) {
      this.ignoreE2EEStatus = args.ignoreE2EEStatus;
    }
  }
};
TalkService_getE2EEPublicKeysEx_args.prototype = {};
TalkService_getE2EEPublicKeysEx_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.ignoreE2EEStatus = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getE2EEPublicKeysEx_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getE2EEPublicKeysEx_args');
  if (this.ignoreE2EEStatus !== null && this.ignoreE2EEStatus !== undefined) {
    output.writeFieldBegin('ignoreE2EEStatus', Thrift.Type.BOOL, 2);
    output.writeBool(this.ignoreE2EEStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getE2EEPublicKeysEx_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [E2EEPublicKey]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getE2EEPublicKeysEx_result.prototype = {};
TalkService_getE2EEPublicKeysEx_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2422 = 0;
        var _rtmp32426;
        this.success = [];
        var _etype2425 = 0;
        _rtmp32426 = input.readListBegin();
        _etype2425 = _rtmp32426.etype;
        _size2422 = _rtmp32426.size;
        for (var _i2427 = 0; _i2427 < _size2422; ++_i2427)
        {
          var elem2428 = null;
          elem2428 = new E2EEPublicKey();
          elem2428.read(input);
          this.success.push(elem2428);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getE2EEPublicKeysEx_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getE2EEPublicKeysEx_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2429 in this.success)
    {
      if (this.success.hasOwnProperty(iter2429))
      {
        iter2429 = this.success[iter2429];
        iter2429.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getReadMessageOpsInBulk_args = function(args) {
  this.chatIds = null;
  if (args) {
    if (args.chatIds !== undefined && args.chatIds !== null) {
      this.chatIds = Thrift.copyList(args.chatIds, [null]);
    }
  }
};
TalkService_getReadMessageOpsInBulk_args.prototype = {};
TalkService_getReadMessageOpsInBulk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2430 = 0;
        var _rtmp32434;
        this.chatIds = [];
        var _etype2433 = 0;
        _rtmp32434 = input.readListBegin();
        _etype2433 = _rtmp32434.etype;
        _size2430 = _rtmp32434.size;
        for (var _i2435 = 0; _i2435 < _size2430; ++_i2435)
        {
          var elem2436 = null;
          elem2436 = input.readString().value;
          this.chatIds.push(elem2436);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getReadMessageOpsInBulk_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getReadMessageOpsInBulk_args');
  if (this.chatIds !== null && this.chatIds !== undefined) {
    output.writeFieldBegin('chatIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.chatIds.length);
    for (var iter2437 in this.chatIds)
    {
      if (this.chatIds.hasOwnProperty(iter2437))
      {
        iter2437 = this.chatIds[iter2437];
        output.writeString(iter2437);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getReadMessageOpsInBulk_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Operation]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getReadMessageOpsInBulk_result.prototype = {};
TalkService_getReadMessageOpsInBulk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2438 = 0;
        var _rtmp32442;
        this.success = [];
        var _etype2441 = 0;
        _rtmp32442 = input.readListBegin();
        _etype2441 = _rtmp32442.etype;
        _size2438 = _rtmp32442.size;
        for (var _i2443 = 0; _i2443 < _size2438; ++_i2443)
        {
          var elem2444 = null;
          elem2444 = new Operation();
          elem2444.read(input);
          this.success.push(elem2444);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getReadMessageOpsInBulk_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getReadMessageOpsInBulk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2445 in this.success)
    {
      if (this.success.hasOwnProperty(iter2445))
      {
        iter2445 = this.success[iter2445];
        iter2445.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendEvent_args = function(args) {
  this.seq = null;
  this.message = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new Message(args.message);
    }
  }
};
TalkService_sendEvent_args.prototype = {};
TalkService_sendEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendEvent_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendEvent_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendEvent_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Message(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_sendEvent_result.prototype = {};
TalkService_sendEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Message();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendEvent_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendEvent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendMessage_args = function(args) {
  this.seq = null;
  this.message = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new Message(args.message);
    }
  }
};
TalkService_sendMessage_args.prototype = {};
TalkService_sendMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendMessage_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendMessage_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendMessage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Message(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_sendMessage_result.prototype = {};
TalkService_sendMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Message();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendMessage_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendMessageIgnored_args = function(args) {
  this.seq = null;
  this.consumer = null;
  this.messageIds = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.consumer !== undefined && args.consumer !== null) {
      this.consumer = args.consumer;
    }
    if (args.messageIds !== undefined && args.messageIds !== null) {
      this.messageIds = Thrift.copyList(args.messageIds, [null]);
    }
  }
};
TalkService_sendMessageIgnored_args.prototype = {};
TalkService_sendMessageIgnored_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.consumer = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2446 = 0;
        var _rtmp32450;
        this.messageIds = [];
        var _etype2449 = 0;
        _rtmp32450 = input.readListBegin();
        _etype2449 = _rtmp32450.etype;
        _size2446 = _rtmp32450.size;
        for (var _i2451 = 0; _i2451 < _size2446; ++_i2451)
        {
          var elem2452 = null;
          elem2452 = input.readString().value;
          this.messageIds.push(elem2452);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendMessageIgnored_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendMessageIgnored_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.consumer !== null && this.consumer !== undefined) {
    output.writeFieldBegin('consumer', Thrift.Type.STRING, 2);
    output.writeString(this.consumer);
    output.writeFieldEnd();
  }
  if (this.messageIds !== null && this.messageIds !== undefined) {
    output.writeFieldBegin('messageIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.messageIds.length);
    for (var iter2453 in this.messageIds)
    {
      if (this.messageIds.hasOwnProperty(iter2453))
      {
        iter2453 = this.messageIds[iter2453];
        output.writeString(iter2453);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendMessageIgnored_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_sendMessageIgnored_result.prototype = {};
TalkService_sendMessageIgnored_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendMessageIgnored_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendMessageIgnored_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendMessageReceipt_args = function(args) {
  this.seq = null;
  this.consumer = null;
  this.messageIds = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.consumer !== undefined && args.consumer !== null) {
      this.consumer = args.consumer;
    }
    if (args.messageIds !== undefined && args.messageIds !== null) {
      this.messageIds = Thrift.copyList(args.messageIds, [null]);
    }
  }
};
TalkService_sendMessageReceipt_args.prototype = {};
TalkService_sendMessageReceipt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.consumer = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2454 = 0;
        var _rtmp32458;
        this.messageIds = [];
        var _etype2457 = 0;
        _rtmp32458 = input.readListBegin();
        _etype2457 = _rtmp32458.etype;
        _size2454 = _rtmp32458.size;
        for (var _i2459 = 0; _i2459 < _size2454; ++_i2459)
        {
          var elem2460 = null;
          elem2460 = input.readString().value;
          this.messageIds.push(elem2460);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendMessageReceipt_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendMessageReceipt_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.consumer !== null && this.consumer !== undefined) {
    output.writeFieldBegin('consumer', Thrift.Type.STRING, 2);
    output.writeString(this.consumer);
    output.writeFieldEnd();
  }
  if (this.messageIds !== null && this.messageIds !== undefined) {
    output.writeFieldBegin('messageIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.messageIds.length);
    for (var iter2461 in this.messageIds)
    {
      if (this.messageIds.hasOwnProperty(iter2461))
      {
        iter2461 = this.messageIds[iter2461];
        output.writeString(iter2461);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendMessageReceipt_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_sendMessageReceipt_result.prototype = {};
TalkService_sendMessageReceipt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendMessageReceipt_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendMessageReceipt_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findContactByMetaTag_args = function(args) {
  this.userid = null;
  this.reference = null;
  if (args) {
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
    if (args.reference !== undefined && args.reference !== null) {
      this.reference = args.reference;
    }
  }
};
TalkService_findContactByMetaTag_args.prototype = {};
TalkService_findContactByMetaTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reference = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactByMetaTag_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactByMetaTag_args');
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 2);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  if (this.reference !== null && this.reference !== undefined) {
    output.writeFieldBegin('reference', Thrift.Type.STRING, 3);
    output.writeString(this.reference);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_findContactByMetaTag_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Contact(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findContactByMetaTag_result.prototype = {};
TalkService_findContactByMetaTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Contact();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactByMetaTag_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactByMetaTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendMessageToMyHome_args = function(args) {
  this.seq = null;
  this.message = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new Message(args.message);
    }
  }
};
TalkService_sendMessageToMyHome_args.prototype = {};
TalkService_sendMessageToMyHome_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendMessageToMyHome_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendMessageToMyHome_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_sendMessageToMyHome_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Message(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_sendMessageToMyHome_result.prototype = {};
TalkService_sendMessageToMyHome_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Message();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendMessageToMyHome_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendMessageToMyHome_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_setBuddyLocation_args = function(args) {
  this.mid = null;
  this.index = null;
  this.location = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new Geolocation(args.location);
    }
  }
};
TalkService_setBuddyLocation_args.prototype = {};
TalkService_setBuddyLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new Geolocation();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_setBuddyLocation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_setBuddyLocation_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 3);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 4);
    this.location.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_setBuddyLocation_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_setBuddyLocation_result.prototype = {};
TalkService_setBuddyLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_setBuddyLocation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_setBuddyLocation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_setIdentityCredential_args = function(args) {
  this.identifier = null;
  this.verifier = null;
  this.provider = null;
  if (args) {
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
  }
};
TalkService_setIdentityCredential_args.prototype = {};
TalkService_setIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_setIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_setIdentityCredential_args');
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 2);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 3);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 4);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_setIdentityCredential_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_setIdentityCredential_result.prototype = {};
TalkService_setIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_setIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_setIdentityCredential_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_setNotificationsEnabled_args = function(args) {
  this.reqSeq = null;
  this.type = null;
  this.target = null;
  this.enablement = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.target !== undefined && args.target !== null) {
      this.target = args.target;
    }
    if (args.enablement !== undefined && args.enablement !== null) {
      this.enablement = args.enablement;
    }
  }
};
TalkService_setNotificationsEnabled_args.prototype = {};
TalkService_setNotificationsEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.target = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.enablement = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_setNotificationsEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_setNotificationsEnabled_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRING, 3);
    output.writeString(this.target);
    output.writeFieldEnd();
  }
  if (this.enablement !== null && this.enablement !== undefined) {
    output.writeFieldBegin('enablement', Thrift.Type.BOOL, 4);
    output.writeBool(this.enablement);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_setNotificationsEnabled_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_setNotificationsEnabled_result.prototype = {};
TalkService_setNotificationsEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_setNotificationsEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_setNotificationsEnabled_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_startUpdateVerification_args = function(args) {
  this.region = null;
  this.carrier = null;
  this.phone = null;
  this.udidHash = null;
  this.deviceInfo = null;
  this.networkCode = null;
  this.locale = null;
  if (args) {
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.carrier !== undefined && args.carrier !== null) {
      this.carrier = args.carrier;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new DeviceInfo(args.deviceInfo);
    }
    if (args.networkCode !== undefined && args.networkCode !== null) {
      this.networkCode = args.networkCode;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
TalkService_startUpdateVerification_args.prototype = {};
TalkService_startUpdateVerification_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.carrier = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.networkCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_startUpdateVerification_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_startUpdateVerification_args');
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 2);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.carrier !== null && this.carrier !== undefined) {
    output.writeFieldBegin('carrier', Thrift.Type.I32, 3);
    output.writeI32(this.carrier);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 4);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 5);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 6);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.networkCode !== null && this.networkCode !== undefined) {
    output.writeFieldBegin('networkCode', Thrift.Type.STRING, 7);
    output.writeString(this.networkCode);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 8);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_startUpdateVerification_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new VerificationSessionData(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_startUpdateVerification_result.prototype = {};
TalkService_startUpdateVerification_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new VerificationSessionData();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_startUpdateVerification_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_startUpdateVerification_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_startVerification_args = function(args) {
  this.region = null;
  this.carrier = null;
  this.phone = null;
  this.udidHash = null;
  this.deviceInfo = null;
  this.networkCode = null;
  this.mid = null;
  this.locale = null;
  this.simInfo = null;
  this.oldUdidHash = null;
  if (args) {
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.carrier !== undefined && args.carrier !== null) {
      this.carrier = args.carrier;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new DeviceInfo(args.deviceInfo);
    }
    if (args.networkCode !== undefined && args.networkCode !== null) {
      this.networkCode = args.networkCode;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
    if (args.simInfo !== undefined && args.simInfo !== null) {
      this.simInfo = new SIMInfo(args.simInfo);
    }
    if (args.oldUdidHash !== undefined && args.oldUdidHash !== null) {
      this.oldUdidHash = args.oldUdidHash;
    }
  }
};
TalkService_startVerification_args.prototype = {};
TalkService_startVerification_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.carrier = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.networkCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.simInfo = new SIMInfo();
        this.simInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.oldUdidHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_startVerification_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_startVerification_args');
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 2);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.carrier !== null && this.carrier !== undefined) {
    output.writeFieldBegin('carrier', Thrift.Type.I32, 3);
    output.writeI32(this.carrier);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 4);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 5);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 6);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.networkCode !== null && this.networkCode !== undefined) {
    output.writeFieldBegin('networkCode', Thrift.Type.STRING, 7);
    output.writeString(this.networkCode);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 8);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 9);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  if (this.simInfo !== null && this.simInfo !== undefined) {
    output.writeFieldBegin('simInfo', Thrift.Type.STRUCT, 10);
    this.simInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.oldUdidHash !== null && this.oldUdidHash !== undefined) {
    output.writeFieldBegin('oldUdidHash', Thrift.Type.STRING, 11);
    output.writeString(this.oldUdidHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_startVerification_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new VerificationSessionData(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_startVerification_result.prototype = {};
TalkService_startVerification_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new VerificationSessionData();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_startVerification_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_startVerification_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateGroupPreferenceAttribute_args = function(args) {
  this.reqSeq = null;
  this.groupMid = null;
  this.updatedAttrs = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupMid !== undefined && args.groupMid !== null) {
      this.groupMid = args.groupMid;
    }
    if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
      this.updatedAttrs = Thrift.copyMap(args.updatedAttrs, [null]);
    }
  }
};
TalkService_updateGroupPreferenceAttribute_args.prototype = {};
TalkService_updateGroupPreferenceAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size2462 = 0;
        var _rtmp32466;
        this.updatedAttrs = {};
        var _ktype2463 = 0;
        var _vtype2464 = 0;
        _rtmp32466 = input.readMapBegin();
        _ktype2463 = _rtmp32466.ktype;
        _vtype2464 = _rtmp32466.vtype;
        _size2462 = _rtmp32466.size;
        for (var _i2467 = 0; _i2467 < _size2462; ++_i2467)
        {
          if (_i2467 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key2468 = null;
          var val2469 = null;
          key2468 = input.readI32().value;
          val2469 = input.readString().value;
          this.updatedAttrs[key2468] = val2469;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateGroupPreferenceAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateGroupPreferenceAttribute_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupMid !== null && this.groupMid !== undefined) {
    output.writeFieldBegin('groupMid', Thrift.Type.STRING, 2);
    output.writeString(this.groupMid);
    output.writeFieldEnd();
  }
  if (this.updatedAttrs !== null && this.updatedAttrs !== undefined) {
    output.writeFieldBegin('updatedAttrs', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.updatedAttrs));
    for (var kiter2470 in this.updatedAttrs)
    {
      if (this.updatedAttrs.hasOwnProperty(kiter2470))
      {
        var viter2471 = this.updatedAttrs[kiter2470];
        output.writeI32(kiter2470);
        output.writeString(viter2471);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateGroupPreferenceAttribute_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateGroupPreferenceAttribute_result.prototype = {};
TalkService_updateGroupPreferenceAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateGroupPreferenceAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateGroupPreferenceAttribute_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_createRoomV2_args = function(args) {
  this.reqSeq = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
TalkService_createRoomV2_args.prototype = {};
TalkService_createRoomV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2472 = 0;
        var _rtmp32476;
        this.contactIds = [];
        var _etype2475 = 0;
        _rtmp32476 = input.readListBegin();
        _etype2475 = _rtmp32476.etype;
        _size2472 = _rtmp32476.size;
        for (var _i2477 = 0; _i2477 < _size2472; ++_i2477)
        {
          var elem2478 = null;
          elem2478 = input.readString().value;
          this.contactIds.push(elem2478);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createRoomV2_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createRoomV2_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter2479 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter2479))
      {
        iter2479 = this.contactIds[iter2479];
        output.writeString(iter2479);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_createRoomV2_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Room(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_createRoomV2_result.prototype = {};
TalkService_createRoomV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Room();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createRoomV2_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createRoomV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_storeUpdateProfileAttribute_args = function(args) {
  this.seq = null;
  this.profileAttribute = null;
  this.value = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.profileAttribute !== undefined && args.profileAttribute !== null) {
      this.profileAttribute = args.profileAttribute;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TalkService_storeUpdateProfileAttribute_args.prototype = {};
TalkService_storeUpdateProfileAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.profileAttribute = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_storeUpdateProfileAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_storeUpdateProfileAttribute_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.profileAttribute !== null && this.profileAttribute !== undefined) {
    output.writeFieldBegin('profileAttribute', Thrift.Type.I32, 2);
    output.writeI32(this.profileAttribute);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_storeUpdateProfileAttribute_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_storeUpdateProfileAttribute_result.prototype = {};
TalkService_storeUpdateProfileAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_storeUpdateProfileAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_storeUpdateProfileAttribute_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_syncContactBySnsIds_args = function(args) {
  this.reqSeq = null;
  this.modifications = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.modifications !== undefined && args.modifications !== null) {
      this.modifications = Thrift.copyList(args.modifications, [SnsFriendModification]);
    }
  }
};
TalkService_syncContactBySnsIds_args.prototype = {};
TalkService_syncContactBySnsIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2480 = 0;
        var _rtmp32484;
        this.modifications = [];
        var _etype2483 = 0;
        _rtmp32484 = input.readListBegin();
        _etype2483 = _rtmp32484.etype;
        _size2480 = _rtmp32484.size;
        for (var _i2485 = 0; _i2485 < _size2480; ++_i2485)
        {
          var elem2486 = null;
          elem2486 = new SnsFriendModification();
          elem2486.read(input);
          this.modifications.push(elem2486);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_syncContactBySnsIds_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_syncContactBySnsIds_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.modifications !== null && this.modifications !== undefined) {
    output.writeFieldBegin('modifications', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.modifications.length);
    for (var iter2487 in this.modifications)
    {
      if (this.modifications.hasOwnProperty(iter2487))
      {
        iter2487 = this.modifications[iter2487];
        iter2487.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_syncContactBySnsIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SnsFriendContactRegistration]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_syncContactBySnsIds_result.prototype = {};
TalkService_syncContactBySnsIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2488 = 0;
        var _rtmp32492;
        this.success = [];
        var _etype2491 = 0;
        _rtmp32492 = input.readListBegin();
        _etype2491 = _rtmp32492.etype;
        _size2488 = _rtmp32492.size;
        for (var _i2493 = 0; _i2493 < _size2488; ++_i2493)
        {
          var elem2494 = null;
          elem2494 = new SnsFriendContactRegistration();
          elem2494.read(input);
          this.success.push(elem2494);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_syncContactBySnsIds_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_syncContactBySnsIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2495 in this.success)
    {
      if (this.success.hasOwnProperty(iter2495))
      {
        iter2495 = this.success[iter2495];
        iter2495.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_syncContacts_args = function(args) {
  this.reqSeq = null;
  this.localContacts = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.localContacts !== undefined && args.localContacts !== null) {
      this.localContacts = Thrift.copyList(args.localContacts, [ContactModification]);
    }
  }
};
TalkService_syncContacts_args.prototype = {};
TalkService_syncContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2496 = 0;
        var _rtmp32500;
        this.localContacts = [];
        var _etype2499 = 0;
        _rtmp32500 = input.readListBegin();
        _etype2499 = _rtmp32500.etype;
        _size2496 = _rtmp32500.size;
        for (var _i2501 = 0; _i2501 < _size2496; ++_i2501)
        {
          var elem2502 = null;
          elem2502 = new ContactModification();
          elem2502.read(input);
          this.localContacts.push(elem2502);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_syncContacts_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_syncContacts_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.localContacts !== null && this.localContacts !== undefined) {
    output.writeFieldBegin('localContacts', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.localContacts.length);
    for (var iter2503 in this.localContacts)
    {
      if (this.localContacts.hasOwnProperty(iter2503))
      {
        iter2503 = this.localContacts[iter2503];
        iter2503.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_syncContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ContactRegistration]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_syncContacts_result.prototype = {};
TalkService_syncContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size2504 = 0;
        var _rtmp32508;
        this.success = {};
        var _ktype2505 = 0;
        var _vtype2506 = 0;
        _rtmp32508 = input.readMapBegin();
        _ktype2505 = _rtmp32508.ktype;
        _vtype2506 = _rtmp32508.vtype;
        _size2504 = _rtmp32508.size;
        for (var _i2509 = 0; _i2509 < _size2504; ++_i2509)
        {
          if (_i2509 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key2510 = null;
          var val2511 = null;
          key2510 = input.readString().value;
          val2511 = new ContactRegistration();
          val2511.read(input);
          this.success[key2510] = val2511;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_syncContacts_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_syncContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter2512 in this.success)
    {
      if (this.success.hasOwnProperty(kiter2512))
      {
        var viter2513 = this.success[kiter2512];
        output.writeString(kiter2512);
        viter2513.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_trySendMessage_args = function(args) {
  this.seq = null;
  this.message = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new Message(args.message);
    }
  }
};
TalkService_trySendMessage_args.prototype = {};
TalkService_trySendMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_trySendMessage_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_trySendMessage_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_trySendMessage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Message(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_trySendMessage_result.prototype = {};
TalkService_trySendMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Message();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_trySendMessage_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_trySendMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getNextMessagesV2_args = function(args) {
  this.messageBoxId = null;
  this.startMessageId = null;
  this.messagesCount = null;
  if (args) {
    if (args.messageBoxId !== undefined && args.messageBoxId !== null) {
      this.messageBoxId = args.messageBoxId;
    }
    if (args.startMessageId !== undefined && args.startMessageId !== null) {
      this.startMessageId = new MessageBoxV2MessageId(args.startMessageId);
    }
    if (args.messagesCount !== undefined && args.messagesCount !== null) {
      this.messagesCount = args.messagesCount;
    }
  }
};
TalkService_getNextMessagesV2_args.prototype = {};
TalkService_getNextMessagesV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageBoxId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.startMessageId = new MessageBoxV2MessageId();
        this.startMessageId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.messagesCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getNextMessagesV2_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getNextMessagesV2_args');
  if (this.messageBoxId !== null && this.messageBoxId !== undefined) {
    output.writeFieldBegin('messageBoxId', Thrift.Type.STRING, 2);
    output.writeString(this.messageBoxId);
    output.writeFieldEnd();
  }
  if (this.startMessageId !== null && this.startMessageId !== undefined) {
    output.writeFieldBegin('startMessageId', Thrift.Type.STRUCT, 3);
    this.startMessageId.write(output);
    output.writeFieldEnd();
  }
  if (this.messagesCount !== null && this.messagesCount !== undefined) {
    output.writeFieldBegin('messagesCount', Thrift.Type.I32, 4);
    output.writeI32(this.messagesCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getNextMessagesV2_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Message]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getNextMessagesV2_result.prototype = {};
TalkService_getNextMessagesV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2514 = 0;
        var _rtmp32518;
        this.success = [];
        var _etype2517 = 0;
        _rtmp32518 = input.readListBegin();
        _etype2517 = _rtmp32518.etype;
        _size2514 = _rtmp32518.size;
        for (var _i2519 = 0; _i2519 < _size2514; ++_i2519)
        {
          var elem2520 = null;
          elem2520 = new Message();
          elem2520.read(input);
          this.success.push(elem2520);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getNextMessagesV2_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getNextMessagesV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2521 in this.success)
    {
      if (this.success.hasOwnProperty(iter2521))
      {
        iter2521 = this.success[iter2521];
        iter2521.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageBoxCompactWrapUpV2_args = function(args) {
  this.messageBoxId = null;
  if (args) {
    if (args.messageBoxId !== undefined && args.messageBoxId !== null) {
      this.messageBoxId = args.messageBoxId;
    }
  }
};
TalkService_getMessageBoxCompactWrapUpV2_args.prototype = {};
TalkService_getMessageBoxCompactWrapUpV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageBoxId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageBoxCompactWrapUpV2_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageBoxCompactWrapUpV2_args');
  if (this.messageBoxId !== null && this.messageBoxId !== undefined) {
    output.writeFieldBegin('messageBoxId', Thrift.Type.STRING, 2);
    output.writeString(this.messageBoxId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getMessageBoxCompactWrapUpV2_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TMessageBoxWrapUp(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getMessageBoxCompactWrapUpV2_result.prototype = {};
TalkService_getMessageBoxCompactWrapUpV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TMessageBoxWrapUp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getMessageBoxCompactWrapUpV2_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getMessageBoxCompactWrapUpV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getRecentMessagesV2_args = function(args) {
  this.messageBoxId = null;
  this.messagesCount = null;
  if (args) {
    if (args.messageBoxId !== undefined && args.messageBoxId !== null) {
      this.messageBoxId = args.messageBoxId;
    }
    if (args.messagesCount !== undefined && args.messagesCount !== null) {
      this.messagesCount = args.messagesCount;
    }
  }
};
TalkService_getRecentMessagesV2_args.prototype = {};
TalkService_getRecentMessagesV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageBoxId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.messagesCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRecentMessagesV2_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRecentMessagesV2_args');
  if (this.messageBoxId !== null && this.messageBoxId !== undefined) {
    output.writeFieldBegin('messageBoxId', Thrift.Type.STRING, 2);
    output.writeString(this.messageBoxId);
    output.writeFieldEnd();
  }
  if (this.messagesCount !== null && this.messagesCount !== undefined) {
    output.writeFieldBegin('messagesCount', Thrift.Type.I32, 3);
    output.writeI32(this.messagesCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_getRecentMessagesV2_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Message]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getRecentMessagesV2_result.prototype = {};
TalkService_getRecentMessagesV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2522 = 0;
        var _rtmp32526;
        this.success = [];
        var _etype2525 = 0;
        _rtmp32526 = input.readListBegin();
        _etype2525 = _rtmp32526.etype;
        _size2522 = _rtmp32526.size;
        for (var _i2527 = 0; _i2527 < _size2522; ++_i2527)
        {
          var elem2528 = null;
          elem2528 = new Message();
          elem2528.read(input);
          this.success.push(elem2528);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRecentMessagesV2_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRecentMessagesV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2529 in this.success)
    {
      if (this.success.hasOwnProperty(iter2529))
      {
        iter2529 = this.success[iter2529];
        iter2529.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_validateContactsOnBot_args = function(args) {
  this.contacts = null;
  if (args) {
    if (args.contacts !== undefined && args.contacts !== null) {
      this.contacts = Thrift.copyList(args.contacts, [null]);
    }
  }
};
TalkService_validateContactsOnBot_args.prototype = {};
TalkService_validateContactsOnBot_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2530 = 0;
        var _rtmp32534;
        this.contacts = [];
        var _etype2533 = 0;
        _rtmp32534 = input.readListBegin();
        _etype2533 = _rtmp32534.etype;
        _size2530 = _rtmp32534.size;
        for (var _i2535 = 0; _i2535 < _size2530; ++_i2535)
        {
          var elem2536 = null;
          elem2536 = input.readString().value;
          this.contacts.push(elem2536);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_validateContactsOnBot_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_validateContactsOnBot_args');
  if (this.contacts !== null && this.contacts !== undefined) {
    output.writeFieldBegin('contacts', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.contacts.length);
    for (var iter2537 in this.contacts)
    {
      if (this.contacts.hasOwnProperty(iter2537))
      {
        iter2537 = this.contacts[iter2537];
        output.writeString(iter2537);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_validateContactsOnBot_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_validateContactsOnBot_result.prototype = {};
TalkService_validateContactsOnBot_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size2538 = 0;
        var _rtmp32542;
        this.success = {};
        var _ktype2539 = 0;
        var _vtype2540 = 0;
        _rtmp32542 = input.readMapBegin();
        _ktype2539 = _rtmp32542.ktype;
        _vtype2540 = _rtmp32542.vtype;
        _size2538 = _rtmp32542.size;
        for (var _i2543 = 0; _i2543 < _size2538; ++_i2543)
        {
          if (_i2543 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key2544 = null;
          var val2545 = null;
          key2544 = input.readString().value;
          val2545 = input.readString().value;
          this.success[key2544] = val2545;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_validateContactsOnBot_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_validateContactsOnBot_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter2546 in this.success)
    {
      if (this.success.hasOwnProperty(kiter2546))
      {
        var viter2547 = this.success[kiter2546];
        output.writeString(kiter2546);
        output.writeString(viter2547);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_tryFriendRequest_args = function(args) {
  this.midOrEMid = null;
  this.method = null;
  this.friendRequestParams = null;
  if (args) {
    if (args.midOrEMid !== undefined && args.midOrEMid !== null) {
      this.midOrEMid = args.midOrEMid;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.friendRequestParams !== undefined && args.friendRequestParams !== null) {
      this.friendRequestParams = args.friendRequestParams;
    }
  }
};
TalkService_tryFriendRequest_args.prototype = {};
TalkService_tryFriendRequest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.midOrEMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.method = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.friendRequestParams = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_tryFriendRequest_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_tryFriendRequest_args');
  if (this.midOrEMid !== null && this.midOrEMid !== undefined) {
    output.writeFieldBegin('midOrEMid', Thrift.Type.STRING, 1);
    output.writeString(this.midOrEMid);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.I32, 2);
    output.writeI32(this.method);
    output.writeFieldEnd();
  }
  if (this.friendRequestParams !== null && this.friendRequestParams !== undefined) {
    output.writeFieldBegin('friendRequestParams', Thrift.Type.STRING, 3);
    output.writeString(this.friendRequestParams);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_tryFriendRequest_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_tryFriendRequest_result.prototype = {};
TalkService_tryFriendRequest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_tryFriendRequest_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_tryFriendRequest_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_unblockContact_args = function(args) {
  this.reqSeq = null;
  this.id = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
TalkService_unblockContact_args.prototype = {};
TalkService_unblockContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unblockContact_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unblockContact_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_unblockContact_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_unblockContact_result.prototype = {};
TalkService_unblockContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unblockContact_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unblockContact_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_unblockRecommendation_args = function(args) {
  this.reqSeq = null;
  this.id = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
TalkService_unblockRecommendation_args.prototype = {};
TalkService_unblockRecommendation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unblockRecommendation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unblockRecommendation_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_unblockRecommendation_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_unblockRecommendation_result.prototype = {};
TalkService_unblockRecommendation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unblockRecommendation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unblockRecommendation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_unregisterUserAndDevice_args = function(args) {
};
TalkService_unregisterUserAndDevice_args.prototype = {};
TalkService_unregisterUserAndDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unregisterUserAndDevice_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unregisterUserAndDevice_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_unregisterUserAndDevice_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_unregisterUserAndDevice_result.prototype = {};
TalkService_unregisterUserAndDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unregisterUserAndDevice_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unregisterUserAndDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateApnsDeviceToken_args = function(args) {
  this.apnsDeviceToken = null;
  if (args) {
    if (args.apnsDeviceToken !== undefined && args.apnsDeviceToken !== null) {
      this.apnsDeviceToken = args.apnsDeviceToken;
    }
  }
};
TalkService_updateApnsDeviceToken_args.prototype = {};
TalkService_updateApnsDeviceToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.apnsDeviceToken = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateApnsDeviceToken_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateApnsDeviceToken_args');
  if (this.apnsDeviceToken !== null && this.apnsDeviceToken !== undefined) {
    output.writeFieldBegin('apnsDeviceToken', Thrift.Type.STRING, 2);
    output.writeBinary(this.apnsDeviceToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateApnsDeviceToken_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateApnsDeviceToken_result.prototype = {};
TalkService_updateApnsDeviceToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateApnsDeviceToken_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateApnsDeviceToken_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateBuddySetting_args = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TalkService_updateBuddySetting_args.prototype = {};
TalkService_updateBuddySetting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateBuddySetting_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateBuddySetting_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateBuddySetting_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateBuddySetting_result.prototype = {};
TalkService_updateBuddySetting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateBuddySetting_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateBuddySetting_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateC2DMRegistrationId_args = function(args) {
  this.registrationId = null;
  if (args) {
    if (args.registrationId !== undefined && args.registrationId !== null) {
      this.registrationId = args.registrationId;
    }
  }
};
TalkService_updateC2DMRegistrationId_args.prototype = {};
TalkService_updateC2DMRegistrationId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.registrationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateC2DMRegistrationId_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateC2DMRegistrationId_args');
  if (this.registrationId !== null && this.registrationId !== undefined) {
    output.writeFieldBegin('registrationId', Thrift.Type.STRING, 2);
    output.writeString(this.registrationId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateC2DMRegistrationId_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateC2DMRegistrationId_result.prototype = {};
TalkService_updateC2DMRegistrationId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateC2DMRegistrationId_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateC2DMRegistrationId_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateContactSetting_args = function(args) {
  this.reqSeq = null;
  this.mid = null;
  this.flag = null;
  this.value = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.flag !== undefined && args.flag !== null) {
      this.flag = args.flag;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TalkService_updateContactSetting_args.prototype = {};
TalkService_updateContactSetting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.flag = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateContactSetting_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateContactSetting_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.flag !== null && this.flag !== undefined) {
    output.writeFieldBegin('flag', Thrift.Type.I32, 3);
    output.writeI32(this.flag);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateContactSetting_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateContactSetting_result.prototype = {};
TalkService_updateContactSetting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateContactSetting_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateContactSetting_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateCustomModeSettings_args = function(args) {
  this.customMode = null;
  this.paramMap = null;
  if (args) {
    if (args.customMode !== undefined && args.customMode !== null) {
      this.customMode = args.customMode;
    }
    if (args.paramMap !== undefined && args.paramMap !== null) {
      this.paramMap = Thrift.copyMap(args.paramMap, [null]);
    }
  }
};
TalkService_updateCustomModeSettings_args.prototype = {};
TalkService_updateCustomModeSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.customMode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size2548 = 0;
        var _rtmp32552;
        this.paramMap = {};
        var _ktype2549 = 0;
        var _vtype2550 = 0;
        _rtmp32552 = input.readMapBegin();
        _ktype2549 = _rtmp32552.ktype;
        _vtype2550 = _rtmp32552.vtype;
        _size2548 = _rtmp32552.size;
        for (var _i2553 = 0; _i2553 < _size2548; ++_i2553)
        {
          if (_i2553 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key2554 = null;
          var val2555 = null;
          key2554 = input.readString().value;
          val2555 = input.readString().value;
          this.paramMap[key2554] = val2555;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateCustomModeSettings_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateCustomModeSettings_args');
  if (this.customMode !== null && this.customMode !== undefined) {
    output.writeFieldBegin('customMode', Thrift.Type.I32, 2);
    output.writeI32(this.customMode);
    output.writeFieldEnd();
  }
  if (this.paramMap !== null && this.paramMap !== undefined) {
    output.writeFieldBegin('paramMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.paramMap));
    for (var kiter2556 in this.paramMap)
    {
      if (this.paramMap.hasOwnProperty(kiter2556))
      {
        var viter2557 = this.paramMap[kiter2556];
        output.writeString(kiter2556);
        output.writeString(viter2557);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateCustomModeSettings_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateCustomModeSettings_result.prototype = {};
TalkService_updateCustomModeSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateCustomModeSettings_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateCustomModeSettings_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateDeviceInfo_args = function(args) {
  this.deviceUid = null;
  this.deviceInfo = null;
  if (args) {
    if (args.deviceUid !== undefined && args.deviceUid !== null) {
      this.deviceUid = args.deviceUid;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new DeviceInfo(args.deviceInfo);
    }
  }
};
TalkService_updateDeviceInfo_args.prototype = {};
TalkService_updateDeviceInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.deviceUid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateDeviceInfo_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateDeviceInfo_args');
  if (this.deviceUid !== null && this.deviceUid !== undefined) {
    output.writeFieldBegin('deviceUid', Thrift.Type.STRING, 2);
    output.writeString(this.deviceUid);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 3);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateDeviceInfo_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateDeviceInfo_result.prototype = {};
TalkService_updateDeviceInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateDeviceInfo_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateDeviceInfo_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateGroup_args = function(args) {
  this.reqSeq = null;
  this.group = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.group !== undefined && args.group !== null) {
      this.group = new Group(args.group);
    }
  }
};
TalkService_updateGroup_args.prototype = {};
TalkService_updateGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.group = new Group();
        this.group.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateGroup_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateGroup_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRUCT, 2);
    this.group.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateGroup_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateGroup_result.prototype = {};
TalkService_updateGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateGroup_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateGroup_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateNotificationToken_args = function(args) {
  this.type = null;
  this.token = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
TalkService_updateNotificationToken_args.prototype = {};
TalkService_updateNotificationToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateNotificationToken_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateNotificationToken_args');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 2);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateNotificationToken_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateNotificationToken_result.prototype = {};
TalkService_updateNotificationToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateNotificationToken_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateNotificationToken_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateNotificationTokenWithBytes_args = function(args) {
  this.type = null;
  this.token = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
TalkService_updateNotificationTokenWithBytes_args.prototype = {};
TalkService_updateNotificationTokenWithBytes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateNotificationTokenWithBytes_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateNotificationTokenWithBytes_args');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 2);
    output.writeBinary(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateNotificationTokenWithBytes_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateNotificationTokenWithBytes_result.prototype = {};
TalkService_updateNotificationTokenWithBytes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateNotificationTokenWithBytes_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateNotificationTokenWithBytes_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateProfile_args = function(args) {
  this.reqSeq = null;
  this.profile = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.profile !== undefined && args.profile !== null) {
      this.profile = new Profile(args.profile);
    }
  }
};
TalkService_updateProfile_args.prototype = {};
TalkService_updateProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.profile = new Profile();
        this.profile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateProfile_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateProfile_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.profile !== null && this.profile !== undefined) {
    output.writeFieldBegin('profile', Thrift.Type.STRUCT, 2);
    this.profile.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateProfile_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateProfile_result.prototype = {};
TalkService_updateProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateProfile_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateProfile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateProfileAttribute_args = function(args) {
  this.reqSeq = null;
  this.attr = null;
  this.value = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.attr !== undefined && args.attr !== null) {
      this.attr = args.attr;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TalkService_updateProfileAttribute_args.prototype = {};
TalkService_updateProfileAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.attr = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateProfileAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateProfileAttribute_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.attr !== null && this.attr !== undefined) {
    output.writeFieldBegin('attr', Thrift.Type.I32, 2);
    output.writeI32(this.attr);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateProfileAttribute_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateProfileAttribute_result.prototype = {};
TalkService_updateProfileAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateProfileAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateProfileAttribute_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateProfileAttributes_args = function(args) {
  this.reqSeq = null;
  this.request = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new UpdateProfileAttributesRequest(args.request);
    }
  }
};
TalkService_updateProfileAttributes_args.prototype = {};
TalkService_updateProfileAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new UpdateProfileAttributesRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateProfileAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateProfileAttributes_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateProfileAttributes_result = function(args) {
};
TalkService_updateProfileAttributes_result.prototype = {};
TalkService_updateProfileAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateProfileAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateProfileAttributes_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateRegion_args = function(args) {
  this.region = null;
  if (args) {
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
  }
};
TalkService_updateRegion_args.prototype = {};
TalkService_updateRegion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateRegion_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateRegion_args');
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 2);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateRegion_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateRegion_result.prototype = {};
TalkService_updateRegion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateRegion_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateRegion_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateSettings_args = function(args) {
  this.reqSeq = null;
  this.settings = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = new Settings(args.settings);
    }
  }
};
TalkService_updateSettings_args.prototype = {};
TalkService_updateSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.settings = new Settings();
        this.settings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateSettings_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateSettings_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.STRUCT, 2);
    this.settings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateSettings_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateSettings_result.prototype = {};
TalkService_updateSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateSettings_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateSettings_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateSettings2_args = function(args) {
  this.reqSeq = null;
  this.settings = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = new Settings(args.settings);
    }
  }
};
TalkService_updateSettings2_args.prototype = {};
TalkService_updateSettings2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.settings = new Settings();
        this.settings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateSettings2_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateSettings2_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.STRUCT, 2);
    this.settings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateSettings2_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateSettings2_result.prototype = {};
TalkService_updateSettings2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateSettings2_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateSettings2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateSettingsAttribute_args = function(args) {
  this.reqSeq = null;
  this.attr = null;
  this.value = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.attr !== undefined && args.attr !== null) {
      this.attr = args.attr;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TalkService_updateSettingsAttribute_args.prototype = {};
TalkService_updateSettingsAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.attr = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateSettingsAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateSettingsAttribute_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.attr !== null && this.attr !== undefined) {
    output.writeFieldBegin('attr', Thrift.Type.I32, 2);
    output.writeI32(this.attr);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateSettingsAttribute_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateSettingsAttribute_result.prototype = {};
TalkService_updateSettingsAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateSettingsAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateSettingsAttribute_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateSettingsAttributes_args = function(args) {
  this.reqSeq = null;
  this.attrBitset = null;
  this.settings = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.attrBitset !== undefined && args.attrBitset !== null) {
      this.attrBitset = args.attrBitset;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = new Settings(args.settings);
    }
  }
};
TalkService_updateSettingsAttributes_args.prototype = {};
TalkService_updateSettingsAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.attrBitset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.settings = new Settings();
        this.settings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateSettingsAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateSettingsAttributes_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.attrBitset !== null && this.attrBitset !== undefined) {
    output.writeFieldBegin('attrBitset', Thrift.Type.I32, 2);
    output.writeI32(this.attrBitset);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.STRUCT, 3);
    this.settings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_updateSettingsAttributes_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateSettingsAttributes_result.prototype = {};
TalkService_updateSettingsAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateSettingsAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateSettingsAttributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_verifyIdentityCredential_args = function(args) {
  this.identityProvider = null;
  this.identifier = null;
  this.password = null;
  if (args) {
    if (args.identityProvider !== undefined && args.identityProvider !== null) {
      this.identityProvider = args.identityProvider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
TalkService_verifyIdentityCredential_args.prototype = {};
TalkService_verifyIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.identityProvider = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyIdentityCredential_args');
  if (this.identityProvider !== null && this.identityProvider !== undefined) {
    output.writeFieldBegin('identityProvider', Thrift.Type.I32, 8);
    output.writeI32(this.identityProvider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 3);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_verifyIdentityCredential_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_verifyIdentityCredential_result.prototype = {};
TalkService_verifyIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyIdentityCredential_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_verifyIdentityCredentialWithResult_args = function(args) {
  this.identityCredential = null;
  if (args) {
    if (args.identityCredential !== undefined && args.identityCredential !== null) {
      this.identityCredential = new IdentityCredential(args.identityCredential);
    }
  }
};
TalkService_verifyIdentityCredentialWithResult_args.prototype = {};
TalkService_verifyIdentityCredentialWithResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.identityCredential = new IdentityCredential();
        this.identityCredential.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyIdentityCredentialWithResult_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyIdentityCredentialWithResult_args');
  if (this.identityCredential !== null && this.identityCredential !== undefined) {
    output.writeFieldBegin('identityCredential', Thrift.Type.STRUCT, 2);
    this.identityCredential.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_verifyIdentityCredentialWithResult_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new UserAuthStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_verifyIdentityCredentialWithResult_result.prototype = {};
TalkService_verifyIdentityCredentialWithResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UserAuthStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyIdentityCredentialWithResult_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyIdentityCredentialWithResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_verifyPhone_args = function(args) {
  this.sessionId = null;
  this.pinCode = null;
  this.udidHash = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.pinCode !== undefined && args.pinCode !== null) {
      this.pinCode = args.pinCode;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
  }
};
TalkService_verifyPhone_args.prototype = {};
TalkService_verifyPhone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pinCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyPhone_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyPhone_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.pinCode !== null && this.pinCode !== undefined) {
    output.writeFieldBegin('pinCode', Thrift.Type.STRING, 3);
    output.writeString(this.pinCode);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 4);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_verifyPhone_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_verifyPhone_result.prototype = {};
TalkService_verifyPhone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyPhone_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyPhone_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_verifyQrcode_args = function(args) {
  this.verifier = null;
  this.pinCode = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.pinCode !== undefined && args.pinCode !== null) {
      this.pinCode = args.pinCode;
    }
  }
};
TalkService_verifyQrcode_args.prototype = {};
TalkService_verifyQrcode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pinCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyQrcode_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyQrcode_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 2);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.pinCode !== null && this.pinCode !== undefined) {
    output.writeFieldBegin('pinCode', Thrift.Type.STRING, 3);
    output.writeString(this.pinCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkService_verifyQrcode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_verifyQrcode_result.prototype = {};
TalkService_verifyQrcode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyQrcode_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyQrcode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
TalkServiceClient.prototype = {};
TalkServiceClient.prototype.searchCollection = function(query, param, callback) {
  this.send_searchCollection(query, param, callback); 
  if (!callback) {
    return this.recv_searchCollection();
  }
};

TalkServiceClient.prototype.send_searchCollection = function(query, param, callback) {
  this.output.writeMessageBegin('searchCollection', Thrift.MessageType.CALL, this.seqid);
  var params = {
    query: query,
    param: param
  };
  var args = new TalkService_searchCollection_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_searchCollection();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_searchCollection = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_searchCollection_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'searchCollection failed: unknown result';
};
TalkServiceClient.prototype.getChatRoomAnnouncementsBulk = function(chatRoomMids, callback) {
  this.send_getChatRoomAnnouncementsBulk(chatRoomMids, callback); 
  if (!callback) {
    return this.recv_getChatRoomAnnouncementsBulk();
  }
};

TalkServiceClient.prototype.send_getChatRoomAnnouncementsBulk = function(chatRoomMids, callback) {
  this.output.writeMessageBegin('getChatRoomAnnouncementsBulk', Thrift.MessageType.CALL, this.seqid);
  var params = {
    chatRoomMids: chatRoomMids
  };
  var args = new TalkService_getChatRoomAnnouncementsBulk_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getChatRoomAnnouncementsBulk();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getChatRoomAnnouncementsBulk = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getChatRoomAnnouncementsBulk_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getChatRoomAnnouncementsBulk failed: unknown result';
};
TalkServiceClient.prototype.getChatRoomAnnouncements = function(chatRoomMid, callback) {
  this.send_getChatRoomAnnouncements(chatRoomMid, callback); 
  if (!callback) {
    return this.recv_getChatRoomAnnouncements();
  }
};

TalkServiceClient.prototype.send_getChatRoomAnnouncements = function(chatRoomMid, callback) {
  this.output.writeMessageBegin('getChatRoomAnnouncements', Thrift.MessageType.CALL, this.seqid);
  var params = {
    chatRoomMid: chatRoomMid
  };
  var args = new TalkService_getChatRoomAnnouncements_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getChatRoomAnnouncements();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getChatRoomAnnouncements = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getChatRoomAnnouncements_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getChatRoomAnnouncements failed: unknown result';
};
TalkServiceClient.prototype.createChatRoomAnnouncement = function(reqSeq, chatRoomMid, type, contents, callback) {
  this.send_createChatRoomAnnouncement(reqSeq, chatRoomMid, type, contents, callback); 
  if (!callback) {
    return this.recv_createChatRoomAnnouncement();
  }
};

TalkServiceClient.prototype.send_createChatRoomAnnouncement = function(reqSeq, chatRoomMid, type, contents, callback) {
  this.output.writeMessageBegin('createChatRoomAnnouncement', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    chatRoomMid: chatRoomMid,
    type: type,
    contents: contents
  };
  var args = new TalkService_createChatRoomAnnouncement_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createChatRoomAnnouncement();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_createChatRoomAnnouncement = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_createChatRoomAnnouncement_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createChatRoomAnnouncement failed: unknown result';
};
TalkServiceClient.prototype.removeChatRoomAnnouncement = function(reqSeq, chatRoomMid, announcementSeq, callback) {
  this.send_removeChatRoomAnnouncement(reqSeq, chatRoomMid, announcementSeq, callback); 
  if (!callback) {
  this.recv_removeChatRoomAnnouncement();
  }
};

TalkServiceClient.prototype.send_removeChatRoomAnnouncement = function(reqSeq, chatRoomMid, announcementSeq, callback) {
  this.output.writeMessageBegin('removeChatRoomAnnouncement', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    chatRoomMid: chatRoomMid,
    announcementSeq: announcementSeq
  };
  var args = new TalkService_removeChatRoomAnnouncement_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeChatRoomAnnouncement();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_removeChatRoomAnnouncement = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_removeChatRoomAnnouncement_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.unsendMessage = function(seq, messageId, callback) {
  this.send_unsendMessage(seq, messageId, callback); 
  if (!callback) {
  this.recv_unsendMessage();
  }
};

TalkServiceClient.prototype.send_unsendMessage = function(seq, messageId, callback) {
  this.output.writeMessageBegin('unsendMessage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    messageId: messageId
  };
  var args = new TalkService_unsendMessage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_unsendMessage();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_unsendMessage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_unsendMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.getGroupWithoutMembers = function(groupId, callback) {
  this.send_getGroupWithoutMembers(groupId, callback); 
  if (!callback) {
    return this.recv_getGroupWithoutMembers();
  }
};

TalkServiceClient.prototype.send_getGroupWithoutMembers = function(groupId, callback) {
  this.output.writeMessageBegin('getGroupWithoutMembers', Thrift.MessageType.CALL, this.seqid);
  var params = {
    groupId: groupId
  };
  var args = new TalkService_getGroupWithoutMembers_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getGroupWithoutMembers();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getGroupWithoutMembers = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getGroupWithoutMembers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getGroupWithoutMembers failed: unknown result';
};
TalkServiceClient.prototype.requestResendMessage = function(reqSeq, senderMid, messageId, callback) {
  this.send_requestResendMessage(reqSeq, senderMid, messageId, callback); 
  if (!callback) {
  this.recv_requestResendMessage();
  }
};

TalkServiceClient.prototype.send_requestResendMessage = function(reqSeq, senderMid, messageId, callback) {
  this.output.writeMessageBegin('requestResendMessage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    senderMid: senderMid,
    messageId: messageId
  };
  var args = new TalkService_requestResendMessage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_requestResendMessage();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_requestResendMessage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_requestResendMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.respondResendMessage = function(reqSeq, receiverMid, originalMessageId, resendMessage, errorCode, callback) {
  this.send_respondResendMessage(reqSeq, receiverMid, originalMessageId, resendMessage, errorCode, callback); 
  if (!callback) {
  this.recv_respondResendMessage();
  }
};

TalkServiceClient.prototype.send_respondResendMessage = function(reqSeq, receiverMid, originalMessageId, resendMessage, errorCode, callback) {
  this.output.writeMessageBegin('respondResendMessage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    receiverMid: receiverMid,
    originalMessageId: originalMessageId,
    resendMessage: resendMessage,
    errorCode: errorCode
  };
  var args = new TalkService_respondResendMessage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_respondResendMessage();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_respondResendMessage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_respondResendMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.acceptGroupInvitation = function(reqSeq, groupId, callback) {
  this.send_acceptGroupInvitation(reqSeq, groupId, callback); 
  if (!callback) {
  this.recv_acceptGroupInvitation();
  }
};

TalkServiceClient.prototype.send_acceptGroupInvitation = function(reqSeq, groupId, callback) {
  this.output.writeMessageBegin('acceptGroupInvitation', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    groupId: groupId
  };
  var args = new TalkService_acceptGroupInvitation_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_acceptGroupInvitation();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_acceptGroupInvitation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_acceptGroupInvitation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.acceptGroupInvitationByTicket = function(reqSeq, GroupMid, ticketId, callback) {
  this.send_acceptGroupInvitationByTicket(reqSeq, GroupMid, ticketId, callback); 
  if (!callback) {
  this.recv_acceptGroupInvitationByTicket();
  }
};

TalkServiceClient.prototype.send_acceptGroupInvitationByTicket = function(reqSeq, GroupMid, ticketId, callback) {
  this.output.writeMessageBegin('acceptGroupInvitationByTicket', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    GroupMid: GroupMid,
    ticketId: ticketId
  };
  var args = new TalkService_acceptGroupInvitationByTicket_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_acceptGroupInvitationByTicket();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_acceptGroupInvitationByTicket = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_acceptGroupInvitationByTicket_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.acceptProximityMatches = function(sessionId, ids, callback) {
  this.send_acceptProximityMatches(sessionId, ids, callback); 
  if (!callback) {
  this.recv_acceptProximityMatches();
  }
};

TalkServiceClient.prototype.send_acceptProximityMatches = function(sessionId, ids, callback) {
  this.output.writeMessageBegin('acceptProximityMatches', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sessionId: sessionId,
    ids: ids
  };
  var args = new TalkService_acceptProximityMatches_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_acceptProximityMatches();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_acceptProximityMatches = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_acceptProximityMatches_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.acquireCallRoute = function(to, callback) {
  this.send_acquireCallRoute(to, callback); 
  if (!callback) {
    return this.recv_acquireCallRoute();
  }
};

TalkServiceClient.prototype.send_acquireCallRoute = function(to, callback) {
  this.output.writeMessageBegin('acquireCallRoute', Thrift.MessageType.CALL, this.seqid);
  var params = {
    to: to
  };
  var args = new TalkService_acquireCallRoute_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_acquireCallRoute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_acquireCallRoute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_acquireCallRoute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'acquireCallRoute failed: unknown result';
};
TalkServiceClient.prototype.acquireCallTicket = function(to, callback) {
  this.send_acquireCallTicket(to, callback); 
  if (!callback) {
    return this.recv_acquireCallTicket();
  }
};

TalkServiceClient.prototype.send_acquireCallTicket = function(to, callback) {
  this.output.writeMessageBegin('acquireCallTicket', Thrift.MessageType.CALL, this.seqid);
  var params = {
    to: to
  };
  var args = new TalkService_acquireCallTicket_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_acquireCallTicket();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_acquireCallTicket = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_acquireCallTicket_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'acquireCallTicket failed: unknown result';
};
TalkServiceClient.prototype.acquireEncryptedAccessToken = function(featureType, callback) {
  this.send_acquireEncryptedAccessToken(featureType, callback); 
  if (!callback) {
    return this.recv_acquireEncryptedAccessToken();
  }
};

TalkServiceClient.prototype.send_acquireEncryptedAccessToken = function(featureType, callback) {
  this.output.writeMessageBegin('acquireEncryptedAccessToken', Thrift.MessageType.CALL, this.seqid);
  var params = {
    featureType: featureType
  };
  var args = new TalkService_acquireEncryptedAccessToken_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_acquireEncryptedAccessToken();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_acquireEncryptedAccessToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_acquireEncryptedAccessToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'acquireEncryptedAccessToken failed: unknown result';
};
TalkServiceClient.prototype.addSnsId = function(snsIdType, snsAccessToken, callback) {
  this.send_addSnsId(snsIdType, snsAccessToken, callback); 
  if (!callback) {
    return this.recv_addSnsId();
  }
};

TalkServiceClient.prototype.send_addSnsId = function(snsIdType, snsAccessToken, callback) {
  this.output.writeMessageBegin('addSnsId', Thrift.MessageType.CALL, this.seqid);
  var params = {
    snsIdType: snsIdType,
    snsAccessToken: snsAccessToken
  };
  var args = new TalkService_addSnsId_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addSnsId();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_addSnsId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_addSnsId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addSnsId failed: unknown result';
};
TalkServiceClient.prototype.blockContact = function(reqSeq, id, callback) {
  this.send_blockContact(reqSeq, id, callback); 
  if (!callback) {
  this.recv_blockContact();
  }
};

TalkServiceClient.prototype.send_blockContact = function(reqSeq, id, callback) {
  this.output.writeMessageBegin('blockContact', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    id: id
  };
  var args = new TalkService_blockContact_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_blockContact();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_blockContact = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_blockContact_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.blockRecommendation = function(reqSeq, id, callback) {
  this.send_blockRecommendation(reqSeq, id, callback); 
  if (!callback) {
  this.recv_blockRecommendation();
  }
};

TalkServiceClient.prototype.send_blockRecommendation = function(reqSeq, id, callback) {
  this.output.writeMessageBegin('blockRecommendation', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    id: id
  };
  var args = new TalkService_blockRecommendation_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_blockRecommendation();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_blockRecommendation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_blockRecommendation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.cancelGroupInvitation = function(reqSeq, groupId, contactIds, callback) {
  this.send_cancelGroupInvitation(reqSeq, groupId, contactIds, callback); 
  if (!callback) {
  this.recv_cancelGroupInvitation();
  }
};

TalkServiceClient.prototype.send_cancelGroupInvitation = function(reqSeq, groupId, contactIds, callback) {
  this.output.writeMessageBegin('cancelGroupInvitation', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    groupId: groupId,
    contactIds: contactIds
  };
  var args = new TalkService_cancelGroupInvitation_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_cancelGroupInvitation();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_cancelGroupInvitation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_cancelGroupInvitation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.changeVerificationMethod = function(sessionId, method, callback) {
  this.send_changeVerificationMethod(sessionId, method, callback); 
  if (!callback) {
    return this.recv_changeVerificationMethod();
  }
};

TalkServiceClient.prototype.send_changeVerificationMethod = function(sessionId, method, callback) {
  this.output.writeMessageBegin('changeVerificationMethod', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sessionId: sessionId,
    method: method
  };
  var args = new TalkService_changeVerificationMethod_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_changeVerificationMethod();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_changeVerificationMethod = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_changeVerificationMethod_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'changeVerificationMethod failed: unknown result';
};
TalkServiceClient.prototype.clearIdentityCredential = function(callback) {
  this.send_clearIdentityCredential(callback); 
  if (!callback) {
  this.recv_clearIdentityCredential();
  }
};

TalkServiceClient.prototype.send_clearIdentityCredential = function(callback) {
  this.output.writeMessageBegin('clearIdentityCredential', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_clearIdentityCredential_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_clearIdentityCredential();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_clearIdentityCredential = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_clearIdentityCredential_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.clearMessageBox = function(channelId, messageBoxId, callback) {
  this.send_clearMessageBox(channelId, messageBoxId, callback); 
  if (!callback) {
  this.recv_clearMessageBox();
  }
};

TalkServiceClient.prototype.send_clearMessageBox = function(channelId, messageBoxId, callback) {
  this.output.writeMessageBegin('clearMessageBox', Thrift.MessageType.CALL, this.seqid);
  var params = {
    channelId: channelId,
    messageBoxId: messageBoxId
  };
  var args = new TalkService_clearMessageBox_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_clearMessageBox();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_clearMessageBox = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_clearMessageBox_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.closeProximityMatch = function(sessionId, callback) {
  this.send_closeProximityMatch(sessionId, callback); 
  if (!callback) {
  this.recv_closeProximityMatch();
  }
};

TalkServiceClient.prototype.send_closeProximityMatch = function(sessionId, callback) {
  this.output.writeMessageBegin('closeProximityMatch', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sessionId: sessionId
  };
  var args = new TalkService_closeProximityMatch_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_closeProximityMatch();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_closeProximityMatch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_closeProximityMatch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.commitSendMessage = function(seq, messageId, receiverMids, callback) {
  this.send_commitSendMessage(seq, messageId, receiverMids, callback); 
  if (!callback) {
    return this.recv_commitSendMessage();
  }
};

TalkServiceClient.prototype.send_commitSendMessage = function(seq, messageId, receiverMids, callback) {
  this.output.writeMessageBegin('commitSendMessage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    messageId: messageId,
    receiverMids: receiverMids
  };
  var args = new TalkService_commitSendMessage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_commitSendMessage();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_commitSendMessage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_commitSendMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'commitSendMessage failed: unknown result';
};
TalkServiceClient.prototype.commitSendMessages = function(seq, messageIds, receiverMids, callback) {
  this.send_commitSendMessages(seq, messageIds, receiverMids, callback); 
  if (!callback) {
    return this.recv_commitSendMessages();
  }
};

TalkServiceClient.prototype.send_commitSendMessages = function(seq, messageIds, receiverMids, callback) {
  this.output.writeMessageBegin('commitSendMessages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    messageIds: messageIds,
    receiverMids: receiverMids
  };
  var args = new TalkService_commitSendMessages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_commitSendMessages();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_commitSendMessages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_commitSendMessages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'commitSendMessages failed: unknown result';
};
TalkServiceClient.prototype.commitUpdateProfile = function(seq, attrs, receiverMids, callback) {
  this.send_commitUpdateProfile(seq, attrs, receiverMids, callback); 
  if (!callback) {
    return this.recv_commitUpdateProfile();
  }
};

TalkServiceClient.prototype.send_commitUpdateProfile = function(seq, attrs, receiverMids, callback) {
  this.output.writeMessageBegin('commitUpdateProfile', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    attrs: attrs,
    receiverMids: receiverMids
  };
  var args = new TalkService_commitUpdateProfile_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_commitUpdateProfile();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_commitUpdateProfile = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_commitUpdateProfile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'commitUpdateProfile failed: unknown result';
};
TalkServiceClient.prototype.confirmEmail = function(verifier, pinCode, callback) {
  this.send_confirmEmail(verifier, pinCode, callback); 
  if (!callback) {
  this.recv_confirmEmail();
  }
};

TalkServiceClient.prototype.send_confirmEmail = function(verifier, pinCode, callback) {
  this.output.writeMessageBegin('confirmEmail', Thrift.MessageType.CALL, this.seqid);
  var params = {
    verifier: verifier,
    pinCode: pinCode
  };
  var args = new TalkService_confirmEmail_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_confirmEmail();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_confirmEmail = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_confirmEmail_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.createGroup = function(seq, name, contactIds, callback) {
  this.send_createGroup(seq, name, contactIds, callback); 
  if (!callback) {
    return this.recv_createGroup();
  }
};

TalkServiceClient.prototype.send_createGroup = function(seq, name, contactIds, callback) {
  this.output.writeMessageBegin('createGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    name: name,
    contactIds: contactIds
  };
  var args = new TalkService_createGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createGroup();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_createGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_createGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createGroup failed: unknown result';
};
TalkServiceClient.prototype.createQrcodeBase64Image = function(url, characterSet, imageSize, x, y, width, height, callback) {
  this.send_createQrcodeBase64Image(url, characterSet, imageSize, x, y, width, height, callback); 
  if (!callback) {
    return this.recv_createQrcodeBase64Image();
  }
};

TalkServiceClient.prototype.send_createQrcodeBase64Image = function(url, characterSet, imageSize, x, y, width, height, callback) {
  this.output.writeMessageBegin('createQrcodeBase64Image', Thrift.MessageType.CALL, this.seqid);
  var params = {
    url: url,
    characterSet: characterSet,
    imageSize: imageSize,
    x: x,
    y: y,
    width: width,
    height: height
  };
  var args = new TalkService_createQrcodeBase64Image_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createQrcodeBase64Image();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_createQrcodeBase64Image = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_createQrcodeBase64Image_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createQrcodeBase64Image failed: unknown result';
};
TalkServiceClient.prototype.createRoom = function(reqSeq, contactIds, callback) {
  this.send_createRoom(reqSeq, contactIds, callback); 
  if (!callback) {
    return this.recv_createRoom();
  }
};

TalkServiceClient.prototype.send_createRoom = function(reqSeq, contactIds, callback) {
  this.output.writeMessageBegin('createRoom', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    contactIds: contactIds
  };
  var args = new TalkService_createRoom_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createRoom();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_createRoom = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_createRoom_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createRoom failed: unknown result';
};
TalkServiceClient.prototype.createSession = function(callback) {
  this.send_createSession(callback); 
  if (!callback) {
    return this.recv_createSession();
  }
};

TalkServiceClient.prototype.send_createSession = function(callback) {
  this.output.writeMessageBegin('createSession', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_createSession_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createSession();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_createSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_createSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createSession failed: unknown result';
};
TalkServiceClient.prototype.fetchAnnouncements = function(lastFetchedIndex, callback) {
  this.send_fetchAnnouncements(lastFetchedIndex, callback); 
  if (!callback) {
    return this.recv_fetchAnnouncements();
  }
};

TalkServiceClient.prototype.send_fetchAnnouncements = function(lastFetchedIndex, callback) {
  this.output.writeMessageBegin('fetchAnnouncements', Thrift.MessageType.CALL, this.seqid);
  var params = {
    lastFetchedIndex: lastFetchedIndex
  };
  var args = new TalkService_fetchAnnouncements_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_fetchAnnouncements();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_fetchAnnouncements = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_fetchAnnouncements_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'fetchAnnouncements failed: unknown result';
};
TalkServiceClient.prototype.fetchMessages = function(localTs, count, callback) {
  this.send_fetchMessages(localTs, count, callback); 
  if (!callback) {
    return this.recv_fetchMessages();
  }
};

TalkServiceClient.prototype.send_fetchMessages = function(localTs, count, callback) {
  this.output.writeMessageBegin('fetchMessages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    localTs: localTs,
    count: count
  };
  var args = new TalkService_fetchMessages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_fetchMessages();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_fetchMessages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_fetchMessages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'fetchMessages failed: unknown result';
};
TalkServiceClient.prototype.fetchOperations = function(localRev, count, callback) {
  this.send_fetchOperations(localRev, count, callback); 
  if (!callback) {
    return this.recv_fetchOperations();
  }
};

TalkServiceClient.prototype.send_fetchOperations = function(localRev, count, callback) {
  this.output.writeMessageBegin('fetchOperations', Thrift.MessageType.CALL, this.seqid);
  var params = {
    localRev: localRev,
    count: count
  };
  var args = new TalkService_fetchOperations_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_fetchOperations();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_fetchOperations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_fetchOperations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'fetchOperations failed: unknown result';
};
TalkServiceClient.prototype.fetchOps = function(localRev, count, globalRev, individualRev, callback) {
  this.send_fetchOps(localRev, count, globalRev, individualRev, callback); 
  if (!callback) {
    return this.recv_fetchOps();
  }
};

TalkServiceClient.prototype.send_fetchOps = function(localRev, count, globalRev, individualRev, callback) {
  this.output.writeMessageBegin('fetchOps', Thrift.MessageType.CALL, this.seqid);
  var params = {
    localRev: localRev,
    count: count,
    globalRev: globalRev,
    individualRev: individualRev
  };
  var args = new TalkService_fetchOps_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_fetchOps();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_fetchOps = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_fetchOps_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'fetchOps failed: unknown result';
};
TalkServiceClient.prototype.findAndAddContactsByEmail = function(reqSeq, emails, callback) {
  this.send_findAndAddContactsByEmail(reqSeq, emails, callback); 
  if (!callback) {
    return this.recv_findAndAddContactsByEmail();
  }
};

TalkServiceClient.prototype.send_findAndAddContactsByEmail = function(reqSeq, emails, callback) {
  this.output.writeMessageBegin('findAndAddContactsByEmail', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    emails: emails
  };
  var args = new TalkService_findAndAddContactsByEmail_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findAndAddContactsByEmail();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_findAndAddContactsByEmail = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_findAndAddContactsByEmail_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findAndAddContactsByEmail failed: unknown result';
};
TalkServiceClient.prototype.findAndAddContactsByMid = function(reqSeq, mid, type, reference, callback) {
  this.send_findAndAddContactsByMid(reqSeq, mid, type, reference, callback); 
  if (!callback) {
    return this.recv_findAndAddContactsByMid();
  }
};

TalkServiceClient.prototype.send_findAndAddContactsByMid = function(reqSeq, mid, type, reference, callback) {
  this.output.writeMessageBegin('findAndAddContactsByMid', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    mid: mid,
    type: type,
    reference: reference
  };
  var args = new TalkService_findAndAddContactsByMid_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findAndAddContactsByMid();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_findAndAddContactsByMid = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_findAndAddContactsByMid_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findAndAddContactsByMid failed: unknown result';
};
TalkServiceClient.prototype.findGroupByTicketV2 = function(ticketId, callback) {
  this.send_findGroupByTicketV2(ticketId, callback); 
  if (!callback) {
    return this.recv_findGroupByTicketV2();
  }
};

TalkServiceClient.prototype.send_findGroupByTicketV2 = function(ticketId, callback) {
  this.output.writeMessageBegin('findGroupByTicketV2', Thrift.MessageType.CALL, this.seqid);
  var params = {
    ticketId: ticketId
  };
  var args = new TalkService_findGroupByTicketV2_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findGroupByTicketV2();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_findGroupByTicketV2 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_findGroupByTicketV2_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findGroupByTicketV2 failed: unknown result';
};
TalkServiceClient.prototype.findAndAddContactsByPhone = function(reqSeq, phones, callback) {
  this.send_findAndAddContactsByPhone(reqSeq, phones, callback); 
  if (!callback) {
    return this.recv_findAndAddContactsByPhone();
  }
};

TalkServiceClient.prototype.send_findAndAddContactsByPhone = function(reqSeq, phones, callback) {
  this.output.writeMessageBegin('findAndAddContactsByPhone', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    phones: phones
  };
  var args = new TalkService_findAndAddContactsByPhone_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findAndAddContactsByPhone();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_findAndAddContactsByPhone = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_findAndAddContactsByPhone_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findAndAddContactsByPhone failed: unknown result';
};
TalkServiceClient.prototype.getFriendRequests = function(direction, lastSeenSeqId, callback) {
  this.send_getFriendRequests(direction, lastSeenSeqId, callback); 
  if (!callback) {
    return this.recv_getFriendRequests();
  }
};

TalkServiceClient.prototype.send_getFriendRequests = function(direction, lastSeenSeqId, callback) {
  this.output.writeMessageBegin('getFriendRequests', Thrift.MessageType.CALL, this.seqid);
  var params = {
    direction: direction,
    lastSeenSeqId: lastSeenSeqId
  };
  var args = new TalkService_getFriendRequests_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getFriendRequests();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getFriendRequests = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getFriendRequests_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFriendRequests failed: unknown result';
};
TalkServiceClient.prototype.removeFriendRequest = function(direction, midOrEMid, callback) {
  this.send_removeFriendRequest(direction, midOrEMid, callback); 
  if (!callback) {
  this.recv_removeFriendRequest();
  }
};

TalkServiceClient.prototype.send_removeFriendRequest = function(direction, midOrEMid, callback) {
  this.output.writeMessageBegin('removeFriendRequest', Thrift.MessageType.CALL, this.seqid);
  var params = {
    direction: direction,
    midOrEMid: midOrEMid
  };
  var args = new TalkService_removeFriendRequest_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeFriendRequest();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_removeFriendRequest = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_removeFriendRequest_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.findAndAddContactsByUserid = function(reqSeq, userid, callback) {
  this.send_findAndAddContactsByUserid(reqSeq, userid, callback); 
  if (!callback) {
    return this.recv_findAndAddContactsByUserid();
  }
};

TalkServiceClient.prototype.send_findAndAddContactsByUserid = function(reqSeq, userid, callback) {
  this.output.writeMessageBegin('findAndAddContactsByUserid', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    userid: userid
  };
  var args = new TalkService_findAndAddContactsByUserid_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findAndAddContactsByUserid();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_findAndAddContactsByUserid = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_findAndAddContactsByUserid_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findAndAddContactsByUserid failed: unknown result';
};
TalkServiceClient.prototype.findContactByUserid = function(userid, callback) {
  this.send_findContactByUserid(userid, callback); 
  if (!callback) {
    return this.recv_findContactByUserid();
  }
};

TalkServiceClient.prototype.send_findContactByUserid = function(userid, callback) {
  this.output.writeMessageBegin('findContactByUserid', Thrift.MessageType.CALL, this.seqid);
  var params = {
    userid: userid
  };
  var args = new TalkService_findContactByUserid_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findContactByUserid();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_findContactByUserid = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_findContactByUserid_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findContactByUserid failed: unknown result';
};
TalkServiceClient.prototype.findContactByUserTicket = function(ticketIdWithTag, callback) {
  this.send_findContactByUserTicket(ticketIdWithTag, callback); 
  if (!callback) {
    return this.recv_findContactByUserTicket();
  }
};

TalkServiceClient.prototype.send_findContactByUserTicket = function(ticketIdWithTag, callback) {
  this.output.writeMessageBegin('findContactByUserTicket', Thrift.MessageType.CALL, this.seqid);
  var params = {
    ticketIdWithTag: ticketIdWithTag
  };
  var args = new TalkService_findContactByUserTicket_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findContactByUserTicket();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_findContactByUserTicket = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_findContactByUserTicket_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findContactByUserTicket failed: unknown result';
};
TalkServiceClient.prototype.findContactsByEmail = function(emails, callback) {
  this.send_findContactsByEmail(emails, callback); 
  if (!callback) {
    return this.recv_findContactsByEmail();
  }
};

TalkServiceClient.prototype.send_findContactsByEmail = function(emails, callback) {
  this.output.writeMessageBegin('findContactsByEmail', Thrift.MessageType.CALL, this.seqid);
  var params = {
    emails: emails
  };
  var args = new TalkService_findContactsByEmail_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findContactsByEmail();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_findContactsByEmail = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_findContactsByEmail_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findContactsByEmail failed: unknown result';
};
TalkServiceClient.prototype.findContactsByPhone = function(phones, callback) {
  this.send_findContactsByPhone(phones, callback); 
  if (!callback) {
    return this.recv_findContactsByPhone();
  }
};

TalkServiceClient.prototype.send_findContactsByPhone = function(phones, callback) {
  this.output.writeMessageBegin('findContactsByPhone', Thrift.MessageType.CALL, this.seqid);
  var params = {
    phones: phones
  };
  var args = new TalkService_findContactsByPhone_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findContactsByPhone();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_findContactsByPhone = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_findContactsByPhone_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findContactsByPhone failed: unknown result';
};
TalkServiceClient.prototype.findSnsIdUserStatus = function(snsIdType, snsAccessToken, udidHash, callback) {
  this.send_findSnsIdUserStatus(snsIdType, snsAccessToken, udidHash, callback); 
  if (!callback) {
    return this.recv_findSnsIdUserStatus();
  }
};

TalkServiceClient.prototype.send_findSnsIdUserStatus = function(snsIdType, snsAccessToken, udidHash, callback) {
  this.output.writeMessageBegin('findSnsIdUserStatus', Thrift.MessageType.CALL, this.seqid);
  var params = {
    snsIdType: snsIdType,
    snsAccessToken: snsAccessToken,
    udidHash: udidHash
  };
  var args = new TalkService_findSnsIdUserStatus_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findSnsIdUserStatus();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_findSnsIdUserStatus = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_findSnsIdUserStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findSnsIdUserStatus failed: unknown result';
};
TalkServiceClient.prototype.finishUpdateVerification = function(sessionId, callback) {
  this.send_finishUpdateVerification(sessionId, callback); 
  if (!callback) {
  this.recv_finishUpdateVerification();
  }
};

TalkServiceClient.prototype.send_finishUpdateVerification = function(sessionId, callback) {
  this.output.writeMessageBegin('finishUpdateVerification', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sessionId: sessionId
  };
  var args = new TalkService_finishUpdateVerification_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_finishUpdateVerification();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_finishUpdateVerification = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_finishUpdateVerification_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.generateUserTicket = function(expirationTime, maxUseCount, callback) {
  this.send_generateUserTicket(expirationTime, maxUseCount, callback); 
  if (!callback) {
    return this.recv_generateUserTicket();
  }
};

TalkServiceClient.prototype.send_generateUserTicket = function(expirationTime, maxUseCount, callback) {
  this.output.writeMessageBegin('generateUserTicket', Thrift.MessageType.CALL, this.seqid);
  var params = {
    expirationTime: expirationTime,
    maxUseCount: maxUseCount
  };
  var args = new TalkService_generateUserTicket_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_generateUserTicket();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_generateUserTicket = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_generateUserTicket_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'generateUserTicket failed: unknown result';
};
TalkServiceClient.prototype.destroyMessage = function(seq, chatId, messageId, sessionId, callback) {
  this.send_destroyMessage(seq, chatId, messageId, sessionId, callback); 
  if (!callback) {
  this.recv_destroyMessage();
  }
};

TalkServiceClient.prototype.send_destroyMessage = function(seq, chatId, messageId, sessionId, callback) {
  this.output.writeMessageBegin('destroyMessage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    chatId: chatId,
    messageId: messageId,
    sessionId: sessionId
  };
  var args = new TalkService_destroyMessage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_destroyMessage();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_destroyMessage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_destroyMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.getAcceptedProximityMatches = function(sessionId, callback) {
  this.send_getAcceptedProximityMatches(sessionId, callback); 
  if (!callback) {
    return this.recv_getAcceptedProximityMatches();
  }
};

TalkServiceClient.prototype.send_getAcceptedProximityMatches = function(sessionId, callback) {
  this.output.writeMessageBegin('getAcceptedProximityMatches', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sessionId: sessionId
  };
  var args = new TalkService_getAcceptedProximityMatches_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getAcceptedProximityMatches();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getAcceptedProximityMatches = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getAcceptedProximityMatches_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAcceptedProximityMatches failed: unknown result';
};
TalkServiceClient.prototype.getActiveBuddySubscriberIds = function(callback) {
  this.send_getActiveBuddySubscriberIds(callback); 
  if (!callback) {
    return this.recv_getActiveBuddySubscriberIds();
  }
};

TalkServiceClient.prototype.send_getActiveBuddySubscriberIds = function(callback) {
  this.output.writeMessageBegin('getActiveBuddySubscriberIds', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getActiveBuddySubscriberIds_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getActiveBuddySubscriberIds();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getActiveBuddySubscriberIds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getActiveBuddySubscriberIds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getActiveBuddySubscriberIds failed: unknown result';
};
TalkServiceClient.prototype.getAllContactIds = function(callback) {
  this.send_getAllContactIds(callback); 
  if (!callback) {
    return this.recv_getAllContactIds();
  }
};

TalkServiceClient.prototype.send_getAllContactIds = function(callback) {
  this.output.writeMessageBegin('getAllContactIds', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getAllContactIds_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getAllContactIds();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getAllContactIds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getAllContactIds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllContactIds failed: unknown result';
};
TalkServiceClient.prototype.getAuthQrcode = function(keepLoggedIn, systemName, callback) {
  this.send_getAuthQrcode(keepLoggedIn, systemName, callback); 
  if (!callback) {
    return this.recv_getAuthQrcode();
  }
};

TalkServiceClient.prototype.send_getAuthQrcode = function(keepLoggedIn, systemName, callback) {
  this.output.writeMessageBegin('getAuthQrcode', Thrift.MessageType.CALL, this.seqid);
  var params = {
    keepLoggedIn: keepLoggedIn,
    systemName: systemName
  };
  var args = new TalkService_getAuthQrcode_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getAuthQrcode();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getAuthQrcode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getAuthQrcode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAuthQrcode failed: unknown result';
};
TalkServiceClient.prototype.getBlockedContactIds = function(callback) {
  this.send_getBlockedContactIds(callback); 
  if (!callback) {
    return this.recv_getBlockedContactIds();
  }
};

TalkServiceClient.prototype.send_getBlockedContactIds = function(callback) {
  this.output.writeMessageBegin('getBlockedContactIds', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getBlockedContactIds_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getBlockedContactIds();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getBlockedContactIds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getBlockedContactIds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getBlockedContactIds failed: unknown result';
};
TalkServiceClient.prototype.registerWithPhoneNumber = function(sessionId, migrationPincodeSessionId, callback) {
  this.send_registerWithPhoneNumber(sessionId, migrationPincodeSessionId, callback); 
  if (!callback) {
    return this.recv_registerWithPhoneNumber();
  }
};

TalkServiceClient.prototype.send_registerWithPhoneNumber = function(sessionId, migrationPincodeSessionId, callback) {
  this.output.writeMessageBegin('registerWithPhoneNumber', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sessionId: sessionId,
    migrationPincodeSessionId: migrationPincodeSessionId
  };
  var args = new TalkService_registerWithPhoneNumber_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerWithPhoneNumber();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_registerWithPhoneNumber = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_registerWithPhoneNumber_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerWithPhoneNumber failed: unknown result';
};
TalkServiceClient.prototype.registerWithPhoneNumberAndPassword = function(sessionId, keynm, encrypted, callback) {
  this.send_registerWithPhoneNumberAndPassword(sessionId, keynm, encrypted, callback); 
  if (!callback) {
    return this.recv_registerWithPhoneNumberAndPassword();
  }
};

TalkServiceClient.prototype.send_registerWithPhoneNumberAndPassword = function(sessionId, keynm, encrypted, callback) {
  this.output.writeMessageBegin('registerWithPhoneNumberAndPassword', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sessionId: sessionId,
    keynm: keynm,
    encrypted: encrypted
  };
  var args = new TalkService_registerWithPhoneNumberAndPassword_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerWithPhoneNumberAndPassword();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_registerWithPhoneNumberAndPassword = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_registerWithPhoneNumberAndPassword_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerWithPhoneNumberAndPassword failed: unknown result';
};
TalkServiceClient.prototype.getAnalyticsInfo = function(callback) {
  this.send_getAnalyticsInfo(callback); 
  if (!callback) {
    return this.recv_getAnalyticsInfo();
  }
};

TalkServiceClient.prototype.send_getAnalyticsInfo = function(callback) {
  this.output.writeMessageBegin('getAnalyticsInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getAnalyticsInfo_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getAnalyticsInfo();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getAnalyticsInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getAnalyticsInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAnalyticsInfo failed: unknown result';
};
TalkServiceClient.prototype.reportClientStatistics = function(reqSeq, category, count, callback) {
  this.send_reportClientStatistics(reqSeq, category, count, callback); 
  if (!callback) {
  this.recv_reportClientStatistics();
  }
};

TalkServiceClient.prototype.send_reportClientStatistics = function(reqSeq, category, count, callback) {
  this.output.writeMessageBegin('reportClientStatistics', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    category: category,
    count: count
  };
  var args = new TalkService_reportClientStatistics_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_reportClientStatistics();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_reportClientStatistics = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_reportClientStatistics_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.verifyPhoneNumberForLogin = function(verifierFromPhone, pinCodeForPhone, verifierFromLogin, callback) {
  this.send_verifyPhoneNumberForLogin(verifierFromPhone, pinCodeForPhone, verifierFromLogin, callback); 
  if (!callback) {
    return this.recv_verifyPhoneNumberForLogin();
  }
};

TalkServiceClient.prototype.send_verifyPhoneNumberForLogin = function(verifierFromPhone, pinCodeForPhone, verifierFromLogin, callback) {
  this.output.writeMessageBegin('verifyPhoneNumberForLogin', Thrift.MessageType.CALL, this.seqid);
  var params = {
    verifierFromPhone: verifierFromPhone,
    pinCodeForPhone: pinCodeForPhone,
    verifierFromLogin: verifierFromLogin
  };
  var args = new TalkService_verifyPhoneNumberForLogin_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_verifyPhoneNumberForLogin();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_verifyPhoneNumberForLogin = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_verifyPhoneNumberForLogin_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'verifyPhoneNumberForLogin failed: unknown result';
};
TalkServiceClient.prototype.verifyPhoneNumber = function(sessionId, pinCode, udidHash, migrationPincodeSessionId, oldUdidHash, callback) {
  this.send_verifyPhoneNumber(sessionId, pinCode, udidHash, migrationPincodeSessionId, oldUdidHash, callback); 
  if (!callback) {
    return this.recv_verifyPhoneNumber();
  }
};

TalkServiceClient.prototype.send_verifyPhoneNumber = function(sessionId, pinCode, udidHash, migrationPincodeSessionId, oldUdidHash, callback) {
  this.output.writeMessageBegin('verifyPhoneNumber', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sessionId: sessionId,
    pinCode: pinCode,
    udidHash: udidHash,
    migrationPincodeSessionId: migrationPincodeSessionId,
    oldUdidHash: oldUdidHash
  };
  var args = new TalkService_verifyPhoneNumber_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_verifyPhoneNumber();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_verifyPhoneNumber = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_verifyPhoneNumber_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'verifyPhoneNumber failed: unknown result';
};
TalkServiceClient.prototype.getBlockedContactIdsByRange = function(start, count, callback) {
  this.send_getBlockedContactIdsByRange(start, count, callback); 
  if (!callback) {
    return this.recv_getBlockedContactIdsByRange();
  }
};

TalkServiceClient.prototype.send_getBlockedContactIdsByRange = function(start, count, callback) {
  this.output.writeMessageBegin('getBlockedContactIdsByRange', Thrift.MessageType.CALL, this.seqid);
  var params = {
    start: start,
    count: count
  };
  var args = new TalkService_getBlockedContactIdsByRange_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getBlockedContactIdsByRange();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getBlockedContactIdsByRange = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getBlockedContactIdsByRange_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getBlockedContactIdsByRange failed: unknown result';
};
TalkServiceClient.prototype.getBlockedRecommendationIds = function(callback) {
  this.send_getBlockedRecommendationIds(callback); 
  if (!callback) {
    return this.recv_getBlockedRecommendationIds();
  }
};

TalkServiceClient.prototype.send_getBlockedRecommendationIds = function(callback) {
  this.output.writeMessageBegin('getBlockedRecommendationIds', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getBlockedRecommendationIds_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getBlockedRecommendationIds();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getBlockedRecommendationIds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getBlockedRecommendationIds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getBlockedRecommendationIds failed: unknown result';
};
TalkServiceClient.prototype.getBuddyBlockerIds = function(callback) {
  this.send_getBuddyBlockerIds(callback); 
  if (!callback) {
    return this.recv_getBuddyBlockerIds();
  }
};

TalkServiceClient.prototype.send_getBuddyBlockerIds = function(callback) {
  this.output.writeMessageBegin('getBuddyBlockerIds', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getBuddyBlockerIds_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getBuddyBlockerIds();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getBuddyBlockerIds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getBuddyBlockerIds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getBuddyBlockerIds failed: unknown result';
};
TalkServiceClient.prototype.getBuddyLocation = function(mid, index, callback) {
  this.send_getBuddyLocation(mid, index, callback); 
  if (!callback) {
    return this.recv_getBuddyLocation();
  }
};

TalkServiceClient.prototype.send_getBuddyLocation = function(mid, index, callback) {
  this.output.writeMessageBegin('getBuddyLocation', Thrift.MessageType.CALL, this.seqid);
  var params = {
    mid: mid,
    index: index
  };
  var args = new TalkService_getBuddyLocation_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getBuddyLocation();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getBuddyLocation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getBuddyLocation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getBuddyLocation failed: unknown result';
};
TalkServiceClient.prototype.getCompactContactsModifiedSince = function(timestamp, callback) {
  this.send_getCompactContactsModifiedSince(timestamp, callback); 
  if (!callback) {
    return this.recv_getCompactContactsModifiedSince();
  }
};

TalkServiceClient.prototype.send_getCompactContactsModifiedSince = function(timestamp, callback) {
  this.output.writeMessageBegin('getCompactContactsModifiedSince', Thrift.MessageType.CALL, this.seqid);
  var params = {
    timestamp: timestamp
  };
  var args = new TalkService_getCompactContactsModifiedSince_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getCompactContactsModifiedSince();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getCompactContactsModifiedSince = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getCompactContactsModifiedSince_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCompactContactsModifiedSince failed: unknown result';
};
TalkServiceClient.prototype.getCompactGroup = function(groupId, callback) {
  this.send_getCompactGroup(groupId, callback); 
  if (!callback) {
    return this.recv_getCompactGroup();
  }
};

TalkServiceClient.prototype.send_getCompactGroup = function(groupId, callback) {
  this.output.writeMessageBegin('getCompactGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    groupId: groupId
  };
  var args = new TalkService_getCompactGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getCompactGroup();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getCompactGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getCompactGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCompactGroup failed: unknown result';
};
TalkServiceClient.prototype.getCompactRoom = function(roomId, callback) {
  this.send_getCompactRoom(roomId, callback); 
  if (!callback) {
    return this.recv_getCompactRoom();
  }
};

TalkServiceClient.prototype.send_getCompactRoom = function(roomId, callback) {
  this.output.writeMessageBegin('getCompactRoom', Thrift.MessageType.CALL, this.seqid);
  var params = {
    roomId: roomId
  };
  var args = new TalkService_getCompactRoom_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getCompactRoom();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getCompactRoom = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getCompactRoom_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCompactRoom failed: unknown result';
};
TalkServiceClient.prototype.getContact = function(id, callback) {
  this.send_getContact(id, callback); 
  if (!callback) {
    return this.recv_getContact();
  }
};

TalkServiceClient.prototype.send_getContact = function(id, callback) {
  this.output.writeMessageBegin('getContact', Thrift.MessageType.CALL, this.seqid);
  var params = {
    id: id
  };
  var args = new TalkService_getContact_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getContact();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getContact = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getContact_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getContact failed: unknown result';
};
TalkServiceClient.prototype.getContacts = function(ids, callback) {
  this.send_getContacts(ids, callback); 
  if (!callback) {
    return this.recv_getContacts();
  }
};

TalkServiceClient.prototype.send_getContacts = function(ids, callback) {
  this.output.writeMessageBegin('getContacts', Thrift.MessageType.CALL, this.seqid);
  var params = {
    ids: ids
  };
  var args = new TalkService_getContacts_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getContacts();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getContacts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getContacts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getContacts failed: unknown result';
};
TalkServiceClient.prototype.getContactWithFriendRequestStatus = function(id, callback) {
  this.send_getContactWithFriendRequestStatus(id, callback); 
  if (!callback) {
    return this.recv_getContactWithFriendRequestStatus();
  }
};

TalkServiceClient.prototype.send_getContactWithFriendRequestStatus = function(id, callback) {
  this.output.writeMessageBegin('getContactWithFriendRequestStatus', Thrift.MessageType.CALL, this.seqid);
  var params = {
    id: id
  };
  var args = new TalkService_getContactWithFriendRequestStatus_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getContactWithFriendRequestStatus();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getContactWithFriendRequestStatus = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getContactWithFriendRequestStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getContactWithFriendRequestStatus failed: unknown result';
};
TalkServiceClient.prototype.getCountryWithRequestIp = function(callback) {
  this.send_getCountryWithRequestIp(callback); 
  if (!callback) {
    return this.recv_getCountryWithRequestIp();
  }
};

TalkServiceClient.prototype.send_getCountryWithRequestIp = function(callback) {
  this.output.writeMessageBegin('getCountryWithRequestIp', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getCountryWithRequestIp_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getCountryWithRequestIp();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getCountryWithRequestIp = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getCountryWithRequestIp_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountryWithRequestIp failed: unknown result';
};
TalkServiceClient.prototype.getFavoriteMids = function(callback) {
  this.send_getFavoriteMids(callback); 
  if (!callback) {
    return this.recv_getFavoriteMids();
  }
};

TalkServiceClient.prototype.send_getFavoriteMids = function(callback) {
  this.output.writeMessageBegin('getFavoriteMids', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getFavoriteMids_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getFavoriteMids();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getFavoriteMids = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getFavoriteMids_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFavoriteMids failed: unknown result';
};
TalkServiceClient.prototype.getGroup = function(groupId, callback) {
  this.send_getGroup(groupId, callback); 
  if (!callback) {
    return this.recv_getGroup();
  }
};

TalkServiceClient.prototype.send_getGroup = function(groupId, callback) {
  this.output.writeMessageBegin('getGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    groupId: groupId
  };
  var args = new TalkService_getGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getGroup();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getGroup failed: unknown result';
};
TalkServiceClient.prototype.getGroupIdsInvited = function(callback) {
  this.send_getGroupIdsInvited(callback); 
  if (!callback) {
    return this.recv_getGroupIdsInvited();
  }
};

TalkServiceClient.prototype.send_getGroupIdsInvited = function(callback) {
  this.output.writeMessageBegin('getGroupIdsInvited', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getGroupIdsInvited_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getGroupIdsInvited();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getGroupIdsInvited = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getGroupIdsInvited_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getGroupIdsInvited failed: unknown result';
};
TalkServiceClient.prototype.getGroupIdsJoined = function(callback) {
  this.send_getGroupIdsJoined(callback); 
  if (!callback) {
    return this.recv_getGroupIdsJoined();
  }
};

TalkServiceClient.prototype.send_getGroupIdsJoined = function(callback) {
  this.output.writeMessageBegin('getGroupIdsJoined', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getGroupIdsJoined_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getGroupIdsJoined();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getGroupIdsJoined = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getGroupIdsJoined_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getGroupIdsJoined failed: unknown result';
};
TalkServiceClient.prototype.getGroups = function(groupIds, callback) {
  this.send_getGroups(groupIds, callback); 
  if (!callback) {
    return this.recv_getGroups();
  }
};

TalkServiceClient.prototype.send_getGroups = function(groupIds, callback) {
  this.output.writeMessageBegin('getGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    groupIds: groupIds
  };
  var args = new TalkService_getGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getGroups();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getGroups failed: unknown result';
};
TalkServiceClient.prototype.getHiddenContactMids = function(callback) {
  this.send_getHiddenContactMids(callback); 
  if (!callback) {
    return this.recv_getHiddenContactMids();
  }
};

TalkServiceClient.prototype.send_getHiddenContactMids = function(callback) {
  this.output.writeMessageBegin('getHiddenContactMids', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getHiddenContactMids_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getHiddenContactMids();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getHiddenContactMids = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getHiddenContactMids_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getHiddenContactMids failed: unknown result';
};
TalkServiceClient.prototype.getIdentityIdentifier = function(callback) {
  this.send_getIdentityIdentifier(callback); 
  if (!callback) {
    return this.recv_getIdentityIdentifier();
  }
};

TalkServiceClient.prototype.send_getIdentityIdentifier = function(callback) {
  this.output.writeMessageBegin('getIdentityIdentifier', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getIdentityIdentifier_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getIdentityIdentifier();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getIdentityIdentifier = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getIdentityIdentifier_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getIdentityIdentifier failed: unknown result';
};
TalkServiceClient.prototype.getLastAnnouncementIndex = function(callback) {
  this.send_getLastAnnouncementIndex(callback); 
  if (!callback) {
    return this.recv_getLastAnnouncementIndex();
  }
};

TalkServiceClient.prototype.send_getLastAnnouncementIndex = function(callback) {
  this.output.writeMessageBegin('getLastAnnouncementIndex', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getLastAnnouncementIndex_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getLastAnnouncementIndex();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getLastAnnouncementIndex = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getLastAnnouncementIndex_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getLastAnnouncementIndex failed: unknown result';
};
TalkServiceClient.prototype.getLastOpRevision = function(callback) {
  this.send_getLastOpRevision(callback); 
  if (!callback) {
    return this.recv_getLastOpRevision();
  }
};

TalkServiceClient.prototype.send_getLastOpRevision = function(callback) {
  this.output.writeMessageBegin('getLastOpRevision', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getLastOpRevision_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getLastOpRevision();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getLastOpRevision = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getLastOpRevision_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getLastOpRevision failed: unknown result';
};
TalkServiceClient.prototype.getSuggestRevisions = function(callback) {
  this.send_getSuggestRevisions(callback); 
  if (!callback) {
    return this.recv_getSuggestRevisions();
  }
};

TalkServiceClient.prototype.send_getSuggestRevisions = function(callback) {
  this.output.writeMessageBegin('getSuggestRevisions', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getSuggestRevisions_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getSuggestRevisions();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getSuggestRevisions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getSuggestRevisions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSuggestRevisions failed: unknown result';
};
TalkServiceClient.prototype.getPreviousMessagesV2WithReadCount = function(messageBoxId, endMessageId, messagesCount, callback) {
  this.send_getPreviousMessagesV2WithReadCount(messageBoxId, endMessageId, messagesCount, callback); 
  if (!callback) {
    return this.recv_getPreviousMessagesV2WithReadCount();
  }
};

TalkServiceClient.prototype.send_getPreviousMessagesV2WithReadCount = function(messageBoxId, endMessageId, messagesCount, callback) {
  this.output.writeMessageBegin('getPreviousMessagesV2WithReadCount', Thrift.MessageType.CALL, this.seqid);
  var params = {
    messageBoxId: messageBoxId,
    endMessageId: endMessageId,
    messagesCount: messagesCount
  };
  var args = new TalkService_getPreviousMessagesV2WithReadCount_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getPreviousMessagesV2WithReadCount();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getPreviousMessagesV2WithReadCount = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getPreviousMessagesV2WithReadCount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPreviousMessagesV2WithReadCount failed: unknown result';
};
TalkServiceClient.prototype.getMessageBox = function(channelId, messageBoxId, lastMessagesCount, callback) {
  this.send_getMessageBox(channelId, messageBoxId, lastMessagesCount, callback); 
  if (!callback) {
    return this.recv_getMessageBox();
  }
};

TalkServiceClient.prototype.send_getMessageBox = function(channelId, messageBoxId, lastMessagesCount, callback) {
  this.output.writeMessageBegin('getMessageBox', Thrift.MessageType.CALL, this.seqid);
  var params = {
    channelId: channelId,
    messageBoxId: messageBoxId,
    lastMessagesCount: lastMessagesCount
  };
  var args = new TalkService_getMessageBox_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getMessageBox();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getMessageBox = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getMessageBox_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMessageBox failed: unknown result';
};
TalkServiceClient.prototype.getMessageBoxCompactWrapUp = function(mid, callback) {
  this.send_getMessageBoxCompactWrapUp(mid, callback); 
  if (!callback) {
    return this.recv_getMessageBoxCompactWrapUp();
  }
};

TalkServiceClient.prototype.send_getMessageBoxCompactWrapUp = function(mid, callback) {
  this.output.writeMessageBegin('getMessageBoxCompactWrapUp', Thrift.MessageType.CALL, this.seqid);
  var params = {
    mid: mid
  };
  var args = new TalkService_getMessageBoxCompactWrapUp_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getMessageBoxCompactWrapUp();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getMessageBoxCompactWrapUp = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getMessageBoxCompactWrapUp_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMessageBoxCompactWrapUp failed: unknown result';
};
TalkServiceClient.prototype.getMessageBoxCompactWrapUpList = function(start, messageBoxCount, callback) {
  this.send_getMessageBoxCompactWrapUpList(start, messageBoxCount, callback); 
  if (!callback) {
    return this.recv_getMessageBoxCompactWrapUpList();
  }
};

TalkServiceClient.prototype.send_getMessageBoxCompactWrapUpList = function(start, messageBoxCount, callback) {
  this.output.writeMessageBegin('getMessageBoxCompactWrapUpList', Thrift.MessageType.CALL, this.seqid);
  var params = {
    start: start,
    messageBoxCount: messageBoxCount
  };
  var args = new TalkService_getMessageBoxCompactWrapUpList_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getMessageBoxCompactWrapUpList();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getMessageBoxCompactWrapUpList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getMessageBoxCompactWrapUpList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMessageBoxCompactWrapUpList failed: unknown result';
};
TalkServiceClient.prototype.getMessageBoxList = function(channelId, lastMessagesCount, callback) {
  this.send_getMessageBoxList(channelId, lastMessagesCount, callback); 
  if (!callback) {
    return this.recv_getMessageBoxList();
  }
};

TalkServiceClient.prototype.send_getMessageBoxList = function(channelId, lastMessagesCount, callback) {
  this.output.writeMessageBegin('getMessageBoxList', Thrift.MessageType.CALL, this.seqid);
  var params = {
    channelId: channelId,
    lastMessagesCount: lastMessagesCount
  };
  var args = new TalkService_getMessageBoxList_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getMessageBoxList();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getMessageBoxList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getMessageBoxList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMessageBoxList failed: unknown result';
};
TalkServiceClient.prototype.getMessageBoxListByStatus = function(channelId, lastMessagesCount, status, callback) {
  this.send_getMessageBoxListByStatus(channelId, lastMessagesCount, status, callback); 
  if (!callback) {
    return this.recv_getMessageBoxListByStatus();
  }
};

TalkServiceClient.prototype.send_getMessageBoxListByStatus = function(channelId, lastMessagesCount, status, callback) {
  this.output.writeMessageBegin('getMessageBoxListByStatus', Thrift.MessageType.CALL, this.seqid);
  var params = {
    channelId: channelId,
    lastMessagesCount: lastMessagesCount,
    status: status
  };
  var args = new TalkService_getMessageBoxListByStatus_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getMessageBoxListByStatus();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getMessageBoxListByStatus = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getMessageBoxListByStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMessageBoxListByStatus failed: unknown result';
};
TalkServiceClient.prototype.getMessageBoxWrapUp = function(mid, callback) {
  this.send_getMessageBoxWrapUp(mid, callback); 
  if (!callback) {
    return this.recv_getMessageBoxWrapUp();
  }
};

TalkServiceClient.prototype.send_getMessageBoxWrapUp = function(mid, callback) {
  this.output.writeMessageBegin('getMessageBoxWrapUp', Thrift.MessageType.CALL, this.seqid);
  var params = {
    mid: mid
  };
  var args = new TalkService_getMessageBoxWrapUp_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getMessageBoxWrapUp();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getMessageBoxWrapUp = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getMessageBoxWrapUp_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMessageBoxWrapUp failed: unknown result';
};
TalkServiceClient.prototype.getMessageBoxWrapUpList = function(start, messageBoxCount, callback) {
  this.send_getMessageBoxWrapUpList(start, messageBoxCount, callback); 
  if (!callback) {
    return this.recv_getMessageBoxWrapUpList();
  }
};

TalkServiceClient.prototype.send_getMessageBoxWrapUpList = function(start, messageBoxCount, callback) {
  this.output.writeMessageBegin('getMessageBoxWrapUpList', Thrift.MessageType.CALL, this.seqid);
  var params = {
    start: start,
    messageBoxCount: messageBoxCount
  };
  var args = new TalkService_getMessageBoxWrapUpList_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getMessageBoxWrapUpList();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getMessageBoxWrapUpList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getMessageBoxWrapUpList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMessageBoxWrapUpList failed: unknown result';
};
TalkServiceClient.prototype.getMessagesBySequenceNumber = function(channelId, messageBoxId, startSeq, endSeq, callback) {
  this.send_getMessagesBySequenceNumber(channelId, messageBoxId, startSeq, endSeq, callback); 
  if (!callback) {
    return this.recv_getMessagesBySequenceNumber();
  }
};

TalkServiceClient.prototype.send_getMessagesBySequenceNumber = function(channelId, messageBoxId, startSeq, endSeq, callback) {
  this.output.writeMessageBegin('getMessagesBySequenceNumber', Thrift.MessageType.CALL, this.seqid);
  var params = {
    channelId: channelId,
    messageBoxId: messageBoxId,
    startSeq: startSeq,
    endSeq: endSeq
  };
  var args = new TalkService_getMessagesBySequenceNumber_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getMessagesBySequenceNumber();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getMessagesBySequenceNumber = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getMessagesBySequenceNumber_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMessagesBySequenceNumber failed: unknown result';
};
TalkServiceClient.prototype.getNextMessages = function(messageBoxId, startSeq, messagesCount, callback) {
  this.send_getNextMessages(messageBoxId, startSeq, messagesCount, callback); 
  if (!callback) {
    return this.recv_getNextMessages();
  }
};

TalkServiceClient.prototype.send_getNextMessages = function(messageBoxId, startSeq, messagesCount, callback) {
  this.output.writeMessageBegin('getNextMessages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    messageBoxId: messageBoxId,
    startSeq: startSeq,
    messagesCount: messagesCount
  };
  var args = new TalkService_getNextMessages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getNextMessages();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getNextMessages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getNextMessages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNextMessages failed: unknown result';
};
TalkServiceClient.prototype.getNotificationPolicy = function(carrier, callback) {
  this.send_getNotificationPolicy(carrier, callback); 
  if (!callback) {
    return this.recv_getNotificationPolicy();
  }
};

TalkServiceClient.prototype.send_getNotificationPolicy = function(carrier, callback) {
  this.output.writeMessageBegin('getNotificationPolicy', Thrift.MessageType.CALL, this.seqid);
  var params = {
    carrier: carrier
  };
  var args = new TalkService_getNotificationPolicy_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getNotificationPolicy();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getNotificationPolicy = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getNotificationPolicy_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNotificationPolicy failed: unknown result';
};
TalkServiceClient.prototype.getPreviousMessages = function(messageBoxId, endSeq, messagesCount, callback) {
  this.send_getPreviousMessages(messageBoxId, endSeq, messagesCount, callback); 
  if (!callback) {
    return this.recv_getPreviousMessages();
  }
};

TalkServiceClient.prototype.send_getPreviousMessages = function(messageBoxId, endSeq, messagesCount, callback) {
  this.output.writeMessageBegin('getPreviousMessages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    messageBoxId: messageBoxId,
    endSeq: endSeq,
    messagesCount: messagesCount
  };
  var args = new TalkService_getPreviousMessages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getPreviousMessages();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getPreviousMessages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getPreviousMessages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPreviousMessages failed: unknown result';
};
TalkServiceClient.prototype.getProfile = function(callback) {
  this.send_getProfile(callback); 
  if (!callback) {
    return this.recv_getProfile();
  }
};

TalkServiceClient.prototype.send_getProfile = function(callback) {
  this.output.writeMessageBegin('getProfile', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getProfile_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getProfile();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getProfile = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getProfile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getProfile failed: unknown result';
};
TalkServiceClient.prototype.getProximityMatchCandidateList = function(sessionId, callback) {
  this.send_getProximityMatchCandidateList(sessionId, callback); 
  if (!callback) {
    return this.recv_getProximityMatchCandidateList();
  }
};

TalkServiceClient.prototype.send_getProximityMatchCandidateList = function(sessionId, callback) {
  this.output.writeMessageBegin('getProximityMatchCandidateList', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sessionId: sessionId
  };
  var args = new TalkService_getProximityMatchCandidateList_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getProximityMatchCandidateList();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getProximityMatchCandidateList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getProximityMatchCandidateList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getProximityMatchCandidateList failed: unknown result';
};
TalkServiceClient.prototype.getProximityMatchCandidates = function(sessionId, callback) {
  this.send_getProximityMatchCandidates(sessionId, callback); 
  if (!callback) {
    return this.recv_getProximityMatchCandidates();
  }
};

TalkServiceClient.prototype.send_getProximityMatchCandidates = function(sessionId, callback) {
  this.output.writeMessageBegin('getProximityMatchCandidates', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sessionId: sessionId
  };
  var args = new TalkService_getProximityMatchCandidates_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getProximityMatchCandidates();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getProximityMatchCandidates = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getProximityMatchCandidates_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getProximityMatchCandidates failed: unknown result';
};
TalkServiceClient.prototype.getRecentMessages = function(messageBoxId, messagesCount, callback) {
  this.send_getRecentMessages(messageBoxId, messagesCount, callback); 
  if (!callback) {
    return this.recv_getRecentMessages();
  }
};

TalkServiceClient.prototype.send_getRecentMessages = function(messageBoxId, messagesCount, callback) {
  this.output.writeMessageBegin('getRecentMessages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    messageBoxId: messageBoxId,
    messagesCount: messagesCount
  };
  var args = new TalkService_getRecentMessages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getRecentMessages();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getRecentMessages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getRecentMessages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRecentMessages failed: unknown result';
};
TalkServiceClient.prototype.getRecommendationIds = function(callback) {
  this.send_getRecommendationIds(callback); 
  if (!callback) {
    return this.recv_getRecommendationIds();
  }
};

TalkServiceClient.prototype.send_getRecommendationIds = function(callback) {
  this.output.writeMessageBegin('getRecommendationIds', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getRecommendationIds_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getRecommendationIds();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getRecommendationIds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getRecommendationIds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRecommendationIds failed: unknown result';
};
TalkServiceClient.prototype.getRoom = function(roomId, callback) {
  this.send_getRoom(roomId, callback); 
  if (!callback) {
    return this.recv_getRoom();
  }
};

TalkServiceClient.prototype.send_getRoom = function(roomId, callback) {
  this.output.writeMessageBegin('getRoom', Thrift.MessageType.CALL, this.seqid);
  var params = {
    roomId: roomId
  };
  var args = new TalkService_getRoom_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getRoom();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getRoom = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getRoom_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRoom failed: unknown result';
};
TalkServiceClient.prototype.getRSAKeyInfo = function(provider, callback) {
  this.send_getRSAKeyInfo(provider, callback); 
  if (!callback) {
    return this.recv_getRSAKeyInfo();
  }
};

TalkServiceClient.prototype.send_getRSAKeyInfo = function(provider, callback) {
  this.output.writeMessageBegin('getRSAKeyInfo', Thrift.MessageType.CALL, this.seqid);
  var params = {
    provider: provider
  };
  var args = new TalkService_getRSAKeyInfo_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getRSAKeyInfo();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getRSAKeyInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getRSAKeyInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRSAKeyInfo failed: unknown result';
};
TalkServiceClient.prototype.getServerTime = function(callback) {
  this.send_getServerTime(callback); 
  if (!callback) {
    return this.recv_getServerTime();
  }
};

TalkServiceClient.prototype.send_getServerTime = function(callback) {
  this.output.writeMessageBegin('getServerTime', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getServerTime_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getServerTime();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getServerTime = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getServerTime_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getServerTime failed: unknown result';
};
TalkServiceClient.prototype.getSessions = function(callback) {
  this.send_getSessions(callback); 
  if (!callback) {
    return this.recv_getSessions();
  }
};

TalkServiceClient.prototype.send_getSessions = function(callback) {
  this.output.writeMessageBegin('getSessions', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getSessions_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getSessions();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getSessions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getSessions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSessions failed: unknown result';
};
TalkServiceClient.prototype.getSettings = function(callback) {
  this.send_getSettings(callback); 
  if (!callback) {
    return this.recv_getSettings();
  }
};

TalkServiceClient.prototype.send_getSettings = function(callback) {
  this.output.writeMessageBegin('getSettings', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getSettings_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getSettings();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getSettings = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getSettings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSettings failed: unknown result';
};
TalkServiceClient.prototype.getGroupsV2 = function(groupIds, callback) {
  this.send_getGroupsV2(groupIds, callback); 
  if (!callback) {
    return this.recv_getGroupsV2();
  }
};

TalkServiceClient.prototype.send_getGroupsV2 = function(groupIds, callback) {
  this.output.writeMessageBegin('getGroupsV2', Thrift.MessageType.CALL, this.seqid);
  var params = {
    groupIds: groupIds
  };
  var args = new TalkService_getGroupsV2_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getGroupsV2();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getGroupsV2 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getGroupsV2_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getGroupsV2 failed: unknown result';
};
TalkServiceClient.prototype.getSettingsAttributes = function(attrBitset, callback) {
  this.send_getSettingsAttributes(attrBitset, callback); 
  if (!callback) {
    return this.recv_getSettingsAttributes();
  }
};

TalkServiceClient.prototype.send_getSettingsAttributes = function(attrBitset, callback) {
  this.output.writeMessageBegin('getSettingsAttributes', Thrift.MessageType.CALL, this.seqid);
  var params = {
    attrBitset: attrBitset
  };
  var args = new TalkService_getSettingsAttributes_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getSettingsAttributes();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getSettingsAttributes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getSettingsAttributes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSettingsAttributes failed: unknown result';
};
TalkServiceClient.prototype.getSystemConfiguration = function(callback) {
  this.send_getSystemConfiguration(callback); 
  if (!callback) {
    return this.recv_getSystemConfiguration();
  }
};

TalkServiceClient.prototype.send_getSystemConfiguration = function(callback) {
  this.output.writeMessageBegin('getSystemConfiguration', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getSystemConfiguration_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getSystemConfiguration();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getSystemConfiguration = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getSystemConfiguration_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSystemConfiguration failed: unknown result';
};
TalkServiceClient.prototype.getUserTicket = function(callback) {
  this.send_getUserTicket(callback); 
  if (!callback) {
    return this.recv_getUserTicket();
  }
};

TalkServiceClient.prototype.send_getUserTicket = function(callback) {
  this.output.writeMessageBegin('getUserTicket', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getUserTicket_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getUserTicket();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getUserTicket = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getUserTicket_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserTicket failed: unknown result';
};
TalkServiceClient.prototype.getWapInvitation = function(invitationHash, callback) {
  this.send_getWapInvitation(invitationHash, callback); 
  if (!callback) {
    return this.recv_getWapInvitation();
  }
};

TalkServiceClient.prototype.send_getWapInvitation = function(invitationHash, callback) {
  this.output.writeMessageBegin('getWapInvitation', Thrift.MessageType.CALL, this.seqid);
  var params = {
    invitationHash: invitationHash
  };
  var args = new TalkService_getWapInvitation_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getWapInvitation();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getWapInvitation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getWapInvitation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getWapInvitation failed: unknown result';
};
TalkServiceClient.prototype.invalidateUserTicket = function(callback) {
  this.send_invalidateUserTicket(callback); 
  if (!callback) {
  this.recv_invalidateUserTicket();
  }
};

TalkServiceClient.prototype.send_invalidateUserTicket = function(callback) {
  this.output.writeMessageBegin('invalidateUserTicket', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_invalidateUserTicket_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_invalidateUserTicket();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_invalidateUserTicket = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_invalidateUserTicket_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.inviteFriendsBySms = function(phoneNumberList, callback) {
  this.send_inviteFriendsBySms(phoneNumberList, callback); 
  if (!callback) {
  this.recv_inviteFriendsBySms();
  }
};

TalkServiceClient.prototype.send_inviteFriendsBySms = function(phoneNumberList, callback) {
  this.output.writeMessageBegin('inviteFriendsBySms', Thrift.MessageType.CALL, this.seqid);
  var params = {
    phoneNumberList: phoneNumberList
  };
  var args = new TalkService_inviteFriendsBySms_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_inviteFriendsBySms();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_inviteFriendsBySms = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_inviteFriendsBySms_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.inviteIntoGroup = function(reqSeq, groupId, contactIds, callback) {
  this.send_inviteIntoGroup(reqSeq, groupId, contactIds, callback); 
  if (!callback) {
  this.recv_inviteIntoGroup();
  }
};

TalkServiceClient.prototype.send_inviteIntoGroup = function(reqSeq, groupId, contactIds, callback) {
  this.output.writeMessageBegin('inviteIntoGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    groupId: groupId,
    contactIds: contactIds
  };
  var args = new TalkService_inviteIntoGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_inviteIntoGroup();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_inviteIntoGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_inviteIntoGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.inviteIntoRoom = function(reqSeq, roomId, contactIds, callback) {
  this.send_inviteIntoRoom(reqSeq, roomId, contactIds, callback); 
  if (!callback) {
  this.recv_inviteIntoRoom();
  }
};

TalkServiceClient.prototype.send_inviteIntoRoom = function(reqSeq, roomId, contactIds, callback) {
  this.output.writeMessageBegin('inviteIntoRoom', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    roomId: roomId,
    contactIds: contactIds
  };
  var args = new TalkService_inviteIntoRoom_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_inviteIntoRoom();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_inviteIntoRoom = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_inviteIntoRoom_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.inviteViaEmail = function(reqSeq, email, name, callback) {
  this.send_inviteViaEmail(reqSeq, email, name, callback); 
  if (!callback) {
  this.recv_inviteViaEmail();
  }
};

TalkServiceClient.prototype.send_inviteViaEmail = function(reqSeq, email, name, callback) {
  this.output.writeMessageBegin('inviteViaEmail', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    email: email,
    name: name
  };
  var args = new TalkService_inviteViaEmail_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_inviteViaEmail();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_inviteViaEmail = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_inviteViaEmail_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.isIdentityIdentifierAvailable = function(provider, identifier, callback) {
  this.send_isIdentityIdentifierAvailable(provider, identifier, callback); 
  if (!callback) {
    return this.recv_isIdentityIdentifierAvailable();
  }
};

TalkServiceClient.prototype.send_isIdentityIdentifierAvailable = function(provider, identifier, callback) {
  this.output.writeMessageBegin('isIdentityIdentifierAvailable', Thrift.MessageType.CALL, this.seqid);
  var params = {
    provider: provider,
    identifier: identifier
  };
  var args = new TalkService_isIdentityIdentifierAvailable_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_isIdentityIdentifierAvailable();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_isIdentityIdentifierAvailable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_isIdentityIdentifierAvailable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isIdentityIdentifierAvailable failed: unknown result';
};
TalkServiceClient.prototype.isUseridAvailable = function(userid, callback) {
  this.send_isUseridAvailable(userid, callback); 
  if (!callback) {
    return this.recv_isUseridAvailable();
  }
};

TalkServiceClient.prototype.send_isUseridAvailable = function(userid, callback) {
  this.output.writeMessageBegin('isUseridAvailable', Thrift.MessageType.CALL, this.seqid);
  var params = {
    userid: userid
  };
  var args = new TalkService_isUseridAvailable_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_isUseridAvailable();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_isUseridAvailable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_isUseridAvailable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isUseridAvailable failed: unknown result';
};
TalkServiceClient.prototype.kickoutFromGroup = function(reqSeq, groupId, contactIds, callback) {
  this.send_kickoutFromGroup(reqSeq, groupId, contactIds, callback); 
  if (!callback) {
  this.recv_kickoutFromGroup();
  }
};

TalkServiceClient.prototype.send_kickoutFromGroup = function(reqSeq, groupId, contactIds, callback) {
  this.output.writeMessageBegin('kickoutFromGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    groupId: groupId,
    contactIds: contactIds
  };
  var args = new TalkService_kickoutFromGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_kickoutFromGroup();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_kickoutFromGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_kickoutFromGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.reissueGroupTicket = function(groupMid, callback) {
  this.send_reissueGroupTicket(groupMid, callback); 
  if (!callback) {
    return this.recv_reissueGroupTicket();
  }
};

TalkServiceClient.prototype.send_reissueGroupTicket = function(groupMid, callback) {
  this.output.writeMessageBegin('reissueGroupTicket', Thrift.MessageType.CALL, this.seqid);
  var params = {
    groupMid: groupMid
  };
  var args = new TalkService_reissueGroupTicket_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_reissueGroupTicket();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_reissueGroupTicket = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_reissueGroupTicket_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reissueGroupTicket failed: unknown result';
};
TalkServiceClient.prototype.findGroupByTicket = function(ticketId, callback) {
  this.send_findGroupByTicket(ticketId, callback); 
  if (!callback) {
    return this.recv_findGroupByTicket();
  }
};

TalkServiceClient.prototype.send_findGroupByTicket = function(ticketId, callback) {
  this.output.writeMessageBegin('findGroupByTicket', Thrift.MessageType.CALL, this.seqid);
  var params = {
    ticketId: ticketId
  };
  var args = new TalkService_findGroupByTicket_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findGroupByTicket();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_findGroupByTicket = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_findGroupByTicket_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findGroupByTicket failed: unknown result';
};
TalkServiceClient.prototype.leaveGroup = function(reqSeq, groupId, callback) {
  this.send_leaveGroup(reqSeq, groupId, callback); 
  if (!callback) {
  this.recv_leaveGroup();
  }
};

TalkServiceClient.prototype.send_leaveGroup = function(reqSeq, groupId, callback) {
  this.output.writeMessageBegin('leaveGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    groupId: groupId
  };
  var args = new TalkService_leaveGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_leaveGroup();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_leaveGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_leaveGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.leaveRoom = function(reqSeq, roomId, callback) {
  this.send_leaveRoom(reqSeq, roomId, callback); 
  if (!callback) {
  this.recv_leaveRoom();
  }
};

TalkServiceClient.prototype.send_leaveRoom = function(reqSeq, roomId, callback) {
  this.output.writeMessageBegin('leaveRoom', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    roomId: roomId
  };
  var args = new TalkService_leaveRoom_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_leaveRoom();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_leaveRoom = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_leaveRoom_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.loginWithIdentityCredential = function(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate, callback) {
  this.send_loginWithIdentityCredential(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate, callback); 
  if (!callback) {
    return this.recv_loginWithIdentityCredential();
  }
};

TalkServiceClient.prototype.send_loginWithIdentityCredential = function(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate, callback) {
  this.output.writeMessageBegin('loginWithIdentityCredential', Thrift.MessageType.CALL, this.seqid);
  var params = {
    identityProvider: identityProvider,
    identifier: identifier,
    password: password,
    keepLoggedIn: keepLoggedIn,
    accessLocation: accessLocation,
    systemName: systemName,
    certificate: certificate
  };
  var args = new TalkService_loginWithIdentityCredential_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_loginWithIdentityCredential();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_loginWithIdentityCredential = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_loginWithIdentityCredential_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loginWithIdentityCredential failed: unknown result';
};
TalkServiceClient.prototype.loginWithIdentityCredentialForCertificate = function(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate, callback) {
  this.send_loginWithIdentityCredentialForCertificate(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate, callback); 
  if (!callback) {
    return this.recv_loginWithIdentityCredentialForCertificate();
  }
};

TalkServiceClient.prototype.send_loginWithIdentityCredentialForCertificate = function(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate, callback) {
  this.output.writeMessageBegin('loginWithIdentityCredentialForCertificate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    identityProvider: identityProvider,
    identifier: identifier,
    password: password,
    keepLoggedIn: keepLoggedIn,
    accessLocation: accessLocation,
    systemName: systemName,
    certificate: certificate
  };
  var args = new TalkService_loginWithIdentityCredentialForCertificate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_loginWithIdentityCredentialForCertificate();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_loginWithIdentityCredentialForCertificate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_loginWithIdentityCredentialForCertificate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loginWithIdentityCredentialForCertificate failed: unknown result';
};
TalkServiceClient.prototype.loginWithVerifier = function(verifier, callback) {
  this.send_loginWithVerifier(verifier, callback); 
  if (!callback) {
    return this.recv_loginWithVerifier();
  }
};

TalkServiceClient.prototype.send_loginWithVerifier = function(verifier, callback) {
  this.output.writeMessageBegin('loginWithVerifier', Thrift.MessageType.CALL, this.seqid);
  var params = {
    verifier: verifier
  };
  var args = new TalkService_loginWithVerifier_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_loginWithVerifier();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_loginWithVerifier = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_loginWithVerifier_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loginWithVerifier failed: unknown result';
};
TalkServiceClient.prototype.loginWithVerifierForCerificate = function(verifier, callback) {
  this.send_loginWithVerifierForCerificate(verifier, callback); 
  if (!callback) {
    return this.recv_loginWithVerifierForCerificate();
  }
};

TalkServiceClient.prototype.send_loginWithVerifierForCerificate = function(verifier, callback) {
  this.output.writeMessageBegin('loginWithVerifierForCerificate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    verifier: verifier
  };
  var args = new TalkService_loginWithVerifierForCerificate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_loginWithVerifierForCerificate();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_loginWithVerifierForCerificate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_loginWithVerifierForCerificate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loginWithVerifierForCerificate failed: unknown result';
};
TalkServiceClient.prototype.loginWithVerifierForCertificate = function(verifier, callback) {
  this.send_loginWithVerifierForCertificate(verifier, callback); 
  if (!callback) {
    return this.recv_loginWithVerifierForCertificate();
  }
};

TalkServiceClient.prototype.send_loginWithVerifierForCertificate = function(verifier, callback) {
  this.output.writeMessageBegin('loginWithVerifierForCertificate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    verifier: verifier
  };
  var args = new TalkService_loginWithVerifierForCertificate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_loginWithVerifierForCertificate();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_loginWithVerifierForCertificate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_loginWithVerifierForCertificate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loginWithVerifierForCertificate failed: unknown result';
};
TalkServiceClient.prototype.logout = function(callback) {
  this.send_logout(callback); 
  if (!callback) {
  this.recv_logout();
  }
};

TalkServiceClient.prototype.send_logout = function(callback) {
  this.output.writeMessageBegin('logout', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_logout_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_logout();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_logout = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_logout_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.logoutSession = function(tokenKey, callback) {
  this.send_logoutSession(tokenKey, callback); 
  if (!callback) {
  this.recv_logoutSession();
  }
};

TalkServiceClient.prototype.send_logoutSession = function(tokenKey, callback) {
  this.output.writeMessageBegin('logoutSession', Thrift.MessageType.CALL, this.seqid);
  var params = {
    tokenKey: tokenKey
  };
  var args = new TalkService_logoutSession_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_logoutSession();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_logoutSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_logoutSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.noop = function(callback) {
  this.send_noop(callback); 
  if (!callback) {
  this.recv_noop();
  }
};

TalkServiceClient.prototype.send_noop = function(callback) {
  this.output.writeMessageBegin('noop', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_noop_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_noop();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_noop = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_noop_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.notifiedRedirect = function(paramMap, callback) {
  this.send_notifiedRedirect(paramMap, callback); 
  if (!callback) {
  this.recv_notifiedRedirect();
  }
};

TalkServiceClient.prototype.send_notifiedRedirect = function(paramMap, callback) {
  this.output.writeMessageBegin('notifiedRedirect', Thrift.MessageType.CALL, this.seqid);
  var params = {
    paramMap: paramMap
  };
  var args = new TalkService_notifiedRedirect_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_notifiedRedirect();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_notifiedRedirect = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_notifiedRedirect_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.notifyBuddyOnAir = function(seq, receiverMids, callback) {
  this.send_notifyBuddyOnAir(seq, receiverMids, callback); 
  if (!callback) {
    return this.recv_notifyBuddyOnAir();
  }
};

TalkServiceClient.prototype.send_notifyBuddyOnAir = function(seq, receiverMids, callback) {
  this.output.writeMessageBegin('notifyBuddyOnAir', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    receiverMids: receiverMids
  };
  var args = new TalkService_notifyBuddyOnAir_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_notifyBuddyOnAir();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_notifyBuddyOnAir = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_notifyBuddyOnAir_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'notifyBuddyOnAir failed: unknown result';
};
TalkServiceClient.prototype.notifyIndividualEvent = function(notificationStatus, receiverMids, callback) {
  this.send_notifyIndividualEvent(notificationStatus, receiverMids, callback); 
  if (!callback) {
  this.recv_notifyIndividualEvent();
  }
};

TalkServiceClient.prototype.send_notifyIndividualEvent = function(notificationStatus, receiverMids, callback) {
  this.output.writeMessageBegin('notifyIndividualEvent', Thrift.MessageType.CALL, this.seqid);
  var params = {
    notificationStatus: notificationStatus,
    receiverMids: receiverMids
  };
  var args = new TalkService_notifyIndividualEvent_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_notifyIndividualEvent();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_notifyIndividualEvent = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_notifyIndividualEvent_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.notifyInstalled = function(udidHash, applicationTypeWithExtensions, callback) {
  this.send_notifyInstalled(udidHash, applicationTypeWithExtensions, callback); 
  if (!callback) {
  this.recv_notifyInstalled();
  }
};

TalkServiceClient.prototype.send_notifyInstalled = function(udidHash, applicationTypeWithExtensions, callback) {
  this.output.writeMessageBegin('notifyInstalled', Thrift.MessageType.CALL, this.seqid);
  var params = {
    udidHash: udidHash,
    applicationTypeWithExtensions: applicationTypeWithExtensions
  };
  var args = new TalkService_notifyInstalled_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_notifyInstalled();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_notifyInstalled = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_notifyInstalled_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.notifyRegistrationComplete = function(udidHash, applicationTypeWithExtensions, callback) {
  this.send_notifyRegistrationComplete(udidHash, applicationTypeWithExtensions, callback); 
  if (!callback) {
  this.recv_notifyRegistrationComplete();
  }
};

TalkServiceClient.prototype.send_notifyRegistrationComplete = function(udidHash, applicationTypeWithExtensions, callback) {
  this.output.writeMessageBegin('notifyRegistrationComplete', Thrift.MessageType.CALL, this.seqid);
  var params = {
    udidHash: udidHash,
    applicationTypeWithExtensions: applicationTypeWithExtensions
  };
  var args = new TalkService_notifyRegistrationComplete_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_notifyRegistrationComplete();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_notifyRegistrationComplete = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_notifyRegistrationComplete_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.notifySleep = function(lastRev, badge, callback) {
  this.send_notifySleep(lastRev, badge, callback); 
  if (!callback) {
  this.recv_notifySleep();
  }
};

TalkServiceClient.prototype.send_notifySleep = function(lastRev, badge, callback) {
  this.output.writeMessageBegin('notifySleep', Thrift.MessageType.CALL, this.seqid);
  var params = {
    lastRev: lastRev,
    badge: badge
  };
  var args = new TalkService_notifySleep_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_notifySleep();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_notifySleep = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_notifySleep_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.notifyUpdated = function(lastRev, deviceInfo, callback) {
  this.send_notifyUpdated(lastRev, deviceInfo, callback); 
  if (!callback) {
  this.recv_notifyUpdated();
  }
};

TalkServiceClient.prototype.send_notifyUpdated = function(lastRev, deviceInfo, callback) {
  this.output.writeMessageBegin('notifyUpdated', Thrift.MessageType.CALL, this.seqid);
  var params = {
    lastRev: lastRev,
    deviceInfo: deviceInfo
  };
  var args = new TalkService_notifyUpdated_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_notifyUpdated();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_notifyUpdated = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_notifyUpdated_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.openProximityMatch = function(location, callback) {
  this.send_openProximityMatch(location, callback); 
  if (!callback) {
    return this.recv_openProximityMatch();
  }
};

TalkServiceClient.prototype.send_openProximityMatch = function(location, callback) {
  this.output.writeMessageBegin('openProximityMatch', Thrift.MessageType.CALL, this.seqid);
  var params = {
    location: location
  };
  var args = new TalkService_openProximityMatch_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_openProximityMatch();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_openProximityMatch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_openProximityMatch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'openProximityMatch failed: unknown result';
};
TalkServiceClient.prototype.registerBuddyUser = function(buddyId, registrarPassword, callback) {
  this.send_registerBuddyUser(buddyId, registrarPassword, callback); 
  if (!callback) {
    return this.recv_registerBuddyUser();
  }
};

TalkServiceClient.prototype.send_registerBuddyUser = function(buddyId, registrarPassword, callback) {
  this.output.writeMessageBegin('registerBuddyUser', Thrift.MessageType.CALL, this.seqid);
  var params = {
    buddyId: buddyId,
    registrarPassword: registrarPassword
  };
  var args = new TalkService_registerBuddyUser_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerBuddyUser();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_registerBuddyUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_registerBuddyUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerBuddyUser failed: unknown result';
};
TalkServiceClient.prototype.registerBuddyUserid = function(seq, userid, callback) {
  this.send_registerBuddyUserid(seq, userid, callback); 
  if (!callback) {
  this.recv_registerBuddyUserid();
  }
};

TalkServiceClient.prototype.send_registerBuddyUserid = function(seq, userid, callback) {
  this.output.writeMessageBegin('registerBuddyUserid', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    userid: userid
  };
  var args = new TalkService_registerBuddyUserid_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerBuddyUserid();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_registerBuddyUserid = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_registerBuddyUserid_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.registerDevice = function(sessionId, callback) {
  this.send_registerDevice(sessionId, callback); 
  if (!callback) {
    return this.recv_registerDevice();
  }
};

TalkServiceClient.prototype.send_registerDevice = function(sessionId, callback) {
  this.output.writeMessageBegin('registerDevice', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sessionId: sessionId
  };
  var args = new TalkService_registerDevice_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerDevice();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_registerDevice = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_registerDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerDevice failed: unknown result';
};
TalkServiceClient.prototype.registerDeviceWithIdentityCredential = function(sessionId, provider, identifier, verifier, callback) {
  this.send_registerDeviceWithIdentityCredential(sessionId, provider, identifier, verifier, callback); 
  if (!callback) {
    return this.recv_registerDeviceWithIdentityCredential();
  }
};

TalkServiceClient.prototype.send_registerDeviceWithIdentityCredential = function(sessionId, provider, identifier, verifier, callback) {
  this.output.writeMessageBegin('registerDeviceWithIdentityCredential', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sessionId: sessionId,
    provider: provider,
    identifier: identifier,
    verifier: verifier
  };
  var args = new TalkService_registerDeviceWithIdentityCredential_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerDeviceWithIdentityCredential();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_registerDeviceWithIdentityCredential = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_registerDeviceWithIdentityCredential_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerDeviceWithIdentityCredential failed: unknown result';
};
TalkServiceClient.prototype.registerDeviceWithoutPhoneNumber = function(region, udidHash, deviceInfo, callback) {
  this.send_registerDeviceWithoutPhoneNumber(region, udidHash, deviceInfo, callback); 
  if (!callback) {
    return this.recv_registerDeviceWithoutPhoneNumber();
  }
};

TalkServiceClient.prototype.send_registerDeviceWithoutPhoneNumber = function(region, udidHash, deviceInfo, callback) {
  this.output.writeMessageBegin('registerDeviceWithoutPhoneNumber', Thrift.MessageType.CALL, this.seqid);
  var params = {
    region: region,
    udidHash: udidHash,
    deviceInfo: deviceInfo
  };
  var args = new TalkService_registerDeviceWithoutPhoneNumber_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerDeviceWithoutPhoneNumber();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_registerDeviceWithoutPhoneNumber = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_registerDeviceWithoutPhoneNumber_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerDeviceWithoutPhoneNumber failed: unknown result';
};
TalkServiceClient.prototype.registerDeviceWithoutPhoneNumberWithIdentityCredential = function(region, udidHash, deviceInfo, provider, identifier, verifier, mid, migrationPincodeSessionId, callback) {
  this.send_registerDeviceWithoutPhoneNumberWithIdentityCredential(region, udidHash, deviceInfo, provider, identifier, verifier, mid, migrationPincodeSessionId, callback); 
  if (!callback) {
    return this.recv_registerDeviceWithoutPhoneNumberWithIdentityCredential();
  }
};

TalkServiceClient.prototype.send_registerDeviceWithoutPhoneNumberWithIdentityCredential = function(region, udidHash, deviceInfo, provider, identifier, verifier, mid, migrationPincodeSessionId, callback) {
  this.output.writeMessageBegin('registerDeviceWithoutPhoneNumberWithIdentityCredential', Thrift.MessageType.CALL, this.seqid);
  var params = {
    region: region,
    udidHash: udidHash,
    deviceInfo: deviceInfo,
    provider: provider,
    identifier: identifier,
    verifier: verifier,
    mid: mid,
    migrationPincodeSessionId: migrationPincodeSessionId
  };
  var args = new TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerDeviceWithoutPhoneNumberWithIdentityCredential();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_registerDeviceWithoutPhoneNumberWithIdentityCredential = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerDeviceWithoutPhoneNumberWithIdentityCredential failed: unknown result';
};
TalkServiceClient.prototype.registerUserid = function(reqSeq, userid, callback) {
  this.send_registerUserid(reqSeq, userid, callback); 
  if (!callback) {
    return this.recv_registerUserid();
  }
};

TalkServiceClient.prototype.send_registerUserid = function(reqSeq, userid, callback) {
  this.output.writeMessageBegin('registerUserid', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    userid: userid
  };
  var args = new TalkService_registerUserid_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerUserid();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_registerUserid = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_registerUserid_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerUserid failed: unknown result';
};
TalkServiceClient.prototype.registerWapDevice = function(invitationHash, guidHash, email, deviceInfo, callback) {
  this.send_registerWapDevice(invitationHash, guidHash, email, deviceInfo, callback); 
  if (!callback) {
    return this.recv_registerWapDevice();
  }
};

TalkServiceClient.prototype.send_registerWapDevice = function(invitationHash, guidHash, email, deviceInfo, callback) {
  this.output.writeMessageBegin('registerWapDevice', Thrift.MessageType.CALL, this.seqid);
  var params = {
    invitationHash: invitationHash,
    guidHash: guidHash,
    email: email,
    deviceInfo: deviceInfo
  };
  var args = new TalkService_registerWapDevice_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerWapDevice();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_registerWapDevice = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_registerWapDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerWapDevice failed: unknown result';
};
TalkServiceClient.prototype.registerWithExistingSnsIdAndIdentityCredential = function(identityCredential, region, udidHash, deviceInfo, callback) {
  this.send_registerWithExistingSnsIdAndIdentityCredential(identityCredential, region, udidHash, deviceInfo, callback); 
  if (!callback) {
    return this.recv_registerWithExistingSnsIdAndIdentityCredential();
  }
};

TalkServiceClient.prototype.send_registerWithExistingSnsIdAndIdentityCredential = function(identityCredential, region, udidHash, deviceInfo, callback) {
  this.output.writeMessageBegin('registerWithExistingSnsIdAndIdentityCredential', Thrift.MessageType.CALL, this.seqid);
  var params = {
    identityCredential: identityCredential,
    region: region,
    udidHash: udidHash,
    deviceInfo: deviceInfo
  };
  var args = new TalkService_registerWithExistingSnsIdAndIdentityCredential_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerWithExistingSnsIdAndIdentityCredential();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_registerWithExistingSnsIdAndIdentityCredential = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_registerWithExistingSnsIdAndIdentityCredential_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerWithExistingSnsIdAndIdentityCredential failed: unknown result';
};
TalkServiceClient.prototype.registerWithSnsId = function(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid, callback) {
  this.send_registerWithSnsId(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid, callback); 
  if (!callback) {
    return this.recv_registerWithSnsId();
  }
};

TalkServiceClient.prototype.send_registerWithSnsId = function(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid, callback) {
  this.output.writeMessageBegin('registerWithSnsId', Thrift.MessageType.CALL, this.seqid);
  var params = {
    snsIdType: snsIdType,
    snsAccessToken: snsAccessToken,
    region: region,
    udidHash: udidHash,
    deviceInfo: deviceInfo,
    mid: mid
  };
  var args = new TalkService_registerWithSnsId_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerWithSnsId();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_registerWithSnsId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_registerWithSnsId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerWithSnsId failed: unknown result';
};
TalkServiceClient.prototype.registerWithSnsIdAndIdentityCredential = function(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo, callback) {
  this.send_registerWithSnsIdAndIdentityCredential(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo, callback); 
  if (!callback) {
    return this.recv_registerWithSnsIdAndIdentityCredential();
  }
};

TalkServiceClient.prototype.send_registerWithSnsIdAndIdentityCredential = function(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo, callback) {
  this.output.writeMessageBegin('registerWithSnsIdAndIdentityCredential', Thrift.MessageType.CALL, this.seqid);
  var params = {
    snsIdType: snsIdType,
    snsAccessToken: snsAccessToken,
    identityCredential: identityCredential,
    region: region,
    udidHash: udidHash,
    deviceInfo: deviceInfo
  };
  var args = new TalkService_registerWithSnsIdAndIdentityCredential_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerWithSnsIdAndIdentityCredential();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_registerWithSnsIdAndIdentityCredential = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_registerWithSnsIdAndIdentityCredential_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerWithSnsIdAndIdentityCredential failed: unknown result';
};
TalkServiceClient.prototype.reissueDeviceCredential = function(callback) {
  this.send_reissueDeviceCredential(callback); 
  if (!callback) {
    return this.recv_reissueDeviceCredential();
  }
};

TalkServiceClient.prototype.send_reissueDeviceCredential = function(callback) {
  this.output.writeMessageBegin('reissueDeviceCredential', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_reissueDeviceCredential_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_reissueDeviceCredential();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_reissueDeviceCredential = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_reissueDeviceCredential_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reissueDeviceCredential failed: unknown result';
};
TalkServiceClient.prototype.reissueUserTicket = function(expirationTime, maxUseCount, callback) {
  this.send_reissueUserTicket(expirationTime, maxUseCount, callback); 
  if (!callback) {
    return this.recv_reissueUserTicket();
  }
};

TalkServiceClient.prototype.send_reissueUserTicket = function(expirationTime, maxUseCount, callback) {
  this.output.writeMessageBegin('reissueUserTicket', Thrift.MessageType.CALL, this.seqid);
  var params = {
    expirationTime: expirationTime,
    maxUseCount: maxUseCount
  };
  var args = new TalkService_reissueUserTicket_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_reissueUserTicket();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_reissueUserTicket = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_reissueUserTicket_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reissueUserTicket failed: unknown result';
};
TalkServiceClient.prototype.getMessageReadRange = function(chatIds, callback) {
  this.send_getMessageReadRange(chatIds, callback); 
  if (!callback) {
    return this.recv_getMessageReadRange();
  }
};

TalkServiceClient.prototype.send_getMessageReadRange = function(chatIds, callback) {
  this.output.writeMessageBegin('getMessageReadRange', Thrift.MessageType.CALL, this.seqid);
  var params = {
    chatIds: chatIds
  };
  var args = new TalkService_getMessageReadRange_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getMessageReadRange();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getMessageReadRange = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getMessageReadRange_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMessageReadRange failed: unknown result';
};
TalkServiceClient.prototype.rejectGroupInvitation = function(reqSeq, groupId, callback) {
  this.send_rejectGroupInvitation(reqSeq, groupId, callback); 
  if (!callback) {
  this.recv_rejectGroupInvitation();
  }
};

TalkServiceClient.prototype.send_rejectGroupInvitation = function(reqSeq, groupId, callback) {
  this.output.writeMessageBegin('rejectGroupInvitation', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    groupId: groupId
  };
  var args = new TalkService_rejectGroupInvitation_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_rejectGroupInvitation();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_rejectGroupInvitation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_rejectGroupInvitation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.releaseSession = function(callback) {
  this.send_releaseSession(callback); 
  if (!callback) {
  this.recv_releaseSession();
  }
};

TalkServiceClient.prototype.send_releaseSession = function(callback) {
  this.output.writeMessageBegin('releaseSession', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_releaseSession_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_releaseSession();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_releaseSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_releaseSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.removeAllMessages = function(seq, lastMessageId, callback) {
  this.send_removeAllMessages(seq, lastMessageId, callback); 
  if (!callback) {
  this.recv_removeAllMessages();
  }
};

TalkServiceClient.prototype.send_removeAllMessages = function(seq, lastMessageId, callback) {
  this.output.writeMessageBegin('removeAllMessages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    lastMessageId: lastMessageId
  };
  var args = new TalkService_removeAllMessages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeAllMessages();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_removeAllMessages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_removeAllMessages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.removeBuddyLocation = function(mid, index, callback) {
  this.send_removeBuddyLocation(mid, index, callback); 
  if (!callback) {
  this.recv_removeBuddyLocation();
  }
};

TalkServiceClient.prototype.send_removeBuddyLocation = function(mid, index, callback) {
  this.output.writeMessageBegin('removeBuddyLocation', Thrift.MessageType.CALL, this.seqid);
  var params = {
    mid: mid,
    index: index
  };
  var args = new TalkService_removeBuddyLocation_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeBuddyLocation();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_removeBuddyLocation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_removeBuddyLocation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.removeMessage = function(messageId, callback) {
  this.send_removeMessage(messageId, callback); 
  if (!callback) {
    return this.recv_removeMessage();
  }
};

TalkServiceClient.prototype.send_removeMessage = function(messageId, callback) {
  this.output.writeMessageBegin('removeMessage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    messageId: messageId
  };
  var args = new TalkService_removeMessage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeMessage();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_removeMessage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_removeMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeMessage failed: unknown result';
};
TalkServiceClient.prototype.makeUserAddMyselfAsContact = function(contactOwnerMid, callback) {
  this.send_makeUserAddMyselfAsContact(contactOwnerMid, callback); 
  if (!callback) {
    return this.recv_makeUserAddMyselfAsContact();
  }
};

TalkServiceClient.prototype.send_makeUserAddMyselfAsContact = function(contactOwnerMid, callback) {
  this.output.writeMessageBegin('makeUserAddMyselfAsContact', Thrift.MessageType.CALL, this.seqid);
  var params = {
    contactOwnerMid: contactOwnerMid
  };
  var args = new TalkService_makeUserAddMyselfAsContact_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_makeUserAddMyselfAsContact();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_makeUserAddMyselfAsContact = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_makeUserAddMyselfAsContact_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'makeUserAddMyselfAsContact failed: unknown result';
};
TalkServiceClient.prototype.removeMessageFromMyHome = function(messageId, callback) {
  this.send_removeMessageFromMyHome(messageId, callback); 
  if (!callback) {
    return this.recv_removeMessageFromMyHome();
  }
};

TalkServiceClient.prototype.send_removeMessageFromMyHome = function(messageId, callback) {
  this.output.writeMessageBegin('removeMessageFromMyHome', Thrift.MessageType.CALL, this.seqid);
  var params = {
    messageId: messageId
  };
  var args = new TalkService_removeMessageFromMyHome_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeMessageFromMyHome();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_removeMessageFromMyHome = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_removeMessageFromMyHome_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeMessageFromMyHome failed: unknown result';
};
TalkServiceClient.prototype.removeSnsId = function(snsIdType, callback) {
  this.send_removeSnsId(snsIdType, callback); 
  if (!callback) {
    return this.recv_removeSnsId();
  }
};

TalkServiceClient.prototype.send_removeSnsId = function(snsIdType, callback) {
  this.output.writeMessageBegin('removeSnsId', Thrift.MessageType.CALL, this.seqid);
  var params = {
    snsIdType: snsIdType
  };
  var args = new TalkService_removeSnsId_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeSnsId();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_removeSnsId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_removeSnsId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeSnsId failed: unknown result';
};
TalkServiceClient.prototype.report = function(syncOpRevision, category, report, callback) {
  this.send_report(syncOpRevision, category, report, callback); 
  if (!callback) {
  this.recv_report();
  }
};

TalkServiceClient.prototype.send_report = function(syncOpRevision, category, report, callback) {
  this.output.writeMessageBegin('report', Thrift.MessageType.CALL, this.seqid);
  var params = {
    syncOpRevision: syncOpRevision,
    category: category,
    report: report
  };
  var args = new TalkService_report_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_report();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_report = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_report_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.reportContacts = function(syncOpRevision, category, contactReports, actionType, callback) {
  this.send_reportContacts(syncOpRevision, category, contactReports, actionType, callback); 
  if (!callback) {
    return this.recv_reportContacts();
  }
};

TalkServiceClient.prototype.send_reportContacts = function(syncOpRevision, category, contactReports, actionType, callback) {
  this.output.writeMessageBegin('reportContacts', Thrift.MessageType.CALL, this.seqid);
  var params = {
    syncOpRevision: syncOpRevision,
    category: category,
    contactReports: contactReports,
    actionType: actionType
  };
  var args = new TalkService_reportContacts_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_reportContacts();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_reportContacts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_reportContacts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reportContacts failed: unknown result';
};
TalkServiceClient.prototype.reportGroups = function(syncOpRevision, groups, callback) {
  this.send_reportGroups(syncOpRevision, groups, callback); 
  if (!callback) {
  this.recv_reportGroups();
  }
};

TalkServiceClient.prototype.send_reportGroups = function(syncOpRevision, groups, callback) {
  this.output.writeMessageBegin('reportGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    syncOpRevision: syncOpRevision,
    groups: groups
  };
  var args = new TalkService_reportGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_reportGroups();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_reportGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_reportGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.reportProfile = function(syncOpRevision, profile, callback) {
  this.send_reportProfile(syncOpRevision, profile, callback); 
  if (!callback) {
  this.recv_reportProfile();
  }
};

TalkServiceClient.prototype.send_reportProfile = function(syncOpRevision, profile, callback) {
  this.output.writeMessageBegin('reportProfile', Thrift.MessageType.CALL, this.seqid);
  var params = {
    syncOpRevision: syncOpRevision,
    profile: profile
  };
  var args = new TalkService_reportProfile_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_reportProfile();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_reportProfile = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_reportProfile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.reportRooms = function(syncOpRevision, rooms, callback) {
  this.send_reportRooms(syncOpRevision, rooms, callback); 
  if (!callback) {
  this.recv_reportRooms();
  }
};

TalkServiceClient.prototype.send_reportRooms = function(syncOpRevision, rooms, callback) {
  this.output.writeMessageBegin('reportRooms', Thrift.MessageType.CALL, this.seqid);
  var params = {
    syncOpRevision: syncOpRevision,
    rooms: rooms
  };
  var args = new TalkService_reportRooms_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_reportRooms();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_reportRooms = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_reportRooms_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.findAndAddContactByMetaTag = function(reqSeq, userid, reference, callback) {
  this.send_findAndAddContactByMetaTag(reqSeq, userid, reference, callback); 
  if (!callback) {
    return this.recv_findAndAddContactByMetaTag();
  }
};

TalkServiceClient.prototype.send_findAndAddContactByMetaTag = function(reqSeq, userid, reference, callback) {
  this.output.writeMessageBegin('findAndAddContactByMetaTag', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    userid: userid,
    reference: reference
  };
  var args = new TalkService_findAndAddContactByMetaTag_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findAndAddContactByMetaTag();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_findAndAddContactByMetaTag = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_findAndAddContactByMetaTag_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findAndAddContactByMetaTag failed: unknown result';
};
TalkServiceClient.prototype.reportSettings = function(syncOpRevision, settings, callback) {
  this.send_reportSettings(syncOpRevision, settings, callback); 
  if (!callback) {
  this.recv_reportSettings();
  }
};

TalkServiceClient.prototype.send_reportSettings = function(syncOpRevision, settings, callback) {
  this.output.writeMessageBegin('reportSettings', Thrift.MessageType.CALL, this.seqid);
  var params = {
    syncOpRevision: syncOpRevision,
    settings: settings
  };
  var args = new TalkService_reportSettings_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_reportSettings();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_reportSettings = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_reportSettings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.reportSpam = function(chatMid, memberMids, spammerReasons, senderMids, spamMessageIds, spamMessages, callback) {
  this.send_reportSpam(chatMid, memberMids, spammerReasons, senderMids, spamMessageIds, spamMessages, callback); 
  if (!callback) {
  this.recv_reportSpam();
  }
};

TalkServiceClient.prototype.send_reportSpam = function(chatMid, memberMids, spammerReasons, senderMids, spamMessageIds, spamMessages, callback) {
  this.output.writeMessageBegin('reportSpam', Thrift.MessageType.CALL, this.seqid);
  var params = {
    chatMid: chatMid,
    memberMids: memberMids,
    spammerReasons: spammerReasons,
    senderMids: senderMids,
    spamMessageIds: spamMessageIds,
    spamMessages: spamMessages
  };
  var args = new TalkService_reportSpam_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_reportSpam();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_reportSpam = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_reportSpam_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.reportSpammer = function(spammerMid, spammerReasons, spamMessageIds, callback) {
  this.send_reportSpammer(spammerMid, spammerReasons, spamMessageIds, callback); 
  if (!callback) {
  this.recv_reportSpammer();
  }
};

TalkServiceClient.prototype.send_reportSpammer = function(spammerMid, spammerReasons, spamMessageIds, callback) {
  this.output.writeMessageBegin('reportSpammer', Thrift.MessageType.CALL, this.seqid);
  var params = {
    spammerMid: spammerMid,
    spammerReasons: spammerReasons,
    spamMessageIds: spamMessageIds
  };
  var args = new TalkService_reportSpammer_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_reportSpammer();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_reportSpammer = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_reportSpammer_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.requestAccountPasswordReset = function(provider, identifier, locale, callback) {
  this.send_requestAccountPasswordReset(provider, identifier, locale, callback); 
  if (!callback) {
  this.recv_requestAccountPasswordReset();
  }
};

TalkServiceClient.prototype.send_requestAccountPasswordReset = function(provider, identifier, locale, callback) {
  this.output.writeMessageBegin('requestAccountPasswordReset', Thrift.MessageType.CALL, this.seqid);
  var params = {
    provider: provider,
    identifier: identifier,
    locale: locale
  };
  var args = new TalkService_requestAccountPasswordReset_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_requestAccountPasswordReset();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_requestAccountPasswordReset = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_requestAccountPasswordReset_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.requestEmailConfirmation = function(emailConfirmation, callback) {
  this.send_requestEmailConfirmation(emailConfirmation, callback); 
  if (!callback) {
    return this.recv_requestEmailConfirmation();
  }
};

TalkServiceClient.prototype.send_requestEmailConfirmation = function(emailConfirmation, callback) {
  this.output.writeMessageBegin('requestEmailConfirmation', Thrift.MessageType.CALL, this.seqid);
  var params = {
    emailConfirmation: emailConfirmation
  };
  var args = new TalkService_requestEmailConfirmation_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_requestEmailConfirmation();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_requestEmailConfirmation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_requestEmailConfirmation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'requestEmailConfirmation failed: unknown result';
};
TalkServiceClient.prototype.requestIdentityUnbind = function(provider, identifier, callback) {
  this.send_requestIdentityUnbind(provider, identifier, callback); 
  if (!callback) {
  this.recv_requestIdentityUnbind();
  }
};

TalkServiceClient.prototype.send_requestIdentityUnbind = function(provider, identifier, callback) {
  this.output.writeMessageBegin('requestIdentityUnbind', Thrift.MessageType.CALL, this.seqid);
  var params = {
    provider: provider,
    identifier: identifier
  };
  var args = new TalkService_requestIdentityUnbind_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_requestIdentityUnbind();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_requestIdentityUnbind = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_requestIdentityUnbind_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.resendEmailConfirmation = function(verifier, callback) {
  this.send_resendEmailConfirmation(verifier, callback); 
  if (!callback) {
    return this.recv_resendEmailConfirmation();
  }
};

TalkServiceClient.prototype.send_resendEmailConfirmation = function(verifier, callback) {
  this.output.writeMessageBegin('resendEmailConfirmation', Thrift.MessageType.CALL, this.seqid);
  var params = {
    verifier: verifier
  };
  var args = new TalkService_resendEmailConfirmation_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_resendEmailConfirmation();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_resendEmailConfirmation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_resendEmailConfirmation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'resendEmailConfirmation failed: unknown result';
};
TalkServiceClient.prototype.resendPinCode = function(sessionId, callback) {
  this.send_resendPinCode(sessionId, callback); 
  if (!callback) {
  this.recv_resendPinCode();
  }
};

TalkServiceClient.prototype.send_resendPinCode = function(sessionId, callback) {
  this.output.writeMessageBegin('resendPinCode', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sessionId: sessionId
  };
  var args = new TalkService_resendPinCode_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_resendPinCode();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_resendPinCode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_resendPinCode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.resendPinCodeBySMS = function(sessionId, callback) {
  this.send_resendPinCodeBySMS(sessionId, callback); 
  if (!callback) {
  this.recv_resendPinCodeBySMS();
  }
};

TalkServiceClient.prototype.send_resendPinCodeBySMS = function(sessionId, callback) {
  this.output.writeMessageBegin('resendPinCodeBySMS', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sessionId: sessionId
  };
  var args = new TalkService_resendPinCodeBySMS_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_resendPinCodeBySMS();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_resendPinCodeBySMS = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_resendPinCodeBySMS_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.sendChatChecked = function(seq, consumer, lastMessageId, callback) {
  this.send_sendChatChecked(seq, consumer, lastMessageId, callback); 
  if (!callback) {
  this.recv_sendChatChecked();
  }
};

TalkServiceClient.prototype.send_sendChatChecked = function(seq, consumer, lastMessageId, callback) {
  this.output.writeMessageBegin('sendChatChecked', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    consumer: consumer,
    lastMessageId: lastMessageId
  };
  var args = new TalkService_sendChatChecked_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendChatChecked();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_sendChatChecked = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_sendChatChecked_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.sendMessageAwaitCommit = function(seq, message, callback) {
  this.send_sendMessageAwaitCommit(seq, message, callback); 
  if (!callback) {
    return this.recv_sendMessageAwaitCommit();
  }
};

TalkServiceClient.prototype.send_sendMessageAwaitCommit = function(seq, message, callback) {
  this.output.writeMessageBegin('sendMessageAwaitCommit', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    message: message
  };
  var args = new TalkService_sendMessageAwaitCommit_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendMessageAwaitCommit();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_sendMessageAwaitCommit = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_sendMessageAwaitCommit_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendMessageAwaitCommit failed: unknown result';
};
TalkServiceClient.prototype.sendChatRemoved = function(seq, consumer, lastMessageId, callback) {
  this.send_sendChatRemoved(seq, consumer, lastMessageId, callback); 
  if (!callback) {
  this.recv_sendChatRemoved();
  }
};

TalkServiceClient.prototype.send_sendChatRemoved = function(seq, consumer, lastMessageId, callback) {
  this.output.writeMessageBegin('sendChatRemoved', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    consumer: consumer,
    lastMessageId: lastMessageId
  };
  var args = new TalkService_sendChatRemoved_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendChatRemoved();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_sendChatRemoved = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_sendChatRemoved_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.sendContentPreviewUpdated = function(esq, messageId, receiverMids, callback) {
  this.send_sendContentPreviewUpdated(esq, messageId, receiverMids, callback); 
  if (!callback) {
    return this.recv_sendContentPreviewUpdated();
  }
};

TalkServiceClient.prototype.send_sendContentPreviewUpdated = function(esq, messageId, receiverMids, callback) {
  this.output.writeMessageBegin('sendContentPreviewUpdated', Thrift.MessageType.CALL, this.seqid);
  var params = {
    esq: esq,
    messageId: messageId,
    receiverMids: receiverMids
  };
  var args = new TalkService_sendContentPreviewUpdated_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendContentPreviewUpdated();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_sendContentPreviewUpdated = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_sendContentPreviewUpdated_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendContentPreviewUpdated failed: unknown result';
};
TalkServiceClient.prototype.sendContentReceipt = function(seq, consumer, messageId, callback) {
  this.send_sendContentReceipt(seq, consumer, messageId, callback); 
  if (!callback) {
  this.recv_sendContentReceipt();
  }
};

TalkServiceClient.prototype.send_sendContentReceipt = function(seq, consumer, messageId, callback) {
  this.output.writeMessageBegin('sendContentReceipt', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    consumer: consumer,
    messageId: messageId
  };
  var args = new TalkService_sendContentReceipt_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendContentReceipt();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_sendContentReceipt = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_sendContentReceipt_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.sendDummyPush = function(callback) {
  this.send_sendDummyPush(callback); 
  if (!callback) {
  this.recv_sendDummyPush();
  }
};

TalkServiceClient.prototype.send_sendDummyPush = function(callback) {
  this.output.writeMessageBegin('sendDummyPush', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_sendDummyPush_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendDummyPush();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_sendDummyPush = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_sendDummyPush_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.removeE2EEPublicKey = function(publicKey, callback) {
  this.send_removeE2EEPublicKey(publicKey, callback); 
  if (!callback) {
  this.recv_removeE2EEPublicKey();
  }
};

TalkServiceClient.prototype.send_removeE2EEPublicKey = function(publicKey, callback) {
  this.output.writeMessageBegin('removeE2EEPublicKey', Thrift.MessageType.CALL, this.seqid);
  var params = {
    publicKey: publicKey
  };
  var args = new TalkService_removeE2EEPublicKey_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeE2EEPublicKey();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_removeE2EEPublicKey = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_removeE2EEPublicKey_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.negotiateE2EEPublicKey = function(mid, callback) {
  this.send_negotiateE2EEPublicKey(mid, callback); 
  if (!callback) {
    return this.recv_negotiateE2EEPublicKey();
  }
};

TalkServiceClient.prototype.send_negotiateE2EEPublicKey = function(mid, callback) {
  this.output.writeMessageBegin('negotiateE2EEPublicKey', Thrift.MessageType.CALL, this.seqid);
  var params = {
    mid: mid
  };
  var args = new TalkService_negotiateE2EEPublicKey_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_negotiateE2EEPublicKey();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_negotiateE2EEPublicKey = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_negotiateE2EEPublicKey_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'negotiateE2EEPublicKey failed: unknown result';
};
TalkServiceClient.prototype.getE2EEPublicKey = function(mid, version, keyId, callback) {
  this.send_getE2EEPublicKey(mid, version, keyId, callback); 
  if (!callback) {
    return this.recv_getE2EEPublicKey();
  }
};

TalkServiceClient.prototype.send_getE2EEPublicKey = function(mid, version, keyId, callback) {
  this.output.writeMessageBegin('getE2EEPublicKey', Thrift.MessageType.CALL, this.seqid);
  var params = {
    mid: mid,
    version: version,
    keyId: keyId
  };
  var args = new TalkService_getE2EEPublicKey_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getE2EEPublicKey();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getE2EEPublicKey = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getE2EEPublicKey_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getE2EEPublicKey failed: unknown result';
};
TalkServiceClient.prototype.requestE2EEKeyExchange = function(reqSeq, temporalPublicKey, publicKey, verifier, callback) {
  this.send_requestE2EEKeyExchange(reqSeq, temporalPublicKey, publicKey, verifier, callback); 
  if (!callback) {
  this.recv_requestE2EEKeyExchange();
  }
};

TalkServiceClient.prototype.send_requestE2EEKeyExchange = function(reqSeq, temporalPublicKey, publicKey, verifier, callback) {
  this.output.writeMessageBegin('requestE2EEKeyExchange', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    temporalPublicKey: temporalPublicKey,
    publicKey: publicKey,
    verifier: verifier
  };
  var args = new TalkService_requestE2EEKeyExchange_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_requestE2EEKeyExchange();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_requestE2EEKeyExchange = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_requestE2EEKeyExchange_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.getLastE2EEPublicKeys = function(chatMid, callback) {
  this.send_getLastE2EEPublicKeys(chatMid, callback); 
  if (!callback) {
    return this.recv_getLastE2EEPublicKeys();
  }
};

TalkServiceClient.prototype.send_getLastE2EEPublicKeys = function(chatMid, callback) {
  this.output.writeMessageBegin('getLastE2EEPublicKeys', Thrift.MessageType.CALL, this.seqid);
  var params = {
    chatMid: chatMid
  };
  var args = new TalkService_getLastE2EEPublicKeys_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getLastE2EEPublicKeys();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getLastE2EEPublicKeys = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getLastE2EEPublicKeys_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getLastE2EEPublicKeys failed: unknown result';
};
TalkServiceClient.prototype.registerE2EEPublicKey = function(reqSeq, publicKey, callback) {
  this.send_registerE2EEPublicKey(reqSeq, publicKey, callback); 
  if (!callback) {
    return this.recv_registerE2EEPublicKey();
  }
};

TalkServiceClient.prototype.send_registerE2EEPublicKey = function(reqSeq, publicKey, callback) {
  this.output.writeMessageBegin('registerE2EEPublicKey', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    publicKey: publicKey
  };
  var args = new TalkService_registerE2EEPublicKey_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerE2EEPublicKey();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_registerE2EEPublicKey = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_registerE2EEPublicKey_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerE2EEPublicKey failed: unknown result';
};
TalkServiceClient.prototype.getE2EEPublicKeys = function(callback) {
  this.send_getE2EEPublicKeys(callback); 
  if (!callback) {
    return this.recv_getE2EEPublicKeys();
  }
};

TalkServiceClient.prototype.send_getE2EEPublicKeys = function(callback) {
  this.output.writeMessageBegin('getE2EEPublicKeys', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_getE2EEPublicKeys_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getE2EEPublicKeys();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getE2EEPublicKeys = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getE2EEPublicKeys_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getE2EEPublicKeys failed: unknown result';
};
TalkServiceClient.prototype.getE2EEPublicKeysEx = function(ignoreE2EEStatus, callback) {
  this.send_getE2EEPublicKeysEx(ignoreE2EEStatus, callback); 
  if (!callback) {
    return this.recv_getE2EEPublicKeysEx();
  }
};

TalkServiceClient.prototype.send_getE2EEPublicKeysEx = function(ignoreE2EEStatus, callback) {
  this.output.writeMessageBegin('getE2EEPublicKeysEx', Thrift.MessageType.CALL, this.seqid);
  var params = {
    ignoreE2EEStatus: ignoreE2EEStatus
  };
  var args = new TalkService_getE2EEPublicKeysEx_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getE2EEPublicKeysEx();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getE2EEPublicKeysEx = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getE2EEPublicKeysEx_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getE2EEPublicKeysEx failed: unknown result';
};
TalkServiceClient.prototype.getReadMessageOpsInBulk = function(chatIds, callback) {
  this.send_getReadMessageOpsInBulk(chatIds, callback); 
  if (!callback) {
    return this.recv_getReadMessageOpsInBulk();
  }
};

TalkServiceClient.prototype.send_getReadMessageOpsInBulk = function(chatIds, callback) {
  this.output.writeMessageBegin('getReadMessageOpsInBulk', Thrift.MessageType.CALL, this.seqid);
  var params = {
    chatIds: chatIds
  };
  var args = new TalkService_getReadMessageOpsInBulk_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getReadMessageOpsInBulk();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getReadMessageOpsInBulk = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getReadMessageOpsInBulk_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getReadMessageOpsInBulk failed: unknown result';
};
TalkServiceClient.prototype.sendEvent = function(seq, message, callback) {
  this.send_sendEvent(seq, message, callback); 
  if (!callback) {
    return this.recv_sendEvent();
  }
};

TalkServiceClient.prototype.send_sendEvent = function(seq, message, callback) {
  this.output.writeMessageBegin('sendEvent', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    message: message
  };
  var args = new TalkService_sendEvent_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendEvent();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_sendEvent = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_sendEvent_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendEvent failed: unknown result';
};
TalkServiceClient.prototype.sendMessage = function(seq, message, callback) {
  this.send_sendMessage(seq, message, callback); 
  if (!callback) {
    return this.recv_sendMessage();
  }
};

TalkServiceClient.prototype.send_sendMessage = function(seq, message, callback) {
  this.output.writeMessageBegin('sendMessage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    message: message
  };
  var args = new TalkService_sendMessage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendMessage();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_sendMessage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_sendMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendMessage failed: unknown result';
};
TalkServiceClient.prototype.sendMessageIgnored = function(seq, consumer, messageIds, callback) {
  this.send_sendMessageIgnored(seq, consumer, messageIds, callback); 
  if (!callback) {
  this.recv_sendMessageIgnored();
  }
};

TalkServiceClient.prototype.send_sendMessageIgnored = function(seq, consumer, messageIds, callback) {
  this.output.writeMessageBegin('sendMessageIgnored', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    consumer: consumer,
    messageIds: messageIds
  };
  var args = new TalkService_sendMessageIgnored_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendMessageIgnored();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_sendMessageIgnored = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_sendMessageIgnored_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.sendMessageReceipt = function(seq, consumer, messageIds, callback) {
  this.send_sendMessageReceipt(seq, consumer, messageIds, callback); 
  if (!callback) {
  this.recv_sendMessageReceipt();
  }
};

TalkServiceClient.prototype.send_sendMessageReceipt = function(seq, consumer, messageIds, callback) {
  this.output.writeMessageBegin('sendMessageReceipt', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    consumer: consumer,
    messageIds: messageIds
  };
  var args = new TalkService_sendMessageReceipt_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendMessageReceipt();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_sendMessageReceipt = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_sendMessageReceipt_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.findContactByMetaTag = function(userid, reference, callback) {
  this.send_findContactByMetaTag(userid, reference, callback); 
  if (!callback) {
    return this.recv_findContactByMetaTag();
  }
};

TalkServiceClient.prototype.send_findContactByMetaTag = function(userid, reference, callback) {
  this.output.writeMessageBegin('findContactByMetaTag', Thrift.MessageType.CALL, this.seqid);
  var params = {
    userid: userid,
    reference: reference
  };
  var args = new TalkService_findContactByMetaTag_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findContactByMetaTag();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_findContactByMetaTag = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_findContactByMetaTag_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findContactByMetaTag failed: unknown result';
};
TalkServiceClient.prototype.sendMessageToMyHome = function(seq, message, callback) {
  this.send_sendMessageToMyHome(seq, message, callback); 
  if (!callback) {
    return this.recv_sendMessageToMyHome();
  }
};

TalkServiceClient.prototype.send_sendMessageToMyHome = function(seq, message, callback) {
  this.output.writeMessageBegin('sendMessageToMyHome', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    message: message
  };
  var args = new TalkService_sendMessageToMyHome_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sendMessageToMyHome();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_sendMessageToMyHome = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_sendMessageToMyHome_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendMessageToMyHome failed: unknown result';
};
TalkServiceClient.prototype.setBuddyLocation = function(mid, index, location, callback) {
  this.send_setBuddyLocation(mid, index, location, callback); 
  if (!callback) {
  this.recv_setBuddyLocation();
  }
};

TalkServiceClient.prototype.send_setBuddyLocation = function(mid, index, location, callback) {
  this.output.writeMessageBegin('setBuddyLocation', Thrift.MessageType.CALL, this.seqid);
  var params = {
    mid: mid,
    index: index,
    location: location
  };
  var args = new TalkService_setBuddyLocation_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_setBuddyLocation();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_setBuddyLocation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_setBuddyLocation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.setIdentityCredential = function(identifier, verifier, provider, callback) {
  this.send_setIdentityCredential(identifier, verifier, provider, callback); 
  if (!callback) {
  this.recv_setIdentityCredential();
  }
};

TalkServiceClient.prototype.send_setIdentityCredential = function(identifier, verifier, provider, callback) {
  this.output.writeMessageBegin('setIdentityCredential', Thrift.MessageType.CALL, this.seqid);
  var params = {
    identifier: identifier,
    verifier: verifier,
    provider: provider
  };
  var args = new TalkService_setIdentityCredential_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_setIdentityCredential();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_setIdentityCredential = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_setIdentityCredential_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.setNotificationsEnabled = function(reqSeq, type, target, enablement, callback) {
  this.send_setNotificationsEnabled(reqSeq, type, target, enablement, callback); 
  if (!callback) {
  this.recv_setNotificationsEnabled();
  }
};

TalkServiceClient.prototype.send_setNotificationsEnabled = function(reqSeq, type, target, enablement, callback) {
  this.output.writeMessageBegin('setNotificationsEnabled', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    type: type,
    target: target,
    enablement: enablement
  };
  var args = new TalkService_setNotificationsEnabled_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_setNotificationsEnabled();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_setNotificationsEnabled = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_setNotificationsEnabled_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.startUpdateVerification = function(region, carrier, phone, udidHash, deviceInfo, networkCode, locale, callback) {
  this.send_startUpdateVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, locale, callback); 
  if (!callback) {
    return this.recv_startUpdateVerification();
  }
};

TalkServiceClient.prototype.send_startUpdateVerification = function(region, carrier, phone, udidHash, deviceInfo, networkCode, locale, callback) {
  this.output.writeMessageBegin('startUpdateVerification', Thrift.MessageType.CALL, this.seqid);
  var params = {
    region: region,
    carrier: carrier,
    phone: phone,
    udidHash: udidHash,
    deviceInfo: deviceInfo,
    networkCode: networkCode,
    locale: locale
  };
  var args = new TalkService_startUpdateVerification_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_startUpdateVerification();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_startUpdateVerification = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_startUpdateVerification_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'startUpdateVerification failed: unknown result';
};
TalkServiceClient.prototype.startVerification = function(region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale, simInfo, oldUdidHash, callback) {
  this.send_startVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale, simInfo, oldUdidHash, callback); 
  if (!callback) {
    return this.recv_startVerification();
  }
};

TalkServiceClient.prototype.send_startVerification = function(region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale, simInfo, oldUdidHash, callback) {
  this.output.writeMessageBegin('startVerification', Thrift.MessageType.CALL, this.seqid);
  var params = {
    region: region,
    carrier: carrier,
    phone: phone,
    udidHash: udidHash,
    deviceInfo: deviceInfo,
    networkCode: networkCode,
    mid: mid,
    locale: locale,
    simInfo: simInfo,
    oldUdidHash: oldUdidHash
  };
  var args = new TalkService_startVerification_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_startVerification();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_startVerification = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_startVerification_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'startVerification failed: unknown result';
};
TalkServiceClient.prototype.updateGroupPreferenceAttribute = function(reqSeq, groupMid, updatedAttrs, callback) {
  this.send_updateGroupPreferenceAttribute(reqSeq, groupMid, updatedAttrs, callback); 
  if (!callback) {
  this.recv_updateGroupPreferenceAttribute();
  }
};

TalkServiceClient.prototype.send_updateGroupPreferenceAttribute = function(reqSeq, groupMid, updatedAttrs, callback) {
  this.output.writeMessageBegin('updateGroupPreferenceAttribute', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    groupMid: groupMid,
    updatedAttrs: updatedAttrs
  };
  var args = new TalkService_updateGroupPreferenceAttribute_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateGroupPreferenceAttribute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateGroupPreferenceAttribute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateGroupPreferenceAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.createRoomV2 = function(reqSeq, contactIds, callback) {
  this.send_createRoomV2(reqSeq, contactIds, callback); 
  if (!callback) {
    return this.recv_createRoomV2();
  }
};

TalkServiceClient.prototype.send_createRoomV2 = function(reqSeq, contactIds, callback) {
  this.output.writeMessageBegin('createRoomV2', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    contactIds: contactIds
  };
  var args = new TalkService_createRoomV2_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createRoomV2();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_createRoomV2 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_createRoomV2_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createRoomV2 failed: unknown result';
};
TalkServiceClient.prototype.storeUpdateProfileAttribute = function(seq, profileAttribute, value, callback) {
  this.send_storeUpdateProfileAttribute(seq, profileAttribute, value, callback); 
  if (!callback) {
  this.recv_storeUpdateProfileAttribute();
  }
};

TalkServiceClient.prototype.send_storeUpdateProfileAttribute = function(seq, profileAttribute, value, callback) {
  this.output.writeMessageBegin('storeUpdateProfileAttribute', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    profileAttribute: profileAttribute,
    value: value
  };
  var args = new TalkService_storeUpdateProfileAttribute_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_storeUpdateProfileAttribute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_storeUpdateProfileAttribute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_storeUpdateProfileAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.syncContactBySnsIds = function(reqSeq, modifications, callback) {
  this.send_syncContactBySnsIds(reqSeq, modifications, callback); 
  if (!callback) {
    return this.recv_syncContactBySnsIds();
  }
};

TalkServiceClient.prototype.send_syncContactBySnsIds = function(reqSeq, modifications, callback) {
  this.output.writeMessageBegin('syncContactBySnsIds', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    modifications: modifications
  };
  var args = new TalkService_syncContactBySnsIds_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_syncContactBySnsIds();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_syncContactBySnsIds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_syncContactBySnsIds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'syncContactBySnsIds failed: unknown result';
};
TalkServiceClient.prototype.syncContacts = function(reqSeq, localContacts, callback) {
  this.send_syncContacts(reqSeq, localContacts, callback); 
  if (!callback) {
    return this.recv_syncContacts();
  }
};

TalkServiceClient.prototype.send_syncContacts = function(reqSeq, localContacts, callback) {
  this.output.writeMessageBegin('syncContacts', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    localContacts: localContacts
  };
  var args = new TalkService_syncContacts_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_syncContacts();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_syncContacts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_syncContacts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'syncContacts failed: unknown result';
};
TalkServiceClient.prototype.trySendMessage = function(seq, message, callback) {
  this.send_trySendMessage(seq, message, callback); 
  if (!callback) {
    return this.recv_trySendMessage();
  }
};

TalkServiceClient.prototype.send_trySendMessage = function(seq, message, callback) {
  this.output.writeMessageBegin('trySendMessage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    seq: seq,
    message: message
  };
  var args = new TalkService_trySendMessage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_trySendMessage();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_trySendMessage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_trySendMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'trySendMessage failed: unknown result';
};
TalkServiceClient.prototype.getNextMessagesV2 = function(messageBoxId, startMessageId, messagesCount, callback) {
  this.send_getNextMessagesV2(messageBoxId, startMessageId, messagesCount, callback); 
  if (!callback) {
    return this.recv_getNextMessagesV2();
  }
};

TalkServiceClient.prototype.send_getNextMessagesV2 = function(messageBoxId, startMessageId, messagesCount, callback) {
  this.output.writeMessageBegin('getNextMessagesV2', Thrift.MessageType.CALL, this.seqid);
  var params = {
    messageBoxId: messageBoxId,
    startMessageId: startMessageId,
    messagesCount: messagesCount
  };
  var args = new TalkService_getNextMessagesV2_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getNextMessagesV2();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getNextMessagesV2 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getNextMessagesV2_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNextMessagesV2 failed: unknown result';
};
TalkServiceClient.prototype.getMessageBoxCompactWrapUpV2 = function(messageBoxId, callback) {
  this.send_getMessageBoxCompactWrapUpV2(messageBoxId, callback); 
  if (!callback) {
    return this.recv_getMessageBoxCompactWrapUpV2();
  }
};

TalkServiceClient.prototype.send_getMessageBoxCompactWrapUpV2 = function(messageBoxId, callback) {
  this.output.writeMessageBegin('getMessageBoxCompactWrapUpV2', Thrift.MessageType.CALL, this.seqid);
  var params = {
    messageBoxId: messageBoxId
  };
  var args = new TalkService_getMessageBoxCompactWrapUpV2_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getMessageBoxCompactWrapUpV2();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getMessageBoxCompactWrapUpV2 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getMessageBoxCompactWrapUpV2_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMessageBoxCompactWrapUpV2 failed: unknown result';
};
TalkServiceClient.prototype.getRecentMessagesV2 = function(messageBoxId, messagesCount, callback) {
  this.send_getRecentMessagesV2(messageBoxId, messagesCount, callback); 
  if (!callback) {
    return this.recv_getRecentMessagesV2();
  }
};

TalkServiceClient.prototype.send_getRecentMessagesV2 = function(messageBoxId, messagesCount, callback) {
  this.output.writeMessageBegin('getRecentMessagesV2', Thrift.MessageType.CALL, this.seqid);
  var params = {
    messageBoxId: messageBoxId,
    messagesCount: messagesCount
  };
  var args = new TalkService_getRecentMessagesV2_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getRecentMessagesV2();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_getRecentMessagesV2 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_getRecentMessagesV2_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRecentMessagesV2 failed: unknown result';
};
TalkServiceClient.prototype.validateContactsOnBot = function(contacts, callback) {
  this.send_validateContactsOnBot(contacts, callback); 
  if (!callback) {
    return this.recv_validateContactsOnBot();
  }
};

TalkServiceClient.prototype.send_validateContactsOnBot = function(contacts, callback) {
  this.output.writeMessageBegin('validateContactsOnBot', Thrift.MessageType.CALL, this.seqid);
  var params = {
    contacts: contacts
  };
  var args = new TalkService_validateContactsOnBot_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_validateContactsOnBot();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_validateContactsOnBot = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_validateContactsOnBot_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'validateContactsOnBot failed: unknown result';
};
TalkServiceClient.prototype.tryFriendRequest = function(midOrEMid, method, friendRequestParams, callback) {
  this.send_tryFriendRequest(midOrEMid, method, friendRequestParams, callback); 
  if (!callback) {
  this.recv_tryFriendRequest();
  }
};

TalkServiceClient.prototype.send_tryFriendRequest = function(midOrEMid, method, friendRequestParams, callback) {
  this.output.writeMessageBegin('tryFriendRequest', Thrift.MessageType.CALL, this.seqid);
  var params = {
    midOrEMid: midOrEMid,
    method: method,
    friendRequestParams: friendRequestParams
  };
  var args = new TalkService_tryFriendRequest_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_tryFriendRequest();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_tryFriendRequest = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_tryFriendRequest_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.unblockContact = function(reqSeq, id, callback) {
  this.send_unblockContact(reqSeq, id, callback); 
  if (!callback) {
  this.recv_unblockContact();
  }
};

TalkServiceClient.prototype.send_unblockContact = function(reqSeq, id, callback) {
  this.output.writeMessageBegin('unblockContact', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    id: id
  };
  var args = new TalkService_unblockContact_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_unblockContact();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_unblockContact = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_unblockContact_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.unblockRecommendation = function(reqSeq, id, callback) {
  this.send_unblockRecommendation(reqSeq, id, callback); 
  if (!callback) {
  this.recv_unblockRecommendation();
  }
};

TalkServiceClient.prototype.send_unblockRecommendation = function(reqSeq, id, callback) {
  this.output.writeMessageBegin('unblockRecommendation', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    id: id
  };
  var args = new TalkService_unblockRecommendation_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_unblockRecommendation();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_unblockRecommendation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_unblockRecommendation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.unregisterUserAndDevice = function(callback) {
  this.send_unregisterUserAndDevice(callback); 
  if (!callback) {
    return this.recv_unregisterUserAndDevice();
  }
};

TalkServiceClient.prototype.send_unregisterUserAndDevice = function(callback) {
  this.output.writeMessageBegin('unregisterUserAndDevice', Thrift.MessageType.CALL, this.seqid);
  var args = new TalkService_unregisterUserAndDevice_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_unregisterUserAndDevice();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_unregisterUserAndDevice = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_unregisterUserAndDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'unregisterUserAndDevice failed: unknown result';
};
TalkServiceClient.prototype.updateApnsDeviceToken = function(apnsDeviceToken, callback) {
  this.send_updateApnsDeviceToken(apnsDeviceToken, callback); 
  if (!callback) {
  this.recv_updateApnsDeviceToken();
  }
};

TalkServiceClient.prototype.send_updateApnsDeviceToken = function(apnsDeviceToken, callback) {
  this.output.writeMessageBegin('updateApnsDeviceToken', Thrift.MessageType.CALL, this.seqid);
  var params = {
    apnsDeviceToken: apnsDeviceToken
  };
  var args = new TalkService_updateApnsDeviceToken_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateApnsDeviceToken();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateApnsDeviceToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateApnsDeviceToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.updateBuddySetting = function(key, value, callback) {
  this.send_updateBuddySetting(key, value, callback); 
  if (!callback) {
  this.recv_updateBuddySetting();
  }
};

TalkServiceClient.prototype.send_updateBuddySetting = function(key, value, callback) {
  this.output.writeMessageBegin('updateBuddySetting', Thrift.MessageType.CALL, this.seqid);
  var params = {
    key: key,
    value: value
  };
  var args = new TalkService_updateBuddySetting_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateBuddySetting();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateBuddySetting = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateBuddySetting_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.updateC2DMRegistrationId = function(registrationId, callback) {
  this.send_updateC2DMRegistrationId(registrationId, callback); 
  if (!callback) {
  this.recv_updateC2DMRegistrationId();
  }
};

TalkServiceClient.prototype.send_updateC2DMRegistrationId = function(registrationId, callback) {
  this.output.writeMessageBegin('updateC2DMRegistrationId', Thrift.MessageType.CALL, this.seqid);
  var params = {
    registrationId: registrationId
  };
  var args = new TalkService_updateC2DMRegistrationId_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateC2DMRegistrationId();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateC2DMRegistrationId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateC2DMRegistrationId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.updateContactSetting = function(reqSeq, mid, flag, value, callback) {
  this.send_updateContactSetting(reqSeq, mid, flag, value, callback); 
  if (!callback) {
  this.recv_updateContactSetting();
  }
};

TalkServiceClient.prototype.send_updateContactSetting = function(reqSeq, mid, flag, value, callback) {
  this.output.writeMessageBegin('updateContactSetting', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    mid: mid,
    flag: flag,
    value: value
  };
  var args = new TalkService_updateContactSetting_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateContactSetting();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateContactSetting = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateContactSetting_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.updateCustomModeSettings = function(customMode, paramMap, callback) {
  this.send_updateCustomModeSettings(customMode, paramMap, callback); 
  if (!callback) {
  this.recv_updateCustomModeSettings();
  }
};

TalkServiceClient.prototype.send_updateCustomModeSettings = function(customMode, paramMap, callback) {
  this.output.writeMessageBegin('updateCustomModeSettings', Thrift.MessageType.CALL, this.seqid);
  var params = {
    customMode: customMode,
    paramMap: paramMap
  };
  var args = new TalkService_updateCustomModeSettings_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateCustomModeSettings();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateCustomModeSettings = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateCustomModeSettings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.updateDeviceInfo = function(deviceUid, deviceInfo, callback) {
  this.send_updateDeviceInfo(deviceUid, deviceInfo, callback); 
  if (!callback) {
  this.recv_updateDeviceInfo();
  }
};

TalkServiceClient.prototype.send_updateDeviceInfo = function(deviceUid, deviceInfo, callback) {
  this.output.writeMessageBegin('updateDeviceInfo', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceUid: deviceUid,
    deviceInfo: deviceInfo
  };
  var args = new TalkService_updateDeviceInfo_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateDeviceInfo();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateDeviceInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateDeviceInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.updateGroup = function(reqSeq, group, callback) {
  this.send_updateGroup(reqSeq, group, callback); 
  if (!callback) {
  this.recv_updateGroup();
  }
};

TalkServiceClient.prototype.send_updateGroup = function(reqSeq, group, callback) {
  this.output.writeMessageBegin('updateGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    group: group
  };
  var args = new TalkService_updateGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateGroup();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.updateNotificationToken = function(type, token, callback) {
  this.send_updateNotificationToken(type, token, callback); 
  if (!callback) {
  this.recv_updateNotificationToken();
  }
};

TalkServiceClient.prototype.send_updateNotificationToken = function(type, token, callback) {
  this.output.writeMessageBegin('updateNotificationToken', Thrift.MessageType.CALL, this.seqid);
  var params = {
    type: type,
    token: token
  };
  var args = new TalkService_updateNotificationToken_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateNotificationToken();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateNotificationToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateNotificationToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.updateNotificationTokenWithBytes = function(type, token, callback) {
  this.send_updateNotificationTokenWithBytes(type, token, callback); 
  if (!callback) {
  this.recv_updateNotificationTokenWithBytes();
  }
};

TalkServiceClient.prototype.send_updateNotificationTokenWithBytes = function(type, token, callback) {
  this.output.writeMessageBegin('updateNotificationTokenWithBytes', Thrift.MessageType.CALL, this.seqid);
  var params = {
    type: type,
    token: token
  };
  var args = new TalkService_updateNotificationTokenWithBytes_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateNotificationTokenWithBytes();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateNotificationTokenWithBytes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateNotificationTokenWithBytes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.updateProfile = function(reqSeq, profile, callback) {
  this.send_updateProfile(reqSeq, profile, callback); 
  if (!callback) {
  this.recv_updateProfile();
  }
};

TalkServiceClient.prototype.send_updateProfile = function(reqSeq, profile, callback) {
  this.output.writeMessageBegin('updateProfile', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    profile: profile
  };
  var args = new TalkService_updateProfile_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateProfile();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateProfile = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateProfile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.updateProfileAttribute = function(reqSeq, attr, value, callback) {
  this.send_updateProfileAttribute(reqSeq, attr, value, callback); 
  if (!callback) {
  this.recv_updateProfileAttribute();
  }
};

TalkServiceClient.prototype.send_updateProfileAttribute = function(reqSeq, attr, value, callback) {
  this.output.writeMessageBegin('updateProfileAttribute', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    attr: attr,
    value: value
  };
  var args = new TalkService_updateProfileAttribute_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateProfileAttribute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateProfileAttribute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateProfileAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.updateProfileAttributes = function(reqSeq, request, callback) {
  this.send_updateProfileAttributes(reqSeq, request, callback); 
  if (!callback) {
  this.recv_updateProfileAttributes();
  }
};

TalkServiceClient.prototype.send_updateProfileAttributes = function(reqSeq, request, callback) {
  this.output.writeMessageBegin('updateProfileAttributes', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    request: request
  };
  var args = new TalkService_updateProfileAttributes_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateProfileAttributes();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateProfileAttributes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateProfileAttributes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
TalkServiceClient.prototype.updateRegion = function(region, callback) {
  this.send_updateRegion(region, callback); 
  if (!callback) {
  this.recv_updateRegion();
  }
};

TalkServiceClient.prototype.send_updateRegion = function(region, callback) {
  this.output.writeMessageBegin('updateRegion', Thrift.MessageType.CALL, this.seqid);
  var params = {
    region: region
  };
  var args = new TalkService_updateRegion_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateRegion();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateRegion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateRegion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.updateSettings = function(reqSeq, settings, callback) {
  this.send_updateSettings(reqSeq, settings, callback); 
  if (!callback) {
  this.recv_updateSettings();
  }
};

TalkServiceClient.prototype.send_updateSettings = function(reqSeq, settings, callback) {
  this.output.writeMessageBegin('updateSettings', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    settings: settings
  };
  var args = new TalkService_updateSettings_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateSettings();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateSettings = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateSettings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.updateSettings2 = function(reqSeq, settings, callback) {
  this.send_updateSettings2(reqSeq, settings, callback); 
  if (!callback) {
    return this.recv_updateSettings2();
  }
};

TalkServiceClient.prototype.send_updateSettings2 = function(reqSeq, settings, callback) {
  this.output.writeMessageBegin('updateSettings2', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    settings: settings
  };
  var args = new TalkService_updateSettings2_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateSettings2();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateSettings2 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateSettings2_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateSettings2 failed: unknown result';
};
TalkServiceClient.prototype.updateSettingsAttribute = function(reqSeq, attr, value, callback) {
  this.send_updateSettingsAttribute(reqSeq, attr, value, callback); 
  if (!callback) {
  this.recv_updateSettingsAttribute();
  }
};

TalkServiceClient.prototype.send_updateSettingsAttribute = function(reqSeq, attr, value, callback) {
  this.output.writeMessageBegin('updateSettingsAttribute', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    attr: attr,
    value: value
  };
  var args = new TalkService_updateSettingsAttribute_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateSettingsAttribute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateSettingsAttribute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateSettingsAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.updateSettingsAttributes = function(reqSeq, attrBitset, settings, callback) {
  this.send_updateSettingsAttributes(reqSeq, attrBitset, settings, callback); 
  if (!callback) {
    return this.recv_updateSettingsAttributes();
  }
};

TalkServiceClient.prototype.send_updateSettingsAttributes = function(reqSeq, attrBitset, settings, callback) {
  this.output.writeMessageBegin('updateSettingsAttributes', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reqSeq: reqSeq,
    attrBitset: attrBitset,
    settings: settings
  };
  var args = new TalkService_updateSettingsAttributes_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateSettingsAttributes();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_updateSettingsAttributes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_updateSettingsAttributes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateSettingsAttributes failed: unknown result';
};
TalkServiceClient.prototype.verifyIdentityCredential = function(identityProvider, identifier, password, callback) {
  this.send_verifyIdentityCredential(identityProvider, identifier, password, callback); 
  if (!callback) {
  this.recv_verifyIdentityCredential();
  }
};

TalkServiceClient.prototype.send_verifyIdentityCredential = function(identityProvider, identifier, password, callback) {
  this.output.writeMessageBegin('verifyIdentityCredential', Thrift.MessageType.CALL, this.seqid);
  var params = {
    identityProvider: identityProvider,
    identifier: identifier,
    password: password
  };
  var args = new TalkService_verifyIdentityCredential_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_verifyIdentityCredential();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_verifyIdentityCredential = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_verifyIdentityCredential_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
TalkServiceClient.prototype.verifyIdentityCredentialWithResult = function(identityCredential, callback) {
  this.send_verifyIdentityCredentialWithResult(identityCredential, callback); 
  if (!callback) {
    return this.recv_verifyIdentityCredentialWithResult();
  }
};

TalkServiceClient.prototype.send_verifyIdentityCredentialWithResult = function(identityCredential, callback) {
  this.output.writeMessageBegin('verifyIdentityCredentialWithResult', Thrift.MessageType.CALL, this.seqid);
  var params = {
    identityCredential: identityCredential
  };
  var args = new TalkService_verifyIdentityCredentialWithResult_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_verifyIdentityCredentialWithResult();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_verifyIdentityCredentialWithResult = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_verifyIdentityCredentialWithResult_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'verifyIdentityCredentialWithResult failed: unknown result';
};
TalkServiceClient.prototype.verifyPhone = function(sessionId, pinCode, udidHash, callback) {
  this.send_verifyPhone(sessionId, pinCode, udidHash, callback); 
  if (!callback) {
    return this.recv_verifyPhone();
  }
};

TalkServiceClient.prototype.send_verifyPhone = function(sessionId, pinCode, udidHash, callback) {
  this.output.writeMessageBegin('verifyPhone', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sessionId: sessionId,
    pinCode: pinCode,
    udidHash: udidHash
  };
  var args = new TalkService_verifyPhone_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_verifyPhone();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_verifyPhone = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_verifyPhone_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'verifyPhone failed: unknown result';
};
TalkServiceClient.prototype.verifyQrcode = function(verifier, pinCode, callback) {
  this.send_verifyQrcode(verifier, pinCode, callback); 
  if (!callback) {
    return this.recv_verifyQrcode();
  }
};

TalkServiceClient.prototype.send_verifyQrcode = function(verifier, pinCode, callback) {
  this.output.writeMessageBegin('verifyQrcode', Thrift.MessageType.CALL, this.seqid);
  var params = {
    verifier: verifier,
    pinCode: pinCode
  };
  var args = new TalkService_verifyQrcode_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_verifyQrcode();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TalkServiceClient.prototype.recv_verifyQrcode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TalkService_verifyQrcode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'verifyQrcode failed: unknown result';
};
