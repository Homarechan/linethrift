//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

MessageService_fetchMessageOperations_args = function(args) {
  this.localRevision = null;
  this.lastOpTimestamp = null;
  this.count = null;
  if (args) {
    if (args.localRevision !== undefined && args.localRevision !== null) {
      this.localRevision = args.localRevision;
    }
    if (args.lastOpTimestamp !== undefined && args.lastOpTimestamp !== null) {
      this.lastOpTimestamp = args.lastOpTimestamp;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
MessageService_fetchMessageOperations_args.prototype = {};
MessageService_fetchMessageOperations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localRevision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.lastOpTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_fetchMessageOperations_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_fetchMessageOperations_args');
  if (this.localRevision !== null && this.localRevision !== undefined) {
    output.writeFieldBegin('localRevision', Thrift.Type.I64, 2);
    output.writeI64(this.localRevision);
    output.writeFieldEnd();
  }
  if (this.lastOpTimestamp !== null && this.lastOpTimestamp !== undefined) {
    output.writeFieldBegin('lastOpTimestamp', Thrift.Type.I64, 3);
    output.writeI64(this.lastOpTimestamp);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_fetchMessageOperations_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new MessageOperations(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MessageService_fetchMessageOperations_result.prototype = {};
MessageService_fetchMessageOperations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MessageOperations();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_fetchMessageOperations_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_fetchMessageOperations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_getLastReadMessageIds_args = function(args) {
  this.chatId = null;
  if (args) {
    if (args.chatId !== undefined && args.chatId !== null) {
      this.chatId = args.chatId;
    }
  }
};
MessageService_getLastReadMessageIds_args.prototype = {};
MessageService_getLastReadMessageIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getLastReadMessageIds_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getLastReadMessageIds_args');
  if (this.chatId !== null && this.chatId !== undefined) {
    output.writeFieldBegin('chatId', Thrift.Type.STRING, 2);
    output.writeString(this.chatId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_getLastReadMessageIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new LastReadMessageIds(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MessageService_getLastReadMessageIds_result.prototype = {};
MessageService_getLastReadMessageIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new LastReadMessageIds();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getLastReadMessageIds_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getLastReadMessageIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_multiGetLastReadMessageIds_args = function(args) {
  this.chatIds = null;
  if (args) {
    if (args.chatIds !== undefined && args.chatIds !== null) {
      this.chatIds = Thrift.copyList(args.chatIds, [null]);
    }
  }
};
MessageService_multiGetLastReadMessageIds_args.prototype = {};
MessageService_multiGetLastReadMessageIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1658 = 0;
        var _rtmp31662;
        this.chatIds = [];
        var _etype1661 = 0;
        _rtmp31662 = input.readListBegin();
        _etype1661 = _rtmp31662.etype;
        _size1658 = _rtmp31662.size;
        for (var _i1663 = 0; _i1663 < _size1658; ++_i1663)
        {
          var elem1664 = null;
          elem1664 = input.readString().value;
          this.chatIds.push(elem1664);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_multiGetLastReadMessageIds_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_multiGetLastReadMessageIds_args');
  if (this.chatIds !== null && this.chatIds !== undefined) {
    output.writeFieldBegin('chatIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.chatIds.length);
    for (var iter1665 in this.chatIds)
    {
      if (this.chatIds.hasOwnProperty(iter1665))
      {
        iter1665 = this.chatIds[iter1665];
        output.writeString(iter1665);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_multiGetLastReadMessageIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [LastReadMessageIds]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MessageService_multiGetLastReadMessageIds_result.prototype = {};
MessageService_multiGetLastReadMessageIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1666 = 0;
        var _rtmp31670;
        this.success = [];
        var _etype1669 = 0;
        _rtmp31670 = input.readListBegin();
        _etype1669 = _rtmp31670.etype;
        _size1666 = _rtmp31670.size;
        for (var _i1671 = 0; _i1671 < _size1666; ++_i1671)
        {
          var elem1672 = null;
          elem1672 = new LastReadMessageIds();
          elem1672.read(input);
          this.success.push(elem1672);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_multiGetLastReadMessageIds_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_multiGetLastReadMessageIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1673 in this.success)
    {
      if (this.success.hasOwnProperty(iter1673))
      {
        iter1673 = this.success[iter1673];
        iter1673.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
MessageServiceClient.prototype = {};
MessageServiceClient.prototype.fetchMessageOperations = function(localRevision, lastOpTimestamp, count, callback) {
  this.send_fetchMessageOperations(localRevision, lastOpTimestamp, count, callback); 
  if (!callback) {
    return this.recv_fetchMessageOperations();
  }
};

MessageServiceClient.prototype.send_fetchMessageOperations = function(localRevision, lastOpTimestamp, count, callback) {
  this.output.writeMessageBegin('fetchMessageOperations', Thrift.MessageType.CALL, this.seqid);
  var params = {
    localRevision: localRevision,
    lastOpTimestamp: lastOpTimestamp,
    count: count
  };
  var args = new MessageService_fetchMessageOperations_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_fetchMessageOperations();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MessageServiceClient.prototype.recv_fetchMessageOperations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MessageService_fetchMessageOperations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'fetchMessageOperations failed: unknown result';
};
MessageServiceClient.prototype.getLastReadMessageIds = function(chatId, callback) {
  this.send_getLastReadMessageIds(chatId, callback); 
  if (!callback) {
    return this.recv_getLastReadMessageIds();
  }
};

MessageServiceClient.prototype.send_getLastReadMessageIds = function(chatId, callback) {
  this.output.writeMessageBegin('getLastReadMessageIds', Thrift.MessageType.CALL, this.seqid);
  var params = {
    chatId: chatId
  };
  var args = new MessageService_getLastReadMessageIds_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getLastReadMessageIds();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MessageServiceClient.prototype.recv_getLastReadMessageIds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MessageService_getLastReadMessageIds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getLastReadMessageIds failed: unknown result';
};
MessageServiceClient.prototype.multiGetLastReadMessageIds = function(chatIds, callback) {
  this.send_multiGetLastReadMessageIds(chatIds, callback); 
  if (!callback) {
    return this.recv_multiGetLastReadMessageIds();
  }
};

MessageServiceClient.prototype.send_multiGetLastReadMessageIds = function(chatIds, callback) {
  this.output.writeMessageBegin('multiGetLastReadMessageIds', Thrift.MessageType.CALL, this.seqid);
  var params = {
    chatIds: chatIds
  };
  var args = new MessageService_multiGetLastReadMessageIds_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_multiGetLastReadMessageIds();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MessageServiceClient.prototype.recv_multiGetLastReadMessageIds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MessageService_multiGetLastReadMessageIds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'multiGetLastReadMessageIds failed: unknown result';
};
