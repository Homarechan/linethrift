//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

UniversalNotificationService_notify_args = function(args) {
  this.event = null;
  if (args) {
    if (args.event !== undefined && args.event !== null) {
      this.event = new GlobalEvent(args.event);
    }
  }
};
UniversalNotificationService_notify_args.prototype = {};
UniversalNotificationService_notify_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.event = new GlobalEvent();
        this.event.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UniversalNotificationService_notify_args.prototype.write = function(output) {
  output.writeStructBegin('UniversalNotificationService_notify_args');
  if (this.event !== null && this.event !== undefined) {
    output.writeFieldBegin('event', Thrift.Type.STRUCT, 2);
    this.event.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UniversalNotificationService_notify_result = function(args) {
  this.e = null;
  if (args instanceof UniversalNotificationServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
UniversalNotificationService_notify_result.prototype = {};
UniversalNotificationService_notify_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new UniversalNotificationServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UniversalNotificationService_notify_result.prototype.write = function(output) {
  output.writeStructBegin('UniversalNotificationService_notify_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UniversalNotificationServiceClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
UniversalNotificationServiceClient.prototype = {};

UniversalNotificationServiceClient.prototype.notify = function(event, callback) {
  this.send_notify(event, callback); 
  if (!callback) {
  this.recv_notify();
  }
};

UniversalNotificationServiceClient.prototype.send_notify = function(event, callback) {
  var params = {
    event: event
  };
  var args = new UniversalNotificationService_notify_args(params);
  try {
    this.output.writeMessageBegin('notify', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_notify();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

UniversalNotificationServiceClient.prototype.recv_notify = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UniversalNotificationService_notify_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
