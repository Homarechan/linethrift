(*
 Autogenerated by Thrift Compiler (0.13.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class normalizePhoneNumber_args =
object (self)
  val mutable _countryCode : string option = None
  method get_countryCode = _countryCode
  method grab_countryCode = match _countryCode with None->raise (Field_empty "normalizePhoneNumber_args.countryCode") | Some _x11599 -> _x11599
  method set_countryCode _x11599 = _countryCode <- Some _x11599
  method unset_countryCode = _countryCode <- None
  method reset_countryCode = _countryCode <- None

  val mutable _phoneNumber : string option = None
  method get_phoneNumber = _phoneNumber
  method grab_phoneNumber = match _phoneNumber with None->raise (Field_empty "normalizePhoneNumber_args.phoneNumber") | Some _x11600 -> _x11600
  method set_phoneNumber _x11600 = _phoneNumber <- Some _x11600
  method unset_phoneNumber = _phoneNumber <- None
  method reset_phoneNumber = _phoneNumber <- None

  val mutable _countryCodeHint : string option = None
  method get_countryCodeHint = _countryCodeHint
  method grab_countryCodeHint = match _countryCodeHint with None->raise (Field_empty "normalizePhoneNumber_args.countryCodeHint") | Some _x11601 -> _x11601
  method set_countryCodeHint _x11601 = _countryCodeHint <- Some _x11601
  method unset_countryCodeHint = _countryCodeHint <- None
  method reset_countryCodeHint = _countryCodeHint <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "normalizePhoneNumber_args";
    (match _countryCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("countryCode",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _phoneNumber with None -> () | Some _v -> 
      oprot#writeFieldBegin("phoneNumber",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _countryCodeHint with None -> () | Some _v -> 
      oprot#writeFieldBegin("countryCodeHint",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_normalizePhoneNumber_args (iprot : Protocol.t) =
  let _str11604 = new normalizePhoneNumber_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11605,_id11606) = iprot#readFieldBegin in
        if _t11605 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11606 with 
          | 2 -> (if _t11605 = Protocol.T_STRING then
              _str11604#set_countryCode iprot#readString
            else
              iprot#skip _t11605)
          | 3 -> (if _t11605 = Protocol.T_STRING then
              _str11604#set_phoneNumber iprot#readString
            else
              iprot#skip _t11605)
          | 4 -> (if _t11605 = Protocol.T_STRING then
              _str11604#set_countryCodeHint iprot#readString
            else
              iprot#skip _t11605)
          | _ -> iprot#skip _t11605);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11604

class normalizePhoneNumber_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "normalizePhoneNumber_result.success") | Some _x11607 -> _x11607
  method set_success _x11607 = _success <- Some _x11607
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "normalizePhoneNumber_result.e") | Some _x11608 -> _x11608
  method set_e _x11608 = _e <- Some _x11608
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "normalizePhoneNumber_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_normalizePhoneNumber_result (iprot : Protocol.t) =
  let _str11611 = new normalizePhoneNumber_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11612,_id11613) = iprot#readFieldBegin in
        if _t11612 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11613 with 
          | 0 -> (if _t11612 = Protocol.T_STRING then
              _str11611#set_success iprot#readString
            else
              iprot#skip _t11612)
          | 1 -> (if _t11612 = Protocol.T_STRUCT then
              _str11611#set_e (read_talkException iprot)
            else
              iprot#skip _t11612)
          | _ -> iprot#skip _t11612);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11611

class respondE2EELoginRequest_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "respondE2EELoginRequest_args.verifier") | Some _x11614 -> _x11614
  method set_verifier _x11614 = _verifier <- Some _x11614
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  val mutable _publicKey : e2EEPublicKey option = None
  method get_publicKey = _publicKey
  method grab_publicKey = match _publicKey with None->raise (Field_empty "respondE2EELoginRequest_args.publicKey") | Some _x11615 -> _x11615
  method set_publicKey _x11615 = _publicKey <- Some _x11615
  method unset_publicKey = _publicKey <- None
  method reset_publicKey = _publicKey <- None

  val mutable _encryptedKeyChain : string option = None
  method get_encryptedKeyChain = _encryptedKeyChain
  method grab_encryptedKeyChain = match _encryptedKeyChain with None->raise (Field_empty "respondE2EELoginRequest_args.encryptedKeyChain") | Some _x11616 -> _x11616
  method set_encryptedKeyChain _x11616 = _encryptedKeyChain <- Some _x11616
  method unset_encryptedKeyChain = _encryptedKeyChain <- None
  method reset_encryptedKeyChain = _encryptedKeyChain <- None

  val mutable _hashKeyChain : string option = None
  method get_hashKeyChain = _hashKeyChain
  method grab_hashKeyChain = match _hashKeyChain with None->raise (Field_empty "respondE2EELoginRequest_args.hashKeyChain") | Some _x11617 -> _x11617
  method set_hashKeyChain _x11617 = _hashKeyChain <- Some _x11617
  method unset_hashKeyChain = _hashKeyChain <- None
  method reset_hashKeyChain = _hashKeyChain <- None

  val mutable _errorCode : ErrorCode.t option = None
  method get_errorCode = _errorCode
  method grab_errorCode = match _errorCode with None->raise (Field_empty "respondE2EELoginRequest_args.errorCode") | Some _x11618 -> _x11618
  method set_errorCode _x11618 = _errorCode <- Some _x11618
  method unset_errorCode = _errorCode <- None
  method reset_errorCode = _errorCode <- None

  method copy =
      let _new = Oo.copy self in
      if _publicKey <> None then
        _new#set_publicKey self#grab_publicKey#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "respondE2EELoginRequest_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _publicKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("publicKey",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _encryptedKeyChain with None -> () | Some _v -> 
      oprot#writeFieldBegin("encryptedKeyChain",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _hashKeyChain with None -> () | Some _v -> 
      oprot#writeFieldBegin("hashKeyChain",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _errorCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("errorCode",Protocol.T_I32,5);
      oprot#writeI32(ErrorCode.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_respondE2EELoginRequest_args (iprot : Protocol.t) =
  let _str11621 = new respondE2EELoginRequest_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11622,_id11623) = iprot#readFieldBegin in
        if _t11622 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11623 with 
          | 1 -> (if _t11622 = Protocol.T_STRING then
              _str11621#set_verifier iprot#readString
            else
              iprot#skip _t11622)
          | 2 -> (if _t11622 = Protocol.T_STRUCT then
              _str11621#set_publicKey (read_e2EEPublicKey iprot)
            else
              iprot#skip _t11622)
          | 3 -> (if _t11622 = Protocol.T_STRING then
              _str11621#set_encryptedKeyChain iprot#readString
            else
              iprot#skip _t11622)
          | 4 -> (if _t11622 = Protocol.T_STRING then
              _str11621#set_hashKeyChain iprot#readString
            else
              iprot#skip _t11622)
          | 5 -> (if _t11622 = Protocol.T_I32 then
              _str11621#set_errorCode (ErrorCode.of_i iprot#readI32)
            else
              iprot#skip _t11622)
          | _ -> iprot#skip _t11622);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11621

class respondE2EELoginRequest_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "respondE2EELoginRequest_result.e") | Some _x11624 -> _x11624
  method set_e _x11624 = _e <- Some _x11624
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "respondE2EELoginRequest_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_respondE2EELoginRequest_result (iprot : Protocol.t) =
  let _str11627 = new respondE2EELoginRequest_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11628,_id11629) = iprot#readFieldBegin in
        if _t11628 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11629 with 
          | 1 -> (if _t11628 = Protocol.T_STRUCT then
              _str11627#set_e (read_talkException iprot)
            else
              iprot#skip _t11628)
          | _ -> iprot#skip _t11628);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11627

class confirmE2EELogin_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "confirmE2EELogin_args.verifier") | Some _x11630 -> _x11630
  method set_verifier _x11630 = _verifier <- Some _x11630
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  val mutable _deviceSecret : string option = None
  method get_deviceSecret = _deviceSecret
  method grab_deviceSecret = match _deviceSecret with None->raise (Field_empty "confirmE2EELogin_args.deviceSecret") | Some _x11631 -> _x11631
  method set_deviceSecret _x11631 = _deviceSecret <- Some _x11631
  method unset_deviceSecret = _deviceSecret <- None
  method reset_deviceSecret = _deviceSecret <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "confirmE2EELogin_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceSecret with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceSecret",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_confirmE2EELogin_args (iprot : Protocol.t) =
  let _str11634 = new confirmE2EELogin_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11635,_id11636) = iprot#readFieldBegin in
        if _t11635 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11636 with 
          | 1 -> (if _t11635 = Protocol.T_STRING then
              _str11634#set_verifier iprot#readString
            else
              iprot#skip _t11635)
          | 2 -> (if _t11635 = Protocol.T_STRING then
              _str11634#set_deviceSecret iprot#readString
            else
              iprot#skip _t11635)
          | _ -> iprot#skip _t11635);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11634

class confirmE2EELogin_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "confirmE2EELogin_result.success") | Some _x11637 -> _x11637
  method set_success _x11637 = _success <- Some _x11637
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "confirmE2EELogin_result.e") | Some _x11638 -> _x11638
  method set_e _x11638 = _e <- Some _x11638
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "confirmE2EELogin_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_confirmE2EELogin_result (iprot : Protocol.t) =
  let _str11641 = new confirmE2EELogin_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11642,_id11643) = iprot#readFieldBegin in
        if _t11642 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11643 with 
          | 0 -> (if _t11642 = Protocol.T_STRING then
              _str11641#set_success iprot#readString
            else
              iprot#skip _t11642)
          | 1 -> (if _t11642 = Protocol.T_STRUCT then
              _str11641#set_e (read_talkException iprot)
            else
              iprot#skip _t11642)
          | _ -> iprot#skip _t11642);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11641

class logoutZ_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "logoutZ_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_logoutZ_args (iprot : Protocol.t) =
  let _str11646 = new logoutZ_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11647,_id11648) = iprot#readFieldBegin in
        if _t11647 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11648 with 
          | _ -> iprot#skip _t11647);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11646

class logoutZ_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "logoutZ_result.e") | Some _x11649 -> _x11649
  method set_e _x11649 = _e <- Some _x11649
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "logoutZ_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_logoutZ_result (iprot : Protocol.t) =
  let _str11652 = new logoutZ_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11653,_id11654) = iprot#readFieldBegin in
        if _t11653 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11654 with 
          | 1 -> (if _t11653 = Protocol.T_STRUCT then
              _str11652#set_e (read_talkException iprot)
            else
              iprot#skip _t11653)
          | _ -> iprot#skip _t11653);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11652

class loginZ_args =
object (self)
  val mutable _loginRequest : loginRequest option = None
  method get_loginRequest = _loginRequest
  method grab_loginRequest = match _loginRequest with None->raise (Field_empty "loginZ_args.loginRequest") | Some _x11655 -> _x11655
  method set_loginRequest _x11655 = _loginRequest <- Some _x11655
  method unset_loginRequest = _loginRequest <- None
  method reset_loginRequest = _loginRequest <- None

  method copy =
      let _new = Oo.copy self in
      if _loginRequest <> None then
        _new#set_loginRequest self#grab_loginRequest#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginZ_args";
    (match _loginRequest with None -> () | Some _v -> 
      oprot#writeFieldBegin("loginRequest",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginZ_args (iprot : Protocol.t) =
  let _str11658 = new loginZ_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11659,_id11660) = iprot#readFieldBegin in
        if _t11659 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11660 with 
          | 2 -> (if _t11659 = Protocol.T_STRUCT then
              _str11658#set_loginRequest (read_loginRequest iprot)
            else
              iprot#skip _t11659)
          | _ -> iprot#skip _t11659);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11658

class loginZ_result =
object (self)
  val mutable _success : loginResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "loginZ_result.success") | Some _x11661 -> _x11661
  method set_success _x11661 = _success <- Some _x11661
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "loginZ_result.e") | Some _x11662 -> _x11662
  method set_e _x11662 = _e <- Some _x11662
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginZ_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginZ_result (iprot : Protocol.t) =
  let _str11665 = new loginZ_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11666,_id11667) = iprot#readFieldBegin in
        if _t11666 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11667 with 
          | 0 -> (if _t11666 = Protocol.T_STRUCT then
              _str11665#set_success (read_loginResult iprot)
            else
              iprot#skip _t11666)
          | 1 -> (if _t11666 = Protocol.T_STRUCT then
              _str11665#set_e (read_talkException iprot)
            else
              iprot#skip _t11666)
          | _ -> iprot#skip _t11666);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11665

class issueTokenForAccountMigrationSettings_args =
object (self)
  val mutable _enforce : bool option = None
  method get_enforce = _enforce
  method grab_enforce = match _enforce with None->raise (Field_empty "issueTokenForAccountMigrationSettings_args.enforce") | Some _x11668 -> _x11668
  method set_enforce _x11668 = _enforce <- Some _x11668
  method unset_enforce = _enforce <- None
  method reset_enforce = _enforce <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueTokenForAccountMigrationSettings_args";
    (match _enforce with None -> () | Some _v -> 
      oprot#writeFieldBegin("enforce",Protocol.T_BOOL,2);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueTokenForAccountMigrationSettings_args (iprot : Protocol.t) =
  let _str11671 = new issueTokenForAccountMigrationSettings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11672,_id11673) = iprot#readFieldBegin in
        if _t11672 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11673 with 
          | 2 -> (if _t11672 = Protocol.T_BOOL then
              _str11671#set_enforce iprot#readBool
            else
              iprot#skip _t11672)
          | _ -> iprot#skip _t11672);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11671

class issueTokenForAccountMigrationSettings_result =
object (self)
  val mutable _success : securityCenterResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "issueTokenForAccountMigrationSettings_result.success") | Some _x11674 -> _x11674
  method set_success _x11674 = _success <- Some _x11674
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "issueTokenForAccountMigrationSettings_result.e") | Some _x11675 -> _x11675
  method set_e _x11675 = _e <- Some _x11675
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueTokenForAccountMigrationSettings_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueTokenForAccountMigrationSettings_result (iprot : Protocol.t) =
  let _str11678 = new issueTokenForAccountMigrationSettings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11679,_id11680) = iprot#readFieldBegin in
        if _t11679 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11680 with 
          | 0 -> (if _t11679 = Protocol.T_STRUCT then
              _str11678#set_success (read_securityCenterResult iprot)
            else
              iprot#skip _t11679)
          | 1 -> (if _t11679 = Protocol.T_STRUCT then
              _str11678#set_e (read_talkException iprot)
            else
              iprot#skip _t11679)
          | _ -> iprot#skip _t11679);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11678

class issueTokenForAccountMigration_args =
object (self)
  val mutable _migrationSessionId : string option = None
  method get_migrationSessionId = _migrationSessionId
  method grab_migrationSessionId = match _migrationSessionId with None->raise (Field_empty "issueTokenForAccountMigration_args.migrationSessionId") | Some _x11681 -> _x11681
  method set_migrationSessionId _x11681 = _migrationSessionId <- Some _x11681
  method unset_migrationSessionId = _migrationSessionId <- None
  method reset_migrationSessionId = _migrationSessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueTokenForAccountMigration_args";
    (match _migrationSessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("migrationSessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueTokenForAccountMigration_args (iprot : Protocol.t) =
  let _str11684 = new issueTokenForAccountMigration_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11685,_id11686) = iprot#readFieldBegin in
        if _t11685 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11686 with 
          | 2 -> (if _t11685 = Protocol.T_STRING then
              _str11684#set_migrationSessionId iprot#readString
            else
              iprot#skip _t11685)
          | _ -> iprot#skip _t11685);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11684

class issueTokenForAccountMigration_result =
object (self)
  val mutable _success : securityCenterResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "issueTokenForAccountMigration_result.success") | Some _x11687 -> _x11687
  method set_success _x11687 = _success <- Some _x11687
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "issueTokenForAccountMigration_result.e") | Some _x11688 -> _x11688
  method set_e _x11688 = _e <- Some _x11688
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueTokenForAccountMigration_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueTokenForAccountMigration_result (iprot : Protocol.t) =
  let _str11691 = new issueTokenForAccountMigration_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11692,_id11693) = iprot#readFieldBegin in
        if _t11692 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11693 with 
          | 0 -> (if _t11692 = Protocol.T_STRUCT then
              _str11691#set_success (read_securityCenterResult iprot)
            else
              iprot#skip _t11692)
          | 1 -> (if _t11692 = Protocol.T_STRUCT then
              _str11691#set_e (read_talkException iprot)
            else
              iprot#skip _t11692)
          | _ -> iprot#skip _t11692);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11691

class verifyQrcodeWithE2EE_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "verifyQrcodeWithE2EE_args.verifier") | Some _x11694 -> _x11694
  method set_verifier _x11694 = _verifier <- Some _x11694
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  val mutable _pinCode : string option = None
  method get_pinCode = _pinCode
  method grab_pinCode = match _pinCode with None->raise (Field_empty "verifyQrcodeWithE2EE_args.pinCode") | Some _x11695 -> _x11695
  method set_pinCode _x11695 = _pinCode <- Some _x11695
  method unset_pinCode = _pinCode <- None
  method reset_pinCode = _pinCode <- None

  val mutable _errorCode : ErrorCode.t option = None
  method get_errorCode = _errorCode
  method grab_errorCode = match _errorCode with None->raise (Field_empty "verifyQrcodeWithE2EE_args.errorCode") | Some _x11696 -> _x11696
  method set_errorCode _x11696 = _errorCode <- Some _x11696
  method unset_errorCode = _errorCode <- None
  method reset_errorCode = _errorCode <- None

  val mutable _publicKey : e2EEPublicKey option = None
  method get_publicKey = _publicKey
  method grab_publicKey = match _publicKey with None->raise (Field_empty "verifyQrcodeWithE2EE_args.publicKey") | Some _x11697 -> _x11697
  method set_publicKey _x11697 = _publicKey <- Some _x11697
  method unset_publicKey = _publicKey <- None
  method reset_publicKey = _publicKey <- None

  val mutable _encryptedKeyChain : string option = None
  method get_encryptedKeyChain = _encryptedKeyChain
  method grab_encryptedKeyChain = match _encryptedKeyChain with None->raise (Field_empty "verifyQrcodeWithE2EE_args.encryptedKeyChain") | Some _x11698 -> _x11698
  method set_encryptedKeyChain _x11698 = _encryptedKeyChain <- Some _x11698
  method unset_encryptedKeyChain = _encryptedKeyChain <- None
  method reset_encryptedKeyChain = _encryptedKeyChain <- None

  val mutable _hashKeyChain : string option = None
  method get_hashKeyChain = _hashKeyChain
  method grab_hashKeyChain = match _hashKeyChain with None->raise (Field_empty "verifyQrcodeWithE2EE_args.hashKeyChain") | Some _x11699 -> _x11699
  method set_hashKeyChain _x11699 = _hashKeyChain <- Some _x11699
  method unset_hashKeyChain = _hashKeyChain <- None
  method reset_hashKeyChain = _hashKeyChain <- None

  method copy =
      let _new = Oo.copy self in
      if _publicKey <> None then
        _new#set_publicKey self#grab_publicKey#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyQrcodeWithE2EE_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _pinCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("pinCode",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _errorCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("errorCode",Protocol.T_I32,4);
      oprot#writeI32(ErrorCode.to_i _v);
      oprot#writeFieldEnd
    );
    (match _publicKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("publicKey",Protocol.T_STRUCT,5);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _encryptedKeyChain with None -> () | Some _v -> 
      oprot#writeFieldBegin("encryptedKeyChain",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _hashKeyChain with None -> () | Some _v -> 
      oprot#writeFieldBegin("hashKeyChain",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyQrcodeWithE2EE_args (iprot : Protocol.t) =
  let _str11702 = new verifyQrcodeWithE2EE_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11703,_id11704) = iprot#readFieldBegin in
        if _t11703 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11704 with 
          | 2 -> (if _t11703 = Protocol.T_STRING then
              _str11702#set_verifier iprot#readString
            else
              iprot#skip _t11703)
          | 3 -> (if _t11703 = Protocol.T_STRING then
              _str11702#set_pinCode iprot#readString
            else
              iprot#skip _t11703)
          | 4 -> (if _t11703 = Protocol.T_I32 then
              _str11702#set_errorCode (ErrorCode.of_i iprot#readI32)
            else
              iprot#skip _t11703)
          | 5 -> (if _t11703 = Protocol.T_STRUCT then
              _str11702#set_publicKey (read_e2EEPublicKey iprot)
            else
              iprot#skip _t11703)
          | 6 -> (if _t11703 = Protocol.T_STRING then
              _str11702#set_encryptedKeyChain iprot#readString
            else
              iprot#skip _t11703)
          | 7 -> (if _t11703 = Protocol.T_STRING then
              _str11702#set_hashKeyChain iprot#readString
            else
              iprot#skip _t11703)
          | _ -> iprot#skip _t11703);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11702

class verifyQrcodeWithE2EE_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "verifyQrcodeWithE2EE_result.success") | Some _x11705 -> _x11705
  method set_success _x11705 = _success <- Some _x11705
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "verifyQrcodeWithE2EE_result.e") | Some _x11706 -> _x11706
  method set_e _x11706 = _e <- Some _x11706
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyQrcodeWithE2EE_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyQrcodeWithE2EE_result (iprot : Protocol.t) =
  let _str11709 = new verifyQrcodeWithE2EE_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11710,_id11711) = iprot#readFieldBegin in
        if _t11710 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11711 with 
          | 0 -> (if _t11710 = Protocol.T_STRING then
              _str11709#set_success iprot#readString
            else
              iprot#skip _t11710)
          | 1 -> (if _t11710 = Protocol.T_STRUCT then
              _str11709#set_e (read_talkException iprot)
            else
              iprot#skip _t11710)
          | _ -> iprot#skip _t11710);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11709

class virtual iface =
object (self)
  method virtual normalizePhoneNumber : string option -> string option -> string option -> string
  method virtual respondE2EELoginRequest : string option -> e2EEPublicKey option -> string option -> string option -> ErrorCode.t option -> unit
  method virtual confirmE2EELogin : string option -> string option -> string
  method virtual logoutZ : unit
  method virtual loginZ : loginRequest option -> loginResult
  method virtual issueTokenForAccountMigrationSettings : bool option -> securityCenterResult
  method virtual issueTokenForAccountMigration : string option -> securityCenterResult
  method virtual verifyQrcodeWithE2EE : string option -> string option -> ErrorCode.t option -> e2EEPublicKey option -> string option -> string option -> string
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method normalizePhoneNumber countryCode phoneNumber countryCodeHint = 
    self#send_normalizePhoneNumber countryCode phoneNumber countryCodeHint;
    self#recv_normalizePhoneNumber
  method private send_normalizePhoneNumber countryCode phoneNumber countryCodeHint = 
    oprot#writeMessageBegin ("normalizePhoneNumber", Protocol.CALL, seqid);
    let args = new normalizePhoneNumber_args in
      args#set_countryCode countryCode;
      args#set_phoneNumber phoneNumber;
      args#set_countryCodeHint countryCodeHint;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_normalizePhoneNumber  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_normalizePhoneNumber_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "normalizePhoneNumber failed: unknown result")))
  method respondE2EELoginRequest verifier publicKey encryptedKeyChain hashKeyChain errorCode = 
    self#send_respondE2EELoginRequest verifier publicKey encryptedKeyChain hashKeyChain errorCode;
    self#recv_respondE2EELoginRequest
  method private send_respondE2EELoginRequest verifier publicKey encryptedKeyChain hashKeyChain errorCode = 
    oprot#writeMessageBegin ("respondE2EELoginRequest", Protocol.CALL, seqid);
    let args = new respondE2EELoginRequest_args in
      args#set_verifier verifier;
      args#set_publicKey publicKey;
      args#set_encryptedKeyChain encryptedKeyChain;
      args#set_hashKeyChain hashKeyChain;
      args#set_errorCode errorCode;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_respondE2EELoginRequest  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_respondE2EELoginRequest_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method confirmE2EELogin verifier deviceSecret = 
    self#send_confirmE2EELogin verifier deviceSecret;
    self#recv_confirmE2EELogin
  method private send_confirmE2EELogin verifier deviceSecret = 
    oprot#writeMessageBegin ("confirmE2EELogin", Protocol.CALL, seqid);
    let args = new confirmE2EELogin_args in
      args#set_verifier verifier;
      args#set_deviceSecret deviceSecret;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_confirmE2EELogin  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_confirmE2EELogin_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "confirmE2EELogin failed: unknown result")))
  method logoutZ  = 
    self#send_logoutZ;
    self#recv_logoutZ
  method private send_logoutZ  = 
    oprot#writeMessageBegin ("logoutZ", Protocol.CALL, seqid);
    let args = new logoutZ_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_logoutZ  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_logoutZ_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method loginZ loginRequest = 
    self#send_loginZ loginRequest;
    self#recv_loginZ
  method private send_loginZ loginRequest = 
    oprot#writeMessageBegin ("loginZ", Protocol.CALL, seqid);
    let args = new loginZ_args in
      args#set_loginRequest loginRequest;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_loginZ  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_loginZ_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "loginZ failed: unknown result")))
  method issueTokenForAccountMigrationSettings enforce = 
    self#send_issueTokenForAccountMigrationSettings enforce;
    self#recv_issueTokenForAccountMigrationSettings
  method private send_issueTokenForAccountMigrationSettings enforce = 
    oprot#writeMessageBegin ("issueTokenForAccountMigrationSettings", Protocol.CALL, seqid);
    let args = new issueTokenForAccountMigrationSettings_args in
      args#set_enforce enforce;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_issueTokenForAccountMigrationSettings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_issueTokenForAccountMigrationSettings_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "issueTokenForAccountMigrationSettings failed: unknown result")))
  method issueTokenForAccountMigration migrationSessionId = 
    self#send_issueTokenForAccountMigration migrationSessionId;
    self#recv_issueTokenForAccountMigration
  method private send_issueTokenForAccountMigration migrationSessionId = 
    oprot#writeMessageBegin ("issueTokenForAccountMigration", Protocol.CALL, seqid);
    let args = new issueTokenForAccountMigration_args in
      args#set_migrationSessionId migrationSessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_issueTokenForAccountMigration  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_issueTokenForAccountMigration_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "issueTokenForAccountMigration failed: unknown result")))
  method verifyQrcodeWithE2EE verifier pinCode errorCode publicKey encryptedKeyChain hashKeyChain = 
    self#send_verifyQrcodeWithE2EE verifier pinCode errorCode publicKey encryptedKeyChain hashKeyChain;
    self#recv_verifyQrcodeWithE2EE
  method private send_verifyQrcodeWithE2EE verifier pinCode errorCode publicKey encryptedKeyChain hashKeyChain = 
    oprot#writeMessageBegin ("verifyQrcodeWithE2EE", Protocol.CALL, seqid);
    let args = new verifyQrcodeWithE2EE_args in
      args#set_verifier verifier;
      args#set_pinCode pinCode;
      args#set_errorCode errorCode;
      args#set_publicKey publicKey;
      args#set_encryptedKeyChain encryptedKeyChain;
      args#set_hashKeyChain hashKeyChain;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_verifyQrcodeWithE2EE  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_verifyQrcodeWithE2EE_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "verifyQrcodeWithE2EE failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 8
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_normalizePhoneNumber (seqid, iprot, oprot) =
    let args = read_normalizePhoneNumber_args iprot in
      iprot#readMessageEnd;
      let result = new normalizePhoneNumber_result in
        (try
          result#set_success (handler#normalizePhoneNumber args#get_countryCode args#get_phoneNumber args#get_countryCodeHint);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("normalizePhoneNumber", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_respondE2EELoginRequest (seqid, iprot, oprot) =
    let args = read_respondE2EELoginRequest_args iprot in
      iprot#readMessageEnd;
      let result = new respondE2EELoginRequest_result in
        (try
          (handler#respondE2EELoginRequest args#get_verifier args#get_publicKey args#get_encryptedKeyChain args#get_hashKeyChain args#get_errorCode);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("respondE2EELoginRequest", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_confirmE2EELogin (seqid, iprot, oprot) =
    let args = read_confirmE2EELogin_args iprot in
      iprot#readMessageEnd;
      let result = new confirmE2EELogin_result in
        (try
          result#set_success (handler#confirmE2EELogin args#get_verifier args#get_deviceSecret);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("confirmE2EELogin", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_logoutZ (seqid, iprot, oprot) =
    let _ = read_logoutZ_args iprot in
      iprot#readMessageEnd;
      let result = new logoutZ_result in
        (try
          (handler#logoutZ);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("logoutZ", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_loginZ (seqid, iprot, oprot) =
    let args = read_loginZ_args iprot in
      iprot#readMessageEnd;
      let result = new loginZ_result in
        (try
          result#set_success (handler#loginZ args#get_loginRequest);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("loginZ", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_issueTokenForAccountMigrationSettings (seqid, iprot, oprot) =
    let args = read_issueTokenForAccountMigrationSettings_args iprot in
      iprot#readMessageEnd;
      let result = new issueTokenForAccountMigrationSettings_result in
        (try
          result#set_success (handler#issueTokenForAccountMigrationSettings args#get_enforce);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("issueTokenForAccountMigrationSettings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_issueTokenForAccountMigration (seqid, iprot, oprot) =
    let args = read_issueTokenForAccountMigration_args iprot in
      iprot#readMessageEnd;
      let result = new issueTokenForAccountMigration_result in
        (try
          result#set_success (handler#issueTokenForAccountMigration args#get_migrationSessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("issueTokenForAccountMigration", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_verifyQrcodeWithE2EE (seqid, iprot, oprot) =
    let args = read_verifyQrcodeWithE2EE_args iprot in
      iprot#readMessageEnd;
      let result = new verifyQrcodeWithE2EE_result in
        (try
          result#set_success (handler#verifyQrcodeWithE2EE args#get_verifier args#get_pinCode args#get_errorCode args#get_publicKey args#get_encryptedKeyChain args#get_hashKeyChain);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("verifyQrcodeWithE2EE", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "normalizePhoneNumber" self#process_normalizePhoneNumber;
    Hashtbl.add processMap "respondE2EELoginRequest" self#process_respondE2EELoginRequest;
    Hashtbl.add processMap "confirmE2EELogin" self#process_confirmE2EELogin;
    Hashtbl.add processMap "logoutZ" self#process_logoutZ;
    Hashtbl.add processMap "loginZ" self#process_loginZ;
    Hashtbl.add processMap "issueTokenForAccountMigrationSettings" self#process_issueTokenForAccountMigrationSettings;
    Hashtbl.add processMap "issueTokenForAccountMigration" self#process_issueTokenForAccountMigration;
    Hashtbl.add processMap "verifyQrcodeWithE2EE" self#process_verifyQrcodeWithE2EE;
end

