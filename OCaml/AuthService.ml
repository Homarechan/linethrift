(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class updatePassword_args =
object (self)
  val mutable _authSessionId : string option = None
  method get_authSessionId = _authSessionId
  method grab_authSessionId = match _authSessionId with None->raise (Field_empty "updatePassword_args.authSessionId") | Some _x12225 -> _x12225
  method set_authSessionId _x12225 = _authSessionId <- Some _x12225
  method unset_authSessionId = _authSessionId <- None
  method reset_authSessionId = _authSessionId <- None

  val mutable _request : identityCredentialRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updatePassword_args.request") | Some _x12226 -> _x12226
  method set_request _x12226 = _request <- Some _x12226
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updatePassword_args";
    (match _authSessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("authSessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,3);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updatePassword_args (iprot : Protocol.t) =
  let _str12229 = new updatePassword_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12230,_id12231) = iprot#readFieldBegin in
        if _t12230 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12231 with 
          | 2 -> (if _t12230 = Protocol.T_STRING then
              _str12229#set_authSessionId iprot#readString
            else
              iprot#skip _t12230)
          | 3 -> (if _t12230 = Protocol.T_STRUCT then
              _str12229#set_request (read_identityCredentialRequest iprot)
            else
              iprot#skip _t12230)
          | _ -> iprot#skip _t12230);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12229

class updatePassword_result =
object (self)
  val mutable _success : identityCredentialResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updatePassword_result.success") | Some _x12232 -> _x12232
  method set_success _x12232 = _success <- Some _x12232
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updatePassword_result.e") | Some _x12233 -> _x12233
  method set_e _x12233 = _e <- Some _x12233
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updatePassword_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updatePassword_result (iprot : Protocol.t) =
  let _str12236 = new updatePassword_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12237,_id12238) = iprot#readFieldBegin in
        if _t12237 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12238 with 
          | 0 -> (if _t12237 = Protocol.T_STRUCT then
              _str12236#set_success (read_identityCredentialResponse iprot)
            else
              iprot#skip _t12237)
          | 1 -> (if _t12237 = Protocol.T_STRUCT then
              _str12236#set_e (read_talkException iprot)
            else
              iprot#skip _t12237)
          | _ -> iprot#skip _t12237);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12236

class getAuthRSAKey_args =
object (self)
  val mutable _authSessionId : string option = None
  method get_authSessionId = _authSessionId
  method grab_authSessionId = match _authSessionId with None->raise (Field_empty "getAuthRSAKey_args.authSessionId") | Some _x12239 -> _x12239
  method set_authSessionId _x12239 = _authSessionId <- Some _x12239
  method unset_authSessionId = _authSessionId <- None
  method reset_authSessionId = _authSessionId <- None

  val mutable _identityProvider : IdentityProvider.t option = None
  method get_identityProvider = _identityProvider
  method grab_identityProvider = match _identityProvider with None->raise (Field_empty "getAuthRSAKey_args.identityProvider") | Some _x12240 -> _x12240
  method set_identityProvider _x12240 = _identityProvider <- Some _x12240
  method unset_identityProvider = _identityProvider <- None
  method reset_identityProvider = _identityProvider <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAuthRSAKey_args";
    (match _authSessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("authSessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _identityProvider with None -> () | Some _v -> 
      oprot#writeFieldBegin("identityProvider",Protocol.T_I32,3);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAuthRSAKey_args (iprot : Protocol.t) =
  let _str12243 = new getAuthRSAKey_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12244,_id12245) = iprot#readFieldBegin in
        if _t12244 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12245 with 
          | 2 -> (if _t12244 = Protocol.T_STRING then
              _str12243#set_authSessionId iprot#readString
            else
              iprot#skip _t12244)
          | 3 -> (if _t12244 = Protocol.T_I32 then
              _str12243#set_identityProvider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t12244)
          | _ -> iprot#skip _t12244);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12243

class getAuthRSAKey_result =
object (self)
  val mutable _success : rSAKey option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAuthRSAKey_result.success") | Some _x12246 -> _x12246
  method set_success _x12246 = _success <- Some _x12246
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getAuthRSAKey_result.e") | Some _x12247 -> _x12247
  method set_e _x12247 = _e <- Some _x12247
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAuthRSAKey_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAuthRSAKey_result (iprot : Protocol.t) =
  let _str12250 = new getAuthRSAKey_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12251,_id12252) = iprot#readFieldBegin in
        if _t12251 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12252 with 
          | 0 -> (if _t12251 = Protocol.T_STRUCT then
              _str12250#set_success (read_rSAKey iprot)
            else
              iprot#skip _t12251)
          | 1 -> (if _t12251 = Protocol.T_STRUCT then
              _str12250#set_e (read_talkException iprot)
            else
              iprot#skip _t12251)
          | _ -> iprot#skip _t12251);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12250

class openAuthSession_args =
object (self)
  val mutable _request : authSessionRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "openAuthSession_args.request") | Some _x12253 -> _x12253
  method set_request _x12253 = _request <- Some _x12253
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "openAuthSession_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_openAuthSession_args (iprot : Protocol.t) =
  let _str12256 = new openAuthSession_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12257,_id12258) = iprot#readFieldBegin in
        if _t12257 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12258 with 
          | 2 -> (if _t12257 = Protocol.T_STRUCT then
              _str12256#set_request (read_authSessionRequest iprot)
            else
              iprot#skip _t12257)
          | _ -> iprot#skip _t12257);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12256

class openAuthSession_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "openAuthSession_result.success") | Some _x12259 -> _x12259
  method set_success _x12259 = _success <- Some _x12259
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "openAuthSession_result.e") | Some _x12260 -> _x12260
  method set_e _x12260 = _e <- Some _x12260
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "openAuthSession_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_openAuthSession_result (iprot : Protocol.t) =
  let _str12263 = new openAuthSession_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12264,_id12265) = iprot#readFieldBegin in
        if _t12264 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12265 with 
          | 0 -> (if _t12264 = Protocol.T_STRING then
              _str12263#set_success iprot#readString
            else
              iprot#skip _t12264)
          | 1 -> (if _t12264 = Protocol.T_STRUCT then
              _str12263#set_e (read_talkException iprot)
            else
              iprot#skip _t12264)
          | _ -> iprot#skip _t12264);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12263

class normalizePhoneNumber_args =
object (self)
  val mutable _countryCode : string option = None
  method get_countryCode = _countryCode
  method grab_countryCode = match _countryCode with None->raise (Field_empty "normalizePhoneNumber_args.countryCode") | Some _x12266 -> _x12266
  method set_countryCode _x12266 = _countryCode <- Some _x12266
  method unset_countryCode = _countryCode <- None
  method reset_countryCode = _countryCode <- None

  val mutable _phoneNumber : string option = None
  method get_phoneNumber = _phoneNumber
  method grab_phoneNumber = match _phoneNumber with None->raise (Field_empty "normalizePhoneNumber_args.phoneNumber") | Some _x12267 -> _x12267
  method set_phoneNumber _x12267 = _phoneNumber <- Some _x12267
  method unset_phoneNumber = _phoneNumber <- None
  method reset_phoneNumber = _phoneNumber <- None

  val mutable _countryCodeHint : string option = None
  method get_countryCodeHint = _countryCodeHint
  method grab_countryCodeHint = match _countryCodeHint with None->raise (Field_empty "normalizePhoneNumber_args.countryCodeHint") | Some _x12268 -> _x12268
  method set_countryCodeHint _x12268 = _countryCodeHint <- Some _x12268
  method unset_countryCodeHint = _countryCodeHint <- None
  method reset_countryCodeHint = _countryCodeHint <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "normalizePhoneNumber_args";
    (match _countryCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("countryCode",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _phoneNumber with None -> () | Some _v -> 
      oprot#writeFieldBegin("phoneNumber",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _countryCodeHint with None -> () | Some _v -> 
      oprot#writeFieldBegin("countryCodeHint",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_normalizePhoneNumber_args (iprot : Protocol.t) =
  let _str12271 = new normalizePhoneNumber_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12272,_id12273) = iprot#readFieldBegin in
        if _t12272 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12273 with 
          | 2 -> (if _t12272 = Protocol.T_STRING then
              _str12271#set_countryCode iprot#readString
            else
              iprot#skip _t12272)
          | 3 -> (if _t12272 = Protocol.T_STRING then
              _str12271#set_phoneNumber iprot#readString
            else
              iprot#skip _t12272)
          | 4 -> (if _t12272 = Protocol.T_STRING then
              _str12271#set_countryCodeHint iprot#readString
            else
              iprot#skip _t12272)
          | _ -> iprot#skip _t12272);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12271

class normalizePhoneNumber_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "normalizePhoneNumber_result.success") | Some _x12274 -> _x12274
  method set_success _x12274 = _success <- Some _x12274
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "normalizePhoneNumber_result.e") | Some _x12275 -> _x12275
  method set_e _x12275 = _e <- Some _x12275
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "normalizePhoneNumber_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_normalizePhoneNumber_result (iprot : Protocol.t) =
  let _str12278 = new normalizePhoneNumber_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12279,_id12280) = iprot#readFieldBegin in
        if _t12279 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12280 with 
          | 0 -> (if _t12279 = Protocol.T_STRING then
              _str12278#set_success iprot#readString
            else
              iprot#skip _t12279)
          | 1 -> (if _t12279 = Protocol.T_STRUCT then
              _str12278#set_e (read_talkException iprot)
            else
              iprot#skip _t12279)
          | _ -> iprot#skip _t12279);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12278

class respondE2EELoginRequest_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "respondE2EELoginRequest_args.verifier") | Some _x12281 -> _x12281
  method set_verifier _x12281 = _verifier <- Some _x12281
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  val mutable _publicKey : e2EEPublicKey option = None
  method get_publicKey = _publicKey
  method grab_publicKey = match _publicKey with None->raise (Field_empty "respondE2EELoginRequest_args.publicKey") | Some _x12282 -> _x12282
  method set_publicKey _x12282 = _publicKey <- Some _x12282
  method unset_publicKey = _publicKey <- None
  method reset_publicKey = _publicKey <- None

  val mutable _encryptedKeyChain : string option = None
  method get_encryptedKeyChain = _encryptedKeyChain
  method grab_encryptedKeyChain = match _encryptedKeyChain with None->raise (Field_empty "respondE2EELoginRequest_args.encryptedKeyChain") | Some _x12283 -> _x12283
  method set_encryptedKeyChain _x12283 = _encryptedKeyChain <- Some _x12283
  method unset_encryptedKeyChain = _encryptedKeyChain <- None
  method reset_encryptedKeyChain = _encryptedKeyChain <- None

  val mutable _hashKeyChain : string option = None
  method get_hashKeyChain = _hashKeyChain
  method grab_hashKeyChain = match _hashKeyChain with None->raise (Field_empty "respondE2EELoginRequest_args.hashKeyChain") | Some _x12284 -> _x12284
  method set_hashKeyChain _x12284 = _hashKeyChain <- Some _x12284
  method unset_hashKeyChain = _hashKeyChain <- None
  method reset_hashKeyChain = _hashKeyChain <- None

  val mutable _errorCode : ErrorCode.t option = None
  method get_errorCode = _errorCode
  method grab_errorCode = match _errorCode with None->raise (Field_empty "respondE2EELoginRequest_args.errorCode") | Some _x12285 -> _x12285
  method set_errorCode _x12285 = _errorCode <- Some _x12285
  method unset_errorCode = _errorCode <- None
  method reset_errorCode = _errorCode <- None

  method copy =
      let _new = Oo.copy self in
      if _publicKey <> None then
        _new#set_publicKey self#grab_publicKey#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "respondE2EELoginRequest_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _publicKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("publicKey",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _encryptedKeyChain with None -> () | Some _v -> 
      oprot#writeFieldBegin("encryptedKeyChain",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _hashKeyChain with None -> () | Some _v -> 
      oprot#writeFieldBegin("hashKeyChain",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _errorCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("errorCode",Protocol.T_I32,5);
      oprot#writeI32(ErrorCode.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_respondE2EELoginRequest_args (iprot : Protocol.t) =
  let _str12288 = new respondE2EELoginRequest_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12289,_id12290) = iprot#readFieldBegin in
        if _t12289 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12290 with 
          | 1 -> (if _t12289 = Protocol.T_STRING then
              _str12288#set_verifier iprot#readString
            else
              iprot#skip _t12289)
          | 2 -> (if _t12289 = Protocol.T_STRUCT then
              _str12288#set_publicKey (read_e2EEPublicKey iprot)
            else
              iprot#skip _t12289)
          | 3 -> (if _t12289 = Protocol.T_STRING then
              _str12288#set_encryptedKeyChain iprot#readString
            else
              iprot#skip _t12289)
          | 4 -> (if _t12289 = Protocol.T_STRING then
              _str12288#set_hashKeyChain iprot#readString
            else
              iprot#skip _t12289)
          | 5 -> (if _t12289 = Protocol.T_I32 then
              _str12288#set_errorCode (ErrorCode.of_i iprot#readI32)
            else
              iprot#skip _t12289)
          | _ -> iprot#skip _t12289);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12288

class respondE2EELoginRequest_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "respondE2EELoginRequest_result.e") | Some _x12291 -> _x12291
  method set_e _x12291 = _e <- Some _x12291
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "respondE2EELoginRequest_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_respondE2EELoginRequest_result (iprot : Protocol.t) =
  let _str12294 = new respondE2EELoginRequest_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12295,_id12296) = iprot#readFieldBegin in
        if _t12295 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12296 with 
          | 1 -> (if _t12295 = Protocol.T_STRUCT then
              _str12294#set_e (read_talkException iprot)
            else
              iprot#skip _t12295)
          | _ -> iprot#skip _t12295);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12294

class confirmE2EELogin_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "confirmE2EELogin_args.verifier") | Some _x12297 -> _x12297
  method set_verifier _x12297 = _verifier <- Some _x12297
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  val mutable _deviceSecret : string option = None
  method get_deviceSecret = _deviceSecret
  method grab_deviceSecret = match _deviceSecret with None->raise (Field_empty "confirmE2EELogin_args.deviceSecret") | Some _x12298 -> _x12298
  method set_deviceSecret _x12298 = _deviceSecret <- Some _x12298
  method unset_deviceSecret = _deviceSecret <- None
  method reset_deviceSecret = _deviceSecret <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "confirmE2EELogin_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceSecret with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceSecret",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_confirmE2EELogin_args (iprot : Protocol.t) =
  let _str12301 = new confirmE2EELogin_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12302,_id12303) = iprot#readFieldBegin in
        if _t12302 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12303 with 
          | 1 -> (if _t12302 = Protocol.T_STRING then
              _str12301#set_verifier iprot#readString
            else
              iprot#skip _t12302)
          | 2 -> (if _t12302 = Protocol.T_STRING then
              _str12301#set_deviceSecret iprot#readString
            else
              iprot#skip _t12302)
          | _ -> iprot#skip _t12302);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12301

class confirmE2EELogin_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "confirmE2EELogin_result.success") | Some _x12304 -> _x12304
  method set_success _x12304 = _success <- Some _x12304
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "confirmE2EELogin_result.e") | Some _x12305 -> _x12305
  method set_e _x12305 = _e <- Some _x12305
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "confirmE2EELogin_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_confirmE2EELogin_result (iprot : Protocol.t) =
  let _str12308 = new confirmE2EELogin_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12309,_id12310) = iprot#readFieldBegin in
        if _t12309 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12310 with 
          | 0 -> (if _t12309 = Protocol.T_STRING then
              _str12308#set_success iprot#readString
            else
              iprot#skip _t12309)
          | 1 -> (if _t12309 = Protocol.T_STRUCT then
              _str12308#set_e (read_talkException iprot)
            else
              iprot#skip _t12309)
          | _ -> iprot#skip _t12309);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12308

class logoutZ_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "logoutZ_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_logoutZ_args (iprot : Protocol.t) =
  let _str12313 = new logoutZ_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12314,_id12315) = iprot#readFieldBegin in
        if _t12314 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12315 with 
          | _ -> iprot#skip _t12314);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12313

class logoutZ_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "logoutZ_result.e") | Some _x12316 -> _x12316
  method set_e _x12316 = _e <- Some _x12316
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "logoutZ_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_logoutZ_result (iprot : Protocol.t) =
  let _str12319 = new logoutZ_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12320,_id12321) = iprot#readFieldBegin in
        if _t12320 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12321 with 
          | 1 -> (if _t12320 = Protocol.T_STRUCT then
              _str12319#set_e (read_talkException iprot)
            else
              iprot#skip _t12320)
          | _ -> iprot#skip _t12320);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12319

class loginZ_args =
object (self)
  val mutable _loginRequest : loginRequest option = None
  method get_loginRequest = _loginRequest
  method grab_loginRequest = match _loginRequest with None->raise (Field_empty "loginZ_args.loginRequest") | Some _x12322 -> _x12322
  method set_loginRequest _x12322 = _loginRequest <- Some _x12322
  method unset_loginRequest = _loginRequest <- None
  method reset_loginRequest = _loginRequest <- None

  method copy =
      let _new = Oo.copy self in
      if _loginRequest <> None then
        _new#set_loginRequest self#grab_loginRequest#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginZ_args";
    (match _loginRequest with None -> () | Some _v -> 
      oprot#writeFieldBegin("loginRequest",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginZ_args (iprot : Protocol.t) =
  let _str12325 = new loginZ_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12326,_id12327) = iprot#readFieldBegin in
        if _t12326 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12327 with 
          | 2 -> (if _t12326 = Protocol.T_STRUCT then
              _str12325#set_loginRequest (read_loginRequest iprot)
            else
              iprot#skip _t12326)
          | _ -> iprot#skip _t12326);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12325

class loginZ_result =
object (self)
  val mutable _success : loginResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "loginZ_result.success") | Some _x12328 -> _x12328
  method set_success _x12328 = _success <- Some _x12328
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "loginZ_result.e") | Some _x12329 -> _x12329
  method set_e _x12329 = _e <- Some _x12329
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginZ_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginZ_result (iprot : Protocol.t) =
  let _str12332 = new loginZ_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12333,_id12334) = iprot#readFieldBegin in
        if _t12333 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12334 with 
          | 0 -> (if _t12333 = Protocol.T_STRUCT then
              _str12332#set_success (read_loginResult iprot)
            else
              iprot#skip _t12333)
          | 1 -> (if _t12333 = Protocol.T_STRUCT then
              _str12332#set_e (read_talkException iprot)
            else
              iprot#skip _t12333)
          | _ -> iprot#skip _t12333);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12332

class issueTokenForAccountMigrationSettings_args =
object (self)
  val mutable _enforce : bool option = None
  method get_enforce = _enforce
  method grab_enforce = match _enforce with None->raise (Field_empty "issueTokenForAccountMigrationSettings_args.enforce") | Some _x12335 -> _x12335
  method set_enforce _x12335 = _enforce <- Some _x12335
  method unset_enforce = _enforce <- None
  method reset_enforce = _enforce <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueTokenForAccountMigrationSettings_args";
    (match _enforce with None -> () | Some _v -> 
      oprot#writeFieldBegin("enforce",Protocol.T_BOOL,2);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueTokenForAccountMigrationSettings_args (iprot : Protocol.t) =
  let _str12338 = new issueTokenForAccountMigrationSettings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12339,_id12340) = iprot#readFieldBegin in
        if _t12339 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12340 with 
          | 2 -> (if _t12339 = Protocol.T_BOOL then
              _str12338#set_enforce iprot#readBool
            else
              iprot#skip _t12339)
          | _ -> iprot#skip _t12339);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12338

class issueTokenForAccountMigrationSettings_result =
object (self)
  val mutable _success : securityCenterResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "issueTokenForAccountMigrationSettings_result.success") | Some _x12341 -> _x12341
  method set_success _x12341 = _success <- Some _x12341
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "issueTokenForAccountMigrationSettings_result.e") | Some _x12342 -> _x12342
  method set_e _x12342 = _e <- Some _x12342
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueTokenForAccountMigrationSettings_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueTokenForAccountMigrationSettings_result (iprot : Protocol.t) =
  let _str12345 = new issueTokenForAccountMigrationSettings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12346,_id12347) = iprot#readFieldBegin in
        if _t12346 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12347 with 
          | 0 -> (if _t12346 = Protocol.T_STRUCT then
              _str12345#set_success (read_securityCenterResult iprot)
            else
              iprot#skip _t12346)
          | 1 -> (if _t12346 = Protocol.T_STRUCT then
              _str12345#set_e (read_talkException iprot)
            else
              iprot#skip _t12346)
          | _ -> iprot#skip _t12346);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12345

class issueTokenForAccountMigration_args =
object (self)
  val mutable _migrationSessionId : string option = None
  method get_migrationSessionId = _migrationSessionId
  method grab_migrationSessionId = match _migrationSessionId with None->raise (Field_empty "issueTokenForAccountMigration_args.migrationSessionId") | Some _x12348 -> _x12348
  method set_migrationSessionId _x12348 = _migrationSessionId <- Some _x12348
  method unset_migrationSessionId = _migrationSessionId <- None
  method reset_migrationSessionId = _migrationSessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueTokenForAccountMigration_args";
    (match _migrationSessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("migrationSessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueTokenForAccountMigration_args (iprot : Protocol.t) =
  let _str12351 = new issueTokenForAccountMigration_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12352,_id12353) = iprot#readFieldBegin in
        if _t12352 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12353 with 
          | 2 -> (if _t12352 = Protocol.T_STRING then
              _str12351#set_migrationSessionId iprot#readString
            else
              iprot#skip _t12352)
          | _ -> iprot#skip _t12352);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12351

class issueTokenForAccountMigration_result =
object (self)
  val mutable _success : securityCenterResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "issueTokenForAccountMigration_result.success") | Some _x12354 -> _x12354
  method set_success _x12354 = _success <- Some _x12354
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "issueTokenForAccountMigration_result.e") | Some _x12355 -> _x12355
  method set_e _x12355 = _e <- Some _x12355
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueTokenForAccountMigration_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueTokenForAccountMigration_result (iprot : Protocol.t) =
  let _str12358 = new issueTokenForAccountMigration_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12359,_id12360) = iprot#readFieldBegin in
        if _t12359 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12360 with 
          | 0 -> (if _t12359 = Protocol.T_STRUCT then
              _str12358#set_success (read_securityCenterResult iprot)
            else
              iprot#skip _t12359)
          | 1 -> (if _t12359 = Protocol.T_STRUCT then
              _str12358#set_e (read_talkException iprot)
            else
              iprot#skip _t12359)
          | _ -> iprot#skip _t12359);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12358

class verifyQrcodeWithE2EE_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "verifyQrcodeWithE2EE_args.verifier") | Some _x12361 -> _x12361
  method set_verifier _x12361 = _verifier <- Some _x12361
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  val mutable _pinCode : string option = None
  method get_pinCode = _pinCode
  method grab_pinCode = match _pinCode with None->raise (Field_empty "verifyQrcodeWithE2EE_args.pinCode") | Some _x12362 -> _x12362
  method set_pinCode _x12362 = _pinCode <- Some _x12362
  method unset_pinCode = _pinCode <- None
  method reset_pinCode = _pinCode <- None

  val mutable _errorCode : ErrorCode.t option = None
  method get_errorCode = _errorCode
  method grab_errorCode = match _errorCode with None->raise (Field_empty "verifyQrcodeWithE2EE_args.errorCode") | Some _x12363 -> _x12363
  method set_errorCode _x12363 = _errorCode <- Some _x12363
  method unset_errorCode = _errorCode <- None
  method reset_errorCode = _errorCode <- None

  val mutable _publicKey : e2EEPublicKey option = None
  method get_publicKey = _publicKey
  method grab_publicKey = match _publicKey with None->raise (Field_empty "verifyQrcodeWithE2EE_args.publicKey") | Some _x12364 -> _x12364
  method set_publicKey _x12364 = _publicKey <- Some _x12364
  method unset_publicKey = _publicKey <- None
  method reset_publicKey = _publicKey <- None

  val mutable _encryptedKeyChain : string option = None
  method get_encryptedKeyChain = _encryptedKeyChain
  method grab_encryptedKeyChain = match _encryptedKeyChain with None->raise (Field_empty "verifyQrcodeWithE2EE_args.encryptedKeyChain") | Some _x12365 -> _x12365
  method set_encryptedKeyChain _x12365 = _encryptedKeyChain <- Some _x12365
  method unset_encryptedKeyChain = _encryptedKeyChain <- None
  method reset_encryptedKeyChain = _encryptedKeyChain <- None

  val mutable _hashKeyChain : string option = None
  method get_hashKeyChain = _hashKeyChain
  method grab_hashKeyChain = match _hashKeyChain with None->raise (Field_empty "verifyQrcodeWithE2EE_args.hashKeyChain") | Some _x12366 -> _x12366
  method set_hashKeyChain _x12366 = _hashKeyChain <- Some _x12366
  method unset_hashKeyChain = _hashKeyChain <- None
  method reset_hashKeyChain = _hashKeyChain <- None

  method copy =
      let _new = Oo.copy self in
      if _publicKey <> None then
        _new#set_publicKey self#grab_publicKey#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyQrcodeWithE2EE_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _pinCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("pinCode",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _errorCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("errorCode",Protocol.T_I32,4);
      oprot#writeI32(ErrorCode.to_i _v);
      oprot#writeFieldEnd
    );
    (match _publicKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("publicKey",Protocol.T_STRUCT,5);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _encryptedKeyChain with None -> () | Some _v -> 
      oprot#writeFieldBegin("encryptedKeyChain",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _hashKeyChain with None -> () | Some _v -> 
      oprot#writeFieldBegin("hashKeyChain",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyQrcodeWithE2EE_args (iprot : Protocol.t) =
  let _str12369 = new verifyQrcodeWithE2EE_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12370,_id12371) = iprot#readFieldBegin in
        if _t12370 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12371 with 
          | 2 -> (if _t12370 = Protocol.T_STRING then
              _str12369#set_verifier iprot#readString
            else
              iprot#skip _t12370)
          | 3 -> (if _t12370 = Protocol.T_STRING then
              _str12369#set_pinCode iprot#readString
            else
              iprot#skip _t12370)
          | 4 -> (if _t12370 = Protocol.T_I32 then
              _str12369#set_errorCode (ErrorCode.of_i iprot#readI32)
            else
              iprot#skip _t12370)
          | 5 -> (if _t12370 = Protocol.T_STRUCT then
              _str12369#set_publicKey (read_e2EEPublicKey iprot)
            else
              iprot#skip _t12370)
          | 6 -> (if _t12370 = Protocol.T_STRING then
              _str12369#set_encryptedKeyChain iprot#readString
            else
              iprot#skip _t12370)
          | 7 -> (if _t12370 = Protocol.T_STRING then
              _str12369#set_hashKeyChain iprot#readString
            else
              iprot#skip _t12370)
          | _ -> iprot#skip _t12370);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12369

class verifyQrcodeWithE2EE_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "verifyQrcodeWithE2EE_result.success") | Some _x12372 -> _x12372
  method set_success _x12372 = _success <- Some _x12372
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "verifyQrcodeWithE2EE_result.e") | Some _x12373 -> _x12373
  method set_e _x12373 = _e <- Some _x12373
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyQrcodeWithE2EE_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyQrcodeWithE2EE_result (iprot : Protocol.t) =
  let _str12376 = new verifyQrcodeWithE2EE_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12377,_id12378) = iprot#readFieldBegin in
        if _t12377 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12378 with 
          | 0 -> (if _t12377 = Protocol.T_STRING then
              _str12376#set_success iprot#readString
            else
              iprot#skip _t12377)
          | 1 -> (if _t12377 = Protocol.T_STRUCT then
              _str12376#set_e (read_talkException iprot)
            else
              iprot#skip _t12377)
          | _ -> iprot#skip _t12377);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12376

class virtual iface =
object (self)
  method virtual updatePassword : string option -> identityCredentialRequest option -> identityCredentialResponse
  method virtual getAuthRSAKey : string option -> IdentityProvider.t option -> rSAKey
  method virtual openAuthSession : authSessionRequest option -> string
  method virtual normalizePhoneNumber : string option -> string option -> string option -> string
  method virtual respondE2EELoginRequest : string option -> e2EEPublicKey option -> string option -> string option -> ErrorCode.t option -> unit
  method virtual confirmE2EELogin : string option -> string option -> string
  method virtual logoutZ : unit
  method virtual loginZ : loginRequest option -> loginResult
  method virtual issueTokenForAccountMigrationSettings : bool option -> securityCenterResult
  method virtual issueTokenForAccountMigration : string option -> securityCenterResult
  method virtual verifyQrcodeWithE2EE : string option -> string option -> ErrorCode.t option -> e2EEPublicKey option -> string option -> string option -> string
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method updatePassword authSessionId request = 
    self#send_updatePassword authSessionId request;
    self#recv_updatePassword
  method private send_updatePassword authSessionId request = 
    oprot#writeMessageBegin ("updatePassword", Protocol.CALL, seqid);
    let args = new updatePassword_args in
      args#set_authSessionId authSessionId;
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updatePassword  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updatePassword_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updatePassword failed: unknown result")))
  method getAuthRSAKey authSessionId identityProvider = 
    self#send_getAuthRSAKey authSessionId identityProvider;
    self#recv_getAuthRSAKey
  method private send_getAuthRSAKey authSessionId identityProvider = 
    oprot#writeMessageBegin ("getAuthRSAKey", Protocol.CALL, seqid);
    let args = new getAuthRSAKey_args in
      args#set_authSessionId authSessionId;
      args#set_identityProvider identityProvider;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAuthRSAKey  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAuthRSAKey_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAuthRSAKey failed: unknown result")))
  method openAuthSession request = 
    self#send_openAuthSession request;
    self#recv_openAuthSession
  method private send_openAuthSession request = 
    oprot#writeMessageBegin ("openAuthSession", Protocol.CALL, seqid);
    let args = new openAuthSession_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_openAuthSession  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_openAuthSession_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "openAuthSession failed: unknown result")))
  method normalizePhoneNumber countryCode phoneNumber countryCodeHint = 
    self#send_normalizePhoneNumber countryCode phoneNumber countryCodeHint;
    self#recv_normalizePhoneNumber
  method private send_normalizePhoneNumber countryCode phoneNumber countryCodeHint = 
    oprot#writeMessageBegin ("normalizePhoneNumber", Protocol.CALL, seqid);
    let args = new normalizePhoneNumber_args in
      args#set_countryCode countryCode;
      args#set_phoneNumber phoneNumber;
      args#set_countryCodeHint countryCodeHint;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_normalizePhoneNumber  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_normalizePhoneNumber_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "normalizePhoneNumber failed: unknown result")))
  method respondE2EELoginRequest verifier publicKey encryptedKeyChain hashKeyChain errorCode = 
    self#send_respondE2EELoginRequest verifier publicKey encryptedKeyChain hashKeyChain errorCode;
    self#recv_respondE2EELoginRequest
  method private send_respondE2EELoginRequest verifier publicKey encryptedKeyChain hashKeyChain errorCode = 
    oprot#writeMessageBegin ("respondE2EELoginRequest", Protocol.CALL, seqid);
    let args = new respondE2EELoginRequest_args in
      args#set_verifier verifier;
      args#set_publicKey publicKey;
      args#set_encryptedKeyChain encryptedKeyChain;
      args#set_hashKeyChain hashKeyChain;
      args#set_errorCode errorCode;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_respondE2EELoginRequest  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_respondE2EELoginRequest_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method confirmE2EELogin verifier deviceSecret = 
    self#send_confirmE2EELogin verifier deviceSecret;
    self#recv_confirmE2EELogin
  method private send_confirmE2EELogin verifier deviceSecret = 
    oprot#writeMessageBegin ("confirmE2EELogin", Protocol.CALL, seqid);
    let args = new confirmE2EELogin_args in
      args#set_verifier verifier;
      args#set_deviceSecret deviceSecret;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_confirmE2EELogin  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_confirmE2EELogin_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "confirmE2EELogin failed: unknown result")))
  method logoutZ  = 
    self#send_logoutZ;
    self#recv_logoutZ
  method private send_logoutZ  = 
    oprot#writeMessageBegin ("logoutZ", Protocol.CALL, seqid);
    let args = new logoutZ_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_logoutZ  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_logoutZ_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method loginZ loginRequest = 
    self#send_loginZ loginRequest;
    self#recv_loginZ
  method private send_loginZ loginRequest = 
    oprot#writeMessageBegin ("loginZ", Protocol.CALL, seqid);
    let args = new loginZ_args in
      args#set_loginRequest loginRequest;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_loginZ  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_loginZ_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "loginZ failed: unknown result")))
  method issueTokenForAccountMigrationSettings enforce = 
    self#send_issueTokenForAccountMigrationSettings enforce;
    self#recv_issueTokenForAccountMigrationSettings
  method private send_issueTokenForAccountMigrationSettings enforce = 
    oprot#writeMessageBegin ("issueTokenForAccountMigrationSettings", Protocol.CALL, seqid);
    let args = new issueTokenForAccountMigrationSettings_args in
      args#set_enforce enforce;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_issueTokenForAccountMigrationSettings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_issueTokenForAccountMigrationSettings_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "issueTokenForAccountMigrationSettings failed: unknown result")))
  method issueTokenForAccountMigration migrationSessionId = 
    self#send_issueTokenForAccountMigration migrationSessionId;
    self#recv_issueTokenForAccountMigration
  method private send_issueTokenForAccountMigration migrationSessionId = 
    oprot#writeMessageBegin ("issueTokenForAccountMigration", Protocol.CALL, seqid);
    let args = new issueTokenForAccountMigration_args in
      args#set_migrationSessionId migrationSessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_issueTokenForAccountMigration  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_issueTokenForAccountMigration_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "issueTokenForAccountMigration failed: unknown result")))
  method verifyQrcodeWithE2EE verifier pinCode errorCode publicKey encryptedKeyChain hashKeyChain = 
    self#send_verifyQrcodeWithE2EE verifier pinCode errorCode publicKey encryptedKeyChain hashKeyChain;
    self#recv_verifyQrcodeWithE2EE
  method private send_verifyQrcodeWithE2EE verifier pinCode errorCode publicKey encryptedKeyChain hashKeyChain = 
    oprot#writeMessageBegin ("verifyQrcodeWithE2EE", Protocol.CALL, seqid);
    let args = new verifyQrcodeWithE2EE_args in
      args#set_verifier verifier;
      args#set_pinCode pinCode;
      args#set_errorCode errorCode;
      args#set_publicKey publicKey;
      args#set_encryptedKeyChain encryptedKeyChain;
      args#set_hashKeyChain hashKeyChain;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_verifyQrcodeWithE2EE  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_verifyQrcodeWithE2EE_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "verifyQrcodeWithE2EE failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 11
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_updatePassword (seqid, iprot, oprot) =
    let args = read_updatePassword_args iprot in
      iprot#readMessageEnd;
      let result = new updatePassword_result in
        (try
          result#set_success (handler#updatePassword args#get_authSessionId args#get_request);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updatePassword", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAuthRSAKey (seqid, iprot, oprot) =
    let args = read_getAuthRSAKey_args iprot in
      iprot#readMessageEnd;
      let result = new getAuthRSAKey_result in
        (try
          result#set_success (handler#getAuthRSAKey args#get_authSessionId args#get_identityProvider);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getAuthRSAKey", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_openAuthSession (seqid, iprot, oprot) =
    let args = read_openAuthSession_args iprot in
      iprot#readMessageEnd;
      let result = new openAuthSession_result in
        (try
          result#set_success (handler#openAuthSession args#get_request);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("openAuthSession", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_normalizePhoneNumber (seqid, iprot, oprot) =
    let args = read_normalizePhoneNumber_args iprot in
      iprot#readMessageEnd;
      let result = new normalizePhoneNumber_result in
        (try
          result#set_success (handler#normalizePhoneNumber args#get_countryCode args#get_phoneNumber args#get_countryCodeHint);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("normalizePhoneNumber", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_respondE2EELoginRequest (seqid, iprot, oprot) =
    let args = read_respondE2EELoginRequest_args iprot in
      iprot#readMessageEnd;
      let result = new respondE2EELoginRequest_result in
        (try
          (handler#respondE2EELoginRequest args#get_verifier args#get_publicKey args#get_encryptedKeyChain args#get_hashKeyChain args#get_errorCode);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("respondE2EELoginRequest", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_confirmE2EELogin (seqid, iprot, oprot) =
    let args = read_confirmE2EELogin_args iprot in
      iprot#readMessageEnd;
      let result = new confirmE2EELogin_result in
        (try
          result#set_success (handler#confirmE2EELogin args#get_verifier args#get_deviceSecret);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("confirmE2EELogin", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_logoutZ (seqid, iprot, oprot) =
    let _ = read_logoutZ_args iprot in
      iprot#readMessageEnd;
      let result = new logoutZ_result in
        (try
          (handler#logoutZ);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("logoutZ", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_loginZ (seqid, iprot, oprot) =
    let args = read_loginZ_args iprot in
      iprot#readMessageEnd;
      let result = new loginZ_result in
        (try
          result#set_success (handler#loginZ args#get_loginRequest);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("loginZ", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_issueTokenForAccountMigrationSettings (seqid, iprot, oprot) =
    let args = read_issueTokenForAccountMigrationSettings_args iprot in
      iprot#readMessageEnd;
      let result = new issueTokenForAccountMigrationSettings_result in
        (try
          result#set_success (handler#issueTokenForAccountMigrationSettings args#get_enforce);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("issueTokenForAccountMigrationSettings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_issueTokenForAccountMigration (seqid, iprot, oprot) =
    let args = read_issueTokenForAccountMigration_args iprot in
      iprot#readMessageEnd;
      let result = new issueTokenForAccountMigration_result in
        (try
          result#set_success (handler#issueTokenForAccountMigration args#get_migrationSessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("issueTokenForAccountMigration", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_verifyQrcodeWithE2EE (seqid, iprot, oprot) =
    let args = read_verifyQrcodeWithE2EE_args iprot in
      iprot#readMessageEnd;
      let result = new verifyQrcodeWithE2EE_result in
        (try
          result#set_success (handler#verifyQrcodeWithE2EE args#get_verifier args#get_pinCode args#get_errorCode args#get_publicKey args#get_encryptedKeyChain args#get_hashKeyChain);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("verifyQrcodeWithE2EE", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "updatePassword" self#process_updatePassword;
    Hashtbl.add processMap "getAuthRSAKey" self#process_getAuthRSAKey;
    Hashtbl.add processMap "openAuthSession" self#process_openAuthSession;
    Hashtbl.add processMap "normalizePhoneNumber" self#process_normalizePhoneNumber;
    Hashtbl.add processMap "respondE2EELoginRequest" self#process_respondE2EELoginRequest;
    Hashtbl.add processMap "confirmE2EELogin" self#process_confirmE2EELogin;
    Hashtbl.add processMap "logoutZ" self#process_logoutZ;
    Hashtbl.add processMap "loginZ" self#process_loginZ;
    Hashtbl.add processMap "issueTokenForAccountMigrationSettings" self#process_issueTokenForAccountMigrationSettings;
    Hashtbl.add processMap "issueTokenForAccountMigration" self#process_issueTokenForAccountMigration;
    Hashtbl.add processMap "verifyQrcodeWithE2EE" self#process_verifyQrcodeWithE2EE;
end

