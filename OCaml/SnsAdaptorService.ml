(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class getSnsFriends_args =
object (self)
  val mutable _snsIdType : SnsIdType.t option = None
  method get_snsIdType = _snsIdType
  method grab_snsIdType = match _snsIdType with None->raise (Field_empty "getSnsFriends_args.snsIdType") | Some _x6547 -> _x6547
  method set_snsIdType _x6547 = _snsIdType <- Some _x6547
  method unset_snsIdType = _snsIdType <- None
  method reset_snsIdType = _snsIdType <- None

  val mutable _snsAccessToken : string option = None
  method get_snsAccessToken = _snsAccessToken
  method grab_snsAccessToken = match _snsAccessToken with None->raise (Field_empty "getSnsFriends_args.snsAccessToken") | Some _x6548 -> _x6548
  method set_snsAccessToken _x6548 = _snsAccessToken <- Some _x6548
  method unset_snsAccessToken = _snsAccessToken <- None
  method reset_snsAccessToken = _snsAccessToken <- None

  val mutable _startIdx : Int32.t option = None
  method get_startIdx = _startIdx
  method grab_startIdx = match _startIdx with None->raise (Field_empty "getSnsFriends_args.startIdx") | Some _x6549 -> _x6549
  method set_startIdx _x6549 = _startIdx <- Some _x6549
  method unset_startIdx = _startIdx <- None
  method reset_startIdx = _startIdx <- None

  val mutable _limit : Int32.t option = None
  method get_limit = _limit
  method grab_limit = match _limit with None->raise (Field_empty "getSnsFriends_args.limit") | Some _x6550 -> _x6550
  method set_limit _x6550 = _limit <- Some _x6550
  method unset_limit = _limit <- None
  method reset_limit = _limit <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSnsFriends_args";
    (match _snsIdType with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsIdType",Protocol.T_I32,2);
      oprot#writeI32(SnsIdType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _snsAccessToken with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsAccessToken",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _startIdx with None -> () | Some _v -> 
      oprot#writeFieldBegin("startIdx",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _limit with None -> () | Some _v -> 
      oprot#writeFieldBegin("limit",Protocol.T_I32,5);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSnsFriends_args (iprot : Protocol.t) =
  let _str6553 = new getSnsFriends_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6554,_id6555) = iprot#readFieldBegin in
        if _t6554 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6555 with 
          | 2 -> (if _t6554 = Protocol.T_I32 then
              _str6553#set_snsIdType (SnsIdType.of_i iprot#readI32)
            else
              iprot#skip _t6554)
          | 3 -> (if _t6554 = Protocol.T_STRING then
              _str6553#set_snsAccessToken iprot#readString
            else
              iprot#skip _t6554)
          | 4 -> (if _t6554 = Protocol.T_I32 then
              _str6553#set_startIdx iprot#readI32
            else
              iprot#skip _t6554)
          | 5 -> (if _t6554 = Protocol.T_I32 then
              _str6553#set_limit iprot#readI32
            else
              iprot#skip _t6554)
          | _ -> iprot#skip _t6554);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6553

class getSnsFriends_result =
object (self)
  val mutable _success : snsFriends option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSnsFriends_result.success") | Some _x6556 -> _x6556
  method set_success _x6556 = _success <- Some _x6556
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSnsFriends_result.e") | Some _x6557 -> _x6557
  method set_e _x6557 = _e <- Some _x6557
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSnsFriends_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSnsFriends_result (iprot : Protocol.t) =
  let _str6560 = new getSnsFriends_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6561,_id6562) = iprot#readFieldBegin in
        if _t6561 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6562 with 
          | 0 -> (if _t6561 = Protocol.T_STRUCT then
              _str6560#set_success (read_snsFriends iprot)
            else
              iprot#skip _t6561)
          | 1 -> (if _t6561 = Protocol.T_STRUCT then
              _str6560#set_e (read_talkException iprot)
            else
              iprot#skip _t6561)
          | _ -> iprot#skip _t6561);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6560

class getSnsMyProfile_args =
object (self)
  val mutable _snsIdType : SnsIdType.t option = None
  method get_snsIdType = _snsIdType
  method grab_snsIdType = match _snsIdType with None->raise (Field_empty "getSnsMyProfile_args.snsIdType") | Some _x6563 -> _x6563
  method set_snsIdType _x6563 = _snsIdType <- Some _x6563
  method unset_snsIdType = _snsIdType <- None
  method reset_snsIdType = _snsIdType <- None

  val mutable _snsAccessToken : string option = None
  method get_snsAccessToken = _snsAccessToken
  method grab_snsAccessToken = match _snsAccessToken with None->raise (Field_empty "getSnsMyProfile_args.snsAccessToken") | Some _x6564 -> _x6564
  method set_snsAccessToken _x6564 = _snsAccessToken <- Some _x6564
  method unset_snsAccessToken = _snsAccessToken <- None
  method reset_snsAccessToken = _snsAccessToken <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSnsMyProfile_args";
    (match _snsIdType with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsIdType",Protocol.T_I32,2);
      oprot#writeI32(SnsIdType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _snsAccessToken with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsAccessToken",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSnsMyProfile_args (iprot : Protocol.t) =
  let _str6567 = new getSnsMyProfile_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6568,_id6569) = iprot#readFieldBegin in
        if _t6568 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6569 with 
          | 2 -> (if _t6568 = Protocol.T_I32 then
              _str6567#set_snsIdType (SnsIdType.of_i iprot#readI32)
            else
              iprot#skip _t6568)
          | 3 -> (if _t6568 = Protocol.T_STRING then
              _str6567#set_snsAccessToken iprot#readString
            else
              iprot#skip _t6568)
          | _ -> iprot#skip _t6568);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6567

class getSnsMyProfile_result =
object (self)
  val mutable _success : snsProfile option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSnsMyProfile_result.success") | Some _x6570 -> _x6570
  method set_success _x6570 = _success <- Some _x6570
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSnsMyProfile_result.e") | Some _x6571 -> _x6571
  method set_e _x6571 = _e <- Some _x6571
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSnsMyProfile_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSnsMyProfile_result (iprot : Protocol.t) =
  let _str6574 = new getSnsMyProfile_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6575,_id6576) = iprot#readFieldBegin in
        if _t6575 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6576 with 
          | 0 -> (if _t6575 = Protocol.T_STRUCT then
              _str6574#set_success (read_snsProfile iprot)
            else
              iprot#skip _t6575)
          | 1 -> (if _t6575 = Protocol.T_STRUCT then
              _str6574#set_e (read_talkException iprot)
            else
              iprot#skip _t6575)
          | _ -> iprot#skip _t6575);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6574

class postSnsInvitationMessage_args =
object (self)
  val mutable _snsIdType : SnsIdType.t option = None
  method get_snsIdType = _snsIdType
  method grab_snsIdType = match _snsIdType with None->raise (Field_empty "postSnsInvitationMessage_args.snsIdType") | Some _x6577 -> _x6577
  method set_snsIdType _x6577 = _snsIdType <- Some _x6577
  method unset_snsIdType = _snsIdType <- None
  method reset_snsIdType = _snsIdType <- None

  val mutable _snsAccessToken : string option = None
  method get_snsAccessToken = _snsAccessToken
  method grab_snsAccessToken = match _snsAccessToken with None->raise (Field_empty "postSnsInvitationMessage_args.snsAccessToken") | Some _x6578 -> _x6578
  method set_snsAccessToken _x6578 = _snsAccessToken <- Some _x6578
  method unset_snsAccessToken = _snsAccessToken <- None
  method reset_snsAccessToken = _snsAccessToken <- None

  val mutable _toSnsUserId : string option = None
  method get_toSnsUserId = _toSnsUserId
  method grab_toSnsUserId = match _toSnsUserId with None->raise (Field_empty "postSnsInvitationMessage_args.toSnsUserId") | Some _x6579 -> _x6579
  method set_toSnsUserId _x6579 = _toSnsUserId <- Some _x6579
  method unset_toSnsUserId = _toSnsUserId <- None
  method reset_toSnsUserId = _toSnsUserId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "postSnsInvitationMessage_args";
    (match _snsIdType with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsIdType",Protocol.T_I32,2);
      oprot#writeI32(SnsIdType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _snsAccessToken with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsAccessToken",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _toSnsUserId with None -> () | Some _v -> 
      oprot#writeFieldBegin("toSnsUserId",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_postSnsInvitationMessage_args (iprot : Protocol.t) =
  let _str6582 = new postSnsInvitationMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6583,_id6584) = iprot#readFieldBegin in
        if _t6583 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6584 with 
          | 2 -> (if _t6583 = Protocol.T_I32 then
              _str6582#set_snsIdType (SnsIdType.of_i iprot#readI32)
            else
              iprot#skip _t6583)
          | 3 -> (if _t6583 = Protocol.T_STRING then
              _str6582#set_snsAccessToken iprot#readString
            else
              iprot#skip _t6583)
          | 4 -> (if _t6583 = Protocol.T_STRING then
              _str6582#set_toSnsUserId iprot#readString
            else
              iprot#skip _t6583)
          | _ -> iprot#skip _t6583);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6582

class postSnsInvitationMessage_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "postSnsInvitationMessage_result.e") | Some _x6585 -> _x6585
  method set_e _x6585 = _e <- Some _x6585
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "postSnsInvitationMessage_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_postSnsInvitationMessage_result (iprot : Protocol.t) =
  let _str6588 = new postSnsInvitationMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6589,_id6590) = iprot#readFieldBegin in
        if _t6589 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6590 with 
          | 1 -> (if _t6589 = Protocol.T_STRUCT then
              _str6588#set_e (read_talkException iprot)
            else
              iprot#skip _t6589)
          | _ -> iprot#skip _t6589);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6588

class virtual iface =
object (self)
  method virtual getSnsFriends : SnsIdType.t option -> string option -> Int32.t option -> Int32.t option -> snsFriends
  method virtual getSnsMyProfile : SnsIdType.t option -> string option -> snsProfile
  method virtual postSnsInvitationMessage : SnsIdType.t option -> string option -> string option -> unit
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method getSnsFriends snsIdType snsAccessToken startIdx limit = 
    self#send_getSnsFriends snsIdType snsAccessToken startIdx limit;
    self#recv_getSnsFriends
  method private send_getSnsFriends snsIdType snsAccessToken startIdx limit = 
    oprot#writeMessageBegin ("getSnsFriends", Protocol.CALL, seqid);
    let args = new getSnsFriends_args in
      args#set_snsIdType snsIdType;
      args#set_snsAccessToken snsAccessToken;
      args#set_startIdx startIdx;
      args#set_limit limit;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSnsFriends  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSnsFriends_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSnsFriends failed: unknown result")))
  method getSnsMyProfile snsIdType snsAccessToken = 
    self#send_getSnsMyProfile snsIdType snsAccessToken;
    self#recv_getSnsMyProfile
  method private send_getSnsMyProfile snsIdType snsAccessToken = 
    oprot#writeMessageBegin ("getSnsMyProfile", Protocol.CALL, seqid);
    let args = new getSnsMyProfile_args in
      args#set_snsIdType snsIdType;
      args#set_snsAccessToken snsAccessToken;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSnsMyProfile  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSnsMyProfile_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSnsMyProfile failed: unknown result")))
  method postSnsInvitationMessage snsIdType snsAccessToken toSnsUserId = 
    self#send_postSnsInvitationMessage snsIdType snsAccessToken toSnsUserId;
    self#recv_postSnsInvitationMessage
  method private send_postSnsInvitationMessage snsIdType snsAccessToken toSnsUserId = 
    oprot#writeMessageBegin ("postSnsInvitationMessage", Protocol.CALL, seqid);
    let args = new postSnsInvitationMessage_args in
      args#set_snsIdType snsIdType;
      args#set_snsAccessToken snsAccessToken;
      args#set_toSnsUserId toSnsUserId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_postSnsInvitationMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_postSnsInvitationMessage_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 3
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_getSnsFriends (seqid, iprot, oprot) =
    let args = read_getSnsFriends_args iprot in
      iprot#readMessageEnd;
      let result = new getSnsFriends_result in
        (try
          result#set_success (handler#getSnsFriends args#get_snsIdType args#get_snsAccessToken args#get_startIdx args#get_limit);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSnsFriends", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSnsMyProfile (seqid, iprot, oprot) =
    let args = read_getSnsMyProfile_args iprot in
      iprot#readMessageEnd;
      let result = new getSnsMyProfile_result in
        (try
          result#set_success (handler#getSnsMyProfile args#get_snsIdType args#get_snsAccessToken);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSnsMyProfile", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_postSnsInvitationMessage (seqid, iprot, oprot) =
    let args = read_postSnsInvitationMessage_args iprot in
      iprot#readMessageEnd;
      let result = new postSnsInvitationMessage_result in
        (try
          (handler#postSnsInvitationMessage args#get_snsIdType args#get_snsAccessToken args#get_toSnsUserId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("postSnsInvitationMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "getSnsFriends" self#process_getSnsFriends;
    Hashtbl.add processMap "getSnsMyProfile" self#process_getSnsMyProfile;
    Hashtbl.add processMap "postSnsInvitationMessage" self#process_postSnsInvitationMessage;
end

